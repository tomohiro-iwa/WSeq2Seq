Avoid calling component generators on registerComponent __EoT__
Fix docs . Change bottomTab title to text . __EoT__ I believe there is a type in the docs . The title prop in bottomTab should be text .
increase ios e2e workers __EoT__
fix Documentation link __EoT__
[ V2 ] Fix broken docs links in Readme __EoT__
Added missing bottomTabSelected to ScreenVisibilityListener __EoT__
Update detox package __EoT__ I needed to update the package in order to build the playground project .
[ V2 ] Checking off statusbarhidden for Android __EoT__ Implemented here https : //github.com/wix/react-native-navigation/commit/126f31c2fbf2a59b18ff8cf07f6d6c66fd0834ad In use by playground : https : //github.com/wix/react-native-navigation/blob/v2/playground/src/screens/ModalScreen.js # L15
Missing 'color ' property __EoT__ Missing ` color ` property in the styling docs for the topBar background color .
sideMenu.width should be initialized on viewController init __EoT__ Adresses # 4180 # 4246
Fix iOS 9 setBadgeColor exception __EoT__ Fixes # 4269
Make push with passProps type safe __EoT__ You have C screen where you can go to from two different screens : A and B . You also have to pass some props for screen C when you push that screen . So you do pass props from A and B as you should . Later you add some other prop for screen C that is required . Before this PR you can easily forget to add the new prop for all the places where you are pushing screen C. Now with the generic you can not forget since compiler gives you error ! Tell me what your guys think . I think this would increase type safety a lot ! Example code `` ` typescript // -- -- With this PR -- -- interface SomeProps { someStringProp : string ; } Navigation.push < SomeProps > ( this.props.componentId , { component : { name : Screen.SomeScreen , passProps : { someStringProp : 1 } , // compiler error } , } ) ; Navigation.push < SomeProps > ( this.props.componentId , { component : { name : Screen.SomeScreen , passProps : { someStringProp : 'lol ' } , // everything is fine
[ V2 ] [ iOS ] ShowOverlay Modal , Action Sheet and Alert Under Problem __EoT__ # # # Issue Description I 'm creating a button for the Tab Bar using the show Overlay . It looks like top over features like Overlay Modal , ActionSheet and Alert . I 've used listeners as a workaround for Modal , but I 'm afraid that there will be problems in the next process . Is there a more permanent solution than a temporary solution ? You can even say that if I have to write on the Native side . # # # Steps to Reproduce / Code Snippets / Screenshots `` ` Navigation.showOverlay ( { component : { id : 'car.TabBarIcon ' , name : 'car.TabBarIcon ' , options : { overlay : { interceptTouchOutside : false } , } } } ) ; `` ` < img width= '' 548 '' alt= '' screen shot 2018-10-16 at 16 15 03 '' src= '' https : //user-images.githubusercontent.com/25525515/47018968-ad559c00-d15e-11e8-9eb5-ce5dbbefffa2.png '' > < img width= '' 554 '' alt= '' screen shot 2018-10-16 at 16 14 43 '' src= '' https : //user-images.githubusercontent.com/25525515/47018969-ad559c00-d15e-11e8-85d0-c58c1e04dca4.png '' > < img width= '' 549 '' alt= ''
Enable android load drawable images __EoT__
Update Android Instructions to reactNative57 __EoT__ Updates the instructions to use the latest version of React Native 0.57 'reactNative57 ' instead of 'reactNative56 ' . Using reactNative56 prevented me from creating an Android Build .
Refactored getCurrentLeaf and getCurrentChild __EoT__
Clean up some implicit Anys __EoT__ I noticed that ` noImplicitAny ` is turned off so I turned it on while I was working on this PR . So I decided to add more type safety to the project since now lots of stuff is untyped which is bad if you are programming with TypeScript : ) I can make another PR when this gets merged so I rather do smaller PRs that one huge one . Tell me what do you guys think : )
[ v2 ] TitleBar - Back Text to Large Title Briefly Shows Small Title __EoT__ # # # Issue Description **TitleBar** > When going back in navigation stack , switching from small title to large title briefly shows small title . # # # Steps to Reproduce / Code Snippets / Screenshots * In RNN v2 playground : * Add ` largeTitle : { visible : true } ` to TextScreen.js ` topBar ` options . * Add ` visible : true ` to PushedScreen ` topbar ` options . * In Playground : * Click ` Switch to tab based app ` * Click ` Push ` to push subview * Click Back button in nav header * Back text first animates to small title and then animates to large title . ! [ before ] ( https : //user-images.githubusercontent.com/2394698/46635805-82d66400-cb0a-11e8-8046-11ca7eadbf6c.gif ) * Expected behavior ( I was able to hack an older version to get this but could n't get it working in latest ) : ! [ after ] ( https : //user-images.githubusercontent.com/2394698/47458432-5f5c1c00-d78e-11e8-8186-e348e628fbb8.gif ) -- - # # # Environment * React Native Navigation version : Latest master ( d7e5400 ) * React Native version : v0.51 (
[ v2 ] Podspec did not match repo 's tag naming __EoT__
Update link to directly point to v2 documentation __EoT__ The [ For V2 docs click here ] ( https : //wix.github.io/react-native-navigation/ # / ) link in the V1 documentation now directly send you to the V2 docs .
Fix merging buttons second time does n't work __EoT__
Update RNNSplashScreen.m __EoT__ Fixed app opening on iphoneX family ( X , XS , XSMAX , XR ) When you do n't have a launch image and you have a Default-812h.png file in your xcassets ( you would get a black screen )
Fix commands handling on overlays __EoT__ Allow commands to work on overlays - fixes # 4225 - Removed overlay store , handle components in one place - Prevent overlay detach on ` setRoot ` by removing components by specific window
Fix topBar.title.color on popping __EoT__ Adresses # 4224
Default options refactor __EoT__ This PR also fixes # 4214
[ V2 ] [ Android ] destroy views on catalyst instance destroy to fix android crash __EoT__ this fixes redscreen/crash when ` ReactInstaceManager # recreateReactContextInBackground ( ) ` is called . This is a V2 adaptation of the previous fix for the same issue on V1 , namely # 3318
Peek and Pop not working in recent versions of V2 __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description Peek and pop not working in more recent versions . Upgraded to version v2.0.2603 and it stopped working . onPress in the next screen is just pushed instantly without peek and pop . It seems to me that in more recent versions the params for preview are empty when it reaches the newVc.options.preview in RNNCommandsHandler.m . It seems that there were some changes in this file between verion 2.0.2563 and 2.0.604 . I belive this commit c64dc499016f3020306b13249242a10ee4e7a1f9 broke it . # # # Steps to Reproduce / Code Snippets / Screenshots Clean install with react v0.57.3 and react navigation v2.0.2603 Pop and peek example from the docs . -- - # # # Environment * React Native Navigation version : 2.0.2603 * React Native version : 0.57.3 * Platform ( s ) ( iOS , Android , or both ? ) : IOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator/Device Ios 12 .
[ V2 ] Overlay closes and opens keyboard on iOS __EoT__ On iOS , calling an overlay while the keyboard is open closes the keyboard . After dismissing the overlay , the keyboard opens again . Is there a reason why this is ? Or can this be considered a bug ? # # STEPS # # - Navigation.push screen with textinput - Focus textinput to load keyboard - Navigation.showOverlay component ( in our case a notification type component with smallish size ) # # RESULT # # As soon as the overlay loads , the keyboard and textinput collapse . When the overlay is dismissed , the keyboard and textinput expand again . We 're using overlays for in-app notifications so this is quite bothersome for the end user in this instance . -- - # # # Environment * React Native Navigation version : ^2.0.2513 * React Native version : 0.55 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : iOS 10/11
Enabled set searchBar and handle onSearchUpdated e2e test __EoT__ Closes # 3923
Fixes detached overlays on setRoot __EoT__ Also fixes # 4184
[ v2 ] [ iOS ] largeTitle not working correctly anymore __EoT__ # # # Issue Description I 'm using largeTitle for iOS and the default behaviour is that when you scroll the content - > it will transform to the small title . This was working in version ` 2.0.2381 ` ( pull to refresh was bugged with large title ) And since ~2.0.2600 ( I tested it with this version and up ) the largeTitle says always and the content is going under the largeTitle . Also the titlebar is transparent instead of white . Pull to refresh is working now.. # # # Steps to Reproduce / Code Snippets / Screenshots Install newest v2 with largeTitle : true and scrollable content . -- - # # # Environment * React Native Navigation version : 2.0.2600 * React Native version : 0.56.0 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Debug
[ V2 ] [ Android ] Auto blur on unmount option __EoT__ This adds an Android-only flag ` blurOnUnmount ` , that if ` true ` when calling ` push ` , ` pop ` , ` showModal ` , ` dismisModal ` , as well as when ` true ` on the component 's ` static options ( passProps ) { ... } ` return value , will cause RNN to check for any focused views when the component the flag was passed for is being unmounted , and blur said view if it exists , causing not just the view to lose focus , but also the soft keyboard to be dismissed . We added this to our fork of RNN to tackle issues stemming from an inability to dismiss the soft keyboard on unmounting components , due to the ` disappear ` / ` unmount ` lifecycle events of the component coming too late for our keyboard dismissal calls to make it across the native < - > js bridge before the component was unmounted . As this functionality is hidden behind a flag and does not alter base functionality , and the issue it seeks to
Fix animation type - # 4180 __EoT__ `` ` js { options : { sideMenu : { animationType : 'door ' // 'parallax ' , 'slide ' , 'slide-and-scale' } } } `` `
Hack to fix when app is stuck on the splash screen . __EoT__ When the navigation activity is killed/restarted by the system , onCreate launches the SplashActivity and kills itself . The new SplashActivity starts context initialization but that is broken in between by the onDestroy of the NavigationActivity we just killed . This fix adds a boolean to disable destruction of js in this case .
Apply modalPresentationStyle and modalTransitionStyle on childWillMov… __EoT__ Fixes # 4134
V2 - Disable side menu ( including using swipe gesture ) for a given component on Android __EoT__ If you have something similar to the code below , it will not disable the side menu if you use the swipe gesture . `` ` Navigation.setRoot ( { root : { sideMenu : { left : { component : { name : SIDEMENU , } , visible : false , enabled : false , } , center : { stack : { id : root , children : [ { component : { name : SWIPE , options : { sideMenu : { left : { component : { name : SIDEMENU , } , visible : false , enabled : false , < -- -- -- This should disable the side menu for the given component but it does not } } } , } , } , ] , } , } , } , } , } ) ; `` ` -- - # # # Environment * React Native Navigation version : ` 2.0.2582 ` * React Native version : ` 0.57.0 ` * Platform ( s ) ( iOS , Android , or both ? )
[ V2 ] [ RNNTabBarController isCustomTransitioned ] : unrecognized selector __EoT__ # # # Issue Description I am trying to push a layout with bottomTabs and getting the following error : < img width= '' 398 '' alt= '' screen shot 2018-10-19 at 5 52 49 pm '' src= '' https : //user-images.githubusercontent.com/2049793/47246042-c746e700-d3c9-11e8-8354-28826745b737.png '' > # # # Steps to Reproduce / Code Snippets / Screenshots This is the code where I try to push the tabs layout . `` ` import { Navigation } from `` react-native-navigation '' ; export const openRecord = ( componentId , recordId ) = > { console.log ( 'COMPID : ' , componentId ) ; Navigation.push ( componentId , { bottomTabs : { id : `` record-tabs '' , children : [ { component : { name : `` record.vaccinations '' , options : { bottomTab : { fontSize : 12 , text : `` Vaccinations '' } } } } , { component : { name : `` record.profile '' , options : { bottomTab : { fontSize : 12 , text : `` Profile '' } } } } ] } } ) ; } ; `` ` -- - # #
[ V2 ] [ iOS ] Badge number showing in other tabs __EoT__ # # # Issue Description I used the following code to set badge to the third tab `` ` javascript Navigation.mergeOptions ( componentId , { bottomTab : { badge : quote.length.toString ( ) } } ) ; `` ` However , this will effect the fourth tab on the right as well . < img width= '' 316 '' alt= '' screen shot 2018-10-20 at 7 52 17 am '' src= '' https : //user-images.githubusercontent.com/659612/47243542-16c6fa80-d43e-11e8-8e72-36ca3fd71926.png '' > # # # Steps to Reproduce / Code Snippets / Screenshots use `` ` javascript Navigation.mergeOptions ( componentId , { bottomTab : { badge : quote.length.toString ( ) } } ) ; `` ` set the badge number would effect other tabs -- - # # # Environment * React Native Navigation version : 2.0.2601 * React Native version : 0.57.1 * Platform ( s ) ( iOS , Android , or both ? ) : iOS
[ V2 ] [ iOS ] topBar.backButton.color broken again in 2.0.2596 __EoT__ # # # Issue Description 2.0.2596 reintroduced # 4150 -- - # # # Environment * React Native Navigation version : 2.0.2596 * React Native version : 0.56 * Platform ( s ) ( iOS , Android , or both ? ) : iOS
Handle rejections - pop and dismissModal __EoT__
[ Android ] Bottom tabs appearing unexpectedly on the next screen in the stack __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description After hiding bottom tabs they are appearing on the next screen pushed to stack . This reproduces only on Android . Works fine on ios . # # # Steps to Reproduce / Code Snippets / Screenshots Hide bottom tabs on any screen using ` { bottomTabs : { visible : false , drawBehind : true } } ` . Push a screen to the same stack . On ios bottomTabs will stay hidden . On android they will appear . This is inconsistent . -- - # # # Environment * React Native Navigation version : 2 * Platform ( s ) ( iOS , Android , or both ? ) : Android * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator Android 6
bottomTabs backgroundColor not working __EoT__ Reproduce : use style as below : `` ` js bottomTabs : { visible : true , animate : false , // currentTabIndex : 0 , // currentTabId : 'currentTabId ' , testID : 'bottomTabsTestID ' , drawBehind : false , backgroundColor : 'white ' , fontSize : 10 , titleDisplayMode : 'alwaysShow' } `` ` # # # Environment * React Native Navigation version : 2.0.2585 * React Native version : 0.57.1 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : simulator ! [ screen shot 2018-10-17 at 5 36 42 pm ] ( https : //user-images.githubusercontent.com/659612/47066899-47871400-d233-11e8-84be-f4d8ac4018d4.png )
Added unit test coverage on iOS __EoT__
[ V2 ] [ iOS ] topBar.backButton.color broken after 2.0.2583 or 2.0.2584 __EoT__ # # # Issue Description topBar.backButton.color on iOS ( PR # 3999 ) is n't working after 2.0.2583 or 2.0.2584 . Ca n't confirm the exact version , since 2.0.2583 does not work for me . EDIT : I was previously saying that the fix for # 4079 was causing this , but it may not be the case as I 'm experiencing the issue even on 2.0.2584 -- - # # # Environment * React Native Navigation version : 0.56 * React Native version : 2.0.2586 * Platform ( s ) ( iOS , Android , or both ? ) : iOS
Add docs about ` overrideBackPress ` to ` showModal ` __EoT__
Options resolving refactor __EoT__ - Bind RNNLayoutProtocol to presenters - Merge options will now merge to the specific layout provided ( component , stack , sideMenu ) - Options will be applied by the correct presenter - Options will bubble up to all parents on leaf viewWillAppear - Added unit tests for presenters
Destroy navigation activity layouts on catalyst instance destroy __EoT__ The changes in this PR are to address # 2331 & Microsoft/react-native-code-push # 1144 . I 've tried it on a few devices and it seems to consistently prevent the crash from occurring ; that said , I 'm a bit wary that the ` runOnUiThread ` is introducing a race condition that may fail to prevent the bug under the right circumstances . Any thoughts on tackling this ( potential ) issue ? Edit : I should also mention I 'm aware that V1 PRs are not being accepted at this time , but wanted to submit this at least for others that are struggling with this bug to implement the solution on their forks .
Update documentation to avoid confusion on component layout type __EoT__ After a while using v1 , I finally got to try v2 , but I had been stuck once with not being able to run the app on iOS ( not sure where I was wrong ) . Second try , I managed to run it but I stayed stuck on my one screen for an hour , trying to navigate to another , seeing no error , but seeing the screen was mounted but nowhere to be found . To avoid that to happen to someone else , I propose adding these two sentences in the docs ( which are a bit repetitive , but hopefully can save some time to the next person who wants to give it a try )
[ v2 ] add support for react-native 0.57.0 __EoT__
Support Android 9.0 Pie and update buildToolsVersion __EoT__ I know you guys are focusing on v2 , but Android 9.0 was released and v2 was not yet ready , so this commit supports latest Android version . If you try ` react-native-navigation ` with Android 9.0 , it simply does n't work ( white screen , React context not loaded ) . Can you give this PR a chance ?
Fixed options merging issues , removed optionsResolver __EoT__ This PR solves latest mergeOptions issues : # 4094 , # 4079 , # 4053 - Removed optionsResolver . - mergeOptions apply on leafViewController ( as it was in previous versions ) .
Allows override of DefaultSplashLayout by child class __EoT__ This is mentionned in https : //github.com/wix/react-native-navigation/issues/3905
[ V2 ] docs : Update topBar-buttons.md __EoT__ Hi there , it seems ` rightButtons ` should be inside ` topBar `
[ V2 ] [ iOS ] Sidemenu layout inside bottomTabs layout weird behaviour __EoT__ # # # Issue Description Sidemenu layout inside bottomTabs layout bugs out on iOS . The icon disappears and a black bar appears under as if it is miscalculating the bottomTabs height . Works perfectly on Android . I also noticed that merging options for the sidemenu layout on iOS fails . So trying to open/close the sidemenu with a button using the sidemenu 's components ID fails . # # # Steps to Reproduce / Code Snippets / Screenshots Notice how the icon dissapears and there is a black bar ? Layout looks like : `` ` js root : { bottomTabs : { children : [ { // Tab 1 - Homescreen stack : { children : [ { component : { name : 'baseNet.HomeTab ' , } , } , ] , options : { bottomTab : { text : 'Home ' , icon : loadedIconSource [ 'fa-home ' ] , } , } , } , } , { // Tab 2 - Email < -- -- THIS ONE GIVES PROBLEMS sideMenu : { id : 'baseNet.EmailSideMenu ' , left : {
revert V2 fix jenkins link __EoT__
Fix Jenkins link badge __EoT__
Check if value is double instead of expecting exception __EoT__ Fixes failing Android unit tests when using RN 55+ since JavaOnlyMap.getInt has changed . Before this change , keyDouble 123.456 would successfully parse to 123 with getInt . Failing tests : 1. com.reactnativenavigation.parse.parsers.JSONParserTest > parsesMap 2. com.reactnativenavigation.parse.parsers.JSONParserTest > parsesArrays
[ v2 ] [ android ] Property `` enabled '' for SideMenu __EoT__ Fix for the issue : https : //github.com/wix/react-native-navigation/issues/3835
Bottom tabs are broken at 2.0.2563 version __EoT__ # # # Issue Description On version ` 2.0.2562 ` my bottom bar looks like this : ! [ image ] ( https : //user-images.githubusercontent.com/12229968/46144762-978f3e00-c266-11e8-81e9-7ec13f385e57.png ) After updating to ` 2.0.2563 ` or later the bottom bar looks like this : ! [ image ] ( https : //user-images.githubusercontent.com/12229968/46144757-92ca8a00-c266-11e8-80e5-c825ac2714c4.png ) Also what I noticed that if I click the tab they are invisible and after the click they appear again ! [ image ] ( https : //user-images.githubusercontent.com/12229968/46144794-af66c200-c266-11e8-8518-a8f6b10604e4.png ) So what happened on version 2.0.2563 so that some bottom tabs are invisible ? 🤔 Here is the comparison between those tags https : //github.com/wix/react-native-navigation/compare/2.0.2562 ... 2.0.2563 -- - # # # Environment * React Native Navigation version : 2.0.2563 * React Native version : 0.54.4 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator
[ V2 ] [ iOS ] Sidemenu layout inside bottomTabs layout weird behaviour __EoT__ # # # Issue Description Sidemenu layout inside bottomTabs layout bugs out on iOS . The icon disappears and a black bar appears under as if it is miscalculating the bottomTabs height . Works perfectly on Android . I also noticed that merging options for the sidemenu layout on iOS fails . So trying to open/close the sidemenu with a button using the sidemenu 's components ID fails . # # # Steps to Reproduce / Code Snippets / Screenshots Notice how the icon dissapears and there is a black bar ? Layout looks like : `` ` js root : { bottomTabs : { children : [ { // Tab 1 - Homescreen stack : { children : [ { component : { name : 'baseNet.HomeTab ' , } , } , ] , options : { bottomTab : { text : 'Home ' , icon : loadedIconSource [ 'fa-home ' ] , } , } , } , } , { // Tab 2 - Email < -- -- THIS ONE GIVES PROBLEMS sideMenu : { id : 'baseNet.EmailSideMenu ' , left : {
Fix backButton properties on iOS __EoT__ This PR fixes ` backButton ` properties on iOS . Previously for example ` color ` prop did n't work . I made the ` RNNBackButtonOptions.m ` file simple as possible because now it was too complicated . @ guyca Please tell if I deleted something that should n't been removed 😉 # # Demos `` ` typescript Navigation.setDefaultOptions ( { topBar : { backButton : { } , } , } ) ; `` ` ! [ image ] ( https : //user-images.githubusercontent.com/12229968/45771202-27bcfa00-bc4d-11e8-84bb-f9e50938a36e.png ) `` ` typescript Navigation.setDefaultOptions ( { topBar : { backButton : { color : 'red ' } , } , } ) ; `` ` ! [ image ] ( https : //user-images.githubusercontent.com/12229968/45771240-4ae7a980-bc4d-11e8-9511-d1d26c008d75.png ) `` ` typescript Navigation.setDefaultOptions ( { topBar : { backButton : { showTitle : false } , } , } ) ; `` ` ! [ image ] ( https : //user-images.githubusercontent.com/12229968/45771296-681c7800-bc4d-11e8-9de0-874983a9c318.png ) `` ` typescript Navigation.setDefaultOptions ( { topBar : { backButton : { title : 'Henrik ' } , } , } ) ; `` ` ! [ image ] ( https : //user-images.githubusercontent.com/12229968/45771370-99954380-bc4d-11e8-9992-9acba229e47e.png ) `` ` typescript Navigation.setDefaultOptions ( { topBar :
Options rewrite __EoT__ Fixes # 3787 * Better options handling - make sure that options passes to child controller will be passed to its parent controller as well . * Each controller apply its own style using a presenter
Add BottomTabs elevation option __EoT__ # # Overview - Add Android specific options elevation in BottomTabs - Update docs with new styling option ( ahbottomnavigation use by default 8dp elevation )
Support styling on back button on iOS __EoT__ This resolves # 3454 and resolves # 3731 We can now specify : `` ` js Navigation.setDefaultOptions ( { topBar : { backButton : { color : `` red '' , fontFamily : `` Nunito-SemiBold '' , fontSize : 18 , title : `` boo '' } } } ) ; `` `
Refactor options __EoT__
Ensure parent options are applied correctly __EoT__
[ v2 ] [ docs ] Improving documentation on side menu config __EoT__ Improving the documentation on side menu apps to include info about topBars in side menu apps .
Refactor options __EoT__
[ V2 ] disabled sideMenu + iOS pop gestures do n't play nicely together __EoT__ # # # Issue Description I believe there is a subtle issue happening when using a stack layout within a SideMenu layout . Namely , when dynamically disabling the left SideMenu when pushing screens to the stack ( to ensure that a right swipe pops from the stack rather than opening the SideMenu ) , the pop gesture is extremely hard to trigger . I think this is due to the gesture handler for the SideMenu is still active and attempting to handle the right swipe but the action is terminated because the SideMenu is disabled . If so , perhaps the sideMenu gesture handling should be disabled while the sideMenu itself is disabled ? Or there could be another workaround . # # # Steps to Reproduce / Code Snippets / Screenshots 1 . Create a ` stack ` layout nested inside of a ` sideMenu ` layout ( with ` left ` and ` center ` components ) 2 . Push a new screen onto the stack while simultaneously disabling the left side menu . 3 . Attempt to swipe right in order
[ v2 ] Refactor preview api __EoT__ I am creating this pull request to run the tests again . DNM
Refactored modals and added tests __EoT__
[ V2 ] Ca n't set default options for topBar anymore __EoT__ # # # Issue Description Since the last update , no default options can be passed for the TopBar . The default is always taken from the operating system . However , if the options are set individually for each TopBar , it works . # # # Steps to Reproduce / Code Snippets / Screenshots Does nothing since last update : `` ` javascript Navigation.setDefaultOptions ( { topBar : { backButton : { showTitle : false } , hideBackButtonTitle : true , buttonColor : `` red '' } } ) ; `` ` -- - # # # Environment * React Native Navigation version : `` react-native-navigation '' : `` ^2.0.2538 '' , * React Native version : `` react-native '' : `` 0.56.0 '' , * Platform ( s ) ( iOS , Android , or both ? ) : ios * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator
Allow also number to be passed __EoT__ I have added number to be valid screen name too because then you can easily use enums to define your screen . Like this `` ` export enum Screen { Login = 1 , Home , Settings , } `` ` This way I just add new enum name and it will generate new id ( number ) for it . This reduces boilerplate when defining screen names
[ V2 ] [ iOS ] Selecting a tab by ComponentId/TabIndex __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description Selecting a tab by component id or tab index working as excepted on Android but does not any affect on iOS . # # # Steps to Reproduce / Code Snippets / Screenshots `` ` javascript Nav.mergeOptions ( `` pharma.tabs '' , { bottomTabs : { currentTabId : 'tab.map' } } ) ; `` ` -- - # # # Environment * React Native Navigation version : 2.0.2478 * React Native version : 0.56 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator/Debug
[ v2 ] ( restore ) Typings for styling options and layouts __EoT__ This is an updated version of the typings . Is there any way we can test this on Wix 's own app repo before merging , or does it have to be published ? Also the ts error log would have been helpful too
Merge options __EoT__
update hoist-non-react-statics to 3.x.x __EoT__ Fix crash when using the new ` registerComponentWithRedux ` API https : //github.com/wix/react-native-navigation/pull/3675 # issuecomment-413923307
Add sensorLandscape orientation option for Android to allow landscape… __EoT__ … and reverseLandscape .
Refactored modals __EoT__
[ V2 ] Added sideMenu style options similar to V1 options __EoT__ Available in V1 but missing from V2 are the ` animationType ` and ` shouldStretchDrawer ` drawer/sideMenu settings . This PR adds these options into V2 . Also added ` animationVelocity ` option so that you can increase the speed of the sideMenu opening/closing . With this PR you can configure your sideMenu options as such : `` ` sideMenu : { left : { shouldStretchDrawer : false , animationVelocity : 3750 , animationType : 'parallax ' , } , } `` `
fixes custom buttons __EoT__
Support showing Overlays and Modals before root is set __EoT__ Closes # 3899 Closes # 3885
Reduce package size __EoT__ Update .npmignore
Revert `` Duplicate headers copy fix '' __EoT__ Reverts wix/react-native-navigation # 3774 This caused xcode archiving failure .
Update compileSdkVersion version __EoT__ when compileSdkVersion is 25 , below error was occured in react native 0.56.0 . `` No resource found that matches the given name : attr 'android : keyboardNavigationCluster ' '' so i have to change compileSdkVersion to 26 . Please add this push on your repository . Thanks
[ v2 ] Bottom tabs visibility problem __EoT__ # # # Issue Description We have an app with bottom tabs . We want to navigate to another screen with hiding the bottom tabs . It 's working but causes a UI bug when we go back , appears a white area ( exact same height as bottom tabs ) . You can see below . # # # Steps to Reproduce / Code Snippets / Screenshots Let 's assume first screen is HomeScreen ( with bottom tabs ) and second screen is CommentsScreen . Just pass `` ` { bottomTabs : { visible : false , animated : true } } `` ` to CommentsScreen to hide bottom tabs . ! [ 2018-07-12 18 21 09 ] ( https : //user-images.githubusercontent.com/22980987/42643030-da25ac42-8600-11e8-98f4-ecdb5e477a00.gif ) ! [ 2018-07-12 18 21 57 ] ( https : //user-images.githubusercontent.com/22980987/42643032-da4f9a0c-8600-11e8-97b2-3ab440b76137.gif ) -- - # # # Environment * React Native Navigation version : v2 latest * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : All
[ v1 ] [ Android ] react-native v.0.57 compatibility / remove deprecated UIImplementationProvider __EoT__ ` com.facebook.react.uimanager.UIImplementationProvider ` has been removed as of react-native @ 0.57 ( [ commit ] ( https : //github.com/facebook/react-native/commit/506f92083806e91a90d9a213bcdd05ab3b2ba888 ) ) , breaking react-native-navigation v1 on android . Hence removing the usage of UIImplementationProvider in react-native-navigation . I know , all your efforts are on v2 already , but it would be great not to see v1 compatibility with react-native break too soon . : )
[ v2 ] Bottom tabs visibility problem __EoT__ # # # Issue Description We have an app with bottom tabs . We want to navigate to another screen with hiding the bottom tabs . It 's working but causes a UI bug when we go back , appears a white area ( exact same height as bottom tabs ) . You can see below . # # # Steps to Reproduce / Code Snippets / Screenshots Let 's assume first screen is HomeScreen ( with bottom tabs ) and second screen is CommentsScreen . Just pass `` ` { bottomTabs : { visible : false , animated : true } } `` ` to CommentsScreen to hide bottom tabs . ! [ 2018-07-12 18 21 09 ] ( https : //user-images.githubusercontent.com/22980987/42643030-da25ac42-8600-11e8-98f4-ecdb5e477a00.gif ) ! [ 2018-07-12 18 21 57 ] ( https : //user-images.githubusercontent.com/22980987/42643032-da4f9a0c-8600-11e8-97b2-3ab440b76137.gif ) -- - # # # Environment * React Native Navigation version : v2 latest * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : All
Add addtional common problem for cache reset __EoT__ When fresh installing ` v2 ` branch some time getting issues with bundling . Due to ` rn-packager ` cache . Normal ` npm start -- -- reset-cache ` was not working properly . So had to reset the cache manually . Maybe its because of the start script is different from regular react native app setup . # # Error Description `` ` Metro Bundler ready . Loading dependency graph , done . Bundling ` index.js ` [ development , non-minified ] 0.0 % ( 0/2 ) , failed . error : bundling failed : ambiguous resolution : module ` /Users/mac/react-native-navigation/playground/src/app.js ` tries to require ` react-native ` , but there are several files providing this module . You can delete or fix them : * ` /Users/mac/react-native-navigation/example/node_modules/react-native/package.json ` * ` /Users/mac/react-native-navigation/node_modules/react-native/package.json ` `` ` As submitted in other closed issues , resetting the cache fixed it . So adding it into common problems section .
Update Installing.md __EoT__ Fix an imprecise path name , and fix a meaningful typo ` No Run -- > Now run ` .
Update Installing.md with proper name for Bundle Root __EoT__ In React-Native v51+ the bundle roots are no longer platform specific ( ` index.ios ` or ` index.android ` ) . In the current versions there is only one ` index.js ` file for both platforms . Yet in the provided ` AppDelegate.m ` file the ` jsBundleURLForBundleRoot ` is still written as ` index.ios ` . If you try to build from this documentation with ` react-native ` v56 you will get the following error from MetroBundler : ` UnhandledPromiseRejectionWarning : Error : File not found : index.ios.js in any of the project roots ( /Users/skingman/projects/niche-mobile-app ) ` . It should be looking for ` index.js ` . I assume this would be the case for the other supported versions of ` react-native ` ( 51+ ) .
[ v2 ] [ docs ] URLs are case sensitive __EoT__ Fixing 404 not found
[ v2 ] Fix setStackRoot animation documentation __EoT__
[ v2 ] Fix some typo issues . __EoT__ # # # Motivation : Fix some typo issues of ` v2 ` document .
Show yellow box when a TopBar button was pressed event was not handled __EoT__
Button unmount __EoT__
Unmount react views when dismissing deep modals __EoT__ Currently , react views are unmounted when modals are decalocated . This works as expected when dismissing top most Modals , but when dismissing a deep modal there are some quirks . We keep a ref to the modal and actually dismiss it when it becomes top most . This means that components are not unmounted when modal is supposedly dismissed , but rather when all modals on top of it are dismissed . Another issue is that the promise is resolved not as expected , it is resolved when the modal is dealocated by the system later on . When dismissing deep modals , we should unmount all react views and resolve the promise immediately .
fix custom header __EoT__
Upgrade to detox 8.x.x __EoT__
Handle back only if root exists __EoT__ This commit fixes a crash when hardware back button was pressed before root was set .
[ v2 ] [ docs ] Add diff syntax highlighting to docs __EoT__ Before < img width= '' 492 '' alt= '' screenshot 2018-08-15 18 07 21 '' src= '' https : //user-images.githubusercontent.com/3706755/44173973-f6826480-a0b7-11e8-9662-cc40f7f802ce.png '' > After < img width= '' 493 '' alt= '' screenshot 2018-08-15 18 06 25 '' src= '' https : //user-images.githubusercontent.com/3706755/44173977-faae8200-a0b7-11e8-89a9-8e06a3d41644.png '' >
[ v2 ] Bottom tabs visibility problem __EoT__ # # # Issue Description We have an app with bottom tabs . We want to navigate to another screen with hiding the bottom tabs . It 's working but causes a UI bug when we go back , appears a white area ( exact same height as bottom tabs ) . You can see below . # # # Steps to Reproduce / Code Snippets / Screenshots Let 's assume first screen is HomeScreen ( with bottom tabs ) and second screen is CommentsScreen . Just pass `` ` { bottomTabs : { visible : false , animated : true } } `` ` to CommentsScreen to hide bottom tabs . ! [ 2018-07-12 18 21 09 ] ( https : //user-images.githubusercontent.com/22980987/42643030-da25ac42-8600-11e8-98f4-ecdb5e477a00.gif ) ! [ 2018-07-12 18 21 57 ] ( https : //user-images.githubusercontent.com/22980987/42643032-da4f9a0c-8600-11e8-97b2-3ab440b76137.gif ) -- - # # # Environment * React Native Navigation version : v2 latest * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : All
[ V2 ] dismissModal does n't await __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description It seems that ` await dismissModal ( componentId ) ` does n't work . The modal should be shown right after dismissing is also getting closed . # # # Steps to Reproduce / Code Snippets / Screenshots `` ` await Navigation.dismissModal ( 'one ' ) ; Navigation.showModal ( 'two ' ) ; `` ` Expected modal 'one ' to be dismissed and the 'two ' to be shown . Actually the 'two ' does n't show . -- - # # # Environment * React Native Navigation version : 2 * React Native version : * Platform ( s ) ( iOS , Android , or both ? ) : checked on iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator
Fix diff not rendering properly __EoT__ The diff does not render properly on [ the website ] ( https : //wix.github.io/react-native-navigation/v2/ # /docs/Installing ? id=you-can-use-react-native-navigation-o ) . I believe the proposed change should fix this .
[ v2 ] [ docs ] Added showcase section __EoT__ Added playground and Hekla for Hacker News . Closes # 3677
[ v2 ] [ doc ] Update Installing.md __EoT__ Target react-native 0.56 version Fix ` MainActivity.java ` and ` MainApplication.java ` with a working solution
[ v2 ] [ docs ] Fixed a typo . __EoT__ Changed `` assums '' to `` assumes '' .
Tab icon disappears when calling setStackRoot __EoT__
setStackRoot animation support __EoT__ `` ` options : { animations : { setStackRoot : { enable : false } } } `` `
Button color __EoT__
[ v2 ] Typings for styling options and layouts __EoT__ Added typings of all the configuration options and layouts . - [ x ] options - [ x ] options docs - [ x ] layout - [ x ] layout docs They also include documentation in TSDoc format for autocomplete like this : ! [ image ] ( https : //user-images.githubusercontent.com/180773/43224221-9452972a-9023-11e8-908c-4bc4ccd1e3a2.png )
[ v2 ] Refactor peek and pop __EoT__ A couple of reasons for this refactor : 1 . The event system was changed in RNNv2 so the preview events were commented out , hence not working . 2 . ` < Navigation.Element / > ` could not be nested , so that solution did n't work for many use cases ( even though it was a cool idea ) . 3 . Handling touches for determining if we should do a screen push or a peek is a very hard problem that I feel like RNN should ship a solution with . 4 . Integrating the system into external View Controllers was n't possible . # # # TODO - [ x ] Documentation - [ x ] previewCompleted event - [ x ] Component to handle touches and prevent bad things to happen - [ x ] moved the previewContext logic into a callback that is attached to the VC - [ x ] Tests and coverage # # # Breaking changes - ` preview.elementId ` is now ` preview.reactTag ` - ` < Navigation.Element / > ` is now ` < Navigation.TouchablePreview / > ` for handling onPress
[ v2 ] Typings for styling options and layouts __EoT__ Added typings of all the configuration options and layouts . - [ x ] options - [ x ] options docs - [ x ] layout - [ x ] layout docs They also include documentation in TSDoc format for autocomplete like this : ! [ image ] ( https : //user-images.githubusercontent.com/180773/43224221-9452972a-9023-11e8-908c-4bc4ccd1e3a2.png )
Update the docs setting height and width on the sideMenu Options . __EoT__
[ v2 ] Fix migration topBar fontSize example on docs __EoT__ On *Migration from V1 › Options* the ` navBarTextFontSize ` to ` topBar title fontSize ` example was set to ` 'red ' ` , this PR changes it to the default value , 18 .
[ v2 ] Shared element transition android __EoT__
[ v2 ] Moved all @ types from dependencies to devDependencies in package.json __EoT__ Placing ` @ types ` as dependencies in ` package.json ` may cause build conflicts/errors when using different versions of prop-types , react and react-native in the project , as follows : `` ` ./node_modules/ @ types/prop-types/index.d.ts ( 12,46 ) : error TS1005 : ' ; ' expected . ./node_modules/ @ types/prop-types/index.d.ts ( 12,75 ) : error TS1005 : ' ; ' expected . ./node_modules/ @ types/prop-types/index.d.ts ( 12,99 ) : error TS1005 : ' ; ' expected . ./node_modules/ @ types/prop-types/index.d.ts ( 14,54 ) : error TS1005 : ' ; ' expected . ./node_modules/ @ types/prop-types/index.d.ts ( 14,78 ) : error TS1005 : ' ; ' expected . ./node_modules/ @ types/prop-types/index.d.ts ( 14,81 ) : error TS1109 : Expression expected . ./node_modules/ @ types/prop-types/index.d.ts ( 14,97 ) : error TS1109 : Expression expected . ./node_modules/ @ types/prop-types/index.d.ts ( 14,122 ) : error TS1005 : ' ; ' expected . ./node_modules/ @ types/prop-types/index.d.ts ( 14,130 ) : error TS1128 : Declaration or statement expected . ./node_modules/ @ types/prop-types/index.d.ts ( 14,138 ) : error TS1005 : ' , ' expected . ./node_modules/ @ types/prop-types/index.d.ts ( 27,48 )
[ v2 ] Refactor peek and pop __EoT__ A couple of reasons for this refactor : 1 . The event system was changed in RNNv2 so the preview events were commented out , hence not working . 2 . ` < Navigation.Element / > ` could not be nested , so that solution did n't work for many use cases ( even though it was a cool idea ) . 3 . Handling touches for determining if we should do a screen push or a peek is a very hard problem that I feel like RNN should ship a solution with . 4 . Integrating the system into external View Controllers was n't possible . # # # TODO - [ x ] Documentation - [ x ] previewCompleted event - [ x ] Component to handle touches and prevent bad things to happen - [ x ] moved the previewContext logic into a callback that is attached to the VC - [ x ] Tests and coverage # # # Breaking changes - ` preview.elementId ` is now ` preview.reactTag ` - ` < Navigation.Element / > ` is now ` < Navigation.TouchablePreview / > ` for handling onPress
Update Installing docs __EoT__ - Added missing step : Ignoring the build variants that we do n't use . -- Related issues : https : //github.com/wix/react-native-navigation/issues/3388 and https : //github.com/wix/react-native-navigation/issues/3505 - Converged Step 2 and 3 into one step since they both required tweaking according to the React-Native version a project uses . Regression possibility : I might have broken a link to the docs ?
[ v2 ] [ iOS ] Simplify searchBarHiddenWhenScrolling making its behaviour default to iOS one __EoT__ Fixes https : //github.com/wix/react-native-navigation/issues/3490
[ v2 ] Add badgeColor option to bottomTab __EoT__ This commit adds the badgeColor option , to customize the color of the badge .
Small Typo Fix __EoT__ `` more then one screen '' should be `` more than one screen ''
Remove SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN flag from root layout __EoT__ The flag was initially set to prevent the root layout from being pushed down when showing full screen modals . This is n't the right approach and it also messed up keyboard handling . To prevent the root layout from being pushed down in this scenario we should probably handle window insets
[ v2 ] Overlay is showing above system dialogs like alerts __EoT__ # # # Issue Description ! [ image ] ( https : //user-images.githubusercontent.com/7311462/43097062-342bf742-8ebb-11e8-9e6d-c840ccf0baef.png ) # # # Steps to Reproduce / Code Snippets / Screenshots 1 . Show any overlay element 2 . Show any system dialog like ` alert ( 'Foo ' ) ; ` Expected result : Overlay is above everything excluding system UI Actual result : Overlay is above everything # # # Note Do you think adding some z-index to overlays and modals could be good idea too ? In some cases you might want modal to be above overlay . -- - # # # Environment * React Native Navigation version : 2.0.2425 * React Native version : 0.56.0 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : every iOS device
Update Installing.md __EoT__
Dont set back button if leftButton is decalred dynamically __EoT__
Support default button options __EoT__ `` ` js options : { topBar : { leftButtons : { color : 'red ' , fontFamily : 'HelveticaNeue-CondensedBold ' , fontSize : 13 , disabledColor : 'grey' } , rightButtons : { } } } `` `
[ V2 ] options.animation.showModal not working __EoT__ # # # Issue Description When I show a modal without any animation enabled the opening transition persists . The dismiss modal animation is properly disabled . Here 's my function : `` ` Navigation.showModal ( { component : { name : componentName , passProps : props , options : { modalPresentationStyle : `` overCurrentContext '' , animations : { showModal : { enable : false } , dismissModal : { enable : false } } , } } } ) ; `` ` I 've isolated the breaking RNN version to be 2.0.2401 . My function works in versions up to 2.0.2401 but nothing after . -- - # # # Environment * React Native Navigation version : ^2.0.2401 * React Native version : 0.56 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator/Device Debug/Release
TopBar flashes briefly when showing a screen with TopBar hidden __EoT__ Noticeable in ` WelcomeScreen.js `
[ V2 ] Can not show more than two overlays at the same time __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description Showing more than two overlays was working perfectly until this commit https : //github.com/wix/react-native-navigation/commit/fc493775eb5d2900a40054bfef261a3802d93ad2 . Since this commit https : //github.com/wix/react-native-navigation/commit/17286fb55fdb72e6f5df373d8667c4d7afdf8a98 is possible to show **only two** # # # Steps to Reproduce / Code Snippets / Screenshots `` ` javascript Navigation.showOverlay ( { component : { id : `` one '' , name : `` exmaple.NotificationTrayOverlay '' , options : { overlay : { interceptTouchOutside : false } } } } ) ; Navigation.showOverlay ( { component : { id : `` two '' , name : `` example.ProgressOverlay '' , options : { overlay : { interceptTouchOutside : false } } } } ) ; Navigation.showOverlay ( { component : { id : `` three '' , name : `` example.CartOverlay '' , options : { overlay : { interceptTouchOutside : false } } } } ) ; `` ` -- - # # # Environment * React Native Navigation version : 2.0.2422 * React Native version : 0.55 *
[ v2 ] Support UIBarStyle for topBar and bottomTabs __EoT__ Add support for ` barStyle ` property in TopBar and BottomTabs .
Fix error in docs : onSearch event handler __EoT__ The name of the event handler of the topBar for iOS , does not start with `` ` on `` `
Fixes AppBarLayout delayed init of elevation ( issue # 3582 ) __EoT__ When no theme is provided , AppBarLayout styles itself programmatically . What happens is that because these tasks are done asynchronously based on events , its call for `` setElevation '' equivalent can run after RNN calls ! I 'm proposing a fix for # 3582 that create a style for TopBar where elevation=0 and make RNN responsible to set that 4dp elevation value which is default to Android .
[ v2 ] fixed # 3521 __EoT__ Fixed # 3521 # # What to do I fixed it to use the same font as normal even disabled and highlighted # # Screenshots # # # normal < img width= '' 462 '' alt= '' normal '' src= '' https : //user-images.githubusercontent.com/158416/42443124-958a3374-83a7-11e8-821f-f3bc3c4367eb.png '' / > # # # highlighed before | after -- - | -- - < img width= '' 320 '' alt= '' highlighted-before '' src= '' https : //user-images.githubusercontent.com/158416/42443165-b8c072ea-83a7-11e8-82b7-3e03bc6dae19.png '' / > | < img width= '' 320 '' alt= '' highlighted-after '' src= '' https : //user-images.githubusercontent.com/158416/42443519-afdccd94-83a8-11e8-91fd-6d86317b3c96.png '' / > # # # disabled before | after -- - | -- - < img width= '' 461 '' alt= '' disabled-before '' src= '' https : //user-images.githubusercontent.com/158416/42443173-bb12f626-83a7-11e8-951c-1e9030db3c88.png '' / > | < img width= '' 463 '' alt= '' disabled-after '' src= '' https : //user-images.githubusercontent.com/158416/42443557-d61ea9e6-83a8-11e8-96a4-5ebd94b3c68c.png '' / >
Fix app crash bug when reload [ cmd + r ] __EoT__ Sorry , this pull request I created yesterday and merged same day is not sufficient ... https : //github.com/wix/react-native-navigation/pull/3441 `` ` if ( self.view ! = nil ) { - RCTRootView *rootView = self.view ; - NSString *screenName = [ rootView moduleName ] ; `` ` This condition is always true . So , when we reload simulator ( cmd + r ) app reset and back to home of simulator . I modify my commit , so please check .
[ v2 ] Native UI is hidden behind overlays __EoT__ # # # Issue Description When using ` Navigation.showOverlay ` on the root screen , nothing seems to happen when calling an ` ActionSheetIOS ` . Calling it again will show it correctly . After then closing the overlay , the first ` ActionSheetIOS ` is revealed . Calling the sheet from an overlay while in a modal _does_ work as expected . # # # Steps to Reproduce / Code Snippets / Screenshots 1 . Call ` Navigation.showOverlay ` 2 . Call ` ActionSheetIOS ` twice ; only one will appear , the second time 3 . Dismiss the overlay , first ` ActionSheetIOS ` is revealed -- - # # # Environment * React Native Navigation version : 2.0.2269 * React Native version : 0.55.2 * Platform ( s ) : iOS , Android unknown * Device info : Simulator , iPhone X , iOS 11
[ V2 ] registerBottomTabSelectedListener callback falls out of sync after setting tab __EoT__ # # # registerBottomTabSelectedListener callback falls out of sync after setting tab programmatically via ` mergeOptions ` After selecting new tab [ programmatically via ` mergeOptions ` ] ( https : //github.com/wix/react-native-navigation/blob/4c48ad7c37ecdcaa18af06194303e635d1a92556/playground/src/screens/TextScreen.js # L71 ) , ` registerBottomTabSelectedListener ` callback receives stale property ` unselectedTabIndex ` - immediately after the fact , when you press any tab button , the callback receives correct ` selectedTabIndex ` , but incorrect ` unselectedTabIndex ` , i.e . it holds index of the tab where you programmatically selected new tab . # # # Steps to Reproduce / Code Snippets / Screenshots [ FILL THIS OUT - It will be extremely helpful ] -- - # # # Environment * React Native Navigation version : 2.0.2407 * React Native version : 0.53.3 * Platform ( s ) ( iOS , Android , or both ? ) : both * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator iPhone 6 , iOS 11.4 , Debug
Problem with building React-Native-Navigation __EoT__ # # # Issue Description I am trying to build my project in Microsoft App Center but when it tries to build and install the packages , React-Native-Navigation produces this error . **RCTFont.h:21:37 : error : this function declaration is not a prototype** I know it is React-Native-Navigation because I have gone in and had to turn that function into a prototype myself locally . But since this is not local I can not make the changes myself and it would be nice if you guys could update the code . # # # Steps to Reproduce / Code Snippets / Screenshots Only thing you need to reproduce this error is just simply install this library and try to build your project . -- - # # # Environment * React Native Navigation version : 2.0.2367 * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or both ? ) : IOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : N/A
Fix spelling mistake __EoT__ ` wether ` - > ` whether `
Remove undefined rootView __EoT__ I think this pull request for revert is not sufficient . https : //github.com/wix/react-native-navigation/pull/3441 ver 1.1.475 This error occurred . `` ` /react-native-navigation/ios/RCCViewController.m:208:14 : error : property 'rootView ' not found on object of type 'RCCViewController *' if ( self.rootView ! = nil ) { ^ `` ` So I remove undefined rootView . Please confirm my pull request .
Fix/rootview bounds iphone x __EoT__ Replacing ` self.view ` on a ` UIViewController ` should not be done in this way , if at all ... It can lead to unexpected behaviour , which has been shown in the recent issues submitted where UI glitches were seen on an iPhone X : https : //github.com/wix/react-native-navigation/issues/2849 https : //github.com/wix/react-native-navigation/issues/3250 which this pull request fixes !
[ BREAKING ] Event registry rework __EoT__ - Events will NOT be automatically called on components . Instead , all events must be registered ( and later ` .remove ( ) ` ) through ` Navigation.events ( ) ... ` - ~Combined all component lifecycle events into ` registerComponentLifecycleListener ` ~ - ~TODO : add componentDidMount , componentWillUnmount events~ - For ease of use you can call ` this.subscription = Navigation.events ( ) .bindComponent ( this ) ` from inside your component 's constructor and all methods will be automatically triggered just for this component - ~Do n't forget to ` this.subscription.remove ( ) ` on componentWillUnmount~ this is optional now . RNN cleans the listeners whenever the component is unmounted ( you can still call ` remove ` yourself when needed )
Docs : Fix Typo __EoT__
Support setting single button __EoT__ This will allow us to support default button options . ` rightButtons ` and ` leftButtons ` should handle both arrays and objects . `` ` js options : { topBar : { rightButtons : { } } } `` `
Wait for render android __EoT__
Fix docs syntax on declaring buttons statically __EoT__
[ Docs ] Update styling __EoT__ ` largeTitle : true ` is not valid and throws error
Fix Global Events and Screen Events do not work after iPhoneX patch __EoT__ Base on the suggested fix in this issue : https : //github.com/wix/react-native-navigation/issues/3443 Disclaimer : The fix was made by [ @ nacidai ] ( https : //github.com/nacidai ) . I only update this PR to apply his fix .
Unmount react views when bundle load completes __EoT__ Until now , RNN unmounted components in ` reactContextInitialized ` event - which appears to be too late and results in mounted components entering some limbo state for a short time where there are two mounted instances of each mounted component . This PR adds a listener to bundle load events , when bundle is loaded successfully , we unmount any existing components . Related to # 3472
Support storyboards in the splash screen & fix white red box on iOS __EoT__ - Support storyboards on iOS - By trying to load a storyboard before loading the nib , it fixes having a red box with a white background If we try to load the nib first ( which fails because it does n't exist ) and load the storyboard after that , the red box dialog of React Native is broken because the table view has a white background . It is caused by the ` [ [ NSBundle mainBundle ] loadNibNamed : launchStoryBoard owner : self options : nil ] [ 0 ] ` statement although we can not figure out why . Changing the order fixes it , that is also done in React Native Navigation v1 .
[ v2 ] [ iOS ] Bottom tab bar icons are lower resolution after specifying color . __EoT__ When I do n't specify a color for the icons ( and they are black by default ) , RNN uses the @ 2x/ @ 3x high-resolution version . However , when I add that color , they still use the low-resolution version . I think this has to do with the UIImage+Tint that 's being done , but it worked fine in RNN v1 ?
V2 constants __EoT__
[ BREAKING ] BottomTabs refactor __EoT__ This PR slightly changes the BottomTabs color related api in a none backwards compatible manner . Previously icon and text colors were configured in ` options.bottomTab ` using : `` ` js options : { bottomTabs : { tabColor : 'red ' , selectedTabColor : 'blue' } } `` ` This api assumes that all tabs share the same color configuration , meaning that all icons are tinted with the same colors , and it 's not possible to tint an individual tab with different color . Another limitation this assumption causes , is that in order to **not** tint a certain tab , users had to disable the color options in the ` bottomTab ` level : `` ` js options : { bottomTab : { disableIconTint : true , 😭 disableSelectedIconTint : true 😭 } } `` ` **New API** ( # 3341 ) `` ` js bottomTab : { iconColor : 'red ' , // unselected color selectedIconColor : 'green ' , textColor : 'red ' , // Unselected color selectedTextColor : 'green' // disableIconTint : true , Obsolete // disableSelectedIconTint : true Obsolete } `` ` If a ` BottomTab
Fix/rootview bounds iphone x __EoT__ Replacing ` self.view ` on a ` UIViewController ` should not be done in this way , if at all ... It can lead to unexpected behaviour , which has been shown in the recent issues submitted where UI glitches were seen on an iPhone X : https : //github.com/wix/react-native-navigation/issues/2849 https : //github.com/wix/react-native-navigation/issues/3250 which this pull request fixes !
[ v2 ] bottomTabs visible false is not working __EoT__ # # Steps to Reproduce / Code Snippets / Screenshots I have set ` bottomTabs : { visible : false } ` before ` setRoot ` and ` registerScreens ` as following : `` ` js Navigation.events ( ) .registerAppLaunchedListener ( async ( ) = > { await Navigation.setDefaultOptions ( { popGesture : false , bottomTabs : { visible : false , drawBehind : false , translucent : false , hideShadow : true , backgroundColor : ' # 0f0' } } ) ; await registerScreens ( ) ; Navigation.setRoot ( { bottomTabs : { children : [ { component : { name : 'screens.Home ' , passProps : { text : 'This is tab 1' } } } , { component : { name : 'screens.Album ' , passProps : { text : 'This is tab 2' } } } ] } } ) ; } ) ; `` ` My HomeScreen component did n't put any extra config as following : import React , { Component } from 'react ' ; import { View } from 'react-native ' ; export default class HomeScreen extends Component { constructor ( props
How to disable sideMenu on current screen ? __EoT__ # # # Issue Description How to disable sideMenu on current window even user swipe right or left on the screen # # # Environment * React Native Navigation version : 2.0.2016 ( V2 ) * React Native version : 0.52.2 * Platform ( s ) ( iOS , Android , or both ? ) : both * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : all
Expose launchArgs to JS __EoT__ We want to be able to pass launchArgs to better control the test environment when running Detox . We already had that in v1 , I guess [ this ] ( https : //github.com/wix/react-native-navigation/commit/a0d9518117c5397dcdd72e4437918f94151c8ea8 ) is the original implementation . Re iOS , this is exactly what we need . on Android I 'm not yet sure what would be the best approach , either instrumentation params , intent params , or something else , we should continue the Android discussion .
[ v2 ] [ ios ] add onSearchBarCancelPressed Event __EoT__ Summary : This adds a new event ` onSearchBarCancelPressed ` that fires when the user presses the cancel button on the search bar in the navigation bar . ` onSearchBarUpdated ` does indirectly fire when the user presses cancel , as the query will be reset to an empty string , but it is not possible to distinguish those events from the user simply resetting the query . My use case for this is to have a view that appears on top of the normal content of the view controller when the search bar is focused . This is my first pull request , so let me know if I 'm doing anything wrong ! I tried to adhere to the style in files as I found it . Test Plan : ran ` npm run test-js ` and confirmed added JS unit tests passed . I also tested this with my app , and confirmed the ` onSearchBarCancelPressed ` method was called when I pressed the cancel button .
v2 : passProps need to be passed in different places for custom buttons on Android and iOS __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description When creating a custom topBar right button with a React component , it seems passing props is different between iOS and on android . For iOS , I have to pass it outside the component structure , while for android , I have to pass it within the component structure . # # # Steps to Reproduce / Code Snippets / Screenshots `` ` js rightButtons : [ { id : `` righButton '' , component : { name : `` IconButton '' , passProps : { // android needs it here name : `` menu '' , size : 30 , color : `` rgba ( 60 , 109 , 240 , 0.87 ) '' , onPress : ( ) = > { console.log ( `` button pressed ! `` ) ; } } } , passProps : { // iOS needs it here name : `` menu '' , size : 30 , color : `` rgba
[ v2 ] [ iOS 12 ] showModal crashes __EoT__ ` showModal ` is throwing Array index exception on iOS 12 Happening inside this method : `` ` objc - ( void ) setCustomNavigationComponentBackground { if ( ! _customTopBarBackground ) { if ( self.options.topBar.background.component.name ) { RCTRootView *reactView = ( RCTRootView* ) [ _creator createRootViewFromComponentOptions : self.options.topBar.background.component ] ; _customTopBarBackground = [ [ RNNCustomTitleView alloc ] initWithFrame : self.navigationController.navigationBar.bounds subView : reactView alignment : @ '' fill '' ] ; [ self.navigationController.navigationBar insertSubview : _customTopBarBackground atIndex:1 ] ; self.navigationController.navigationBar.clipsToBounds = YES ; // -- -- > HERE : } else if ( [ [ self.navigationController.navigationBar.subviews objectAtIndex:1 ] isKindOfClass : [ RNNCustomTitleView class ] ] ) { [ [ self.navigationController.navigationBar.subviews objectAtIndex:1 ] removeFromSuperview ] ; self.navigationController.navigationBar.clipsToBounds = NO ; } } if ( _customTopBarBackground & & _customTopBarBackground.superview == nil ) { if ( [ [ self.navigationController.navigationBar.subviews objectAtIndex:1 ] isKindOfClass : [ RNNCustomTitleView class ] ] ) { [ [ self.navigationController.navigationBar.subviews objectAtIndex:1 ] removeFromSuperview ] ; } [ self.navigationController.navigationBar insertSubview : _customTopBarBackground atIndex:1 ] ; self.navigationController.navigationBar.clipsToBounds = YES ; } } `` ` Will provide details and a potential fix later .
Fixed typo in code snippet __EoT__ Fixed a little typo in the documentation .
v2 : missing PermissionAwareActivity implementation __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description ` NavigationActivity ` is missing ` PermissionAwareActivity ` interface , this makes other libraries that require permissions ( e.g camera or image library ) impossible to use , as they crash at runtime . # # # Steps to Reproduce / Code Snippets / Screenshots * Install https : //github.com/ivpusic/react-native-image-crop-picker/ along with RNN and try to open camera . -- - # # # Environment * React Native Navigation version : v2 * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or both ? ) : Android * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator
V2 back button refactor __EoT__ `` ` js topBar : { backButton : { icon : require ( 'icon.png ' ) , visible : true , title : 'Back ' , // iOS only showTitle : false // iOS only } } `` `
The title child property is 'text ' not 'title ' . __EoT__ I think this was just a typo . After changing title to text , and setting visible to true . the 'My Screen ' text displays .
Migrate to jest __EoT__ Move all tests from mocha to jest for supporting multiple iOS simulators for e2e tests .
Update topBar-buttons.md changed the property named tintColor to color __EoT__ Changed the property named tintColor to color
[ V2 ] remx HOC problem __EoT__ # # # Issue Description I 'm trying remx in one of my projects and have a problem with it . Whenever I wrap my component with connect ( ) function , remx is works fine but react native navigation spesific events or functions like onNavigationButtonPressed ( ) , componentDidAppear ( ) , static get options ( ) stops triggering . I looked remx 's codes a bit and when we use connect , on the background remx wraps our component with HOC and returns a new component ( as expected ) . This problem is probably remx 's fault but I wanted to ask you guys here . There may be a integration problem . # # # Steps to Reproduce / Code Snippets / Screenshots * Implement remx to your project * Wrap your screen component with connect ( ) function AND pass mapStateToProps as an argument ( this is important ) * Try to use events I mentioned above . # # # Environment * React Native Navigation version : v2 @ alpha * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or
Android build problem where system language uses both of the `` I '' and `` İ '' letters __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description I am trying to build a project on android simulator . The part below is a problem for OS 's which system language uses both of the `` I '' and `` İ '' letters ` testLogging { events `` passed '' , `` skipped '' , `` failed '' , `` standardOut '' , `` standardError '' } ` I can solve this problem temporarily by changing ` events `` passed '' , `` skipped '' , `` failed '' , `` standardOut '' , `` standardError '' ` to ` events `` passed '' , `` SKIPPED '' , `` FAILED '' , `` standardOut '' , `` standardError '' ` ! [ resim ] ( https : //user-images.githubusercontent.com/39553853/41203367-79f26224-6cde-11e8-8bdb-e175af20f0b9.png ) react-native-navigation\android\app\build.gradle : ! [ resim ] ( https : //user-images.githubusercontent.com/39553853/41203454-b56a1bfc-6cdf-11e8-9167-a6ae5a2624d5.png ) # # # Steps to Reproduce / Code Snippets / Screenshots * Set system language to Turkish * Initialize a project with react-native-navigation * Try
V2 add additional ios options for tabbar icons __EoT__ added selectedIcon , disableIconTint , disableSelectedIconTint styling props
screen background fix on iOS __EoT__
Large title options __EoT__
[ v2 ] [ ios11 , ios12 ] Add searchBar option for topBar __EoT__ Fully native SearchBar and UISearchController , available in iOS 11 This is a captured Detox test demonstrating event handling : ! [ jun-05-2018 11-56-40 ] ( https : //user-images.githubusercontent.com/1004115/40966191-7ee216e6-68b8-11e8-962f-8006b91ab968.gif ) Scrolling : ! [ jun-05-2018 12-06-30 ] ( https : //user-images.githubusercontent.com/1004115/40966368-feed3302-68b8-11e8-9f38-30c558811dac.gif ) I do n't think it 's time to write the docs yet , wanting to battle-test it more and polish the API .
Support for initialization of external modules with bridge __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description Sometimes there are RN modules that require initialization with parameters , such modules should be initialized via the ` extraModulesForBridge ` method from the ` RCTBridgeDelegate ` protocol . However , RNN initializes the bridge by itself and sets itself as the bridge delegate , thus modules with custom initialization ca n't be used with RNN . It would be great if support for external modules with custom initialization could be added to the RNN API .
[ v2 ] Modal screenBackgroundColor transparent bug __EoT__ # # # Issue Description Hi , I need a modal with transparent background . I set my modal 's background to transparent but there is a bug I think . It comes transparent but turns to white . # # # Steps to Reproduce / Code Snippets / Screenshots Here is the gif : ! [ 2018-05-29 18 59 59 ] ( https : //user-images.githubusercontent.com/22980987/40670676-86d7f668-6372-11e8-83f2-a319cb66f623.gif ) -- - # # # Environment * React Native Navigation version : v2 @ alpha * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or both ? ) : iOS ( Did n't test android ) * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator
Update docs for example project __EoT__ Fix broken link and mention the new [ redux example project ] ( https : //github.com/junedomingo/movieapp ) .
[ v2 ] components are not unmounted with customTransition push and pop __EoT__ # # # Issue Description If a screen is pushed with a custom transition , the memory is n't released when it 's popped . Pushing and popping the same screen continues to add to the stack and consumes more memory . # # # Steps to Reproduce / Code Snippets / Screenshots Updated onClickPush ( ) function in playground screen `` PushedScreen.js '' and tracked the stack in react dev tools . `` ` async onClickPush ( ) { await Navigation.push ( this.props.componentId , { component : { name : `` navigation.playground.PushedScreen '' , passProps : { stackPosition : this.getStackPosition ( ) + 1 , previousScreenIds : _.concat ( [ ] , this.props.previousScreenIds || [ ] , this.props.componentId , ) , } , options : { topBar : { title : { text : ` Pushed $ { this.getStackPosition ( ) + 1 } ` , } , } , customTransition : { animations : [ ] , duration : 0 } , } , } , } ) ; } `` ` -- - # # # Environment * React Native Navigation version : latest
Ca n't change the statusBar settings on a page in layoutType : sideMenu __EoT__ # # # Issue Description The settings of the statusBar ca n't be changed on a page that 's in a layoutType : sideMenu . It currently works on all the other layoutTypes . The same problem exists in the playground app . # # # Steps to Reproduce / Code Snippets / Screenshots `` ` js statusBar : { style : 'light ' , visible : true , } , `` ` ! [ without sidemenu ] ( https : //user-images.githubusercontent.com/1283800/40905290-bfa8997e-67dd-11e8-8be0-74153462e8e2.png ) ! [ with sidemenu ] ( https : //user-images.githubusercontent.com/1283800/40905291-bfda2c14-67dd-11e8-8b64-cbb42ff1be7c.png ) -- - # # # Environment * React Native Navigation version : 2.0.2312 * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator ( iPhone X , 8 ) and iPhone 7 , iOS 11.4 , Debug & Release
[ v2 ] Error in pushing component __EoT__ # # # Issue Description I am quite sure I have n't made any changes to my code , but a recent npm install , with all versions remaining same , Navigation.push is throwing a warning : > push should be called from a stack child component I am not even sure what this means ! Here 's the layout I am using right now : `` ` js LoginStack : { stack : { children : [ { component : { name : 'Login' } } ] } } `` ` And this is what I am using to push : `` ` js Navigation.push ( this.props.componentId , { component : { name : 'OTP ' , passProps : { phone : this.state.phone } } } ) `` ` # # # Steps to Reproduce / Code Snippets / Screenshots ! [ img_681c89cb4aa6-1 ] ( https : //user-images.githubusercontent.com/523335/39719647-76c78dc8-5257-11e8-8b3a-2637a2f284ba.jpeg ) -- - # # # Environment * React Native Navigation version : 2.0.2274 * React Native version : 0.55.3 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS
[ v2 ] Animate statusBar style change using mergeOptions __EoT__ Feature request , see title . I think this is an important option to have . Perhaps something like : `` ` js Navigation.mergeOptions ( this.props.componentId , { statusBar : { style : 'light ' , animate : true || false } } ) ; `` `
Fix screenshots links to React Native 's docs __EoT__ The links were pointing to the wrong documentation sections .
[ v2 ] Preview peek and pop ( iOS ) __EoT__ Work is complete . - [ x ] preview.elementId has to be set for preview to work - [ x ] preview.height set 's the height of preview - [ x ] preview.width should set the width of preview ( zoom behaviour ) - [ x ] preview.actions sets actions available in preview - [ x ] Send `` previewContext '' event to ` onNavigationEvent ` when previewing - [ x ] Send `` previewCommit '' event to ` onNavigationEvent ` when committing if preview.commit = 1 - [ x ] Push new view controller without animation when committing if preview.commit = 1 - [ x ] Send `` previewDismissed '' event to ` onNavigationEvent ` when committing if preview.commit = 0
[ v2 ] UISplitViewController __EoT__ This PR implements a new LayoutType that enables UISplitViewController . - [ x ] Implement ` splitView ` LayoutType - [ x ] Implement ` RNNSplitViewController ` - [ x ] Implement ` RNNSplitViewOptions ` - [ x ] Support all layout types in master and detail view . - [ x ] Support ` Navigation.setStackRoot ` on both master and detail to replace the stack . - [ x ] Support ` Navigation.mergeOptions ` for changing it 's options . - [ x ] Playground app : Set ` Universal ` flag in XCode . - [ x ] Playground app : Add splitView demo to home screen - [ x ] JS Coverage - [ x ] Documentation Future questions and thoughts : - Android does n't have anything called Split View . It can be achieved with Fragments but this is not an API that is standard . See https : //github.com/codepath/android-master-detail-demo - Write ObjC tests . This can be done in a separate pull-request once merged and stabilized . ! [ Screenshot of iPad ] ( https : //i.imgur.com/tMQOBN2.png )
Fixes broken link to Screen API page in docs/usage.md __EoT__ One-line fix to a broken link in ` docs/usage.md ` to ` Screen API `
A few improvements for Android __EoT__ # # # 1 Sidemenus were n't clickable on Android . It seems the order in which child views were being added to parent controllers , left or right before center , was affecting the ability to interact with the menus . I 've changed the code to always add them in a specific order : center , then left , then right . I believe this closes issue # 2835 . # # # 2 On Android , merging options to open a menu works . `` ` Navigation.mergeOptions ( currentComponentId , { sideMenu : { left : { visible : true } } } ) `` ` But merging options to close it was n't working . `` ` Navigation.mergeOptions ( currentComponentId , { sideMenu : { left : { visible : false } } } ) `` ` # # # 3 The bottom tabs controller was reserving a margin space for the bottom tabs when switching from one to another , regardless of its visibility settings .
iOS native event fix __EoT__ Problem -- -- -- -- -- -- -- - I registered a nativeEventListener for detecting bottomTab changes . Everything was looking good , events were coming . Then I realized , event name is undefined but params object is coming as expected . Code -- -- -- -- -- - `` ` function commandListener ( name , params ) = > { console.log ( name , params ) } ; Navigation.events ( ) .registerNativeEventListener ( commandListener ) ; `` ` Investigation -- -- -- -- -- -- - As you can see here : https : //github.com/wix/react-native-navigation/blob/v2/lib/src/events/EventsRegistry.ts # L28 nativeEventListener expects an object which includes name and params but on the iOS side , the native code triggers the event listener but passes wrong object . iOS is passes commandName instead of name . This PR fixes the problem .
[ Breaking ] Status bar options __EoT__
Fix syntax error : `` screen '' is read-only __EoT__ I had a compilation error because ` screen ` is reassigned on line 325
[ v2 ] iOS Modal unmount bug __EoT__ # # # Issue Description Hi , Everything is working fine about show and dismiss a modal but the problem is whenever we dismiss a modal , it 's react component is does n't unmount until another modal shown . # # # Steps to Reproduce / Code Snippets / Screenshots Click Show Modal Click Test Modal Lifecycle Click Dismiss didDisappear alert appears componentWillUnmount alert should appear too but event does n't firing Click Test Modal Lifecycle again Previous modal 's componentWillUnmount event triggers ! [ 2018-05-16 11 16 43 ] ( https : //user-images.githubusercontent.com/22980987/40109579-5679055a-5906-11e8-9438-4011394d79d9.gif ) -- - # # # Environment * React Native Navigation version : v2 @ alpha * React Native version : 0.55.4 * Platform ( s ) ( iOS , Android , or both ? ) : iOS ( Android works fine ) * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator / iOS 11.3
Fixes freeze of passProps on iOS __EoT__ Fixes objects contained on ` passProps ` getting frozen on iOS
Fixes freeze of passProps on iOS __EoT__ Fixes objects contained on ` passProps ` getting frozen on iOS
Enable RTL support on LeftButton __EoT__ By default RTL is not enabled on the MaterialMenuDrawable from which the LeftButton extends . This results in the back button not being flipped when running your app against a right-to-left language . Enabling RTL for the LeftButton fixes this behavior and correctly flips the button when needed .
Fix top bar title positioning . __EoT__ Fixes # 3138 .
Implement images loader __EoT__ Open to feedback
Overlay is not unmounted when dismissed __EoT__ [ Failing e2e test ] ( https : //github.com/wix/react-native-navigation/blob/v2/e2e/StaticLifecycleEvents.test.js # L19 )
Link to root of movieapp repo __EoT__
Fixed wrong Android React Native path . __EoT__ In a case of react-native init project , the path does not reflect on the right node_modules path . going ../../ as described in the instruction breaks the build .
Command __EoT__
Reverting ReactGateway constructor to ` public ` __EoT__ We need this constructor to be accessible in order to integrate with CodePush
Support a “ modal ” prop for tabbed iOS apps __EoT__ This adds support for a ` modal ` boolean prop when starting a tab-based app on iOS . If set to ` true ` , tapping that tab will not select it and instead emit a ` `` modalTabSelected '' ` event navigation event , which can be listened to in order to present a modal on tab tap ( or do anything else , I suppose ) . If there 's a better/accepted way to do this already , please let me know and close this PR . Thanks .
Support a “ modal ” prop for tabbed iOS apps __EoT__ This adds support for a ` modal ` boolean prop when starting a tab-based app on iOS . If set to ` true ` , tapping that tab will not select it and instead emit a ` `` modalTabSelected '' ` event navigation event , which can be listened to in order to present a modal on tab tap ( or do anything else , I suppose ) . If there 's a better/accepted way to do this already , please let me know and close this PR . Thanks .
Revert `` Fixes NPE when initializing twice '' __EoT__ Reverts wix/react-native-navigation # 3128 ` ApplicationLifecycleTest.test.js ` broke after merging this
IOS : Fix custom top bar from disappearing after a push __EoT__ Hey guys , wanted to get your input on this . Basically what 's happening is that when you push a view controller on a navigationController with a custom view , the new ViewController will get rid of the custom view ( as it should ) but going back to the original ViewController wo n't restore the custom view . the ` if ` inside the ` else if ` is checking if the pushed ViewController has a custom title at which point we should pop that outta the navigationController 's top bar before presenting it 's custom view . i wish there was some kind of animation for when you do the edge to edge swipe 😆
[ Breaking ] Exposed activity on clearHostOnActivityDestroy __EoT__ We do that in order to allow the end user to decide wether they want to destroy the host based on which activity we 're about to destroy . For example in our app we do the following : `` ` java @ Override public boolean clearHostOnActivityDestroy ( Activity activity ) { // If the activity about to be destroyed is the SplashActivity if ( activity.getClass ( ) == SplashActivity.class ) { // a.k.a an Instant Link was passed return true ; // we want to destroy the host for that activity // If we returned false here , that will make the instant links get stuck on the Splash Screen for ever } // on every other case ( i.e if NavigationActivity ) we want the host to be kept intact // Otherwise we run the risk of getting `` Tried to enqueue runnable on already finished thread : 'native_modules ... return false ; } `` `
[ v2 ] showOverlay does not transition statusBarStyle __EoT__ # # # Issue Description When using ` Navigation.showOverlay ` , the ` statusBarStyle ` of the overlay component is not transitioned to . # # # Steps to Reproduce / Code Snippets / Screenshots Call ` Navigation.showOverlay ` , set the ` statusBarStyle ` option in the overlay component : `` ` js static get options ( ) { return { statusBarStyle : 'dark' } ; } `` ` Does also not work if ` statusBarStyle ` is set in the ` options ` object of ` Navigation.showOverlay ` . -- - # # # Environment * React Native Navigation version : 2.0.2269 * React Native version : 0.55.2 * Platform ( s ) : iOS , Android unknown * Device info : Simulator , iPhone X , iOS 11
[ v2 ] dismissModal is not animated __EoT__ # # # Issue Description When I open a modal it is animated , but dismissing it is instant without an animation . # # # Steps to Reproduce / Code Snippets / Screenshots Call ` Navigation.dismissModal ` after ` Navigation.showModal ` . -- - # # # Environment * React Native Navigation version : 2.0.2269 * React Native version : 0.55.2 * Platform ( s ) : iOS , Android unknown * Device info : Simulator , iPhone X , iOS 11
Avoid NPE in SET reported in # 2576 __EoT__ Null check to avoid NPE reported in issue # 2576 .
Add missing comma __EoT__
Navigation.registerComponent should return the registered wrapped component __EoT__
IOS : modal tab bar scene and modalTransitionStyle __EoT__ - IOS : allow tab bar / bottom tabs scene to be presented modally ( it only was n't bc showModal was calling an optional protocol method ) - IOS : fix bug where modal options were n't being applied before viewController was presented - IOS : add UIKit ` modalTransitionStyle ` enum .
[ v2 ] Remove hardcoded title.fontSize to reset to defaults __EoT__ Now it uses hardcoded 20pt , which of course one can override , but in case of largerTitles , it 's easier to stick with defaults . ! [ image ] ( https : //user-images.githubusercontent.com/1004115/38990352-966421f6-43e2-11e8-939c-9e553d603e76.png )
fix ( TopTabOptions ) : fixed attribute naming for parser __EoT__
Fix iioobe bottom tab __EoT__ Simplified commit for easier review
Modal as layout __EoT__ closes # 1333 closes # 2639 closes # 3022 closes # 2790 closes # 3048 closes # 1750 closes # 1511 closes # 1370 closes # 694 closes # 1330 closes # 130
[ V2 ] Release componentId after overlay dismissed __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description After calling ` dismissOverlay ` , it still holds onto the componentId . I 'm not sure if it 's intended or not , I would much appreciated if someone could shed some light on this . # # # Steps to Reproduce / Code Snippets / Screenshots First call ` Navigation.dismissOverlay ( 'componentId1 ' ) ` , then if you try calling ` Navigation.showOverlay ( { component : { id : 'componentId1 ' , name : 'overlayComponent ' , options : { overlay : { interceptTouchOutside : false } } } } ) ` The app will crash , and you will get an error from XCode saying ` Exception 'Component id already exists minimizedPlayer ' was thrown while invoking showOverlay on target RNNBridgeModule with params ` -- - # # # Environment * React Native Navigation version : 2.0.2241 * React Native version : 0.51.0 * Platform ( s ) ( iOS , Android , or both ? ) : iOS , have n't tested on
[ V2 ] [ IOS ] bottomTab Title do not show __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description [ RNN2 IOS bottomTab Title do not show . android no problem ] # # # Steps to Reproduce / Code Snippets / Screenshots `` ` js Navigation.setRoot ( { bottomTabs : { children : [ { stack : { children : [ { component : { name : 'navigation.GoodsScreen ' , passProps : { } , options : { topBar : { visible : false , animate : false , } } } } ] , options : { bottomTab : { title : `` aaa '' , icon : require ( '../images/transport.png ' ) , testID : 'FIRST_TAB_BAR_BUTTON1 ' , } } } } , { stack : { children : [ { component : { name : 'navigation.FunctionScreen ' , passProps : { } , options : { topBar : { visible : false , animate : false , } } } } ] , options : { bottomTab : { title : 'bbb ' , icon : require ( '../images/function.png '
Update package.json to reference typings __EoT__ According to https : //www.typescriptlang.org/docs/handbook/declaration-files/publishing.html a package needs a ` types ` or ` typings ` field in the ` package.json ` that points to the correct declaration file . Without this change I can not import the typings .
Github - > GitHub __EoT__
Migrate to react v16.3 lifecycle __EoT__ - Migrate to react v16.3 lifecycle - Add backward compatibility for older React versions
[ v2 ] [ Breaking ] Merge options __EoT__
Add Android support for rootBackgroundImageName __EoT__ Add Android support for rootBackgroundImageName
Fix when a title image has nil or NSNull __EoT__ This was occuring if a title has no properties set initially , but then are configured later . The title image data would go from ` [ NSNull null ] ` to ` nil ` , breaking this check . By comparing against both values , we can ensure the correct logic for all behaviors .
Add ability to set badge=null to hide it __EoT__ Not sure about adding tests for this small fix . Would you like me adding bottomTab tests , or you can merge it without it for now ? p.s . Maybe I 'm wrong and there is another way to dismiss a bottomTab badge ?
Update roadmap __EoT__
remove unused param from function __EoT__ closes # 3038
Update AppDelegate.m __EoT__ To save new RNN users some trouble , I 've updated the recommended Obj-C that the installation guide tells us to paste over our App Delegate . I think the old one is obsolete because the # import and one of the Obj-C methods has changed -- different library location or something like that . Also removed a potentially misleading warning that might now cause users to wrongly blame their NPM version for trouble instead of these new changes . Anyway this new version works for me though someone might want to double check .
V2 showOverlay does not redraw on iOS rotation __EoT__ # # # Issue Description While testing on the V2 , ` Navigation.showOverlay ` does not change bounds when orientation changes . Have n't tested on Android . # # # Steps to Reproduce / Code Snippets / Screenshots 1 . Toggle multiple orientations in XCode . 2 . Register view positioned absolutely ` { top:0 , bottom:0 , left:0 , width : '50 % ' } ` and display it `` ` Navigation.showOverlay ( { component : { name : 'TestView ' , options : { overlay : { interceptTouchOutside : false } } } } ) ; `` ` 3 . Rotate iOS device 4 . Examine bounds have not changed . -- - # # # Environment * React Native Navigation version : ` ^2.0.2202 ` * React Native version : ` ^0.51.0 ` * Platform ( s ) ( iOS , Android , or both ? ) : iOS ( have n't tested android ) * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Both iOS 11.2/11.3
Copyediting for Usage.md __EoT__ I made the text a little more punchy and easy to read .
Fix custom title bar issues __EoT__ ( 1 ) prevent ` customNavigationTitleView ` / ` customNavigationBarView ` / ` customNavigationComponentBackground ` from being mounted twice when ` viewWillAppear ` is being called in ` RNNRootViewController ` ( 2 ) ` prevent customNavigationTitleView ` / ` customNavigationBarView ` / ` customNavigationComponentBackground ` from being remounted every time the new will appear again .
Make tabBarHideShadow to be configurable on Android __EoT__ resolve https : //github.com/wix/react-native-navigation/issues/2151
Added `` screenBackgroundColor '' setting __EoT__ This matches property on the iOS V2 branch . closes # 3007
Check whether the sharedBridge is valid __EoT__ Checking whether the ` sharedBridge ` is valid instead of only checking whether it is not null . This allows us to initialise a new bridge if the bridge was invalidated . This is useful when creating an app that loads other React Native apps , and the user wants to close the loaded app manually to try and load another .
More fixes to styling.md __EoT__ ` styling.md ` , changes sideMenu : { leftSideVisible : false , rightSideVisible : false , rightSideEnabled : true , leftSideEnabled : true } to sideMenu : { left : { visible : false , enabled : true } , right : { visible : false , enabled : true } }
[ DOCS ] tapBackgroundToDismiss property on screen API __EoT__ This is working on the screen API too , however it 's not included in screen API , only on top-level screen
Fix font name in styling.md __EoT__ Was Halvetica meant to be Helvetica ? Submitting a fix for review .
Update top-level-api.md ... more copyediting . __EoT__ Further clarification of some of the top level API stuff .
Improved the clarity of the top-level API doc __EoT__ I clarified some of the language here so that it is easier for the beginner to understand . ( It was a little bit awkward before )
NPE in NavigationReactEventEmitter.java __EoT__ I am observing multiple reports for below crash in the Google Play console for my app . `` ` java java.lang.NullPointerException : at com.reactnativenavigation.bridge.NavigationReactEventEmitter. < init > ( NavigationReactEventEmitter.java:17 ) at com.reactnativenavigation.react.NavigationReactGateway.onReactContextInitialized ( NavigationReactGateway.java:114 ) at com.reactnativenavigation.react.NavigationReactGateway.access $ 000 ( NavigationReactGateway.java:24 ) at com.reactnativenavigation.react.NavigationReactGateway $ ReactNativeHostImpl.onReactContextInitialized ( NavigationReactGateway.java:174 ) at com.facebook.react.ReactInstanceManager $ 6.run ( ReactInstanceManager.java:1017 ) at android.os.Handler.handleCallback ( Handler.java:742 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:154 ) at android.app.ActivityThread.main ( ActivityThread.java:5527 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:739 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:629 ) `` ` I do n't know what are the steps to reproduce . Below is the line in code on which the abort is occurring `` ` java public NavigationReactEventEmitter ( ReactContext reactContext ) { this.eventEmitter = reactContext.getJSModule ( RCTDeviceEventEmitter.class ) ; } `` ` So , it looks like the ` reactContext ` is null but I am not sure why would it be null . -- - # # # Environment * React Native Navigation version : 1.1.365 * React Native version : 0.52.4 * Platform ( s ) ( iOS , Android , or both ? ) : Android
Fix crash when calling dismissModal before app was launched __EoT__ closes # 2966
Update V2 usage documentation for screen lifecycle methods __EoT__ Update the docs around a major naming change for screen lifecycle methods : ` didAppear ` / ` didDisappear ` to ` componentDidAppear ` / ` componentDidDisappear `
remove default values __EoT__
Fix : Bottom Nav Icons disappear when getting a CodePush ( Android ) __EoT__ Steps to reproduce : - Implement Bottom Bar Navigation using Wix V2 - Add Microsoft CodePush . - Launch app - Background - Foreground app Result Icons disappear and the following log shows in logcat : `` ` BitmapFactory : Unable to decode stream : java.io.FileNotFoundException : file : /data/user/0/APP_NAME/files/CodePush/b3eb665d8241c3c032783e186d7611d4e235efc4a4a3d51d0a84ef9da1dfc9ff/bundle/drawable-xxhdpi/NAV_IMAGE.png ( No such file or directory ) `` ` Expected : Updated/Existing icons should still be visible . The reason for this error is the attempt to load image using uri as string instead of the path
Crash on showModal when presenting it more than one time __EoT__ # # # Issue Description Showing a component modally more than one time causes a crash # # # Steps to Reproduce 1 . Show a component as modal 2 . Dismiss it 3 . Show the same modal again 4 . The app crashes # # # Code Snippet `` ` await Navigation.showModal ( { stack : { children : [ { component : { id : 'MyTestScreen ' , name : 'MyTestScreen ' , options : { topBar : { title : { text : 'Test Screen' } , translucent : true , rightButtons : [ { id : 'cancel ' , title : 'Cancel' } ] , } } } } ] } } ) ; Navigation.events ( ) .onNavigationButtonPressed ( async ( componentId , buttonId ) = > { if ( buttonId === 'cancel ' & & componentId === 'MyTestScreen ' ) { await Navigation.dismissModal ( componentId ) ; } } ) ; `` ` # # # Crash log `` ` Exception 'Component id already exists MyTestScreen ' was thrown while invoking showModal on target RNNBridgeModule with params ( { children = ( {
when dismissModal fails show warning __EoT__
Fab gravity __EoT__ Fix for # 2915
Stack id __EoT__
Make Left the default `` side '' for toggleDrawer __EoT__ Avoids a null pointer exception when not passing { side : `` left '' } to navigator.toggleDrawer ( ) on Android
V2 subtitle __EoT__
Fix formatting in iOS installation documentation __EoT__
Allow customTitleView and customNavigationBarView to be transparent __EoT__ since views are defautly white/black.. there is no way to make ` customNavigationTitleView ` and ` customNavigationBarView ` transparent . If we make the views clear , this allows for react-native screen to style its parent component to any opacity in react/javascript .
[ iOS ] navBarTextColor does n't change when setting it dynamically __EoT__ # # # Issue Description navBarTextColor does n't change when setting it dynamically on iOS . It worked in previous versions but in latest versions , it does not . Also , it works on Android . # # # Steps to Reproduce / Code Snippets / Screenshots Inside the component class : `` ` static navigatorStyle = { navBarTextColor : ' # 000000 ' , } ; `` ` Dynamically changing : `` ` this.props.navigator.setStyle ( { navBarTextColor : ' # FFFFFF' } ) ; `` ` Tried to put it in ` constructor ` , ` componentWillReceiveProps ` and ` render ` it does n't work anywhere . I need it in ` componentWillReceiveProps ` . ( also tried with ` nextProps ` ) -- - # # # Environment * React Native Navigation version : 1.1.398 * React Native version : 0.54 * Platform : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator , iPhone X , 11.2 , debug
Bottom anim __EoT__
Fix README.md ( v2 ) __EoT__ The tables had some issues : the header for contributor column was n't there ( with the contributors still in place ) . I 've re-added the headers where needed . _ ( Other fix could be to remove the contributors if that 's . Do n't know which style you are following . ) _
Topbar anim __EoT__
[ Breaking ] Top bar API changes __EoT__ This PR introduces breaking changes to TopBar title api ` title ` style option is now an object instead of a string . Example usage : `` ` js options : { topBar : { title : { text : 'The Title ' , color : 'red ' , fontSize : 13.5 , fontFamily : 'narkisim ' , component : 'componentName ' , alignment : 'centered ' / 'fill' passProps : { } } , background : { color : 'red ' , component : 'componentName ' , passProps : { } } } } `` `
Prevent early reload from assertion crashing navigation __EoT__ Prevent navigation from assertion crashing when restarting the app during the initialization phase . Code push reloading the application while its foregrounding is causing an assertion . It looks like the old controller sending off a RNN.containerDidDisappear event is causing this . below is the stack trace : `` ` 2018-02-06 11:54:31.538092-0800 FacemaskReference [ 35876:495578 ] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException ' , reason : 'Error when sending event : RNN.containerDidDisappear with body : Container4 . Bridge is not set . This is probably because you 've explicitly synthesized the bridge in RNNEventEmitter , even though it 's inherited from RCTEventEmitter . ' *** First throw call stack : ( 0 CoreFoundation 0x0000000106cbb12b __exceptionPreprocess + 171 1 libobjc.A.dylib 0x000000010504cf41 objc_exception_throw + 48 2 CoreFoundation 0x0000000106cc02f2 + [ NSException raise : format : arguments : ] + 98 3 Foundation 0x0000000101cae3db - [ NSAssertionHandler handleFailureInFunction : file : lineNumber : description : ] + 165 4 FacemaskReference 0x0000000100804b17 - [ RCTEventEmitter sendEventWithName : body : ] + 567 5 FacemaskReference 0x00000001009b8f1d - [ RNNEventEmitter send : body : ] + 109 6 FacemaskReference 0x00000001009b8c1d - [ RNNEventEmitter sendContainerDidDisappear : ]
refactored custom component to use creator __EoT__
V2 animations __EoT__
Top bar buttons android __EoT__
Added missing curly bracket __EoT__ Added a missing curly bracket in top tabs example .
External component __EoT__
[ V2 ] Update Usage.md __EoT__ Here are a bunch of grammar fixes .
ScreenVisibilityListener now called on disappear methods __EoT__ fixes https : //github.com/wix/react-native-navigation/issues/1771 Props to @ gtRfnkN for finding this here : https : //github.com/wix/react-native-navigation/issues/1771 # issuecomment-326253684
Detox android __EoT__
Auto docs WIP __EoT__
Custom Navigation Bar is not centralized __EoT__ # # # Issue Description Custom nav bar is not centralised when there is a right navigation icon . The whole custom navigation is pushed left # # # Steps to Reproduce / Code Snippets / Screenshots - add a custom Nav Bar - add an navigation right icon the whole custom navigation area is pushed to the left ANY HELP ? -- - # # # Environment * React Native Navigation version : 1.1.79 * React Native version : 0.44 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : ALL
Re : Now allowing the custom nav bar to take up the whole space on iOS __EoT__ This is a second attempt to get this merged . The first attempt was https : //github.com/wix/react-native-navigation/pull/2306 it got merged , and then it got reverted because @ guyca said [ This pr caused buttons to be unresponsive , the custom view was positioned over the buttons preventing them from handling touch events. ] ( https : //github.com/wix/react-native-navigation/pull/2306 # issuecomment-356578002 ) . I added normal buttons to the custom top bar screen on the [ example project ] ( https : //github.com/SudoPlz/react-native-navigation/blob/b2ad935891e13e1dbc6870f6dcb3bc945fabc537/example/src/screens/types/CustomTopBarScreen.js # L14 : L27 ) , and all of the buttons seem to work fine . The CustomTitleView is NOT positioned above the left or right buttons as you can see here : < a href= '' https : //cl.ly/2c1l3N290937 '' target= '' _blank '' > < img src= '' https : //dha4w82d62smt.cloudfront.net/items/3x2A471N3c393z3W1z2R/Screen % 20Recording % 202018-02-01 % 20at % 2012.14 % 20PM.gif '' style= '' display : block ; height : auto ; width : 100 % ; '' / > < /a > I think reverting that PR was a mistake . Please merge that , it 's crucial
[ iOS ] Apply title parameter in resetTo __EoT__ Fixed bug with ` title ` parameter in ` resetTo ` Screen API . Method ` resetTo ` should respect screen title and apply it to ViewController . # # # # Steps to reproduce bug : ` props.navigator.resetTo ( { screen : 'test.screen ' , title : 'First Screen ' } ) ; ` # # # # Result : Display screen with empty title . [ Result GIF ] ( https : //gfycat.com/ifr/WhichArtisticAlbino ) # # # # Expected Result : Display screen with title 'First Screen ' . [ Expected Result GIF ] ( https : //gfycat.com/ifr/QuickSlimyDove ) # # # # Solution : Looks like ` resetTo ` behavior was broken in # 2247 . Code with ` processTitleView ` was removed in resetTo handler . I 've added ` processTitleView ` to viewController with support of view controller with multiple components ( changes in # 2247 ) . # # # # Code example : `` ` javascript import { Navigation } from `` react-native-navigation '' ; import React from `` react '' ; import { View , Text , StyleSheet , Button } from ``
V2 custom controller __EoT__
SideMenu visible android __EoT__
V2 anim __EoT__ # 2435
fixes large titles __EoT__
Update docs __EoT__
Top bar options changes __EoT__
deep stack for startTabBasedApp and startSingleScreenApp __EoT__
Apply BottomTabs options __EoT__
Added ability to specify font size for tab bar labels on Android __EoT__ Solution for issue # 1407
[ Android ] Add ability to start app with deep stack __EoT__ For example , the following code will start a single screen app with two screens pushed into the stack . `` ` js Navigation.startSingleScreenApp ( { components : [ { screen : 'example.Types ' , title : 'Navigation Types ' , overrideBackPress : true } , { screen : 'example.Types.CustomButtonScreen ' , title : 'Custom Buttons' } ] } ) ; `` `
Invoke onNavigationButtonPressed on button press __EoT__
V2 fab __EoT__
[ iOS ] Allow set view controllers to be called with multiple components __EoT__ The ` UINavigationController ` API allows for ` setViewControllers : animated : ` to be called with multiple view controllers , for resetting entire stacks , rather than just resetting to one view controller . This allows for ` navigator.resetTo ( ) ` to be called with an array of components , rather than just one component , to let the navigation stack reset to multiple view controllers . This is backwards-compatible with the existing API . An example of this would look like : `` ` js this.props.navigator.resetTo ( { components : [ { component : `` ScreenA '' , passProps : { greeting : `` Hello , World '' } , leftButtons : [ // same as normal button setting for a screen ] } , { component : `` ScreenB '' , passProps : { greetingId : 1234 } , style : { // same as normal screen style } } ] } ) ; `` ` # # # TODO * [ ] Add documentation
Hide topBar with animation by default __EoT__
rename disabled to enabled __EoT__
Initial implementation of willAppear and willDisappear __EoT__ Currently only implemented on pop in StackController * call clearOptions on super * TopTabs visible
[ v2 ] Stack topbar hidden is not working embedded in bottomTabs . __EoT__ < ! -- Please post questions in Stack Overflow under the react-native-navigation tag https : //stackoverflow.com/questions/tagged/react-native-navigation -- > # # # Issue Description My app needs to use stacks inside bottom tabs . If I use stacks alone , topbar options work as expected , including hidden . If I use stacks inside bottom tabs , I tried different places for options in Navigation.setRoot , yet none worked . I can customize some properties of topbar options by using Navigation.setOptions inside the component , yet , hidden option is still not working . # # # Steps to Reproduce / Code Snippets / Screenshots `` ` javascript Navigation.setRoot ( { bottomTabs : { children : [ { stack : { children : [ { component : { name : 'Discover ' , options : { topBar : { hidden : true // this does n't work } } } } ] , options : { topBar : { hidden : true // this does n't work } , bottomTab : { title : 'Discover ' // this works } } } } ] , options :
Apply options only on first controller __EoT__
Id 2652 __EoT__
Set titleBarSubTitleTextCentered as navigator style for android __EoT__ Resolves [ # 2608 ] ( https : //github.com/wix/react-native-navigation/issues/2608 ) Problem : navBarTitleTextCentered doesn´t center the SubTitle . Solution : Introduce navBarSubTitleTextCentered for Android Platform : Android - Adapt title center - Update docs
changed hidden prop to visible __EoT__ adresses # 2703
Change disabled property to enabled __EoT__
WIP - Detox e2e for android __EoT__
v2-customButtons __EoT__
Update broken links __EoT__
Stack can be pushed __EoT__
detach tab after attaching new tab __EoT__
BottomTab testId __EoT__
fix typo __EoT__
Set button testID __EoT__
pass testID to BottomTabs __EoT__
Bottom tabs android __EoT__
[ Android ] Add backwards compatible support for react-native 0.52.0 __EoT__ React Native 0.52.0 introduces a new way for rendering dev support related views on Android , so no SYSTEM_ALERT_WINDOW permission is required to display RedBox error dialog . Unfortunately , this change is breaking for this library because the interface ` ReactInstanceDevCommandsHandler ` has been renamed to ` ReactInstanceManagerDevHelper ` . In this PR I have rewritten ` JsDevReloadListenerReplacer ` so instead of a class implementing exactly interface , a dynamic proxy is used to create an implementation of a right interface at runtime . This way , backward compatibility with the previous versions is preserved , and RN 0.52.0 and up can be supported as well . Also , I have added a small piece of code to ` postHandleJsDevReloadEvent ` method of ` NavigationActivity ` that check if ` mRedBoxDialog ` field of ` DevSupportManager ` is null and set it to null if not . Without this , the RedBox dialog does n't get displayed if the original activity which was used to display it firstly does n't longer exist ( for example one error has been shown , you tap on reload , and new
V2 removed component lifecycle events __EoT__
How to disable sideMenu on current screen ? __EoT__ # # # Issue Description How to disable sideMenu on current window even user swipe right or left on the screen # # # Environment * React Native Navigation version : 2.0.2016 ( V2 ) * React Native version : 0.52.2 * Platform ( s ) ( iOS , Android , or both ? ) : both * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : all
refactored transition animations __EoT__ Fixes broken custom transitions after the latest js changes
Added requiresMainQueueSetup to prevent warning and future side-effects in RCCManagerModule __EoT__ closes # 1982
getInitialProps ios support __EoT__
[ docs ] Update part of usage.md to reflect new API changes __EoT__
[ iOS ] Large title text attributes __EoT__ This adds support for changing ` largeTitleTextAttributes ` on navigation controllers , including custom font sizes , font families , etc . See Apple docs here : https : //developer.apple.com/documentation/uikit/uinavigationbar/2919946-largetitletextattributes Supports # 2090 Related to # 1643
[ iOS ] Large title text attributes __EoT__ This adds support for changing ` largeTitleTextAttributes ` on navigation controllers , including custom font sizes , font families , etc . See Apple docs here : https : //developer.apple.com/documentation/uikit/uinavigationbar/2919946-largetitletextattributes Supports # 2090 Related to # 1643
Test not intercepting overlay __EoT__
[ v2 ] support navigation button tintColor for iOS . __EoT__ Also simply OptionsProcessor.processOptions : keys ending with ` color ` should be treated as color . keys ending with ` icon ` or ` image ` should be treated as image . both in case insensitive way .
V2 static navigation events __EoT__
Android fixes __EoT__
SetStyle fix __EoT__ @ danielang Removing changes in RCCNavigationController fixed the issue we had . Does this make sense ?
Enable Swipedown to dismiss on bottom aligned notification iOS __EoT__ resolves [ # 2554 ] ( https : //github.com/wix/react-native-navigation/issues/2554 ) on iOS
SetStyle fix __EoT__ @ danielang Removing changes in RCCNavigationController fixed the issue we had . Does this make sense ?
Stack depth android __EoT__
Android overlay __EoT__
Allow users to provide a custom ReactNativeHost __EoT__ Currently the default NavigationReactNativeHost only adds the NavigationPackage . Users may need to override additional methods in ReactNativeHost . This change allows advanced users to provide their own implementation of ReactNativeHost , with the requirement that they add the NavigationPackage themselves .
Solved doc formatting issues __EoT__ Fixed some formatting errors in the top level API docs .
Adapt TopTabs to new API __EoT__
Update README.md __EoT__ Reflecting the word online that v1.0 does n't support 0.52+ .
Load icons on main thread __EoT__ Only reason to offload icon loading to background thread is to avoid supposed network on main thread calls which happen only in debug since icons are passed loaded from localhost .
setStyle to style the according TabBar __EoT__ fix bugs of PR # 2224 * Hidden TabBar appears after ` setStyle ` * CustomNavBar was overrideen after ` setStyle ` Use ` navigator.setStyle ( { ... } ` to set the style of TabBar of the according screen at runtime for iOS and Android . Good for theming purpose . Exampe : `` ` javascript this.props.navigator.setStyle ( { tabBarButtonColor : ' # 0d0d0d ' , tabBarSelectedButtonColor : ' # ff6c33 ' , tabBarBackgroundColor : ' # ffffff ' , navigationBarColor : ' # ffffff ' , } ) ; `` `
setStyle to style the according TabBar __EoT__ fix bugs of PR # 2224 * Hidden TabBar appears after ` setStyle ` * CustomNavBar was overrideen after ` setStyle ` Use ` navigator.setStyle ( { ... } ` to set the style of TabBar of the according screen at runtime for iOS and Android . Good for theming purpose . Exampe : `` ` javascript this.props.navigator.setStyle ( { tabBarButtonColor : ' # 0d0d0d ' , tabBarSelectedButtonColor : ' # ff6c33 ' , tabBarBackgroundColor : ' # ffffff ' , navigationBarColor : ' # ffffff ' , } ) ; `` `
Support launch storyboards as splash screens on iOS __EoT__ [ Apple 's docs ] ( https : //developer.apple.com/ios/human-interface-guidelines/graphics/launch-screen/ ) recommend the use of storyboards as launch screens : > Because device screen sizes vary , launch screen sizes vary too . To accommodate this , you can provide a launch screen as an Xcode storyboard or as a set of static images for the devices your app supports . Using an Xcode storyboard is the recommended approach , as storyboards are flexible and adaptable . You can use a single storyboard to manage all of your launch screens . To learn about implementing adaptable interfaces , see Auto Layout Guide . This PR changes ` - [ RCCManager showSplashScreen ] ` so that it checks first for a launch storyboard , then for a launch xib , and then for launch images . If none of these are found , it defaults to showing a view controller with a white background . * The code used for looking for a launch image is unchanged . * The xib code is made slightly safer by checking that the class of the xib first object is a ` UIView ` . *
Push and Pop always accept a promise __EoT__
top tabs example layout fix __EoT__
V2 default options __EoT__
Pull EventDispatcher to Application scope __EoT__ Application class can now be accessed statically using Context to access AppModule which provides dependencies needed throughout the app .
Refactor towards StackLayout __EoT__ * Deleted getContentView method * Delete Custom dialog code * Delete topTab code * sendOnNavigationButtonPressed was pulled to a dedicated interface
Ensure ReactView is n't created after it 's destroyed __EoT__ Fixes # 2490
[ v2 ] Sending ` RNN.appLaunched ` with no listeners registered . __EoT__ # # # Issue Description When building a basic sample project for iOS , following the project in the ` playground ` folder , the app throws the following warning ` Sending 'RNN.appLaunched ' with no listeners registered. ` # # # Steps to Reproduce / Code Snippets / Screenshots * ` git clone git @ github.com : kasperkronborg/test-navigation.git ` * ` yarn install ` * ` react-native run-ios ` In the github project I have added some log statements to the iOS Library , that gives the indication of a race condition . It seems that ` RNN.appLaunched ` are called to early , when there has still not been any listeners attached through ` Navigation.events ( ) .onAppLaunched ( ) ` . -- - # # # Environment * React Native Navigation version : 2.0.54 * React Native version : 0.45.1 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator , iOS 10 , Debug
Topbar v2 __EoT__
[ WIP ] [ v2 ] [ iOS ] Refactor ReactNativeNavigation class into a developer-controllable class __EoT__ Some React Native libraries require access to the bridge , or perhaps a user wants to create a separate ` RCTRootView ` without ` react-native-navigation ` . This would require a second bridge ( which is less than desirable for the library use-case ) , or access to the bridge that RNN creates . By creating a class to manage application startup and hold on to the properties that we need , we can allow developers more control over how the app is launched , in a backwards-compatible way . Additionally , this creates a more tree-like pattern for our model of ownership of objects , allowing for an easier control-flow and clearer source of truth .
refactored navigation options __EoT__
[ IOS ] - set titleLabel sizeToFit __EoT__ Resolves some titles truncated when subLabel is not long enough . Resolves Issue : [ https : //github.com/wix/react-native-navigation/issues/764 ] ( url )
top tabs support - ios __EoT__
homogenous root view container protocol __EoT__
Fixing stuff __EoT__
Nav Bar Button Font Size Reverts On Press __EoT__ When I set the font size on a text only nav bar button , the font size would revert back to the default when I click on it . Here is the code that I am using to set the button : ` this.props.navigator.setButtons ( { rightButtons : [ { title : 'NEXT ' , buttonColor : 'white ' , buttonFontSize : 12 } ] } ) ; ` -- - # # # Environment * React Native Navigation version : `` ^1.3.4 '' * React Native version : `` 0.50.1 '' * Platform ( s ) ( iOS , Android , or both ? ) : IOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : IPhone 6 Simulator
Fix images name in example project __EoT__
Upgrade example proj to rn51 __EoT__
Fix images name in example project __EoT__
Support changing TopTabs font size __EoT__ * Currently does n't work - need to implement custom TopTab view
added drawUnder __EoT__
Load typface when parsing options __EoT__
V2 Current tab by container ID __EoT__
V2 rn49 __EoT__
Top tab font family __EoT__ API `` ` js Navigation.push ( this.props.containerId , { topTabs : [ { name : 'navigation.playground.TopTabScreen ' , passProps : { title : 'Tab 2 ' , text : 'This is top tab 2' } , navigationOptions : { topTab : { title : 'Tab 2 ' , titleFontFamily : 'Dosis-Regular' } } } ] } ) ; `` `
Fix a uncommented line in the docs __EoT__
Support re-enabling top bar elevation __EoT__ When disabling elevation by setting ` topBarElevationShadowEnabled ` to ` false ` , this commit allows to re-enable it by setting the same property to true . Elevation was previously disabled by using ` setOutlineProvider ( null ) ` , with ` ViewOutlineProvider ` being an Android 5.0+ object responsible for determining how views draw their outline . To allow re-enabling elevation , we keep our original ` ViewOutlineProvider ` and restore it when elevation is enabled again . Tested on Android 4.4 ( no elevation appears at all as designed ) and Android 6.0 . Fixes # 1495 .
Document how to use index.js as entry point __EoT__
added missing options __EoT__
V2 async commands __EoT__
Tab bar items __EoT__
Revert `` Now allowing the custom nav bar to take up the whole space on iOS '' __EoT__ Reverts wix/react-native-navigation # 2306
[ iOS ] Fix getCurrentlyVisibleScreenId with drawer __EoT__ This fixes two issues with ` Navigation.getCurrentlyVisibleScreenId ` and ` this.props.navigator.screenIsCurrentlyVisible ( ) ` on iOS . - The wrong `` controllerId '' was being set for the initial screen/layout . ` controllerId ` is only used to return a ` screenId ` for Navigation.getCurrentlyVisibleScreenId . - Take into account drawers , when trying to find the visible viewController .
introducing navbar shadow on iOS __EoT__ Essentially this is the modified working code of the PR # 1491 and seems like that PR has gone inactive , so created a new PR to implement this feature
f docs __EoT__
More work on docs __EoT__
Remove separator from some doc files __EoT__
Update Options handlbar scheme __EoT__
Update docs sideMenu __EoT__
Docs3 __EoT__
fix lint __EoT__
Add basic documentation structure __EoT__
Android buttons __EoT__ This is a good start for the Android buttons . Has all the basic functionality . Once this goes in , more people can build on top of this .
Fix for `` jumping '' title view during push/pop transitions __EoT__ This fixes an issue with a custom title-view ( which has a title and a subtitle ) appearing at the left side of the nav-bar instead of the center during a transition animation : when a screen with this title-view is being pushed or when you pop back to it . This happens because the title-view is being created again when RCCViewController appears . There 's probably no point in setting the title-view again with the same data when it already has it . The title view setup is done anyway in RCCNavigationController . This can be easily reproduced by calling ` this.props.navigator.setSubTitle ( { subtitle : 'a subtitle ' } ) ; ` from the constructor of a pushed screen ( in the example project ` screens/types/Push.js ` for example )
Test TopTab navigationOptions is applied correctly __EoT__ * minor refactor - moved some logic from view to controller
Topbar __EoT__
V2 background Image options __EoT__
async await for push and showModal __EoT__
Now allowing the custom nav bar to take up the whole space on iOS __EoT__ The custom nav bar on iOS was really just a custom view applied to the title of the navigation bar . There were problems with this approach , because the navigation bar messes up the frame of the title very frequently , especially when the orientation is changing . That behaviour is accepted when the title is a label , but not when we have a custom component . With this pull request the custom nav bar component can take up the full width of the navigation bar , no matter what orientation we 're at . - That should also fix : https : //github.com/wix/react-native-navigation/issues/1893 Here 's how the issue looks like in RL : < a href= '' https : //cl.ly/2A3F0g3Y0k3u '' target= '' _blank '' > < img src= '' https : //d1ax1i5f2y3x71.cloudfront.net/items/0x183o2S0c29240e0t1R/Screen % 20Recording % 202017-12-08 % 20at % 2006.09 % 20PM.gif '' style= '' display : block ; height : auto ; width : 100 % ; '' / > < /a > and here 's how it looks after the Pull Request : < a href= '' https :
Fix formatting of code block in installation-ios __EoT__ This code block appears fine on GitHub , but is malformatted on the site : ! [ screen shot 2017-12-15 at 2 49 38 pm ] ( https : //user-images.githubusercontent.com/15832198/34057942-30bfe508-e1a7-11e7-86e5-b15fea18531e.png ) This PR updates it to fit the format of other code blocks in the docs , so it should appear okay .
Added optional fixedWidth property to the Android side menu __EoT__ - Fixes : https : //github.com/wix/react-native-navigation/issues/510 Example : Navigation.startSingleScreenApp ( { screen : 'Welcome' drawer : { left : { screen : 'SideMenu ' , fixedWidth : 400 , } , } , } ) ; }
Temporarily disable failing e2e test __EoT__
V2 drawUnder for topBar and bottomTabs __EoT__
Setup TopTabs with ViewPager __EoT__ Slightly changes topTabs node declaration and removed the container from it .
on activity resumed __EoT__
Further work on TopTabs and some refactoring __EoT__ * OptionsPresenter receives views as params * Remove TopBar and style logic from ViewControllers , these are the OptionsPresenters concern * StackAnimator is n't coupled to LinearLayout * Convert Runnable to lambda * ContainerLayout now implements ReactContainer interface * Enable desugaring in playground app * Cover top tabs with unit tests
Add paddingTop to android ToolBar . __EoT__ On Android to draw under the StatusBar we have to set translucent=true on StatusBar . This will remove paddingBottom from the StatusBar and the ToolBar will move up . With this fix , we can add a top padding to the navBar on Android .
V2 side menu visibility ios ( toggleDrawer ) __EoT__
TopTabs e2e __EoT__
merge static and passed navigationOptions __EoT__
Initial TopTabs commit on Android __EoT__
Ensure correct spelling of ` commandType ` __EoT__ This now matches the same spelling as other references to ` commandType ` .
Add unregisterForPreviewingWithContext __EoT__ - [ x ] Keep the preview controller context . - [ x ] Unregister for previewing on next screen push that is a preview . ! [ 3D Touch diagram ] ( https : //docs-assets.developer.apple.com/published/121be906b8/dce480c1-31f8-446c-bd2a-4f7fe5be9e67.png ) Sometimes when previewing different screens , they would `` cache '' and preview the correct one , but commit the old one . This seems to fix that problem , also it is just a good idea to keep the context . It could be used later to allow users to unregister via an API .
Fix rn 0.50 repeated calls to onMeasure . __EoT__ RN 0.50 introduced a new feature to dynamically measure ReactRootView . Since RNN uses RelativeLayout for Screen and BottomTabsLayout child views added to the layout may have additional rules . When the child views are measured they are measured with respect to the LayoutParams set during Screen creation and the Parent MeasureSpec . In RNN , ContentView extends ReactRootView and it calls onMeasure using the widthMeasureSpec and heightMeasureSpec passed to it . If these measureSpecs are EXACTLY then ReactRootView will measure itself to fit the exact size requested by the parent . If ContentView was added with LayoutParams.MATCH_PARENT for height and/or width with additional rules eg . BELOW or ABOVE the effective height of this View may not be compatible with MATCH_PARENT . RelativeLayout does two passes over its children , in the first pass each child is measured as per their LayoutParams , in the second pass LayoutParam rules are applied and each child is measured . The problem occurs here , if ReactRootView was asked to measure itself with MeasureSpec.EXACTLY but the measuredHeight was less than expected it will trigger a requestLayout ( ) causing the entire layout to
Rename ContainerView related classes __EoT__
[ Android ] Support for transparent statusbar with current screen rendered behind it __EoT__ Added support to render current screen behind the status bar when you set the color of the status bar to transparent . Resolves : # 2034
update gradle and remove weird entry point __EoT__
Auto generate docs __EoT__ Docs can be generatred by running npm run gen-doc Add jsdoc and jsdoc2md dev dependencies
Fix NPE when activity is relaunched on changing font size of the phone __EoT__ Fixes # 2311
Missed comma __EoT__ Missed Comma throw `` unexpected Token '' error .
Add a toString implementation to StyleParams Color __EoT__
V2 tabBarHidden __EoT__
[ Experimental ] Custom transition animation for ios __EoT__
Android implementation of Navigation.setDefaultOptions __EoT__ Closes # 1072 Usage `` ` js Navigation.setDefaultOptions ( { topBar : { backgroundColor : 'red' } } ) ; `` `
dont deploy on PRs __EoT__
V2 topBarTransparent __EoT__
upgraded detox to version 6.x.x __EoT__
deploy only on v2 branch __EoT__
V2 topbar __EoT__ Fixes # 2283
Android back handler __EoT__ Give precedence to react 's BackHandler when hardware back button is pressed
readme __EoT__
V2 nhotfix __EoT__ Options merging fix
setStyle to style the according TabBar __EoT__ Use ` navigator.setStyle ( { ... } ` to set the style of TabBar of the according screen at runtime for iOS and Android . Good for theming purpose . Exampe : `` ` javascript this.props.navigator.setStyle ( { tabBarButtonColor : ' # 0d0d0d ' , tabBarSelectedButtonColor : ' # ff6c33 ' , tabBarBackgroundColor : ' # ffffff ' , navigationBarColor : ' # ffffff ' , } ) ; `` `
Fix dismissAllModal API __EoT__ The root wo n't unregister when ` dismissAllModals ` been called
[ iOS ] Add support for bar button system items __EoT__ UIKit supplies a range of glyphs to be used in navigation bar buttons , so let 's expose them to developers to make better native apps ! This adds support for the ` systemItem ` key-value in the button config to allow for placing this type of ` UIBarButtonItem ` s in the navigation bar . More information about these glyphs can be found in [ Apple 's Human Interface Guidelines ] ( https : //developer.apple.com/ios/human-interface-guidelines/icons-and-images/system-icons/ ) .
V2 current tab __EoT__
V2 async __EoT__
[ v2 ] test-unit-ios failed __EoT__ # # # Issue Description Seems like I found a bug non-related to this issue , but when I try to dig into it , I discover that ios tests fails on my system . Specifically it is ` RNNCommandsHandlerTest/testAssertReadyForEachMethodThrowsExceptoins ` that failed . I'am ca n't understand what is intent of this test , so this issue is more question to developers . This test try call all methods of ` RNNCommandsHandler ` class , but without needed arguments ... is this possible in Objective C at all ? And what it try to check after all ? # # # Steps to Reproduce / Code Snippets / Screenshots As in https : //github.com/wix/react-native-navigation/blob/v2/docs/docs/CONTRIBUTING.md 1 . ` brew tap wix/brew ` 2 . ` brew install -- HEAD applesimutils ` 3 . ` npm install ` 4 . ` npm run test-js ` 5 . ` npm run test-unit-ios ` Expected that tests pass , but instead this output : `` ` 2017-11-18 16:33:58.231 xcodebuild [ 48492:1624107 ] [ MT ] IDETestOperationsObserverDebug : ( 071EFBDB-4403-4669-912B-6C0CCDDFA608 ) Beginning test session ReactNativeNavigationTests-071EFBDB-4403-4669-912B-6C0CCDDFA608 at 2017-11-18 16:33:58.231 with Xcode 9B55 on target < DVTiPhoneSimulator : 0x7fa7eeb0ede0 >
setTabButton to change the label of the TabButton __EoT__ This PR will add the functionality to update the label of a TabButton at RunTime in iOS and Android .
Nav bar save props __EoT__ fixes # 1961 , # 1546 , # 1705 This commit changes the way props are injected into custom navBar components . Instead of passing props over the bridge and initializing the native component with them , props are now stored in Js , and are injected back when the react component is created . This change lets us pass unserializable props to the component . For example , passing a navigator to the component is now possible : `` ` js componentDidMount ( ) { this.props.navigator.setStyle ( { navBarCustomView : 'example.CustomTopBar ' , navBarComponentAlignment : 'center ' , navBarCustomViewInitialProps : { title : 'Hi ! ' , navigator : this.props.navigator } } ) ; } `` `
[ iOS ] Ensure that styles set on individual buttons are not overridden __EoT__ This fixes a bug where navigator-level styles could override styles on a specific button . Fixes # 2199
( Android ) Allow disableOpenGesture right or left in the drawer __EoT__ Hello ! This is my first pull request here so apologize if I made any mistakes . I 'm working on my first React Native project and thought I could solve this problem that can happen to other people . This pull request allows you to disable the open gesture only in one side of the drawer . In my current application , I want to have 2 drawers ( on both sides ) . The left drawer is always enabled . The right drawer is only enabled in one screen . This way I can startSingleScreenApp ( ) and pass the two drawers , but only the left would be 'enabled ' : `` ` js Navigation.startSingleScreenApp ( { screen : initialScreen , drawer : { left : { screen : DRAWER_SCREEN , disableOpenGesture : false , } , right : { screen : SIDEBAR_FILTER_SCREEN , disableOpenGesture : true , } , } , } ) ; `` ` If we pass disableOpenGesture to the drawer root object , like this : `` ` js Navigation.startSingleScreenApp ( { screen : initialScreen , drawer : { left :
[ Feature request ] iOS 11 Style Navbar Titles __EoT__ # # # Issue Description Almost every iOS 11 app has this new style for navigation titles : ! [ ios11 nav title ] ( https : //user-images.githubusercontent.com/7143583/28991088-f617b5e4-7940-11e7-92ca-ca14ba6b4d5d.gif ) It would be great to support this natively with react-native-navigation since it seems to be the new UI standard for iOS . It should n't be too difficult to accomplish either because I believe iOS has a simple API to enable it : https : //developer.apple.com/documentation/uikit/uinavigationbar/2908999-preferslargetitles
[ Feature request ] iOS 11 Style Navbar Titles __EoT__ # # # Issue Description Almost every iOS 11 app has this new style for navigation titles : ! [ ios11 nav title ] ( https : //user-images.githubusercontent.com/7143583/28991088-f617b5e4-7940-11e7-92ca-ca14ba6b4d5d.gif ) It would be great to support this natively with react-native-navigation since it seems to be the new UI standard for iOS . It should n't be too difficult to accomplish either because I believe iOS has a simple API to enable it : https : //developer.apple.com/documentation/uikit/uinavigationbar/2908999-preferslargetitles
Support passing unserializable props to custom button __EoT__ This commit applies the save props mechanism used when pushing screen to navigator buttons as well , enabling us to pass unserializable props to buttons .
addOnNavigatorEvent improvements __EoT__
Fixed wrong field name of Snackbar __EoT__ ` title ` field is no longer used .
Send tabSelected events to Js only if tab was selected by user __EoT__ If ` navigator.switchToTab ` was used , tab selected event is n't sent .
DOCS - missing word in docs/styling-the-navigator.md __EoT__
Default screen animation __EoT__
elaborations __EoT__ added some elaborations to make it easier for developers with no ios experience .
V2 overlay skeleton __EoT__
Set modal status bar style in constructor __EoT__ Since status bar style was applied when the screen was created , this caused a noticeable artifact in status bar color .
Update README.md __EoT__
Fixes issue with tabbar relative animation __EoT__ The fix we were discussing with you recently
Animate screen into place after hiding navBar __EoT__
top bar hide test __EoT__
fix compilation error , sorry : ) __EoT__ fixes # 2071
set badge color only if available ( > =10 ) __EoT__
V2 topbar __EoT__ I 've moved TopBar to ContainerViewController . Benefits : 1 ) Push/pop animation looks better 2 ) Controller is in charge of TopBar changes 3 ) It would simplify implementation of next TopBar features
Fix issues with Android BackHandler __EoT__ Fix issues with Android BackHandler listeners not getting called , not allowing to override the back functionality from the JS side relates to # 1765
Update installation-android.md __EoT__
Close modal button __EoT__ When playing with the example app , I noticed there was n't a clear way to close the Modal example screen in iOS . This adds a button to dispatch ` dismissModal ( ) ` and close the modal for iPhone . # # # iOS ! [ react-native-navigation - close modal ] ( https : //user-images.githubusercontent.com/10098988/29640009-7e4924e4-8822-11e7-8dd7-0ef13ef8ca0d.gif )
Support subtitle FontFamily on size on Android __EoT__ This commit adds support for ` titleBarSubtitleFontSize ` and ` navBarSubtitleFontFamily ` on Android . Font family can be either a .ttf/.otf asset or one of the default font families : * sans-serif ( regular ) * sans-serif-light * sans-serif-condensed * sans-serif-thin * sans-serif-medium fixes # 1180
Doc update for tabFontFamily __EoT__ Fix for https : //github.com/wix/react-native-navigation/issues/2026
Side Drawer Toggle Problem Resolved for Android __EoT__ While working I got a situation in which I wanted to open the side drawer on a button click . But I was not able to do that . So I made some changes and now I am able to achieve the required functionality .
Fix style __EoT__ Fixes # 754 This pull request correctly passes ` navigatorStyle ` of left/right controllers so that status bar styling does n't get lost . Otherwise , default styling is respected by the iOS which reverts status bar to black . With this change , you can manipulate status bar ( and other properties ) as well as hide the status bar on menu opened .
Fixes popTo signature __EoT__ The only argument to ` popTo ` is the containerId to pop to , not the current containerId as well . Also showing ` this.props.previousContainerIds ` lead me to believe that was included automatically ( similar to ` this.props.containerId ` ) so I changed that to avoid confusion .
Fix header search path to use /lib __EoT__ The new path is ` ... /lib/ios ` not just ` /ios `
Fix minor typo __EoT__
Update installation-ios.md __EoT__
Safegards against NPE in sliding overlay to avoid crashes __EoT__ Observed a few crashes due to NPE in sliding overlay support as mentioned in issue # 2002
V2 switchToTab on iOS __EoT__
test-e2e-android should launch existing avd __EoT__
Error in documentation - AppDelegate.m has no return statement . __EoT__ Since the docs suggested we remove everything inside the ` didFinishLaunchingWithOptions ` , without the return statement there was an ` Control reaches end of non-void function ` error since the function expects a boolean return . After adding this , the error goes away .
Documentation - tabs is not a valid LayoutType __EoT__ In the list of ` LayoutTypes ` , ` tabs ` is not defined , hence this throws an error . Replaced it with ` bottomTabs ` .
Backwards compatibility for clearHostOnActivityDestroy __EoT__ This commit fixes two issues found in # 1838 . Fixes # 1924 1 . Keeps calling the deprecated reactInstanceManager methods when host is cleared to not introduce undesired behavior when clearHostOnActivityDestroy return true ( old and default behavior ) . 2. call onHostDestroy and onHostPause only if react context exists or is being created .
Fix navigation tool bar ios __EoT__
Add list screen for debug usage __EoT__
fix double tap when back to screen via back gesture __EoT__
[ V2 ] Android topbar font family __EoT__
Update the document for tabsStyle in Android __EoT__ This troubled me a lot before I finally realized that the tabStyle for andriod is actually in appStyle . The comment for selectedIcon made me think I should change tabBarSelectedButtonColor in tabStyle . > selectedIcon : require ( '../img/one_selected.png ' ) , // local image asset for the tab icon selected state ( optional , iOS only . On Android , Use ` tabBarSelectedButtonColor ` instead )
Fixed typo in comments __EoT__
[ Android ] Ability to hide status bar within navigatorStyle.statusBarHidden __EoT__ Tested against my application and it works the same as iOS version .
fix iOS11 safeArea __EoT__ https : //github.com/wix/react-native-navigation/issues/1858
Modal animations __EoT__ This commit adds support for fade and slide-horizontal animations for modals and a few other animation related changes : * Support defining animationType when calling dismissModal * Support fade and slide horizontal animations for modals * Slightly reworked current screen animations timings * Fixed slide-horizontal x offset and removed alpha
[ V2 ] Top bar text size __EoT__ Please , do not remove this branch after merge . I 'll will add next feature ( font family ) later .
Stop calling host.clear ( ) when activity is destroyed __EoT__ This is a breaking change and has to be opt-in . To prevent host.clear from being called , Override ` clearHostOnActivityDestroy ` in MainApplication and return false : `` ` java @ Override public boolean clearHostOnActivityDestroy ( ) { return false ; } `` ` If host is n't cleared , the next time the app is opened react context might still be initialized . In this case we emit appLaunched event which has to be handled in Js : `` ` js if ( Platform.OS === 'ios ' ) { startApp ( ) ; } else { Navigation.isAppLaunched ( ) .then ( ( appLaunched ) = > { if ( appLaunched ) { startApp ( ) ; } new NativeEventsReceiver ( ) .appLaunched ( startApp ) ; } ) } `` `
fix navBarSubtitleColor __EoT__ now it will set the navigation subtitle color properly without any effect on the title
Top bar text color for Android __EoT__
Prefer use of intrinsicContentSize __EoT__ < img width= '' 504 '' alt= '' screen shot 2017-09-01 at 4 18 59 pm '' src= '' https : //user-images.githubusercontent.com/1051453/29986447-5b1b7e7a-8f31-11e7-8d7e-9fbe5414b358.png '' > < img width= '' 1960 '' alt= '' screen shot 2017-09-01 at 4 18 51 pm '' src= '' https : //user-images.githubusercontent.com/1051453/29986448-5b21e530-8f31-11e7-8d9b-83be55d492fb.png '' > This converts from using a deprecated attribute .
add hideBackButtonTitle __EoT__ in order to remove the back button title in the appStyle
V2 docs __EoT__
V2 docs __EoT__ Fixed sidebar links
V2 docs location __EoT__ @ DanielZlotin Moved docs to it 's own folder
[ ios ] orientation does n't work as expected __EoT__ # # # Issue Description Setting orientation in iOS produces weird results when actually rotating screen . Also , it sometimes fails the tests because the landscape orientation is lingering -- - # # # Environment * React Native Navigation version : 2.0.x * React Native version : 0.44 * Platform ( s ) ( iOS , Android , or both ? ) : iOS * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : 10.3 debug
support working with third party modules __EoT__ should be same idea as v1 , in iOS it 's already supported via c macros ( ` RCTModule ( ) ` ) in android it should be same solution as v1 : provide abstract ` createReactNativePackages `
Update _sidebar.md __EoT__
Added v2 docs __EoT__ Basic docs for v2 setup , because I ca n't bear ( sic ) looking at Github for documentation 🥇
[ android ] support `` react.native.RELOAD '' broadcast __EoT__ usage : ` adb shell am broadcast -a com.reactnativenavigation.broadcast.RELOAD ` should reload the js context
add integration test for redux as an example __EoT__ make sure both redux and remx work with Navigation
New Feature : adding disabledSimultaneousGesture flag __EoT__ New Feature : adding disabledSimultaneousGesture flag to manage simultaneous gesture recognition for this ticket # 1776 .
Update README.md __EoT__
Add appStyle support for iOS 🤖 __EoT__ Add appStyle support for iOS 🤖
Update README.md __EoT__
setButtons for iOS __EoT__ I 've also done the event side on Android , but will tackle the full implementation once this gets merged and PR it when it 's ready .
V2 statusBarHideWithTopBar ios __EoT__
Update README.md __EoT__
fix for breaking change in React Native 0.47 __EoT__ fix for breaking change in React Native 0.47 the deprecated createJSModules Override
Update README.md __EoT__
Add missing params for showInAppNotification __EoT__ Add missing parameter to showInAppNotification : **autoDismissTimerSec**
[ Android ] Add navBarTextFontBold , navBarHeight and topTabsHeight __EoT__ Hi ! Thanks for this amazing package . I add some Android 's props for : - **navBarTextFontBold** ( bool ) : put -or not- the title in **bold** - **navBarHeight** ( int ) : set the nav bar height - **topTabsHeight** ( int ) : set the top tabs height
add adjust soft input optional config for Lightbox on android platform __EoT__ The window of LightBox is different with the activity，adjust soft input mode in onActivityCreated life cycle callback will have no effect
[ iOS/Android ] Add initialTabIndex support __EoT__ This pull requests introduces ability to set tab index that is selected when component is rendered for both iOS and Android . iOS solution is based on Proteye 's [ pull request ] ( https : //github.com/wix/react-native-navigation/pull/553 )
typo fixes for README __EoT__ just correcting screen event typo 's `` didDisppear '' to `` didDisappear ''
V2 top bar no border __EoT__
Update README.md __EoT__
Update README.md __EoT__
V2 tab badge iOS refactoring and added fontSize on iOS __EoT__
Update android-specific-use-cases.md to Specify correct Lifecyclecallbacks __EoT__ Taking the code from the docs for setting the softInputMode as is , it fails to build because the LifecycleCallbacks is an invalid symbol and is actually called ActivityLifecycleCallbacks .
Add docs about using custom navigation buttons __EoT__ This adds documentation about custom navigation buttons add in # 1641
Added HandleDeepLink to TopLevelApi documentation __EoT__ As the screen api document mentions that it can be done statically , it 's best to mention it here as well .
Update top-level-api.md __EoT__ fixed some typos
Revert `` Fixed LightBox not updating overlay width/height on rotate '' __EoT__ Reverts wix/react-native-navigation # 1461 # 1461 caused LightBox to appear in upper right corner of the screen .
[ iOS ] Add custom bar button item class __EoT__ This allows for custom React Native views to be rendered as a bar button item in the navigation bar . ! [ simulator screen shot - iphone 7 - 2017-08-04 at 16 07 42 ] ( https : //user-images.githubusercontent.com/1051453/28985572-25f4b326-7931-11e7-8190-1d93f089b4e8.png ) This can be used by registering the component , just like any screen , and then by specifying the ` component ` for the navigation item , either left or right , like so : `` ` js const styles = StyleSheet.create ( { button : { overflow : 'hidden ' , width : 34 , height : 34 , borderRadius : 34 / 2 , justifyContent : 'center ' , alignItems : 'center ' , } , } ) ; // Our custom component we want as a button in the nav bar const CustomButton = ( { text } ) = > < TouchableOpacity style= { [ styles.button , { backgroundColor : 'tomato ' } ] } onPress= { ( ) = > console.log ( 'pressed me ! ' ) } > < View style= { styles.button } > < Text style= { { color : 'white '
Update README.md __EoT__
Export ` Navigator ` class for public use __EoT__ When using ESLint rule ` react/prop-types ` , an error is show when using ` this.props.navigator ` if ` navigator ` is not specified in the components propTypes . Changing this library to export the ` Navigator ` class allows users to use it in propTypes , i.e : `` ` JavaScript import PropTypes from 'prop-types ' ; import { Navigator } from 'react-native-navigation ' ; ... Component.propTypes = { navigator : PropTypes.instanceOf ( Navigator ) , } ; `` ` Whereas before you had 2 options , either : 1 . Use ` PropTypes.object ` , which is another ESLint error ( ` react/forbid-prop-types ` ) , or 2. create your own ` PropTypes.shape ( ) ` , but that feels convoluted and error-prone . Hope this all makes sense .
V2 top bar button color iOS __EoT__
V2 top bar text font family __EoT__
screen Background Color iOS __EoT__
Fixed LightBox not updating overlay width/height on rotate __EoT__ Closes # 1270 ( This was an iOS only issue )
Update README.md __EoT__
fix lightbox not unmount bug when back pressed for android __EoT__
update docs for iOS drawer animations in top-level-api section __EoT__
changed setOptions to receive RNNNavigationOptions and added topBarTextColor __EoT__
Workaround for React-Native bug with multiple RCTRootView __EoT__ https : //github.com/wix/react-native-navigation/issues/1446
DOCS : Fixed android installation __EoT__ The documentation for the android installation of v2 was wrong .
Update readme for title Image on top bar __EoT__
fix iOS crash on showController __EoT__ fixes # 1579
v2 tdd styles - topBarBackgroundColor , RNNNavigationOptions , style refactor __EoT__ added static topBarBackgroundcolor to iOS , created RNNNavigationOptions , refactored statusBarHidden and Title and added and refactored tests
Currently visible screen __EoT__ This PR adds api to get the currently visible screen . Usage : 1 . From a screen , using navigator instance : ` const isVisible = await this.props.navigator.isCurrentlyVisibleScreen ( ) ` 2 . Globally , using ` Navigation ` object : ` const visibleScreenInstanceId = await Navigation . getCurrentlyVisibleScreenId ( ) `
Add in-app notification __EoT__
Update README.md __EoT__
Update README.md __EoT__
statusBarHidden support for ios __EoT__ @ bogobogo I started with adding an integration test for the ios styles support , the subsequent styles we should test with unit tests to make sure they all work
Update README.md __EoT__
Update README.md __EoT__
Update README.md __EoT__
Update README.md __EoT__
Added overrideBackPress to LightBox __EoT__
fixed blank nav bar titles on Android when title font size not set . __EoT__ When using appStyle and not setting the navBarTitleFontSize prop , it was defaulting to 0 and was therefore passing the return and setting a 0 font size title . Closes # 1515 .
setStyle dynamically __EoT__
move v1tov2diff to README.md __EoT__
setStyle dynamically __EoT__
Use UIStoryboard methods for presenting a splash screen on iOS __EoT__ This uses the proper methods for instantiating the initial view on iOS . By utilizing these methods , we can stand up the initial view controller from the storyboard . See also : https : //developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html # //apple_ref/doc/uid/TP40009252-SW41
Use UIStoryboard methods for presenting a splash screen on iOS __EoT__ This uses the proper methods for instantiating the initial view on iOS . By utilizing these methods , we can stand up the initial view controller from the storyboard . See also : https : //developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html # //apple_ref/doc/uid/TP40009252-SW41
[ iOS ] Added ability to set static ( root ) background image __EoT__ `` ` rootBackgroundImageName : ' < name of image in Images.xcassets > ' , `` ` Same as ` screenBackgroundImageName ` but it 's static while you transition between screens . You have to set ` screenBackgroundColor : 'transparent ' , ` and also transparent color for your root View .
Support headlessJs __EoT__ Currently startApp is called from global context which results in the app being launched when headlessJs tasks run in the background . In order to support this use case , while not breaking existing users , this commit adds two mechanisms which should help users detrmine if the native Activity is running and startApp can be called safely . 1 . RNN.appLaunched event is emitted is SplashActivity starts and react context has already been created . This is the use case of openeing the app while headless js task was started or has just finished and react context is in a `` pasued '' state . 2 . Navigation.isAppLaunched ( ) convenience method has been added . It returns a promise which when resolved , indicates if the app is launched and we should show the ui or not . Usage `` ` js import { Navigation , NativeEventsReceiver } from 'react-native-navigation ' ; Promise.resolve ( Navigation.isAppLaunched ( ) ) .then ( appLaunched = > { if ( appLaunched ) { startApp ( ) ; } else { new NativeEventsReceiver ( ) .appLaunched ( startApp ) ; } } ) ; function startApp ( ) { Navigation.startTabBasedApp
Fixed screen size calculations when in multi-window view __EoT__ Screen calculations were not using the entire display for size dimensions vs. the maximum window size
[ iOS ] Allow lightbox tap to dismiss without background color __EoT__ This allows for tapping the background without setting a color here , meaning this feature can be enabled with one less view in the view hierarchy . Additionally , this allows for taps on any background view , visual effect view , color tint view , etc , but not on the content .
Fix android TitleBar center on configuration change __EoT__ When rotating the screen the TitleBar centered text will become uncentered
Fixed TabBar from not adopting screen background color __EoT__ [ http : //imgur.com/a/JTvwm ] ( http : //imgur.com/a/JTvwm )
Added tapBackgroundToDismiss to LightBox screens __EoT__ Added param tapBackgroundToDismiss to LightBox screens to allow tapping on background views to dismiss the LightBox screen
Fix misaligned text in CollapsingTextView __EoT__
added a missing comma __EoT__ added a missing comma in the 'style object format ' so to help users who copy/paste this code block
Fixed bottom tab bar animation setting the wrong value __EoT__ Closes issue # 1357 setY should not be set on a view inside a RelativeLayout , this was setting the tab bar to the Y position of 0
Fixed lightbox status bar color override on Android __EoT__ This PR fixes the black status bar on Android causing differences between iOS and Android for draw space
Add navBarSubtitleFontFamily property to docs __EoT__
[ iOS ] Enable back swipe gesture when a navBar is hidden . Resolves this issue : https : //github.com/wix/react-native-navigation/issues/930 __EoT__ added https : //github.com/wix/react-native-navigation/commit/03d380f8a9d2fba5d4baf6815201fcebdcfa18c9 back and also applied this fix https : //github.com/wix/react-native-navigation/issues/428 # issuecomment-278268928 on top of it
Update styling-the-tab-bar.md __EoT__ Removing duplicate property
Replace React.PropTypes with prop-types __EoT__ Small update in using ` `` prop-types '' ` instead of ` React.PropTypes ` since it 's using React 16.0.0-alpha.6 . For the old examples , I only removed ` PropTypes ` . It looks like its not actually being used on the files , but let me know if you want ` prop-types ` to be added anyway and I can do so . ( Sorry if I missed any contribution guidelines ! Ca n't seem to find any information on it ... )
Fix flickering statusBar when showing modal __EoT__
Null check ReactContext in onActivityResult __EoT__ Can be null if returning from another app and our activity wad destroyed in background
[ Android ] Added fade & horizontal transition animations between screens __EoT__ Fade & horizontal transition animation for : - push - pop - popToRoot - resetTo for example `` ` javascript this.props.navigator.push ( { screen : 'example.ExampleScreen ' , animationType : 'fade ' // 'fade ' / 'slide-horizontal' } ) ; `` ` if you not specifying ` animationType ` , animation will be default .
Return empty Drawable when bridge is n't available __EoT__
Fixes for dynamically controlling iOS drawer status __EoT__ Resolves a couple of typos in # 1347 and improves MMDrawerController handling of nil UIViewControllers .
Feature/set drawer enabled ios __EoT__ Missing iOS implementation for https : //github.com/wix/react-native-navigation/pull/1326 . Relevant to : https : //github.com/wix/react-native-navigation/issues/631 https : //github.com/wix/react-native-navigation/issues/540 https : //github.com/wix/react-native-navigation/issues/922 https : //github.com/wix/react-native-navigation/issues/326 https : //github.com/wix/react-native-navigation/issues/1302 < img src= '' http : //g.recordit.co/hA8x8HaOud.gif '' / >
Use hardcoded BottomTabs height in visibility animator constructor __EoT__ fixes # 1350
Add tabBarHidden property to docs __EoT__ I found it in this issue https : //github.com/wix/react-native-navigation/issues/129 # issuecomment-249433746 and it was n't on the [ official documentation ] ( http : //wix.github.io/react-native-navigation/ # /styling-the-tab-bar )
Title bar visibility bug __EoT__
Fix title bar not displayed if it was initially hidden __EoT__ Also cleaned up VisibilityAnimator .
Fix title bar not displayed if it was initially hidden __EoT__ Also cleaned up VisibilityAnimator .
upgrade example e2e tests to detox 5 + RN 44.2 __EoT__
Add a way to dynamically enable/disable a side menu for Android __EoT__ Fixes # 326 for Android only - I looked at the props approach but I needed a bit more control than I could get with that . Sidenote : I 'll need to do similar for iOS , but that looks a bit tricker given the multiple different drawer implementations ( and the first implementation I looked at did n't have a clean way to disable without removing the view completely ) .
[ iOS ] Fix disabledBackGesture . __EoT__ This ` return self._disableBackGesture ? self._disableBackGesture : YES ; ` check is incorrect , it 's the same as ` true ? true : true ; ` . Also ` _disableBackGesture ` was never set . We should just ` return ! disabledBackGestureBool ` ( bool value of the prop ) .
docs , feature parity , about - work in progress __EoT__ Alpha version of docs , feature parity and 'why v2 '
Add screen events for side menus on Android __EoT__ The existing screen events do n't appear to encompass the left and right side menus . This change adds those events in .
Change `` tabs '' to `` bottomTabs '' __EoT__
[ iOS ] Different Tabbar item text colors __EoT__ Added different tabbar item label colors ( iOS only ) ! [ screen shot 2017-05-20 at 23 59 15 ] ( https : //cloud.githubusercontent.com/assets/7584428/26279273/d5a07234-3db7-11e7-9dd7-5cdbf4e8bba4.png )
Typo Fix __EoT__ Fix in android specific use case
Update example AppDelegate to pass launchOptions to the bridge __EoT__ I ran into an issue trying to get push notifications to work on iOS when the user taps on a notification to launch the app from a `` cold '' state using react-native-navigation with react-native-notifications . Without passing launchOptions to the bridge it is not possible to detect the push notification that launched the app . The example AppDelegate.m and associated docs do n't mention this scenario so this should help other users since I do n't see a downside to passing launchOptions by default . This fixes https : //github.com/wix/react-native-notifications/issues/35
[ iOS ] Added option to remove default tab bar shadow ( hairline ) __EoT__ tabBarHideShadow : bool // iOS only . Control default tab bar top shadow ( hairline )
Handle fling in collapsing header with image view __EoT__ fixes # 1284 # 1248
Crossfade collapsing titlebar background color __EoT__
Update left button navigatorEventId when changing TopTabs __EoT__
Fix status bar color not changing after dismissing contextual menu __EoT__ Also listen to contextualMenuDismissed event in Actions screen
Example __EoT__
start activity with fade animation when animationType : 'fade ' is passed __EoT__ [ Android ] make fade animation transition when passed ` animationType : 'fade ' ` and called startSingleScreenApp or startTabBasedApp . fixes # 870
android AppCompat & Design libs version Fixing # 1227 __EoT__ Closes # 1227
Fix multiple modal orientation issue __EoT__ Orientation was reverted to the app orientation each time modal was dismissed . fixes # 1229 closes # 1231
Use table and omit “ run ” in yarn commands __EoT__
Fling collapsing react header __EoT__ Cherrypick 53a93d6e4c21e57576eb10c80c8925d54b292ea6 into master
Fling collapsing react view screens __EoT__
Remove extra line-break to fix rendering list in doc site . __EoT__
Update Docs __EoT__ - Better Adroid installation process - Removed ` react-native start ` in the list . - Placed **Listening to tab selected events** in Screen API and added example - Added **passProps** object in **drawer** - Formatted **Top Level API** sections to utilized sidebar *subLevel* - Added serviceWorker to work even offline 🤘
add setTabButton instructions __EoT__ This is readme update of this PR https : //github.com/wix/react-native-navigation/pull/1133
Custom left button fixes __EoT__ * navBarButtonColor was not applied to custom initial left button * Dynamic custom button didn ’ t work * Setting default icon ( like menu or back button ) after a custom icon was used didn ’ t work
dismissModal wo n't fire appropriate NavigatorEvents __EoT__ # # # Issue Description After calling dismissModal modal and presented view wo n't triggered with appropriate NavigatorEvents . Modal should be triggered with willDisappear & didDisappear Presented View should be triggered with willDisappear & didDisappear This is working well on iOS . -- - # # # Environment * React Native Navigation version : 1.1.x * React Native version : 0.43.4 * Platform ( s ) : Android * Device info : LG Nexus 5X , GM 5 version 7.1.1
Custom buttons on Android does not work __EoT__ Hi ! I 'm changing buttons to custom buttons . I changed 'sideMenu ' button with an icon from react-native-vector-icons and it is working well . But when I try to change de 'back ' button does not work , always show the default left arrow . This is the code : `` ` js import MaterialIcon from 'react-native-vector-icons/MaterialIcons' export default class Activity extends Component { static navigatorStyle = { navBarTextFontFamily : 'Raleway-Bold ' , navBarButtonColor : COLORS.overFirst } constructor ( props ) { super ( props ) MaterialIcon.getImageSource ( 'arrow-back ' , 35 , COLORS.overFirst ) .then ( icon = > { props.navigator.setButtons ( { leftButtons : [ { icon , id : 'back' } ] } ) } ) } // ... } `` ` React native navigation version : 1.1.45 React native version : 0.43.3 Platfrom : Android Device : Simulator EDIT : I 've noticed that also occurs with 'sideMenu ' , basically it seems that the problem is when I try to change button icon from a no-root screen .
Remove unused parameter from showSnackback __EoT__
Bottomtab icon change __EoT__ Added ability to change bottom tab bar icon . Just call this `` ` js navigator.setTabButton ( { tabIndex : 2 , icon : require ( 'img/icon.png ' ) , selectedIcon : require ( 'img/icon_selected.png ' ) , } ) ; `` `
the size of rightButton will be smaller after hot update of Codepush __EoT__ # # # Issue Description my rightbutton 's icon is local png，and it 's correct when release or debug . but it'size will be smaller after hot update through codepush . # # # Steps to Reproduce / Code Snippets / Screenshots in Android it will happen，and in ios it 's no problem -- - # # # Environment * React Native Navigation version : 2.0 * React Native version : 0.37 * Platform ( s ) ( iOS , Android , or both ? ) : only android * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Android 6.0
Add basic splash screen example __EoT__
[ docs ] RNN + MobX boilerplate link added __EoT__
Screen Lifecycle [ EST 2 ] __EoT__ onStart , onStop
Screen Lifecycle [ EST 2 ] __EoT__ onStart , onStop
fix custom nav bar view and add initial props __EoT__
Screen Lifecycle [ EST 2 ] __EoT__ onStart , onStop
Screen Lifecycle [ EST 2 ] __EoT__ onStart , onStop
Implement setStyle on Android __EoT__
Send modal lifecycle events only if modal is not destroyed __EoT__ fixes # 1162
Update sharedElementTransition.ios.js __EoT__ Fix missing import of PropTypes throwing an error on iOS
changed centering logic of title on android __EoT__ when screen uses slide in animation ( so screen starts 'off screen ' ) , getLocationOnScreen is not helpful to center title , ends up being of the screen ... Using absolute values , screen width solves this problem ... @ guyca
Render children and pass props to children __EoT__
pass imageInsets for tab icon [ iOS ] __EoT__ You can pass ImageInsets for tab bar icon ( You can center tab icon when there is no title ) . `` ` js const TABS = [ { screen : 'screen1 ' , icon : require ( 'img/icon1.png ' ) , selectedIcon : require ( 'img/icon1_selected.png ' ) , navigatorStyle : { navBarHidden : true } , iconInsets : { top : 6 , left : 0 , bottom : -6 , right : 0 , } } , { screen : 'scene2 ' , icon : require ( 'img/icon2.png ' ) , selectedIcon : require ( 'img/icon2_selected.png ' ) , navigatorStyle : { navBarHidden : true , } , iconInsets : { top : 6 , left : 0 , bottom : 0 , right : 3 , } } ] `` `
Fix v2 docs basePath __EoT__
V2 docs __EoT__
deep-links payload on docs __EoT__ Documentation of this change # 1128
Fix android e2e flakiness __EoT__
Fix android e2e flakiness __EoT__
Remove basePath from docs/index - allows http/https __EoT__
Import View from react-native __EoT__ I encountered [ this error ] ( https : //github.com/facebook/react-native/issues/8436 ) and identified the cause as an import in ` src/views/sharedElementTransition.ios.js ` . My understanding is that the React Native API changed at some point – ` View ` should be imported from ` react-native ` and not from ` react ` . I 'm using React Native 0.43.1 and React 16.0.0-alpha.6 , but it looks like the React Native API change was made around v0.25 .
Add possibility to pass payload through handleDeepLink __EoT__
iOS - Custom navigation bar view __EoT__ React root view on the navigation bar
Implement switchToTopTab method __EoT__ Usage is identical to switchToTab , closes # 842
SET fixes __EoT__ fixes for SET
Typo Fix In Side menu __EoT__ Corrected typo in the side menu
Update .travis.yml __EoT__
Update README.md __EoT__
Update .travis.yml __EoT__
Update android-specific-use-cases.md __EoT__
Document shared element curved motion __EoT__
Update docs with shared element transition.md __EoT__
Minor fixes to reload flow __EoT__ This is mostly a workaround to overcome faults in the simple event bus implementation , also fixes crash when reloading while modal is displayed .
Support titleBarTitleTextCentered in AppStyle __EoT__
fix show snackbar __EoT__ When you try to show snackbar , it throws an error about « JSON.stringify can not serialize cyclic structures » .
Animate linear translation also when animating shared element bounds __EoT__
Update styling-the-navigator.md __EoT__ Separated iOS and Android only properties .
Apply easing on shared element bounds transformation __EoT__
Add ability to set attributes of navigation bar buttons separately . __EoT__ This will enable to set style attributes to navigation bar buttons separately . It enables you to do stuff like this . < img width= '' 377 '' alt= '' screen shot 2017-03-27 at 01 04 30 '' src= '' https : //cloud.githubusercontent.com/assets/12081272/24336072/5c255130-1289-11e7-9b93-dc90c30cf1ab.png '' > So you can set anything you could before ( color , font size , font weight ) this just add the ability to set them separately if you need to . It also does n't break previous API . So how would you use it ? Before you could do something like this . `` ` js class Screen { static navigatorStyle = { navBarButtonFontSize : 17 , navBarButtonColor : 'red ' , navBarButtonFontWeight : '400 ' , } ; } `` ` Now you can just write styles like this . `` ` js class Screen { static navigatorStyle = { navBarLeftButtonFontSize : 17 , navBarLeftButtonColor : 'red ' , navBarLeftButtonFontWeight : '400 ' , navBarRightButtonFontSize : 17 , navBarRightButtonFontWeight : '600 ' , navBarRightButtonColor : 'blue ' , } ; } `` ` Also where could I update the documentation ?
Fix BottomTabs check in CollapsingViewPagerContentViewMeasurer __EoT__ fixes # 942
Update readme and docs after publishing v1.1.0 __EoT__
Add forceTitlesDisplay to docs __EoT__
Send willAppear didAppear for initial screen __EoT__
Modify compileSdkVersion , buildToolsVersion __EoT__ - compileSdkVersion 25 - buildToolsVersion `` 25.0.1 ''
Set default font when creating defaut appStyle __EoT__
Migrating to RN 0.43 __EoT__
Make screen background image stretch when using screenBackgroundImage… __EoT__ There was a problem with the size of the background image : < img width= '' 383 '' alt= '' pr '' src= '' https : //cloud.githubusercontent.com/assets/7172563/24921582/988b589a-1eeb-11e7-988a-4160903fec48.png '' > > see https : //github.com/wix/react-native-navigation/pull/861 # issuecomment-293282628 This PR make the background image stretch so you wo n't have this `` repeat '' effect .
Compatibility with RN 0.43 and lower __EoT__ The method uses generic object , so do n't is necessary casting . Tested on RN 0.42 and 0.43
Modal background color __EoT__
Add null check before setting font for menu item __EoT__
Fix crash if titleView is null __EoT__
Fix condition on font check for Title font change . __EoT__
Add tabBarTranslucent style option in tabsStyle __EoT__ When we change our splash screen background color from white to other color ( e.g red ) , the tabBar background color also become red . We expect the tabBar background color to be white . We try to set the tabBarBackgroundColor to white , but the tabBar has translucent as default . So , we could not get the expected color . Using this option , we can turn the translucent on or off from the tabsStyle option .
Update docs __EoT__
Create Shared Element screens only on Android __EoT__
Update docs after adding support for custom left button on Android __EoT__
Shared element2 __EoT__
Add statusBarColor to navigator props docs __EoT__ Reading the docs I could n't see a way to simply change the color of the status bar on Android . Only via https : //github.com/wix/react-native-navigation/issues/571 # issuecomment-267255350 I saw there was a prop to do this . ( Assuming this is Android only since iOS only allows for light or dark ) .
Update example app __EoT__
version fix __EoT__
fix push while transitioning __EoT__
Bottom tab selected event __EoT__ This PR adds bottom tab selected event , useful mostly for bi purposes . `` ` js this.eventSubscription = emitter.addListener ( 'bottomTabSelected ' , ( event ) = > { // event.selectedTabIndex // event.unselectedTabIndex } ) ; `` `
Add LightBox to example app on Android __EoT__
Easier to understand lede __EoT__ I saw some comments online in discussions about RNN that readers did n't understand what RNN was about . This change makes it clearer and removes the technical note about react-native-controllers that is n't really interesting to most people . P.S . _lede_ is a [ word ] ( https : //www.merriam-webster.com/dictionary/lede ) , not a spelling mistake . In case you were wondering .
[ iOS ] Correctly size subtitle label before calculating title view width __EoT__ Fixes the subtitle issue mentioned here : https : //github.com/wix/react-native-navigation/issues/764 # issuecomment-288357417 Before : < img width= '' 376 '' alt= '' zrzut ekranu 2017-03-24 o 22 30 55 '' src= '' https : //cloud.githubusercontent.com/assets/12468/24314613/ce43dc30-10e2-11e7-809b-a07d18ba7040.png '' > ( also note `` y '' being cut off ) After : < img width= '' 377 '' alt= '' zrzut ekranu 2017-03-24 o 22 29 09 '' src= '' https : //cloud.githubusercontent.com/assets/12468/24314617/d4925616-10e2-11e7-9859-3295b1378f1c.png '' >
Initial LightBox implementation on Android __EoT__
Android screen lifecycle __EoT__
Fix documentation website link __EoT__
Update README.md __EoT__
Update README.md __EoT__
Rename openSourceIsAwesome.json to wix.json __EoT__
ios - handle null title __EoT__
Android screen lifecycle __EoT__
Android screen lifecycle __EoT__
iOS modals not passing e2e with navigationControllers in them __EoT__
update docs __EoT__
static navigationStyle - title __EoT__
fix example project import in the app delegate __EoT__
[ ios ] Let example app guess the IP address for you . __EoT__ ... but if work to set an IP address directly , it 's right there commented out .
Fix npe in sliding overlay __EoT__ I have experienced this crash in my application and I have added a null check to avoid it . ! [ screen shot 2017-03-21 at 1 09 32 am ] ( https : //cloud.githubusercontent.com/assets/7475133/24130194/26432b6c-0e0d-11e7-8819-53dca31be2ef.png )
Opensourceisawesome __EoT__ Adding the wix mobile open source website config file
change the folder structure to allow to work on it locally ( without hardlinks magic ) __EoT__ The idea here is that if we move all the library code into ` ./lib ` and convert playground to a simple folder ( not an npm project on its own ) then we can use playground for continuous development without magical build steps like we do today ( using mac-hardlink )
pop to root __EoT__
pop to root __EoT__
[ iOS ] Setting title through navigation item does n't change the tab bar label __EoT__ Fixes https : //github.com/wix/react-native-navigation/issues/113
Tab style tabBarSelectedButtonColor is not working on icon image from react-native-vector-icons ? __EoT__ # # # Issue Description ! [ image ] ( https : //cloud.githubusercontent.com/assets/1255011/20957222/6793f932-bc89-11e6-84d2-bbf08d022552.png ) The tabBarSelectedButtonColor only valid for tab label . As you can see , the label color of current tab is changed , but not the icon . The tab icon image is generated by FontAwesome.getImageSource , and it must supply to color param to this function . # # # Code **generate icon images** `` ` javascript /** * 在球场 * zaiqiuchang.com */ import FontAwesome from 'react-native-vector-icons/FontAwesome ' ; import { COLOR } from './config ' ; const icons = { 'tabbar-nearby ' : [ 'map-marker ' , 24 , COLOR.textEmpha , FontAwesome ] , 'tabbar-atcourt ' : [ 'plus-square ' , 24 , COLOR.textEmpha , FontAwesome ] , 'tabbar-me ' : [ 'user ' , 24 , COLOR.textEmpha , FontAwesome ] , } let iconImages = { } ; export function loadIconImages ( ) { return new Promise ( ( resolve , reject ) = > { const iconNames = Object.keys ( icons ) ; Promise.all ( iconNames.map ( iconName = > { let [ name , size , color , vendor
reload while modal is showing , modal leaks __EoT__ see # 878 Maybe wix/detox # 23 will help . Currently fixed by manually unsubscribing from NotificationCenter events on JSReload and nullifying the view .
switch root while modal is showing , modal leaks __EoT__ A bug in iOS causes modals to be kept alive by the system when switching the root view under them . I could n't find a reliable method to test this other than to debug it manually , setting a breakpoint in ` dealloc ` of ` RNNRootViewController ` , and ` RNNReactRootView ` . Maybe https : //github.com/wix/detox/issues/23 will help . Currently fixed by manually ` dismissAllModals ` when ` setRoot ` is called .
Swiping / pop gesture on root Screen breaks navigation push / touches . __EoT__ # # # Issue Description In the example app , swiping ( a pop gesture ) at the edge of the root Screen causes touches to the ContentView etc . have no effect . Eg . tapping the “ Push Plain Screen ” link engages the TouchableHighlight animation but does not cause the navigation to push . After further swiping the screen , eventually , the ignored touches/navigation start having an effect . When this happens the phone behaves as if mid-way through a pan gesture / pushing a Screen Note : If the app has a SideMenu , The ContentView inside the SideMenu does not stop responding to touches . # # # Steps to Reproduce / Code Snippets / Screenshots Build and run the example app ( preferably disable the drawer/SideMenu ) as it makes the issue clearer . To replicate , whilst on the root Screen , swipe from the edge of the physical screen . Now tap on a link to push a Screen . Nothing happens . : ( After this point the Screen stops responding to all touches . Swiping
iOS - add disabledBackGesture __EoT__ This new style will NOT pass between push screens .
Add ability to set background image when transitioning between screens . __EoT__ So I had a problem that app I 'm working on needs to have a gradient background . The default color when transitioning between screens is white . But even though you can set it to a custom color it still does n't look as it should . Here 's an issue # 845 that this PR would solve . So the solution is to set ` screenBackgroundImageName ` which should be a ` string ` . And then in Images.xcassets add the image with the same name . It then picks it up and works as one would expect . Will add android version too in the following days .
Add ContentView after TopBar __EoT__ closes # 851
Show in app notifications on modals __EoT__ Solves issue reported in https : //github.com/wix/react-native-navigation/issues/672 # issuecomment-287020822
Snackback can be displayed statically from Navigation __EoT__ When snackbar cta is clicked - event is dispatched with the specified eventId
Save dynamic fab in ScreenParams __EoT__ Since fab set dynamically wasn ’ t saved in screen params , when returning to that screen the fab was n't displayed . This commit also enables setting fab dynamically in modals
Update README.md __EoT__
Update README.md __EoT__
Removed not existing link from readme __EoT__ There was no link for migration to v2 and changelog . It looks bad when dead links are on main readme , so I removed the link .
Save titleBarHidden in screenParams when toggling TitleBar __EoT__
pop screen by id when not on top __EoT__
Support setting orientation for application and modals __EoT__ Closes # 681
pop screen by id when not on top __EoT__
showModal + dismissModal on multiple controllers __EoT__
showModal + dismissModal on multiple controllers __EoT__
showModal + dismissModal on multiple controllers __EoT__
showModal + dismissModal on multiple controllers __EoT__
support cmd+R on RN 40 __EoT__
Fix collapse issue after list bounce back __EoT__ When a view with collapsing header was fully expended , scrolling down and quickly releasing the finger would couse the list to `` bounce back '' . Since the view can collapse only if its scrollY amount is less then the scaled touch slop - the view did n't collapse and instead , scroll was enabled .
Refactor orientation logic to separate class __EoT__ closes # 661
[ android ] Custom orientation change hnadling __EoT__ Hey , this PR adds top level events for custom orientation change handling , and also method to get current orientation for android . I am using it in production for quite some time without any problems . Also the functionality to lock orientation is still working okay .
Set LeftButton color from screen __EoT__ fixes # 746
Switch to RCTJavaScriptWillStartLoadingNotification __EoT__ fixes # 800 # 797
Add logo to readme __EoT__
Implement collapsingToolBarExpendedColor and showTitleWhenExpended __EoT__ collapsingToolBarExpendedColor - determines the TitleBar color in expended mode showTitleWhenExpended - defaults to true when expended color is defined .
Change subtitle color property name to navBarSubtitleColor __EoT__ This commit changes the subtitle color property name on **Android** from ` navBarTextSubtitleColor ` to ` navBarSubtitleColor `
Fadeout translucent drawable when collapsing __EoT__ * Change default scrim color to none * Fade out translucent when collapsingToolBarCollapsedColor is not defined
Animate between translucent and solid background in collapsed titlebar __EoT__ This commit adds ability to set the titleBar color when it ’ s in collapsed state . This is useful when the buttons and title in the TitleBar are white and the screen contains a bright header . Note that this property is used only if navBarTranslucent is true : `` ` js collapsingToolBarCollapsedColor : 'red ' , navBarTranslucent : true `` `
Fix/set style __EoT__ Fixes setting transparency of navigation bar in setStyle method Did n't realise there was some fallout here with the transitionCoordinator stuff you added in to change transparency along with the coordinator , just added another check to the if statement : )
Ignore config changes in portrait and landscape activities __EoT__ This is introduced in order to prevent our activity from getting destroyed if we launch a third party app , and that app changes orientation .
react view measurment fixes __EoT__
Enable reloading from cmd __EoT__ ` adb shell am broadcast -a react.native.RELOAD ` from terminal to reload the app
Fix possible IllegalStateException crash __EoT__ Crash description here http : //stackoverflow.com/questions/7575921/illegalstateexception-can-not-perform-this-action-after-onsaveinstancestate-wit
Clear intent extras in onPause __EoT__ this prevents linking module from handling intents each time app is returned to foreground
Ability to pass options to Redux Provider __EoT__ With this merge request , we will have the ability to supply additional options to the Provider . This is commonly used to libraries like ` react-apollo ` where client is to be passed to the provider . Usage `` ` javascript Navigation.registerComponent ( screenName , ( ) = > screen , store , ApolloProvider , { client : GraphQLClient } ) ; `` `
fake onNewIntent to handle deep links when app is in foreground __EoT__
Feature/styling __EoT__ Adds better styling : - Adds ability to style fonts in : navigation title and subtitle , navigation bar items ( iOS only implementation ) - Adds ability to set modal presentation style when presenting a view ( iOS only ) - Adds backgroundColor property to styling ( iOS only implementation ) - Fixes navigation subtitle not showing on tab based app - Adds ability to set navigator style after view appears N.B : `` ` + ( NSMutableDictionary * ) textAttributesFromDictionary : ( NSDictionary * ) dictionary withPrefix : ( NSString * ) prefix baseFont : ( UIFont * ) baseFont `` ` will not work in RN < 0.33 , however it is a simple change to fix it if you do n't want to support 0.33 yet ( Everything else seems to work find in 0.33 )
Update README.md __EoT__
Add dismissSnackbar method __EoT__
Expose onNewIntent in ActivityCallbacks __EoT__
notify when modal dismissed ( after animation if exists ) __EoT__
Additional snackbar style params __EoT__ Implement backgroundColor and textColor style params
compensate for bottomTabs __EoT__
Dynamic height of collapsing react header __EoT__
Dynamic height for CollapsingReactHeader __EoT__ This commit deprecates collapsingToolBarComponentHeight style property
[ Android ] Detect height of notification . __EoT__
Add error when trying to load a component which was badly registered __EoT__ I struggeled quite a while debugging # 485 `` Can not read property 'navigatorStyle ' of undefined '' which originates from incorrectly registering the component . In order to save time for other users I suggest this small change to give a more verbose error when this happens .
Return if hasStartedCreatingContext already in SplashActivity __EoT__
Notification auto dismiss timer __EoT__ [ Android ] Control the duration of the auto dismiss timer with ` autoDismissTimerSec ` like on iOS [ Android ] Default ` autoDismissTimerSec ` to 5 like on iOS [ All ] Add ` autoDismiss ` param to enable/disable auto dismiss behaviour . Defaults to ` true `
Add showInAppNotification position param support for Android __EoT__ Allows position parameter to make the notification appear on bottom of Screen . Defaults to ` top ` . `` ` javascript Navigator.showInAppNotification ( { screen : `` example.InAppNotification '' , position : `` bottom '' , } ) ; `` `
Return rightButtons instead of navigatorButtons __EoT__
Call newStack by navigatorId __EoT__
Fix tabs with out icons __EoT__
TopTabs icons __EoT__ This commit adds support for icons in TopTabs . It ’ s possible to have icons with text , or only icons . Use ` topTabIconColor ` and ` selectedTopTabIconColor ` to color the icons
Create layout params from screen params in newStack __EoT__
Allow the user to use his own navigatorButtons when calling showModal , push etc.. __EoT__ Android : If the user has specified navigatorButtons on the showModal params use those instead of the default navigatorButtons of the registered screen . If I do n't add that if , the existing code erases the navigatorButtons I pass on my params object .
Reset to __EoT__
Fix tab bar selected event __EoT__ Make tab bar selected event only once ( if tab index actually changed )
Fix popToRoot when keyboard is visible __EoT__ Before this , if we have multiple screens on the stack and the keyboard is visible and we call ` popToRoot ` , then the screens do n't pop as expected . This is because of the way the screen is popped if the keyboard is visible and when the keyboard is not visible . When the keyboard is visible , we attach a keyboard close handler in which we pop the screen and close the keyboard which would eventually invoke the keyboard close handler and pop the screen . If they keyboard is not visible , we directly pop the screen . If we call ` popToRoo ` t , since we call pop in a while loop , in the first call to pop , we detect that the keyboard is visible , hence attach the keyboard close handler and close the keyboard which would eventually invoke the keyboard close handler and we will pop the screen . But since the event handling would be done asynchronously , we end up calling the next pop in the while loop before the close keyboard handler is invoked . In the second pop
Sliding overlay __EoT__
Temp fix for set buttons immutability issue __EoT__
getFab should return fab __EoT__
add tabBarDelegate __EoT__ not really needed since RCCTabBarController is already delegate to him self ( inheritss from UITabBarController ) . adding this for the record .
added tab selected event __EoT__
Missing fab in pushed screen __EoT__
Draw screen under bottom tabs only if hideOnsScroll is true __EoT__
handle hiding/showing the navigation bar properly when moving between… __EoT__ … screen that have a transparent navigation bar and ones that have visible bars .
added status bar color scheme for single screen which is n't pass on p… __EoT__ added status bar color scheme for single screen which is n't pass on push . Set `` statusBarTextColorSchemeSingleScreen '' on the navigatorStyle
Minor contextualMenu fixes __EoT__ * Pass showAsAction property to native . It was left out by mistake * Support textual icons in contextual menu
Bugfix - layout animation on tabBar __EoT__ Fixed tab bar layout animation . When first time each tab selected and the layout animation weirdly and defaultly happend .
Added default testId to registered components __EoT__
Less intrusive collapse __EoT__
Pass the style parameter to DrawerControllerIOS __EoT__ Now the style parameter is used inside RCCDrawerController but it 's not passed through startTabBasedApp/startSingleScreenApp . Passing the style parameter allows to disable sidebar shadow trough style.drawerShadow .
Add topBarElevationShadowEnabled style property __EoT__ related to # 557 # 474 # 125
Bug : Right drawer on Android does n't work # 297 __EoT__ If the left drawer is not defined in startSingleScreenApp config then the right drawer does n't work
Added subtitle option to screenParams __EoT__
Fix crash when right SideMenu is undefined __EoT__
Collapse content on fling __EoT__
TitleBar hide on scroll __EoT__ Fix TitleBar hide on scroll when screen is drawn under TopBar
Reduce collapsing TopBar sensitivity __EoT__ Take scaledTouchSlop into account when calculating CollapseAmount to prevent the TopBar from translating after every touch event , even when the users intent was not to scroll in Y direction .
Added missing setStyle to SideMenu __EoT__
Menu set style fix __EoT__ - Fixes crash if both menus are n't defined - Allows disableOpenGesture to be defined on a per menu basis
Revert `` adding detox '' __EoT__ This reverts commit 5e2a4d087897c42670ba15603e79840a6f984a32 .
Android right side menu __EoT__
Revert `` adding detox '' __EoT__ This reverts commit 5e2a4d087897c42670ba15603e79840a6f984a32 .
Landscape only __EoT__ Implemented this for a tablet layout , thoughts ?
Measure SideMenu width according to react root view __EoT__
Fix contextual menu wrong index __EoT__
Update README.md __EoT__
NavigationActivity implements PermissionAwareActivity __EoT__ To target android API 23 and above , an activity must perform permission handling . React native already provides PermissionAwareActivity interface . NavigationActivity must implement PermissionAwareActivity to handle permissions .
Fix tabIndicatorHeight __EoT__
2.0.0-experimental.147 __EoT__
Set disabled title bar button color if AppStyle is undefined __EoT__
Fix __EoT__
Fix example __EoT__ example `` show single screen app '' now will show the side menu ( drawer )
Fix npe when appStyle is undefined __EoT__ fixes # 493
Fixes titleBarDisabledButtonColor __EoT__
Set activity layout color from appStyle __EoT__ closes # 464
Intercept touch event only if ScrollView exists __EoT__
Intercept touch event only if ScrollView exists __EoT__
Ability to set a screenBackgroundColor on iOS __EoT__ By default , the iOS view colour seems to be white . Without this option , I still get a white screen briefly while the first component loads . Only really relevant to iOS as you can set the Android view background in the manifest . If I 'm just doing something wrong and this is n't necessary , I 'm all ears !
Collapsing view pager screen __EoT__
When starting the app , pass through extras included in the launch intent __EoT__ It 's great that we now have the DeepLinkHandler to pass through deep links ! It would be really handy to also pass through extras from the intent - there 's a variety of uses , but the main one is making sure we do n't lose push notification data ( which gets set in the intent extras ) when starting NavigationApplication .
pass type and animationType to DrawerControllerIOS in startSingleScreenApp __EoT__ Currently getting this warning : ` Set to default type=MMdrawer animationType=slide ` Setting the props made no difference when running in single screen app mode as the props were n't passed to the DrawerControllerIOS component
Hexagonal pattern fixes __EoT__ Fixed wrong 'else if ' ( it had the same condition as previous 'if ' but it should have been just 'else ' ) Fixed typo and changed Finnish 'saldo ' word to 'balance ' Deleted unused imports Simplified few other things
Refactor Page-object pattern __EoT__ Refactor page-object - Solves # 524 - The goal here was to move all sources placed in src/test instead of src/main to be able to used the uml-reverse-mapper . Pull request description : - Create 2 Sub modules such as in the initial commit from @ colinbut : - sample-application : that represents the sample application under test . - test-automation : that represents the test project which tests that sample application - The second commit was to replace e.printStackTrace with a Logger like recommanded by Sonar . PS : I update the root pom.xml to remove the scope `` test '' under net.sourceforge.htmlunit because now we need it for the test-automation src/main folder .
Minor refactorings and code style changes __EoT__ - Removed several use of raw types - Removed unnecessary throws clauses - Used lambda expressions wherever applicable - Used apt assertion methods for readability - Use of try with resources wherever applicable - Corrected incorrect order of assertXXX arguments
Refactored Event Queue __EoT__ 1 ) Test cases were not stopping AudioService before ending test case , but test comments suggested differently . `` ` // test that service is finished assertFalse ( ! audio.isServiceRunning ( ) ) ; // which is equivalent to service is running `` ` 2 ) Changed ` Audio ` to be a good singleton , previously because of ` Audio ` being bad singleton , test cases which were using static methods could have caused intermittent failures . After changes now each test case has dedicated instance of ` Audio ` service which provides isolation between test cases . 3 ) Made ` stop ( ) ` method blocking till service stops 4 ) Made some other refactorings as well Todo -- - - [ x ] Update class diagram once PR is approved .
Refactoring changes in Ambassador Pattern __EoT__ Changes -- - - Updated test cases to use Junit Assert method as compared to assert keyword - Proper testing of ` RemoteService ` using ` RandomProvider ` interface . Introduced ` RandomProvider ` interface so that randomness can be controlled from test cases . - For readability used constant for representing FAILURE Todos -- - - [ x ] Update class diagram once refactoring is approved - > no class diagram
Implement Iterator for Binary Search Tree __EoT__ The current iterator implementation is only against a List . I think the beauty/power of an iterator is best exemplified in its implementation against more complex data structures . I 'd like to implement an Iterator over a BST ( for starters ) .
Collection Pipeline pattern __EoT__ https : //martinfowler.com/articles/collection-pipeline/ https : //www.ibm.com/developerworks/library/j-java8idioms2/index.html
Collection Pipeline pattern __EoT__ https : //martinfowler.com/articles/collection-pipeline/ https : //www.ibm.com/developerworks/library/j-java8idioms2/index.html
Consistent naming and tagging for EIP patterns __EoT__ Some of the EIPs have used naming convention beginning with eip-xxx . Apply this naming to all EIPs to make them consistent . Also should check that EIPs at http : //java-design-patterns.com/patterns/ have consistent categories and tags .
Simplify Multiton implementation __EoT__ The implementation could be simplified as commented here : http : //java-design-patterns.com/patterns/multiton/ # comment-3432626979
Simplify Multiton implementation __EoT__ The implementation could be simplified as commented here : http : //java-design-patterns.com/patterns/multiton/ # comment-3432626979
Dirty Flag pattern __EoT__ http : //gameprogrammingpatterns.com/dirty-flag.html
Remove redundant explicit super ( ) constructor calls __EoT__ The super ( ) calls ( taking no arguments ) are inserted during compile time , so just make the code more verbose than required . One example is found in the [ HeroStat ] ( https : //github.com/iluwatar/java-design-patterns/blob/master/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java # L40 ) class .
Pattern : trampoline . Is it needed ? __EoT__ Hi ! I have not found a pattern Trampoline in the list . I want to discuss adding this pattern to list . Will be it right ? I can do it if it is possible .
SonarQube update __EoT__ Hi , About 6 months ago , we renamed SonarQube.com to SonarCloud . The URL of the service changed from https : //sonarqube.com to https : //sonarcloud.io . I am contacting you because we noticed that you are still using the old URL ( sonarqube.com ) to point to the service when you run analyses . Typically , this is set through the `` sonar.host.url '' property in your build scripts , or in your CI tool configuration ( like an end-point in VSTS or a global config in Jenkins ) . In a few months , we are going to drop the old URL to keep only https : //sonarcloud.io . You probably want to take a look at this early to prevent any futur errors in your build jobs . Also , if you are using Travis as your CI engine to trigger the analyses , I suggest that you take a look at our [ Travis Add-on ] ( https : //docs.travis-ci.com/user/sonarcloud/ ) . Relying on this add-on would allow to not be impacted by potential similar changes in the future . Hope you enjoy the service ! Best regards , Fabrice Bellingard |
AbstractDocument : price or partner ? __EoT__ On the diagram of ` AbstractDocument ` , ` HasPrice.getPartner ( ) ` should be ` HasPrice.getPrice ( ) ` .
The tool to make the class diagrams should be IDE independent __EoT__ Not everybody uses Eclipse , which is a requirement for the current tool [ ObjectAid UML Explorer ] ( http : //www.objectaid.com/home ) .
The tool to make the class diagrams should be IDE independent __EoT__ Not everybody uses Eclipse , which is a requirement for the current tool [ ObjectAid UML Explorer ] ( http : //www.objectaid.com/home ) .
The tool to make the class diagrams should be IDE independent __EoT__ Not everybody uses Eclipse , which is a requirement for the current tool [ ObjectAid UML Explorer ] ( http : //www.objectaid.com/home ) .
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Aggregator ( EIP ) __EoT__
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Splitter ( EIP ) __EoT__
Splitter ( EIP ) __EoT__
Splitter ( EIP ) __EoT__
Wire Tap ( EIP ) __EoT__
Wire Tap ( EIP ) __EoT__
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
SonarQube reports bugs __EoT__ The project is automatically scanned with SonarQube . The static code analysis reports several blocker and critical level issues that should be fixed . https : //sonarcloud.io/project/issues ? id=com.iluwatar % 3Ajava-design-patterns & resolved=false & severities=BLOCKER % 2CCRITICAL & types=BUG
SonarQube reports bugs __EoT__ The project is automatically scanned with SonarQube . The static code analysis reports several blocker and critical level issues that should be fixed . https : //sonarcloud.io/project/issues ? id=com.iluwatar % 3Ajava-design-patterns & resolved=false & severities=BLOCKER % 2CCRITICAL & types=BUG
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Missing synchronized keyword __EoT__ Hi , https : //github.com/iluwatar/java-design-patterns/blob/master/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java # L58 - the method should also be ` synchronized ` . Best regards , Martin
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Maven hangs during ` mvn clean install ` for reactor pattern __EoT__ Maven seems to hang during reactor pattern 's testing and will not complete . Below is my maven version and a link to a gist of 2 run attempts . I waited for over 30 minutes on the second attempt and a it never completed . I am not sure if this is the only pattern that does it but it happens every time . ` $ mvn -- version Apache Maven 3.5.0 ( ff8f5e7444045639af65f6095c62210b5713f426 ; 2017-04-03T15:39:06-04:00 ) Maven home : /usr/local/Cellar/maven/3.5.0/libexec Java version : 1.8.0_131 , vendor : Oracle Corporation Java home : /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre Default locale : en_US , platform encoding : UTF-8 OS name : `` mac os x '' , version : `` 10.12.5 '' , arch : `` x86_64 '' , family : `` mac '' ` https : //gist.github.com/Jahhein/0a6e91c44a7603839841389881800442
SonarQube reports bugs __EoT__ The project is automatically scanned with SonarQube . The static code analysis reports several blocker and critical level issues that should be fixed . https : //sonarcloud.io/project/issues ? id=com.iluwatar % 3Ajava-design-patterns & resolved=false & severities=BLOCKER % 2CCRITICAL & types=BUG
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
Data Transfer Object pattern __EoT__ http : //martinfowler.com/eaaCatalog/dataTransferObject.html
SonarQube reports bugs __EoT__ The project is automatically scanned with SonarQube . The static code analysis reports several blocker and critical level issues that should be fixed . https : //sonarcloud.io/project/issues ? id=com.iluwatar % 3Ajava-design-patterns & resolved=false & severities=BLOCKER % 2CCRITICAL & types=BUG
unadded opcode on invokedynamic __EoT__ Hi ! If I try to decompile some code with a lamdba function , or a method reference in it , I get an **UNADDED OPCODE** message in the decompiled byte code . For example , the following lines : `` ` list02.forEach ( i - > add02 ( i ) ) ; list03.forEach ( Main : :add03 ) ; `` ` results the following : `` ` L3 { getstatic hu/package/lambda/Main.list02 : java.util.List UNADDED OPCODE : invokedynamic org.objectweb.asm.tree.InvokeDynamicInsnNode @ 34ffbfae invokeinterface java/util/List forEach ( ( Ljava/util/function/Consumer ; ) V ) ; } L4 { getstatic hu/package/lambda/Main.list03 : java.util.List UNADDED OPCODE : invokedynamic org.objectweb.asm.tree.InvokeDynamicInsnNode @ 6af5c84c invokeinterface java/util/List forEach ( ( Ljava/util/function/Consumer ; ) V ) ; } `` `
Hide .bytecodeviewer in user home directory __EoT__ Hi , I personally dislike it when dotfiles/dotfolders are n't hidden in Windows as they are by default on Linux because it fills up my folder . This is kind of just a minor thing and I 'll be working on it in my fork . I 'll send you a PR when done .
java.lang.IncompatibleClassChangeError __EoT__ java.lang.IncompatibleClassChangeError : javax/microedition/khronos/opengles/GL11ExtensionPack at android.os.Environment.getPrimaryVolume ( Environment.java:219 ) at android.os.Environment.getExternalStorageState ( Environment.java:748 ) at com.nostra13.universalimageloader.utils.StorageUtils.getCacheDirectory ( StorageUtils.java:70 ) at com.nostra13.universalimageloader.core.DefaultConfigurationFactory.createReserveDiskCacheDir ( DefaultConfigurationFactory.java:98 ) at com.nostra13.universalimageloader.core.DefaultConfigurationFactory.createDiskCache ( DefaultConfigurationFactory.java:81 ) at com.nostra13.universalimageloader.core.ImageLoaderConfiguration $ Builder.initEmptyFieldsWithDefaultValues ( ImageLoaderConfiguration.java:580 ) at com.nostra13.universalimageloader.core.ImageLoaderConfiguration $ Builder.build ( ImageLoaderConfiguration.java:559 ) at MyApplication.initImageLoader ( MyApplication.java:118 ) at MyApplication.onCreate ( MyApplication.java:49 ) at android.app.Instrumentation.callApplicationOnCreate ( Instrumentation.java:1007 ) at android.app.ActivityThread.handleBindApplication ( ActivityThread.java:4564 ) at android.app.ActivityThread.access $ 1300 ( ActivityThread.java:188 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1368 ) at android.os.Handler.dispatchMessage ( Handler.java:99 ) at android.os.Looper.loop ( Looper.java:137 ) at android.app.ActivityThread.main ( ActivityThread.java:5223 ) at java.lang.reflect.Method.invokeNative ( Method.java ) at java.lang.reflect.Method.invoke ( Method.java:525 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:737 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:553 ) at dalvik.system.NativeStart.main ( NativeStart.java )
NPE for loading contact photo from content : // __EoT__ Hello , When I tried to load contact photo from content , I 'm getting NPE for the users who does n't have any contact photos . How can I resolve this issue ? Actually , it 's working for the users who have photo info . But getting this exception for the rest of them : `` ` D/ImageLoader﹕ Load image from network [ content : //com.android.contacts/contacts/118_120x120 ] D/ImageLoader﹕ Start display image task [ content : //com.android.contacts/contacts/118_120x120 ] E/ImageLoader﹕ null java.lang.NullPointerException at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.resetStream ( BaseImageDecoder.java:173 ) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.decode ( BaseImageDecoder.java:77 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.decodeImage ( LoadAndDisplayImageTask.java:264 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:237 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:135 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1112 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:587 ) at java.lang.Thread.run ( Thread.java:841 ) `` ` Configuration : `` ` java ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder ( context ) .memoryCache ( new LruMemoryCache ( 20 * 1024 * 1024 ) ) .memoryCacheSize ( 20 * 1024 * 1024 ) .memoryCacheSizePercentage ( 13 ) .memoryCacheExtraOptions ( thumbnailSize , thumbnailSize ) .defaultDisplayImageOptions ( DisplayImageOptions.createSimple ( ) ) .writeDebugLogs ( ) .build ( ) ; ImageLoader.getInstance ( ) .init ( config ) ;
NPE for loading contact photo from content : // __EoT__ Hello , When I tried to load contact photo from content , I 'm getting NPE for the users who does n't have any contact photos . How can I resolve this issue ? Actually , it 's working for the users who have photo info . But getting this exception for the rest of them : `` ` D/ImageLoader﹕ Load image from network [ content : //com.android.contacts/contacts/118_120x120 ] D/ImageLoader﹕ Start display image task [ content : //com.android.contacts/contacts/118_120x120 ] E/ImageLoader﹕ null java.lang.NullPointerException at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.resetStream ( BaseImageDecoder.java:173 ) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.decode ( BaseImageDecoder.java:77 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.decodeImage ( LoadAndDisplayImageTask.java:264 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:237 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:135 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1112 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:587 ) at java.lang.Thread.run ( Thread.java:841 ) `` ` Configuration : `` ` java ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder ( context ) .memoryCache ( new LruMemoryCache ( 20 * 1024 * 1024 ) ) .memoryCacheSize ( 20 * 1024 * 1024 ) .memoryCacheSizePercentage ( 13 ) .memoryCacheExtraOptions ( thumbnailSize , thumbnailSize ) .defaultDisplayImageOptions ( DisplayImageOptions.createSimple ( ) ) .writeDebugLogs ( ) .build ( ) ; ImageLoader.getInstance ( ) .init ( config ) ;
Exception on UIL init __EoT__ version of UIL ( v1.9.1 ) Report from production app release Exception in https : //github.com/nostra13/Android-Universal-Image-Loader/blob/master/library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java # L148 java.lang.NoSuchMethodError : getSecurityManager Device information : ST25i DEVICE Portrait ORIENTATION On PROXIMITY 41 % BATTERY OPERATING SYSTEM 4.0.4 ANDROID VERSION No ROOTED Portrait UI ORIENTATION 7 % RAM
NullPointerException in LruDiscCache.get ( LruDiscCache.java:124 ) __EoT__ Hi , I received many crash reports from Crashlytics last week . Version : UIL 1.9.2 with LruDiscCache Device : OPPO U701+ 4.0.4 + Rooted StackTrace : java.lang.NullPointerException at com.nostra13.universalimageloader.cache.disc.impl.ext.LruDiscCache.get ( LruDiscCache.java:124 ) at com.nostra13.universalimageloader.core.ImageLoaderEngine $ 1.run ( ImageLoaderEngine.java:72 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1076 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:569 ) at java.lang.Thread.run ( Thread.java:856 )
Bitmap too large to be uploaded into a texture __EoT__ Hi @ nostra13 I 'm getting a `` Bitmap too large to be uploaded into a texture ( 2592x1944 , max=2048x2048 ) '' as well and I 'm using 1.9.1 . I can load the image in landscape but not in portrait ( using the same layout ) In my Application : `` ` java ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder ( getApplicationContext ( ) ) .build ( ) ; ImageLoader.getInstance ( ) .init ( config ) ; `` ` In my Activity : `` ` java ImageLoader m_imageLoader = ImageLoader.getInstance ( ) ; DisplayImageOptions m_options = new DisplayImageOptions.Builder ( ) .showImageOnLoading ( R.drawable.image_loading ) // resource or drawable .showImageForEmptyUri ( R.drawable.image_error ) // resource or drawable .showImageOnFail ( R.drawable.image_error ) // resource or drawable .build ( ) ; `` `
Bitmap too large to be uploaded into a texture __EoT__ Hi @ nostra13 I 'm getting a `` Bitmap too large to be uploaded into a texture ( 2592x1944 , max=2048x2048 ) '' as well and I 'm using 1.9.1 . I can load the image in landscape but not in portrait ( using the same layout ) In my Application : `` ` java ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder ( getApplicationContext ( ) ) .build ( ) ; ImageLoader.getInstance ( ) .init ( config ) ; `` ` In my Activity : `` ` java ImageLoader m_imageLoader = ImageLoader.getInstance ( ) ; DisplayImageOptions m_options = new DisplayImageOptions.Builder ( ) .showImageOnLoading ( R.drawable.image_loading ) // resource or drawable .showImageForEmptyUri ( R.drawable.image_error ) // resource or drawable .showImageOnFail ( R.drawable.image_error ) // resource or drawable .build ( ) ; `` `
java.lang.NullPointerException in StorageUtils.getCacheDirectory __EoT__ Hello . I received an error log from my user . `` ` java java.lang.RuntimeException : Unable to create application my.CustomApplication : java.lang.NullPointerException at android.app.ActivityThread.handleBindApplication ( ActivityThread.java:4584 ) at android.app.ActivityThread.access $ 1600 ( ActivityThread.java:161 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1325 ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:157 ) at android.app.ActivityThread.main ( ActivityThread.java:5356 ) at java.lang.reflect.Method.invokeNative ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:515 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:1265 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:1081 ) at dalvik.system.NativeStart.main ( Native Method ) Caused by : java.lang.NullPointerException at android.os.Environment.getStorageState ( Environment.java:715 ) at android.os.Environment.getExternalStorageState ( Environment.java:690 ) at com.nostra13.universalimageloader.utils.getCacheDirectory ( SourceFile:68 ) at my.CustomApplication.onCreate ( SourceFile:97 ) at android.app.Instrumentation.callApplicationOnCreate ( Instrumentation.java:1025 ) at android.app.ActivityThread.handleBindApplication ( ActivityThread.java:4581 ) ... 10 more `` ` Device specifications : Model SCH-I545 Android 4.2.2 My line №97 `` ` java File cacheDir = StorageUtils.getCacheDirectory ( getApplicationContext ( ) ) ; `` `
ImageLoader.loadImageSync ( ) does not load images to cache __EoT__ When trying to use ` ImageLoader.loadImageSync ( ) ` to precache images , I noticed that ` IOUtils.shouldStopLoading ( ) ` cancels downloads prematurely by way of ` LoadAndDisplayImageTask.onBytesCopied ( ) ` which calls through to ` LoadAndDisplayImageTask.fireProgressEvent ( ) ` . I assume that ` fireProgressEvent ( ) ` cancels because a progress listener does n't make sense in a synchronous download , but of course that should n't cancel the entire download . I think the line ` if ( syncLoading || isTaskInterrupted ( ) || isTaskNotActual ( ) ) return false ; ` would make more sense in ` onBytesCopied ( ) ` than in ` fireProgressEvent ( ) ` - or am I missing something ?
StrictMode : termination method 'close ' not called __EoT__ I 'm using 1.9.2-SNAPSHOT , and a warning occurred like below `` ` E/StrictMode﹕ A resource was acquired at attached stack trace but never released . See java.io.Closeable for information on avoiding resource leaks . java.lang.Throwable : Explicit termination method 'close ' not called at dalvik.system.CloseGuard.open ( CloseGuard.java:184 ) at java.io.FileInputStream. < init > ( FileInputStream.java:80 ) at com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache.get ( DiskLruCache.java:434 ) at com.nostra13.universalimageloader.cache.disc.impl.ext.LruDiscCache.get ( LruDiscCache.java:124 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:216 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:135 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1080 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:573 ) at java.lang.Thread.run ( Thread.java:841 ) `` ` so I tried to change source in LruDiscCache.java , the warning was disappeared . please check this warning changed code is `` ` java @ Override public File get ( String imageUri ) { DiskLruCache.Snapshot snapshot = null ; try { snapshot = cache.get ( getKey ( imageUri ) ) ; return snapshot == null ? null : snapshot.getFile ( 0 ) ; } catch ( IOException e ) { L.e ( e ) ; return null ; } finally { if ( snapshot ! = null ) { snapshot.close ( ) ; } }
IoUtils.copyStream should invoke os.flush ? __EoT__ if os instanceOf BufferedOutputStream , without invoke os.flush , no IOException will be thrown if there is really a IOException ?
Canceling display task results in incomplete image being cached on disk __EoT__ I have a single ImageView on which the user can swipe left or right to navigate through a collection of images ( viewing one at a time ) . The user is able to swipe to the next image before the current image is finished loading . If this happens then the prior display task is canceled . However if the user then swipes back to the prior image , the image is shown immediately ( from cache ) however it is incomplete . The top part of the image is correct , but the bottom part is missing ( filled grey ) : ! [ partial ] ( https : //f.cloud.github.com/assets/6404421/1916523/76648bbc-7d7a-11e3-84b4-79d3c381fafc.png ) So my question is , how can i clear this incomplete image out of the cache so that ImageLoader will grab it from the network ? Or equivalently , how can i prevent incomplete images from being cached in the first place ? Here are my configuration options : `` ` java Options decodingOptions = new Options ( ) ; decodingOptions.inSampleSize = 3 ; decodingOptions.inPreferredConfig = Config.RGB_565 ; DisplayImageOptions displayOptions = new DisplayImageOptions.Builder ( )
DisplayImageOptions always need to get mainThread 's Handler ? __EoT__ `` ` public Handler getHandler ( ) { if ( isSyncLoading ) { return null ; } else { if ( handler == null ) { if ( Looper.myLooper ( ) ! = Looper.getMainLooper ( ) ) { throw new IllegalStateException ( `` ImageLoader.displayImage ( ... ) must be invoked from the main thread or from Looper thread '' ) ; } return new Handler ( ) ; } else { return handler ; } } } `` ` test in 1.9.0 when i need just load image without setting to imageview , i use loadImage.so i do n't want a handler that must be in MainThread ( ui thread ) , maybe i invoke loadImage in other threads . but now there is no choice and app will be crash if firsttime invoke loadImage in other threads .
TCP Resets when error codes are returned with data __EoT__ If an image is requested , but does n't exist on a server , an error code is returned e.g . 501 . The response may also include additional data that describes the reason for the failure . For example : `` ` xml < detail > < errorCode > 501 < /errorCode > < errorDescription > GetFile - FileName missing. < /errorDescription > < /detail > `` ` If that data is n't read , the TCP FIN-ACK wo n't be sent and the conversation will be reset ( RST . ) One solution is to check for extra data , read it and throw it away . `` ` java if ( urlcon.getContentLength ( ) > 0 ) { byte [ ] drainResponse = new byte [ 64 ] ; InputStream bis = new BufferedInputStream ( urlcon.getInputStream ( ) ) ; while ( bis.read ( drainResponse , 0 , 64 ) > 0 ) ; } `` `
TCP Resets when error codes are returned with data __EoT__ If an image is requested , but does n't exist on a server , an error code is returned e.g . 501 . The response may also include additional data that describes the reason for the failure . For example : `` ` xml < detail > < errorCode > 501 < /errorCode > < errorDescription > GetFile - FileName missing. < /errorDescription > < /detail > `` ` If that data is n't read , the TCP FIN-ACK wo n't be sent and the conversation will be reset ( RST . ) One solution is to check for extra data , read it and throw it away . `` ` java if ( urlcon.getContentLength ( ) > 0 ) { byte [ ] drainResponse = new byte [ 64 ] ; InputStream bis = new BufferedInputStream ( urlcon.getInputStream ( ) ) ; while ( bis.read ( drainResponse , 0 , 64 ) > 0 ) ; } `` `
StrictMode : Explicit termination method 'close ' not called __EoT__ Nexus 4+ kitkat : 12-12 11:34:49.186 29631-29645 E/StrictMode﹕ A resource was acquired at attached stack trace but never released . See java.io.Closeable for information on avoiding resource leaks . java.lang.Throwable : Explicit termination method 'close ' not called at dalvik.system.CloseGuard.open ( CloseGuard.java:184 ) at java.io.FileInputStream. < init > ( FileInputStream.java:80 ) at java.io.FileInputStream. < init > ( FileInputStream.java:105 ) at com.nostra13.universalimageloader.core.download.BaseImageDownloader.getStreamFromFile ( BaseImageDownloader.java:142 ) at com.nostra13.universalimageloader.core.download.BaseImageDownloader.getStream ( BaseImageDownloader.java:78 ) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.getImageStream ( BaseImageDecoder.java:83 ) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.decode ( BaseImageDecoder.java:69 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.decodeImage ( LoadAndDisplayImageTask.java:307 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:253 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:128 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1112 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:587 ) at java.lang.Thread.run ( Thread.java:841 )
Possible Memory Waste ( OutOfMemoryError ) with Solution __EoT__ Hi , I am using this library since 3 days and using the dump profile of eclipse I found that if application uses ImageLoader in a SurfaceView , there could be a Possible Memory Waste This is the dump in my app : `` ` Duplicate Strings ( 9.516.384 total bytes wasted Instead of 192 total bytes ) : Top elements include : •94.420 × assets : //used_always_image.png_480x320\u0000\u0000\u000 ... ( 96 bytes ) •4.709 × assets : //used_less_image.png_480x320\u0000\u0000\u0000 ... ( 96 bytes ) `` ` The real problem is in com.nostra13.universalimageloader.core.ImageLoaderEngine and exactly in : `` ` java void prepareDisplayTaskFor ( ImageAware imageAware , String memoryCacheKey ) { cacheKeysForImageAwares.put ( imageAware.getId ( ) , memoryCacheKey ) ; } `` ` Step to reproduce : 1 ) Create a View that extends SurfaceView and create the SurfaceThread class 2 ) Insert the following code in SurfaceThread class to draw the images : `` ` java private static final int FRAME_DELAY = 50 ; private volatile boolean requestStop ; private long executionTime , sleepTime ; public synchronized void requestStop ( ) { this.requestStop = true ; } public SurfaceThread ( ) { super
Progress Listener __EoT__ When loading network picture , I want to listen pictures download progress！ Thanks！
Is it the bug that the image data is not incomplete when URLConnect read time out ? __EoT__ hi , thank you for great work . I am using this library ( the version 1.8.6 ) . But i found the problem , it may download incomplete image data and write them into a cached file , this will cause show a incomplete image in imageview , and because it is cached , I have to delete the cached file manually and re-download it if want to show perfect image : when downloading and cache image data with LoadAndDisplayImageTask : :downloadImage , if my network is slow and this may cause java.net.SocketTimeoutException : Read timed out , so IoUtils.copyStream ( is , os ) can not write complete data into os ( saved file ) successfully and throw exception , but unfortunately LoadAndDisplayImageTask : :tryCacheImageOnDisc did not process this exception ( it only catch it and return uri ) , so the parent invoking : LoadAndDisplayImageTask : :tryLoadBitmap can not catch it , and did not know there is incomplete image data . It seems that it should add catch ( IOException e ) { L.e ( e ) ;
Loading images synchronously __EoT__ I would like to use this lib to load images to be used for notifications . Notifications processing is already done in background thread and I find synchronization of ` ImageLoadingListener ` and working thread redundant . What I want is simply call ` ImageLoader ` and get loaded bitmap as a result of method call leveraging both memory and disk caches . Simple example : `` ` java Bitmap image = ImageLoader.getInstance ( ) .loadImageSync ( url , width , height ) ; `` ` As I understand this feature is not available in latest stable version ( checked 1.8.6 ) . P.S . You 've created great library !
Bitmap Displayer issue-From memory . __EoT__ If we set displayer to RoundedBitmapDisplayer in options , first time we got rounded bitmap in ImageLoadingListener . But second we are getting bitmap from memory which not rounded . I think : following code should be in ` imageLoader.displayImage ( String uri , ImageView imageView , DisplayImageOptions options , ImageLoadingListener listener ) ` ` options.getDisplayer ( ) .display ( bmp , imageView , LoadedFrom.MEMORY_CACHE ) ; listener.onLoadingComplete ( uri , imageView , bmp ) ; ` like this : ` listener.onLoadingComplete ( uri , imageView , options.getDisplayer ( ) .display ( bmp , imageView , LoadedFrom.MEMORY_CACHE ) ; ` Can please confirm . Thanks ,
Loading cancelled problem __EoT__ I 'm trying to use ` ImageLoader ` to just get loaded image for processing , without displaying it into view . So I decided to use ` loadImage ` function . But the problem is that ` onLoadingCancelled ` method executes in my ` ImageLoadingListener ` instead of ` onLoadingComplete ` . JavaDoc for this method says that ` Is called when image loading task was cancelled because View for image was reused in newer task ` , but I really do n't have any view at all , I just need to get and process loaded image . Here is my ` ImageLoadingListener ` code : `` ` java private static class ThumbnailImageLoadingListener implements ImageLoadingListener { private final WallpapersBundle bundle ; public ThumbnailImageLoadingListener ( WallpapersBundle bundle ) { this.bundle = bundle ; } @ Override public void onLoadingStarted ( String imageUri , View view ) { } @ Override public void onLoadingFailed ( String imageUri , View view , FailReason failReason ) { Log.e ( Constants.LOG_TAG , failReason.toString ( ) ) ; bundle.setThumbnailLoaded ( true ) ; } @ Override public void onLoadingComplete ( String imageUri , View view , Bitmap loadedImage ) {
Thread pools should use proper names __EoT__ I noticed that the ` DefaultThreadFactory ` uses names like ` pool-1-thread-2 ` . This makes it very hard to associate these pools with UIL when debugging the app . It suggest to alter ` DefaultThreadFactory ` to take a pool name as a constructor argument so that it 's clear what the thread pool is responsible for when looking at it .
Mark has been invalidated __EoT__ `` ` Start display image task [ http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg_480x782 ] Load image from network [ http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg_480x782 ] Cache image on disc [ http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg_480x782 ] Mark has been invalidated . java.io.IOException : Mark has been invalidated . at java.io.BufferedInputStream.reset ( BufferedInputStream.java:350 ) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.defineImageSizeAndRotation ( BaseImageDecoder.java:88 ) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.decode ( BaseImageDecoder.java:69 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.decodeImage ( LoadAndDisplayImageTask.java:305 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:260 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:129 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1076 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:569 ) at java.lang.Thread.run ( Thread.java:856 ) `` ` 1 . **Fails to load and cache image** , happens [ only with this image ] ( http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg ) , am using [ universal-image-loader-1.8.7-snapshot-with-sources.jar ] ( https : //github.com/nostra13/Android-Universal-Image-Loader/blob/master/sample/libs/universal-image-loader-1.8.7-snapshot-with-sources.jar ) . 2. works buggy with ` universal-image-loader-1.8.6.jar ` - The same image is downloaded twice with different names , if [ URL ] ( http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg ) is repeated . 3 . Also noted , when I test with ` 1.8.6 ` and switch to ` 1.8.7 ` the [ image ] ( http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg ) which was downloaded **twice** with different names gets deleted from < kbd > cache dir
Mark has been invalidated __EoT__ `` ` Start display image task [ http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg_480x782 ] Load image from network [ http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg_480x782 ] Cache image on disc [ http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg_480x782 ] Mark has been invalidated . java.io.IOException : Mark has been invalidated . at java.io.BufferedInputStream.reset ( BufferedInputStream.java:350 ) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.defineImageSizeAndRotation ( BaseImageDecoder.java:88 ) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.decode ( BaseImageDecoder.java:69 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.decodeImage ( LoadAndDisplayImageTask.java:305 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:260 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:129 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1076 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:569 ) at java.lang.Thread.run ( Thread.java:856 ) `` ` 1 . **Fails to load and cache image** , happens [ only with this image ] ( http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg ) , am using [ universal-image-loader-1.8.7-snapshot-with-sources.jar ] ( https : //github.com/nostra13/Android-Universal-Image-Loader/blob/master/sample/libs/universal-image-loader-1.8.7-snapshot-with-sources.jar ) . 2. works buggy with ` universal-image-loader-1.8.6.jar ` - The same image is downloaded twice with different names , if [ URL ] ( http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg ) is repeated . 3 . Also noted , when I test with ` 1.8.6 ` and switch to ` 1.8.7 ` the [ image ] ( http : //4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg ) which was downloaded **twice** with different names gets deleted from < kbd > cache dir
NullPointerException in StorageUtils __EoT__ Hi ! I 've had a few reports of a NullPointerException in [ StorageUtils ] ( https : //github.com/nostra13/Android-Universal-Image-Loader/blob/master/library/src/com/nostra13/universalimageloader/utils/StorageUtils.java ) , specifically at line 51 . Seems like Context can be null for whatever reason . Not sure why it 's null in my case , as the report is from by Application class in which I initialize the image loader with getApplicationContext ( ) in the onCreate ( ) method . It really should n't be null .
RoundedBitmapDisplayer Fails with DisplayImageOptions.resetViewBeforeLoading ( ) __EoT__ Hi , I 'm trying to round an image in a view pager , the image is selected from a image list view like in the example project but when I try I obtain this message error `` ` FATAL EXCEPTION : main java.lang.IllegalArgumentException : width and height must be > 0 at android.graphics.Bitmap.nativeCreate ( Native Method ) `` ` I did some test and I discover that I had to remove the DisplayImageOptions.resetViewBeforLoading ( ) to makes it work , however the image has a very small size the same size of the list view , I need to set that option to redraw in a bigger size `` ` java options = new DisplayImageOptions.Builder ( ) .showStubImage ( R.drawable.ic_stub ) .showImageForEmptyUri ( R.drawable.ic_empty ) .showImageOnFail ( R.drawable.ic_error ) .resetViewBeforeLoading ( ) //this cause the error .cacheOnDisc ( ) .imageScaleType ( ImageScaleType.EXACTLY ) .bitmapConfig ( Bitmap.Config.RGB_565 ) .displayer ( new RoundedBitmapDisplayer ( 10 ) ) .build ( ) ; `` ` Is another way to accomplish this ? Thank you
RoundedBitmapDisplayer not display round corner correctly ( CenterCrop ) __EoT__ Hi , firstly , sorry for my pool english . I 'm using RoundedBitmapDisplayer for display an imageView which want to be rounded . And in my case , the imageView size is 124x124 , and the bitmap which want to load is 96x144 . The imageView scaleType is `` CenterCrop '' . I debugged the rounded bitmap size that it is not work correctly.In my hope , the size will be 124x124 , but the output is 96x124 . Since I commented following code , and modify the width and height value , it work fine . `` ` java case CENTER_CROP : ( ... . ) // width = Math.min ( vw , bw ) ; // height = Math.min ( vh , bh ) ; width = srcWidth ; height = srcHeight ; srcRect = new Rect ( x , y , x + srcWidth , y + srcHeight ) ; destRect = new Rect ( 0 , 0 , width , height ) ; break ; `` ` Hope your reply for this fix .
Printing log messages should be configurable __EoT__ Methods in com.nostra13.universalimageloader.utils.L print messages to Log unconditionally . It should be configurable eg . by ImageLoaderConfiguration.Builder # enableLogging ( ) or other call in Builder or even some static method like L.enableLogCat ( boolean logMessages ) . In most cases log messages are only useful in DEBUG builds . One may may do n't want to reveal stacktraces in RELEASE builds .
Ability to revert options such as resetViewBeforeLoading __EoT__ Hi , would it be possible to call something like ` .resetViewBeforeLoading ( false ) ` . My default setup mainly uses ` resetViewBeforeLoading ( ) ` , but in one ImageView I would like to not have that happen . I know I could use that function only when needed , but in that scenario , I need to call it about 10 times instead of just negating it once . I hope I 'm not missing something blatantly obvious . It would be nice if the other similar options behaved the same way ( ` cacheInMemory ( false ) ` , ` cacheInDisc ( false ) ` , etc ) .
Set IO Buffer size in ImageLoaderConfiguration __EoT__ UIL appears to use an IO Buffer size of 8k , data seems to indicate 32k would be better performance : http : //stackoverflow.com/questions/10143731/android-optimal-buffer-size Would prefer to have an option to set in ImageLoaderConfiguration .
How can I make the pre processed image to be saved in the disk cache ? __EoT__ I 've been using the your library and I 'm really liking it . Congratulations for your job . I have one question : is it possible to cache in disk the pre processed images ? I 've read the code and I 've seen that the plain image is cached in disk and the pre processed image is cached in the memory . So , if the image is no more in memory cache , it loads the image from disk and do the pre processing again . I 'd like the pre processing of the images to be done just the first time , when it loads the image from the web . Reading the code of LoadAndDisplayImageTask , I 've not found a way to do this . Thanks in advance .
NPE in ImageLoaderEngine , v1.8.3 __EoT__ I 'm getting a NPE reported by Crittercism when using UIL : `` ` 0 java.lang.NullPointerException 1 at com.nostra13.universalimageloader.core.ImageLoaderEngine $ 1.run ( ImageLoaderEngine.java:73 ) 2 at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1076 ) 3 at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:569 ) 4 at java.lang.Thread.run ( Thread.java:856 ) `` ` The issue is on [ this line ] ( https : //github.com/nostra13/Android-Universal-Image-Loader/blob/v1.8.3/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java # L73 ) . By looking over the source , it does n't seem possible for a null task to be supplied , so it seems as though the view is being destroyed or the back button is being pressed before the executor runs , so the ` taskExecutorForCachedImages ` is null at this point . I 'm running ` v1.8.3 ` and the line I linked to is for that version as well . Also , this is all that Crittercism is reporting .
NullPointerException in LimitedDiscCache __EoT__ I 'm getting the following NullPointerException when I call build ( ) on my ImageLoaderConfiguration.Builder . This is on an old Droid X running 2.3.4 . `` ` java.lang.NullPointerException at com.nostra13.universalimageloader.cache.disc.LimitedDiscCache $ 1.run ( LimitedDiscCache.java:75 ) at java.lang.Thread.run ( Thread.java:1019 ) `` ` This appears to be caused by a call to DefaultConfigurationFactory.createReserveDiscCache ( Context context ) which happens in the constructor for ImageLoaderConfiguration . createReserveDiscCache makes a call to context.getCacheDir ( ) which seems to return null on some devices . It then null pointers on its first attempt to access that null cacheDir as seen above .
Add flag to BitmapDisplayer.display ( ... ) about where image was got __EoT__ Add flag to BitmapDisplayer.display ( ... ) about where image was got : from memory cache , from disc cache , from network/other source . ** @ All_Users** Comment here if you need this feature
Potential null pointer access in LoadAndDisplayImageTask __EoT__ Lines 281-282 : `` ` java if ( cacheDir == null || ! cacheDir.exists ( ) ) { cacheDir.mkdirs ( ) ; `` ` If cacheDir is null then NPE will always be thrown . Perhaps it should be : `` ` java if ( cacheDir ! = null & & ! cacheDir.exists ( ) ) `` `
ConcurrentModificationException on 1.8.4 __EoT__ ` 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : FATAL EXCEPTION : pool-2-thread-3 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : java.util.ConcurrentModificationException 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at java.util.LinkedHashMap $ LinkedHashIterator.nextEntry ( LinkedHashMap.java:350 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at java.util.LinkedHashMap $ KeyIterator.next ( LinkedHashMap.java:370 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at java.util.HashSet. < init > ( HashSet.java:76 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache.keys ( LruMemoryCache.java:124 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at com.nostra13.universalimageloader.cache.memory.impl.FuzzyKeyMemoryCache.keys ( FuzzyKeyMemoryCache.java:77 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at com.nostra13.universalimageloader.cache.memory.impl.FuzzyKeyMemoryCache.put ( FuzzyKeyMemoryCache.java:47 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:146 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1080 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:573 ) 04-29 11:02:04.554 : E/AndroidRuntime ( 18506 ) : at java.lang.Thread.run ( Thread.java:856 ) `
NPE in LimitedDiscCache __EoT__ Hi . If we set TotalSizeLimitedDiscCache and sdcard unavailable , cachedir is null and we got NPE . 04-02 12:45:57.225 : E/AndroidRuntime ( 3754 ) : java.lang.NullPointerException 04-02 12:45:57.225 : E/AndroidRuntime ( 3754 ) : at com.nostra13.universalimageloader.cache.disc.LimitedDiscCache $ 1.run ( LimitedDiscCache.java:75 )
Prevent image decoding if image is reused __EoT__ At this moment check for `` Is task canceled ( view is reused ) '' happens after image is loaded and decoded . Need to add check after image is loaded but before decoding .
Low performance of MemoryCacheUtil.generateKey ( String imageUri , ImageSize targetSize ) __EoT__ Hello , I analyzed my app with the traceviewer and detected that the generateKey method in MemoryCacheUtil class needs a lot of execution time ( 2,39ms ) . This method is called in the main thread for each image which is displayed by the image loader . If you suppose that a frame rate of 60fps is needed for smoothly rendering , then you must render each frame in less than 16ms ! The performance lack is caused by the call of String.format ( ) in generateKey ( ) which is n't really fast : http : //stackoverflow.com/a/1281651/1185087 Also it would be great if the thread of the LoadAndDisplayImageTask is interrupted if the task is canceled . At the moment methods like the copyStream method of the IoUtils class were finished even though the task is canceled already . Best regards , Alex .
NullPointerException in LruMemoryCache __EoT__ Hi ! We have some rare ( 1 per 2000 users ) errors in logs with UIL 1.8.3 . All users have Android 2.X `` ` java.lang.NullPointerException : key == null || value == null at com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache.put ( LruMemoryCache.java:61 ) at com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache.put ( LruMemoryCache.java:21 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:116 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1088 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:581 ) at java.lang.Thread.run ( Thread.java:1019 ) `` ` our configuration : `` ` DisplayImageOptions.Builder builder = new DisplayImageOptions.Builder ( ) ; builder.cacheInMemory ( ) ; builder.cacheOnDisc ( ) ; builder.resetViewBeforeLoading ( ) ; builder.showImageForEmptyUri ( R.drawable.im_photo_error ) ; `` `
Add Unit Tests __EoT__ It would save you alot of time when regression testing if you added some unit test . Especially in the case of the image downloaders .
NullPointerException in LimitedDiscCache __EoT__ We have some rare ( 1 per 3000 users ) errors in logs with UIL 1.8.3 . Almost all users have Android 4.X `` ` java.lang.NullPointerException at com.nostra13.universalimageloader.cache.disc.LimitedDiscCache $ 1.run ( LimitedDiscCache.java:76 ) at java.lang.Thread.run ( Thread.java:856 ) `` `
ConcurrentModificationException : BaseMemoryCache , FuzzyKeyMemoryCache __EoT__ Hi , It only occurred once and I ca n't reproduce it doing the same I did when it crashed , so I 'm worried it could happen again . The stack trace is in the following TWO images ( sorry it 's not in text format ) . ! [ error ] ( https : //f.cloud.github.com/assets/483532/338007/f79de60a-9cfd-11e2-9cd9-feb78c0d2ee5.png ) ! [ errorr ] ( https : //f.cloud.github.com/assets/483532/338006/f791340a-9cfd-11e2-909e-bf3128848010.png ) preceded by `` FATAL EXCEPTION : AsyncTask # 3 '' I 'm using the 1.8.3 version and my configuration is : `` ` @ SuppressLint ( `` NewApi '' ) public static ImageLoaderConfiguration getImageLoaderConfiguration ( Context context ) { ActivityManager m = ( ActivityManager ) context.getSystemService ( Activity.ACTIVITY_SERVICE ) ; int heapSize = m.getMemoryClass ( ) ; int poolsize = heapSize > = 64 ? 3 : heapSize > =48 ? 2:1 ; Logger.d ( `` Using threadPoolSize = `` + poolsize , `` DEBUG '' ) ; DisplayImageOptions imageOptions = new DisplayImageOptions.Builder ( ) .bitmapConfig ( Bitmap.Config.RGB_565 ) .imageScaleType ( ImageScaleType.IN_SAMPLE_INT ) .cacheOnDisc ( ) .cacheInMemory ( ) .build ( ) ; Builder builder = new ImageLoaderConfiguration.Builder ( context ) .defaultDisplayImageOptions ( imageOptions ) .denyCacheImageMultipleSizesInMemory (
EXIF support __EoT__ Consider EXIF orientation ( and maybe some others parameters ) of image files . ** @ All_Users** Comment here if you need this feature
java.lang.NoSuchMethodError : android.widget.AbsListView.setAdapter __EoT__ I am importing this project . While loading listview and gridview application crashed it shows error no such method error
Be able to set the ExecutorService . __EoT__ I used a shared ThreadService for my app which I will share amongst background modules ( robospice being one of them ) . I would be good if I could provide the ImageLoader with an already created ExecutorService
NPE after unmount SD card __EoT__ Hi . Thanks for such usefull library . I am using loader1.8.0 , I found one problem in loading an image . If i enable cacheOnDisc and cacheInMemory , then set cache folder on sdcard and unmount sdcard , the image dose n't show . It will be great , if cacheOnDisc failed but cacheInMemory is enabled , cache image to memory and show . `` ` Start display image task [ my_valid_url ] Load image from Internet [ my_valid_url ] Cache image on disc [ my_valid_url ] null java.lang.NullPointerException at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.saveImageOnDisc ( LoadAndDisplayImageTask.java:311 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:232 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:148 ) at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:390 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:234 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1080 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:573 ) at java.lang.Thread.run ( Thread.java:856 ) `` `
Possible concurrency issues __EoT__ Browsing the code I found you use Collections.synchronizedX ( ... ) to create collections . I assume you want to support multitasking in the library . At the same time you use local variables that are not atomic and the methods are not synchronized . for example : class : LimitedMemoryCache method : public void remove ( K key ) ... if ( hardCache.remove ( value ) ) { cacheSize -= getSize ( value ) ; } ... Are there other mechanisms to support multithreading or I 'm just mistaken ?
Concurrent Modification Synchronization issue __EoT__ The MemoryCacheUtil . findCacheKeysForImageUri methods iterate over a synchronized list without obtaining the lock to synchronize on the synchronized list . Per http : //docs.oracle.com/javase/1.5.0/docs/api/java/util/Collections.html # synchronizedList ( java.util.List ) you have to synchronize on the list when you iterate the items . This also seems to apply to getKeys which is used in these methods . I 've hit an exception a few dozen times in testing where this caused a crash . An option for a fix would be to copy the keys to an immutable collection before iteration . I can not submit a patch at the moment , but would be happy to in a week or so if no one can tackle it before then .
cloneFrom does not clone pre/postprocessor __EoT__ I 've noticed that ` cloneFrom ( DisplayImageOptions options ) ` is missing preProcessor and postProcessor copy . That means ` loadImage ( ... ) ` not working with image pre/post processing .
Images are n't loaded after `` Clear Cache '' in app info __EoT__ When doing a cache clear from the system menu and then opening the app ( I think it was opened in the background ) the app crashes . Closing the app from recent apps solves the problem but it 's not ideal . This is the error I get : `` ` 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : java.io.FileNotFoundException : /storage/sdcard0/Android/data/app.package/cache/-1563422183 : open failed : ENOENT ( No such file or directory ) 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : at libcore.io.IoBridge.open ( IoBridge.java:416 ) 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : at java.io.FileOutputStream. < init > ( FileOutputStream.java:88 ) 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : at java.io.FileOutputStream. < init > ( FileOutputStream.java:73 ) 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.saveImageOnDisc ( LoadAndDisplayImageTask.java:303 ) 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:204 ) 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:128 ) 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:390 ) 02-08 16:15:46.490 : E/ImageLoader ( 11201 ) : at java.util.concurrent.FutureTask.run ( FutureTask.java:234 )
Pass auxiliary Object to Display Options for ImageDownloader __EoT__ Add possibility to pass auxiliary Object to Display Options . This object should be available in ImageDownloader , BitmapDisplayer , ... ** @ All_Users** Comment here if you need this feature
Add Factory for ImageLoader __EoT__ Say , I want to have book covers and author avatars : for covers one instance of ImageLoader and for avatars the other . These loaders must have different configurations ( based on disk size , memore cache size , directory etc ) . PS : workaround with protected ImageLoader constructor is not working , because you often use ImageLoader.getInstance ( ) inside your libriary ...
scaleType seems to be ignored __EoT__ Hi , if I change item_list_image.xml in the example into : < ImageView android : id= '' @ +id/image '' android : layout_width= '' 172dip '' android : layout_height= '' 72dip '' android : adjustViewBounds= '' true '' android : contentDescription= '' @ string/descr_image '' android : scaleType= '' centerCrop '' / > the images are not rounded . Seems scaleType breaks something .
scaleType seems to be ignored __EoT__ Hi , if I change item_list_image.xml in the example into : < ImageView android : id= '' @ +id/image '' android : layout_width= '' 172dip '' android : layout_height= '' 72dip '' android : adjustViewBounds= '' true '' android : contentDescription= '' @ string/descr_image '' android : scaleType= '' centerCrop '' / > the images are not rounded . Seems scaleType breaks something .
Strictmode sometimes detects leaks on FileOutputStream __EoT__ Hi , first of all , big fan of the library ! Works really well and was easy to integrate . But sometimes when an image is read from diskcache , strictmode throws a warning : `` ` 12-04 14:17:55.677 : ERROR/StrictMode ( 25142 ) : A resource was acquired at attached stack trace but never released . See java.io.Closeable for information on avoiding resource leaks . java.lang.Throwable : Explicit termination method 'close ' not called at dalvik.system.CloseGuard.open ( CloseGuard.java:184 ) at java.io.FileOutputStream. < init > ( FileOutputStream.java:90 ) at java.io.FileOutputStream. < init > ( FileOutputStream.java:73 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.saveImageOnDisc ( LoadAndDisplayImageTask.java:286 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap ( LoadAndDisplayImageTask.java:204 ) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run ( LoadAndDisplayImageTask.java:128 ) at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:442 ) at java.util.concurrent.FutureTask $ Sync.innerRun ( FutureTask.java:305 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:137 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1076 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:569 ) at java.lang.Thread.run ( Thread.java:856 ) `` ` These are my settings for UIL : `` ` java DisplayImageOptions options = new DisplayImageOptions.Builder ( ) .showStubImage ( R.drawable.img_placeholder ) .showImageForEmptyUri ( R.drawable.img_placeholder ) .resetViewBeforeLoading ( ) .cacheInMemory ( ) .cacheOnDisc ( ) .imageScaleType ( ImageScaleType.IN_SAMPLE_POWER_OF_2 ) .bitmapConfig ( Bitmap.Config.RGB_565 ) .displayer
`` Ca n't create `` .nomedia '' file '' logs __EoT__ Hello . I 'm implementing a gallery feature for local-only image . How can I totally disable disk cache and do n't even create cache directory ? I 'm seeing 'Ca n't create `` .nomedia '' file in application external cache directory ' message everytime .
Restrict image loading while list scrolling __EoT__ Hello ! The library is great but I have a question . Is it possible to restrict the image loading in listview just for the state of scroll idle state . So prevent loading when scrolling to boost up performance . Thank in advance ! Best Regards .
cacheKeysForImageViews consumes a lot of memory __EoT__ Explain , please , what is the reason of using ImageViews as keys here : private Map < ImageView , String > cacheKeysForImageViews = Collections.synchronizedMap ( new WeakHashMap < ImageView , String > ( ) ) ; It causes memory leaks . I suppose : private Map < Integer , String > cacheKeysForImageViews = Collections.synchronizedMap ( new HashMap < Integer , String > ( ) ) ; And use imageView.hashCode ( ) as key for this map . This fixes the issue for me . But may be I miss something ?
Delay before image loading __EoT__ Would be great if universal imageloader had shouldDelay ( ) method as in : http : //code.google.com/p/android-query/wiki/ImageLoading
Delay before image loading __EoT__ Would be great if universal imageloader had shouldDelay ( ) method as in : http : //code.google.com/p/android-query/wiki/ImageLoading
Multiple ImageLoader instances __EoT__ In my app I have got 3 types of images to load , all of types needed **different** ImageLoaderConfiguration . # # # # # Images types example : - Users avatars _ ( cache on disc , memory cache size ~ 5mb , thread pool size ~ 3 , thread priority min + 3 , medium compression ) _ - News feed pictures _ ( cache on disc , memory cache size ~ 1mb , thread pool size ~ 5 , etc.. ) _ - Temporary images , like friends photos , etc.. _ ( no cache , thread pool size ~ 2 , .. ) _ Sometimes it needed to use different ImageDownloader or FileNameGenerator or something else , but it is not possible at the moment because ImageLoader is _singleton_ class . # # # # So , what about many ImageLoader objects ? May be it will be good to use ImageLoaderFactory and class-containter for created ImageLoader objects to use them , or something else . What do you think about it ?
LIFO thread pool __EoT__ Хотелось бы видеть в библиотеке возможность загрузки в первую очередь изображений , добавленных самыми последними . Когда пользователь скроллит ListView , LIFO выглядит намного приятнее .
Image deleted after download but before it can be re-read ... __EoT__ I 'm having a weird problem and its all about timing , but I ca n't see the cause . On SOME images , after downloading and caching the image , it exists for a short time , but open fails on it . It only happens in about 1 or 6 images and seems timing related , image task is initiated from a GridView . I 'll try to dig up more details ... Here is the exception/stack dump : 10-06 16:58:03.298 : E/ImageLoader ( 619 ) : /mnt/sdcard/Android/data/com.trixiesoft.clapp/cache/images/minneapolis-dak-ctd-3321257105.img ( No such file or directory ) 10-06 16:58:03.298 : E/ImageLoader ( 619 ) : java.io.FileNotFoundException : /mnt/sdcard/Android/data/com.trixiesoft.clapp/cache/images/minneapolis-dak-ctd-3321257105.img ( No such file or directory ) 10-06 16:58:03.298 : E/ImageLoader ( 619 ) : at org.apache.harmony.luni.platform.OSFileSystem.open ( Native Method ) 10-06 16:58:03.298 : E/ImageLoader ( 619 ) : at dalvik.system.BlockGuard $ WrappedFileSystem.open ( BlockGuard.java:232 ) 10-06 16:58:03.298 : E/ImageLoader ( 619 ) : at java.io.FileInputStream. < init > ( FileInputStream.java:80 ) 10-06 16:58:03.298 : E/ImageLoader ( 619 ) : at org.apache.harmony.luni.internal.net.www.protocol.file.FileURLConnection.connect ( FileURLConnection.java:82 ) 10-06 16:58:03.298 : E/ImageLoader ( 619 ) : at org.apache.harmony.luni.internal.net.www.protocol.file.FileURLConnection.getInputStream ( FileURLConnection.java:180 ) 10-06 16:58:03.298
Вызов imageLoader.stop ( ) в onStop ( ) активности __EoT__ http : //github.com/nostra13/Android-Universal-Image-Loader/blob/master/UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImageGalleryActivity.java # L44 `` ` @ Override protected void onStop ( ) { imageLoader.stop ( ) ; super.onStop ( ) ; } `` ` Не очень удачный пример , так лучше не делать . onStop ( ) может быть вызван после того , как была создана новая активность и перекрыла текущую . Если в этой новой активности выполняется загрузка изображений , imageLoader.stop ( ) текущей активности с очень большой вероятностью останавливает эту загрузку . У меня , по крайней мере , постоянно срабатывает Thread.interrupted ( ) в http : //github.com/nostra13/Android-Universal-Image-Loader/blob/master/UniversalImageLoader/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java # L89 К тому же , загрузка почему-то не прерывается и продолжается , пока файл не загрузится полностью . Думаю , onStop ( ) можно заменить на onBackPressed ( )
MissingFormatWidthException __EoT__ Just got this Exception reported by one of my applications : java.util.MissingFormatWidthException : -s at java.util.Formatter $ FormatToken.checkFlags ( Formatter.java:1365 ) at java.util.Formatter.transform ( Formatter.java:1440 ) at java.util.Formatter.doFormat ( Formatter.java:1079 ) at java.util.Formatter.format ( Formatter.java:1040 ) at java.util.Formatter.format ( Formatter.java:1009 ) at java.lang.String.format ( String.java:1998 ) at java.lang.String.format ( String.java:1972 ) at com.nostra13.universalimageloader.core.assist.MemoryCacheKeyUtil.generateKey ( MemoryCacheKeyUtil.java:16 ) at com.nostra13.universalimageloader.core.ImageLoadingInfo. < init > ( ImageLoadingInfo.java:37 ) at com.nostra13.universalimageloader.core.ImageLoader.displayImage ( ImageLoader.java:216 ) at com.nostra13.universalimageloader.core.ImageLoader.displayImage ( ImageLoader.java:104 ) ... ... ... ... ... . at android.widget.AbsListView.obtainView ( AbsListView.java:2033 ) at android.widget.ListView.makeAndAddView ( ListView.java:1772 ) at android.widget.ListView.fillDown ( ListView.java:672 ) at android.widget.ListView.fillSpecific ( ListView.java:1330 ) at android.widget.ListView.layoutChildren ( ListView.java:1603 ) at android.widget.AbsListView.onLayout ( AbsListView.java:1863 ) at android.view.View.layout ( View.java:11282 ) at android.view.ViewGroup.layout ( ViewGroup.java:4224 ) at android.widget.LinearLayout.setChildFrame ( LinearLayout.java:1628 ) at android.widget.LinearLayout.layoutVertical ( LinearLayout.java:1486 ) at android.widget.LinearLayout.onLayout ( LinearLayout.java:1399 ) at android.view.View.layout ( View.java:11282 ) at android.view.ViewGroup.layout ( ViewGroup.java:4224 ) at android.widget.FrameLayout.onLayout ( FrameLayout.java:431 ) at android.view.View.layout ( View.java:11282 ) at android.view.ViewGroup.layout ( ViewGroup.java:4224 ) at android.widget.LinearLayout.setChildFrame ( LinearLayout.java:1628 ) at android.widget.LinearLayout.layoutVertical ( LinearLayout.java:1486 ) at android.widget.LinearLayout.onLayout ( LinearLayout.java:1399 ) at android.view.View.layout ( View.java:11282 ) at android.view.ViewGroup.layout ( ViewGroup.java:4224 ) at android.widget.FrameLayout.onLayout ( FrameLayout.java:431 ) at android.view.View.layout ( View.java:11282 ) at android.view.ViewGroup.layout (
Callbacks are still fired after ImageLoader.stop ( ) __EoT__ I have these classes ` PhotoActivity extends FragmentActivity ` ` ImageFragment extends Fragment ` I initialize the ` imageLoader ` in the ` ImageFragment ` using ` imageLoader = ImageLoader.getInstance ( ) ; ` and in this fragment , I also display a few images using ` imageLoader.displayImage ( ... ) ` . When my ` PhotoActivity ` gets stopped ( ` onStop ( ) ` is called ) , my ` ImageFragment ` stops as well and this should stop any image loading because I call ` imageLoader.stop ( ) ; ` in the ` onStop ( ) ` method . However , this is not the case and it gives me NullPointerException because ` onLoadingComplete ( ) ` of ` ImageLoadingListener ( ) ` is called afterwards , and this method calls ` getActivity ( ) ` which is ` null ` at this point . ` imageLoader.stop ( ) ` should stop every loading process , no ?
Allow passing 'null ' as ImageView ( or loadImage ( ... ) ) __EoT__ Having to create a dummy ImageView every time I 'm creating a callback to load a bitmap into a custom widget is kinda annoying . Could we get an option to pass null instead ?
Use Of Semaphore for avoiding unnecessary downloads/loads __EoT__ I 'm looking into new ways to improve speed significantly . Apart from creating a sized cache version of the image , that i know you 're working on , i have new ideas . I have n't made any test of that one : Think on a listView full of Images . If they were cached alternatively , one on external disk cache and the other on internal disk cache , the read speed would be greatly improved . Also there is an issue when you have a list with allways the same url repeated . Imagine that there are 10 image thumbnails on screen.The first time it is downloaded from internet/disk up to 5 times ! that is due to there is any request control over the same url . The requests over the same url should be blocked until the image is downloaded to memory/disk cache . This can be achieved using semaphores . I will post some sample code later from the last issue ! .
Reloading image into larger image view does not work ( divide by zero ) __EoT__ My application consists of a grid view and a detail view . The thumbnails are loaded using this library into the thumbnail view , then when a grid item is clicked , a detail view is shown with the same image in a larger image view . Both images are retrieved from the same URL . No matter the configuration options I try , the images load successfully in the grid view but never load in the larger detail view - ` onLoadingStarted ( ) ` is called , but no other callback is fired , not even ` onLoadingFailed ( ... ) ` . My config : ` config = new ImageLoaderConfiguration.Builder ( getApplicationContext ( ) ) .threadPoolSize ( 3 ) .threadPriority ( Thread.NORM_PRIORITY - 2 ) .memoryCacheSize ( 1500000 ) // 1.5 Mb .discCacheFileNameGenerator ( new Md5FileNameGenerator ( ) ) .enableLogging ( ) // Not necessary in common .build ( ) ; ` My options : ` options = new DisplayImageOptions.Builder ( ) .showStubImage ( R.drawable.smile_placeholder ) .showImageForEmptyUri ( R.drawable.smile_placeholder ) .cacheInMemory ( ) .build ( ) ; `
when i reinstall the apk , the disc cache directory will be changed __EoT__ in StorageUtils.java public static File getOwnCacheDirectory ( Context context , String cacheDir ) { File appCacheDir = null ; if ( Environment.getExternalStorageState ( ) .equals ( android.os.Environment.MEDIA_MOUNTED ) ) { appCacheDir = new File ( Environment.getExternalStorageDirectory ( ) , cacheDir ) ; } if ( ! appCacheDir.mkdirs ( ) ) { appCacheDir = context.getCacheDir ( ) ; } return appCacheDir ; } when i reinstall the apk , the disc cache already exists , and the appCacheDir.mkdirs ( ) return false . so the disc cache directory change to context.getCacheDir ( ) ; i think there should be add the appCacheDir.exists ( ) to judge
Class FuzzyKeyMemoryCache occurs ConcurrentModificationException . __EoT__ Hi . Thank you for your efforts with this wonderful image loader . : ) But sometimes , image loading fails for an unknown reason . I found that the 'for ' loop in FuzzyKeyMemoryCache.put ( K , V ) method occurs ConcurrentModificationException in that case . I guess that this error kills the running thread instantly without calling callback method of ImageLoadingListener . Please fix this bug . Thank you .
Filecache not limited __EoT__ I looked at the function saveImageOnDisc ( ) and its usage in loadBitmap ( ) . It looks like the file is always written to the cache , even if TotalSizeLimitedDiscCache is used . And files are never removed . Only the hashmap is updated . This is in line with what I experience looking at the cache directory . Is this indeed a bug ? Greetings , Michiel
Loading images from filesystem fails __EoT__ Hi Nostra13 , Thanks for the very nice code you made . I try to use it for loading images from the filesystem . I get an error . And loading fails . If I inspect the code , functions for loading from the ( original ) picture from the filesystem seem to be missing . Is that correct ? Or is something else happening ? See below . Michiel I get the error : 03-29 09:41:01.230 : E/ImageLoader ( 10716 ) : java.lang.ClassCastException : org.apache.harmony.luni.internal.net.www.protocol.file.FileURLConnection can not be cast to java.net.HttpURLConnection It is sparked in the saveImageOnDisc function . First line : HttpURLConnection conn = ( HttpURLConnection ) new URL ( imageLoadingInfo.url ) .openConnection ( ) ; The function saveImageOnDisc is called from the loadBitmap function . This functions checks if there is a cached image on the cache part of the filesystem . There is n't ( which is correct . ) Then it tries to load the image from the web . There I get the error ( which is logical . )
Retry image loading on OOM __EoT__ Do another image loading trying after OutOfMemory exception .
Add ability to cancel a download for a given ImageView __EoT__ I have a ListView with each row containing an ImageView . Not all of the rows have an associated URL for an image so in my adapter , if there is no URL , I assign a default image to the ImageView . However , when flinging the list quickly such that ImageViews are recycled , I can end up with one of the rows that should have a default image being assigned a downloaded image because I can not cancel a pending download . I think it goes like this : 1 . Start a download on an ImageView with imageLoader.displayImage ( ) 2 . ImageView is recycled and for this row , the adapter now assigns a default image because it has no URL 3 . Download completes , isConsistent ( ) function returns true , and downloaded image is assigned . I would like in step 2 to be able to indicate to the ImageLoader that the download associated with an ImageView should not be assigned to the ImageView when it completes please . Nice library by the way !
Cash directory path __EoT__ I think that writing into sd-cards root is not the best practice . It woould be better to use appCacheDir = new File ( context.getExternalCacheDir ( ) , cacheDirPath ) ; instead of appCacheDir = new File ( Environment.getExternalStorageDirectory ( ) , cacheDirPath ) ;
Save or discard multiple versions of an image which differ only in size __EoT__ Please add an option for developer to choose whether to save or discard the same image in memory after reloading it from the file cache but in different size .
Image decoding sample size __EoT__ Provide possibility to choose image decoding parameter `` sample size '' : - fast : scale image with power of 2 - reduce memory usage : scale image with exact size
Consider screen orientation __EoT__ Consider screen orientation for cases when ImageView hav n't specified size ( width and height and maxWidth and maxHeight parameters ) .
Refactor PhotosQueue.clean ( ) __EoT__ PhotosQueue # clean ( ) : гораздо красивее и более читабельно писать такие шутки через iterator : Iterator < ImageView > it = photosToLoad.iterator ( ) ; while ( it.hasNext ( ) ) { final ImageView imageView = it.next ( ) ; if ( imageView == imageForRemove ) { it.remove ( ) ; } } В вашем случае , по-моему , возможно падение с ConcurrentModificationException
ImageLoader singletone synchronization __EoT__ Make singltone instance creation synchronization .
Potential NPE in Cache.get ( ) __EoT__ Потенциальный NPE в методе get ( ) : не сихронизованы методы clear ( ) и get ( ) . Более подробно : cointaisKey ( ) возвращает true , вызывается метод clear ( ) , get ( ) от Map возвращает null . Решение без synchronized : внутри метода Cache # get ( ) использовать сразу Map # get ( ) и проверять результат на null . В таком случае нужно поле Map нужно делать private и запрещать любые доступы к нему извне
Potencial Memory leaks __EoT__ https : //github.com/nostra13/Android-Universal-Image-Loader/blob/master/src/com/nostra13/universalimageloader/utils/FileUtils.java https : //github.com/nostra13/Android-Universal-Image-Loader/blob/master/src/com/nostra13/universalimageloader/imageloader/ImageLoader.java ( line 190 ) Noone of these methods tries to close streams in case of exceptions .
Fixes broken link to wix engineering blog __EoT__
Fix proxy classes generation reproducibility __EoT__ Order of interfaces could be different from build to build . It results in different binary CRC for same source code .
[ DOCS ] Fix dead link to Wix engineering blog post __EoT__ Quick fix for a dead link .
Fix typos detected by github.com/client9/misspell __EoT__ This pull request fixes the typos in this repository . Although I am not a native English speaker , [ misspell ] ( https : //github.com/client9/misspell ) detected obvious mistakes for us . I 've fixed them except for false positives .
Capability to instantiate an object based on the String class name . I… __EoT__ …t is usefull when you want to set the MetricsTackerFactory from a property
Use orElseGet to delay call until necessary __EoT__ Use ` orElseGet ` to delay creation of DefaultThreadFactory until falling through to the or else part of the optional .
Prometheus metrics are always registered to default registry __EoT__ This is not bug , but a missing feature : ) I want to expose Hikari Metrics to Prometheus in a Spring Boot application . ` PrometheusMetricsTrackerFactory ` always registers the metrics do the default collector registry ( ` CollectorRegistry.defaultRegistry ` ) . The static default registry is a pain for testing and modularity , though , so in our Spring Boot application we created our own ` CollectorRegistry ` instance that we use to register all our metrics . It would be nice if ` PrometheusMetricsTrackerFactory ` provided a way to pass in a ` CollectorRegistry ` instance to have more control .
Add a missing SLF4J formatting anchor __EoT__
ConcurrentBag threadList OOM __EoT__ # # # # Environment `` ` HikariCP version : x.x.x `` ` when ThreadPoolA borrow an entry and ThreadPoolB requite that entry , ThreadPoolA just borrow but never requite，ThreadPoolB just requite but never borrow， then ThreadPoolB 's threadList OOM . I think ` ThreadLocal < List < Object > > threadList ; ` should be with a max size , or just be ` ThreadLocal < Object > threadList ; ` .
HikariConfig # setInitializationFailTimeout javadoc seems wrong . __EoT__ # # # # Environment `` ` HikariCP version : 2.7.8 `` ` # # # # Problem description If I understand the behavior correctly , there is an error in the javadoc for ` HikariConfig.setInitializationFailTimeout ( ) ` ; more specifically , the section describing behavior for negative timeout value : `` ` A value less than zero will < i > not < /i > bypass any connection attempt and validation during startup , and therefore the pool will start immediately . The pool will continue to try to obtain connections in the background . This can mean that callers to { @ code DataSource # getConnection ( ) } may encounter exceptions . `` ` It is my understanding that if timeout is less than zero connection initialization and validation during startup _will be_ bypassed , so the ` < i > not < /i > ` part should be removed .
com.zaxxer.hikari.pool.ProxyConnection $ ClosedConnection should return false for isClosed ( ) instead of throwing an exception __EoT__ # # # # Environment `` ` HikariCP version : 3.1.0 JDK version : 1.8.0_111 Database : PostgreSQL Driver version : 42.1.4 `` ` See https : //github.com/brettwooldridge/HikariCP/blob/HikariCP-3.1.0/src/main/java/com/zaxxer/hikari/pool/ProxyConnection.java # L478 It 's not possible to check if a connection is closed by calling ` isClosed ( ) ` without special exception handling as Hikari throws an exception . There should be a check for the ` isClosed ` method in the handler that should just return false .
Fail to reset password via HikariConfigMXBean at runtime ! ! ! __EoT__ # # Environment `` ` HikariCP version : 3.1.0 JDK version : 1.8.0_161 Database : Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production Driver version : ojdbc7 12.1.0.1 `` ` # # # Code # # # # DataSource `` ` java HikariDataSource dataSource = new HikariDataSource ( ) ; dataSource.setMaximumPoolSize ( 40 ) ; dataSource.setUsername ( user ) ; dataSource.setPassword ( password ) ; dataSource.setDriverClassName ( driverClassName ) ; dataSource.setRegisterMbeans ( true ) ; dataSource.setJdbcUrl ( url ) ; `` ` # # # # Reset Password `` ` java HikariDataSource hikariDataSource = ( HikariDataSource ) dataSource ; hikariDataSource.getHikariConfigMXBean ( ) .setPassword ( `` newPassword '' ) ; hikariDataSource.getHikariPoolMXBean ( ) .softEvictConnections ( ) ; `` ` Seems that new username and password are not set into **driverProperties** when calling function ` getConnection ( String username , String password ) ` in class **DriverDataSource** . `` ` java @ Override public Connection getConnection ( String username , String password ) throws SQLException { return getConnection ( ) ; } `` ` It works in my testing after changed above code to `` ` java @
Fail to reset password via HikariConfigMXBean at runtime ! ! ! __EoT__ # # Environment `` ` HikariCP version : 3.1.0 JDK version : 1.8.0_161 Database : Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production Driver version : ojdbc7 12.1.0.1 `` ` # # # Code # # # # DataSource `` ` java HikariDataSource dataSource = new HikariDataSource ( ) ; dataSource.setMaximumPoolSize ( 40 ) ; dataSource.setUsername ( user ) ; dataSource.setPassword ( password ) ; dataSource.setDriverClassName ( driverClassName ) ; dataSource.setRegisterMbeans ( true ) ; dataSource.setJdbcUrl ( url ) ; `` ` # # # # Reset Password `` ` java HikariDataSource hikariDataSource = ( HikariDataSource ) dataSource ; hikariDataSource.getHikariConfigMXBean ( ) .setPassword ( `` newPassword '' ) ; hikariDataSource.getHikariPoolMXBean ( ) .softEvictConnections ( ) ; `` ` Seems that new username and password are not set into **driverProperties** when calling function ` getConnection ( String username , String password ) ` in class **DriverDataSource** . `` ` java @ Override public Connection getConnection ( String username , String password ) throws SQLException { return getConnection ( ) ; } `` ` It works in my testing after changed above code to `` ` java @
Updating of properties not recognized __EoT__ # # # # Environment `` ` HikariCP version : 2.7.8 JDK version : 1.8.0_161 Database : PostgreSQL Driver version : 42.2.1 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - *Have you searched the CLOSED issues already ? How about checking [ stackoverflow ] ( https : //stackoverflow.com/search ? q=HikariCP ) ? * -- > Yes ! I tried to modify the connectionTimeout property . I am allowed to set this value and I checked that using the appropriate getter for this property . I changed it from the default of 30 seconds to 10 second . According to [ https : //github.com/brettwooldridge/HikariCP/blob/dev/src/main/java/com/zaxxer/hikari/HikariConfig.java # L64 ] ( url ) this property IS changeable . I tried to set the property via HikariPoolMXBean and via HikariConfiogMXBean but the value stays at 30 seconds . I tested that by obtaining all connections from the pool and then getting one further . Some test output ... `` `
log loaded driver when using jdbcUrl ( Closes # 1018 ) __EoT__ This PR closes issue # 1018 .
log loaded driver when using jdbcUrl ( Closes # 1018 ) __EoT__ This PR closes issue # 1018 .
Eagerly provision connection pool __EoT__ # # # # Environment `` ` HikariCP version : 2.7.1 JDK version : 1.8.0_144 Database : MySQL Driver version : all `` ` I am building applications that serves high volume of requests in time sensitive manner . During bootstrapping/restart my applications , it is critical to make sure ` HikariDataSource ` to have fully provisioned at least > ` minIdle ` connections before I open the application to receive traffic . It appears the HikariCP provision connections in a delay manner , relying on the ` HouseKeeper ` to provision connection asynchronously in background , and there 's not a way to monitor whether at least ` minidle ` connections are ready . It would be great to open an API in ` HikariDataSource ` to synchronously and eagerly provision connections so I can call this method during bootstrap and knowing my application will be ready for the adventure . I believe this would be a valuable functionality for high performance applications . ❤️🔦 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
add test case for new metrics __EoT__ add test case for new metrics . ref : # 1110
Add pool metrics __EoT__ Add metrics to alert when remaining pooled connections are insufficient in quantity .
` mockMeterRegistry # find ( String ) ` does n't seem to return null __EoT__ For example , I tried the wrong name as the following but the result was green . The current test code does n't seem to be able to test MicrometerMetricsTracker correctly . `` ` java Assert.assertNotNull ( mockMeterRegistry.find ( `` foo '' ) ) ; `` `
Update Micrometer to 1.0.0 __EoT__
Sealed configuration makes it much harder to configure Hikari __EoT__ HikariCP version : ` 2.7.7 ` The changes in # 1053 in a patch release is quite surprising . Is that exception revealing a fundamentally broken behaviour or was it added to prevent a runtime change to the ` DataSource ` that was working ( but somehow that feature had to be removed ) ? Here is a use case : we are configuring Micrometer metrics in Spring Boot for each ` HikariDataSource ` found in the context . Metrics concerns are totally unrelated to ` DataSource ` configuration concern so , from a design perspective , they ca n't happen at the same location . I naively started to configure this and got caught by the fact the ` DataSource ` was sealed . The next step is to use a ` BeanPostProcessor ` to make sure that code is invoked before a ` getConnection ` call is invoked on the ` DataSource ` . This is far from ideal and , again , that behaviour change in a patch release is very annoying . Besides , there is no way to know if a ` DataSource ` is
Allowing anonymous subclasses of MetricRegistry . __EoT__ Allow anonymous subclasses of MetricRegistry . Also changing check for metrics libraries from classname contains to assignableFrom the metrics class . In case of class passed in which is not assignable from MetricRegistry of MeterRegistry it should still throw the IllegalArgumentException not ClassCastException . Both use cases are added in TestMetrics
Update Firebird datasource __EoT__ ` org.firebirdsql.pool.FBSimpleDataSource ` was deprecated in Jaybird 2.2 and will be removed in Jaybird 4 . Replacement class is ` org.firebirdsql.ds.FBSimpleDataSource ` .
Can HikariCP offer new `` suspend '' function that can immediately throw `` suspend “ exception . __EoT__ # # # # Environment `` ` HikariCP version : x.x.x JDK version : 1.8.0_111 Database : oracle Driver version : 2.3.13 `` ` New request : Current `` suspend '' function will block application when application calls getConnection method , which can cause whole application crashes。 Can HikariCP offer new `` suspend '' function that can immediately throw `` suspend “ exception . In some cases when database is in mantainance , we need suspend datasource temporarily which make application can still run database-fail-tolerant bussiness . Currently Only Weblogic 's datasource `` suppend '' function meets this need . -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - *Have you searched the CLOSED issues already ? How about checking [ stackoverflow ] ( https : //stackoverflow.com/search ? q=HikariCP ) ? *
HikariConfig.copyStateTo copies the value of `` sealed '' field __EoT__ # # # # Environment `` ` HikariCP version : 2.7.5 JDK version : 1.8.0_152 Database : PostgreSQL Driver version : 42.1.4 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - After updating to 2.7.5 we noticed our application fail to boot successfully as a result of the changes made to `` seal '' the HikariConfig / HikariDataSource . I 'm not opposed to the approach , but unfortunately the `` sealed '' value is copied between configs when ` HikariConfig.copyStateTo ( HikariConfig other ) ` is called . Our use case essentially was to initialize a quartz scheduler HikariPool off of the primary database pool with something like : `` ` java public static HikariDataSource createQuartzPool ( HikariDataSource primaryDB , SchedulerConfig schedulerConfig ) { HikariConfig poolConfig = new HikariConfig ( ) ; primaryDB.copyStateTo ( poolConfig ) ; poolConfig.setPoolName ( `` quartz-pool '' ) ; // < < this line now throws
Enable quantiles calculation in prometheus metrics __EoT__ The current configuration of [ summary ] ( https : //prometheus.io/docs/concepts/metric_types/ # summary ) type prometheus metrics in ` hikaricp ` only provides two values : - ` count ` of observations - ` sum ` of observed values for the following metrics : - connection acquisition time - connection usage time - connection creation time One can derive additional useful metrics based on just these two values : - ` avg ` = ` sum ` / ` count ` - ` rate ` = delta ( ` count ` ) / delta ( ` time ` ) - sliding ` avg ` = delta ( ` sum ` [ 5m ] ) / delta ( ` count ` [ 5m ] ) Prometheus summaries also support calculation of quantiles that are more useful than averages during analyses . I propose to enable the following quantiles calculation in a 5 minute sliding window : - ` 0.5 ` ( median ) with error of ` 0.05 ` - ` 0.95 ` with error of ` 0.01 ` - ` 0.99 ` with error of ` 0.001 ` The quantile error values were
HikariDataSource copy-constructor prevents inheriting configuration __EoT__ # # # # Environment `` ` HikariCP version : 2.7.4 JDK version : 9.0.1+11 Database : PostgreSQL Driver version : 42.1.4.jre7 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - *Have you searched the CLOSED issues already ? How about checking [ stackoverflow ] ( https : //stackoverflow.com/search ? q=HikariCP ) ? * Yes https : //github.com/brettwooldridge/HikariCP/issues/231 resulted in a public copy-constructor being added . Unfortunately , it does n't work the way I expected it to . I thought the entire point of the copy-constructor is to enable users to inherit configuration from an existing pool , then override some parameters , then launch the pool . Maybe this used to work in a past release , but it no longer does . The copy-constructor is launching the new pool immediately . This means that any configuration changes requested after the copy constructor is invoked are being ignored silently . Expected behavior : 1
HikariDataSource copy-constructor prevents inheriting configuration __EoT__ # # # # Environment `` ` HikariCP version : 2.7.4 JDK version : 9.0.1+11 Database : PostgreSQL Driver version : 42.1.4.jre7 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - *Have you searched the CLOSED issues already ? How about checking [ stackoverflow ] ( https : //stackoverflow.com/search ? q=HikariCP ) ? * Yes https : //github.com/brettwooldridge/HikariCP/issues/231 resulted in a public copy-constructor being added . Unfortunately , it does n't work the way I expected it to . I thought the entire point of the copy-constructor is to enable users to inherit configuration from an existing pool , then override some parameters , then launch the pool . Maybe this used to work in a past release , but it no longer does . The copy-constructor is launching the new pool immediately . This means that any configuration changes requested after the copy constructor is invoked are being ignored silently . Expected behavior : 1
fix documentation __EoT__
Provide Automatic-Module-Name attribute in MANIFEST.MF __EoT__ Pull request for # 1045
Update doc to latest version available __EoT__
Fix Java file permissions __EoT__ Some files were inadvertently marked executable . Just something I noticed while reviewing https : //github.com/brettwooldridge/HikariCP/compare/HikariCP-2.7.2 ... HikariCP-2.7.3 .
Update for Micrometer.rc3 __EoT__ I apologize @ brettwooldridge I just found out the latest rc removed one more method . It has stabilized now so we do n't expect any further breakages . Right @ jkschneider ?
Update to match Micrometer updated RC api __EoT__ @ brettwooldridge The RC updated the api fair amount . @ jkschneider Mind double checking this ?
The table - JDBC DataSource classes for popular databases HAS problem __EoT__ Hi Boss , In the table , the item as below , which has problem MySQL/MariaDB | MariaDB | org.mariadb.jdbc.MySQLDataSource In MariaDB official site , it claims `` careful : org.mariadb.jdbc.MySQLDataSource does n't exist anymore and should be replaced with org.mariadb.jdbc.MariaDbDataSource since v1.3.0 '' , the link is https : //mariadb.com/kb/en/library/about-mariadb-connector-j/ and in the section `` Optional JDBC classes '' Thanks Michael
Split copyState to copyStateTo and copyStateFrom __EoT__ Fixes # 892 and should prevent further confusion .
HikariCP does not close all idle connections __EoT__ # # # # Environment `` ` HikariCP version : 2.6.3 JDK version : 1.8.0_91 Database : any Driver version : any `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Given that `` minIdle '' is set to N , Hikari CP does never close more than N+1 idle connections at a time . For example , we have ` minIdle=0 ` and ` maxPoolSize=70 ` . In this case , house keeper thread closes only **1** connection at a time , **leaving the rest 69 idle connections open** . The following code is guilty : `` ` java private final class HouseKeeper implements Runnable ... final List < PoolEntry > notInUse = connectionBag.values ( STATE_NOT_IN_USE ) ; int removed = 0 ; for ( PoolEntry entry : notInUse ) { if ( elapsedMillis ( entry.lastAccessed , now ) > idleTimeout & & connectionBag.reserve ( entry ) ) { closeConnection ( entry ,
Log better message when connection was evicted or dead . __EoT__ Closes https : //github.com/brettwooldridge/HikariCP/pull/842
Fix typo in README __EoT__ ` Performnace ` → ` Performance `
Question - Bitwise And Operator in ConcurrentBag.requite method __EoT__ # # # # Environment `` ` HikariCP version : 2.6.2 JDK version : 1.8.0_131 Database : MySQL Driver version : mysql-connector-java:5.1.43 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Hi~ I just Wonder the bitwise and operator in your code . `` ` public void requite ( final T bagEntry ) { bagEntry.setState ( STATE_NOT_IN_USE ) ; for ( int i = 0 ; waiters.get ( ) > 0 ; i++ ) { if ( bagEntry.getState ( ) ! = STATE_NOT_IN_USE || handoffQueue.offer ( bagEntry ) ) { return ; } else if ( ( i & 0x100 ) == 0x100 ) { parkNanos ( MICROSECONDS.toNanos ( 10 ) ) ; } else { yield ( ) ; } } final List < Object > threadLocalList = threadList.get ( ) ; threadLocalList.add ( weakThreadLocals ? new WeakReference < > ( bagEntry ) : bagEntry ) ; } `` ` i just
Wrong label order in MicrometerMetricsTracker __EoT__ https : //github.com/brettwooldridge/HikariCP/blob/50a49f6059db568f12d0b5228343d66a2828aafa/src/main/java/com/zaxxer/hikari/metrics/micrometer/MicrometerMetricsTracker.java # L55-L60 The key of label and the value of label is reverse .
More on FastList is not thread-safe __EoT__ I am getting similar Exception to issue # 591 . I am pretty sure my threads are not sharing the same connection at least not directly . As a matter of fact , the exceptions happen when two threads are trying to close their current connection and get a new connection from the pool . The application has over 512 threads running on a 16 cores machine . The process is IO intensive and CPU usage is not that high . Here are the two exceptions , the exceptions are coming from two different threads : ` Exception in thread `` MainWorker-171 '' java.lang.ArrayIndexOutOfBoundsException : -1 at com.zaxxer.hikari.util.FastList.remove ( FastList.java:136 ) at com.zaxxer.hikari.pool.ProxyConnection.untrackStatement ( ProxyConnection.java:169 ) at com.zaxxer.hikari.pool.ProxyStatement.close ( ProxyStatement.java:70 ) at com.xxx.fsmon.summary.DirectorySummaryDAO.close ( DirectorySummaryDAO.java:194 ) at com.xxx.fsmon.summary.DirectorySummaryDAO.renewConnectionToDb ( DirectorySummaryDAO.java:159 ) at com.xxx.fsmon.directory.ThreadByDir.DirectoryRunnableExtractor.extract ( DirectoryRunnableExtractor.java:215 ) at com.xxx.fsmon.directory.ThreadByDir.DirectoryRunnableExtractor.run ( DirectoryRunnableExtractor.java:454 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) ` and ` [ MainWorker-488 ] ERROR com.xxx.fsmon.summary.FileSummaryDAO : Could not prepare the statements ! java.lang.ArrayIndexOutOfBoundsException : -1 at com.zaxxer.hikari.util.FastList.add ( FastList.java:78 ) at com.zaxxer.hikari.pool.ProxyConnection.trackStatement ( ProxyConnection.java:189 ) at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement ( ProxyConnection.java:312 ) at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement
Fix Prometheus metric collector for multiple data config __EoT__ Hello , In PR # 890 , I intended to support multiple data source for prometheus metrics . But , it turns out it has missing parts and its tests are misleading shown in # 927 . In this PR , I aimed to fix its missing parts and test . I would be grateful , if you can check it anytime you are available @ mmimica , @ brettwooldridge . Thanks in advance ,
wait on datasource close till references are cleared __EoT__ Calling close on the HikariDataSource seems to be returning before all the background helper threads/connections are closed . Hot redeployment of the app is causing a permgen oom error as there are references to the previous version of the application . We are running in an constrained environment where we have limited permgen memory . Assuming the connections are still in use by another thread or close call is taking some time to finish , how can we force wait on datasource close till all the connections in the pool are closed and the background helper threads created by hikari are all shutdown . Thanks in advance . # # # # Environment `` ` HikariCP version : 2.6.3 JDK version : 1.8.0_111 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -
Remove Eclipse-specific files __EoT__ You accidentally pushed some files that Eclipse generated up to the repo . I 've removed them and updated your ` .gitignore ` so they do n't come back .
Support for Driver classes present in Thread Context Class Loader __EoT__ # # # # Environment `` ` Getting `` Failed to load class of driverClassName { } '' when hikari jar is present in parent classloader ( tomcat shared lib ) and the driver class is present in Thread context class loader ( individual webapps ) when the pool is initialized . Looks like the problem is in setDriverClassName of HikariConfig , it is expecting the driver class to be present in the same classloader from which hikari classes are loaded . HikariCP version : x.x.x `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -
Fix prometheus metrics to support multiple hikaricp pools __EoT__ I reverted commit # 876 and rebased # 851 with minor naming changes . In addition to these , I changed 'connection timeout counter ' name 's suffix from 'count ' to 'total ' which all prometheus counters use . That might be breaking change for people who use that metric .
Fix braces style __EoT__
Unexpected IllegalArgumentException in housekeeping task . __EoT__ # # # # Environment `` ` HikariCP version : 2.6.1 JDK version : 1.8.0_71-b15 Database : PostgreSQL 9.6.1 on x86_64-pc-linux-gnu , compiled by gcc , 64-bit Driver version : 9.4-1201-jdbc41 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - # # # # HikariCP Config `` ` config.setAutoCommit ( false ) ; config.setMinimumIdle ( 10 ) ; config.setMaximumPoolSize ( 100 ) ; Other options are default . `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - # # # # Trace `` ` Unexpected exception in housekeeping task java.lang.IllegalArgumentException : Comparison method violates its general contract ! at java.util.TimSort.mergeLo ( TimSort.java:777 ) ~ [ ? :1.8.0_71 ] at java.util.TimSort.mergeAt ( TimSort.java:514 ) ~ [ ? :1.8.0_71
Added support for non-default Prometheus CollectorRegistry __EoT__ Hey . This PR introduces a new constructor in ` PrometheusMetricsTracker ` and a constructor overload in ` PrometheusMetricsTrackerFactory ` to enable configuration of whatever Promethes ` CollectorRegistry ` one might want to use . It 's completely backwards compatible and should n't affect any existing codebase relying on this .
HikariCP not adhering connectionTimeout __EoT__ # # # # Environment `` ` HikariCP version : 2.5.1 JDK version : 1.8.0_121 Database : MSSQL / JTDS Driver version : 1.3.1 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - I just rebooted our databaseserver , and it seems HikariCP had some issues reconnecting . Looking at the logs , I see a request timed out after 600 seconds , but the Hikari connectionTimeout is set to 10 seconds , the JTDS socketTimeout is set to 300 seconds and the JTDS loginTimeout is set to 5 seconds . Should n't the connection acquire timeout after 10 seconds , instead of hanging for 10 minutes ? Only 3 customers sites experienced this issue , and they have in common that they run HikariCP 2.5.1 . Other sites , not showing the same issue , run HikariCP 2.4.1 or 2.4.7 . I have n't been able to reproduce this problem locally , making it difficult to
High CPU usage when there are lots of pending connection pool requests __EoT__ # # # # Environment `` ` HikariCP version : 2.6.0 JDK version : 1.8.0_40-b26 Database : Oracle Driver version : 11.2.0.3.0 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Hi , We 've recently upgraded to 2.6.0 from 2.4.7 and noticed that when our pool saturates and requests start to queue up , then our app CPU usage spikes pretty high ( from 10 % -15 % to 90 % ) . We 've traced it back to this change ( https : //github.com/brettwooldridge/HikariCP/commit/f0b3c520c9d8f5cce3ff04b811165ec61d9ef364 # diff-0dac8ca2574085e5192a8188ca22d42eR181 ) in 2.6.0 where the ConcurrentBag implementation has a ` yield ( ) ` that causes a tight spin loop that will eat CPU until either a timeout or a connection is handed off . In our case , all of our pending threads spinned and ate CPU until the timeout whilst slowing down the application recovery and GC . The
High CPU usage when there are lots of pending connection pool requests __EoT__ # # # # Environment `` ` HikariCP version : 2.6.0 JDK version : 1.8.0_40-b26 Database : Oracle Driver version : 11.2.0.3.0 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Hi , We 've recently upgraded to 2.6.0 from 2.4.7 and noticed that when our pool saturates and requests start to queue up , then our app CPU usage spikes pretty high ( from 10 % -15 % to 90 % ) . We 've traced it back to this change ( https : //github.com/brettwooldridge/HikariCP/commit/f0b3c520c9d8f5cce3ff04b811165ec61d9ef364 # diff-0dac8ca2574085e5192a8188ca22d42eR181 ) in 2.6.0 where the ConcurrentBag implementation has a ` yield ( ) ` that causes a tight spin loop that will eat CPU until either a timeout or a connection is handed off . In our case , all of our pending threads spinned and ate CPU until the timeout whilst slowing down the application recovery and GC . The
High CPU usage when there are lots of pending connection pool requests __EoT__ # # # # Environment `` ` HikariCP version : 2.6.0 JDK version : 1.8.0_40-b26 Database : Oracle Driver version : 11.2.0.3.0 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Hi , We 've recently upgraded to 2.6.0 from 2.4.7 and noticed that when our pool saturates and requests start to queue up , then our app CPU usage spikes pretty high ( from 10 % -15 % to 90 % ) . We 've traced it back to this change ( https : //github.com/brettwooldridge/HikariCP/commit/f0b3c520c9d8f5cce3ff04b811165ec61d9ef364 # diff-0dac8ca2574085e5192a8188ca22d42eR181 ) in 2.6.0 where the ConcurrentBag implementation has a ` yield ( ) ` that causes a tight spin loop that will eat CPU until either a timeout or a connection is handed off . In our case , all of our pending threads spinned and ate CPU until the timeout whilst slowing down the application recovery and GC . The
Better place to capture pool.Wait metric __EoT__ In retrospect on # 825 , this is a better place to capture the metric . In # 825 , it would only capture the timing if the connection bag returned null but it would not capture the timing if the bag returned an entry and the connection then failed validation or was evicted . Moving the statement to outside of the do/while will capture both scenarios .
Default Isolation Level selection with MariaDB , and Galera __EoT__ Hi First of all , thanks for a great library , and apologies for the long post . Background : We are using Hikari 2.5.1 , along with MariaDB and Galera , a multi-master database . For this description , the MariaDB JDBC library is pointing at a single DB node . I have come across an issue where no connections ever get added to the pool , and wanted to hear your opinion . I am unsure if Hikari is at fault , MariaDB JDBC , or both to some degree . When the MariaDB service is started , the DB engine has to determine if the node has the latest data . If it is only slightly behind , it performs an Incremental State Transfer ( IST ) - i.e . changes . If it is significantly behind , it performs a Snapshot State Transfer ( SST ) - i.e . backup and restore , followed by an IST stage . During SST the server is off , and no connection can be made . During IST , the server can be connected to , but the majority
Support graceful shutdown of connection pool ( @ RefreshScope spring boot ) __EoT__ We are in the process of moving our application from Spring MVC to Spring Boot inorder to leverage the Spring consul features ( one of the main ones being dynamic config reload without the need to restart the application ) . The suggested way is to use `` @ RefreshScope '' annotation on `` dataSource '' bean ( i.e . http : //cloud.spring.io/spring-cloud-static/docs/1.0.x/spring-cloud.html # _refresh_scope ) and when i try it using Spring Boot 1.4.1 and HikariCp-2.4.7 , I see the following which is good but NOT the behaviour i expected since i had a transaction in progress when the pool got closed . Is there any plan to support graceful shutdown ? ( it could be as simple as waiting for the current active connections to go idle or wait for some specific amount of time ... lets say 30 secs or configurable ) Looking at shutdown ( ) method , looks like you force close all connections and shutdown the pool when bean destroy method ( i.e . close ( ) method is called ) . /** \* Shutdown the pool , closing all idle
Add info about JRuby wrapper __EoT__
Change ScheduledThreadPoolExecutor to ScheduledExecutorService __EoT__ This change is fully backwards compatible . Using the interface allows support for many more types of executors . This is needed for wrapping , extending , instrumenting , etc . a ` ScheduledExecutorService ` .
Documentation of com.zaxxer.hikari.util.UtilityElf.quietlySleep and code do n't seem to be aligned __EoT__ The documentation of the quietlySleep method says it transforms InterruptedException into RuntimeException which is n't the case ... Also if you choose to quietly ignore the interruped exception would it not make sense to set the interrupted flag ? /** * Sleep and transform an InterruptedException into a RuntimeException . * @ param millis the number of milliseconds to sleep */ public static void quietlySleep ( final long millis ) { try { Thread.sleep ( millis ) ; } catch ( InterruptedException e ) { // I said be quiet ! } }
connectionTimeout vs. slow first connection attempt __EoT__ Please consider this as a feature request . We use a tight ` connectionTimeout ` ( 5s ) in some environments to quickly identify issues with database connection attempts . During regular application runs , this works perfectly and as expected . From time to time , we 're facing a timeout exception during startup of some of our applications . During analysis we found out that there are many things which will slow down the first connection attempt within the jdbc driver , e.g . : - classloading ( file system access ) - jar verification / integrity check - crypto subsystem initialization ( ` SecretKeyFactory ` ... ) - byte code transforming ( jacoco ... ) If more than one HikariCP-Pool is used / initialized at the same time , things get even worse with some jdbc drivers because thread synchronization blocks HikariCP 's connection adder threads , as a thread dumps shows : `` ` [ java ] `` HikariPool-3 connection adder '' Id=15 BLOCKED on sun.security.jca.ProviderConfig @ 70be0a2b owned by `` HikariPool-1 connection adder '' Id=16 [ java ] at sun.security.jca.ProviderConfig.getProvider ( ProviderConfig.java:168 ) [ java ] - blocked
Burst fix attempt2 __EoT__ See # 776
Avoid creating too many connections in bursty workloads __EoT__ See Issue # 774 for backstory . Turns out in a bursty mode where the actual work being done is short it is pretty easy to hit maxPoolSize connections . Once connections are made they are quickly cycled through so they do n't appear to age out and the pool will stay at max size while there is a consistent set of work to be done . See javadoc in middle of PoolEntryCreator for in-depth description of fix . Notes - RaceCondition test was accidently disabled , did n't actually use the pool and had no assertions to check that it was doing anything - RampUp test was racy and would fail if unlucky - Main change ended up being pretty simple but I ca n't 100 % convince myself that it is perfect . I agree it is better to make more connections than too few . - Last commit to switch getPendingQueue ( ) to use the atomic.get ( ) is optional but I think it is more accurate because in a heavily trafficed pool all of the threads are waking up and checking all of the objects (
Interrupts Not Propagated in getConnection __EoT__ @ brettwooldridge If the thread is interrupted while in [ ` HikariPool # getConnection ( ) ` ] ( https : //github.com/brettwooldridge/HikariCP/blob/fbe1006486dc096f327d11fb02775768cc666e90/src/main/java/com/zaxxer/hikari/pool/HikariPool.java # L180 ) , the interrupted exception is rethrown as a ` SQLException ` but the interrupt status on the thread is not reset . I believe the pool should be calling ` Thread.currentThread ( ) .interrupt ( ) ` before rethrowing the exception . I 'm happy to submit a PR for this if you wish .
Support multiple connections at startup __EoT__ USE CASE When we start our environment , we often start the database server on a different machine , than the application server . And then it is practically impossible to ensure that the application starts after the database . The property initializationFailFast will not help us , as it will return with a connection-pool that does not work . If for example Ebean og Hibernate starts afterwards , they will fail as they can not fetch a Connection . PROPOSED SOLUTION We set a parameter : initializationMaxAttempts Which should default to 1 ( todays functionality ) . This should say how many attempts HikariCP should perform to get the initial connections . If connection is not retrieved , then it should log clearly that connection is not coming up . ( ERROR ? )
Support multiple connections at startup __EoT__ USE CASE When we start our environment , we often start the database server on a different machine , than the application server . And then it is practically impossible to ensure that the application starts after the database . The property initializationFailFast will not help us , as it will return with a connection-pool that does not work . If for example Ebean og Hibernate starts afterwards , they will fail as they can not fetch a Connection . PROPOSED SOLUTION We set a parameter : initializationMaxAttempts Which should default to 1 ( todays functionality ) . This should say how many attempts HikariCP should perform to get the initial connections . If connection is not retrieved , then it should log clearly that connection is not coming up . ( ERROR ? )
Support multiple connections at startup __EoT__ USE CASE When we start our environment , we often start the database server on a different machine , than the application server . And then it is practically impossible to ensure that the application starts after the database . The property initializationFailFast will not help us , as it will return with a connection-pool that does not work . If for example Ebean og Hibernate starts afterwards , they will fail as they can not fetch a Connection . PROPOSED SOLUTION We set a parameter : initializationMaxAttempts Which should default to 1 ( todays functionality ) . This should say how many attempts HikariCP should perform to get the initial connections . If connection is not retrieved , then it should log clearly that connection is not coming up . ( ERROR ? )
Number of Connections vs Thread Count __EoT__ I have been really impressed with Hikari in general , much better than the other pools we have tried . We have been trying to characterize the behavior of the pool in regards to how many connections it makes to the database . In our case we notice that the pool hits our maxPoolSize limit of 100 connections when the processing is very fast . I did an experiment where I tried different thread counts vs. simulated operation time vs. idle time between operations to try to understand how many connections are made to the database . Full Test code is here https : //gist.github.com/samhendley/d51b8ebba59e348ee10d13e6c16d2820 but core of the test is this loop run by many threads . `` ` java while ( running.get ( ) ) { final Connection connection = hikariDataSource.getConnection ( ) ; if ( operationTime > 0 ) { Thread.sleep ( operationTime ) ; } connection.close ( ) ; if ( idleTime > 0 ) { Thread.sleep ( idleTime ) ; } } `` ` What we find is that if the operationTime is short and the idle time is short ( simulating a busy and fast process )
Support multiple connections at startup __EoT__ USE CASE When we start our environment , we often start the database server on a different machine , than the application server . And then it is practically impossible to ensure that the application starts after the database . The property initializationFailFast will not help us , as it will return with a connection-pool that does not work . If for example Ebean og Hibernate starts afterwards , they will fail as they can not fetch a Connection . PROPOSED SOLUTION We set a parameter : initializationMaxAttempts Which should default to 1 ( todays functionality ) . This should say how many attempts HikariCP should perform to get the initial connections . If connection is not retrieved , then it should log clearly that connection is not coming up . ( ERROR ? )
Cancel HouseKeeper task on pool shutdown __EoT__ Periodic house-keeping task is scheduled during construction of HikariPool . The resulting scheduled task is not stored and therefore it is not cancelled during pool shutdown . With standard behaviour , when executor is managed by HikariPool itself , it is not an issue , because the executor is shut down on pool shutdown . But when a custom ( long running ) scheduled executor is supplied via setScheduledExecutorService , tasks are kept indefinitely causing a memory leak .
Update README.md __EoT__ c3p0 is correct product name .
Unwrap chained exceptions . __EoT__ Calling sqle.getNextException ( ) will return the same exception as sqle is never reassigned in the loop .
retain NextException __EoT__ two changes : 1. in getLastConnectionFailure ( ) it should be just get ( ) and not getAndSet ( null ) 2. nullify it after successful isValid ( ) see http : //stackoverflow.com/questions/39479345/how-do-i-know-if-my-hikaricp-pool-is-really-exhausted-when-sqltransientconnectio
version 2.4.7 many threads waiting on getConnectiom method __EoT__ `` ddal-query-executor-535 '' - Thread t @ 625 java.lang.Thread.State : TIMED_WAITING at sun.misc.Unsafe.park ( Native Method ) - parking to wait for < 5612c816 > ( a com.zaxxer.hikari.util.QueuedSequenceSynchronizer $ Synchronizer ) at java.util.concurrent.locks.LockSupport.parkNanos ( LockSupport.java:215 ) at java.util.concurrent.locks.AbstractQueuedLongSynchronizer.doAcquireSharedNanos ( AbstractQueuedLongSynchronizer.java:815 ) at java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireSharedNanos ( AbstractQueuedLongSynchronizer.java:1106 ) at com.zaxxer.hikari.util.QueuedSequenceSynchronizer.waitUntilSequenceExceeded ( QueuedSequenceSynchronizer.java:92 ) at com.zaxxer.hikari.util.ConcurrentBag.borrow ( ConcurrentBag.java:169 ) at com.zaxxer.hikari.pool.HikariPool.getConnection ( HikariPool.java:165 ) at com.zaxxer.hikari.pool.HikariPool.getConnection ( HikariPool.java:147 ) at com.zaxxer.hikari.HikariDataSource.getConnection ( HikariDataSource.java:99 ) at com.openddal.repo.JdbcRepository $ 1.getConnection ( JdbcRepository.java:330 ) at com.openddal.repo.tx.ConnectionHolder.getRawConnection ( ConnectionHolder.java:189 ) at com.openddal.repo.tx.ConnectionHolder.getConnection ( ConnectionHolder.java:75 ) at com.openddal.repo.JdbcWorker.doGetConnection ( JdbcWorker.java:74 ) at com.openddal.repo.JdbcQueryWorker.executeQuery ( JdbcQueryWorker.java:51 ) at com.openddal.repo.JdbcQueryWorker.call ( JdbcQueryWorker.java:40 ) at com.openddal.repo.JdbcQueryWorker.call ( JdbcQueryWorker.java:32 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:266 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) Caused by : java.sql.SQLTransientConnectionException : HikariPool-1 - Connection is not available , request timed out after 30000ms . at com.zaxxer.hikari.pool.HikariPool.createTimeoutException ( HikariPool.java:555 ) ~ [ HikariCP-2.4.7.jar : na ] at com.zaxxer.hikari.pool.HikariPool.getConnection ( HikariPool.java:188 ) ~ [ HikariCP-2.4.7.jar : na ] at com.zaxxer.hikari.pool.HikariPool.getConnection ( HikariPool.java:147 ) ~ [ HikariCP-2.4.7.jar : na ] at com.zaxxer.hikari.HikariDataSource.getConnection ( HikariDataSource.java:99 ) ~ [ HikariCP-2.4.7.jar : na
2.5.0 version consumes 100 % CPU __EoT__ Hello . I have a production system that was working fine with HikariCP and DB logic ( non-changed ) for 6 months . And recently I updated from 2.4.7 to 2.5.0 and got 100 % CPU consumption . Env . : `` ` Ubuntu 14.04 java version `` 1.8.0_91 '' `` ` I used ` jstack ` + ` shift+H ` to find top consuming thread . Here is it : `` ` '' pool-4-thread-4 '' # 30 prio=5 os_prio=0 tid=0x00007fc9a002a800 nid=0x2b3e runnable [ 0x00007fc98c4f2000 ] java.lang.Thread.State : RUNNABLE at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:168 ) at com.zaxxer.hikari.pool.ProxyStatement.checkException ( ProxyStatement.java:46 ) at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch ( HikariProxyPreparedStatement.java ) at cc.blynk.server.db.dao.ReportingDBDao.insert ( ReportingDBDao.java:95 ) at cc.blynk.server.db.DBManager.lambda $ insertReporting $ 1 ( DBManager.java:116 ) at cc.blynk.server.db.DBManager $ $ Lambda $ 37/2131139621.run ( Unknown Source ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) `` ` My code is open sourced and I can show it if that helps .
Helpful clarification on .properties location __EoT__ The leading slash ( which causes the search to start at the root of the classpath ) is essential in most cases-rarely would db config be bundled alongside the class of interest in the package structure -- I think this clarification in the example will help novices to HikariCP ( like me ) .
Change what character is used for microseconds __EoT__ Currently , it uses GREEK SMALL LETTER MU ( U+03BC ) , which does n't display in the command prompt on Windows . After this commit , it uses MICRO SIGN ( U+00B5 ) .
Consider relaxing the check between dataSourceClassName and driverClassName __EoT__ If one sets both these properties , they 'll get : `` ` Caused by : java.lang.IllegalArgumentException : can not use driverClassName and dataSourceClassName together . at com.zaxxer.hikari.HikariConfig.validate ( HikariConfig.java:770 ) ~ [ HikariCP-2.4.7.jar : na ] `` ` See https : //github.com/spring-projects/spring-boot/issues/6568 As you are aware already , Spring Boot will automatically set the ` driverClassName ` value . This is a convenience for the user : we detect the driver based on the jdbc url . Once Spring Boot has initialized the ` HikariDataSource ` , it can further be tuned via our ` spring.datasource.hikari ` configuration namespace . Considering it makes sense that someone set url/driver/user/pass and then after changes his mind and set ` dataSourceClassName ` , how about relaxing that check so that the last set wins ? If the user defines a ` spring.datasource.hikari.data-source-class-name ` , that value will be used rather than the driver class name that was set automatically . The reason I am asking here rather than trying to fix that on our side is that I have no guarantee that this will happen : as a user you could create a
Remove ConnectionTimeoutRate on close __EoT__ Fixes # 685
StackOverflowError at ProxyConnection.checkException for batch inserts __EoT__ Batch inserts/updates can produce an SQLException chain which is longer than the stack , causing HikariCP to throw StackOverflowError . This happens on HikariCP version 2.4.7 and older . The fix would be to change ProxyConnection.checkException ( ) to use iteration instead of recursion . `` ` java @ Test public void foo ( ) throws SQLException { Connection connection = dataSource.getConnection ( ) ; Statement init = connection.createStatement ( ) ; init.execute ( `` create table foo ( x int not null ) '' ) ; Statement batch = connection.createStatement ( ) ; for ( int i = 0 ; i < 10000 ; i++ ) { batch.addBatch ( `` insert into foo ( x ) values ( null ) '' ) ; } batch.executeBatch ( ) ; } `` ` `` ` java.lang.StackOverflowError at java.lang.String.startsWith ( String.java:1434 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:153 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException ( ProxyConnection.java:163 ) at com.zaxxer.hikari.pool.ProxyConnection.checkException (
Log false positives for detected leaks __EoT__ The leak detection has false positives for legitimate connections that are used longer than the threshold . To help distinguish these from actual leaks , it would be helpful to log a message if the connection is eventually returned to the pool . For example : `` ` Connection # 123 leak detection triggered ... Connection # 123 was returned to pool `` ` ` LeakTask ` could have a global ` AtomicLong ` to assign connection numbers , record in the ` run ( ) ` method that a potential leak occurred , then print the false positive message in ` cancel ( ) ` .
Read Only connection has nothing to do with transaction . it is just hint __EoT__ Also isIsolateInternalQueries check must be removed ( ignore parameter ) . see https : //docs.oracle.com/javase/7/docs/api/java/sql/Connection.html # setReadOnly ( boolean ) and https : //docs.oracle.com/javase/7/docs/api/java/sql/Connection.html # setAutoCommit ( boolean ) Note : related issue # 674
PSQLException : Can not change transaction read-only property in the middle of a transaction . __EoT__ After updating from 2.4.1 , I get the following exception . After some bisect search , I have found out that the issue got introduced with 2.4.2 . `` ` Caused by : org.postgresql.util.PSQLException : Can not change transaction read-only property in the middle of a transaction . at org.postgresql.jdbc.PgConnection.setReadOnly ( PgConnection.java:724 ) at com.zaxxer.hikari.pool.ProxyConnection.setReadOnly ( ProxyConnection.java:388 ) at com.zaxxer.hikari.pool.HikariProxyConnection.setReadOnly ( HikariProxyConnection.java ) at x.y.JdbcBackend.prepareCommit ( JdbcBackend.java:135 ) `` ` Some details : I use ` readOnly=true ` in config , and explicitly disable read-only in specific use-cases where I need write access : `` ` java try ( Connection conn = ds.getConnection ( ) ) { conn.setReadOnly ( false ) ; ... } `` ` I think https : //github.com/brettwooldridge/HikariCP/commit/bcde774078e553c363d9e31c0022ace87ca62f71 by @ nitincchauhan could have introduced this issue , but I have not verified it . Most probably even reading data with PG JDBC sets the connection transaction state to `` unclean '' .
Add license headers __EoT__ Fix for https : //github.com/brettwooldridge/HikariCP/issues/665
Removing test redundant for com.zaxxer.hikari.pool.TestConnectionTimeoutRetry.testConnectionRetries __EoT__ We are researchers working on identifying redundant tests in a test suite . Our analysis of finding redundant tests involve each test 's dynamic code coverage and their potential fault-detection capability . Through our analysis , we found that the tests com.zaxxer.hikari.pool.TestConnectionTimeoutRetry.testConnectionRetries , com.zaxxer.hikari.pool.TestConnectionTimeoutRetry.testConnectionRetries4 are redundant with respect to one another . In this pull request , we are proposing to keep only the test com.zaxxer.hikari.pool.TestConnectionTimeoutRetry.testConnectionRetries while adding @ Ignore annotations to the remaining test . However , as we believe these tests are identical , any one of them can be kept while skipping the remaining test . If you do not believe any of these tests should be ignored , we would greatly appreciate it if you could follow up on this pull request and let us know your reasons .
Implement List directly instead of extending ArrayList . __EoT__ Closes https : //github.com/brettwooldridge/HikariCP/issues/672 .
NPE due to null PoolEntry connection __EoT__ We 're using Hikari 2.4.5 and while it 's mostly been great we did find this exciting error : > Caused by : java.lang.NullPointerException > at com.zaxxer.hikari.pool.PoolBase.setNetworkTimeout ( PoolBase.java:464 ) > at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive ( PoolBase.java:131 ) > at com.zaxxer.hikari.pool.HikariPool.getConnection ( HikariPool.java:171 ) > at com.zaxxer.hikari.pool.HikariPool.getConnection ( HikariPool.java:147 ) > at com.zaxxer.hikari.HikariDataSource.getConnection ( HikariDataSource.java:83 ) > ... I set out to read the code very closely and my best guess is as follows : A thread acquires a connection via getConnection . The same thread close ( ) s the connection . Somewhere in the middle of the ProxyConnection.close ( ) try an SQLException is thrown that will match the check in checkException . The catch block in ProxyConnection.close ( ) calls checkException which ultimately calls PoolEntry.evict - > HikariPool.closeConnection ( remove ( ) s the PoolEntry ) - > PoolEntry.close ( nulls PoolEntry.connection ) . Then the finally block in ProxyConnection.close ( ) calls PoolEntry.recycle - > HikariPool.releaseConnection ( requite ( ) s the pool entry ) . This ( remove then requite ) seems like a violation of the ConcurrentBag contract and ultimately the entry is available for the same thread to
Not recovering from Amazon Redshift disconnects __EoT__ We are seeing an issue where Hikari was not recovering from a Redshift disconnect . It produces a stack trace like this : `` ` ! Causing : java.sql.SQLException : [ Amazon ] ( 500150 ) Error setting/closing connection : Not Connected . ! at com.amazon.redshift.client.PGClient.isConnected ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.amazon.redshift.client.PGClient.prepareStatement ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.amazon.redshift.dataengine.PGQueryExecutor. < init > ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.amazon.redshift.dataengine.PGDataEngine.prepare ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.amazon.jdbc.common.SPreparedStatement. < init > ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.amazon.jdbc.jdbc41.S41PreparedStatement. < init > ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.amazon.redshift.core.jdbc41.PGJDBC41PreparedStatement. < init > ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.amazon.redshift.core.jdbc41.PGJDBC41ObjectFactory.createPreparedStatement ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.amazon.jdbc.common.SConnection.prepareStatement ( Unknown Source ) ~ [ aws-redshift-jdbc41-1.1.10.1010.jar : RedshiftJDBC_1.1.10.1010 ] ! at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement ( ProxyConnection.java:310 ) ~ [ HikariCP-2.4.7-SNAPSHOT.jar : na ] ! at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement ( HikariProxyConnection.java ) ~ [ HikariCP-2.4.7-SNAPSHOT.jar
Add prometheus support __EoT__ I want to export metrics data to prometheus ' simpleclient . I sent p-r for Prometheus repo . Then , @ brian-brazil recommend me to p-r for hikaricp 's repo . https : //github.com/prometheus/client_java/pull/118 Ref # 321
PropertyBeanSetter uses default locale __EoT__ Motivation : toUpperCase works according to Locale settings , for example if your computer locale is Turkish , `` idleTimeout '' property turns into `` setİdleTime '' beacuse upper `` i '' is `` İ '' in Turkish . Modifications : Invoke toUpperCase with Locale.ENGLISH . Result : Fixes # 641 . PropertyBeanSetter should work with Turkish locale .
Shutdown will throw NPE if invoked from checkFailFast __EoT__ Motivation : Shutdown may be invoked as a result of checkFailFast failing resulting in an NPE as the executors are setup later in the constructor . Modifications : Add null checks before trying to shutdown the executors . Result : '' Graceful '' shutdown .
No more fixed size connection pool behaviour __EoT__ After upgrading hikaricp from 2.4.3 to 2.4.5 when maximumPoolSize is set , I no longer observe supposed fixed size connection pool behaviour . When maximumPoolSize was set to 60 and minimumIdle was not set , hikaricp used to acquire 60 connections on start . It seems to me that is no longer the case . JMX `` ` Pool ( HibernateHikariPool ) ActiveConnections 11 IdleConnections 11 ThreadsAwaitingConnection 0 TotalConnections 22 `` ` `` ` PoolConfig ( HibernateHikariPool ) ConnectionTimeout 30000 IdleTimeout 600000 LeakDetectionThreshold 0 MaxLifetime 1800000 MaximumPoolSize 60 MinimumIdle 60 PoolName HibernateHikariPool ValidationTimeout 5000 `` ` `` ` < bean id= '' hikariDataSource '' class= '' com.zaxxer.hikari.HikariDataSource '' destroy-method= '' close '' > < property name= '' poolName '' value= '' HibernateHikariPool '' / > < property name= '' dataSourceClassName '' value= '' oracle.jdbc.pool.OracleDataSource '' / > < property name= '' autoCommit '' value= '' false '' / > < property name= '' connectionInitSql '' value= '' alter session set NLS_SORT = 'XCZECH ' NLS_LANGUAGE = 'CZECH ' '' / > < property name= '' initializationFailFast '' value= '' true '' / > < property name= '' registerMbeans '' value= '' true
minimumIdle = 0 without setting maximumPoolSize does n't work __EoT__ I 'm getting the following when ` minIdle ` is preset to zero and ` maxIdle ` is not set at all . `` ` java.lang.IllegalArgumentException at java.util.concurrent.LinkedBlockingQueue. < init > ( LinkedBlockingQueue.java:261 ) at com.zaxxer.hikari.util.UtilityElf.createThreadPoolExecutor ( UtilityElf.java:108 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:121 ) at com.zaxxer.hikari.HikariDataSource. < init > ( HikariDataSource.java:71 ) `` ` The ` HikariConfig.validate ` seems to adjust ` maxIdle ` to zero and this in turn is not acceptable value for ` LinkedBlockingQueue ` queue size . `` ` java if ( maxPoolSize < 0 ) { if ( minIdle < 0 ) { minIdle = 10 ; } maxPoolSize = minIdle ; } else if ( minIdle < 0 || minIdle > maxPoolSize ) { minIdle = maxPoolSize ; } `` ` The configuration knobs section only mentions the adjustment scenario where ` minIdle ` is missing but ` maxIdle ` is preset but I assume that in this case the ` maxPoolSize ` should be 10 and ` minIdle ` should n't been tampered with . `` ` java if ( maxPoolSize < 0 ) { maxPoolSize = minIdle < =
java.util.concurrent.atomic.AtomicInteger can not be cast to java.lang.String error when using HikariCP with certain third party libraries __EoT__ Hi 2.4.4 introduced feature that generates unique poolIds by storing AtomicInteger in System.getProperties . While nice feature , this broke some of our applications that used libraries that expected all system properties to be Strings , such as Typesafe Config and Ivy . Not sure how it could be fixed while keeping this functionality , I would create PR if i had any ideas.. `` ` java.lang.ClassCastException : java.util.concurrent.atomic.AtomicInteger can not be cast to java.lang.String at org.apache.ivy.core.settings.IvySettings.addAllVariables ( IvySettings.java:589 ) at org.apache.ivy.core.settings.IvySettings.addAllVariables ( IvySettings.java:583 ) at org.apache.ivy.core.settings.IvySettings.addSystemProperties ( IvySettings.java:303 ) at org.apache.ivy.core.settings.IvySettings. < init > ( IvySettings.java:298 ) at org.apache.ivy.core.settings.IvySettings. < init > ( IvySettings.java:218 ) at sbt.IvySbt.sbt $ IvySbt $ $ settings $ lzycompute ( Ivy.scala:71 ) at sbt.IvySbt.sbt $ IvySbt $ $ settings ( Ivy.scala:69 ) at sbt.IvySbt.ivyLockFile $ lzycompute ( Ivy.scala:119 ) at sbt.IvySbt.ivyLockFile ( Ivy.scala:119 ) at sbt.IvySbt.withDefaultLogger ( Ivy.scala:65 ) at sbt.IvySbt.withIvy ( Ivy.scala:127 ) at sbt.IvySbt.withIvy ( Ivy.scala:124 ) at sbt.IvySbt $ Module.withModule ( Ivy.scala:155 ) at sbt.IvyActions $ .makePom ( IvyActions.scala:94 ) at sbt.Classpaths $ $ anonfun $ 36.apply ( Defaults.scala:1059 ) at sbt.Classpaths $ $
java.util.concurrent.atomic.AtomicInteger can not be cast to java.lang.String error when using HikariCP with certain third party libraries __EoT__ Hi 2.4.4 introduced feature that generates unique poolIds by storing AtomicInteger in System.getProperties . While nice feature , this broke some of our applications that used libraries that expected all system properties to be Strings , such as Typesafe Config and Ivy . Not sure how it could be fixed while keeping this functionality , I would create PR if i had any ideas.. `` ` java.lang.ClassCastException : java.util.concurrent.atomic.AtomicInteger can not be cast to java.lang.String at org.apache.ivy.core.settings.IvySettings.addAllVariables ( IvySettings.java:589 ) at org.apache.ivy.core.settings.IvySettings.addAllVariables ( IvySettings.java:583 ) at org.apache.ivy.core.settings.IvySettings.addSystemProperties ( IvySettings.java:303 ) at org.apache.ivy.core.settings.IvySettings. < init > ( IvySettings.java:298 ) at org.apache.ivy.core.settings.IvySettings. < init > ( IvySettings.java:218 ) at sbt.IvySbt.sbt $ IvySbt $ $ settings $ lzycompute ( Ivy.scala:71 ) at sbt.IvySbt.sbt $ IvySbt $ $ settings ( Ivy.scala:69 ) at sbt.IvySbt.ivyLockFile $ lzycompute ( Ivy.scala:119 ) at sbt.IvySbt.ivyLockFile ( Ivy.scala:119 ) at sbt.IvySbt.withDefaultLogger ( Ivy.scala:65 ) at sbt.IvySbt.withIvy ( Ivy.scala:127 ) at sbt.IvySbt.withIvy ( Ivy.scala:124 ) at sbt.IvySbt $ Module.withModule ( Ivy.scala:155 ) at sbt.IvyActions $ .makePom ( IvyActions.scala:94 ) at sbt.Classpaths $ $ anonfun $ 36.apply ( Defaults.scala:1059 ) at sbt.Classpaths $ $
FastList is not thread-safe __EoT__ Hi @ brettwooldridge , This issue is to notify you about a concurrency bug . When multiple threads create and close ` PreparedStatements ` , ` ProxyStatement.close ( ) ` calls ` ProxyConnection.untrackStatement ( Statement ) ` multiple times with different statements . ` ProxyConnection ` then attempts to remove these from ` openStatements ` . The problem is that ` FastList ` is not thread-safe , so these concurrent removes end up throwing an ` ArrayIndexOutOfBoundsException ` . I 've created ` ConcurrentCloseConnectionTest ` to demonstrate this problem ( see # 590 ) . As we said in # 451 , we 're getting closer to our 7.0 release . We have a workaround so our CI tests pass , but we 'd like to have a real solution in place with enough time to allow for rigorous testing . Please let me know if you have any questions or need more input . Thanks ! Matt cc @ shuyangzhou
Failed to get/set network timeout for connection . __EoT__ Using latest ( 9.4.1208 ) PostgreSQL JDBC driver and Java 8 : ` WARN 15:55:44,723 lBase - HikariPool-0 - Failed to get/set network timeout for connection . ( Method org.postgresql.jdbc.PgConnection.getNetworkTimeout ( ) is not yet implemented . ) ` Is it falling back to a safe value if such call fails ? Maybe modifying that message to state something like : _Falling back to X value or using X default value instead._ Would be great not to panic the user ?
QUESTION : Why is the minimum value for connectionTimeout limited to 1000 ? __EoT__ Hi , we 're evaluating this connection pool and i have a question as to why the minimum value of connectionTimeout is limited to 1000 ms ? > This property controls the maximum number of milliseconds that a client ( that 's you ) will wait for a connection from the pool . If this time is exceeded without a connection becoming available , a SQLException will be thrown . 1000ms is the minimum value . Default : 30000 ( 30 seconds ) If we have an issue with a single shard we will fill up all available threads on the server waiting for a connection rather than just drop the request straight away . Any thoughts on this ?
Add metric for recording count and rate of connection timeouts __EoT__ Added ` MetricsTracker.recordConnectionTimeout ( ) ` and tied that into ` HikariPool.getConnection ( ) ` when we hit the connection timeout threshold . Also added an implementation to ` CodaHaleMetricsTracker ` with a counter and a meter .
URGENT : Unusual system clock change detected , soft-evicting connections from pool . __EoT__ Brett , I saw a ton of connections from a particular host last night ... `` ` dgcs= # select distinct usename , application_name , client_addr , count ( * ) from pg_stat_activity where client_addr = '10.101.152.33 ' group by usename , application_name , client_addr order by client_addr , usename ; usename | application_name | client_addr | count -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -- -+ -- -- -- - analytics_rw | | 10.101.152.33 | 289 catalog_rw | | 10.101.152.33 | 192 dgwatch_rw | | 10.101.152.33 | 40 member_rw | | 10.101.152.33 | 508 wps_processor_rw | | 10.101.152.33 | 200 ( 5 rows ) `` ` This morning , come to find the following in the log files every hour or so ... `` ` 2016-01-25 21:09:15,498 WARN [ a3808e51-ff45-4d72-b5de-7efdd973ec27 ] [ Hikari housekeeper ( pool 1-MemberConnectionPool ) ] [ pool.HikariPool ] - 1-MemberConnectionPool - Unusual system clock change detected , soft-evicting connections from pool . 2016-01-25 21:09:17,948 WARN [ a3808e51-ff45-4d72-b5de-7efdd973ec27 ] [ Hikari housekeeper (
QUESTION : Why is the minimum value for connectionTimeout limited to 1000 ? __EoT__ Hi , we 're evaluating this connection pool and i have a question as to why the minimum value of connectionTimeout is limited to 1000 ms ? > This property controls the maximum number of milliseconds that a client ( that 's you ) will wait for a connection from the pool . If this time is exceeded without a connection becoming available , a SQLException will be thrown . 1000ms is the minimum value . Default : 30000 ( 30 seconds ) If we have an issue with a single shard we will fill up all available threads on the server waiting for a connection rather than just drop the request straight away . Any thoughts on this ?
HikariProxyCallableStatement is missing overriden default method causing SQLFeatureNotSupportedException __EoT__ Hi , When running HikariCP on Java8 , ` HikariProxyCallableStatement ` class is missing overriden definition of methods from ` CallableStatement ` interface : - ` registerOutParameter ( String parameterName , SQLType sqlType ) ` - ` registerOutParameter ( String parameterName , SQLType sqlType , int scale ) ` - ` registerOutParameter ( String parameterName , SQLType sqlType , String typeName ) ` All of them are marked as default , hence are not generated by ` JavassistProxyFactory ` . This is causing a ` SQLFeatureNotSupportedException ` if any one of the methods is called on HikaruCP prepared statement despite the fact that method itself is implemented in particular ` CallableStatement ` .
Do I misunderstand minimumIdle ? __EoT__ I set minimumIdle = 100 for pool . But I found only 10 connections . I expect HikariCP keeps 100 idle connections so that I can see them by `` show processlist '' . version : 2.4.1 < dependency > < groupId > com.zaxxer < /groupId > < artifactId > HikariCP < /artifactId > < version > 2.4.1 < /version > < /dependency >
Hikari connection pool grows to maximum size at start __EoT__ Hi . I switched to hikari cp from apache dbcp and i confused a little . There is a config option `` maximumPoolSize '' , this option means that connection count will grow until to maximum pool size if needed . This option works as expected in apache dbcp , but in hikari all connections will be established at start . I use scala , and my test case is : build.sbt `` ` scala libraryDependencies += `` org.postgresql '' % `` postgresql '' % `` 9.3-1102-jdbc41 '' libraryDependencies += `` com.zaxxer '' % `` HikariCP-java6 '' % `` 2.3.2 '' `` ` Test.scala `` ` scala import com.zaxxer.hikari.HikariConfig import com.zaxxer.hikari.HikariDataSource object Test extends App { val config = new HikariConfig ( ) config.setDataSourceClassName ( `` org.postgresql.ds.PGSimpleDataSource '' ) config.addDataSourceProperty ( `` serverName '' , `` ... '' ) config.addDataSourceProperty ( `` databaseName '' , `` ... '' ) config.addDataSourceProperty ( `` user '' , `` test '' ) config.addDataSourceProperty ( `` password '' , `` ... '' ) config.setMaximumPoolSizebuild ( 100 ) config.setConnectionTimeout ( 3000 ) config.setValidationTimeout ( 1000 ) val dataSource = new HikariDataSource ( config ) while
2.4.2 RC1 : Connection leak detection false positive __EoT__ I tried 2.4.2 RC1 in replacement to 2.4.1 . Without any changes to the app , HikariCP reports a connection leak after pool-initialization . But there is no leaking connection : one connection in pool , one idle , one connection to the database . Excerpt from log ( pool configuration and leak alert ) : `` ` [ # | 16.10.2015 14:01:05.887 | ... | DEBUG com.zaxxer.hikari.HikariConfig dev - configuration : allowPoolSuspension ... ... ... ... .false autoCommit ... ... ... ... ... ... ... .true catalog ... ... ... ... ... ... ... ... . connectionInitSql ... ... ... ... ... connectionTestQuery ... ... ... ... . connectionTimeout ... ... ... ... ... 2000 dataSource ... ... ... ... ... ... ... . dataSourceClassName ... ... ... ... .org.postgresql.ds.PGSimpleDataSource dataSourceJNDI ... ... ... ... ... ... dataSourceProperties ... ... ... ... { serverName=… , socketTimeout=15 , user=… , databaseName=… , tcpKeepAlive=true , prepareThreshold=0 , password= < masked > , portNumber= , loginTimeout=15 } driverClassName ... ... ... ... ... .. healthCheckProperties ... ... ... .. { } healthCheckRegistry ... ... ... ... . idleTimeout ... ... ... ... ...
Race condition while adding threads __EoT__ I 'm opening issue to notify you about and provide a potential solution for a bug in your code . There is a race condition when 2 threads call ` HikariPool.getConnection ( ) ` while there are no idle connections available and ` minimumIdle ` is set to 0 . Both threads will go into ` ConcurrentBag.borrow ( long , TimeUnit ) ` , see that there are no available threads to borrow , and create new worker threads to add one connection each in ` HikariPool.addBagItem ( ) ` . The borrowing threads will then wait until signalled , at which point they will wake up and check for available connections again . The workers will execute sequentially and each try to create a new connection . This is the execution that leads to the race condition : Worker 1 adds a connection as usual , signalling the borrow threads to wake up . Worker 1 finishes ( ` isDone ( ) ` ) Before the borrow threads can check for new connections , worker 2 tries to add a new connection . Worker 2 checks if ` getIdleConnections ( ) < =
Race condition while adding threads __EoT__ I 'm sending this pull to notify you about and provide a potential solution for a bug in your code . There is a race condition when 2 threads call ` HikariPool.getConnection ( ) ` while there are no idle connections available and ` minimumIdle ` is set to 0 . Both threads will go into ` ConcurrentBag.borrow ( long , TimeUnit ) ` , see that there are no available threads to borrow , and create new worker threads to add one connection each in ` HikariPool.addBagItem ( ) ` . The borrowing threads will then wait until signalled , at which point they will wake up and check for available connections again . The workers will execute sequentially and each try to create a new connection . This is the execution that leads to the race condition : Worker 1 adds a connection as usual , signalling the borrow threads to wake up . Worker 1 finishes ( ` isDone ( ) ` ) Before the borrow threads can check for new connections , worker 2 tries to add a new connection . Worker 2 checks if ` getIdleConnections ( ) <
Timeout from HikariPool # getConnection ( final long hardTimeout ) does not account for call to PoolElf # isConnectionAlive __EoT__ In HikariPool # getConnection ( final long hardTimeout ) is the following block of code : `` ` final long now = clockSource.currentTime ( ) ; if ( bagEntry.evict || ( clockSource.elapsedMillis ( bagEntry.lastAccess , now ) > ALIVE_BYPASS_WINDOW_MS & & ! poolElf.isConnectionAlive ( bagEntry.connection , lastConnectionFailure ) ) ) { closeConnection ( bagEntry , `` ( connection evicted or dead ) '' ) ; // Throw away the dead connection and try again timeout = hardTimeout - clockSource.elapsedMillis ( startTime , now ) ; } `` ` “ now ” is being assigned a value before the if condition . The problem is that the call to poolElf.isConnectionAlive can take time and has its own timeout . So , in the if block , when you go : ` timeout = hardTimeout - clockSource.elapsedMillis ( startTime , now ) ; ` it does not account for this elapsed time ( e.g . 5 seconds for a call to connection.isValid ( timeoutSec ) where timeoutSec is 5 seconds ) . Therefore , I think `` now '' should also be
Make java.beans optional ( or not used ) __EoT__ Zipkin uses a base docker image that derives ` FROM delitescere/java:8 ` This is a JRE , not a JDK , specifically Zulu JRE compact3 profile . That profile does not include the ` java.beans ` package . It looks like this is implicitly used by ` HikariConfig ` when debug logging is enabled . Can it not ? : ) `` ` query_1 | ERR [ 20150910-12:42:31.819 ] ThriftQueryService : Caused by java.lang.NoClassDefFoundError : java/beans/IntrospectionException query_1 | ERR [ 20150910-12:42:31.819 ] ThriftQueryService : at com.zaxxer.hikari.HikariConfig.logConfiguration ( HikariConfig.java:827 ) query_1 | ERR [ 20150910-12:42:31.819 ] ThriftQueryService : at com.zaxxer.hikari.HikariConfig.validate ( HikariConfig.java:782 ) query_1 | ERR [ 20150910-12:42:31.819 ] ThriftQueryService : at com.zaxxer.hikari.HikariDataSource.getConnection ( HikariDataSource.java:94 ) -- snip -- `` `
Recent connections are not validated ( ALIVE_BYPASS_WINDOW ) __EoT__ Hikari does validate pooled connections only if they are older than a given threshold . The default threshold is 1000ms , can be set via the ` com.zaxxer.hikari.aliveBypassWindow ` system property . In effect , Hikari assumes that a just created connection is alive and does not need to be validated . Although this may seem a valid optimisation , it becomes confusing when the pool is configured with an _incorrect validation query_ . In that case , the application will always obtain a brand new connection from the pool - already pooled connections older than the threshold are eligible for validation and will be ( silently ) discarded . The application is working but performs as if it had no pool at all ( except for the limit on concurrent connections ) . The worst is there is no way for sysadmin to detect and troubleshoot the issue ( application is working and nothing in the logs ) - not even with the metrics . We decided to turn off this feature by setting the ` com.zaxxer.hikari.aliveBypassWindow ` property to '-1 ' . Changing this value through system properties is
PoolStats methods are protected - hard to build custom MetricTracker __EoT__ The introduction of the new ` MetricsTrackerFactory ` property seems to allow us to register custom implementation of ` MetricsTracker ` ( other than the one provided for Codahale metrics ) . Valuable metric information like total connections , idle connections , active connections , etc are made available through an instance of ` PoolStats ` . Unfortunately , the corresponding getter methods are all marked ` protected ` and are therefore not available to any MetricTracker implementation not in the Hikari packages ... Is it intended ? If so , how are we supposed to implement a custom metric tracker ?
PoolStats methods are protected - hard to build custom MetricTracker __EoT__ The introduction of the new ` MetricsTrackerFactory ` property seems to allow us to register custom implementation of ` MetricsTracker ` ( other than the one provided for Codahale metrics ) . Valuable metric information like total connections , idle connections , active connections , etc are made available through an instance of ` PoolStats ` . Unfortunately , the corresponding getter methods are all marked ` protected ` and are therefore not available to any MetricTracker implementation not in the Hikari packages ... Is it intended ? If so , how are we supposed to implement a custom metric tracker ?
connection.setReadOnly ( isReadOnly ) at PoolUtilities.java:129 throws SQLFeatureNotSupportedException with Voltdb __EoT__ Looks like VoltDB does not support read-only mode . so when used with hirakicp it throws the error java.sql.SQLFeatureNotSupportedException at org.voltdb.jdbc.SQLError.noSupport ( SQLError.java:65 ) at org.voltdb.jdbc.JDBC4Connection.setReadOnly ( JDBC4Connection.java:480 ) at com.zaxxer.hikari.pool.PoolUtilities.setupConnection ( PoolUtilities.java:129 ) Wondering how to use hirakicp with data stores that do not support read-only mode
expose houseKeepingExecutorService for sharing __EoT__ Hikari 2.4.0 allows pools to share house keeping threadpools , which is great , but there 's no way to actually create one for sharing , unless I 'm missing something ? And it 's not really possible to create one which mimics what the default one does , since it uses a private task : `` ` if ( config.getScheduledExecutorService ( ) == null ) { ThreadFactory threadFactory = config.getThreadFactory ( ) ! = null ? config.getThreadFactory ( ) : new DefaultThreadFactory ( `` Hikari housekeeper ( pool `` + poolName + `` ) '' , true ) ; this.houseKeepingExecutorService = new ScheduledThreadPoolExecutor ( 1 , threadFactory , new ThreadPoolExecutor.DiscardPolicy ( ) ) ; this.houseKeepingExecutorService.scheduleAtFixedRate ( new HouseKeeper ( ) , HOUSEKEEPING_PERIOD_MS , HOUSEKEEPING_PERIOD_MS , TimeUnit.MILLISECONDS ) ; `` `
Connection string password encryption in non-spring environment __EoT__ Hi , I noticed that the new hibernate-hikaricp connection provider does n't seem to provide any support for Jasypt encryption . I managed to make hikaricp to work with a jasypt encrypted password through the jasypt-spring-boot-starter package but I also have non-spring applications and I could n't find an encryption solution for those . Did I miss anything ? Looks like EncryptedDriverManagerConnectionProviderImpl from the jasypt-hibernate4-ext package provides such on-the-fly decryption concept . In the same way , would it be possible to integrate a jasypt decryptor in hikaricp 's connection provider ? best regards kbjp
Hikari might not recover from state `` Unusual system clock change detected '' __EoT__ The Housekeeper checks for unusual system clock changes . If such a change has been detected the ` previous ` variable is not updated because of the ` return ` statement . It could happen that Hikari does not recover from this state because the value ` previous ` has become too old . Currently we have a development VM which evicts connections every 30 seconds . `` ` java final long now = clockSource.currentTime ( ) ; final long idleTimeout = config.getIdleTimeout ( ) ; // Detect retrograde time as well as forward leaps of unacceptable duration if ( now < previous || now > clockSource.plusMillis ( previous , ( 2 * HOUSEKEEPING_PERIOD_MS ) ) ) { LOGGER.warn ( `` { } - Unusual system clock change detected , soft-evicting connections from pool . `` , poolName ) ; softEvictConnections ( ) ; fillPool ( ) ; return ; } previous = now ; `` `
Mistake in documentation for configuration via java.util.Properties __EoT__ [ Here ] ( https : //github.com/brettwooldridge/HikariCP # initialization ) the documentation states that the LogWriter can be configured via java.util.Properties like this : `` ` java Properties props = new Properties ( ) ; // ... props.setProperty ( `` dataSource.logWriter '' , new PrintWriter ( System.out ) ) ; `` ` setProperty only accepts String as second parameter , though . How can you actually configure the log writer via java.util.Properties ?
Mistake in documentation for configuration via java.util.Properties __EoT__ [ Here ] ( https : //github.com/brettwooldridge/HikariCP # initialization ) the documentation states that the LogWriter can be configured via java.util.Properties like this : `` ` java Properties props = new Properties ( ) ; // ... props.setProperty ( `` dataSource.logWriter '' , new PrintWriter ( System.out ) ) ; `` ` setProperty only accepts String as second parameter , though . How can you actually configure the log writer via java.util.Properties ?
no MBean interface __EoT__ Just finished implementing HikariCP in an app to replace BoneCP . The pool configures and runs successfully , but as soon as I try and turn on the JMX monitoring , I see the following . [ 2015-06-27 12:00:56.756 ] [ WARN ] HikariMBeanElf - Unable to register management beans . javax.management.NotCompliantMBeanException : com.zaxxer.hikari : type=PoolConfig ( ZC_DBA ) mbean has no MBean interface for class com.zaxxer.hikari.HikariDataSource at com.caucho.jmx.AbstractMBeanServer.createMBean ( AbstractMBeanServer.java:441 ) at com.caucho.jmx.AbstractMBeanServer.registerMBean ( AbstractMBeanServer.java:415 ) at com.zaxxer.hikari.pool.HikariMBeanElf.registerMBeans ( HikariMBeanElf.java:67 ) at com.zaxxer.hikari.pool.BaseHikariPool. < init > ( BaseHikariPool.java:170 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:60 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:48 ) at com.zaxxer.hikari.HikariDataSource. < init > ( HikariDataSource.java:80 ) at com.zaneray.foundation.dbconnection.HikariCPPool.connect ( HikariCPPool.java:79 ) [ 12:00:53.700 ] { main } Windows 8.1 6.3 amd64 [ 12:00:53.700 ] { main } Java ( TM ) SE Runtime Environment 1.8.0_45-b15 , UTF-8 , en And this is using the most recent 2.3.8 release . ( edit ) I suppose this could simply be an issue with an outdated version of Resin also , not the pool or the JVM
HikariConfig.setRegisterMbeans ( false ) not honored in HikariMBeanElf.unregisterMBeans __EoT__ please add if ( ! configuration.isRegisterMbeans ( ) ) return ; in HikariMBeanElf.unregisterMBeans otherwise an mbeanserver gets instantiated on pool shutdown even if regsterMBeans was set to false
HikariConfig.setRegisterMbeans ( false ) not honored in HikariMBeanElf.unregisterMBeans __EoT__ please add if ( ! configuration.isRegisterMbeans ( ) ) return ; in HikariMBeanElf.unregisterMBeans otherwise an mbeanserver gets instantiated on pool shutdown even if regsterMBeans was set to false
Fixes __EoT__
Improvements __EoT__ Some improvements . Nothing particularly big , but still useful ( I hope ) . WDYT ?
Javassist v3.19.0-GA 19 Incompatibility __EoT__ Konichiwa Brett ! Hope you are well . Java 8u25 I 've come across an issue using the just released Javassist v3.19.0-GA . It does n't happen with v3.18.2-GA. `` ` java.lang.VerifyError : Illegal type at constant pool entry 392 in class com.zaxxer.hikari.proxy.PreparedStatementJavassistProxy Exception Details : Location : com/zaxxer/hikari/proxy/PreparedStatementJavassistProxy.getLargeUpdateCount ( ) J @ 1 : invokespecial Reason : Constant pool index 392 is invalid Bytecode : 0x0000000 : 2ab7 0188 ad4c 2a2b b600 1bbf Exception Handler Table : bci [ 0 , 5 ] = > handler : 5 Stackmap Table : same_locals_1_stack_item_frame ( @ 5 , Object [ # 17 ] ) at com.zaxxer.hikari.proxy.ProxyFactory.getProxyPreparedStatement ( ProxyFactory.java ) ~ [ HikariCP-2.3.0-rc4.jar : na ] at com.zaxxer.hikari.proxy.ConnectionProxy.prepareStatement ( ConnectionProxy.java:263 ) ~ [ HikariCP-2.3.0-rc4.jar : na ] at com.zaxxer.hikari.proxy.ConnectionJavassistProxy.prepareStatement ( ConnectionJavassistProxy.java ) ~ [ HikariCP-2.3.0-rc4.jar : na ] at org.flywaydb.core.internal.dbsupport.JdbcTemplate.queryForString ( JdbcTemplate.java:181 ) ~ [ flyway-core-3.1.jar : na ] at org.flywaydb.core.internal.dbsupport.postgresql.PostgreSQLDbSupport.doGetCurrentSchema ( PostgreSQLDbSupport.java:55 ) ~ [ flyway-core-3.1.jar : na ] at org.flywaydb.core.internal.dbsupport.DbSupport.getCurrentSchema ( DbSupport.java:75 ) ~ [ flyway-core-3.1.jar : na ] at org.flywaydb.core.Flyway.execute ( Flyway.java:1295 ) ~ [ flyway-core-3.1.jar : na ] at org.flywaydb.core.Flyway.migrate ( Flyway.java:919 ) ~ [ flyway-core-3.1.jar : na ] at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native
Race condition on Shutdown ? __EoT__ Hi , if I shutdown Hikari before the Pool has been fully initialized ( I guess before all the connections have been opened ) sometimes I get an IllegalSateException ` 2015.01.19 13:47:44,793 CET [ main ] DEBUG HikariPool - Before shutdown pool stats HikariPool-0 ( total=8 , inUse=0 , avail=8 , waiting=0 ) 2015.01.19 13:47:44,933 CET [ HikariCP connection filler ( pool HikariPool-0 ) ] DEBUG HikariPool - Connection attempt to database HikariPool-0 failed : ConcurrentBag has been closed java.lang.IllegalStateException : ConcurrentBag has been closed at com.zaxxer.hikari.util.ConcurrentBag.add ( ConcurrentBag.java:184 ) at com.zaxxer.hikari.pool.HikariPool.addConnection ( HikariPool.java:436 ) at com.zaxxer.hikari.pool.HikariPool.access $ 400 ( HikariPool.java:73 ) at com.zaxxer.hikari.pool.HikariPool $ 1AddConnection.run ( HikariPool.java:315 ) at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:471 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:262 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1145 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:615 ) at java.lang.Thread.run ( Thread.java:724 ) 2015.01.19 13:47:45,41 CET [ main ] DEBUG HikariPool - After shutdown pool stats HikariPool-0 ( total=0 , inUse=0 , avail=0 , waiting=0 ) ` Note the before shutting down total being 8 while my setting is ` config.setMaximumPoolSize ( 10 ) ; ` Maybe the ` shutdown ( ) ` command does not stop the `
Javassist v3.19.0-GA 19 Incompatibility __EoT__ Konichiwa Brett ! Hope you are well . Java 8u25 I 've come across an issue using the just released Javassist v3.19.0-GA . It does n't happen with v3.18.2-GA. `` ` java.lang.VerifyError : Illegal type at constant pool entry 392 in class com.zaxxer.hikari.proxy.PreparedStatementJavassistProxy Exception Details : Location : com/zaxxer/hikari/proxy/PreparedStatementJavassistProxy.getLargeUpdateCount ( ) J @ 1 : invokespecial Reason : Constant pool index 392 is invalid Bytecode : 0x0000000 : 2ab7 0188 ad4c 2a2b b600 1bbf Exception Handler Table : bci [ 0 , 5 ] = > handler : 5 Stackmap Table : same_locals_1_stack_item_frame ( @ 5 , Object [ # 17 ] ) at com.zaxxer.hikari.proxy.ProxyFactory.getProxyPreparedStatement ( ProxyFactory.java ) ~ [ HikariCP-2.3.0-rc4.jar : na ] at com.zaxxer.hikari.proxy.ConnectionProxy.prepareStatement ( ConnectionProxy.java:263 ) ~ [ HikariCP-2.3.0-rc4.jar : na ] at com.zaxxer.hikari.proxy.ConnectionJavassistProxy.prepareStatement ( ConnectionJavassistProxy.java ) ~ [ HikariCP-2.3.0-rc4.jar : na ] at org.flywaydb.core.internal.dbsupport.JdbcTemplate.queryForString ( JdbcTemplate.java:181 ) ~ [ flyway-core-3.1.jar : na ] at org.flywaydb.core.internal.dbsupport.postgresql.PostgreSQLDbSupport.doGetCurrentSchema ( PostgreSQLDbSupport.java:55 ) ~ [ flyway-core-3.1.jar : na ] at org.flywaydb.core.internal.dbsupport.DbSupport.getCurrentSchema ( DbSupport.java:75 ) ~ [ flyway-core-3.1.jar : na ] at org.flywaydb.core.Flyway.execute ( Flyway.java:1295 ) ~ [ flyway-core-3.1.jar : na ] at org.flywaydb.core.Flyway.migrate ( Flyway.java:919 ) ~ [ flyway-core-3.1.jar : na ] at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native
Improvements __EoT__ Some improvements . Nothing particularly big , but still useful ( I hope ) . WDYT ?
Version 2.3.6 fails with : Driver with class name org.hsqldb.jdbcDriver was not found among registered drivers __EoT__ Hi , With version 2.3.4 everything works fine . But as soon as I upgrade to 2.3.6 the pool is unable to find the HSQLDB jdbc driver . Thanks for looking into this . Best regards , Ulf Ekström
poolName which contains `` : '' causes MalformedObjectNameException __EoT__ `` ` javax.management.MalformedObjectNameException : Invalid character ' : ' in value part of property at javax.management.ObjectName.construct ( ObjectName.java:618 ) at javax.management.ObjectName. < init > ( ObjectName.java:1382 ) at com.zaxxer.hikari.pool.HikariMBeanElf.unregisterMBeans ( HikariMBeanElf.java:90 ) at com.zaxxer.hikari.pool.HikariPool.shutdown ( HikariPool.java:256 ) at com.zaxxer.hikari.HikariDataSource.shutdownHelper ( HikariDataSource.java:261 ) at com.zaxxer.hikari.HikariDataSource.shutdown ( HikariDataSource.java:243 ) at com.zaxxer.hikari.HikariDataSource.close ( HikariDataSource.java:228 ) at com.trendmicro.staas.core.shards.ShardManager.dispose ( ShardManager.java:145 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:483 ) `` `
Restore Pool After Shutdown __EoT__ I am running some tests with different databases , but HikariCP is unable to switch from one configuration ( hsqldb , h2 , mysql ) to another . After the data source is closed , there is no ( apparent ) way of restoring the connection pool . And if one tries to retrieve a connection , then it returns : `` ` console java.sql.SQLException : Pool has been shutdown or java.sql.SQLException : Data source is closed `` ` Also , is there any way of determining whether a Data Source is closed ? Something like an ` isClosed ( ) ` method .
Idle connections not getting closed __EoT__ Hi , We have recently started using HikariCP for pooling our database ( replacing DBCP ) connections . We have noticed that HikariCP is not closing some of the idle connections to database making the database close the connection after 8 hours ( which is the mysql wait_timeout ) . Whenever the pool tries to use this connection , we get an error that looks something like this : **\* The last packet successfully received from the server was 3,321,958,752 milliseconds ago . The last packet sent successfully to the server was 3,321,958,756 milliseconds ago . is longer than the server configured value of 'wait_timeout ' . You should consider either expiring and/or testing connection validity before use in your application , increasing the server configured values for client timeouts , or using the Connector/J connection property 'autoReconnect=true ' to avoid this problem . ; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException : The last packet successfully received from the server was 3,321,958,752 milliseconds ago . ***\* From documentation of HikariCP , I see that the default idleTimeout is around 10 minutes and connections will be automatically closed if older than that time . We have taken
Idle connections not getting closed __EoT__ Hi , We have recently started using HikariCP for pooling our database ( replacing DBCP ) connections . We have noticed that HikariCP is not closing some of the idle connections to database making the database close the connection after 8 hours ( which is the mysql wait_timeout ) . Whenever the pool tries to use this connection , we get an error that looks something like this : **\* The last packet successfully received from the server was 3,321,958,752 milliseconds ago . The last packet sent successfully to the server was 3,321,958,756 milliseconds ago . is longer than the server configured value of 'wait_timeout ' . You should consider either expiring and/or testing connection validity before use in your application , increasing the server configured values for client timeouts , or using the Connector/J connection property 'autoReconnect=true ' to avoid this problem . ; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException : The last packet successfully received from the server was 3,321,958,752 milliseconds ago . ***\* From documentation of HikariCP , I see that the default idleTimeout is around 10 minutes and connections will be automatically closed if older than that time . We have taken
Idle connections not getting closed __EoT__ Hi , We have recently started using HikariCP for pooling our database ( replacing DBCP ) connections . We have noticed that HikariCP is not closing some of the idle connections to database making the database close the connection after 8 hours ( which is the mysql wait_timeout ) . Whenever the pool tries to use this connection , we get an error that looks something like this : **\* The last packet successfully received from the server was 3,321,958,752 milliseconds ago . The last packet sent successfully to the server was 3,321,958,756 milliseconds ago . is longer than the server configured value of 'wait_timeout ' . You should consider either expiring and/or testing connection validity before use in your application , increasing the server configured values for client timeouts , or using the Connector/J connection property 'autoReconnect=true ' to avoid this problem . ; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException : The last packet successfully received from the server was 3,321,958,752 milliseconds ago . ***\* From documentation of HikariCP , I see that the default idleTimeout is around 10 minutes and connections will be automatically closed if older than that time . We have taken
Idle connections not getting closed __EoT__ Hi , We have recently started using HikariCP for pooling our database ( replacing DBCP ) connections . We have noticed that HikariCP is not closing some of the idle connections to database making the database close the connection after 8 hours ( which is the mysql wait_timeout ) . Whenever the pool tries to use this connection , we get an error that looks something like this : **\* The last packet successfully received from the server was 3,321,958,752 milliseconds ago . The last packet sent successfully to the server was 3,321,958,756 milliseconds ago . is longer than the server configured value of 'wait_timeout ' . You should consider either expiring and/or testing connection validity before use in your application , increasing the server configured values for client timeouts , or using the Connector/J connection property 'autoReconnect=true ' to avoid this problem . ; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException : The last packet successfully received from the server was 3,321,958,752 milliseconds ago . ***\* From documentation of HikariCP , I see that the default idleTimeout is around 10 minutes and connections will be automatically closed if older than that time . We have taken
`` DriverManager-based '' configuration , force use named driver class . __EoT__ Hi , I 'm using `` DriverManager-based '' configuration ( specifying ` jdbcUrl ` ) . I have mysql server running , mariadb and mysql jdbc drivers in classpath . As you know , ` DriverManager ` returns the first driver from classpath that is able to connect to a given jdbc url , so it can be ` com.mysql.jdbc.Driver ` and ` org.mariadb.jdbc.Driver ` , this depends on the order these classes were loaded . The goal is to make ` com.mysql.jdbc.Driver ` work with mysql server . Setting ` HikariConfig.driverClassName ` property does not guarantee which driver will be used . The workaround that I found is to use ` dataSourceClassName ` based configuration . This looks like a bug or enhancement , for example c3p0 has an option ` forceUseNamedDriverClass ` that together with ` driverClass ` can make pool work with a given driver .
NoClassDefFoundError after upgrading to 2.3.4 __EoT__ This is the same as issue [ https : //github.com/brettwooldridge/HikariCP/issues/172 ] ( 172 ) , except for version 2.3.4 . The problem is fixed if I revert to 2.3.3 .
NPE at com.zaxxer.hikari.pool.BaseHikariPool.initializeConnections ( BaseHikariPool.java:498 ) __EoT__ Environment : Hikari ( for java6 ) 2.3.2 Oracle JDK 8u40 Spring 4.1.5.RELEASE Hibernate 4.3.8.Final Mysql Connector 5.1.34 The problem was encountered while upgrading hikari from 2.0.1 to 2.3.2 If I stay on 2.0.1 everything works fine . **EDIT : Full stack trace** aused by : java.lang.NullPointerException at java.util.Hashtable.put ( Hashtable.java:459 ) at java.util.Properties.setProperty ( Properties.java:166 ) at com.mysql.jdbc.NonRegisteringDriver.parseURL ( NonRegisteringDriver.java:805 ) at com.mysql.jdbc.NonRegisteringDriver.connect ( NonRegisteringDriver.java:316 ) at com.zaxxer.hikari.util.DriverDataSource.getConnection ( DriverDataSource.java:57 ) at com.zaxxer.hikari.util.DriverDataSource.getConnection ( DriverDataSource.java:63 ) at com.zaxxer.hikari.pool.BaseHikariPool.addConnection ( BaseHikariPool.java:396 ) at com.zaxxer.hikari.pool.BaseHikariPool.initializeConnections ( BaseHikariPool.java:498 ) ... 67 more
log level is not respected ? __EoT__ Hi , I was happily using the version 2.2.5 of the HikariCP-java6 artifact with the log level set to INFO . I 'm using Slf4j with log4j . Then , I came upon a new version ( 2.3.3 ) and wanted to switch to it . But the pool clean up stats seem to be logged with the DEBUG level , even though I did not change any logging setting . Logger name I 'm using is `` com.zaxxer.hikari '' .
Fail to suspend 2 pools __EoT__ When trying to suspend 2 pools , the suspend is stuck on the 2nd suspend command . Notes : Both pools access the same database . jetty-web.xml ` < New id= '' mainDS '' class= '' org.eclipse.jetty.plus.jndi.Resource '' > ` ` < Arg > jdbc/mainDataSource < /Arg > ` ` < Arg > ` ` < New class= '' com.zaxxer.hikari.HikariDataSource '' > ` ` < Arg > ` ` < New class= '' com.zaxxer.hikari.HikariConfig '' > ` ` < Set name= '' dataSourceClassName '' > org.postgresql.ds.PGSimpleDataSource < /Set > ` ` < Set name= '' username '' > < /Set > ` ` < Set name= '' password '' > < /Set > ` ` < Set name= '' maximumPoolSize '' > 30 < /Set > ` ` < Set name= '' allowPoolSuspension '' > true < /Set > ` ` < Set name= '' registerMbeans '' > true < /Set > ` ` < Set name= '' poolName '' > MainPool < /Set > ` ` < Call name= '' addDataSourceProperty '' > ` ` < Arg > url < /Arg > ` ` < Arg > jdbc : postgresql : //localhost/db <
Unwrap in HikariConnectionProvider fails to unwrap to DataSource __EoT__ SessionFactoryUtils in Spring 4 calls the unwrap of a ConnectionProvider , expecting the connection provider to unwrap to a DataSource with ` cp.unwrap ( DataSource.class ) ; ` . The unwrap method in HikariConnectionProvider just casts to itself , throwing a ClassCastException when trying to unwrap to a DataSource .
Throws customized fail-fast exception . __EoT__ In our product we display the error messages to user when exception is thrown , but “ fail-fast during initialization ” is meaningless for end users , so we want to remove the fail-fast exception from exception stack when outputting error message . But the exception was general RuntimeException , we can only identify it by checking the exception message , which seems not reliable , so I did this change to throw a special exception and catch it for this purpose .
StackOverflowError in ConnectionProxy __EoT__ Hello I have discovered what might be a cornercase bug . During a loadtest , as one of the databases ran out of disc space we encountered the following exception : ava.lang.StackOverflowError at com.zaxxer.hikari.proxy.ConnectionProxy.checkException ( ConnectionProxy.java:104 ) at com.zaxxer.hikari.proxy.ConnectionProxy.checkException ( ConnectionProxy.java:113 ) at com.zaxxer.hikari.proxy.ConnectionProxy.checkException ( ConnectionProxy.java:113 ) at com.zaxxer.hikari.proxy.ConnectionProxy.checkException ( ConnectionProxy.java:113 ) at com.zaxxer.hikari.proxy.ConnectionProxy.checkException ( ConnectionProxy.java:113 ) ... . Looking at the code it seems you got a bad exception ( with itself as the next exception or with a closed loop of exceptions ? ) . It would be good if the code handled this in a better way though . checkException might for example only allow a recursive call so many times . We were using : Postgres 9.3.5 9.3-1101-jdbc41 postgres driver Hikari CP 2.3.2 Java 1.8.0.31 Ubuntu 14.04 Would gladly contribute with a PR if you want .
Codahale metrics and JNDI config __EoT__ I have two questions regarding metrics in Hikari : - We are using Tomcat 's JNDI to configure a Hikari data source on production . Is there a way to specify a metrics registry there ? If not how would I obtain a handle to HikariDataSource/HikariConfig so I could set the metrics registry programmatically ? - The metrics registry instance we use in our application is actually a subclass of the Yammer Metrics/Codahale Metrics registry class . And in the setMetricRegistry in AbstractHikariConfig there is a check : if ( metricRegistry ! = null & & ! metricRegistry.getClass ( ) .getName ( ) .contains ( `` MetricRegistry '' ) ) { throw new IllegalArgumentException ( `` Class must be an instance of com.codahale.metrics.MetricRegistry '' ) ; } I 'm a bit puzzled as to why we have a check like this that does n't seem very robust .
PoolUtilities.quitelyCloseConnection setNetworkTimeout __EoT__ We are using HikariCP 2.3.1 together with the jt400 driver to connect to an AS400 machine . When a connection is closed the PoolUtilities.quitelyCloseConnection is calling the setNetworkTimeout , but this fails because the connection is already closed . Why is this method called when closing a connection and should this not be removed and instead just only close the connection ? Lots of log is generated because for each connection it is generating : 11:24:53,895 | WARN | AS400Datasource ) | PoolUtilities | 311 - com.zaxxer.HikariCP-java6 - 2.3.1 | Unable to reset network timeout for connection < machine name is removed > in pool AS400Datasource java.sql.SQLNonTransientConnectionException : The connection does not exist . at com.ibm.as400.access.JDError.createSQLExceptionSubClass ( JDError.java:826 ) [ 273 : JT400:7.8.0 ] at com.ibm.as400.access.JDError.throwSQLException ( JDError.java:404 ) [ 273 : JT400:7.8.0 ] at com.ibm.as400.access.AS400JDBCConnection.checkOpen ( AS400JDBCConnection.java:460 ) [ 273 : JT400:7.8.0 ] at com.ibm.as400.access.AS400JDBCConnection.setNetworkTimeout ( AS400JDBCConnection.java:5581 ) [ 273 : JT400:7.8.0 ] at com.zaxxer.hikari.pool.PoolUtilities.setNetworkTimeout ( PoolUtilities.java:218 ) [ 311 : com.zaxxer.HikariCP-java6:2.3.1 ] at com.zaxxer.hikari.pool.PoolUtilities.quietlyCloseConnection ( PoolUtilities.java:53 ) [ 311 : com.zaxxer.HikariCP-java6:2.3.1 ] at com.zaxxer.hikari.pool.HikariPool $ 1.run ( HikariPool.java:128 ) [ 311 : com.zaxxer.HikariCP-java6:2.3.1 ] at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1145 ) [ :1.7.0_67 ] at java.util.concurrent.ThreadPoolExecutor $
LeakTask Exception Message __EoT__ Using the LeakTask to detect possible connection leaks works perfectly . However , a lot of people think the logged stacktrace was produced by a NullPointerException . The reason for this is , that the LeakTask creates a new Exception without a message . Therefore the logged exception will look something like this : `` ` 2015-01-15 16:07:41,953 Connection leak detection triggered , stack trace follows java.lang.Exception : null at com.zaxxer.hikari.hibernate.HikariConnectionProvider.getConnection ( HikariConnectionProvider.java:99 ) ~ [ HikariCP-java6-2.0.1.jar : na ] ... `` ` This is rather confusing especially for people who do not know a lot about the connection pool . It would be great if this could be changed , so that the message of the Exception is n't ` null ` anymore .
Failure listener __EoT__ We have been using BoneCP for a while and are looking to switch off it to Hikari . The last feature that we need to migrate over is the ability to get notifications from the CP when it fails to connect to the database . We need this because we have an API that provides health check information about various services in our application . This includes the connection to the database . In BoneCP , we implemented their ConnectionHook interface and captured the onAcquireFail messages . We would like something similar in HikariCP to keep this information in our status check API . I wanted to open this issue ( feature request ) to start the discussion . I 'll also look at implementing this myself and sending in a pull request ( today if I have time ) .
Feature : Allow to set MaxLifetime lower than 120000ms __EoT__ I 'm trying to set the max life time setting in the HikariConfig object and it will not let me set it to 30 seconds like this ` .setMaxLifetime ( 30*1000 ) ` . But i get this warning then : `` ` WARN com.zaxxer.hikari.HikariConfig - maxLifetime is less than 120000ms , using default 1800000ms . `` ` I know that you recommend not setting is that low as I am trying to . But Unfortunately due to circumstances that I can not change , every TCP connection that is open longer than 50 secods will be terminated in our production environment ( supposedly it 's a `` feature '' set by the admins ) .
Improve error message for bad property name __EoT__ I 'm sorry to be nitpicking here , but this is one of the first error messages you can encounter when starting with HikariCP : ERROR c.z.hikari.util.PropertyBeanSetter - Property initializeFailFast < b > is does < /b > not exist on target < b > class class < /b > com.zaxxer.hikari.HikariConfig The other error message in [ PropertyBeanSetter ] ( https : //github.com/brettwooldridge/HikariCP/blob/dev/hikaricp-common/src/main/java/com/zaxxer/hikari/util/PropertyBeanSetter.java ) is also likely to print `` class '' twice .
thread leak when database down __EoT__ When database is not alive , HikariDataSource constructor throws RuntimeException because HikariPool constructor throws RuntimeException . `` ` java public HikariPool ( HikariConfig configuration , String username , String password ) { ... addConnectionExecutor = createThreadPoolExecutor ( configuration.getMaximumPoolSize ( ) , `` HikariCP connection filler ( pool `` + configuration.getPoolName ( ) + `` ) '' , configuration.getThreadFactory ( ) , new ThreadPoolExecutor.DiscardPolicy ( ) ) ; closeConnectionExecutor = createThreadPoolExecutor ( 4 , `` HikariCP connection closer ( pool `` + configuration.getPoolName ( ) + `` ) '' , configuration.getThreadFactory ( ) , new ThreadPoolExecutor.CallerRunsPolicy ( ) ) ; long delayPeriod = Long.getLong ( `` com.zaxxer.hikari.housekeeping.periodMs '' , TimeUnit.SECONDS.toMillis ( 30L ) ) ; houseKeepingExecutorService = new ScheduledThreadPoolExecutor ( 1 , configuration.getThreadFactory ( ) ! = null ? configuration.getThreadFactory ( ) : new DefaultThreadFactory ( `` Hikari Housekeeping Timer ( pool `` + configuration.getPoolName ( ) + `` ) '' , true ) ) ; houseKeepingExecutorService.setRemoveOnCancelPolicy ( true ) ; houseKeepingExecutorService.scheduleAtFixedRate ( new HouseKeeper ( ) , delayPeriod , delayPeriod , TimeUnit.MILLISECONDS ) ; fillPool ( ) ; // this throws RuntimeException } `` ` when fillPool ( ) failed , ThreadPoolExecutors continue to
NullPointerException in utility thread , only appearing on console __EoT__ I am creating this for the one from the google group https : //groups.google.com/forum/ # ! topic/hikari-cp/RgS7J0Xs05U quote : I 'm getting this funny exceptions . It only appears in my console , not on my logs where HikariCP messages appear . It seems to appear every few minutes , maybe after inactivity . end quote The stacktraces seem to appear without anything happening in particular , while the various dev/testing web apps where HikariCP is used still function as normal so far but the connection may possible fail in the middle of a long series of database operations when this happens . I am not really sure . Exception in thread `` HikariCP utility thread ( pool HikariPool-0 ) '' java.lang.NullPointerException at com.mysql.jdbc.MysqlIO.setSocketTimeout ( MysqlIO.java:4890 ) at com.mysql.jdbc.ConnectionImpl $ 12.run ( ConnectionImpl.java:5540 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) Exception in thread `` HikariCP utility thread ( pool HikariPool-0 ) '' java.lang.NullPointerException at com.mysql.jdbc.MysqlIO.setSocketTimeout ( MysqlIO.java:4890 ) at com.mysql.jdbc.ConnectionImpl $ 12.run ( ConnectionImpl.java:5540 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run
NullPointerException in utility thread , only appearing on console __EoT__ I am creating this for the one from the google group https : //groups.google.com/forum/ # ! topic/hikari-cp/RgS7J0Xs05U quote : I 'm getting this funny exceptions . It only appears in my console , not on my logs where HikariCP messages appear . It seems to appear every few minutes , maybe after inactivity . end quote The stacktraces seem to appear without anything happening in particular , while the various dev/testing web apps where HikariCP is used still function as normal so far but the connection may possible fail in the middle of a long series of database operations when this happens . I am not really sure . Exception in thread `` HikariCP utility thread ( pool HikariPool-0 ) '' java.lang.NullPointerException at com.mysql.jdbc.MysqlIO.setSocketTimeout ( MysqlIO.java:4890 ) at com.mysql.jdbc.ConnectionImpl $ 12.run ( ConnectionImpl.java:5540 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) Exception in thread `` HikariCP utility thread ( pool HikariPool-0 ) '' java.lang.NullPointerException at com.mysql.jdbc.MysqlIO.setSocketTimeout ( MysqlIO.java:4890 ) at com.mysql.jdbc.ConnectionImpl $ 12.run ( ConnectionImpl.java:5540 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run
update to Javassist-3.19.0-GA __EoT__ VerifyError occurs when update to Javassist-3.19.0-GA as follows . Java8 's default methods should be ignored to avoid this issue . `` ` text Caused by : java.lang.VerifyError : Illegal type at constant pool entry 417 in class com.zaxxer.hikari.proxy.PreparedStatementJavassistProxy Exception Details : Location : com/zaxxer/hikari/proxy/PreparedStatementJavassistProxy.setObject ( ILjava/lang/Object ; Ljava/sql/SQLType ; ) V @ 4 : invokespecial Reason : Constant pool index 417 is invalid Bytecode : 0x0000000 : 2a1b 2c2d b701 a1a7 000c 3a04 2a19 04b6 0x0000010 : 001b bfb1 Exception Handler Table : bci [ 0 , 7 ] = > handler : 10 Stackmap Table : full_frame ( @ 10 , { Object [ # 2 ] , Integer , Object [ # 285 ] , Object [ # 412 ] } , { Object [ # 17 ] } ) same_frame ( @ 19 ) at com.zaxxer.hikari.proxy.ProxyFactory.getProxyPreparedStatement ( ProxyFactory.java ) ~ [ HikariCP-2.2.5.jar : na ] at com.zaxxer.hikari.proxy.ConnectionProxy.prepareStatement ( ConnectionProxy.java:280 ) ~ [ HikariCP-2.2.5.jar : na ] at com.zaxxer.hikari.proxy.ConnectionJavassistProxy.prepareStatement ( ConnectionJavassistProxy.java ) ~ [ HikariCP-2.2.5.jar : na ] at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) ~ [ na:1.8.0_25 ] at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) ~ [ na:1.8.0_25 ] at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) ~
Race condition in addBagItem lambda __EoT__ Hello Brett , In short , it is possible that the pool can end up in a situation where it 's : -well below maxPoolSize -small minIdle ( say 1 ) -there are ( say 10 ) resource-starved threads ( because there are no free connections ) -those 10 threads block ( in AQS ) -only 1 new connection gets added to the pool ** -the 10 resource-starved threads eventually are unparked from AQS -only one can successfully obtain a Connection ( since only one was added ) -repeat . Now this takes a bit of unlucky timing ( definition of a race condition ) , but is certainly possible ; it seems unlikely that this is intentional ? The problem is the : getIdleConnections ( ) < minIdle condition in the lambda == > this can result in `` addConnection '' tasks essentially being `` swallowed '' , with resource-starved threads unnecessarily blocking/waiting when the pool is still well below saturation ( i.e . maxSize not reached ) . In the wild , I suspect this would reveal itself when the pool goes suddenly from a quiescent state to a burst of demand
Very slow calling getConnection __EoT__ This is a shot in the dark . We recently ( 2 weeks ago ) switched from the default pooling provider in Play 2.3 ( BoneCP ) to HikariCP . Earlier today we had a huge spike in the application , and analysis revealed that getConnection ( ) of HikariCP was taking ~7 seconds per invocation . ! [ screen shot 2014-12-09 at 3 05 09 pm ] ( https : //cloud.githubusercontent.com/assets/8377844/5367018/a71efbaa-7fb5-11e4-9036-78e7b8c89434.png ) Any ideas on what might cause this ? Analysis of the database shows the database running normal up to this point , and then once the spike occurred , the load average ( and queries ) went DOWN during this spike in behavior as no connections were being made , and thus no operations were being done . [ Due to network configuration with the firewall , we have a very short TTL for connections of 2 mins ]
Cleanup of broken connections not working ( 2.3.0-rc3 ) __EoT__ Version 2.3.0-rc3 ( and some previous snapshots ) of HikariCP does not cleanup broken connections , although they seem to be recognized as broken . The broken connections stay in the pool . If many connections are broken , the pool will be filled till maximum pool size is reached . After the max size is reached , no new connections will be created by calling getConnection ( ) . How to test : Use the following configuration : `` ` HikariConfig dsConfig = new HikariConfig ( ) ; dsConfig.setDataSourceClassName ( `` org.postgresql.ds.PGSimpleDataSource '' ) ; dsConfig.addDataSourceProperty ( `` socketTimeout '' , 1 ) ; dsConfig.setMaximumPoolSize ( 5 ) ; dsConfig.setMinimumIdle ( 0 ) ; dsConfig.setIdleTimeout ( 1000 ) ; dsConfig.setConnectionTimeout ( 1000 ) ; `` ` Every query longer than one second will be terminated by the postgres jdbc driver with an exception . - 5 times : call getConnection and execute a query which will take longer than one second . - call getConnection ( ) Expected behavior should be : The last getConnection ( ) call returns a valid connection Here is what happens with 2.3.0-rc3 :
When the ResultSet is retrieved by java.sql.Statement.getResultSet ( ) , Statement Proxy do n't create proxied ResultSet __EoT__ When the ResultSet is retrieved by java.sql.Statement.getResultSet ( ) , Statement Proxy do n't create proxied Object . eg : when i execute sql query using java.sql.Statement # execute ( java.lang.String ) , and when it return true , i can get the ResultSet by call java.sql.Statement # getResultSet ( ) . however , the Hikari 's StatementProxy did't override getResultSet ( ) method to create proxied ResultSet .
BagEntry.toString ( ) and ConcurrentBag.State enums __EoT__ Cosmetic changes to help debugging .
Tomcat 8 failing to start with global jndi data source __EoT__ running tomcat 8.0.12 ( 64b windows with arp libs ) , HikariCP 2.2.5 i have a jndi configuration in $ CATALINA_HOME/conf/context.xml `` ` < Resource auth= '' Container '' type= '' javax.sql.DataSource '' name= '' jdbc/oeDatabase '' factory= '' com.zaxxer.hikari.HikariJNDIFactory '' dataSourceClassName= '' com.mysql.jdbc.jdbc2.optional.MysqlDataSource '' driverClass= '' com.mysql.jdbc.Driver '' driverClassName= '' com.mysql.jdbc.Driver '' idleMaxAgeInMinutes= '' 15 '' idleConnectionTestPeriodInMinutes= '' 10 '' partitionCount= '' 3 '' acquireIncrement= '' 5 '' maxConnectionsPerPartition= '' 10 '' minConnectionsPerPartition= '' 5 '' statementsCacheSize= '' 50 '' dataSource.url= '' jdbc : mysql : //localhost:3306/outboundengine '' dataSource.user= '' root '' dataSource.password= '' root '' / > `` ` I have no custom webapps installed , just ROOT from the install . I have added the following jars to $ CATALINA_HOME/lib HikariCP-2.2.5.jar javassist-3.18.1-GA.jar jul-to-slf4j-1.7.7.jar mysql-connector-java-5.1.33.jar slf4j-api-1.7.7.jar slf4j-jdk14-1.7.7.jar I get the following errors trying to start tomcat Nov 17 , 2014 4:33:02 AM org.apache.catalina.startup.HostConfig deployDirectory INFO : Deploying web application directory C : \java\tomcat\webapps\ROOT Nov 17 , 2014 4:33:03 AM com.zaxxer.hikari.metrics.CodaHaleShim loadOrShimCodahale SEVERE : Can not generate CodaHale metrics shim javassist.CannotCompileException : by java.lang.LinkageError : loader ( instance of org/apache/catalina/loader/WebappClassLoader ) : attempted duplicate class definition for name
com.zaxxer.hikari.HikariDataSource.unwrap ( Class < T > ) does not return this __EoT__ The aforementioned method does not return ` this ` if this is an instance of the argument class . I would need to unwrap the HikariDataSource instance from a wrapper but I ca n't easily do it right now .
PoolUtilities static methods maintain state . Causing incorrect results for PoolUtilities : :isJdbc40Compliant __EoT__ I have two HikariCP connection pools in my application . One pool is JDBC4 compliant . The other is not . PoolUtilities is used to test for jdbc40 and jdbc41 compliance . However , it seems to try to cache the results of this test by using private static fields on the PoolUtilities class . This causes one of my two pools to have incorrect results reported by the various test methods ( i.e . PoolUtilities : :isJdbc40Compliant ) .
PoolUtilities static methods maintain state . Causing incorrect results for PoolUtilities : :isJdbc40Compliant __EoT__ I have two HikariCP connection pools in my application . One pool is JDBC4 compliant . The other is not . PoolUtilities is used to test for jdbc40 and jdbc41 compliance . However , it seems to try to cache the results of this test by using private static fields on the PoolUtilities class . This causes one of my two pools to have incorrect results reported by the various test methods ( i.e . PoolUtilities : :isJdbc40Compliant ) .
Unclosed MySQL connections when not using connectionTestQuery __EoT__ We are testing a high-load database tool that requires the execution of a big amount of queries on a MySQL server . For this , we are using HikariCP ( ` HikariCP-java6:2.2.5 ` ) and the MySQL JDBC Driver ( ` mysql-connector-java:5.1.34 ` ) . We use Hikari 's default configuration : we only set the driver class ( ` com.mysql.jdbc.Driver ` ) , JDBC URL , user and password . And sometimes the ` connectionTestQuery ` , which seems to make a big difference . It was our understanding that the newest versions of the MySQL driver would implement the ` isValid ( ) ` method and therefore not need a ` connectionTestQuery ` property to be set . However , when we run one of our tests -- which creates and shutdowns 1,002 different instances of the Hikari pool in sequence -- with such setup , we observe a growing number of unclosed connections ( orange ) : ! [ mysql_novalidationquery ] ( https : //cloud.githubusercontent.com/assets/1492299/5181387/2d9af060-7496-11e4-97a6-222aa448e4fc.png ) However , if we run exactly the same test setting having set the ` connectionTestQuery ` property like : `` ` java properties.setProperty
Unclosed MySQL connections when not using connectionTestQuery __EoT__ We are testing a high-load database tool that requires the execution of a big amount of queries on a MySQL server . For this , we are using HikariCP ( ` HikariCP-java6:2.2.5 ` ) and the MySQL JDBC Driver ( ` mysql-connector-java:5.1.34 ` ) . We use Hikari 's default configuration : we only set the driver class ( ` com.mysql.jdbc.Driver ` ) , JDBC URL , user and password . And sometimes the ` connectionTestQuery ` , which seems to make a big difference . It was our understanding that the newest versions of the MySQL driver would implement the ` isValid ( ) ` method and therefore not need a ` connectionTestQuery ` property to be set . However , when we run one of our tests -- which creates and shutdowns 1,002 different instances of the Hikari pool in sequence -- with such setup , we observe a growing number of unclosed connections ( orange ) : ! [ mysql_novalidationquery ] ( https : //cloud.githubusercontent.com/assets/1492299/5181387/2d9af060-7496-11e4-97a6-222aa448e4fc.png ) However , if we run exactly the same test setting having set the ` connectionTestQuery ` property like : `` ` java properties.setProperty
Unclosed MySQL connections when not using connectionTestQuery __EoT__ We are testing a high-load database tool that requires the execution of a big amount of queries on a MySQL server . For this , we are using HikariCP ( ` HikariCP-java6:2.2.5 ` ) and the MySQL JDBC Driver ( ` mysql-connector-java:5.1.34 ` ) . We use Hikari 's default configuration : we only set the driver class ( ` com.mysql.jdbc.Driver ` ) , JDBC URL , user and password . And sometimes the ` connectionTestQuery ` , which seems to make a big difference . It was our understanding that the newest versions of the MySQL driver would implement the ` isValid ( ) ` method and therefore not need a ` connectionTestQuery ` property to be set . However , when we run one of our tests -- which creates and shutdowns 1,002 different instances of the Hikari pool in sequence -- with such setup , we observe a growing number of unclosed connections ( orange ) : ! [ mysql_novalidationquery ] ( https : //cloud.githubusercontent.com/assets/1492299/5181387/2d9af060-7496-11e4-97a6-222aa448e4fc.png ) However , if we run exactly the same test setting having set the ` connectionTestQuery ` property like : `` ` java properties.setProperty
Metrics not unregistered when pool is shut down __EoT__ I 'm getting java.lang.IllegalArgumentException : A metric named foobar.pool.TotalConnections already exists at com.codahale.metrics.MetricRegistry.register ( MetricRegistry.java:91 ) at com.zaxxer.hikari.metrics.CodaHaleMetricsTracker. < init > ( CodaHaleMetricsTracker.java:40 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:145 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:114 ) at com.zaxxer.hikari.HikariDataSource. < init > ( HikariDataSource.java:78 ) when I try to restart a pool after shutdown . MetricsRegistry is reused so the previous registrations still exist in it . Would it be possible to add a Closeable.close of similar method to CodaHaleMetricsTracker and call it at pool shutdown ( in same way as it is done for JMX ) .
Connection marked as broken because of SQLSTATE ( 08003 ) __EoT__ PostgreSQL 9.3 , Hikari 2.2.5 I 'm getting random exceptions like this : `` ` 17:22:24.117 [ qtp1372269468-674 ] WARN com.zaxxer.hikari.proxy.ConnectionProxy.checkException ( ) - Connection org.postgresql.jdbc4.Jdbc4Connection @ 482c822f ( HikariPool-39 ) marked as broken because of SQLSTATE ( 08003 ) , ErrorCode ( 0 ) . org.postgresql.util.PSQLException : This connection has been closed . at org.postgresql.jdbc2.AbstractJdbc2Connection.checkClosed ( AbstractJdbc2Connection.java:843 ) at org.postgresql.jdbc2.AbstractJdbc2Connection.setAutoCommit ( AbstractJdbc2Connection.java:785 ) at com.zaxxer.hikari.proxy.ConnectionProxy.resetConnectionState ( ConnectionProxy.java:164 ) at com.zaxxer.hikari.proxy.ConnectionProxy.close ( ConnectionProxy.java:207 ) at com.realestate.backend.scope.DefaultRequestScope $ ConnectionFactory.disposeValue ( DefaultRequestScope.java:200 ) at com.realestate.backend.scope.DefaultRequestScope $ ConnectionFactory.disposeValue ( DefaultRequestScope.java:147 ) at org.bitbucket.cowwoc.pouch.LazyFactory.close ( LazyFactory.java:59 ) at com.realestate.backend.scope.DefaultRequestScope.close ( DefaultRequestScope.java:143 ) at com.realestate.backend.jersey.PouchBinder $ RequestFactory.dispose ( PouchBinder.java:50 ) at com.realestate.backend.jersey.PouchBinder $ RequestFactory.dispose ( PouchBinder.java:23 ) at org.jvnet.hk2.internal.FactoryCreator.dispose ( FactoryCreator.java:114 ) at org.jvnet.hk2.internal.SystemDescriptor.dispose ( SystemDescriptor.java:516 ) at org.glassfish.jersey.process.internal.RequestScope $ Instance.remove ( RequestScope.java:512 ) at org.glassfish.jersey.process.internal.RequestScope $ Instance.release ( RequestScope.java:529 ) at org.glassfish.jersey.process.internal.RequestScope.runInScope ( RequestScope.java:299 ) at org.glassfish.jersey.server.ServerRuntime.process ( ServerRuntime.java:254 ) at org.glassfish.jersey.server.ApplicationHandler.handle ( ApplicationHandler.java:1030 ) at org.glassfish.jersey.servlet.WebComponent.service ( WebComponent.java:373 ) at org.glassfish.jersey.servlet.ServletContainer.service ( ServletContainer.java:381 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:534 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:482 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:419 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1650 ) at org.eclipse.jetty.servlet.ServletHandler.doHandle ( ServletHandler.java:583 ) at
LeakTask reports wrong stack-trace __EoT__ https : //github.com/brettwooldridge/HikariCP/commit/0b8779ed26de80bb6216f3b228550b1cbc22c48d # diff-cb86ac49769bc6d4363230a768082bf7R192 refactored ` LeakTask ` . The new code mistakenly shares the same ` LeakTask ` instance across all connections . This means that the following bug occurs : 1 . Thread 1 invokes ` getConnection ( ) ` . ` LeakTask.start ( ) ` sets ` exception ` and adds itself to the scheduler . 2 . Thread 2 invokes ` getConnection ( ) ` . ` LeakTask.start ( ) ` is run , overriding ` exception ` from Thread 1 , and adds itself to the scheduler . 3 . Thread 1 's leak detector fires , ` LeakTask.run ( ) ` runs , but it reports the stack-trace set by Thread 2 because it overwrote ` exception ` .
Connection marked as broken because of SQLSTATE ( 08003 ) __EoT__ PostgreSQL 9.3 , Hikari 2.2.5 I 'm getting random exceptions like this : `` ` 17:22:24.117 [ qtp1372269468-674 ] WARN com.zaxxer.hikari.proxy.ConnectionProxy.checkException ( ) - Connection org.postgresql.jdbc4.Jdbc4Connection @ 482c822f ( HikariPool-39 ) marked as broken because of SQLSTATE ( 08003 ) , ErrorCode ( 0 ) . org.postgresql.util.PSQLException : This connection has been closed . at org.postgresql.jdbc2.AbstractJdbc2Connection.checkClosed ( AbstractJdbc2Connection.java:843 ) at org.postgresql.jdbc2.AbstractJdbc2Connection.setAutoCommit ( AbstractJdbc2Connection.java:785 ) at com.zaxxer.hikari.proxy.ConnectionProxy.resetConnectionState ( ConnectionProxy.java:164 ) at com.zaxxer.hikari.proxy.ConnectionProxy.close ( ConnectionProxy.java:207 ) at com.realestate.backend.scope.DefaultRequestScope $ ConnectionFactory.disposeValue ( DefaultRequestScope.java:200 ) at com.realestate.backend.scope.DefaultRequestScope $ ConnectionFactory.disposeValue ( DefaultRequestScope.java:147 ) at org.bitbucket.cowwoc.pouch.LazyFactory.close ( LazyFactory.java:59 ) at com.realestate.backend.scope.DefaultRequestScope.close ( DefaultRequestScope.java:143 ) at com.realestate.backend.jersey.PouchBinder $ RequestFactory.dispose ( PouchBinder.java:50 ) at com.realestate.backend.jersey.PouchBinder $ RequestFactory.dispose ( PouchBinder.java:23 ) at org.jvnet.hk2.internal.FactoryCreator.dispose ( FactoryCreator.java:114 ) at org.jvnet.hk2.internal.SystemDescriptor.dispose ( SystemDescriptor.java:516 ) at org.glassfish.jersey.process.internal.RequestScope $ Instance.remove ( RequestScope.java:512 ) at org.glassfish.jersey.process.internal.RequestScope $ Instance.release ( RequestScope.java:529 ) at org.glassfish.jersey.process.internal.RequestScope.runInScope ( RequestScope.java:299 ) at org.glassfish.jersey.server.ServerRuntime.process ( ServerRuntime.java:254 ) at org.glassfish.jersey.server.ApplicationHandler.handle ( ApplicationHandler.java:1030 ) at org.glassfish.jersey.servlet.WebComponent.service ( WebComponent.java:373 ) at org.glassfish.jersey.servlet.ServletContainer.service ( ServletContainer.java:381 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:534 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:482 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:419 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1650 ) at org.eclipse.jetty.servlet.ServletHandler.doHandle ( ServletHandler.java:583 ) at
Connection marked as broken because of SQLSTATE ( 08003 ) __EoT__ PostgreSQL 9.3 , Hikari 2.2.5 I 'm getting random exceptions like this : `` ` 17:22:24.117 [ qtp1372269468-674 ] WARN com.zaxxer.hikari.proxy.ConnectionProxy.checkException ( ) - Connection org.postgresql.jdbc4.Jdbc4Connection @ 482c822f ( HikariPool-39 ) marked as broken because of SQLSTATE ( 08003 ) , ErrorCode ( 0 ) . org.postgresql.util.PSQLException : This connection has been closed . at org.postgresql.jdbc2.AbstractJdbc2Connection.checkClosed ( AbstractJdbc2Connection.java:843 ) at org.postgresql.jdbc2.AbstractJdbc2Connection.setAutoCommit ( AbstractJdbc2Connection.java:785 ) at com.zaxxer.hikari.proxy.ConnectionProxy.resetConnectionState ( ConnectionProxy.java:164 ) at com.zaxxer.hikari.proxy.ConnectionProxy.close ( ConnectionProxy.java:207 ) at com.realestate.backend.scope.DefaultRequestScope $ ConnectionFactory.disposeValue ( DefaultRequestScope.java:200 ) at com.realestate.backend.scope.DefaultRequestScope $ ConnectionFactory.disposeValue ( DefaultRequestScope.java:147 ) at org.bitbucket.cowwoc.pouch.LazyFactory.close ( LazyFactory.java:59 ) at com.realestate.backend.scope.DefaultRequestScope.close ( DefaultRequestScope.java:143 ) at com.realestate.backend.jersey.PouchBinder $ RequestFactory.dispose ( PouchBinder.java:50 ) at com.realestate.backend.jersey.PouchBinder $ RequestFactory.dispose ( PouchBinder.java:23 ) at org.jvnet.hk2.internal.FactoryCreator.dispose ( FactoryCreator.java:114 ) at org.jvnet.hk2.internal.SystemDescriptor.dispose ( SystemDescriptor.java:516 ) at org.glassfish.jersey.process.internal.RequestScope $ Instance.remove ( RequestScope.java:512 ) at org.glassfish.jersey.process.internal.RequestScope $ Instance.release ( RequestScope.java:529 ) at org.glassfish.jersey.process.internal.RequestScope.runInScope ( RequestScope.java:299 ) at org.glassfish.jersey.server.ServerRuntime.process ( ServerRuntime.java:254 ) at org.glassfish.jersey.server.ApplicationHandler.handle ( ApplicationHandler.java:1030 ) at org.glassfish.jersey.servlet.WebComponent.service ( WebComponent.java:373 ) at org.glassfish.jersey.servlet.ServletContainer.service ( ServletContainer.java:381 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:534 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:482 ) at org.glassfish.jersey.servlet.ServletContainer.doFilter ( ServletContainer.java:419 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1650 ) at org.eclipse.jetty.servlet.ServletHandler.doHandle ( ServletHandler.java:583 ) at
PoolUtilities.isJdbc40Compliant ( ) is not thread-safe __EoT__ Here are three separate race conditions : 1 . There is a race conditions between the time ` jdbc40checked ` is read and written to , allowing multiple threads to enter the if-block . 2 . If multiple threads enter the if-block , they end up overwriting each other 's return value . There is a chance that a thread will return ` false ` even though its own invocation of ` Connection.isValid ( ) ` actually succeeded ( because a second thread set this value to ` false ` ) . 3 . Thread 1 enters the if-block but because it can invoke ` isValid ( ) ` Thread 2 sees ` jdbc40checked = true ` and returns ` IS_JDBC40 ` . Thead 1 never got around to setting ` IS_JDBC40 ` so Thread 2 returns the default value , which is ` false ` . Hikari ends up logging an error message ` JDBC4 Connection.isValid ( ) method not supported , connection test query must be configured ` even though this is not true . The simplest way to fix this is to use a synchronized block . Longer-term you probably
Can not override Hikari setting transaction isolation level __EoT__ Hi , I 'm new to HikariCP , so maybe I am missing something , but I can not find a way to stop Hikari from attempting to set the transaction isolation level on the driver I am using . I want to use the default transaction isolation level of the driver . The issue is that in com.zaxxer.hikari.util.PoolUtilities # setupConnection , the isolation level is always set : < code > public static void setupConnection ( ... ) { connection.setAutoCommit ( isAutoCommit ) ; connection.setTransactionIsolation ( transactionIsolation ) ; connection.setReadOnly ( isReadOnly ) ; < /code > The caller ( com.zaxxer.hikari.pool.HikariPool # addConnection ) does have code that seems to be designed to handle just using the default : < code > transactionIsolation = ( transactionIsolation < 0 ? connection.getTransactionIsolation ( ) : transactionIsolation ) ; < /code > However , as far as I can tell , transactionIsolation defaults to 0 , so this code is never triggered . < code > public int transactionIsolation ; < /code > Should this variable be declared to default to -1 ? Thanks , Andy .
java.lang.AbstractMethodError setNetworkTimeout , MS SQL Server __EoT__ I 'm getting the following error when launching an app connecting to MS SQL Server database . I have tried with HikariCP versions 2.2.4 and 2.2.5-rc1 , and both JTDS and MS sqljdbc4-driver . The problem goes away if I set the connectionTimeout property for datasource to 0 . Also downgrading to HikariCP version 2.1.0 works . Using : java7 ( so using HikariCP-java6 ) sqljdbc4 version : 4.0.2206.100 ( com.microsoft.sqlserver.jdbc.SQLServerDataSource ) jtds version : 1.3.1 ( does not support jdbc4 ) ( net.sourceforge.jtds.jdbcx.JtdsDataSource ) Caused by : java.lang.AbstractMethodError at com.zaxxer.hikari.util.PoolUtilities.setNetworkTimeout ( PoolUtilities.java:299 ) at com.zaxxer.hikari.pool.HikariPool.addConnection ( HikariPool.java:425 ) at com.zaxxer.hikari.pool.HikariPool.fillPool ( HikariPool.java:504 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:163 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:114 ) at com.zaxxer.hikari.HikariDataSource. < init > ( HikariDataSource.java:78 )
Wrong Properties iteration in PropertyBeanSetter __EoT__ In ` com.zaxxer.hikari.util.PropertyBeanSetter.setTargetFromProperties ( Object , Properties ) ` you 're using ` java.util.Hashtable.entrySet ( ) ` to iterate over properties , but you should rather use ` java.util.Properties.propertyNames ( ) ` or ` java.util.Properties.stringPropertyNames ( ) ` , otherwise you will lose default properties specified at construction time with ` java.util.Properties.Properties ( Properties ) ` . This also applies to ` com.zaxxer.hikari.util.PropertyBeanSetter.copyProperties ( Properties ) ` , which uses ` java.util.Hashtable.keySet ( ) ` .
Close Connections similar to JDBCPoo.purgeOnReturn ( ) and C3P0.softResetAllUsers ( ) __EoT__ Currently closeIdleConnections ( ) in HikariCP only closes the idle connections at the time the method is invoked . It would be good to have the possibility to : - close the idle connections - close the active connections once they are idle again . That way we can achieve graceful failover on synchronous based replication systems . ( http : //www.slideshare.net/Grypyrg/java-my-sql-connector-connection-pool-features-optimization )
Avoid executing ROLLBACK ( ) when no transaction is active __EoT__ It would be good if HikariCP would not do a rollback ( ) when there 's no active transaction . In my test , the last executed statement was 'commit ' . in MySQL , doing SET also does not start a transaction ( even BEGIN does n't ) . Example : `` ` SET autocommit=0 ; select * from employees where emp_no = 20000 ; commit ; rollback ; < < < < hikariCP executes this , but really should not . `` `
Issue with MariaDB Java Client 1.1.7 __EoT__ Hi there , Just noticed that HikariCP ( Java6 ) stopped working with 2.2.0 & 2.2.3 ( works with 2.1.0 ) with the latest MariaDB Java client ( 1.1.7 ) . I 've included a snippet of the stack trace below . Regards , Ernst `` ` Caused by : java.lang.RuntimeException : Fail-fast during pool initialization at com.zaxxer.hikari.pool.HikariPool.fillPool ( HikariPool.java:505 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:163 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:114 ) at com.zaxxer.hikari.HikariDataSource. < init > ( HikariDataSource.java:78 ) ... 46 more Caused by : java.sql.SQLFeatureNotSupportedException : Not yet supported at org.mariadb.jdbc.internal.SQLExceptionMapper.getFeatureNotSupportedException ( SQLExceptionMapper.java:165 ) at org.mariadb.jdbc.MySQLConnection.setNetworkTimeout ( MySQLConnection.java:1319 ) at com.zaxxer.hikari.util.PoolUtilities.setNetworkTimeout ( PoolUtilities.java:299 ) at com.zaxxer.hikari.pool.HikariPool.addConnection ( HikariPool.java:425 ) at com.zaxxer.hikari.pool.HikariPool.fillPool ( HikariPool.java:504 ) ... 60 more `` `
NetworkTimeout is always set to 250ms when a Connection is added to HikariPool __EoT__ In HikariCP 2.2.2 the ` com.zaxxer.hikari.pool.HikariPool.addConnection ( ) ` method always sets the network timeout on my connection to 250ms On line 421 ` setNetworkTimeout ` is set on the connection using ` timeoutMs ` returning the original timeout on the Connection . Then on line 435 ` setNetworkTimeout ` is called again , this time using the previously returned value ( in this case 0 ) ` connection.setNetworkTimeout ( executor , Math.max ( 250 , ( int ) timeoutMs ) ) ; ` will then always result in a timeout of 250ms . With such a small timeout I then receive exceptions stating `` ` Communications link failure . The last packet successfully received from the server was 250 milliseconds ago . The last packet sent successfully to the server was 250 milliseconds ago . `` `
Executor can not be null , Mysql exception __EoT__ I have got a verified exception from mysql driver after upgrading from 2.1 to 2.2 ( everything is fine with both Java 8 and Java 6 versions of HikariCP 2.1 ) . The mysql JDBC driver is the latest ( 5.1.34 ) . My spring hibernate config and the exception stack are as follows : applicationContext.xml : `` ` xml < bean id= '' hikariConfig '' class= '' com.zaxxer.hikari.HikariConfig '' > < property name= '' dataSourceProperties '' > < props > < prop key= '' serverName '' > 192.168.1.5 < /prop > < prop key= '' databaseName '' > test < /prop > < prop key= '' cachePrepStmts '' > true < /prop > < prop key= '' prepStmtCacheSize '' > 1000 < /prop > < prop key= '' prepStmtCacheSqlLimit '' > 4096 < /prop > < prop key= '' useServerPrepStmts '' > true < /prop > < prop key= '' cacheResultSetMetadata '' > true < /prop > < prop key= '' allowMultiQueries '' > true < /prop > < prop key= '' metadataCacheSize '' > 1000 < /prop > < prop key= '' useLocalSessionState '' > true < /prop >
Running HikariCP-java6 inside an OSGi environment with SLF4J version 1.6 __EoT__ I 've tried to add the bundle to our OSGi environment and then I realized that the manifest has the value ` org.slf4j ; version= '' [ 1.7,2 ) '' ` and not ` org.slf4j , ` as I was expecting . As we do n't have that version , and we can add it neither : ( , the bundle could n't start . So I had to change the manifest to ` org.slf4j ; version= '' [ 1.6,2 ) '' , ` and then it started to work without problems . This is the original ` < Import-Package > ` section : `` ` Import-Package : javassist ; version= '' [ 3.18,4 ) '' , javax.management , javax.nami ng , javax.naming.spi , javax.sql , com.codahale.metrics ; resolution : =optional ; version= '' [ 3.0,4 ) '' , org.slf4j ; version= '' [ 1.7,2 ) '' , org.hibernate ; resolution : =optional ; version= '' [ 4.3,5 ) '' , org.hibernate.cfg ; resolution : =optional ; ver sion= '' [ 4.3,5 ) '' , org.hibernate.engine.jdbc.connections.spi ; resolution : =op tional ; version= '' [ 4.3,5 ) '' ,
Method org.postgresql.jdbc4.Jdbc4Statement.setQueryTimeout ( int ) is not yet implemented . __EoT__ Hi . I tried it with PostgreSQL but it does n't work . It throws an exception : `` ` WARN [ 2014-10-24 14:38:54,195 ] com.zaxxer.hikari.pool.HikariPool : Exception during keep alive check , that means the connection must be dead . ! org.postgresql.util.PSQLException : Method org.postgresql.jdbc4.Jdbc4Statement.setQueryTimeout ( int ) is not yet implemented . ! at org.postgresql.Driver.notImplemented ( Driver.java:753 ) ~ [ postgresql-9.0-801.jdbc4.jar : na ] ! at org.postgresql.jdbc2.AbstractJdbc2Statement.setQueryTimeout ( AbstractJdbc2Statement.java:656 ) ~ [ postgresql-9.0-801.jdbc4.jar : na ] ! at com.zaxxer.hikari.pool.HikariPool.isConnectionAlive ( HikariPool.java:473 ) [ HikariCP-java6-2.1.0.jar : na ] ! at com.zaxxer.hikari.pool.HikariPool.getConnection ( HikariPool.java:178 ) [ HikariCP-java6-2.1.0.jar : na ] ! at com.zaxxer.hikari.HikariDataSource.getConnection ( HikariDataSource.java:94 ) [ HikariCP-java6-2.1.0.jar : na ] `` ` I tried all possible driver versions ( including ` org.postgresql : postgresql:9.3-1102-jdbc41 ` ) - nothing helped . Did anybody use it with PostgreSQL ? Here is my config file : `` ` < bean id= '' hikariConfig '' class= '' com.zaxxer.hikari.HikariConfig '' > < property name= '' connectionTestQuery '' value= '' SELECT 1 '' / > < property name= '' dataSourceClassName '' value= '' org.postgresql.ds.PGSimpleDataSource '' / > < property name= '' maximumPoolSize '' value=
DriverClassName is not used to determine driver __EoT__ When setting a JDBC URL in the configuration for the Hikari Connection Pool , the driver class name is mandatory . However , it is not used to determine which driver to wrap . Instead , the DriverManager tries all drivers it has access to until it finds the first one which accepts the URL . This can be most easily seen when setting something other than a driver as the DriverClassName . The following code executes without problems as long as the H2 driver is in the classpath : `` ` HikariConfig config = new HikariConfig ( ) ; config.setDriverClassName ( `` java.lang.Object '' ) ; config.setJdbcUrl ( `` jdbc : h2 : mem : DATABASENAME '' ) ; try ( HikariDataSource pool = new HikariDataSource ( config ) ; Connection connection = pool.getConnection ( ) ; Statement statement = connection.createStatement ( ) ) { statement.execute ( `` SELECT 1 '' ) ; } `` ` But removing the call to 'setDriverClassName ' results in an IllegalStateException .
DriverClassName is not used to determine driver __EoT__ When setting a JDBC URL in the configuration for the Hikari Connection Pool , the driver class name is mandatory . However , it is not used to determine which driver to wrap . Instead , the DriverManager tries all drivers it has access to until it finds the first one which accepts the URL . This can be most easily seen when setting something other than a driver as the DriverClassName . The following code executes without problems as long as the H2 driver is in the classpath : `` ` HikariConfig config = new HikariConfig ( ) ; config.setDriverClassName ( `` java.lang.Object '' ) ; config.setJdbcUrl ( `` jdbc : h2 : mem : DATABASENAME '' ) ; try ( HikariDataSource pool = new HikariDataSource ( config ) ; Connection connection = pool.getConnection ( ) ; Statement statement = connection.createStatement ( ) ) { statement.execute ( `` SELECT 1 '' ) ; } `` ` But removing the call to 'setDriverClassName ' results in an IllegalStateException .
DriverClassName is not used to determine driver __EoT__ When setting a JDBC URL in the configuration for the Hikari Connection Pool , the driver class name is mandatory . However , it is not used to determine which driver to wrap . Instead , the DriverManager tries all drivers it has access to until it finds the first one which accepts the URL . This can be most easily seen when setting something other than a driver as the DriverClassName . The following code executes without problems as long as the H2 driver is in the classpath : `` ` HikariConfig config = new HikariConfig ( ) ; config.setDriverClassName ( `` java.lang.Object '' ) ; config.setJdbcUrl ( `` jdbc : h2 : mem : DATABASENAME '' ) ; try ( HikariDataSource pool = new HikariDataSource ( config ) ; Connection connection = pool.getConnection ( ) ; Statement statement = connection.createStatement ( ) ) { statement.execute ( `` SELECT 1 '' ) ; } `` ` But removing the call to 'setDriverClassName ' results in an IllegalStateException .
Hikari 2.1 : Some strange behaviors if DB is unreachable __EoT__ Although I said that Hikari 2.1 worked well for us we recently found some strange behavior if the DB is unreachable . 1 . Behavior - Pool : 0 total , 0 inUse , 0 avail , 0 wait - DB host is down ( **packets are dropped** ) - ` getConnection ( ) ` fails after ` connectionTimeout ` milliseconds - Result : The Hikari Housekeeper now prints 1 total , 1 inUse , 0 avail , 0 wait - Expected : 0 total , 0 inUse , 0 avail , 0 wait . Since getConnection ( ) threw an Exception because of ` connectionTimout ` there is no reason to keep that connection in the pool . 2 . Behavior - Pool : 1 total , 0 inUse , 1 avail , 0 wait - DB host is down ( **packets are dropped** ) - Result : ` getConnection ( ) ` **does not** timeout after ` connectionTimeout ` milliseconds . Housekeeper prints out 1 total , 1 inUse , 0 avail , 0 wait - Expected : ` getConnection ( ) ` should fail after `
Possible memory leak due to usage of ThreadLocals __EoT__ I am using HikariCP 2.0.1 with Tomcat 8.0.12 . The latter keeps complaining about non-cleared ConcurrentBag threadlocal : 27-Sep-2014 00:14:49.001 SEVERE [ localhost-startStop-2 ] org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks The web application [ /medex ] created a ThreadLocal with key of type [ java.lang.ThreadLocal ] ( value [ java.lang.ThreadLocal @ 4437ca25 ] ) and a value of type [ com.zaxxer.hikari.util.FastList ] ( value [ com.zaxxer.hikari.util.FastList @ 62b24a7b ] ) but failed to remove it when the web application was stopped . Threads are going to be renewed over time to try and avoid a probable memory leak . ConcurrentBag uses FastList threadlocal but never removes it . Consequently , this thread can not be processed by garbage collector . The easiest and most obvious fix is to provide some shutdown hook for ConcurrentBag allowing to remove it 's threadlocal and then use it in pool shutdown routine . As ConcurrentBag will get `` corrupted '' after shutdown call , it makes sense to track it 's state in some property and throw IllegalStateException on subsequent attempts to use this concurrent bag ( if necessary ) . Best regards , Arthur
Possible memory leak due to usage of ThreadLocals __EoT__ I am using HikariCP 2.0.1 with Tomcat 8.0.12 . The latter keeps complaining about non-cleared ConcurrentBag threadlocal : 27-Sep-2014 00:14:49.001 SEVERE [ localhost-startStop-2 ] org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks The web application [ /medex ] created a ThreadLocal with key of type [ java.lang.ThreadLocal ] ( value [ java.lang.ThreadLocal @ 4437ca25 ] ) and a value of type [ com.zaxxer.hikari.util.FastList ] ( value [ com.zaxxer.hikari.util.FastList @ 62b24a7b ] ) but failed to remove it when the web application was stopped . Threads are going to be renewed over time to try and avoid a probable memory leak . ConcurrentBag uses FastList threadlocal but never removes it . Consequently , this thread can not be processed by garbage collector . The easiest and most obvious fix is to provide some shutdown hook for ConcurrentBag allowing to remove it 's threadlocal and then use it in pool shutdown routine . As ConcurrentBag will get `` corrupted '' after shutdown call , it makes sense to track it 's state in some property and throw IllegalStateException on subsequent attempts to use this concurrent bag ( if necessary ) . Best regards , Arthur
Add support for configuration via JVM argument __EoT__ Please support something like this : -Dhikaricp.configurationFile= $ { app_home } /../conf/hikari.properties This is useful when using sbt native packager . Currently my only option is to read the configuration values manually from typesafe config
Setting transactionIsolation level in HikariCP configuration __EoT__ Hello , I have the following configuration `` ` < property name= '' idleTimeout '' value = `` 3600000 '' / > < property name= '' maximumPoolSize '' value = `` 10 '' / > < property name= '' connectionTestQuery '' value= '' SELECT 1 from dual '' / > < property name= '' maxLifetime '' value= '' 1800000 '' / > < property name= '' transactionIsolation '' value= '' TRANSACTION_READ_COMMITTED '' / > `` ` for which I get the exception given below : Initialization of bean failed ; nested exception is org.springframework.beans.TypeMismatchException : Failed to convert property value of type 'java.lang.String ' to required type 'int ' for property 'transactionIsolation ' ; nested exception is java.lang.NumberFormatException : For input string : `` TRANSACTION_READ_COMMITTED '' so i tried this : `` ` < property name= '' transactionIsolation '' value= '' 2 '' / > `` ` And this still throws an exception as shown below Property 'transactionIsolation ' threw exception ; nested exception is java.lang.IllegalArgumentException : argument type mismatch Can someone pls help . Thanks in advance , Priya
ConnectionProxy.unwrap not meeting its contract __EoT__ Hi Brett- I am trying to use Connection.unwrap with your pool , and I 've noticed what looks like a bug in the code . The contract for the interface method states that if the object being wrapped matches the passed in interface it should return it , otherwise it should recursively call unwrap until a matching interface is found or there is nothing left to unwrap . The current implementation of the method only checks one layer deep , and does not recursively call unwrap . This is a problem for us when we layer in something like log4jdbc below the connection pool , but still need to operate on methods specific to our DB connection . Thanks !
minimumIdle=0 means no limit ? __EoT__ I just want to obtain ` HikariDataSource ` with no connections initially as backup datasources , but I found that it still reach ` maximumPoolSize ` after a while when I never invoke ` getConnection ( ) ` on this dataSource . Then I found this piece of code : `` ` java @ Override public void addBagItem ( ) { class AddConnection implements Runnable { public void run ( ) { long sleepBackoff = 200L ; final int maxPoolSize = configuration.getMaximumPoolSize ( ) ; final int minIdle = configuration.getMinimumIdle ( ) ; while ( ! isShutdown & & totalConnections.get ( ) < maxPoolSize & & ( minIdle == 0 || getIdleConnections ( ) < minIdle ) ) { if ( ! addConnection ( ) ) { quietlySleep ( sleepBackoff ) ; sleepBackoff = Math.min ( 1000L , ( long ) ( ( double ) sleepBackoff * 1.5 ) ) ; continue ; } if ( minIdle == 0 ) { break ; // This break is here so we only add one connection when there is no min . idle } } } } addConnectionExecutor.submit ( new AddConnection ( ) ) ; }
ArrayStoreException when invoking a CallableStatement __EoT__ Encountered a case where a CallableStatement - specifically an instance of CallableStatementJavassistProxy - is being added to a FastList.openStatements lists whose component type is PreparedStatementJavassistProxy . This occurs during a Batch update of hundreds of inserts using PreparedStatements and a single stored-proc call .
do n't clobber the pool name in validate ( ) __EoT__ @ brettwooldridge this was confusing me when attempting to access MBeans ...
do n't clobber the pool name in validate ( ) __EoT__ @ brettwooldridge this was confusing me when attempting to access MBeans ...
add method like setConnectionCustomizer ( IConnectionCustomizer ) to HikariDataSource __EoT__ It would be very nice if you could add the capability to provide a method to set a regular instanced object implementing IConnectionCustomizer as a connection customizer instead of a classname . Thanks
Connections not closed on Shutdown __EoT__ There seems to be a race condition when a pool is created and immediately shutdown , that leaves connections open . Tested with _HikariCP 1.3.8_ and _ '' PostgreSQL 9.3.4 , compiled by Visual C++ build 1600 , 64-bit '' _. DataSource is ` org.postgresql.ds.PGSimpleDataSource ` . To reproduce create a HikariDataSource and shut it down immediately . Querying the number of open connections afterward ` SELECT count ( * ) FROM pg_stat_activity ; ` shows 21 ( 20 is the my configured Hikari pool size ) . Its sufficient to sleep for a second before shuting down to make the problem go away . `` ` HikariDataSource dataSource = new HikariDataSource ( config ) ; // Thread.sleep ( 1_000 ) ; // will make the problem vanish dataSource.shutdown ( ) ; // 20 connections left open `` ` The problem might be in line 354 in ` com.zaxxer.hikari.pool.HikariPool ` . The method ` closeIdleConnections ` as its name indicates closes only idle connections . If one sets a conditional break point on line 355 with the condition ` list.size ( ) ! = connectionBag.size ( ) ` one sees the the list of
Connections not closed on Shutdown __EoT__ There seems to be a race condition when a pool is created and immediately shutdown , that leaves connections open . Tested with _HikariCP 1.3.8_ and _ '' PostgreSQL 9.3.4 , compiled by Visual C++ build 1600 , 64-bit '' _. DataSource is ` org.postgresql.ds.PGSimpleDataSource ` . To reproduce create a HikariDataSource and shut it down immediately . Querying the number of open connections afterward ` SELECT count ( * ) FROM pg_stat_activity ; ` shows 21 ( 20 is the my configured Hikari pool size ) . Its sufficient to sleep for a second before shuting down to make the problem go away . `` ` HikariDataSource dataSource = new HikariDataSource ( config ) ; // Thread.sleep ( 1_000 ) ; // will make the problem vanish dataSource.shutdown ( ) ; // 20 connections left open `` ` The problem might be in line 354 in ` com.zaxxer.hikari.pool.HikariPool ` . The method ` closeIdleConnections ` as its name indicates closes only idle connections . If one sets a conditional break point on line 355 with the condition ` list.size ( ) ! = connectionBag.size ( ) ` one sees the the list of
Append pool name after housekeeping timer thread name __EoT__ Would it be possible to append pool name as suffix to housekeeping timer thread name . Currently it a bit tedious to identify a pool specific pool under one JVM that has multiple pools up and running simultaneously .
connectionTimeout implementation default different from documentation default __EoT__ The documentation says the default ` connectionTimeout ` is 30000 ms . The implementation actually defaults the ` connectionTimeout ` to 5000 ms. Also , the JavaDoc for ` connectionTimeout ` is actually the JavaDoc for ` connectionTestQuery `
MBean Stuff __EoT__ Hi , Not sure if also related to the previous issue , but on shut-down of the app , I now get get : `` ` [ 13:22:58.900 ] [ ] [ DEVELOPMENT ] [ WARN ] [ com.zaxxer.hikari.pool.HikariMBeanElf ] [ 99 ] - Unable to unregister management beans . javax.management.InstanceNotFoundException : com.zaxxer.hikari : type=Pool ( corePool ) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean ( DefaultMBeanServerInterceptor.java:1095 ) ~ [ na:1.8.0 ] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.exclusiveUnregisterMBean ( DefaultMBeanServerInterceptor.java:427 ) ~ [ na:1.8.0 ] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.unregisterMBean ( DefaultMBeanServerInterceptor.java:415 ) ~ [ na:1.8.0 ] at com.sun.jmx.mbeanserver.JmxMBeanServer.unregisterMBean ( JmxMBeanServer.java:546 ) ~ [ na:1.8.0 ] at com.zaxxer.hikari.pool.HikariMBeanElf.unregisterMBeans ( HikariMBeanElf.java:90 ) ~ [ HikariCP-1.3.8.jar : na ] at com.zaxxer.hikari.pool.HikariPool.shutdown ( HikariPool.java:239 ) [ HikariCP-1.3.8.jar : na ] at com.zaxxer.hikari.HikariDataSource.shutdown ( HikariDataSource.java:225 ) [ HikariCP-1.3.8.jar : na ] at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) ~ [ na:1.8.0 ] at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) ~ [ na:1.8.0 ] at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) ~ [ na:1.8.0 ] at java.lang.reflect.Method.invoke ( Method.java:483 ) ~ [ na:1.8.0 ] at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod ( DisposableBeanAdapter.java:349 ) [ spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE ] `` ` -=david=-
Make metrics tracker optional __EoT__ Currently CodaHaleMetricsTracker is required at compile/runtime to be present even when metrics are not recorded although pom.xml states scope provided . It would not help even if dependency would be marker as optional ( as it should , same goes for hibernate ) . I think that it would be better to initialize it from a given classname instead of boolean so that other metrics implementations could be used as well . That would fix this problem at the same time .
lastConnectionFailure causes null pointer __EoT__ I 'm trying to configure Hikari , but I 'm getting a null pointer right now . HikariPool line 175 : `` ` throw new SQLException ( String.format ( `` Timeout of % dms encountered waiting for connection . `` , configuration.getConnectionTimeout ( ) ) , lastConnectionFailure.getAndSet ( null ) ) ; `` ` ` lastConnectionFailure ` is null . Perhaps a null check is warranted ?
Make metrics tracker optional __EoT__ Currently CodaHaleMetricsTracker is required at compile/runtime to be present even when metrics are not recorded although pom.xml states scope provided . It would not help even if dependency would be marker as optional ( as it should , same goes for hibernate ) . I think that it would be better to initialize it from a given classname instead of boolean so that other metrics implementations could be used as well . That would fix this problem at the same time .
lastConnectionFailure causes null pointer __EoT__ I 'm trying to configure Hikari , but I 'm getting a null pointer right now . HikariPool line 175 : `` ` throw new SQLException ( String.format ( `` Timeout of % dms encountered waiting for connection . `` , configuration.getConnectionTimeout ( ) ) , lastConnectionFailure.getAndSet ( null ) ) ; `` ` ` lastConnectionFailure ` is null . Perhaps a null check is warranted ?
logging bug in HikariMBeanElf.java __EoT__ in HikariMBeanElf.java there is line : LOGGER.error ( `` No registered MBean for { 0 } . `` , configuration.getPoolName ( ) ) ; but slf4j does n't work that way . it should just be { } . the message i 'm seeing in logs is : No registered MBean for { 0 } .
Disable jdbc4ConnectionTest when connectionTestQuery is set __EoT__ Documentation says that ` jdbc4ConnectionTest ` is mutually exclusive with the ` connectionTestQuery ` property ; this commit makes that happen .
Pool leaks connections open if customization/initSql fails __EoT__ There seems to be slight a possibility to connection leak in the pool between acquiring a connection and adding it to the pool . Connection state reset has similar problem as well . Steps to fix the issue ( HikariPool.addConnection ) : 1 . Obtaining of a datasource connection should be closed ( try/catch ) in case of a failure prior it has been added to the pool 2. initSql block should be followed by resetConnectionState in any case ( try/finally )
Tomcat 7.0.50 shutdown issue __EoT__ After updating HikariCP from 1.2.8 to 1.3.0 during shutdown Apache Tomcat 7.0.50 I 'm getting these messages in catalina.log : Mar 02 , 2014 5:27:40 PM org.apache.catalina.core.StandardServer await INFO : A valid shutdown command was received via the shutdown port . Stopping the Server instance . Mar 02 , 2014 5:27:40 PM org.apache.coyote.AbstractProtocol pause INFO : Pausing ProtocolHandler [ `` http-apr-8080 '' ] Mar 02 , 2014 5:27:40 PM org.apache.coyote.AbstractProtocol pause INFO : Pausing ProtocolHandler [ `` ajp-apr-8009 '' ] Mar 02 , 2014 5:27:40 PM org.apache.catalina.core.StandardService stopInternal INFO : Stopping service Catalina Mar 02 , 2014 5:27:40 PM org.apache.catalina.core.ApplicationContext log INFO : Closing Spring root WebApplicationContext Mar 02 , 2014 5:27:40 PM org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks SEVERE : The web application [ /test ] created a ThreadLocal with key of type [ com.zaxxer.hikari.util.ConcurrentBag $ 1 ] ( value [ com.zaxxer.hikari.util.ConcurrentBag $ 1 @ 1b6f3995 ] ) and a value of type [ java.util.LinkedList ] ( value [ [ com.zaxxer.hikari.proxy.ConnectionJavassistProxy @ af5dd35 ] ] ) but failed to remove it when the web application was stopped . Threads are going to be renewed over time to try and avoid a probable memory leak . Mar 02 ,
Support forceClose for Sybase JConnect 7.0 __EoT__ ConnectionProxy.java implements a SQLState check to determine if a connection is in a broken state . The current implementation supports the SQL 2003 standard and Postgres specific codes . The Sybase JConnect driver has its own proprietary SQL state codes which are documented in the programmers manual available at http : //infocenter.sybase.com/help/topic/com.sybase.infocenter.dc39001.0700/pdf/prjdbc0700.pdf The state codes which should be treated as connection errors are : '' JZ0C0 '' - Connection is already closed '' JZ0C1 '' - An IOException occurred which closed the connection Unfortunately the JConnect driver chains JZ0C1 inside a JZ006 exception - as documented by the pdf above . I have also experienced behavior where JZ0C0 has been chained inside a JZ006 , although this is not mentioned by the spec . In spite of the description given , JZ0C0 can appear without invoking connection.close ( ) explicitly . The spec suggests that if a JZ006 occurs without any chained exceptions that the connection is still in a usable state - although I have never seen this particular scenario occur in my ( limited ) usage of the driver to date . This suggests that a robust implementation would be to
fix fast statement list overflow inconsistency __EoT__ The fast statement list returns nulls during iteration when there was a overflow . The effect is a NPE when closing a connection with more open statements than the fast list initial capacity .
[ 1.2.8 ] Housekeeping timer thread never terminating / Connections remain opened __EoT__ Hi , I 'm using HikariCP within a GlassFish 3.x application server . Datasources are created on demand , kept available for some time and closed after a certain timeout . HikariPool # shutdown ( ) currently is n't implemented , thus every datasource ever created ( and removed ) `` leaks '' the associated connections as well as one timer thread . Probably , shutdown ( ) should - close all connections - terminate the associated housekeeping timer thread
[ 1.2.8 ] Housekeeping timer thread never terminating / Connections remain opened __EoT__ Hi , I 'm using HikariCP within a GlassFish 3.x application server . Datasources are created on demand , kept available for some time and closed after a certain timeout . HikariPool # shutdown ( ) currently is n't implemented , thus every datasource ever created ( and removed ) `` leaks '' the associated connections as well as one timer thread . Probably , shutdown ( ) should - close all connections - terminate the associated housekeeping timer thread
IndexOutOfBoundsException in close ( ) __EoT__ There 's a little problem lying in ConnectionProxy.close ( ) . Example case : `` ` java try ( final Connection con = Pool.getInstance ( ) .getConnection ( ) ) { // e.g forgot to close . con.createStatement ( ) ; con.createStatement ( ) ; } catch ( SQLException e ) { e.printStackTrace ( ) ; } `` ` This one leads to this : `` ` Exception in thread `` main '' java.lang.IndexOutOfBoundsException : Index : 1 , Size : 1 at java.util.ArrayList.rangeCheck ( ArrayList.java:635 ) at java.util.ArrayList.get ( ArrayList.java:411 ) at com.zaxxer.hikari.proxy.ConnectionProxy.close ( Unknown Source ) `` ` The cause of this is simple . The size of openStatements stored as a constant . Then , when the statement is closed ( unregisterStatement ) - it 'll be removed from the List and therefore we can not use the size constant again which is used for loop as it is points to invalid index ( from now ) . p.s Should n't there be a option for logging such `` unclosed '' resources ? : )
let me supply a DataSource to wrap __EoT__ i might not have url/user/password - i might just have a DataSource from JNDI which i 'd like wrapped . BoneCP , one of your competitors : ) lets me do that .
Dependency on Hibernate ? __EoT__ +-com.zaxxer : HikariCP:1.2.5 [ info ] | +-org.hibernate : hibernate-core:4.3.0.Final [ info ] | | +-antlr : antlr:2.7.7 [ info ] | | +-dom4j : dom4j:1.6.1 [ info ] | | | +-xml-apis : xml-apis:1.0.b2 [ info ] | | | [ info ] | | +-org.hibernate.common : hibernate-commons-annotations:4.0.4.Final [ info ] | | | +-org.jboss.logging : jboss-logging-annotations:1.2.0.Beta1 [ info ] | | | +-org.jboss.logging : jboss-logging:3.1.3.GA [ info ] | | | [ info ] | | +-org.hibernate.javax.persistence : hibernate-jpa-2.1-api:1.0.0.Final [ info ] | | +-org.javassist : javassist:3.18.1-GA [ info ] | | +-org.jboss.logging : jboss-logging-annotations:1.2.0.Beta1 [ info ] | | +-org.jboss.logging : jboss-logging:3.1.3.GA [ info ] | | +-org.jboss.spec.javax.transaction : jboss-transaction-api_1.2_spec:1.0.0.Final [ info ] | | +-org.jboss : jandex:1.1.0.Final [ info ] | | [ info ] | +-org.javassist : javassist:3.18.1-GA [ info ] | +-org.slf4j : slf4j-api:1.7.5
osgi : unit tests __EoT__
osgi : unit tests __EoT__
osgi : unit tests __EoT__
osgi : unit tests __EoT__
osgi : unit tests __EoT__
osgi : unit tests __EoT__
NPE in Hibernate when Connection accessed from thread that did not create it __EoT__ Hi , Just bumped up to the latest version ( from 1.2.1 ) and now I 'm getting this error , which is causing the transaction to rollback . This was okay on 1.2.1 ( no code changes , just a version bump ) . -=david=- java.lang.NullPointerException : null at com.zaxxer.hikari.proxy.ConnectionProxy._checkClosed ( Unknown Source ) ~ [ HikariCP-1.2.3.jar : na ] at com.zaxxer.hikari.proxy.ConnectionJavassistProxy.getAutoCommit ( ConnectionJavassistProxy.java ) ~ [ na : na ] at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) ~ [ na:1.7.0_45 ] at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:57 ) ~ [ na:1.7.0_45 ] at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) ~ [ na:1.7.0_45 ] at java.lang.reflect.Method.invoke ( Method.java:606 ) ~ [ na:1.7.0_45 ] at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy $ LazyConnectionInvocationHandler.invoke ( LazyConnectionDataSourceProxy.java:376 ) ~ [ spring-jdbc-4.0.1.BUILD-SNAPSHOT.jar:4.0.1.BUILD-SNAPSHOT ] at com.sun.proxy. $ Proxy21.getAutoCommit ( Unknown Source ) ~ [ na : na ] at org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin ( JdbcTransaction.java:68 ) ~ [ hibernate-core-4.3.0.Final.jar:4.3.0.Final ] at org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin ( AbstractTransactionImpl.java:162 ) ~ [ hibernate-core-4.3.0.Final.jar:4.3.0.Final ] at org.hibernate.internal.SessionImpl.beginTransaction ( SessionImpl.java:1431 ) ~ [ hibernate-core-4.3.0.Final.jar:4.3.0.Final ] at org.hibernate.jpa.internal.TransactionImpl.begin ( TransactionImpl.java:61 ) ~ [ hibernate-entitymanager-4.3.0.Final.jar:4.3.0.Final ] at org.springframework.orm.jpa.DefaultJpaDialect.beginTransaction ( DefaultJpaDialect.java:67 ) ~ [ spring-orm-4.0.1.BUILD-SNAPSHOT.jar:4.0.1.BUILD-SNAPSHOT ] at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction ( HibernateJpaDialect.java:110 ) ~ [
Consider adding HikariConfig # setTransactionIsolation __EoT__ I 'm using HikariCP together with Spring and it would be nice to specify a default transaction level for handed out connections . Called like : `` ` HikariConfig config = new HikariConfig ( ) ; // Taking transaction name ( Connection.TRANSACTION_REPEATABLE_READ ) // so that configuration in properties file is readable config.setTransactionIsolation ( `` TRANSACTION_REPEATABLE_READ '' ) ; `` ` If the underlying DataSource would allow it , HikariConfig # addDataSourceProperty could be used , but in the case of postgres , PGSimpleDataSource has no appropriate setter .
Support for DataSource # setLogWriter __EoT__ To see what is going on with the underlying DataSource ( PGSimpleDataSource in my case ) I use DataSource # setLogWriter . However , I did not find a way to do this with HikariCP . What I tried : `` ` PrintWriter logWriter = ... ; HikariConfig config = new HikariConfig ( ) ; // logWriter is first converted to String , so this does not work config.addDataSourceProperty ( `` logWriter '' , logWriter ) ; // other properties ... HikariDataSource connectionPool = new HikariDataSource ( config ) ; // Implementation does nothing connectionPool.setLogWriter ( logWriter ) ; `` ` Are there any plans to support this ? Thank you in advance and for your work so far , HikariCP is awesome . : )
Automatic rollback __EoT__ Following my previous [ question ] ( http : //stackoverflow.com/q/20775165/1863244 ) on SO it would be nice to have automatic rollback for checked-in connections when their ` autoCommit ` is set to ` false ` .
Allow data source properties to be set directly in HikariConfig __EoT__ Currently there are two ways of configuring data source properties : - method ` addDataSourceProperty ( String propertyName , Object value ) ` - constructor ` HikariConfig ( String propertyFileName ) ` I 'm configuring HikariCP with spring xml configuration and I need to set datasource properties ( url , user , password ) . I ca n't call the method addDataSourceProperty from the xml configuration and I would need a real file for the constructor . Could you add possibility to set Properties directly , e.g . method `` ` java setDriverProperties ( Properties properties ) `` ` or constructor `` ` java HikariConfig ( Properties properties ) `` `
Small suggestion __EoT__ Hi , I 'm the author of BoneCP . I 'm delighted at finding your project - some interesting ideas out there ! Thank you for taking the time to document your techniques . Do you accept contributions ? : - ) Might I suggest adding units to your config methods eg InSeconds etc , before I did this , forums were filled with people getting the units wrong , they disappeared when I made the API more explicit . In other words try to avoid the mistakes I made in my initial versions : - )
__STDC_FORMAT_MACROS warning when bootstrapping on macOS __EoT__ # # # Description of the problem / feature request : When building Bazel `` from scratch '' on macOS , the following warning is emitted : `` ` INFO : From Compiling src/tools/singlejar/output_jar.cc : In file included from src/tools/singlejar/output_jar.cc:18 : In file included from ./src/tools/singlejar/output_jar.h:31 : In file included from ./src/tools/singlejar/combiners.h:24 : ./src/tools/singlejar/transient_bytes.h:17:9 : warning : '__STDC_FORMAT_MACROS ' macro redefined [ -Wmacro-redefined ] # define __STDC_FORMAT_MACROS 1 ^ /Applications/Xcode-10.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/inttypes.h:244:12 : note : previous definition is here # define __STDC_FORMAT_MACROS ^ 1 warning generated . `` ` Is there an issue here ? Or perhaps the ` # define __STDC_FORMAT_MACROS 1 ` should be guarded with an ` # ifndef __STDC_FORMAT_MACROS ` , just to avoid the warning ? I 'm no C expert , so I do n't know if it 's appropriate for this to be unconditionally defined here . This does not break the build or affect functionality as far as I can tell ; it 's just a warning to clean up . # # # Feature requests : what underlying problem are you trying to solve with this feature ? I 'm trying to eliminate a warning during
Bazel does n't sort Platform properties __EoT__ API spec http : //go/gh/bazelbuild/remote-apis/blob/master/build/bazel/remote/execution/v2/remote_execution.proto # L513-L516 says Platform properties should be sorted . Bazel currently does n't sort them . We need to consider whether we really want to fix it at this point , and if so , how to do it in a way that does n't immediately invalidate all existing cache keys . In particular , remote servers need to consider how many keys do their clients currently use in their platform , are they already sorted , etc .
`` warning : could not find a JDK 8 bootclasspath in external/embedded_jdk , falling back to -- release '' on Bazel 0.19.0rc6 and master __EoT__ On Bazel 0.19.0rc6 I 'm seeing this warning during build of gerrit and gerrit plugins : `` ` $ bazel build reviewers INFO : Build options have changed , discarding analysis cache . INFO : Analysed target // : reviewers ( 36 packages loaded , 527 targets configured ) . INFO : Found 1 target ... INFO : From SkylarkAction external/bazel_tools/tools/jdk/platformclasspath.jar [ for host ] : warning : could not find a JDK 8 bootclasspath in external/embedded_jdk , falling back to -- release INFO : From GWT compiling reviewers__gwt_application.zip [ for host ] : Compiling module com.googlesource.gerrit.plugins.reviewers.ReviewersForm [ ... ] `` ` I 'm seeing the same warning on Bazel master as well ( d48e0e27600deeed9eab01d6e42ab4b6e715d7a6 ) . This seems to be a regression , as all is fine on Bazel 0.18.0 : `` ` $ bazel version Build label : 0.18.0 $ bazel build reviewers Starting local Bazel server and connecting to it ... INFO : Analysed target // : reviewers ( 36 packages loaded ) . INFO : Found 1 target ... INFO :
Invocation ID should be printed when running with -- remote_cache or -- remote_executor __EoT__ # # # Description of the problem / feature request : When running with -- bes_backend , the invocation ID is printed to the console . It should also be printed when either -- remote_cache or -- remote_executor is specified . # # # Feature requests : what underlying problem are you trying to solve with this feature ? The invocation ID is passed to the server via RequestMetadata when making RPCs . Depending on the server 's implementation , it may be a useful identifier for searching server logs or other data while debugging failing builds .
Local fallback not working when remote cache times out . __EoT__ When the remote cache times-out , I would have expected the ` -- remote_local_fallback ` flag to fall back to building if the remote cache times out . However that is not what I 'm seeing . My ` .bazelrc ` : `` ` build -- spawn_strategy=standalone build -- genrule_strategy=standalone build -- experimental_objc_enable_module_maps build -- features swift.no_generated_module_map build -- symlink_prefix=build/ build -- xcode_version 9.4.1 build -- remote_local_fallback_strategy=local build -- remote_http_cache= $ URL `` ` and I 'm building by running : `` ` time bazel build -- jobs 128 // : Learning `` ` With bazel from GitHub as of today ( 4cba428ddb ) . But I can also reproduce with 0.17.1 . The error I get is : `` ` ERROR : /Users/obonilla/r/learning-ios_trunk/Pods/LISemaphoreLib/BUILD.bazel:2:1 : C++ compilation of rule '//Pods/LISemaphoreLib : LISemaphoreLib_ObjC ' failed : Unexpected IO error . : Exhausted retry attempts ( 0 ) Target // : Learning failed to build `` `
ijar : skipping unknown attribute : `` NestHost '' warnings on JDK11 __EoT__ When building Gerrit on JDK11 using VanillaJavaBuilder on Bazel @ HEAD , I 'm seeing these warnings : `` ` [ ... ] INFO : From Extracting interface //gerrit-gwtui-common : client-lib : ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestMembers '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestMembers '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute : `` NestHost '' . ijar : skipping unknown attribute
Support Full-ASCII in Code93Writer __EoT__ Support full ASCII encoding in Code93Writer and remove redundancy .
fix code93 extended character decoder __EoT__ Some characters ( ` ( % ) U ` , ` ( % ) V ` and ` ( % ) W ` map to ` NUL ` , ` ' @ ' ` and `` ' ` ' `` ) were decoded to wrong value ` DEL ` in Code93Reader .
Added a Null check for relative points in ByQuadrantReader __EoT__
Corrected exception message in EAN8Writer __EoT__ I am still porting commits to the ZXingObjC project . As I read through the code , I believe I found a small mistake : according to EAN13Writer , both possibilities ( 7 or 8 digits ) should be reflected within the message .
Corrected exception message in UPCEWriter __EoT__ I am still porting commits to the ZXingObjC project . As I read through the code , I believe I found a small mistake : according to EAN13Writer , both possibilities ( 7 or 8 digits ) should be reflected within the message .
Fixed duplicated assertion __EoT__ I am currently porting commits to the ZXingObjC project . As I read through the code , I believe I found a small mistake . I guess you want to test for ` a ! = b ` after setting a bit .
Improper Output Neutralization for Logs ( CWE ID 117 ) ( CRLF Injection ) __EoT__ ** # # # Bug Reports** We are using Zxing library ( com.google.zxing : core : 3.3.3 ) on our project . And We did Vera Code ( Ref : https : //www.veracode.com ) Scan to find out the flaws and fix them . And We got the Improper Output Neutralization for Logs ( CWE ID 117 ) ( CRLF Injection ) flaws on DecodeHintManager.java ( Line Number : 227 ) . It is producing by writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files . **Current Code , which produce this flaw** Log.w ( TAG , `` Ignoring hint `` + hintType + `` because it is not assignable from `` + hintData ) ; **Recommendations** Avoid directly embedding user input in log files when possible . Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger , which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data . Only
fix binary shift cost heuristics __EoT__ This introduces some tests that show that the current heuristic that determines whether an encoding state can savely been dropped is n't valid for binary shift mode . That flaw may lead to inefficent encoding for non-textual data , i.e . the encoding uses some more bytes than the original octet encoding does . It also comes with the fix for that heuristic .
Check if characters are digits for EAN_13 , EAN_8 , ITF and UPC_EAN_EXTENSION __EoT__ Several barcode formats only support digits 0-9 , namely - BarcodeFormat.EAN_13 - BarcodeFormat.EAN_8 - BarcodeFormat.ITF - BarcodeFormat.UPC_EAN_EXTENSION Passing different characters to the encode function causes a runtime exception . **Proposed solution** Check return value of Character.digit and throw IllegalArgumentException if it is -1 ( invalid character . ) Source : https : //developer.android.com/reference/java/lang/Character # digit ( int , % 20int )
Remove spacing from head of polynomial string __EoT__ Does your modification intend to remove spaces around minus sign on head of polynomial ? I found a bug that string of ` GenericGFPoly ( QR_CODE_FIELD_256 , new int [ ] { 3 } ) ` should be ` `` a^25 '' ` , not ` `` 3 '' ` .
Fixed strings.xml Korean __EoT__ And I Fixed strings.xml Korean because some sentences are too stiff to Korean .
String of zero polynomial be `` 0 '' __EoT__ GenericGFPoly.toString ( ) returns empty string ( ` `` '' ` ) when that is zero . It should be ` `` 0 '' ` .
Optimize buffer size __EoT__ Optimize buffer size in ` BitMatrix.xor ( ) ` and ` BitArray.toString ( ) ` . In BitMatrix.xor ( ) , small buffer size causes allocation of BitArray every time in following loop . ( see BitMatrix.getRow ) BitArray change is just optimization .
12+5 UPC support in Android __EoT__ Reasonable background here : http : //stackoverflow.com/questions/8544503/zxing-scanning-barcode-with-upc-5-supplemental For older/80s books/comics , the 12+5 UPC is needed to convert to ISBN : http : //www.librarything.com/wiki/index.php/ISBN However , I 've yet to find any combination of IntentIntegrator or direct Intent call which will produce the full 17 character value .
Fixed my port name and URL ( zxing-ts ) __EoT__ I was the previous owner of a port/fork of Zxing library , now I moved it into an org .
Improve support for Macro PDF417 __EoT__ I had troubles reading a PDF417 barcode with multiple symbols . These PR would fix that . It is though not reverse compatible regarding the optionalData field on the ResultMetadata .
ZXing 3.3.2 snapshot still creates wrong barcode for text with leadin… __EoT__ …g asterisk # 960
Added a workaround for low framerate issue on Nexus 4 __EoT__ Hi there , Thanks for your great work ! I have tested ZXing on my Nexus 4 and found it suffers from a low frame rate issue . The camera is very slow and appears choppy on Nexus 4 . Although it does not affect the major functionality but it still affects the usability . I also found the following Stack Overflow discussions and adopted the workaround in this pull request . Reference Stack Overflow Posts : [ Stack Overflow Post 1 ] ( https : //stackoverflow.com/questions/20252352/image-preview-is-very-slow-on-nexus4 ) [ Stack Overflow Post 2 ] ( https : //stackoverflow.com/questions/14131900/extreme-camera-lag-on-nexus-4 ) Thanks ! If you need further information , I may make a video to show the slow camera on Nexus 4 .
Aadded zxing-ts to 3-party projects __EoT__ zxing-ts is a port of this lib , written in TS and compiled as a node_module , compatible with any TS projects , including Angular 5 .
Add support for encoding GS1 formatted QR __EoT__ This PR adds support for encoding GS1 formatted QR 's through the addition of an encoding hint . Basically for the QR to meet the GS1 standard we must prefix the header bit stream with the FNC1 mode header . Prior to this PR there was no means of adding this header .
Fix typo in Norwegian translation __EoT__
Nearly Ideal Barcodes Can not Be Decoded __EoT__ Hi , I created some QR-Codes with the iText library ( pdf ) , rendered the pages as png and tried to read the codes via zxing ( java library v. 3.3.1 , terminal application and your online decoder ) . I did not work ; I ca n't figure out why , because the images are perfect . The zxing mobile app works ... so why is the library failing ? ! [ test1 ] ( https : //user-images.githubusercontent.com/8210233/33014147-9bdb0b8a-cde6-11e7-89d0-3a58076798f2.png ) ! [ test4 ] ( https : //user-images.githubusercontent.com/8210233/33014148-9c03ecc6-cde6-11e7-9639-cb2bc7bf2c38.png )
ITFReader improvement suggestion __EoT__ I implemented a relatively simple improvement of the ITFReader in the mentioned c++ port . It makes the decoder detect all of the 14 ( instead of 9 ) ` itf-1 ` sample images . For details see the following 2 commits : https : //github.com/nu-book/zxing-cpp/commit/0c7c389db039b204f959d4a4d93b2ce4e8275781 # diff-ebc4247141d1f9af94ed35508c219ffe https : //github.com/nu-book/zxing-cpp/commit/ca81ca2403a56cee585612c38c6ac33cf90267e5 # diff-ebc4247141d1f9af94ed35508c219ffe In case you might be interested to backport this .
DataMatrix encoder broken for certain short EDIFACT messages __EoT__ I 'm helping out at a new C++ port of this code base ( https : //github.com/nu-book/zxing-cpp ) . I stumbled on an issue with messages encoded with EDIFACT that need 2 code words padding . During debugging and research I found out that this issue has been discovered `` upstream '' over 5 years ago : https : //sourceforge.net/p/barcode4j/bugs/38/ . Steps to reproduce : create a DataMatrix with the message ` < ABCDEFG > < ABCDEFGK > ` - > the resulting image contains an invalid code . I do n't have a pull request but the fix is just one line , see [ here ] ( https : //github.com/nu-book/zxing-cpp/pull/24/commits/06cbdadecf05c4360ba8e5ee502e17e7f4be8b30 ) .
Implement support for WPA2 Enterprise ( EAP ) __EoT__ This adds support for parsing QR codes which contain information about an WPA2 enterprise ( EAP ) network . For WPA2 enterprise , strings will be of the form : WIFI : T : WPA2-EAP ; S : [ network SSID ] ; H : [ hidden ? ] ; E : [ EAP method ] ; PH2 : [ Phase 2 method ] ; AI : [ anonymous identity ] ; I : [ username ] ; P : [ password ] ; ; The `` EAP method '' can e.g . be `` TTLS '' or `` PWD '' or one of the other fields in [ WifiEnterpriseConfig.Eap ] ( https : //developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html ) and `` Phase 2 method '' can e.g . be `` MSCHAPV2 '' or any of the other fields in [ WifiEnterpriseConfig.Phase2 ] ( https : //developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html ) An example would be : WIFI : S : eduroam ; T : WPA2-EAP ; AI : anonymous @ uni-stuttgart.de ; I : username @ uni-stuttgart.de ; P : password ; E : PEAP ; PH2 : MSCHAPV2 ; ;
Update Google Play Badge __EoT__ [ https : //play.google.com/intl/en_us/badges/ ] ( https : //play.google.com/intl/en_us/badges/ )
fixed russian translation __EoT__ fixed russian translation for html help + 1 misspell in values-ru
Fixed error key in doPost ( ) __EoT__ doPost ( ) works only with badimage
Norwegian translation __EoT__ I wrote a Norwegian translation , based on how I could see that the other translations of Barcode Scanner had been done .
Add codeset A support to Code 128 __EoT__ if I 'm not wrong this PR addresses the issue # 649
Code39 extended mode encoding support __EoT__
Fix extended mode decoding code39 __EoT__ The codes with preceding % are not linear arranged in the symbol table . Changes are based upon https : //en.wikipedia.org/wiki/Code39 # Full_ASCII_Code_39
Updated php-zxing link __EoT__ Added a https : //github.com/dsiddharth2/php-zxing link to ZXing-based third-party open source projects area .
sharing screen of android contacts with e164 numbers is showing the wrong number __EoT__ Steps to reproduce : - have a contact with a phone number in the e164 format - share the contact with the barcode scanner ! [ 1845297871461598955_2 ] ( https : //user-images.githubusercontent.com/10261186/28911439-cd6b6656-7830-11e7-88dd-ead3dab5c2e6.png ) As you can see , the barcode scanner is displaying the country prefix ( +49 since it is a german phone number ) , but it somehow cut off the ` + ` character . The data encoded in the qrcode is correct , though .
adding port to Objective-C __EoT__
Fixed Wifi mangager memory leak on devices < N __EoT__ AndroidStudio reported the error : Error : The WIFI_SERVICE must be looked up on the Application context or memory will leak on devices < Android N. Try changing to .getApplicationContext ( ) [ WifiManagerLeak ]
ZXing creates wrong barcode ( for text with leading asterisk ? ) __EoT__ Hi , in our project we create data matrix barcodes using ZXing ( core-3.3.0.jar and javase-3.3.0.jar ) in this way : `` ` java final DataMatrixWriter barcode = new DataMatrixWriter ( ) ; final BitMatrix bitMatrix = barcode.encode ( text , BarcodeFormat.DATA_MATRIX , 0 , 0 ) ; `` ` We create an image ( `` ` java.awt.Image `` ` ) using the bit matrix and scan this barcode image afterwards ( form screen or paper ) . In 99 % percent of all cases the text of the scanned barcode image is identical to the the encoded text . But in some cases we get another text . Examples : * original text - > converted to barcode * ` *MEMANT-1F-MESTECH ` - > ` *MEMANQ90E5079ROO70 ` * ` *MEMANT-1F-M-2estech ` - > ` *MEMANQ90E5089q { estech ` * ` *MEMANT-1F-M-2e-stech ` - > ` *MEMANQ90E5089q { e-stech ` * ` *MEMANT-1F-M6ABCDEF ` - > ` *MEMANQ90E5091 ` I suppose the leading asterisk causes the problems .
Clean up whitespace __EoT__ Just some code hygiene cleanup . Dropped trailing or excess whitespace , and also dropped trailing commas in array initializers , as the dominant style in the codebase is to not have them and that fits more with other languages .
Drop debugging code from UPCEWriter __EoT__ Looks like some debugging code got left in the UPCEWriter class . Presumably there 's no reason to keep it in the codebase .
findBestPreviewSizeValue : sorting optimized __EoT__ It 's more effective to perform sorting on the supportedPreviewSizes list with unsupported values previously removed
Small readme fixes __EoT__
update japanese strings.xml __EoT__
Minor performance improvements to HybridBinarizer __EoT__ Moved a couple of calculations out of for loops if they are n't affected by the for loop to avoid recalculating the same value .
Add basic test case for ITFWriter __EoT__
Add new matrix tests in RGBLuminanceSourceTestCase __EoT__ Couple of extra tests to get better code coverage in ` RGBLuminanceSource ` .
Correct size of array in ITFWriter __EoT__ The intermediate array only needs to be 10 ints long , not 18 . The max value for ` j ` is 4 , so ` 2 * 4 + 1 = 9 ` .
Android vCard parse : type default / type order __EoT__ Barcode scanner seems to be using different type defaults for ` ADR ` and ` TEL ` than suggested in the specification ( at least for vCard 2.1 ) . For me it defaults to 'private ' but it should to 'work ' . From looking at the code it seems that there is no default internally . This can also result in wrong order of types , e.g . this vCard data will swap the types of the second and third number . `` ` BEGIN : VCARD N : ; John ; ; ; TEL ; WORK:10 TEL:2 TEL ; CELL:30 END : VCARD `` ` IMHO a good solution for both issues would be to default to the type 'WORK ' for phone numbers and addresses at parse time . This should be close enough to the specification . Maybe also for eMails . I guess this could be implemented by adding a ` defaultType ` Parameter to the function ` matchVCardPrefixedField ` in VCardResultParser.java ?
Fix two typos in Javadocs __EoT__ I found two typos in the Javadocs and fixed them
wrong barcode generated ( image updated ) __EoT__ bug report . when I tried to encode some numbers , but actually zxing library generates wrong barcode in ( zxing 3.3 ) MultiFormatWriter makes invalid barcodes with below combination . i.g ) type : UPC_E , number : 12345670 codes ) BitMatrix result = new MultiFormatWriter ( ) .encode ( `` 12345670 '' , BarcodeFormat.UPC_E , ? ? , ? ? , ? ? ) ; kindly check this case . - correct barcode ! [ correct_12345670_upc-e ] ( https : //cloud.githubusercontent.com/assets/9362305/21675661/f283eb3a-d375-11e6-9eb4-28bbb8968dba.jpg ) - generated by zxing library ! [ image ] ( https : //cloud.githubusercontent.com/assets/9362305/21675776/591a3930-d376-11e6-8b9a-b95a6d0cc8ca.png ) - captured screen ! [ captured_12345670_upc-e ] ( https : //cloud.githubusercontent.com/assets/9362305/21675694/0b513780-d376-11e6-99a0-0ad2e861aa78.png ) thank you
Update README.md __EoT__ added link to JavaScript Port
Updated QZXing 's URL ( port to Qt framework ) __EoT__ I would like to request the update of QZXing 's project repository URL in order to keep the readme file up-to-date . Previous location : [ SourceForge ] ( https : //sourceforge.net/projects/qzxing/ ) New location : [ GitHub ] ( https : //github.com/ftylitak/qzxing )
Fix a typo in Catalan __EoT__ : - )
Change README.md . Added Delphi/Pascal ZXing reference . __EoT__ Thanks for the great job and inspiration . Sincerely ,
scan not saved to clipboard in bulk scanning mode __EoT__ When save to clipboard is selected in settings it is ignored in bulk scanning mode . While it might seem that saving to clipboard is silly during bulk scanning , if the user has requested it in the settings it should be honoured . I have a genuine need of this and expected it to work .
Various small encoding improvements __EoT__ A couple related improvements from https : //groups.google.com/forum/ # ! topic/zxing/iCODr5bZKHk - UPC-E , EAN-13 and EAN-8 writers should add check digit if not present , like UPC-A does . - They should all check the check digit if provided and reject the barcode if it fails - The default margin for UPC/EAN barcodes should never result in a margin less than the mandated 9 modules - Experiment with less tolerance of small quiet zones
Various small encoding improvements __EoT__ A couple related improvements from https : //groups.google.com/forum/ # ! topic/zxing/iCODr5bZKHk - UPC-E , EAN-13 and EAN-8 writers should add check digit if not present , like UPC-A does . - They should all check the check digit if provided and reject the barcode if it fails - The default margin for UPC/EAN barcodes should never result in a margin less than the mandated 9 modules - Experiment with less tolerance of small quiet zones
Add 'getNumBits ' to Result objects to return when not all bits of the raw byte representation are valid __EoT__ See https : //github.com/zxing/zxing/issues/644 CC @ fgrieu
Further micro-optimize QR data mask recognition ; more comment for earlier such changes . __EoT__ Further micro-optimize QR data mask recognition ; more comment for earlier such changes .
I 've seen some codes with the type set to WPA2 __EoT__ Make zxing recognize WIFI qrcodes with the type field set to WPA2 as WPA .
Optimize QR data mask recognition __EoT__
Add ability to specify a QR code version hint . __EoT__ Add a hint to allow the ability to specify a specific version of QR code . If the specified content wo n't fit in the version , an exception is thrown . If no hint is provided , the current method of selecting the `` smallest '' version that fits is used . ( I wanted to be able to generate a replica of a code that I had the content for . )
Fix typo __EoT__
Reproducible AIOOBE on scanning image in online decoder __EoT__ `` ` java.lang.ArrayIndexOutOfBoundsException : 143244 com.google.zxing.common.BitMatrix.get ( BitMatrix.java:131 ) com.google.zxing.qrcode.QRCodeReader.extractPureBits ( QRCodeReader.java:187 ) com.google.zxing.qrcode.QRCodeReader.decode ( QRCodeReader.java:73 ) com.google.zxing.MultiFormatReader.decodeInternal ( MultiFormatReader.java:171 ) com.google.zxing.MultiFormatReader.decode ( MultiFormatReader.java:69 ) com.google.zxing.web.DecodeServlet.processImage ( DecodeServlet.java:343 ) com.google.zxing.web.DecodeServlet.processStream ( DecodeServlet.java:314 ) com.google.zxing.web.DecodeServlet.doGet ( DecodeServlet.java:232 ) javax.servlet.http.HttpServlet.service ( HttpServlet.java:622 ) javax.servlet.http.HttpServlet.service ( HttpServlet.java:729 ) org.apache.tomcat.websocket.server.WsFilter.doFilter ( WsFilter.java:52 ) com.google.zxing.web.DoSFilter.doFilter ( DoSFilter.java:92 ) com.google.zxing.web.RedirectFilter.doFilter ( RedirectFilter.java:67 ) `` ` ! [ kukzarz ] ( https : //cloud.githubusercontent.com/assets/822522/16163343/ffdec782-34d8-11e6-8de4-1863f5d1c47e.jpg )
ArrayIndexOutOfBoundsException on files with only 1 pixel __EoT__ When running on a file like https : //commons.wikimedia.org/wiki/File : Pix.gif which has only 1 pixel , zxing throws an error : `` ` Exception in thread `` main '' java.lang.ArrayIndexOutOfBoundsException : 1 at com.google.zxing.common.GlobalHistogramBinarizer.getBlackRow ( GlobalHistogramBinarizer.java:71 ) at com.google.zxing.BinaryBitmap.getBlackRow ( BinaryBitmap.java:66 ) at com.google.zxing.oned.OneDReader.doDecode ( OneDReader.java:132 ) at com.google.zxing.oned.OneDReader.decode ( OneDReader.java:54 ) at com.google.zxing.MultiFormatReader.decodeInternal ( MultiFormatReader.java:171 ) at com.google.zxing.MultiFormatReader.decode ( MultiFormatReader.java:69 ) at com.google.zxing.multi.GenericMultipleBarcodeReader.doDecodeMultiple ( GenericMultipleBarcodeReader.java:84 ) at com.google.zxing.multi.GenericMultipleBarcodeReader.decodeMultiple ( GenericMultipleBarcodeReader.java:65 ) at com.google.zxing.client.j2se.DecodeWorker.decode ( DecodeWorker.java:140 ) at com.google.zxing.client.j2se.DecodeWorker.call ( DecodeWorker.java:75 ) at com.google.zxing.client.j2se.CommandLineRunner.main ( CommandLineRunner.java:84 ) `` ` Obviously barcodes will never exist in files that have 1 pixel , but zxing should not crash for it . ( I 'm running it on a lot of files , and this happened to be one of them ) The issue is that ` localLuminance ` in [ GlobalHistogramBinarizer ] ( https : //github.com/zxing/zxing/blob/b189fd1d5629770b1ecbdf3e2f55a37776538957/core/src/main/java/com/google/zxing/common/GlobalHistogramBinarizer.java # L71 ) directly accesses the 2nd element ( which does not exist ) .
Simplified pieces of code __EoT__ I simplified a couple of pieces of code while keeping the behavior the same . The message in each commit explains what happened .
Simplified some code __EoT__ Simplified a few bits of code in BitArray and RGBLuminanceSource , improving performance at least marginally .
Code 128 and FNC1 error in autoswitching mode __EoT__ # # # Bug Reports i try to encode ucc ean128 whit **not** force_codset_b ( space requirements ) if i encode string Chr ( 241 ) & `` 100958 '' & Chr ( 241 ) & `` 17160526 '' work if i encode string Chr ( 241 ) & `` 10958 '' & Chr ( 241 ) & `` 17160526 '' does n't work class return **System.FormatException** i guess error returned from https : //zxingnet.svn.codeplex.com/svn/trunk/Source/lib/oned/Code128Writer.cs in instruction ` patternIndex = Int32.Parse ( contents.Substring ( position , 2 ) ) ; ` I guess the problem is related to the attempt to change the SUBSET automatically . When the FNC1 is even , it is interpreted as a number and then goes into error .
Android SDK API Level 23 Support , Issue with Browser.BookmarkColumns Class __EoT__ Hi ZXing Team , I am trying to build ZXing android source code in Android Studio IDE , where i am using **compileSdkVersion 23** and **buildToolsVersion `` 23.0.2 '' ** in **build.gradle** file . I want to compile source code with Android SDK API 23 to support runtime permission , but IDE shows compile time error for API Level 23 because Android OS remove the **Browser.BookmarkColumns** class from API Level 23 . Please suggest solution for this problem ?
Android SDK API Level 23 Support , Issue with Browser.BookmarkColumns Class __EoT__ Hi ZXing Team , I am trying to build ZXing android source code in Android Studio IDE , where i am using **compileSdkVersion 23** and **buildToolsVersion `` 23.0.2 '' ** in **build.gradle** file . I want to compile source code with Android SDK API 23 to support runtime permission , but IDE shows compile time error for API Level 23 because Android OS remove the **Browser.BookmarkColumns** class from API Level 23 . Please suggest solution for this problem ?
Java-SE CommandLineRunner no longer accepts files without full-path __EoT__ `` ` ... /java ... .j2se.CommandLineRunner file-to-decode.png Exception in thread `` main '' java.lang.IllegalArgumentException : URI is not hierarchical at sun.nio.fs.UnixUriUtils.fromUri ( UnixUriUtils.java:48 ) at sun.nio.fs.UnixFileSystemProvider.getPath ( UnixFileSystemProvider.java:98 ) at java.nio.file.Paths.get ( Paths.java:138 ) at com.google.zxing.client.j2se.CommandLineRunner.retainValid ( CommandLineRunner.java:125 ) at com.google.zxing.client.j2se.CommandLineRunner.main ( CommandLineRunner.java:61 ) `` ` Tested with : - Java 1.7 from Oracle - Java 1.8 from Oracle - Java 1.7 from OpenJDK - Java 1.8 from OpenJDK Using ./file-to-decode.png yields the same exception . ZXing : Commit 4e3abafe3008e02695f894eccf05f8257fca4ee9
Command line arguments are not working in CommandLineRunner __EoT__ When I run the CommandLineRunner in javase it works unless I try to pass it command line arguments ( like -- try_harder and -- crop ) . Here is the error message : > Exception in thread `` main '' java.lang.NoClassDefFoundError : com/beust/jcommander/JCommander > at com.google.zxing.client.j2se.CommandLineRunner.main ( CommandLineRunner.java:52 ) > Caused by : java.lang.ClassNotFoundException : com.beust.jcommander.JCommander > at java.net.URLClassLoader $ 1.run ( URLClassLoader.java:366 ) > at java.net.URLClassLoader $ 1.run ( URLClassLoader.java:355 ) > at java.security.AccessController.doPrivileged ( Native Method ) > at java.net.URLClassLoader.findClass ( URLClassLoader.java:354 ) > at java.lang.ClassLoader.loadClass ( ClassLoader.java:425 ) > at sun.misc.Launcher $ AppClassLoader.loadClass ( Launcher.java:308 ) > at java.lang.ClassLoader.loadClass ( ClassLoader.java:358 ) > ... 1 more I tried it both with the jar files I built , and with the ones hosted at the Maven Release Repository . It works on 3.2.0 , but is broken on 3.2.1 .
Email address with unsupported extension __EoT__ Hi , While wanting to generate a QR Code using your tool ( which is great by the way ) , I stumbled upon a problem : it said that my e-mail address was not valid since it uses an unsual extension ( @ perspectives.marketing ) : is there any way to go around that ? Thank you for your answer
some code39 barcodes with check digit do n't work __EoT__ The library is not able to scan some code39 barcodes with check digit . I did the test with different barcodes . - when the barcode ends with - or . checkdigit , it works - when the barcode ends with $ , % , + checkdigit , it does n't work . I think the problem is related to the calculation of the check digit ( total variable ) where we use the ALPHABET_STRING tab which contains the \* ( star ) character whereas the specification does n't include this star character as part of the possible check digit ( https : //en.wikipedia.org/wiki/Code_39 )
Non-continuous auto-focus not reactivated after light is toggled __EoT__ As seen at https : //groups.google.com/d/msg/zxing/lhTv25QBcBs/db89TTo5CQAJ the auto-focus wo n't start again if the front light is toggled , and auto-focus is in non-continuous mode .
Version 4.7.4 breaks ability to select camera __EoT__ The ability to select camera when calling ZXing via intent : https : //github.com/zxing/zxing/pull/135 Version 4.7.4 brakes that . Now when you request a non-default camera in the intent ( e.g . camera 1 ) , the scanning intent opens and immediately shows an error dialog : > **Barcode Scanner** > Sorry , the Android camera encountered a problem . You may need to restart the device . > **OK** The following appears in the logcat : < pre > D/SecCameraHardware ( 1937 ) : LSIHAL int android : :HAL_getCameraInfo ( int , camera_info* ) W/com.google.zxing.client.android.camera.open.OpenCameraInterface ( 23318 ) : Requested camera does not exist : 1 W/CaptureActivity ( 23318 ) : java.io.IOException : Camera.open ( ) failed to return object from driver W/CaptureActivity ( 23318 ) : at com.google.zxing.client.android.camera.CameraManager.openDriver ( CameraManager.java:82 ) W/CaptureActivity ( 23318 ) : at com.google.zxing.client.android.CaptureActivity.initCamera ( CaptureActivity.java:723 ) W/CaptureActivity ( 23318 ) : at com.google.zxing.client.android.CaptureActivity.surfaceCreated ( CaptureActivity.java:423 ) W/CaptureActivity ( 23318 ) : at android.view.SurfaceView.updateWindow ( SurfaceView.java:610 ) W/CaptureActivity ( 23318 ) : at android.view.SurfaceView.access $ 000 ( SurfaceView.java:93 ) W/CaptureActivity ( 23318 ) : at android.view.SurfaceView $ 3.onPreDraw ( SurfaceView.java:182 ) W/CaptureActivity ( 23318 ) :
Reverse Image on Nexus 5x __EoT__ Could be relating to Issue # 480 When opening the app , the image in inverted . Does not affect the ability to scan the QR code however it can be confusing trying to get the QR image in the right place : ) See attached image as an example . Thanks ! [ flipped ] ( https : //cloud.githubusercontent.com/assets/3996580/10604722/5bf41f96-771e-11e5-8ec8-8158b66615e8.png )
zxing.org ChartServlet allocates lots of objects in making BufferedImage __EoT__ Turns out that building a ` BufferedImage ` from pixels with a number of calls to ` setRGB ` is inefficient as it constantly allocates tiny arrays for each pixel . Making one big array upfront and setting it should be more efficient .
DataMatrixWriter generates wrong BitMatrix __EoT__ When trying to encode the string `` _DTCP01 '' ( without quotes ) , the DataMatrixWriter delivers a wrong BitMatrix . The BitMatrix represents the string `` _DTCP04 47 '' ( without quotes ) . The issue is easy to reproduce with the given string . Other examples work . This is actually a very annoying issue , since the reason for the behavior is not clear . Seems to be somehow related to the leading asterix . Remark : Barcode4j has the same issue . IText 's BarcodeDatamatrix renders the barcode as expected . As far as I understood the zxing package history , the DataMatrix implementation is based on Barcode4j - so maybe this is an inherited issue .
DataMatrixWriter generates wrong BitMatrix __EoT__ When trying to encode the string `` _DTCP01 '' ( without quotes ) , the DataMatrixWriter delivers a wrong BitMatrix . The BitMatrix represents the string `` _DTCP04 47 '' ( without quotes ) . The issue is easy to reproduce with the given string . Other examples work . This is actually a very annoying issue , since the reason for the behavior is not clear . Seems to be somehow related to the leading asterix . Remark : Barcode4j has the same issue . IText 's BarcodeDatamatrix renders the barcode as expected . As far as I understood the zxing package history , the DataMatrix implementation is based on Barcode4j - so maybe this is an inherited issue .
Added the ability to disable history saving __EoT__ Added a new preference to enable and disable history saving ( enabled by default ) .
datamatrix dimensions __EoT__ When using com.google.zxing.datamatrix.DataMatrixWriter encode ( String contents , BarcodeFormat format , int width , int height , Map < EncodeHintType , ? > hints ) and providing width and height , none of these parameters are pushed to the size of resulting BitMatrix , so it is really small even if dimensions are 400x400 for example .
Decoding multiple clear datamatrix codes on single page fails __EoT__ Hi there , I have a page with multiple datamatrix codes , but the decoding process with zxing always fails . I tried to decode with clearImage from inlite and it just works fine ? Looking forward to here from you soon . Regards Mike Here is an example : ! [ datamatrix ] ( https : //cloud.githubusercontent.com/assets/10175856/5423605/47669362-82c6-11e4-9317-6e42242aee7d.png ) ZXing Version is 3.1.0 That 's my code : public class DMReader { `` ` public static void main ( String [ ] args ) throws Exception { Thread.sleep ( 1000 ) ; BufferedImage image = ImageIO.read ( new File ( `` C : \\temp\\datamatrix.png '' ) ) ; if ( image ! = null ) { LuminanceSource source = new BufferedImageLuminanceSource ( image ) ; BinaryBitmap bitmap = new BinaryBitmap ( new HybridBinarizer ( source ) ) ; DataMatrixReader dataMatrixReader = new DataMatrixReader ( ) ; Hashtable < DecodeHintType , Object > hints = new Hashtable < DecodeHintType , Object > ( ) ; hints.put ( DecodeHintType.TRY_HARDER , Boolean.TRUE ) ; // Result decode = dataMatrixReader.decode ( bitmap , hints ) ; GenericMultipleBarcodeReader reader = new GenericMultipleBarcodeReader ( dataMatrixReader )
Any DataMatrix barcode 144x144 not read __EoT__ I integrated Zxing to read DataMatrix barcodes . I have a database of over 2000 images . all barcodes are read , but 144x144 barcodes . I attached an image . The image encodes a few digits in a 144x144 barcode . has the datamatrix 144x144 reading fixed ? is this a known issue ? this barcode has 10 datablocks . The reader decides that each datablocks has errors , and this is not the case . When I save and review the bitmatrix , it does match 100 % the input image . ! [ barcode_144_144 ] ( https : //cloud.githubusercontent.com/assets/9968625/5248103/2e913efc-7946-11e4-9f19-f177d458e959.jpg ) thanks
improve core test cases __EoT__ See the single commit notes .
mecard deletes + from the international telephone prefix __EoT__ mecard deletes `` + '' as international telephone prefix , is that wanted ? it 's a problem to scan it to the cellphone addressbook . Thank you
ByQuadrantReader - QRCode ResultPoint coordinate __EoT__ Hi , I understand QRCodeMultiReader ( ) .decodeMultiple scans the entire image trying to find QRCode and it usually fails when there are multiple QRCodes close to each other . However , whenever it does detect a QRCode , it will report the absolute image coordinate in the ResultPoints . ByQuadrantReader does a much better job of detecting multiple QRCodes in an image , but ResultPoints appears to be relative to the quadrant instead of to the image . Is there a way for ByQuadrantReader to provide the absolute image coordinate in ResultPoints ? For example : QRCodeMultiReader ( ) .decodeMultiple would give : '' MyQRCodeText '' ( 746.5,634.5 ) ( 744.5,549 ) ( 835.0,545.5 ) ByQuadrantReader would give : '' MyQRCodeText '' ( 746.5,274.5 ) ( 744.5,189.5 ) ( 835.0,185.16667 )
Wifi password is set incorrectly when it ends with a backslash __EoT__ Scanned QR code data : ` WIFI : T : WPA ; S : test ; P : my_password\\ ; ; ` - > Password in wpa_supplicant.conf : ` my_password\ ; ` Scanned QR code data : ` WIFI : T : WPA ; S : test ; P : my_password\\ ; ` - > Entry is not entered at all Expected result is that the stored password is : ` my_password\ `
Add Thai translation __EoT__ Thanapon Namjittrong submitted a translation to Thai . I will submit this .
Codabar scanning and rendering issue __EoT__ Hello , I 'm currently using ZXing for capturing and rendering bar codes . I 'm experiencing an issue with CodaBar where the barcode I get from '' com.google.zxing.client.android.SCAN '' intent.getStringExtra ( ZXING_SCAN_RESULT_FORMAT ) - > codabar intent.getStringExtra ( ZXING_SCAN_RESULT ) - > 12345678904 does not contain the sentinels , ( in this case : 12345678904 is the number ) and when it is passed to com.google.zxing.oned.CodaBarWriter it is being validated and expected to have the sentinels ( lines 39-47 fo CodaBarWriter 's encode method ) . ! [ cropped barcode ] ( https : //cloud.githubusercontent.com/assets/8050638/3460502/df20e0c0-0217-11e4-9bb5-57ad25831b99.png ) Here 's the barcode I am scanning . You may have to enlarge it a bit to make it clear enough to scan .
PDF Barcode generation giving strange results __EoT__ Platform : Android 4.0+ Zxing Version : 3.0.1 Barcode Format : PDF417 Since CP437 encoding is n't present on Android I 've tried setting different encodings to render a PDF417 barcode but it is prepending extra characters that vary based on the encoding . US-ASCII Prepends with 'A' ISO-8859-1 Prepends with 'AB' UTF-8 Prepends with 'A\s' UTF16 prepends stranger characters and actually loses a character from the original source . Using the following to set the Character set hints.put ( EncodeHintType.CHARACTER_SET , `` US-ASCII '' ) ; Is there anyway to prevent the rendered barcode from prefixing these characters ?
PDF Barcode generation giving strange results __EoT__ Platform : Android 4.0+ Zxing Version : 3.0.1 Barcode Format : PDF417 Since CP437 encoding is n't present on Android I 've tried setting different encodings to render a PDF417 barcode but it is prepending extra characters that vary based on the encoding . US-ASCII Prepends with 'A' ISO-8859-1 Prepends with 'AB' UTF-8 Prepends with 'A\s' UTF16 prepends stranger characters and actually loses a character from the original source . Using the following to set the Character set hints.put ( EncodeHintType.CHARACTER_SET , `` US-ASCII '' ) ; Is there anyway to prevent the rendered barcode from prefixing these characters ?
PDF Barcode generation giving strange results __EoT__ Platform : Android 4.0+ Zxing Version : 3.0.1 Barcode Format : PDF417 Since CP437 encoding is n't present on Android I 've tried setting different encodings to render a PDF417 barcode but it is prepending extra characters that vary based on the encoding . US-ASCII Prepends with 'A' ISO-8859-1 Prepends with 'AB' UTF-8 Prepends with 'A\s' UTF16 prepends stranger characters and actually loses a character from the original source . Using the following to set the Character set hints.put ( EncodeHintType.CHARACTER_SET , `` US-ASCII '' ) ; Is there anyway to prevent the rendered barcode from prefixing these characters ?
PDF Barcode generation giving strange results __EoT__ Platform : Android 4.0+ Zxing Version : 3.0.1 Barcode Format : PDF417 Since CP437 encoding is n't present on Android I 've tried setting different encodings to render a PDF417 barcode but it is prepending extra characters that vary based on the encoding . US-ASCII Prepends with 'A' ISO-8859-1 Prepends with 'AB' UTF-8 Prepends with 'A\s' UTF16 prepends stranger characters and actually loses a character from the original source . Using the following to set the Character set hints.put ( EncodeHintType.CHARACTER_SET , `` US-ASCII '' ) ; Is there anyway to prevent the rendered barcode from prefixing these characters ?
PDF Barcode generation giving strange results __EoT__ Platform : Android 4.0+ Zxing Version : 3.0.1 Barcode Format : PDF417 Since CP437 encoding is n't present on Android I 've tried setting different encodings to render a PDF417 barcode but it is prepending extra characters that vary based on the encoding . US-ASCII Prepends with 'A' ISO-8859-1 Prepends with 'AB' UTF-8 Prepends with 'A\s' UTF16 prepends stranger characters and actually loses a character from the original source . Using the following to set the Character set hints.put ( EncodeHintType.CHARACTER_SET , `` US-ASCII '' ) ; Is there anyway to prevent the rendered barcode from prefixing these characters ?
Fix for PDF417 decoding with numeric compaction in a corner case __EoT__ That sample PDF417 code fails to decode because of a small error in the numeric compaction processing . ! [ 5 ] ( https : //cloud.githubusercontent.com/assets/3475026/3192189/45382b74-ece3-11e3-92bb-429378cc01ba.png ) A small fix for it : < pre > ... /com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java | 8 +++++ -- - 1 file changed , 5 insertions ( + ) , 3 deletions ( - ) diff -- git a/core/src/main/java/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java b/core/src/main/java/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java index ab97a55..d1ea2d4 100644 -- - a/core/src/main/java/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java +++ b/core/src/main/java/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java @ @ -545,9 +545,11 @ @ final class DecodedBitStreamParser { // while in Numeric Compaction mode ) serves to terminate the // current Numeric Compaction mode grouping as described in 5.4.4.2 , // and then to start a new one grouping . - String s = decodeBase900toBase10 ( numericCodewords , count ) ; - result.append ( s ) ; - count = 0 ; + if ( count > 0 ) { + String s = decodeBase900toBase10 ( numericCodewords , count ) ; + result.append ( s ) ; + count = 0 ; + } } } return codeIndex ; < /pre >
Open links with non-http ( s ) scheme __EoT__ When scanning a barcode containing a link that does n't have http ( s ) as scheme , only the host : port/path portion is recognized as link and clickable , e.g . : QR code contains : opc.tcp : //test.samplehost.com:4841 Clickable link : test.samplehost.com:4841 We 're developing an Android application that has the opc.tcp scheme registered and would open if a link was clicked with the opc.tcp scheme . Using Barcode Scanner this is not possible , as it opens test.samplehost.com:4841 in the browser . Please improve the URL parser to detect non-http ( s ) schemes and allow to click them . Cheers !
PURE_BARCODE fails on certain dense QR codes __EoT__ For some dense QR codes , where the bottom-right corner is white , when using PURE_BARCODE mode , the decoding fails . It 's a small off-by-one error .
Another AIOOBE with PDF 417 __EoT__ With core-3.0.1.jar I occasionally get the following crash when scanning PDF 417 codes with Android device ( BLU LIfe Play , Android 4.2.1 ) : -- - com.google.zxing.pdf417.decoder.PDF417ScanningDecoder : java.lang.ArrayIndexOutOfBoundsException : length=7 ; index=7 StackTrace : com.google.zxing.pdf417.decoder.PDF417ScanningDecoder.createBarcodeMatrix ( PDF417ScanningDecoder.java:348 ) StackTrace : com.google.zxing.pdf417.decoder.PDF417ScanningDecoder.createDecoderResult ( PDF417ScanningDecoder.java:252 ) StackTrace : com.google.zxing.pdf417.decoder.PDF417ScanningDecoder.decode ( PDF417ScanningDecoder.java:123 ) StackTrace : com.google.zxing.pdf417.PDF417Reader.decode ( PDF417Reader.java:87 ) StackTrace : com.google.zxing.pdf417.PDF417Reader.decode ( PDF417Reader.java:61 ) StackTrace : com.google.zxing.MultiFormatReader.decodeInternal ( MultiFormatReader.java:171 ) StackTrace : com.google.zxing.MultiFormatReader.decodeWithState ( MultiFormatReader.java:85 ) -- - Note that this does not seem to be the same problem as in issue # 67 , because that problem has already been fixed in core library version 3.0.1 . Also the stack trace is different . I assume the error occurs with multiple PDF 417 images . I have received it with 2 images . One of those images was printed from http : //en.wikipedia.org/wiki/PDF417 . The problem seems to occur more often if there are problems decoding the image ( low light , small image , camera not positioned well etc . ) .
PDF417 decodes the character ' ] ' incorrectly as ' } ' __EoT__ I tried to encode something like that : [ aaa ] After decoding I get the result : [ aaa } The error ( in my opinion ) is in the DecodedBitStreamParser.java : private static final char [ ] PUNCT_CHARS = { ' ; ' , ' < ' , ' > ' , ' @ ' , ' [ ' , '\ ' , ' } ' , '_ ' , ' ` ' , '~ ' , ' ! ' , '\r ' , '\t ' , ' , ' , ' : ' , '\n ' , '- ' , ' . ' , ' $ ' , '/ ' , ' '' ' , '| ' , '* ' , ' ( ' , ' ) ' , ' ? ' , ' { ' , ' } ' , '\ '' } ; should be private static final char [ ] PUNCT_CHARS = { ' ; ' , ' < ' , ' > ' , ' @ ' , ' [ ' , '\ ' , ' ] ' , '_
PDF417 format - Nullpointer exception while generating PDF417 barcode __EoT__ FATAL EXCEPTION : AsyncTask # 2 java.lang.RuntimeException : An error occured while executing doInBackground ( ) at android.os.AsyncTask $ 3.done ( AsyncTask.java:278 ) at java.util.concurrent.FutureTask $ Sync.innerSetException ( FutureTask.java:273 ) at java.util.concurrent.FutureTask.setException ( FutureTask.java:124 ) at java.util.concurrent.FutureTask $ Sync.innerRun ( FutureTask.java:307 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:137 ) at android.os.AsyncTask $ SerialExecutor $ 1.run ( AsyncTask.java:208 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1076 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:569 ) at java.lang.Thread.run ( Thread.java:856 ) Caused by : java.lang.NullPointerException at com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder.encodeHighLevel ( PDF417HighLevelEncoder.java:169 ) at com.google.zxing.pdf417.encoder.PDF417.generateBarcodeLogic ( PDF417.java:649 ) at com.google.zxing.pdf417.PDF417Writer.bitMatrixFromEncoder ( PDF417Writer.java:98 ) at com.google.zxing.pdf417.PDF417Writer.encode ( PDF417Writer.java:78 ) ... ... ... ... ... at android.os.AsyncTask $ 2.call ( AsyncTask.java:264 ) at java.util.concurrent.FutureTask $ Sync.innerRun ( FutureTask.java:305 ) ... 5 more
Attempt to read default encoding system property triggers AccessControlException __EoT__ In our environment , the security.policy does n't explicitly permit to read the file.encoding system property . Therefore , we experience a crash when parsing a QR code . # # Could you provide a workaround or create a fallback default encoding in case of security restrictions ? java.lang.ExceptionInInitializerError : null at com.google.zxing.qrcode.decoder.DecodedBitStreamParser.decodeByteSegment ( DecodedBitStreamParser.java:228 ) at com.google.zxing.qrcode.decoder.DecodedBitStreamParser.decode ( DecodedBitStreamParser.java:114 ) at com.google.zxing.qrcode.decoder.Decoder.decode ( Decoder.java:115 ) at com.google.zxing.qrcode.QRCodeReader.decode ( QRCodeReader.java:77 ) at com.google.zxing.MultiFormatReader.decodeInternal ( MultiFormatReader.java:170 ) at com.google.zxing.MultiFormatReader.decode ( MultiFormatReader.java:69 ) at barcodescanner.actions.getCodeFromImage.readCode ( getCodeFromImage.java:143 ) at barcodescanner.actions.getCodeFromImage.executeAction ( getCodeFromImage.java:106 ) at barcodescanner.actions.getCodeFromImage.executeAction ( getCodeFromImage.java:46 ) at com.mendix.systemwideinterfaces.core.UserAction.execute ( SourceFile:53 ) at com.mendix.core.actionmanagement.CoreAction.doCall ( SourceFile:291 ) at com.mendix.core.actionmanagement.CoreAction.call ( SourceFile:276 ) at com.mendix.core.actionmanagement.ActionManager.executeSync ( SourceFile:204 ) at com.mendix.core.component.InternalCore.execute ( SourceFile:259 ) at com.mendix.is.execute ( SourceFile:42 ) at com.mendix.jb.a ( SourceFile:47 ) at com.mendix.ja.a ( SourceFile:193 ) at com.mendix.ja.executeAction ( SourceFile:148 ) at com.mendix.systemwideinterfaces.core.UserAction.execute ( SourceFile:53 ) at com.mendix.core.actionmanagement.CoreAction.doCall ( SourceFile:291 ) at com.mendix.core.actionmanagement.CoreAction.call ( SourceFile:276 ) at com.mendix.core.actionmanagement.ActionManager.executeSync ( SourceFile:204 ) at com.mendix.core.component.InternalCore.executeSync ( SourceFile:232 ) at com.mendix.modules.microflowengine.actions.SubMicroflowAction.execute ( SourceFile:33 ) at com.mendix.jb.a ( SourceFile:47 ) at com.mendix.ja.a ( SourceFile:193 ) at com.mendix.ja.executeAction ( SourceFile:148 ) at com.mendix.systemwideinterfaces.core.UserAction.execute ( SourceFile:53
Avoid requiring Charset Cp437 until absolutely necessary __EoT__ See http : //stackoverflow.com/questions/22706625/unsupportedcharsetexception-cp437-after-zxing-update/ Since Android does not have the ` Cp437 ` charset , or at least it does n't in some versions , it is important to avoid ` Charset.forName ( `` Cp437 '' ) ` until really necessary . Encoding , for example , PDF417 will still fail if this charset is used , but not all PDF417 encoding modes use it . Also , it should try the alternate name ` IBM437 ` for the charset .
Crashes in Barcode Scanner on Android __EoT__ We are using your barcode scanner for one of our apps . We switched from embedding your code into our app ( which was strongly not recommended by you ) to calling your app by the integration project . However , sometimes ( latest version of app ) the scanner crashes with one of the following exceptions and sometimes it crashes the camera , so that we need to reboot the phone . I can not tell you any exception for the latter case , but a `` simple '' crash produces the following one . Device : Samsung Galaxy Tab 10.1 ( GT-N8010 ) Android 4.1.2 `` ` 03-20 08:46:18.445 21876-21904/ ? W/AsyncTask﹕ java.lang.InterruptedException at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly ( AbstractQueuedSynchronizer.java:1280 ) at java.util.concurrent.FutureTask $ Sync.innerGet ( FutureTask.java:219 ) at java.util.concurrent.FutureTask.get ( FutureTask.java:82 ) at android.os.AsyncTask $ 3.done ( AsyncTask.java:295 ) at java.util.concurrent.FutureTask $ Sync.innerCancel ( FutureTask.java:293 ) at java.util.concurrent.FutureTask.cancel ( FutureTask.java:75 ) at android.os.AsyncTask.cancel ( AsyncTask.java:467 ) at com.google.zxing.client.android.camera.AutoFocusManager.cancelOutstandingTask ( AutoFocusManager.java:99 ) at com.google.zxing.client.android.camera.AutoFocusManager.start ( AutoFocusManager.java:81 ) at com.google.zxing.client.android.camera.AutoFocusManager $ AutoFocusTask.doInBackground ( AutoFocusManager.java:127 ) at android.os.AsyncTask $ 2.call ( AsyncTask.java:287 ) at java.util.concurrent.FutureTask $ Sync.innerRun ( FutureTask.java:305 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:137 ) at
Validation for custom search URL fails __EoT__ The validation code for the custom search URL in PreferencesFragment seems to pass the user input to the URL class without removing the placeholders ( % s etc ) . Unfortunately this seems to yield a syntax error on KitKat as % s is not a valid escape code and thus prevents the use of a custom search URL . If I replace the % with % 25 ( escaped % ) the URL is accepted but the Barcode contents does not get inserted . Test case : KitKat on Galaxy S4 URL rejected : https : //www.google.com/search ? q= % s URL accepted but not working : https : //www.google.com/search ? q= % 25s Inserting the rejected URL directly into the preferences file ( as root ) works as expected . Possible solution : Substitution of the placeholders with an empty string prior to the validation .
New UI to webapp __EoT__ ! [ ui1 ] ( https : //f.cloud.github.com/assets/860012/2337092/2eb88052-a499-11e3-8ef9-1448cbaf6a51.png ) This commit provides very fancy webapp UI . When you try to access ZXing from webpage , you 'll see this refreshed page if you do n't have Barcode Scanner installed yet .
Validation for custom search URL fails __EoT__ The validation code for the custom search URL in PreferencesFragment seems to pass the user input to the URL class without removing the placeholders ( % s etc ) . Unfortunately this seems to yield a syntax error on KitKat as % s is not a valid escape code and thus prevents the use of a custom search URL . If I replace the % with % 25 ( escaped % ) the URL is accepted but the Barcode contents does not get inserted . Test case : KitKat on Galaxy S4 URL rejected : https : //www.google.com/search ? q= % s URL accepted but not working : https : //www.google.com/search ? q= % 25s Inserting the rejected URL directly into the preferences file ( as root ) works as expected . Possible solution : Substitution of the placeholders with an empty string prior to the validation .
Kindle Fire HDX camera orientation inverted __EoT__ Install BarcodeScanner-4.5.1.apk from the downloads section on a Kindle Fire HDX Notice that the UI is properly oriented in landscape mode but the camera preview is inverted ( up-side-down ) The UI should be properly oriented in landscape mode ( as it is ) but the camera preview should also be right-side-up . This issue occurs whether the Kindle 's `` Auto-Rotate '' feature is enabled or disabled . ! [ device-2014-01-15-101638 ] ( https : //f.cloud.github.com/assets/822522/1947259/d3ccbee4-8047-11e3-817a-8e33b5b6146b.png ) Ported from https : //code.google.com/p/zxing/issues/detail ? id=1833
Scanning from web page - invalid or local URL __EoT__ HI , Thanks for a brilliant product ! I 've noticed in my development and testing , that certain return URLs do n't work when scanning from a web page . Also , there 's no indication that the URL is invalid , all that happens is that the barcode app never returns to the web browser . If I use the complete URL , of either my full site ( http : //foo.com/add/ { CODE } ) or my dev machine ( http : //192.168.2.5/add/ { CODE { ) , it works fine . However , if I use a 'partial ' URL , like '/add/ { CODE } ' or '~/add/ { CODE } , the app scans fine , but never returns to the web browser .
Specify allowed EAN extensions as a hint __EoT__ Related to this question : http : //stackoverflow.com/questions/8544503/zxing-scanning-barcode-with-upc-5-supplemental The use case is an application that needs to scan EAN-13 + EAN-5 barcodes , optionally also needing to allow other formats ( e.g . QR codes ) , but not EAN-13 by itself . The actual decoding of EAN-5 works perfectly . The problem is that most of the time , the barcode scanner picks up the normal EAN-13 part before it found the EAN-5 extension , and returns only that . I 've also found that it sometimes only returns the first two characters , as if it was an EAN-2 extension . This change allows you to specify a hint to not return any EAN/UPC barcode , unless it found an extension of the specified length ( EAN-2 , EAN-5 or both ) . This is the least obtrusive way I 've found to allow scanning of EAN-13 + EAN-5 barcodes , while still allowing it to be used with other formats in MultiFormatReader . An alternative and slightly more flexible solution would be to add formats like EAN_13_WITH_EAN_5 , but there are no many combinations to make this practical .
Reduce possibility of detecting white rectangles within barcodes __EoT__ Modified WhiteRectangleDetector to continue expanding the rectangle until each side has passed through at least one black point . ( Or until the edge of the image is reached , of course . )
zh_TW translation updates , including help documents ( without changelog ) __EoT__
Scanning PDF417 crashes on android __EoT__ Tested on latest version zxing core-3.0.0-SNAPSHOT and Android app BBarcodeScanner-release.apk on Nexus 5 , Android 4.4.2 Scanning part of PDF417 barcode causes ArrayIndexOutOfBoundsException steps to reproduce : -install mentioned android app - turn on aztec/PDF417 scanning - try to scan http : //upload.wikimedia.org/wikipedia/commons/c/c6/Sample_PDF417.png -scanning entire image does not work but does not cause app to crash -now try to scan with only bottom-half of the image ( or less than half ) in the crop area -application crashes with ArrayIndexOutOfBoundsException FATAL EXCEPTION : Thread-2883 Process : com.google.zxing.client.android , PID : 10770 java.lang.ArrayIndexOutOfBoundsException : length=24 ; index=24 at com.google.zxing.pdf417.decoder.PDF417ScanningDecoder.adjustBoundingBox ( PDF417ScanningDecoder.java:146 ) at com.google.zxing.pdf417.decoder.PDF417ScanningDecoder.decode ( PDF417ScanningDecoder.java:71 ) at com.google.zxing.pdf417.PDF417Reader.decode ( PDF417Reader.java:61 ) at com.google.zxing.MultiFormatReader.decodeInternal ( MultiFormatReader.java:171 ) at com.google.zxing.client.android.DecodeHandler.handleMessage ( DecodeHandler.java:58 ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:136 ) at com.google.zxing.client.android.DecodeThread.run ( DecodeThread.java:110 )
codepage and ECI support for PDF417 encoder __EoT__ I looked through the last changes of the PDF417 encoder in Barcode4J and `` ported '' the codepage and ECI stuff to zxing . A patch is attached . Ported from https : //code.google.com/p/zxing/issues/detail ? id=1792
codepage and ECI support for PDF417 encoder __EoT__ I looked through the last changes of the PDF417 encoder in Barcode4J and `` ported '' the codepage and ECI stuff to zxing . A patch is attached . Ported from https : //code.google.com/p/zxing/issues/detail ? id=1792
Minimum change needed to get the camera working on Glass __EoT__
Minimum change needed to get the camera working on Glass __EoT__
Replacement of `` compile '' with `` implementation '' __EoT__ As `` compile '' is going to be deprecated end-2018 , this PR replaces with `` implementation '' that is the new usage .
Call wrapped adapter 's lifecycle methods __EoT__ Call wrapped adapter 's lifecycle methods ( e.g . ` onAttachedToRecyclerView ` , ` onDetachedFromRecyclerView ` ) . I think that not calling these methods , if developer prepare dataset in these method , preparing will not be executed .
Fix README a typo . __EoT__
Update README Setup instructions __EoT__ This project depends on revision 25.4.0 of support libraries . Starting from this version , libraries are now installed using Google 's Maven repository , so it is now necessary to have that repository listed in your gradle config or else android studio will throw errors when trying to add recyclerview-animations a project .
bump up 2.2.7 __EoT__
Notify changes on an item __EoT__ Hi , nice library ! The animation on insert , delete and show item work very well but when I call `` notifyItemChanged '' or `` notifyDatasetChanged '' on the adapter , nothing happens .
Signal icon in Users & accounts menu section is distorted __EoT__ - [ x ] I have searched open and closed issues for duplicates - [ x ] I am submitting a bug report for existing functionality that does not work as intended - [ x ] I have read https : //github.com/signalapp/Signal-Android/wiki/Submitting-useful-bug-reports - [ x ] This is n't a feature request or a discussion topic -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- # # # Bug description Signal icon in Menu / Users & accounts is distorted since version 4.21.0 # # # Screenshots ! [ img_eggsif_3831034301093464465xy ] ( https : //user-images.githubusercontent.com/2994878/41581426-b18bf508-739e-11e8-9f11-9f2fe7c1acb4.jpg ) # # # Device info **Device : ** Sony Xperia XZ **Android version : ** 8.0.0 **Signal version : ** 4.21.2
MMS M-NotifyResp-Ind added if MMSC requires it __EoT__ < ! -- You can remove this first section if you have contributed before -- > # # # First time contributor checklist < ! -- replace the empty checkboxes [ ] below with checked ones [ x ] accordingly -- > - [ x ] I have read [ how to contribute ] ( https : //github.com/WhisperSystems/Signal-Android/blob/master/CONTRIBUTING.md ) to this project - [ x ] I have signed the [ Contributor License Agreement ] ( https : //whispersystems.org/cla/ ) # # # Contributor checklist < ! -- replace the empty checkboxes [ ] below with checked ones [ x ] accordingly -- > - [ x ] I am following the [ Code Style Guidelines ] ( https : //github.com/WhisperSystems/Signal-Android/wiki/Code-Style-Guidelines ) - [ x ] I have tested my contribution on these devices : * Nexus 5x , Android 7.1.2 - [ x ] My contribution is fully baked and ready to be merged as is - [ ] I ensure that all the open issues my contribution fixes are mentioned in the commit message of my first commit using the ` Fixes # 1234 ` [ syntax ] ( https
Back button in ShareActivity does n't route back to 3rd party sharing source __EoT__ I have : - [ x ] searched open and closed issues for duplicates - [ x ] read https : //github.com/WhisperSystems/Signal-Android/wiki/Submitting-useful-bug-reports -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- # # # Bug description I share something from a 3rd party app to Signal . If I then use the back arrow in ` ShareActivity ` I will be forwarded to the activity I used the last time in Signal . But I would expect to be forwarded to the 3rd party app I shared from . # # # Steps to reproduce - open a Signal activity ( a conversation , a settings page , an image , anything ... ) - leave Signal via home button - share something from another app to Signal - press the back arrow in the action bar of Signal 's `` Share with '' activity **Actual result : ** You see the activity you opened in the first step . **Expected result : ** You see the app from which you wanted to share something
Signal calls get stuck `` connecting '' when received on / made from a Google Pixel 2 __EoT__ I have : - [ X ] searched open and closed issues for duplicates - [ X ] read https : //github.com/WhisperSystems/Signal-Android/wiki/Submitting-useful-bug-reports -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- # # # Bug description Signal calls often get stuck `` connecting '' and do not get established on the Pixel 2 . This does not happen on a Nexus 5 under similar network conditions . ~~I suspect the issue is related to the Pixel 2.~~ ( Update : as it turns out , the issue resembles # 7396 on Samsung Galaxy S4 and # 7211 on Galaxy S5 ) . It keeps happening over time on different networks . The network has been tested ( see below ) and no problems are suspected . Signal text messages remain unaffected , even when a call can not be established between the devices , messages go through and lost call notifications arrive too . UPDATE : **Relay Signal Calls** Using `` always relay calls '' through the Signal server does **not**
Unable to Copy Just the Link from a Message __EoT__ < ! -- This is a bug report template . By following the instructions below and filling out the sections with your information , you will help the developers to get all the necessary data to fix your issue . You can also preview your report before submitting it . You may remove sections that are n't relevant to your particular case . Before we begin , please note that this tracker is only for issues , not questions or comments . If you are looking for support , please see our support center instead : https : //support.whispersystems.org/ or email support @ whispersystems.org Let 's begin with a checklist : replace the empty checkboxes [ ] below with checked ones [ x ] accordingly -- > I have : - [ x ] searched open and closed issues for duplicates - [ x ] read https : //github.com/WhisperSystems/Signal-Android/wiki/Submitting-useful-bug-reports -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- # # # Bug description I can copy an entire message and open any URL links in a message , but
Update dependencies __EoT__ - SDK 28 - Finally figured out why the trove4j dependency was n't working . It 's only on jcenter ( ) , and the new lint engine requires it on the regular repositories ( ) block as a result - Gradle 4.8.1 - RxJava 2.1.16 - Robolectric 3.8 - Remove now-unnecessary buildToolsVersion - Misc others
Defer to github releases page for latest RxJava version number __EoT__ see https : //github.com/ReactiveX/RxJava/releases/tag/v2.1.9
Upgrading guide __EoT__ I think we can appease a lot of people 's frustrations with changing APIs by being diligent about having an upgrade guide . It should be relatively easy to keep up to date ; every time you break an API , just update a doc and when we release we consolidate all of those items .
Normalize private constructors in util classes __EoT__ Should be : `` ` java private Foo ( ) { throw new AssertionError ( `` No instances '' ) ; } `` `
[ RFC ] Android-centric package structure __EoT__ What if we have rx.android.views , rx.android.context ... instead of r.a.observables r.a.observables , etc ? Currently we are forced to make some internal classes public just because they are under separate packages . If we have r.a.views for example , ViewObservable and depending operators can fit into the single package . This allows those internal classes to have package-local visibility , without blowing up the number of classes in a single package . Also , I feel this is more scalable than existing package structure . As we turn various Android APIs into reactive style , each package will become more crowded and less structured . The Android-centric package hierarchy doesn ’ t have that problem . After all , what RxAndroid care is about Android , not generic Rx abstraction . We can move some major classes including AndroidObservables to the top level packages ( rx.android ) for convenience . The class can be a facade to more focused classes . For example , bindActivity ( ) could just wrap ( hypothetical ) ActivityObservable # bind ( ) . Although I ’ m not that confident this works well , some variations
[ RFC ] Android-centric package structure __EoT__ What if we have rx.android.views , rx.android.context ... instead of r.a.observables r.a.observables , etc ? Currently we are forced to make some internal classes public just because they are under separate packages . If we have r.a.views for example , ViewObservable and depending operators can fit into the single package . This allows those internal classes to have package-local visibility , without blowing up the number of classes in a single package . Also , I feel this is more scalable than existing package structure . As we turn various Android APIs into reactive style , each package will become more crowded and less structured . The Android-centric package hierarchy doesn ’ t have that problem . After all , what RxAndroid care is about Android , not generic Rx abstraction . We can move some major classes including AndroidObservables to the top level packages ( rx.android ) for convenience . The class can be a facade to more focused classes . For example , bindActivity ( ) could just wrap ( hypothetical ) ActivityObservable # bind ( ) . Although I ’ m not that confident this works well , some variations
[ RFC ] Android-centric package structure __EoT__ What if we have rx.android.views , rx.android.context ... instead of r.a.observables r.a.observables , etc ? Currently we are forced to make some internal classes public just because they are under separate packages . If we have r.a.views for example , ViewObservable and depending operators can fit into the single package . This allows those internal classes to have package-local visibility , without blowing up the number of classes in a single package . Also , I feel this is more scalable than existing package structure . As we turn various Android APIs into reactive style , each package will become more crowded and less structured . The Android-centric package hierarchy doesn ’ t have that problem . After all , what RxAndroid care is about Android , not generic Rx abstraction . We can move some major classes including AndroidObservables to the top level packages ( rx.android ) for convenience . The class can be a facade to more focused classes . For example , bindActivity ( ) could just wrap ( hypothetical ) ActivityObservable # bind ( ) . Although I ’ m not that confident this works well , some variations
Support for views with OnItemClickListeners __EoT__ I am not sure if this is in the scope of the project , but the ` ViewObservable ` ` clicks ` , ` text ` , and ` input ` methods are pretty nice convenience methods . Today I found myself wanting an ` Observable ` for item clicks on a view with an adapter -- ie an ` AutoCompleteTextView ` with some autocomplete suggestions . It is pretty straightforward to add make a method to do this in my app , but would this be something worth adding to the project ?
2.x : Add materialize ( ) and dematerialize ( ) __EoT__ This PR adds the ` materialize ` operator to ` Maybe ` , ` Single ` and ` Completable ` to turn their signals into the corresponding ` Notification ` object . This operator has been available for ` Observable ` s ( and ` Flowable ` s ) from the beginning of the Rx API . The methods return ` Single < Notification < T > > ` . To complement , the ` dematerialize ` operator is only defined for ` Single ` and results in a ` Maybe ` . If accepted , I 'll draw the correct marble diagrams for them in a separate PR . Resolves : # 6272
Expose the Keep-Alive value of the IO Scheduler as System property . __EoT__ Currently , the Keep-Alive is 60 seconds constant : [ IoScheduler.java # L37 ] ( https : //github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/internal/schedulers/IoScheduler.java # L37 ) . The configuration could be done via ` Integer.getInteger ( ) ` similar to how ` priority ` is configurable : [ L52 ] ( https : //github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/internal/schedulers/IoScheduler.java # L52 ) . The documentation of [ Schedulers.java # L32 ] ( https : //github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/schedulers/Schedulers.java # L32 ) and [ Schedulers.java # L158 ] ( https : //github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/schedulers/Schedulers.java # L158 ) should also describe this option .
2.x : Improve the package docs of io.reactivex.schedulers __EoT__ This adds some links to the important components within the package ( allows faster navigation from the Overview page of the JavaDocs ) .
2.x : Update Error Handling Operators docs __EoT__ This PR updates the ` Error-Handling-Operators.md ` wiki page as per issue # 6132 : - Update operator list - Add examples The page now follows the structure that was defined in # 6131 .
Fix broken markdown __EoT__ Fix broken mark down and change the link to CONTRIBUTING
Use JUnit 's assert format for assert messages to enable better suppor… __EoT__ This changes the message format of `` assert '' to match that of JUnit . This way IDEs like IntelliJ IDEA are able to parse it and offer functionality like `` compare values '' .
Add generate examples to Creating-Observables.md in Wiki __EoT__ Add documentation and example to the wiki for generate . Resolves : # 6226
2.x : Add Completable.delaySubscription marble , fix some javadoc __EoT__ - Add marbles to the new ` Completable.delaySubscription ` operator . - Fix the method name referenced in the ` ConditionalSubscriber ` javadoc . ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delaySubscription.t.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delaySubscription.ts.png )
2.x : Cleanup code style , commas , spaces , docs __EoT__ - Add missing spaces after commas and semicolons - Add or fix first sentences without commas in javadocs
2.x : Fix flaky sample ( ) backpressure test , improve coverage __EoT__ Use processors to trigger the ` MissingBackpressureException ` case instead of the timer , which could fire prematurely and stop the sequence before the first item was sent by the ` BehaviorProcessor ` . Also small improvements to the code coverage of ` FlowableSample ` . Fixes # 6253 .
2.x : Expand and fix Completable.delaySubscription tests __EoT__ Expand , fix and move the tests of # 6242 into a dedicated test file .
RxJava 2.x does not have delaySubscription API for Completable . __EoT__ Seems like an oversight since this exists in 1.x .
Add Nullable annotations for blocking methods in Completable __EoT__ Just add @ Nullable annotations to blockingGet ( ) methods in Completable class .
2.x Wiki : Remove mention of i.r.f.Functions __EoT__ The ` io.reactivex.functions.Functions ` utility method has been made internal a long ago and should not be mentioned . Resolves : # 6239
2.x : Adjust Undeliverable & OnErrorNotImpl message to use full inner exception __EoT__ With ` UndeliverableException ` and ` OnErrorNotImplementedException ` , the wrapped exception may not have a message and the top line simply contains an unhelpful ` null ` : io.reactivex.exceptions.UndeliverableException : The exception could not be delivered to the consumer because it has already canceled/disposed the flow or the exception has nowhere to go to begin with . Further reading : https : //github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0 # error-handling | null at io.reactivex.plugins.RxJavaPlugins.onError ( RxJavaPlugins.java:367 ) at io.reactivex.internal.operators.observable.ObservableCreate $ CreateEmitter .onError ( ObservableCreate.java:73 ) at io.reactivex.internal.operators.observable.ObservableCreate .subscribeActual ( ObservableCreate.java:43 ) at io.reactivex.Observable.subscribe ( Observable.java:12090 ) Caused by : java.io.InterruptedIOException This PR adds the full ` toString ( ) ` value of the wrapped exception to the main line . This is also more useful when the user posting the stacktrace does n't provide the ` Caused by : ` part for some reason .
Fix docs typos __EoT__ Fix typos in documentation . ~~I also fixed them in wiki , but since GitHub does n't support wiki contributions I do n't know how to proceed with the changes . They 're in a separate [ repo ] ( https : //github.com/m3sv/RxJava-wiki/commit/a1b88eb71bc68ca517cab11d1d5d68ed4c05a50d ) .~~
Add timeout and unit to TimeoutException message __EoT__ This is a small enhancement to help with crash/log debugging . Right now often times you get a stacktrace that points only to RxJava : `` ` java java.util.concurrent.TimeoutException at io.reactivex.internal.operators.flowable.FlowableTimeoutTimed $ TimeoutSubscriber.onTimeout ( FlowableTimeoutTimed.java:137 ) at io.reactivex.internal.operators.flowable.FlowableTimeoutTimed $ TimeoutTask.run ( FlowableTimeoutTimed.java:169 ) at io.reactivex.internal.schedulers.ScheduledRunnable.run ( ScheduledRunnable.java:66 ) at io.reactivex.internal.schedulers.ScheduledRunnable.call ( ScheduledRunnable.java:57 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:266 ) at java.util.concurrent.ScheduledThreadPoolExecutor $ ScheduledFutureTask.access $ 201 ( ScheduledThreadPoolExecutor.java:180 ) at java.util.concurrent.ScheduledThreadPoolExecutor $ ScheduledFutureTask.run ( ScheduledThreadPoolExecutor.java:293 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1149 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:624 ) at java.lang.Thread.run ( Thread.java:748 ) `` ` Adding ` timeout ` and ` unit ` values can help find related user code faster . I 'm not advocating for particular message , it can be something even shorter , like ` $ timeout $ unit ` . It can also be extracted in a method if you see value in that .
2.x : Cleanup Observable.flatMap drain logic __EoT__ Cleanup the drain logic of ` Observable.flatMap ` by removing unnecessary loops and fixing the index management in case of a fused failure in one of the sources triggering another round over the same source unnecessarily . Resolves : # 6231
Fix typos __EoT__ - Remove space and semicolon on README.md page
2.x JavaDocs : Remove unnecessary 's ' from ConnectableObservable __EoT__ Remove the unnecessary 's ' from the JavaDocs of ` ConnectableObservable.autoConnect ` .
2.x : Assert instead of print Undeliverable in some tests __EoT__ Set plugin error tracking in some tests to avoid printing out ` UndeliverableExceptions ` ( sometimes repeatedly in race tests ) and assert the specific exception ( s ) instead .
Fix terminology of cancel/dispose in the JavaDocs __EoT__ Resolves # 6196 Changing terminology from cancel - > dispose wherever appropriate in the following classes : - ` Observable.java ` - ` Single.java ` - ` Maybe.java ` - ` Completable.java ` Areas where I did _not_ change from cancel - > disposal include : - where the cancellation was in reference to a ` Flowable ` , ` Publisher ` , or a ` Future ` - ` test ( ) ` methods where the ` TestObserver ` returned actually has a ` cancel ( ) ` method
2.x : Fix toFuture marbles and descriptions __EoT__ This PR fixes the marble diagrams of ` Flowable.toFuture ` and ` Observable.toFuture ` to indicate : - multi-valued sources signal ` IndexOutOfBoundsException ` - Source has to be finite for the ` Future ` to terminate . ! [ image ] ( https : //github.com/ReactiveX/RxJava/wiki/images/rx-operators/Flowable.toFuture.png ) ! [ image ] ( https : //github.com/ReactiveX/RxJava/wiki/images/rx-operators/toFuture.o.png ) Resolves # 6198 ( also fixes the diagram for # 5813 ) .
Flowable.reduce ( BiFunction ) does not signal NoSuchElementException __EoT__ The JavaDocs of ` Flowable.reduce ( BiFunction ) ` incorrectly mentions that an empty source results in a ` NoSuchElementException ` . It returns a ` Maybe ` thus an empty source will result in an empty ` Maybe ` . The ` Observable.reduce ( BiFunction ) ` counterpart has the correct text . The `` If the source is empty , a NoSuchElementException is signaled . '' should be removed .
2.x : Fix refCount termination-reconnect race __EoT__ This PR modifies the ` refCount ` operator ( in both ` Flowable ` and ` Observable ` types ) to avoid certain termination-reconnection races . The original race could happen when the refCounted source terminated at the same time as new observers arrived , leaving those new observers hanging as they practically joined a dying connection and got possibly undercut by the ` dispose ` call . The change involve a new internal interface ` ResettableConnection ` that will allow resetting the connection object inside the connectable source if it is equal to the connection object known by the initiator of the original ` connect ` call . Fixes # 6185
2.x : Cleanup multiple empty lines in sources __EoT__ Remove 2+ empty lines from the sources .
Update Additional-Reading.md __EoT__ Check existing links , add new links about RxAndroid # 6132
Error handle on Completable.fromCallable with RxJavaPlugins __EoT__
2.x : Make Flowable.fromCallable consistent with the other fromCallables __EoT__ ` Flowable.fromCallable ` is one of [ the oldest ] ( https : //github.com/ReactiveX/RxJava/commits/2.x/src/main/java/io/reactivex/internal/operators/flowable/FlowableFromCallable.java ) 2.x operators and was overlooked when the handling of beyond-cancellation error delivery , aka the undeliverable exception handling was implemented across RxJava . This PR resolves this shortcoming by making it consistent with its sibling implementations . Resolves : # 6156
2.x : Fix marble of Maybe.flatMap events to MaybeSource __EoT__ Fix the marble diagram of the event-mapping [ ` Maybe.flatMap ` ] ( http : //reactivex.io/RxJava/2.x/javadoc/io/reactivex/Maybe.html # flatMap-io.reactivex.functions.Function-io.reactivex.functions.Function-java.util.concurrent.Callable- ) operator : ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMap.mmm.png ) Tracked in : # 5806
2.x : Clarify TestObserver.assertValueSet in docs and via tests __EoT__ Clarify that ` { TestObserver|TestSubscriber } .assertValueSet ` checks for all received items to be in the provided set , but that set can contain additional elements that could have been received . Unit tests have been added to demonstrate the expected behavior . Resolves : # 6151 .
2.x : cleanup newline separation , some field namings __EoT__ This PR cleans up some source code style inconsistencies : - Rename some atomic-subscription fields to ` upstream ` ( left out from # 6129 ) . - Make sure ` @ Test ` methods are separated by at most one empty newline - Make sure a closing curly brace and an annotation is only followed by one empty newline . - Add a test that checks for the above .
Grammar fix in README Scheduler description __EoT__ Scheduler description is grammatically error . Replaced **an unifrom** with **a uniform** .
2.x : Fix boundary fusion of concatMap and publish operator __EoT__ This PR fixes the lack of boundary fusion marker in the ` concatMap ` and ` publish ` operators that can break the thread-confinement expectation when using ` observeOn ` upstream and a thread-sensitive operator : `` ` java source.observeOn ( scheduler ) .map ( /* some thread-sensitive operation */ ) .publish ( ) // or concatMap `` ` By default , these operators may call ` poll ` from any of the participating threads which would otherwise dequeue ` observeOn ` and execute ` map ` on that thread . The fix adds the necessary flag to both operator 's ` onSubscribe ` logic . For a temporary workaround , one should use ` hide ( ) ` before such operators to make sure fusion does n't happen . Fixes : # 6144
2.x : Add concatArrayEagerDelayError operator ( expose feature ) __EoT__ This PR exposes the existing ` delayError ` capability of the ` concatMapEager ` operator as ` concatArrayEagerDelayError ` for both ` Flowable ` and ` Observable ` . In addition , the ` concatArrayEager ` and these new methods receive marble diagrams : # # # # Observable ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.nn.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEagerDelayError.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEagerDelayError.nn.png ) # # # # Flowable ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEager.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEager.nn.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEagerDelayError.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEagerDelayError.nn.png ) Resolves : # 6082 * ( Sidenote : one of the validators had to be adjusted due to false positive it produced . ) *
Add marble diagrams for various Single operators __EoT__ Here are marble diagrams for various Single operators that will close some of the # 5788 Marble for ` concatEager ( Publisher ) ` ! [ concateEagerP ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatEagerPublisher.png ) Marble for ` concatEager ( Iterable ) ` ! [ concateEagerI ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatEagerIterable.png ) Marble for ` create ` ! [ create ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/create.png ) Marble for ` ambWith ` ! [ ambWith ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/ambWith.png ) Marble for ` equals ` ! [ equals ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/equals.png ) Marble for ` merge ( source1 , source2 ) ` ! [ merge ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeTwo.png ) Marble for ` merge ( source1 , source2 , source3 ) ` ! [ mergeThree ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeThree.png ) Marble for ` merge ( source1 , source2 , source3 , source4 ) ` ! [ mergeFour ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeFour.png ) Marble for ` merge ( SingleSource < SingleSource > ) ` ! [ mergeSingleSource ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeSingleSource.png ) Marble for ` mergeWith ` ! [ mergeWith ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeWith.png ) Marble for `
2.x : Add marbles for Single.concat operator __EoT__ Here are marbles for ` concat ( Iterable ) ` , ` concat ( Publisher ) ` , ` concat ( Publisher , prefetch ) ` , ` concat ( Observable ) ` , ` concat ( source1 , source2 ) ` , ` concat ( source1 , source2 , source3 ) ` , ` concat ( source1 , source2 , source3 , source4 ) ` and ` concatArray ` operators that should close them at # 5788 . Marble for ` concat ( Iterable ) ` ! [ concatIterable ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatIterable.png ) Marble for ` concat ( Publisher ) ` ! [ concatPublisher ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatPublisher.png ) Marble for ` concat ( Publisher , prefetch ) ` ! [ concatPublisherN ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatPublisherPrefetch.png ) Marble for ` concat ( Observable ) ` ! [ concatObservable ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatObservable.png ) Marble for ` concat ( source1 , source2 ) ` ! [ concat2 ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatTwo.png ) Marble for ` concat ( source1 , source2 , source3 ) ` ! [ concat3 ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatThree.png ) Marble for `
2.x : Update Getting started docs __EoT__ This patch the following changes to the Getting started docs as per Issue No : # 6132 - Remove Troubleshooting guide - Bump RxJava versions to 2.2.0 for Gradle , Maven etc . Questions : - ~Looks like JFrog for RxJava 2 is broken or invalid now . Can we add Jitpack ? ~ - Need suggestions for ` Getting started from readme.md ` . Although , ` How to use RxJava ` or ` Alphabetical List of Operators ` , ` Additional-Reading.md ` can be great next steps .
Update RxJava Android Module documentation __EoT__ This patch updates the RxJava Android wiki page to point to the RxAndroid project and the RxAndroid wiki page . This refs # 6132 .
2.x : Update _Sidebar.md with new order of topics __EoT__ Change the sidebar to support the v2 features and suggest new topic orderings . Related tracking issue : # 6132
2.x : Remove fromEmitter ( ) in wiki __EoT__ Remove the mentions of ` fromEmitter ` from the ` Creating-Observables.md ` wiki page .
2.x : Flowable.onErrorResumeNext improvements __EoT__ This PR improves the structure of the ` onErrorResumeNext ` operator by inlining the subscription-arbiter and not updating the outstanding request amount one by one . The change reduces the per-item overhead , some indirection cost and the memory cost ( +8 bytes for the field , -16/-28 bytes due to the inlined header+field ) In addition , the null-check has been inlined into the resume function call so that the crash will now include the original exception as well as the NPE in a ` CompositeException ` , just like almost all other cases throughout RxJava .
Add marbles for Single.timer , Single.defer and Single.toXXX operators __EoT__ Here are marbles for ` defer ` , ` timer ( delay , unit ) ` , ` timer ( delay , unit , scheduler ) ` , ` toFlowable ` , ` toMaybe ` , ` toFuture ` operators in # 5788 Marble for ` defer ` : ! [ defer ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/Defer.png ) Marble for ` timer ( delay , unit ) ` : ! [ timer ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/Timer.png ) Marble for ` timer ( delay , unit , scheduler ) ` : ! [ timerScheduler ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/TimerScheduler.png ) Marble for ` toFuture ` , although for this one I believe we should add case when there is no event sent from Single as there will be timeout exception thrown : ! [ toFuture ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/toFuture.png ) Marble for ` toMaybe ` : ! [ toMaybe ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/toMaybe.png ) Marble for ` toFlowable ` , although here I didnt figured out what will happen if we request more than 1 event from flowable : ! [ toFlowable ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/toFlowable.png )
2.x : Improve Completable.onErrorResumeNext internals __EoT__ This PR improves the internals of the ` Completable.onErrorResumeNext ` operator : - Inline the ` Disposable ` management . - Reuse the same instance for observing the fallback ` CompletableSource ` . - Report null return of the ` errorMapper ` the same way as a crash via ` CompositeException ` . - The exceptions in the composite should be in the order **original** - > **mapper exception** .
2.x : Test cleanup __EoT__ This PR cleans up the tests : - Reduce stacktrace printouts due to undeliverable errors and turn them into assertions instead . - Rename local variables & arguments of ` Subscriber ` s from ` o ` and ` observer ` to the proper ` subscriber ` - Rename local variables & arguments of ` Flowable ` s from ` o ` and ` observable ` to the more appropriate ` f ` and ` flowable ` - Add more naming tests to ` CheckLocalVariablesInTests ` to support the previous two points .
6108 changed README to use Gradle 's implementation instead of compile __EoT__ fixes # 6108 Changed ` README.md ` to reflect Gradle 's more recent version of the [ library plugin ] ( https : //docs.gradle.org/current/userguide/java_library_plugin.html # sec : java_library_separation ) . I believe that RxJava should be using ` implementation ` , but I 'm not a Gradle expert , feel free to let me know if clients should be using ` api ` .
2.2 : Promote all Experimental/Beta API to standard __EoT__ This PR promotes all ` @ Experimental ` / ` @ Beta ` APIs to standard with version number **2.2** . ( In addition , it also fixes remnant markers from earlier promotions in internal files . ) # # # Operators - ** ` Flowable ` ** : - ` as ` - ` blockingSubscribe ( ... , prefetch ) ` + 2 - ` concatMapCompletable ` + 1 - ` concatMapCompletableDelayError ` + 2 - ` concatMapMaybe ` + 1 - ` concatMapMaybeDelayError ` + 2 - ` concatMapSingle ` + 1 - ` concatMapSingleDelayError ` + 2 - ` concatWith ` + 2 - ` groupBy ( ... , evictingMapFactory ) ` - ` limit ` - ` mergeWith ` + 2 - ` parallel ` + 2 - ` subscribe ( FlowableSubscriber ) ` - ` subscribeOn ( ... , requestOn ) ` - ` switchMapCompletable ` - ` switchMapCompletableDelayError ` - ` switchMapMaybe ` - ` switchMapMaybeDelayError ` - ` switchMapSingle ` - ` switchMapSingleDelayError ` - ` throttleLatest ` + 3 - ** ` Observable ` ** : - ` as ` - ` concatMapCompletable
Fixing javadoc 's code example of Observable # lift . __EoT__ Code example in javadoc for Observable # lift seems not compilable in 2.x . Also , parameter name of ObservableOperator # apply should be downstream I think .
2.x : Fix Completable mergeX JavaDoc missing dt before dd __EoT__ Couple of the ` < dt > < b > Error handling : < /b > < /dt > ` subheaders were missing from various ` Completable.mergeX ` operators in the JavaDocs .
2.x : Adjust JavaDoc stylesheet of dt/dd within the method details __EoT__ This PR adjusts the JavaDoc stylesheet so that the ` dt ` / ` dd ` listings in the detailed method descriptions no longer use monospaced font ( which should be generally reserved for ` { @ code } ` s and { @ link } ` s ) for better readability . Before : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/43001178-8edcff7c-8c24-11e8-9622-e7ee3515f0ca.png ) After : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/43001192-9c937754-8c24-11e8-84b0-f23518ae8a40.png )
2.x : Final set of missing Completable marbles ( +26 ) __EoT__ This PR contains the final set of missing ` Completable ` marbles ( # 5789 ) : # # # # repeat ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.repeat.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.repeat.n.png ) -- -- -- -- -- -- -- -- -- -- -- -- - # # # # repeatUntil ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.repeatUntil.png ) -- -- -- -- -- -- -- -- -- -- -- -- - # # # # repeatWhen ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.repeatWhen.png ) -- -- -- -- -- -- -- -- -- -- -- -- - # # # # retry ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.n.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.f.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.ff.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.nf.png ) -- -- -- -- -- -- -- -- -- -- -- -- - # # # # retryWhen ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retryWhen.png ) -- -- -- --
Update TestHelper.java : trivial typo fix __EoT__ Thank you for contributing to RxJava . Before pressing the `` Create Pull Request '' button , please consider the following points : - [ x ] Please give a description about what and why you are contributing , even if it 's trivial . Just a small typo fix . I grepped for the same misspelling and it only appeared in this file . - [ x ] Please include the issue list number ( s ) or other PR numbers in the description if you are contributing in response to those . N/A - [ x ] Please include a reasonable set of unit tests if you contribute new code or change an existing one . If you contribute an operator , ( if applicable ) please make sure you have tests for working with an ` empty ` , ` just ` , ` range ` of values as well as an ` error ` source , with and/or without backpressure and see if unsubscription/cancellation propagates correctly . N/A
2.x : Several more Completable marbles ( 7/19b ) __EoT__ This PR adds a couple of more marble diagrams to ` Completable ` ( # 5789 ) : # # # # subscribeOn ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.subscribeOn.png ) # # # # unsubscribeOn ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.unsubscribeOn.png ) # # # # toSingle , toSingleDefault ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toSingle.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toSingleDefault.png ) # # # # toFlowable ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toFlowable.png ) # # # # toMaybe ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toMaybe.png )
2.x : Add missing Completable marbles ( +19 , 07/19a ) __EoT__ This PR add even more missing marbles to ` Completable ` ( tracked by # 5789 ) : # # # # delay ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delay.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delay.s.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delay.sb.png ) # # # # doOnX ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnComplete.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnDispose.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnEvent.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnSubscribe.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnTerminate.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnError.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doAfterTerminate.png ) # # # # doFinally ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doFinally.png ) # # # # onErrorComplete ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorComplete.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorComplete.f.png ) # # # # onErrorResumeNext ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorResumeNext.png ) # # # # onTerminateDetach ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onTerminateDetach.png ) # # # # mergeWith
Add marbles for Single.amb operators __EoT__ Here are operators for ` amb ` and ` ambArray ` from # 5788 Marble for ` amb ` : ! [ amb ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/amb.png ) Marble for ` ambArray ` : ! [ ambArray ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/ambArray.png )
2.x : Add missing Completable marbles ( +17 , 07/18a ) __EoT__ This PR adds marble diagrams to various ` Completable ` operators : # # # # wrap ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.wrap.png ) # # # # using ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.using.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.using.b.png ) # # # # ambWith ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.ambWith.png ) # # # # andThen ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.c.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.s.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.m.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.o.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.p.png ) # # # # as , to ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.as.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.to.png ) # # # # compose ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.compose.png ) # # # # cache ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.cache.png ) # # # # blockingAwait ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingAwait.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingAwait.t.png
Single error operators marbles __EoT__ Here are marbles for # 5788 For ` error ( Callable ) ` ! [ errorCallable ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/ErrorCallable.png ) For ` error ( Throwable ) ` , only added error event to be red : ! [ errorThrowable ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/Error.png ) For ` onErrorReturn ` ! [ onErrorReturn ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/onErrorReturn.png ) For ` onErrorReturnItem ` ! [ onErrorReturnItem ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/onErrorReturnItem.png ) For ` onErrorResumeNext ( SingleSource ) ` ! [ onErrorResumeNext ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/onErrorResumeNext.png ) For ` onErrorResumeNext ( Function ) ` ! [ onErrorResumeNextFn ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/onErrorResumeNextWithFn.png )
Add marbles for Single.from operators __EoT__ Here are marbles for ` fromCallable ` , ` fromPublisher ` and ` fromObservable ` operators from # 5788 Marble for ` fromCallable ` ! [ fromCallable ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/fromCallable.png ) Marble for ` fromPublisher ` ! [ fromPublisher ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/fromPublisher.png ) Marble for ` fromObservable ` ! [ fromObservable ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/fromObservable.png )
2.x : More Completable marbles ( +18 ) , add Completable.fromMaybe __EoT__ This PR adds marble diagrams ( # 5789 ) to the following operators as well as adds the missing ` Completable.fromMaybe ` operator ( ` fromX ` of other types were already there , uses existing ` Maybe.ignoreElement ` 's underlying implementation ) . # # # # fromAction ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromAction.png ) # # # # fromCallable ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromCallable.png ) # # # # fromFuture ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromFuture.png ) # # # # fromMaybe ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromMaybe.png ) # # # # fromObservable ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromObservable.png ) # # # # fromPublisher ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromPublisher.png ) # # # # fromSingle ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromSingle.png ) # # # # mergeArray & mergeArrayDelayError ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.mergeArray.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.mergeArrayDelayError.png ) # # # # merge ( both ` Iterable ` and ` Publisher ` variants ) ! [ image ] (
Add marble diagrams for Single.repeat operators __EoT__ Here are marbles for ` repeat ` , ` repeat ( times ) ` and ` repeatWhen ` operator in # 5788 Please let me know if I need to change anything on the diagram itself . If not , please send me URL when you upload image within the project so I can change URL for the marble in the PR . I intentionally added two diagrams for ` repeatWhen ` as I would say its interesting case that people should be aware of . **EDIT : ** Here are marbles ` repeat ` operator : ! [ repeat ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/Repeat.png ) ` repeat ( count ) ` operator : ! [ repeat with count ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/RepeatCount.png ) ` repeatWhen ` operator : ! [ repeatWhen ] ( https : //raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/RepeatWhen.png )
2.x : Add Completable marble diagrams ( 07/17a ) __EoT__ This PR adds the following marble diagrams to ` Completable ` operators ( # 5789 ) : # # # # amb , ambArray ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.ambArray.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.amb.png ) # # # # complete ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.complete.png ) # # # # concatArray , concat ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concatArray.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concat.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concat.p.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concat.pn.png ) # # # # defer ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.defer.png ) # # # # error ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.error.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.error.f.png )
2.x : Improve class Javadoc of Single , Maybe and Completable __EoT__ This PR expands the Javadocs of ` Single ` , ` Maybe ` and ` Completable ` where the latter also receives an explanation marble : ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.png ) Please let me know if there is any property worthy of mentioning in the class ' JavaDocs as well as please look out for copy-paste mistakes .
Add marble diagram for Single.hide operator __EoT__ This should complete ` hide ` operator in # 5788 Please let me know if I need to change anything on the diagram itself . If not , please send me URL when you upload image within the project so I can change URL for the marble in the PR . Although I was n't sure if I should represent somehow that ` Disposable ` is hidden as well . If so , can you please tell me how to represent that on marble ?
2.x : Add Maybe.hide ( ) marble diagram __EoT__ Add marble to ` Maybe.hide ( ) ` : ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.hide.png )
Add marble diagram to the Single.filter method __EoT__ Hopefully this should tick off the ` filter ` operator in # 5788 Please let me know if I need to change anything on the diagram itself . If not , please send me URL when you upload image within the project so I can change URL for the marble in the PR . Although , I had a doubt and wanted to double check . Operator ` filter ` returns ` Maybe ` which essentially will call ` onSuccess ` or ` onComplete ` . By running jUnit tests , I could observe that this is a behavior but if I use ` TestObserver ` then both ` assertValue ( ) ` and ` assertComplete ( ) ` are invoked when there are elements that satisfy ` filter ` condition .
Add marble diagram to the Single.never method __EoT__ First of all , I 'm extremely grateful to open my first PR for RxJava . I hope that I 'll be able to tick more of the marbles from # 5788 but for now this should tick off the ` never ` operator . Please let me know if I need to change anything on the diagram itself . If not , please send me URL when you upload image within the project so I can change URL for the marble in the PR .
2.x : Adjust JavaDocs dl/dd entry stylesheet __EoT__ The default JavaDocs stylesheet uses monospaced for the **Scheduler**/**Backpressure**/etc definitions list entries which practically makes any ` { @ code } ` marking practically invisible . This PR set up a stylesheet with that specific style definition reverted to default . There was an unused ` stylesheet.css ` in the project from long before . Before : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/42266803-b4701698-7f77-11e8-8255-b5221f1f3e23.png ) After : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/42266818-c0735f5e-7f77-11e8-8786-14ad4fc9a5a9.png )
2.x : Fix concatMap { Single|Maybe } null emission on dispose race __EoT__ This PR fixes a bug in all 4 specialized ` concatMap ` implementation that allows ` null ` to be emitted when the success signal of the inner source races with the dispose signal of the sequence . Likely fixes : # 6059
2.x : Expand { X } Processor JavaDocs by syncing with { X } Subject docs __EoT__ This PR expands and adapts the JavaDocs of ` AsyncProcessor ` , ` BehaviorProcessor ` , ` PublishProcessor ` , ` ReplayProcessor ` and ` UnicastProcessor ` with the details of their already documented ` Subject ` variants . In addition , some wording has been fixed with ` UnicastSubject ` as it was refering to plural ` Observer ` s in some sentences even though it only supports one . Since the basis of this expansion is copy-paste , please read through the changes carefully to verify the terminology and described behavior matches what 's usually expected from ` Flowable ` s/ ` FlowableProcessor ` s ( i.e. , subjects do n't have to deal with backpressure and thus nothing much to elaborate on that in a subject doc ) .
2.x : Use different wording on blockingForEach ( ) JavaDocs __EoT__ Change the wording on the ` blockingForEach ( ) ` method to clarify it runs the ` Consumer ` on the current thread . Since there is no onError callback , the extra sentence about the error behavior was removed . There is an error handling section already that explains it properly .
2.x : Add Maybe marble diagrams 06/21/a __EoT__ Resolved the following diagrams of # 5806 : # # # # amb : missing diagram ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.amb.png ) # # # # ambArray : missing diagram ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.ambArray.png ) # # # # concat ( Iterable ) : missing diagram ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concat.i.png ) # # # # concat ( Publisher ) : missing diagram ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concat.p.png ) # # # # concat ( Publisher , int ) : missing diagram ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concat.pn.png ) # # # # concatArray : missing diagram ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatArray.png ) # # # # concatArrayDelayError : indicate error delayed , 1 marble per source ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatArrayDelayError.png ) # # # # concatArrayEager : missing diagram ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatArrayEager.png ) # # # # concatDelayError ( Iterable ) : missing diagram ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatDelayError.i.png ) # # # # concatDelayError ( Publisher ) : missing diagram
2.x : subscribeActual ( ) accidental public __EoT__ Looks like the following ` protected void subscribeActual ( ) ` implementations have unintentionally become public : - [ ` PublishSubject ` ] ( https : //github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/subjects/PublishSubject.java # L134 ) - [ ` PublishProcessor ` ] ( https : //github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/processors/PublishProcessor.java # L95 ) There is no reason to call ` subscribeActual ` from outside of RxJava , however , making these ` protected ` counts as a breaking change . However , it should be extremely unlikey somebody was actually using these methods directy . The question is : do we take the risk and fix the visibility in 2.x or it has to wait for 3.x ? Note that many operators are also having this method as public but those are not really accessible from the outside .
2.x : Add the wiki pages as docs __EoT__ This PR adds the ` RxJavaWiki.git ` subgit markdown files under the ` docs ` directory , allowing external contribution through the same workflow as for the code .
Fix check that would always be false __EoT__ Checking ` BlockingSubscriber.TERMINATED ` ( ` new Object ( ) ` ) against ` o ` would always be false since ` o ` is a publisher . Since ` v ` comes from the queue this is presumably the variable that should be checked . However the check might even be redundant with this change since that variable can only appear in the queue after the subscriber has been cancelled . I am not familiar enough with the memory model to say whether the object appearing in the queue implies the cancelled subscriber is visible .
Fix Flowable.blockingSubscribe is unbounded and can lead to OOME __EoT__ Create and bound new ` blockingSubscribe ` overloads to ` bufferSize ` . * Create new overloads with ` bufferSize ` * Create a ` boundedConsumer ` * Create a ` BoundedSubsciber ` Close : # 5988
fix MulticastProcessor javadoc comment __EoT__ fix wrong javadoc comment of MulticastProcessor . I think ` # create ( boolean ) ` is an optional refcount behavior .
2.X : Fix disposed LambdaObserver onError to route to global error handler __EoT__ Fix the behaviour of LambdaObserver when disposed to route to the global error handler Fixes # 6025
2.x : Inline CompositeDisposable JavaDoc __EoT__ Normally , overriding a method will reuse the JavaDoc unless specified directly on the new method . Unfortunately , when the base type is part of a javadoc exclude , such as everything below ` **/internal ` , the documentation is not copied and public facing methods have no HTML documentation : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/40828381-b8cdd07e-6580-11e8-84cf-783f1cf892f9.png ) This PR copies the javadoc of the internal ` DisposableContainer ` onto ` CompositeDisposable ` so it shows up properly : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/40828451-ea8c4122-6580-11e8-8ad9-e2cd606d6a39.png ) The IDEs still show the documentation correctly .
2.x : Upgrade to Gradle 4.3.1 , add TakeUntilPerf __EoT__ The JMH plugin 0.4.4 has some shortcomings that prevent the execution of unit tests on Windows 10 ( and on some very restricted Linuxes ) . Version 0.4.5 has been fixed in this regard but it also requires Gradle 4.3.x . Unfortunately , there are no newer versions to the JMH plugin so this is likely as far as we can go with versions . I 've also added a new benchmark to measure the overhead in ` takeUntil ` . Here are the results : i7 4790 , Windows 10 x64 , Java 8u172 , JMH 1.20 : `` ` Benchmark Mode Cnt Score Error Units TakeUntilPerf.flowable thrpt 5 341933,112 13328,573 ops/s TakeUntilPerf.flowable : items thrpt 5 21128765,548 677544,832 ops/s TakeUntilPerf.observable thrpt 5 366931,108 8202,644 ops/s TakeUntilPerf.observable : items thrpt 5 10733841,643 112853,358 ops/s `` ` The ` observable ` here uses an older algorithms & structure and is generally relaying half the items under the same time amonut than the ` flowable ` version . PR # 6028 can then be evaluated with this benchmark .
2.x : Fix MulticastProcessor JavaDoc warnings __EoT__ Add two missing ` & gt ; ` tags to avoid the javadoc tool warnings .
2.x -- groupBy with evicting map -- seeing inconsistent behavior when eviction occurs __EoT__ I am using version 2.1.11 . I 'm seeing what I believe to be a bug in the groupBy operator when configured to use an evicting map . Here is a test that demonstrates what I 'm seeing : `` ` java private static class TestTicker extends Ticker { long tick = 0 ; @ Override public long read ( ) { return tick ; } } @ Test public void testGroupByEviction ( ) { FlowableProcessor < Integer > source = PublishProcessor.create ( ) ; TestSubscriber < Integer > subscriber1 = new TestSubscriber < > ( ) ; TestTicker testTicker = new TestTicker ( ) ; Function < Consumer < Object > , Map < Object , Object > > mapFactory = action - > { return CacheBuilder.newBuilder ( ) .expireAfterAccess ( 5 , TimeUnit.SECONDS ) .removalListener ( notification - > { try { action.accept ( notification.getValue ( ) ) ; } catch ( Exception ex ) { throw new RuntimeException ( ex ) ; } } ) .ticker ( testTicker ) .build ( ) .asMap ( ) ; } ; final List < String >
2.x : More time to BehaviorProcessor & Interval TCK tests __EoT__ This PR increases the timeout of the Reactive Streams TCK tests targeting ` BehaviorProcessor ` and ` interval ( ) ` from 25ms to 50ms to have some slack on Travis-CI .
Single.flatMapPublisher full implementation __EoT__ I noticed ` Single.flatMapPublisher ` is implemented as ` toFlowable ( ) .flatMapPublisher ( ... ) ` which subjects the one flowable to batched requests . I 'd like to have requests go straight through to the one flowable . Can I contribute this operator ? The operator at the moment is at https : //github.com/davidmoten/rxjava2-http/blob/master/src/main/java/org/davidmoten/rx2/io/internal/FlowableSingleFlatMapPublisher.java without fusion . I can add more tests , fusion ( transitive as per ` doOnEach ` ) and follow the projects 's naming and visibility conventions .
2.x : Add TCK for MulticastProcessor & { 0..1 } .flatMapPublisher __EoT__ This PR adds Reactive Streams TCK tests to : - ` MulticastProcessor ` ( both externally and internally refcounted ` - ` Single.flatMapPublisher ` - ` Maybe.flatMapPublisher ` - ` Completable.andThen ( Publisher ) `
2.x : Fix Single.takeUntil , Maybe.takeUntil dispose behavior __EoT__ Fix the dispose behavior of the ` Single.takeUntil ` and ` Maybe.takeUntil ` operators . Tests were also added to the other 3 ` takeUntil ` variants ( for ` Completable ` , it is delegated to ` amb ` ) . Fixes : # 6018
2.x : benchmark ( 0..1 ) .flatMap , andThen & flattenAs performance __EoT__ This PR adds JMH benchmarks to measure the overhead of ` { Single|Maybe } .flatMap { Publisher|Observable } ` , ` { Single|Maybe } .flattenAs { Flowable|Observable } ` and ` Completable.andThen ( { Publisher|Observable } ) ` . # # # Results on i7 4770K , Windows 7 x64 , Java 8u172 , JMH 1.20 ( larger is better ) : # # # # comparing based on the final output type ! [ image ] ( https : //user-images.githubusercontent.com/1269832/40439189-7effb8b6-5eba-11e8-9581-8bec8d770f40.png ) Observable should be generally lower overhead yet some cases it has more overhead . # # # # comparing what to flatten ( **flatMapHide** = without fusion , **flatMap** = reactive source , **flattenAs** = list source ) ! [ image ] ( https : //user-images.githubusercontent.com/1269832/40439286-c07cf2ae-5eba-11e8-9692-4f6836f8b6cd.png ) The **hide** case is expected to have the most overhead , yet the two reactive classes have uneven boosts with a supposedly fuseable cases : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/40439592-ab3a8388-5ebb-11e8-9e4b-a0b4109452ce.png ) # # # # comparing based on source type ! [ image ] ( https : //user-images.githubusercontent.com/1269832/40439448-3e4cfa08-5ebb-11e8-9655-14c4f097a3bc.png ) ` Single ` and ` Maybe
2.x : Fix & prevent null checks on primitives __EoT__ This PR removes the accidental null checks on primitives in two ` Observable ` methods and adds a trap method to ` ObjectHelper ` to both highlight and fail the tests in case the null checks are still attempted . The method is marked as deprecated so it will also show up in ( Eclipse 's ) problems window . Replaces # 6012 Resolves # 6013
2.x : Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber __EoT__ This basically copies the behavior of ` assertValuesOnly ` to the ` assertValueSet ` and ` assertValueSequence ` equivalent methods . Coped the tests exactly from ` assertValuesOnly ` and adjusted them with the new added methods .
2.x : Add MulticastProcessor __EoT__ This PR adds the ` MulticastProcessor ` from the [ extensions project ] ( https : //github.com/akarnokd/RxJava2Extensions # multicastprocessor ) to be a standard processor option . This type of processor fills the gap of having a backpressure-coordinating processor type as ` PublishProcessor ` does n't coordinate backpressure on its own and ` Flowable.publish ( ) ` often ca n't be used because the upstream may not yet exist when the dowstream consumers are setup . ! [ MulticastProcessor ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/MulticastProcessor.png ) Example : `` ` java MulticastProcessor < Integer > mp = Flowable.range ( 1 , 10 ) .subscribeWith ( MulticastProcessor.create ( ) ) ; mp.test ( ) .assertResult ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ) ; // -- -- -- -- -- -- -- -- -- -- MulticastProcessor < Integer > mp2 = MulticastProcessor.create ( 4 ) ; mp2.start ( ) ; assertTrue ( mp2.offer ( 1 ) ) ; assertTrue ( mp2.offer ( 2 ) ) ; assertTrue ( mp2.offer ( 3 ) ) ; assertTrue ( mp2.offer ( 4 ) ) ; assertFalse (
2.x : Add throttleLatest operator __EoT__ This PR adds the ` throttleLatest ` operator to ` Observable ` and ` Flowable ` , also known as ` conflate ` ( # 4856 ) : it is a combination of ` throttleFirst ` and ` sample ` whereby frequent items are sampled but the first item outside the sampling window will be emitted immediately : ! [ throttleLatest ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleLatest.png ) ! [ throttleLatest ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleLatest.se.png ) Resolves : # 4856 Replaces : # 5968
2.x : Javadoc space cleanup __EoT__ This PR adds a gradle task to replace the excessive whitespaces generated into the Javadocs between method arguments and after method argument annotations . This task should run before the javadoc gets packaged up for maven and before it gets pushed back to the gh-pages . ( This was created as a repo branch so that the snapshot pushback is triggered , see the comparison links below . ) Resolves : # 6004 # # # # Comparison Multiple parameters before : [ combineLatest ] ( http : //reactivex.io/RxJava/2.x/javadoc/2.1.13/io/reactivex/Flowable.html # combineLatest-io.reactivex.functions.Function-org.reactivestreams.Publisher ... - ) ! [ image ] ( https : //user-images.githubusercontent.com/1269832/39813943-b841e820-5392-11e8-9a01-8f79b521f76b.png ) Multiple parameters after : [ combineLatest snapshot ] ( http : //reactivex.io/RxJava/2.x/javadoc/snapshot/io/reactivex/Flowable.html # combineLatest-io.reactivex.functions.Function-org.reactivestreams.Publisher ... - ) ! [ image ] ( https : //user-images.githubusercontent.com/1269832/39813959-cc80385a-5392-11e8-8084-7ca89c0686d7.png ) -- -- -- -- -- -- -- -- Newline after parameter annotation before : [ as ] ( http : //reactivex.io/RxJava/2.x/javadoc/2.1.13/io/reactivex/Flowable.html # as-io.reactivex.FlowableConverter- ) ! [ image ] ( https : //user-images.githubusercontent.com/1269832/39813894-86bc22c0-5392-11e8-8748-aba6a214d4fc.png ) Newline after parameter annotation after : [ as snapshot ] ( http : //reactivex.io/RxJava/2.x/javadoc/snapshot/io/reactivex/Flowable.html # as-io.reactivex.FlowableConverter- ) ! [ image ] ( https : //user-images.githubusercontent.com/1269832/39813906-97f7aca8-5392-11e8-981f-9ff93396c35f.png )
Fix typo in documentation __EoT__ Rewrote ` sameSource ` to ` someSource ` because ` someSource ` is used in code snippets .
2.x : Add refCount with count & disconnect timeout __EoT__ This PR exposes the additional ` refCount ` operation modes from # 5975 : - Connect only when the specified number of ` Subscriber ` s/ ` Observer ` s have subscribed - Disconnect when the given amount of time elapsed since the very last ` Subscriber ` / ` Observer ` cancelled/disposed . - The combination of both . In addition , the original ` refCount ` received extra JavaDocs details .
2.x : Automatically publish the generated JavaDocs from CI __EoT__ This PR adds a script that publishes the generated JavaDocs from CI back to the ` gh-pages ` branch upon successful snapshot and release builds ( this latter needs testing though via -RC releases ) . The snapshot JavaDocs will go into the same directory : http : //reactivex.io/RxJava/2.x/javadoc/snapshot/ The release builds update - http : //reactivex.io/RxJava/javadoc/ while preserving the old ` rx ` links , - http : //reactivex.io/RxJava/2.x/javadoc/ for the latest 2.x and - http : //reactivex.io/RxJava/2.x/javadoc/2.1.13/ for the specific release version . The ` push.sh ` script uses a Travis-CI secured token ` GITHUB_TOKEN ` to talk to the GitHub API . This token was created for my account via https : //github.com/settings/tokens ( requires repo direct push access ) , and provided to Travis via `` Environment variables '' on the page https : //travis-ci.org/ReactiveX/RxJava/settings . If , for some reason the publishing fails , the build still counts as successful . The reason for this is that restarting the otherwise successful build will try to reupload the same library version into maven which fails . In this case , the JavaDocs can be updated via
2.x : Fix switchMap to indicate boundary fusion __EoT__ Fix ` Flowable.switchMap ` and ` Observable.switchMap ` to request for boundary fusion in order to prevent a thread-confined but otherwise fusion-capable sub-sequence from running on the unintended thread . Fixes : # 5990
Observable 's javadoc cleanup __EoT__ The sample code in the Observable javadoc erroneously uses ` onNext ( Integer t ) ` for a ` DisposableObserver < String > ` This has been corrected to be ` onNext ( String t ) `
Add marble diagrams to a few Single.doOnX methods . __EoT__ This should tick a few tasks from this issue : https : //github.com/ReactiveX/RxJava/issues/5788 . The urls are a bit ugly , as they 're from the uploads in the issue . I 'm happy to update the urls with different ones if there 's a better place to upload the diagrams .
2.x : Add blockingSubscribe JavaDoc clarifications __EoT__ This PR adds some clarifications to the ` blockingSubscribe ` methods on ` Flowable ` and ` Observable ` .
2.x : improve JavaDocs of the subscribeActual methods __EoT__ The PR improves the wording of the abstract ` subscribeActual ` method across the base reactive types .
2.x : Maybe/Single Javadoc ; annotation cleanup __EoT__ The PR cleans up some wording around `` Single source '' and `` Maybe source '' , plus removes some unnecessary annotations .
2.x : Fix refCount ( ) connect/subscribe/cancel deadlock __EoT__ This PR fixes a deadlock issue with the ` refCount ` operator when a subscription leads to a blocking execution while the lock is being held , preventing other subscription or cancellation from executing on other threads . The bug was discovered as the cause of a reported hang on [ the Google groups ] ( https : //groups.google.com/forum/ # ! topic/rxjava/G0axw5PbOF4 ) . The [ code ] ( https : //github.com/akarnokd/RxJava2Extensions/blob/master/src/main/java/hu/akarnokd/rxjava2/operators/FlowableRefCountTimeout.java ) has been developed in the extensions project where the operator has [ more features ] ( https : //github.com/akarnokd/RxJava2Extensions # flowabletransformersrefcount ) . The overloads supporting these features can be added in a separate enhancement PR .
Adding eager concats to Single __EoT__ - Adding concatEager operator for Singles covering : concatEager ( Publisher < ? extends SingleSource < ? extends T > > sources ) concatEager ( Iterable < ? extends SingleSource < ? extends T > > sources ) concatArrayEager ( SingleSource < ? extends T > ... sources ) - Issue : https : //github.com/ReactiveX/RxJava/issues/5974 - Added tests for both methods , I was n't sure if I should add tests covering just a single element in the vararg list and respectively an iterable with a single element.. any thoughts on this ?
2.x : Fix Observable.concatMapSingle dropping upstream items __EoT__ The internal queue of ` Observable.concatMapSingle ` was incorrectly the bounded one from its ` Flowable ` counterpart , causing it to drop upstream items if the current ` Single ` was delayed . The right queue for ` Observable ` s is the ` SpscLinkedArrayQueue ` . Added unit tests to both ` concatMapSingle ` and ` concatMapMaybe ` to verify the correct behavior . Fixes : # 5971 .
Fix few typos in README . __EoT__ 3 of them . All in README .
2.x : Workaround for Objects.requireNonNull inserted by javac __EoT__ For some reason , when compiling RxJava with Java 9 or 10 and target 8 , there is an implicit ` Objects.requireNonNull ` added by the compiler to ` us.new X ` which makes AnimalSniffer detect a non-Java 6 API usage . Interestingly , this does not happen with : - Java 8 target 6 , - Java 8 target 8 , - Java 9 target 6 , - Java 9 target 9 , - Java 10 target 6 , - Java 10 target 9 , - Java 10 target 10 or AnimalSniffer does n't detect it for non-8 targets somehow . I know that the latest AnimalSniffer does n't work with ( some ? ) Java 9 class files , but it does n't explain why the fully supported Java 8 target 8 does not trigger this error but Java 9 target 8 does . I have reported this anomaly as a potential javac bug . The build matrices and outcomes for RxJava 2 can be found here : https : //travis-ci.org/akarnokd/RxJava2_9/builds
2.x : Fix some grammar mistakes __EoT__ This PR fixes a bunch of typos ( in many files ) and grammar mistakes in ` Flowable ` ( based on Grammarly checks ) . The PR also fixes the ` JavadocWording ` checks to start from the beginning of the method 's javadoc as well as checking for cross-line a/an typos .
Fix typo __EoT__ Update 'Dependend sub-flows ' to 'Dependent sub-flows' Thank you for contributing to RxJava . Before pressing the `` Create Pull Request '' button , please consider the following points : - [ ] Please give a description about what and why you are contributing , even if it 's trivial . - [ ] Please include the issue list number ( s ) or other PR numbers in the description if you are contributing in response to those . - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one . If you contribute an operator , ( if applicable ) please make sure you have tests for working with an ` empty ` , ` just ` , ` range ` of values as well as an ` error ` source , with and/or without backpressure and see if unsubscription/cancellation propagates correctly .
2.x : Add Single.ignoreElement , deprecate toCompletable __EoT__ Rename-deprecate ` Single.toCompletable ` to ` ignoreElement ` to be in line with the same operator in the other classes and also indicate more clearly in the method name that it ignores the element . In addition , the marbles have been updated on both ` Single ` and ` Maybe ` of this operator . ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.ignoreElement.png ) ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.ignoreElement.png )
Add missing parenthesis on README.md __EoT__
2.x : blockingX JavaDoc to mention wrapping of checked Exceptions __EoT__ This PR adds an **Error handling** section to various ` blockingX ` operators to specify checked exceptions from their source will be wrapped into ` RuntimeException ` s .
Canceling an Observable in RxJava 2.x __EoT__ **Observable.fromFuture** 's javadoc says `` Unlike 1.x , cancelling the Observable wo n't cancel the future . If necessary , one can use composition to achieve the cancellation effect : futureObservableSource.doOnCancel ( ( ) - > future.cancel ( true ) ) ; . '' Flowable has this method and it works as expected like this : `` ` Disposable disposable = Flowable.fromFuture ( response , Schedulers.io ( ) ) .doOnCancel ( ( ) - > response.cancel ( true ) ) .subscribe ( ) ; `` ` But Observable seems to lack **doOnCancel** method , does n't it ? Tested RxJava 's version is 2.1.10 .
Removed TERMINATED check in onNext __EoT__ ` TERMINATED ` is an empty array , so iterating over it would be harmless . The cost of the check is probably minuscule , but it was imposed on the common case where the subject is not terminated . In essence , it was optimizing for misuse of the API .
Add @ NonNull annotations to create methods of Subjects and Processors __EoT__ I am annotating *Subject 's and *Processor 's create methods with @ NonNull annotations to remove compiler 's nullability warnings when calling the methods from Kotlin language .
2.x : Fix concatMapSingle & concatMapMaybe dispose-cleanup crash __EoT__ This PR fixes the accidental logical mistake in the ` cancel ` / ` dispose ` logic of the new ` concatMapSingle ` and ` concatMapMaybe ` operators of both ` Flowable ` and ` Observable ` where the internal queue cleanup should happen in a serialized fashion only , which is the state when the work-in-progress counter changes from 0 to 1 ensured by a ` == ` check . Fixes # 5927
2.x : Expand the Getting Started __EoT__ This PR expands the Readme.md with further examples and details , plus adds headers so that ( former and new ) sections can be easily linked in answers on issue lists or StackOverflow . ( Note that it was written offline without proper markdown rendering so I may update the PR a couple of times to get the render mistakes fixed ) .
Add @ Nullable annotations to Processors __EoT__ Add ` @ Nullable ` annotations to Processors . Updated our project to use 2.11.1 , and discovered there 's this PR https : //github.com/ReactiveX/RxJava/pull/5890 which added ` @ Nullable ` annotations to Subjects . Thought might as well add ` @ Nullable ` to Processors .
2.x : Update Single.flatMapPublisher marble __EoT__ Renamed the operator in the box . For # 5788 . ! [ flatMapPublisher ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapPublisher.png )
2.x : Fix JavaDoc warnings of buffer ( Publisher|Callable ) __EoT__ Text is not allowed between ` < dl > ` and its child tags . Fixes # 5916 .
2.x : Add fusion support to ObservableSwitchMap inner source __EoT__ This PR improves the performance of the ` Observable.switchMap ` operator by adding fusion support as well as upgrading the ` Completable ` and ` Single ` conversion to ` Observable ` to be fuseable . The PR also fixes an error in the ` DeferredScalarDisposable ` implementation as the protocol requires calling with ` null ` . The plain ( ` Observable.switchMap ( Observable ) ` ) conversion has promising performance improvements : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37464461-ba6d5c0c-2858-11e8-8aa0-96d53350cfed.png ) The conversion ` Observable.switchMap ( Maybe.toObservable ) ` has promising performance improvements : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37464488-cf9b1290-2858-11e8-8ac7-462a58f61a13.png ) The conversion ` Observable.switchMap ( Completable.toObservable ) ` is also promising , but there is a 11 % loss in the scalar case for some reason : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37464621-2ad6b1c8-2859-11e8-9a0a-d34c8ff8048b.png ) Finally , the conversion ` Observable.switchMap ( Single.toObservable ) ` got a bigger hit for the scalar case , 21 % loss , but the rest are impressive : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37464636-41ea983e-2859-11e8-9258-6c1c85ee8347.png )
2.x : Improve the scalar source performance of Observable . ( concat|switch ) MapX __EoT__ This PR adds scalar source optimizations to ` Observable ` operators : - ` concatMapCompletable ` - ` concatMapSingle ` - ` concatMapMaybe ` - ` switchMapCompletable ` - ` switchMapSingle ` - ` switchMapMaybe ` # # # # Benchmark i7 4770K , Windows 7 x64 , Java 8u162 The baseline is taken from # 5914 . The target is to be faster than using the plain ` concatMap ` or ` switchMap ` with a ` toObservable ` conversion . The apparent shortcomings of longer ` concatMapMaybe ` and ` concatMapSingle ` will be addressed in a subsequent PR . ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37457267-c41bb4a4-2841-11e8-87a4-3951514a7f8f.png )
2.x : Optimize ObservableConcatMapCompletable __EoT__ This PR reduces the overhead in the ` Observable.concatMapCompletable ` operator by : - adding front-queue fusion to eliminate queue allocations ( although this did n't improve the performance beyond a +/- 3 % noise ) , - moving the ` error ` and ` errorMode ` fields into local variables , saving on the mandatory volatile re-read of other fields , - adding a scalar shortcut in case the upstream is known to be 0-1 . # # # # Benchmark comparison : i7 4770K , Windows 7 x64 , Java 8u162 The PR improves the dedicated case considerably : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37437588-44960732-27ee-11e8-9f91-00c3313ac60b.png ) and it is now better across the board compared to a ` toFlowable ` conversion and the main ` concatMap ` : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37437618-7490a244-27ee-11e8-99de-cb20d5828555.png )
2.x : Benchmark X-Map-Z operators __EoT__ This PR adds JMH benchmarks to measure operators mapping onto other types , such as ` flatMapCompletable ` , ` concatMapSingle ` , etc . In addition , two new benchmarks were added to measure the ` flatMapIterable ` performance in additional situations . # # # # Baseline results i7 4770K , Windows 7 x64 , Java 8u162 [ JMH Compare GUI ] ( https : //github.com/akarnokd/jmh-compare-gui/releases/tag/v1.3.2 ) workspace file : [ xmapz_ws.xml ] ( https : //gist.github.com/akarnokd/317e2d38128f45c8fbb1ec8ebd20d970 ) The first diagram compares the dedicated , plain ( same inner type as the outer type ) and conversion-based flows : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37431058-6df2d0f2-27d4-11e8-9d6a-b9d8a0f34e0b.png ) The switchMap-based ` Observable ` operators look like they could use some optimizations . Overall , ` count == 1 ` is not optimized with the dedicated versions . From the ` Observable ` 's perspective : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37431169-c1f69d46-27d4-11e8-8159-c598e7f50e68.png ) Looks like the ` concatMapX ` operators could use some optimizations . The ` flatMapIterable ` measures are as follows : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37431246-00fab8ba-27d5-11e8-94b5-67b94e1869a7.png ) The ` Flowable ` version seem to be
2.x : Improve coverage , fix operator logic 03/12 __EoT__ Improve coverage of RxJava internal components . See the change explanation as comments below .
2.x : Cleanup test local variable names __EoT__ Add an unit test that scans the unit test files for common local variable misnaming due to copy-pasting between the types , such as : - ` TestObserver ts ` < - > ` TestSubscriber to ` - ` PublishSubject pp ` < - > ` PublishProcessor ps ` See the new ` CheckLocalVariablesInTests ` for other patterns described with a regexp .
2.x : Add public constructor for TestScheduler that takes the time . __EoT__ - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable ? Fixes # 5901
2.x : Coverage improvements , logical fixes and cleanups 03/08 __EoT__ This PR fixes a couple of logical errors and cleans up some other components as well as improves the coverage of some classes . See the change comments below about the relevant details .
2.x : Perf measure of Flowable flatMap & flatMapCompletable __EoT__ This PR adds two benchmarks that measure the synchronous and asynchronous behavior of ` Flowable.flatMap ` and ` Flowable.flatMapCompletable ` when both are run with a ` Completable ` source . Apart from the ` item == 1 ` case , which is due to lack of scalar optimizations with ` flatMapCompletable ` , the ` flatMapCompletable ` is faster by a good margin : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37175444-de62c1fe-2319-11e8-90ce-1f0b0dbd661b.png ) I 'd say the asynchronous use is slightly faster in general with ` flatMapCompletable ` : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37175490-fa38bd8e-2319-11e8-84ff-e01d1ec18129.png ) -- -- -- -- -- - Originally , this PR started out as an attempt to optimize the inner consumer tracking in ` flatMapCompletable ` when the ` maxConcurrency ` is non-default by using a special containers for 1..8 instead of the ` CompositeDisposable ` . Unfortunately , this made it slightly slower in general ( PR column ) : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/37175604-4b4c8bb0-231a-11e8-8f28-a18b364c4d64.png ) The async benchmark is within +/- 3 % most of the time , and generally inconclusive . ! [ image ] (
2.x : Fix Flowable.singleOrError ( ) .toFlowable ( ) not signalling NoSuchElementException __EoT__ When a ` singleOrError ` is followed by ` toFlowable ( ) ` , the assembly process switches the ` Flowable- > Single ` operator into a ` Flowable- > Flowable ` operator implementing the ` singleOrError ` behavior ( saving the back-and-forth type conversion ) . The backing implementation was shared with ` singleElement ` and as such , did not properly handle the ` orError ` case for an empty source . The PR fixes the lack of ` NoSuchElementException ` in this case . Fixes # 5903 . The ` Observable ` variant does n't have such optimization but the test has been converted to make sure ` Observable ` is verified for this aspect in case the optimization is implemented with it in the future .
2.x : Fix excess item retention in the other replay components __EoT__ This is a follow-up PR to # 5892 in order to avoid item retention in the head node . For the ` ReplayProcessor ` , the cleanup can be triggered with ` cleanupBuffer ` . For the ` replay ( ) ` operators , such trigger is not possible . However , the terminal events will perform the cleanup internally at least .
2.x : Fix Flowable.publish ( -|Function ) subscriber swap possible data loss __EoT__ This PR fixes an avoidable dataloss in the following subscriber-swap scenario with the ` publish ( ) ` and ` publish ( Function < Flowable , Publisher > ) ` . When an ` onNext ` changes the current array of subscribers ( an existing consumer cancelled or a new one arrived ) , the change detection is delayed and items may get dropped even though a fresh consumer could take those values . The algorithms were updated to fix this case as well as the emission tracking in ` FlowableMulticastProcessor ` : a global ` emitted ` value is not good here after all ( subscribers joining late would indicate an incorrect aggregate demand and get overflown ) . One of the advanced uses of ` publish ( Function ) ` is to implement consumption mode changes by having a mode cancel the subscription to the shared ` Flowable ` and synchronously subscribe a new consumer with a different behavior . The discovery of this shortcoming was due to a special transformation pattern : apply a transformer if the source is not empty , and in
2.x : Fix Observable.flatMap scalar maxConcurrency overflow __EoT__ Since ` Observable ` is not backpressured , the ` flatMap ` of it has to manage the buffering of inner sources so that only a limited number of them are active at the same time . However , when most outstanding inner sources were scalar ( ` just ( ) ` is such a source ) but the drain loop was busy , the operator overflow its bounded scalar queue ( as it is supposed to be holding at most maxConcurrency scalar items ) , causing an ` IllegalStateException ` . The PR fixes this corner case by making sure the ` tryScalarEmit ` returns false if it had to queue up the scalar , which in turn prevents the next inner source to be subscribed to until the queued item is cleared . In addition , the terminal state check has to include the buffer holding the remaining inner sources : being done , having an empty scalar queue and having no active inner observers is just not enough . ` Flowable.flatMap ` is not affected as it uses backpressure to ensure only a limited number of sources or scalars
Fix buffer ( ) documentation to correctly describe onError behaviour __EoT__ Fixes # 5894 . I just copied the sentence from the fixed docs in 1.x and updated to use ObservableSource/Publisher naming .
2.x : Improve coverage & related cleanup 03/05 __EoT__ Improve the coverage of various components , fix impossible paths and other fixes . See the comments attached to the code changes .
Added nullable annotations to subjects __EoT__ Adding nullable annotations to subjects . The ` throwable ` and ` getValue ` methods are annotated with Nullable . Quick question about styling - In some places , javadocs has trailing whitespaces but it is absent in other places . Is there a styling policy around that ? Intellij is removing the trailed whitespace automatically .
2.x : Cleanup , coverage and related component fixes __EoT__ This PR improves the coverage of various components and contains the following additional fixes : - Remove a very unlikely cancellation check in ` FlowableConcatMapEager ` . - Improve backpressure tracking in ` FlowablePublishMulticast ` to avoid atomic decrement per items emitted ( part of ` publish ( Function ) ` ) . - Improve check for empty or terminated state in ` FlowablePublishMulticast ` by using the array length . - ` UnicastProcessor ` termination to use a one-step ` getAndSet ` - ` BehaviorSubject ` termination to use a one-step ` getAndSet ` - Remove impossible try-finally in ` BehaviorSubject.setCurrent ` as the body could never crash .
2.x : Upgrade the algorithm of Observable.timeout ( time|selector ) operators __EoT__ This PR improves the algorithms of the ` Observable.timeout ( time ) ` and ` Observable.timeout ( selector ) ` operators to match their ` Flowable ` counterparts implemented in # 5661 . In addition , coverage of the ` Flowable ` counterparts have been improved by synchronizing the unit tests . Note that they were the last users of ` ObserverFullArbiter ` and ` FullArbiterObserver ` which are now removed . Closes # 5882 .
2.x : Improve coverage and fix small mistakes/untaken paths in operators __EoT__ This PR improves the coverage of RxJava while adjusting some code paths and fixing other types of smaller bugs . - Fix ` Maybe.merge ( Publisher ) ` to define a 1 element buffer only . - Fix ` Maybe.mergeDelayError ( Publisher ) ` to use the dedicated ` FlowableFlatMapPublisher ` similar to the plain ` merge ( ) ` . - In ` Flowable.flatMap ` , checking for empty or cancelled arrays in ` removeInner ( ) ` can be replaced with a length check . - Make sure in ` Flowable.reduce ( seed , f ) ` the terminal events ca n't be called a second time if the reducer crashes . - Turn the ` FlowableReplay.MultiCastPublisher ` into a ` Flowable ` and rename it to ` MulticastFlowable ` . - Fix ` FlowableWindowBoundary ` not cancelling the upstream on a missing backpressure case , causing ` NullPointerException ` . - Remove unused override of ` accept ( ) ` in ` FlowableWindowBoundary ` . - Remove the ineffective done flag from ` OperatorWindowBoundaryOpenSubscriber ` . - Replace the timer CASs with the ` replace
2.x : Add Observable switchMapX and concatMapX operators __EoT__ This PR ports the various ` switchMapX ` and ` concatMapX ` operators from # 5870 , # 5871 , # 5872 and # 5873 to ` Observable ` : - ` concatMapCompletable ` ( replaced by the common implementation ) - ` concatMapCompletableDelayError ` - ` concatMapMaybe ` - ` concatMapMaybeDelayError ` - ` concatMapSingle ` - ` concatMapSingleDelayError ` - ` switchMapCompletable ` - ` switchMapCompletableDelayError ` - ` switchMapMaybe ` - ` switchMapMaybeDelayError ` - ` switchMapSingle ` ( dedicated implementation ) - ` switchMapSingleDelayError ` ( dedicated implementation ) This PR concludes the requested set of operators in # 4853 . Marbles will be updated/adjusted in a separate PR .
2.x : Add note about NoSuchElementException to Single.zip ( ) . __EoT__
2.x : Add Flowable.switchMap { Maybe , Single } { DelayError } operators __EoT__ This PR adds ` Flowable ` operators that allow switching between a mapped sequence of ` Maybe ` s or ` Single ` s , with or without delaying their errors : - ` switchMapMaybe ` - ` switchMapMaybeDelayError ` - ` switchMapSingle ` - ` switchMapSingleDelayError ` They are in the same PR as the ` Single ` variant 's implementation is practically the ` Maybe ` implementation minus the ` onComplete ` case . Their marbles will be updated in a separate PR . Originally requested in # 4853 .
2.x : Add Flowable.concatMap { Maybe , Single } { DelayError } operators __EoT__ This PR adds operators that allow concatenating a mapped sequence of ` Maybe ` s or ` Single ` s , with or without delaying their errors : - ` concatMapMaybe ` ( +1 overload with prefetch ) - ` concatMapMaybeDelayError ` ( +2 overloads with error mode and prefetch ) - ` concatMapSingle ` ( +1 overload with prefetch ) - ` concatMapSingleDelayError ` ( +2 overloads with error mode and prefetch ) They are in the same PR as the ` Single ` variant 's implementation is practically the ` Maybe ` implementation minus the ` onComplete ` case . Their marbles will be updated in a separate PR . Originally requested in # 4853 .
2.x : Add Flowable.switchMapCompletable { DelayError } operator __EoT__ This PR adds the ` Flowable.switchMapCompletable ` and ` Flowable.switchMapCompletableDelayError ` operators as requested by # 4853 . The associated new marbles are : ! [ switchMapCompletable ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMapCompletable.f.png ) ! [ switchMapCompletableDelayError ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMapCompletableDelayError.f.png )
2.x : enhance test for groupBy with evicting map factory __EoT__ Enhance ` FlowableGroupByTest.SingleThreadEvictingHashMap ` so that it actually evicts and be a bit defensive by supporting ` putAll ` and ` clear ` properly . No change to ` src/main/java ` .
2.x : Expand the documentation of the Flowable.lift ( ) operator __EoT__ This PR expands the documentation of the ` Flowable.lift ( ) ` operator used for inserting custom operators into flows in a functional and fluent fashion . The other reactive base classes feature similar ` lift ( ) ` operators for which the text can be adapted and contributed in a separate PR once the content of this PR is stabilized by review feedback . Related : # 5862
2.x : Fix Javadoc warnings , links to the JDK types __EoT__ The definition of multiple external links was wrong in ` build.gradle ` where the ` options.links ( ) ` is actually defined as ` String ... ` and multiple calls are not additional . This made the generated JavaDoc not have links to the JDK types . The fix now properly uses the varargs of the method . In addition , somehow the plain ` http : // ` still would n't generate the proper links probably because they are redirected to ` https : // ` for which the javadoc tool is not prepared . In addition , 4 dangling ` < p > ` tags were showing up as warnings and have been removed .
2.x : Flowable.groupBy add overload with evicting map factory __EoT__ As per discussion in # 5763 , this PR adds an overload for ` Flowable.groupBy ` that specifies an ` evictingMapFactory ` . An example of usage taken from the new javadoc : `` ` java Function < Consumer < Object > , Map < Integer , Object > > evictingMapFactory = notify - > CacheBuilder .newBuilder ( ) .maximumSize ( 3 ) .removalListener ( entry - > { try { // emit the value not the key ! notify.accept ( entry.getValue ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) . < Integer , Object > build ( ) .asMap ( ) ; // Emit 1000 items but ensure that the // internal map never has more than 3 items in it Flowable .range ( 1 , 1000 ) // note that number of keys is 10 .groupBy ( x - > x % 10 , x- > x , true , 16 , evictingMapFactory ) .flatMap ( g - > g ) .forEach ( System.out : :println ) ; `` ` Note that I based this
2.x : Add finite requirement to various collector operators JavaDoc __EoT__ Add notes to the following operators to state their sources has to be finite . It has been already done to ` toList ` in # 5465 . - ` collect ` - ` collectInto ` - ` reduce ` - ` reduceWith ` - ` toMap ` - ` toMultimap ` - ` toSortedList `
2.x : Add efficient mergeWith ( Single|Maybe|Completable ) overloads . __EoT__ This PR adds specialized overloads to the ` mergeWith ` operator in ` Flowable ` and ` Observable ` . If accepted , the marbles will be updated in a separate PR . Related : # 5350 .
2.x : Unify race test loop counts and invocations __EoT__ This PR replaces the individual race-test loop counts with global constants and removes the unnecessary custom ` Scheduler ` value from the invocations of ` TestHelper.race ( ) ` . The default loop count is now 2500 and should elimitate the +/- 0.1 % coverage fluctuations .
2.x : Explain the properties of the XEmitter interfaces in detail __EoT__ This PR explains the properties of the 5 specifc ` Emitter ` types in more details : - error handling - resource handling - concurrent use aspects - the difference between ` Disposable ` and ` Cancellable ` resource handling - terminal state effects
2.x : Expand the JavaDocs of the Scheduler API __EoT__ This PR adds more details to the ` Scheduler ` and ` Worker ` API , rewords some older sentences and fixes a few mistakes in others . In addition , the wording of the ` SchedulerRunnableIntrospection ` felt a bit clumsy and has been updated as well .
2.x : Improve JavaDoc of XObserver types . __EoT__ This PR improves the JavaDoc of the 4 RxJava main consumer types : - ` Observer ` - ` SingleObserver ` - ` MaybeObserver ` - ` CompletableObserver `
Added nullability annotation for RxJavaPlugins.onCompletableAssembly __EoT__ Just annotation that did n't exist
Add JavaDoc links to the base reactive classes to Readme : Getting started __EoT__ Turn the listing of the base reactive classes in the `` Getting started '' ReadMe section .
2.x : Fix copy-paste errors in SingleSubject JavaDoc __EoT__ The ` SingleSubject ` JavaDoc was derived from the ` MaybeSubject ` JavaDoc and thus some mentions of ` onComplete ` remained in there . This PR fixes copy-paste errors .
2.x : Fix Observable.switchMap main onError not disposing the current inner source __EoT__ The ` Observable.switchMap ` had bad logic in its main ` onError ` handler which did n't dispose the current inner ` Observable ` . The ` Flowable ` version did n't have this logic error . Both variants received an unit test to verify the correct behavior . Fixes # 5832 .
2.x : Reword the just ( ) operator and reference other typical alternatives __EoT__ This PR updates the ` Flowable.just ` and ` Observable.just ` JavaDocs to clarify its behavior , namely it re-emits a constant reference and does not compute it . In addition , links to the other typical source operators are added . The redundant sentence about ` just ` were removed as well .
replay ( 1 ) retains second-to-last emitted item __EoT__ Version : ` 2.x ` : ` 2.1.9 ` When using ` Observable.replay ( 1 ) ` , the second-to-last object emitted by the upstream observable is retained by the internal buffer . I would expect only the last object to be retained , and this is especially problematic if the objects are large , such as an Android ` Bitmap ` or ` Activity ` . Sample code : `` ` kotlin val subject = BehaviorSubject.create < Int > ( ) subject.onNext ( 1 ) subject.onNext ( 2 ) subject.onNext ( 3 ) val replay = subject.replay ( 1 ) replay.connect ( ) Assert.assertEquals ( listOf ( 3 ) , replay.test ( ) .values ( ) ) subject.onNext ( 4 ) Assert.assertEquals ( listOf ( 4 ) , replay.test ( ) .values ( ) ) subject.onNext ( 5 ) // replay.current.value.buffer.value.value contains 4 Assert.assertEquals ( listOf ( 5 ) , replay.test ( ) .values ( ) ) `` `
2.x : Fix O.blockingIterable ( int ) & add O.blockingLatest marbles __EoT__ This PR fixes the ` Observable.blockingIterable ( int ) ` marble by using the ` blockingIterable ` redone earlier . In addition , the PR adds a marble diagram to ` Observable.blockingLatest ` : ! [ blockingLatest ] ( https : //github.com/ReactiveX/RxJava/wiki/images/rx-operators/blockingLatest.o.png )
2.x : Improve the wording of the share ( ) JavaDocs __EoT__ This PR improves the wording of the ` Flowable.share ( ) ` and ` Observable.share ( ) ` operators and fixes a JavaDoc link display mistake : ! [ image ] ( https : //user-images.githubusercontent.com/1269832/35439076-7a9816c4-0299-11e8-97ca-462238c6489f.png )
2.x : Add Subject and Processor marbles __EoT__ This PR adds the missing marble diagrams to the various ` Subject ` and ` Processor ` implementations : # # # AsyncSubject ! [ AsyncSubject ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/AsyncSubject.png ) # # # PublishSubject ! [ PublishSubject ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/PublishSubject.png ) # # # ReplaySubject ! [ ReplaySubject1 ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.u.png ) ! [ ReplaySubject2 ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.ue.png ) ! [ ReplaySubject3 ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.n.png ) ! [ ReplaySubject4 ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.t.png ) ! [ ReplaySubject5 ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.nt.png ) # # # CompletableSubject ! [ CompletableSubject ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/CompletableSubject.png ) # # # SingleSubject ! [ SingleSubject ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/SingleSubject.png ) # # # MaybeSubject ! [ MaybeSubject ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/MaybeSubject.png ) # # # AsyncProcessor ! [ AsyncProcessor ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/AsyncProcessor.png ) # # # PublishProcessor ! [ PublishProcessor ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/PublishProcessor.png ) # # # ReplayProcessor ! [ ReplayProcessor1 ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplayProcessor.u.png ) ! [ ReplayProcessor2 ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplayProcessor.ue.png ) ! [ ReplayProcessor3 ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplayProcessor.n.png ) ! [
2.x : Fix buffer ( open , close ) not disposing indicators properly __EoT__ The PR fixes the resource management in the ` buffer ` operator that uses other reactive sources to indicate when a buffer starts and ends . Both ` Flowable ` and ` Observable ` implementations had to be fixed . Fixes : # 5809
2.x : Final planned Observable marble additions/fixes __EoT__ This is the final part of the ` Observable ` marble fixes and additions as planned in # 5319 . - [ toList ( Callable ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toList.o.c.png ) - [ toFlowable ( BUFFER ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.buffer.png ) - [ toFlowable ( DROP ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.drop.png ) - [ toFlowable ( LATEST ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.latest.png ) - [ toFlowable ( ERROR ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.error.png ) - [ toFlowable ( MISSING ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.missing.png ) - [ unsubscribeOn ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/unsubscribeOn.o.png ) - Fixed position and spacing of the marbles in the ` zipWith ` overloads ( no image change ) . Images in https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-356630375 .
2.x : Improved XSubject JavaDocs __EoT__ This PR adds more detailed JavaDoc descriptions to the various ` XSubject ` types . Some of them are missing a marble diagram which will be created ( or found ) in a separate PR after this PR . The ` package-info.java ` has been extended as well .
2.x : Add missing { Maybe|Single } .mergeDelayError variants __EoT__ This PR adds ` mergeDelayError ` overloads to ` Maybe ` and ` Single ` ; the infrastructure was there from the beginning but the ` delayErrors == true ` settings were not exposed publicly . - ` Maybe.mergeDelayError ( Publisher , int ) ` - ` Single.mergeDelayError ( Iterable ) ` - ` Single.mergeDelayError ( Publisher ) ` - ` Single.mergeDelayError ( SingleSource , SingleSource ) ` - ` Single.mergeDelayError ( SingleSource , SingleSource , SingleSource ) ` - ` Single.mergeDelayError ( SingleSource , SingleSource , SingleSource , SingleSource ) `
2.x : Observable.replay ( Function , ... ) marble fixes __EoT__ This PR updates the marble diagrams of the 8 ` Observable.replay ( ) ` overload that take a ` Function ` and various other parameters : - [ no arguments ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.f.png ) - [ scheduler ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fs.png ) - [ bufferSize ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fn.png ) - [ bufferSize , scheduler ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fns.png ) - [ time ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.ft.png ) - [ time , scheduler ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fts.png ) - [ bufferSize , time ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fnt.png ) - [ bufferSize , time , scheduler ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fnts.png ) Images in https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-356286139 .
2.x : Observable marble fixes 01/08-b __EoT__ This PR adds and updates marbles of the following ` Observable ` operators : - [ lastOrError ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/lastOrError.png ) - [ onErrorReturn ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorReturn.o.png ) - [ onErrorReturnItem ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorReturnItem.o.png ) - [ onTerminateDetach ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onTerminateDetach.o.png ) - [ publish ( Function ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/publishFunction.o.png ) - [ reduce ( seed , f ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/reduceSeed.o.png ) - [ reduceWith ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/reduceWith.o.png ) - [ repeat ( ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeatInf.o.png ) - [ repeat ( long ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeatCount.o.png ) - [ repeatUntil ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeatUntil.o.png ) - [ replay ( ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.png ) - [ replay ( int ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.n.png ) - [ replay ( int , long , TimeUnit ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.nt.png ) - [ replay ( int , long , TimeUnit , Scheduler ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.nts.png ) - [ replay ( int , Scheduler ) ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.ns.png ) - [ replay ( long
2.x : More marbles 01/08-a __EoT__ This PR adds 5 marble diagrams to ` Observable ` : - ` flatMapCompletable ` ( 2 overloads ) - ` forEach ` - ` forEachWhile ` - ` hide ` Images in https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-355932289
2.x : Fix flatMap inner fused poll crash not cancelling the upstream __EoT__ This PR fixes the lack of upstream ` cancel ( ) ` call when an inner , fused source 's ` queue.poll ( ) ` crashes in a non-delayed error mode . Unit tests were added to verify ` Observable.flatMap ` , ` Flowable.flatMapIterable ` and ` Observable.flatMapIterable ` as well . Fixes # 5791
2.x : improve request accounting overhead in retry/repeat __EoT__ This PR improves the request accounting overhead in the ` retry ` and ` repeat ` operators . Previously , every individual ` onNext ` invocation signaled a an item production , which had a lot of overhead since the ` SubscriptionArbiter ` has to serialize invocations of ` setSubscription ` , ` request ` and ` produced ` . The improved algorithm counts the ` onNext ` calls in a field and calls ` produced ` once with the total count before subscribing to the upstream again . Other small changes : - rename inner class to ` RetrySubscriber ` ( sloppy copy-paste ) , - add ` isCancelled ( ) ` check to ` repeatUntil ` subscription loop , which was somehow missing .
2.x : Update Maybe doOn { Success , Error , Complete } JavaDoc __EoT__ This PR updates the JavaDoc of the ` Maybe.doOnSuccess ` , ` Maybe.doOnError ` and ` Maybe.doOnComplete ` marble diagrams and adds an explicit sentence about mutually exclusive events . ! [ DoOnSuccess ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnSuccess.m.png ) -- -- - ! [ DoOnError ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnError.m.png ) -- -- - ! [ DoOnComplete ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnComplete.m.png )
2.x : Describe merge ( ) error handling . __EoT__ This PR adds some clarifications about how ` merge ` handles ( multiple ) errors in a new *Error handling* section in its ` < dl > ` JavaDoc entry . There exist several dozen variants of ` merge ` in the various base classes that could also include such JavaDoc addition . Once the wording has been reviewed , the other places will receive a separate PR . Related : # 5779 , # 5780
2.x : Improve BehaviorSubject JavaDoc + related clarifications __EoT__ This PR adds detailed behavior and feature description to the ` BehaviorSubject ` JavaDoc . In addition , small mistakes in the ` BehaviorProcessor ` JavaDoc have also been fixed and both received an extra section : ` Error handling ` that points at the global error handler for undeliverable errors . Due to this link , the ` RxJavaPlugins.onError ` JavaDoc has been also expanded .
Rename interface parameters __EoT__ # 5762 Signed-off-by : shaishavgandhi05 < shaishgandhi @ gmail.com >
2.x : fix timed exact buffer calling cancel unnecessarily __EoT__ This PR removes the unnnecessary ` cancel ` / ` dispose ` call from the exact-boundary timed ` buffer ( ) ` operators in ` Observable ` and ` Flowable ` when the upstream completes normally . Originally appeared in a [ StackOverflow question ] ( https : //stackoverflow.com/questions/47772415/rxjava2-completing-a-cold-source-flowable-explicitly ) .
2.x : marble additions and updates ( 12/11 ) __EoT__ This PR adds or updates mable diagrams of ` Observable ` : - [ doOnTerminate ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnTerminate.o.png ) - [ elementAt ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/elementAt.o.png ) - [ elementAt ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/elementAtDefault.o.png ) with default - [ elementAtOrError ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/elementAtOrError.o.png ) - [ firstOrError ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/firstOrError.o.png ) - [ flatMap ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flatMapDelayError.o.png ) with error delayed - [ flatMap ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flatMapMaxConcurrency.o.png ) with maximum concurrency Related : https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-350682783
2.x : add a couple of @ see to Completable __EoT__ This PR adds a couple of ` @ see ` cross references to ` Completable ` JavaDoc .
2.x : Add retry ( times , predicate ) to Single & Completable and verify behavior across them and Maybe . __EoT__ - Add retry ( times , predicate ) to Single & Completable ( Maybe had it already ) which just forwards to Flowable for now - verify behavior across the three reactive types Happy to get better testing names
2.x : improve autoConnect ( ) Javadoc + add its marble __EoT__ This PR improves the JavaDoc of ` ConnectableObservable.autoConnect ( ) ` and ` ConnectableFlowable.autoConnect ( ) ` operators and adds the respective marble diagrams : ! [ autoConnect ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.o.png ) ! [ autoConnect ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png )
2.x : Check runnable == null in *Scheduler.schedule* ( ) . __EoT__ To enforce ` @ NotNull ` guarantee for the PR # 5734 , see https : //github.com/ReactiveX/RxJava/pull/5734/files # r153951238
2.x : Add marbles for Observable ( 12/06 ) __EoT__ This PR adds some missing marbles to ` Observable ` : - [ concatMapCompletable ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapCompletable.o.png ) - [ concatMapDelayError ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapDelayError.o.png ) - [ concatMapEager ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapEager.o.png ) - [ concatMapEagerDelayError ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapEagerDelayError.o.png ) - [ concatMapIterable ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapIterable.o.png ) - [ doAfterNext ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doAfterNext.o.png ) - [ doFinally ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doFinally.o.png ) Tracked in # 5319 , images in [ comment ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-349595094 ) .
2.x : add/update Observable marbles 11/28 __EoT__ This PR adds or updates mable diagrams of ` Observable ` : - [ ` blockingFirst ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingFirst.o.png ) - [ ` blockingFirst ` with default ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingFirst.o.default.png ) - [ ` toFuture ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFuture.o.png ) - [ ` blockingSubscribe ` no arguments ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingSubscribe.o.0.png ) - [ ` blockingSubscribe ` with 1 argument ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingSubscribe.o.1.png ) - [ ` blockingSubscribe ` with 2 arguments ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingSubscribe.o.2.png ) - [ ` blockingSubscribe ` with 3 arguments ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingSubscribe.o.png ) - [ ` collectInto ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/collectInto.o.png ) - [ ` doOnComplete ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnComplete.o.png ) - [ ` doOnError ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnError.o.png ) - [ ` doOnLifecycle ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnLifecycle.o.png ) - [ ` doOnNext ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnNext.o.png ) - [ ` doOnDispose ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnDispose.png ) Related # 5319 : [ comment ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-347482919 ) .
2.x : Fix TrampolineScheduler not calling RxJavaPlugins.onSchedule ( ) , add tests for all schedulers . __EoT__ Noticed during figuring out how # 5734 works .
2.x : improve wording and links in package-infos + remove unused imports __EoT__ This PR is to improve the wording of a few ` package-info.java ` JavaDocs and removes two unused imports .
2.x : internal API to get distinct Workers from some Schedulers __EoT__ This PR adds an internal interface ` SchedulerMultiWorkerSupport ` that allows retrieving multiple workers from a ` Scheduler ` that implements this interface . The standard ` Scheduler.getWorker ( ) ` can be invoked as many times as necessary , but specific implementations such as the ` computation ( ) ` ` Scheduler ` and the [ ` ParallelScheduler ` ] ( https : //github.com/akarnokd/RxJava2Extensions # parallelscheduler ) is not guaranteed to return workers that are backed by distinct single-threaded thread pools . This does not effect other scheduler types because : - they are single threaded ( ` single ( ) ` ) or do n't use threads at all ( ` trampoline ( ) ` ) and - already hand out distinct workers ( ` io ( ) ` , ` newThread ( ) ` ) . Such worker reuse can happen when in a highly concurrent application , typical tasks are mixed with parallel tasks and both pull out workers from these ` Scheduler ` s . If this is happens , it is possible there will be duplicate threads used by the parallel operations
2.x : Check isdisposed before emitting in SingleFromCallable __EoT__ Previously SingleFromCallable did not check if the subscriber was unsubscribed before emitting onSuccess or onError . This fixes that behavior and adds tests to SingleFromCallable , CompletableFromCallable , and MaybeFromCallable . Fixes # 5742
2.x : marbles for Observable all , fromPublisher , zipArray __EoT__ This PR adds a marble diagram to ` fromPublisher ` and updates the marbles of ` all ` and ` zipArray ` inside ` Observable ` . The images can be seen in [ this comment ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-346585222 ) of # 5319 .
Improved code formatting for README.md __EoT__ Modifications : - Inserted indents for code readability in code blocks
Restore license to correct text . __EoT__ This section is a template on how to apply the header and not something that actually should have been changed . Refs # 4980 .
2.x : Implement as ( ) __EoT__ This implement ` as ( ) ` support as discussed in # 5654 I took the opportunity to try to standardize the docs and tests for it ( which vary a little bit across implementations of ` to ( ) ` ) Related : # 5654
2.x : distinguish between sync and async dispose in ScheduledRunnable __EoT__ This PR adds logic to distinguish between synchronous and asynchronous dispose calls when ` setFuture ` is executing . It should prevent interrupting the currently running task body if it requested cancellation indirectly before the ` setFuture ` was executed by the Thread which scheduled the task . Fixes # 5711
2.x : Rename variable name `` subject '' to `` processor '' for exact expression __EoT__ Rename variable name `` subject '' to `` processor '' in processor pacakage
Remove duplicate nullity check line from Observable.toMap ( ) __EoT__ Small cleanup to remove duplicate nullity check line from ` Observable # toMap `
2.x : Add a sentence to documentation of take ( ) operator . __EoT__ # 5716
2.x : Javadocs : add period to custom scheduler use sentences __EoT__ There were missing ` . ` from sentences in the operator Javadocs detailing certain overloads use custom ` Scheduler ` s .
2.x : BaseTestConsumer values ( ) and errors ( ) thread-safety clarifications __EoT__ This PR adds clarifications to the ` BaseTestConsumer.values ( ) ` and ` BaseTestConsumer.errors ( ) ` method in regard to accessing elements while the upstream is still actively emitting events . Related discussion : # 5712
Remove mentions of Main thread from Schedulers.single ( ) javadoc . __EoT__ To avoid confusion . One could think that ` single ( ) ` can be used to execute code on `` Main '' thread .
2.x : Moved tests to FromCallableTest from FromCompletableTest __EoT__ Fixes # 5698 . There was a test class named ` ObservableFromCompletableTest ` which actually was targeting ` ObservableFromCallableTest ` . This was most likely just a naming issue . Copied all tests from ` ObservableFromCompletableTest ` to ` ObservableFromCallableTest ` and deleted the former class .
2.x : fix Completable.concat to use replace ( do n't dispose old ) __EoT__ ` Completable.andThen ` , ` concat ( Iterable ) ` and ` concatArray ( ) ` disposed the previous ` Disposable ` when receiving the new ` Disposable ` from the next source which could lead to interruption . ` concat ( Publisher ) ` already uses ` replace ` instead of ` update ` . There is a peculiar interplay between ` subscribeOn ` , ` observeOn ` and the trampoline in ` concat ` which can trigger such an interruption : the task of the ` observeOn ` is cancelled with ` mayInterruptIfRunning == true ` because the ` dispose ` call chain shuts down the worker of the ` observeOn ` from the ` subscribeOn ` 's thread . Reported in # 5694
Update 'java ' → 'java-library ' Gradle plugin , update deps configurations . __EoT__ Documentation : https : //docs.gradle.org/4.2.1/userguide/java_library_plugin.html Reasoning : - ` api ` instead of ` compile ` shows intention better , ie RS should be available for RxJava users - ` testImplementation ` instead of ` testCompile ` [ should hide dependencies from RxJava pom.xml ] ( https : //search.maven.org/remotecontent ? filepath=io/reactivex/rxjava2/rxjava/2.1.5/rxjava-2.1.5.pom ) - If [ RxJava 3.x will actually be split into multiple modules ] ( https : //github.com/ReactiveX/RxJava/issues/5621 ) , ` api/implementation ` configurations might be handy Issues : - JMH Gradle Plugin does n't seem to properly support ` api ` , so I had to manually declare RS for ` jmh ` configuration @ akarnokd can you please check if Eclipse works ok with this ? If not , we probably need to add : `` ` groovy plugins.withType ( EclipsePlugin ) { project.eclipse.classpath.plusConfigurations += [ configurations.api ] } `` `
2.x : Add TCK test for limit ( ) __EoT__ This PR adds a Reactive-Streams TCK test for ` limit ( ) ` .
2.x : More Observable marble fixes ( 10/18 ) __EoT__ Update several ` Observable ` marble diagrams . Images can be viewed [ here ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-337563753 ) . - ` zipIterable ` - ` ambWith ` - ` blockingForEach ` - ` blockingIterable ` - ` blockingLast ` - ` blockingLast ( T ) ` - ` blockingMostRecent ` - ` blockingNext ` - ` blockingSingle ` - ` blockingSingle ( T ) ` - ` cacheWithInitialCapacity `
2.x : add limit ( ) to limit both item count and request amount __EoT__ This PR adds the operator ` limit ` to limit the number of items as well as the total request amount . Some asynchronous boundary-like sources , such as network libraries that translate from/to ` Flowable ` / ` Publisher ` , may not modulate or limit downstream requests and thus the other side may produce items unnecessarily . Alternatives , such as ` take ( N ) ` is designed to go unbounded if its downstream requests more than N to improve performance of local flows and ` rebatchRequests ( M ) ` will keep requesting once 75 % of M has been received . Note that requests are negotiated on an operator boundary and ` limit ` 's amount may not be preserved further upstream . For example , ` source.observeOn ( Schedulers.computation ( ) ) .limit ( 5 ) ` will still request the default ( 128 ) elements from the given ` source ` . Related discussion : # 5077 . Blog : [ Java 9 Flow API : taking and skipping - Limiting the request amount ] ( http :
2.x : Add PublishProcessor JMH perf comparison __EoT__ This PR adds a Perf class to measure the overhead of request management inside ` PublishProcessor ` and a comparison with ` PublishSubject ` . Note that running JMH with RxJava under Windows is currently not possible because Gradle adds so many of its own jar dependencies that the resulting command line classpath exceeds the 32k limit . Results with 2.1.5 release ( separate gradle project , Windows 7 , i7 4790 , Java 8u144 ) ! [ image ] ( https : //user-images.githubusercontent.com/1269832/31654835-74257c76-b327-11e7-801f-49c46e0321b2.png ) The bounded benchmark indicates a 4x the throughput for some reason I do n't understand yet .
2.x : coverage , add SingleToFlowableTest __EoT__ Add `` SingleToFlowableTest '' to cover toFlowable with test .
2.x : fix PublishProcessor cancel/emission overflow bug __EoT__ This PR should fix the bug that caused the test failure in # 5545 . The bug manifested itself when a cancellation was happening the same time a request 1 was being fulfilled . Since the same request accounting was used for cancellation indicator , if the cancel happened between the ` onNext ( ) ` 's ` get ( ) ` check and ` decrementAndGet ` , this ` decrementAndGet ` decremented Long.MIN_VALUE unconditionally , which lead to a state that would appear the Subscriber still can receive events . A concurrent ` offer ` , which saves the current array of registered ` Subscriber ` s , then would emit an item and overflow the ` Subscriber ` . The fix is to use the cancellation-aware ` BackpressureHelper.producedCancel ( ) ` utility . Unit test were added to verify the correct behavior on both ` PublishProcessor ` and ` BehaviorProcessor ` ( the latter uses different cancellation mechanism via a dedicated field ) .
Fix a misleading documentation of Observable.singleElement ( ) __EoT__ This PR improves the documentation of ` Observable.singleElement ( ) ` , as mentioned in https : //github.com/ReactiveX/RxJava/issues/5317 . An appropriate unit test to verify the ` empty ` behaviour already exist ( ` ObservableSingleTest . testSingleWithEmpty ( ) ` ) , I just added one more check there to make it very explicit that an error is not thrown . As a side note , I 'm attaching an updated Marble diagram for the method that includes all 3 states of the resulting Maybe ( empty , success , error ) . I believe this is listed in https : //github.com/ReactiveX/RxJava/issues/5319 . ! [ singleelement ] ( https : //user-images.githubusercontent.com/4089934/31583261-a6da996a-b18f-11e7-8682-dffa647c7e4a.png )
2.x : improve Flowable.timeout ( ) __EoT__ This PR improves the internal overhead of the ` Flowable.timeout ` operator ( its 2 timed and 2 selector-based versions ) to use the adapted [ indexed atomic state transition approach ] ( http : //akarnokd.blogspot.hu/2017/09/java-9-flow-api-timing-out-events.html ) . In addition , there was a race condition and potential event loss in ` TestScheduler ` : - ` peek ( ) ` could return ` null ` if the task was removed from the queue ( via disposing it ) between the ` isEmpty ( ) ` check and ` peek ( ) ` itself . - In addition , if the task was disposed between the ` peek ` and ` remove ` , the ` remove ` could remove the new head of the queue which is no longer what ` peek ` saw and results in tasks being dropped .
Fix broken license link __EoT__ I found a broken link in the CONTRIBUTING docs . The link was referencing the LICENSE document on master ( which does n't exist currently ) . I fixed it to point to the correct document on the 2.x branch .
2.x Upgrade testng to fix issue # 5641 __EoT__ Fix for # 5641 Method names now show up in gradle console when tests are skipped and in testng html output ( previously no test names were showing up in html output for skipped or completed tests ) .
2.x : inline disposability in Obs.concatMap ( Completable ) __EoT__ The inner ` Observer ` type and the ` SequentialDisposable ` of the ` concatMap ` and ` concatMapCompletable ` can be combined into a single instance , saving on indirection and allocation . ( I 've noticed this when reviewing # 5649 . )
2.x : update Obs.just ( 2..10 ) & switchOnNextDelayError marbles __EoT__ This PR updates the marble diagrams of the 2..10 argument ` Observable.just ( ) ` and two overloads of ` Observable.switchOnNextDelayError ` . Images in [ Issue 5319 ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-335124895 ) .
2.x Add concatMapCompletable ( ) to Observable __EoT__ Add ` concatMapCompletable ( ) ` to ` Observable ` as discussed in # 4853 I did n't think it made sense in other reactive types . Code is mostly a copy of ` ObservableConcatMap ` . Let me know if there is a better style of code to base this off instead . It also does not have the option to delay errors as concatMap ( ) does , not sure if that is needed .
2.x : Fix subscribeWith documentation examples __EoT__ This PR improves a documentation of ` subscribeWith ` functions in ` Single ` , ` Maybe ` , ` Completable ` by making sure examples are compilable ( by using classes which implement ` Disposable ` ) . This should fix issue # 5642 . In that issue @ akarnokd approved my idea to use ` DisposableMaybeObserver ` in the example , but as I looked in other classes , I noticed that ` Observable.subscribeWith ( ) ` documentation uses a ` ResourceObserver ` ( which implements ` Disposable ` ) , so I thought that this is the way to go in all other top-classes ? If you think that this is not the case , and instead all of them should be switched to use ` Disposable*Observer ` in their examples , let me know , I will do it in this way then . I think that all those example should use similar classes .
2.x : improve package JavaDoc __EoT__ Add ` Maybe ` to the ` io.reactivex ` package Javadoc . Reword ` io.reactivex.observers ` and ` io.reactivex.subscribers ` as there are no utility classes in 2.x in them to create consumers from callbacks ( those are internal and offered by the ` subscribe ( ) ` overloads only ) .
2.x : Readme.md update snapshot links __EoT__ Update the snapshot link to the upcoming 2.1.5+ and 2.2.x versions . Also I 've added a convenience link to the actual directory listing of the various snapshots hosted by JFrog .
2.x : additional warnings for fromPublisher ( ) __EoT__ This PR adds JavaDoc warnings for ` fromPublisher ` as people still try to implement a source through it and fail to follow the specification like this : `` ` java // DO N'T DO THIS ! Flowable.fromPublisher ( ( Subscriber < Integer > s ) - > s.onNext ( 1 ) ) ; `` ` Even though ` Publisher ` is a single abstract method ( SAM ) type , it is almost never reasonable to write a source with it that does n't require a per-subscriber state . The example above fails to setup backpressure properly and it did n't call ` s.onSubscribe ( ) ` for that , causing ` NullPointerException ` whenever the ` Subscription ` would be needed ( i.e. , for cancellation and requesting ) by the downstream operator . ` Maybe ` does n't have ` fromPublisher ` .
2.x : Added Automatic-Module-Name instruction in build.gradle __EoT__ Credits to @ zyxist for pointing this out in the issue # 5618 This will assign a module name to RxJava 2 according to the the recommended module naming conventions in the generated manifest .
2.x : Fixing JavaDoc warnings __EoT__ Minor fixes for warnings reported by ` javadoc ` tool , mentioned in # 5634
Upgrade to Gradle 4.2.1 , remove nebula plugin dependency __EoT__ This PR upgrades the Gradle runtime to 4.2 ( which supports Java 9 ) and gets rid of the ` rxjava-nebula ` plugin . Its two features , publishing a snapshot and publishing a release has been manually implemented in ` build.gradle ` based on some [ online examples ] and [ RxAndroid 's ] ( https : //github.com/ReactiveX/RxAndroid/blob/2.x/rxandroid/build.gradle ) variant . The snapshot publication [ works ] ( https : //oss.jfrog.org/artifactory/libs-snapshot/io/reactivex/rxjava2/rxjava/2.2.0-SNAPSHOT/ ) and to test the release , we may have to burn a couple of version tags from 2.1.x . The PR also renamed the ` perf ` directory into ` jmh ` because the replacement JMH plugin expects those files there .
2.x : fix incorrect error message at SubscriptionHelper.setOnce __EoT__ I found an incorrect error message at ` SubscriptionHelper.setOnce ` . The error message should mention that the second argument ` Subscription s ` is null , but the error message says ` `` d is null '' ` .
2.x : Add Single.delay overload that delays errors __EoT__ Much like # 5382 , I discovered when trying to fake a slow/flaky backend that ` Single.delay ` does n't delay errors . This PR adds an overload that does , bringing ` Single.delay ` in line with ` Observable.delay ` . It also corrects the javadoc for existing overloads ( # 5409 only updated 1/2 ) .
2.x : Fix Observable.delay & Flowable.delay javadoc __EoT__ Error notifications can be delayed when using the overloads with a ` delayError ` parameter .
Updating JavaDoc with correct return types __EoT__ A small PR with updated JavaDoc , mentioned in the issue # 5595 ( thanks to @ RobLewis for reporting it ) . Updated documentation about return types , where ` Observable ` was incorrectly mentioned instead of ` Single ` .
2.x : fix Single.timeout unnecessary dispose calls __EoT__ This PR fixes the unnecessary ` dispose ` call towards the main source when the source terminates and reworks the internals to use less allocation and indirection .
implement Maybe.switchIfEmpty ( Single ) __EoT__ Adds ` Maybe.switchIfEmpty ( Single ) ` , fixes # 4544 .
Add NullPointerException comment __EoT__ Add comments in Single.java
Remove unnecessary git command from build instructions __EoT__ Removing line to match wiki instructions and since 2.x is the default branch
Added formatting to license section __EoT__ The license section did not previously contain markdown syntax formatting . Added 4 spaces to add it .
2.x : Add assertValuesOnly to BaseTestConsumer . __EoT__ Adds ` assertValuesOnly ` that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating . Fixes # 5555
2.x : fix Obs.combineLatestDelayError sync initial error not emitting __EoT__ This PR fixes the case reported in # 5558 where a synchronous first , non-empty source triggered an error completion immediately instead of giving a chance to the other sources to form combinations . The fix also includes : - initialization of the ` CombineObserver ` s now happen in the constructor , - the ` AtomicReference < Disposable > ` of the inner observers are now inlined into ` CombineObserver ` , - cleaned up drain logic - unit tests verifying ` FlowableCombineLatest ` ( no changes required there ) .
[ Typo ] Update Schedulers.java __EoT__ Just a typo I came across while reading the javadocs .
2.x : upgrade Reactive-Streams dependency to 1.0.1 __EoT__ This PR upgrades the dependency to Reactive-Streams 1.0.1 final , and - organizes the other dependency versions into nice variables , - allows the javadoc generator to link to the RS javadoc . A couple of remarks on the other dependency versions : - *JMH 1.16* : last version that supports Java 6 - *TestNG 6.9.10* : last version that does n't break the RS TCK and works with the TestNG Eclipse plugin - *Mockito 2.1.0* : I guess upgrading within the minor version has little advertising value . - *JUnit 4.12* : Latest version everything supports as of now .
2.x : Fix flaky MaybeFromCallableTest.noErrorLoss __EoT__ The ` MaybeFromCallableTest.noErrorLoss ` failed occasionally because the ` await ` did n't throw ` InterruptedException ` as expected . The reason for this is that if the main ` to.cancel ( ) ; ` and the subsequent ` cdl2.countDown ( ) ; ` happened just before ` await ( ) ` was called , the ` await ` did n't even look at the thread 's interrupt status but returned immediately as there was nothing to wait for . The fix just removes that ` cdl2.countDown ` and adds a regular timeout to the inner ` await ` . * ( Detected while verifying RxJava 2 against JDK 9b181 . ) *
2.x : Try fixing Travis CI lack of java __EoT__ Travis CI has replaced the previous Precise image with the Trusty image as part of an ongoing rollout . Unfortunately , the Trusty image fails for ` oraclejdk7 ` because probably it is no longer supported ( although I could n't find anything about it ) . This PR tries to identify what 's available by trying a matrix of build setups .
2.x : add/update Observable marbles ( 07/30 ) __EoT__ This PR updates the marbles of the following ` Observable ` operators : - ` just ` ( [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/just.item.png ) ) by @ leonardortlima - ` rangeLong ` ( [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/rangeLong.png ) ) by @ leonardortlima - ` startWith ` ( [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/startWith.item.png ) ) by @ leonardortlima - ` startWithArray ` ( [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/startWithArray.png ) ) by @ leonardortlima - ` sorted ` ( [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sorted.png ) ) by @ leonardortlima See # 5319 .
2.x : add missing null check to fused Observable.fromCallable __EoT__ There was a missing null check on the fusion path in ` ObservableFromCallable ` which meant the consumer considered the source to be empty . ( The ` FlowableFromCallable ` was okay . ) Discovered on StackOverflow : https : //stackoverflow.com/questions/45304226/null-handling-in-rx-java2-flatmap Unit test mirrored and updated to verify both ` Flowable ` and ` Observable ` versions .
Remove unnecessary generic type parameters for delaySubscription methods in Single __EoT__ I was running into an issue with using the ` delaySubscription ( long time , TimeUnit unit ) ` while testing a ` Single ` and I saw that the ` U ` generic type parameter was there unnecessarily . I believe this is only a Kotlin specific issue as I tried playing around in Java and there was no inference error upon compilation . To get it to compile for Kotlin , I would need to specify the generic type parameter and it did n't matter what I set it to as ` Any ` was a valid option : ` .delaySubscription < Any > ( 5 , TimeUnit.SECONDS ) ` . I also went through ` Flowable ` , ` Observable ` , and ` Maybe ` and saw that the generics were missing for the time-specific ` delaySubscription ` methods so I believe they should be removed from ` Single ` as well to help keep things consistent and remove this compilation error for future Kotlin users . ! [ kotlin_error ] ( https : //user-images.githubusercontent.com/1130517/28450952-83ad8468-6db8-11e7-841e-85be4ddf0c26.png )
2.x : fix SpscLAQ nepotism , FlowableRefCountTest.testRefCountAsync flaky __EoT__ This PR fixes the so-called GC Nepotism ( see # 3794 ) in ` SpscLinkedArrayQueue ` by not nulling out the previous buffer 's next pointer upon switching buffers in the ` peek ( ) ` / ` poll ( ) ` methods . In addition , the FlowableRefCountTest.testRefCountAsync has been reworked to be more forgiving towards unexpected delays due to system load ( reported in # 5506 ) .
Indent comments __EoT__ Indent comments to be consistent to other comment 's indentation
Fix a typo in the changelog __EoT__ Fixed a typo in the work ` changelog `
Fixed doc for F.reduce ( seed , reducer ) , F.reduceWith ( seedSupplier , reducer ) and O.reduce ( seed , reducer ) __EoT__ Corrected the doc for Issue No : # 5476
Fixed Javadoc for Flowable and Observable reduce . __EoT__ Fixed Javadoc for ` Flowable.reduce ( T , BiFunction ) ` and ` Observable.reduce ( T , BiFunction ) ` mentioning the wrong return type . # 5456
2.x : See if sudo required results in consistent & faster build times __EoT__ I asked the Travis support about the slow build times of lately and they suggested I try ` sudo : required ` to have an isolated build VM instead of the shared container-based one . I 'll rerun this PR a couple of times to see the effects .
2.x : fix wording of toList , fix a/an in subscribeOn __EoT__ This PR - fixes the wording of ` toList ( ) ` putting emphasis of the need for finite sources and removes a misleading/incorrect sentence about unstoppability ; - corrects a/an spelling errors in ` subscribeOn ` . - removes the mention of ` toBlocking ` from the ` toFuture ` javadoc
2.x : FlowableTimeoutTimed - replace AtomicReference with mutable field __EoT__ As per discussion in # 5461 . The timer fields in the Subscriber classes in [ FlowableTimeoutTimed ] ( https : //github.com/ReactiveX/RxJava/blob/4c22f969927a98bc35458645d373bcb94b7df622/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java ) are ` AtomicReference ` s but this is not required as the fields are accessed synchronously . The ` timer ` field in ` TimeoutTimedOtherSubscriber ` did require an ` AtomicReference ` because of the dispose call [ here ] ( https : //github.com/ReactiveX/RxJava/blob/4c22f969927a98bc35458645d373bcb94b7df622/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java # L173 ) but this call is not required if we just call ` worker.dispose ( ) ` . No unit test additions . P.S . 9321 unit tests in RxJava 2.x ! An outrageous amount of work , thanks @ akarnokd ( and other contributors ) !
Refactoring SingleSchedulerTest __EoT__ Hi , I refactored ` SingleSchedulerTest ` . Now it extends ` AbstractSchedulerTests ` , so redundant tests ( with duplicated code ) could be removed in favor of abstract tests . Now , thanks to the abstract test class , ` SingleScheduler ` has 21 unit tests instead of just 7 . This approach is consistent with the test classes for other Schedulers . Regards , Piotr
2.x : fix Javadoc mistakes and some style __EoT__ This PR fixes most JavaDoc errors discovered from RxJava 3 preview 's javadoc generator ( doclint enabled ) . ( I was unable to make gradle in RxJava 2 to report the same errors regardless of source level and underlying Java 8 runtime locally . ) Changes include : - Fix closing tag of ` < dt > ` in ` < dl > ` s - Fix ` < td > ` to ` < dt > ` in ` < dl > ` s - Replace ` > ` in ` < code > ` blocks with ` & gt ; ` ( as it is forbidden in doclint of Java 8 ) - Replace ` < ` in ` < code > ` blocks with ` & lt ; ` - Add source code checker for the previous mistakes - Remove ` initialSeed ` mentions from ` scan ` operators that take a ` seedSupplier ` and remove the deferred example as well - Switch the order of ` < code > < pre > ` to ` < pre > < code > ` . - A
Remove the @ NonNull annotation from Function __EoT__ As per per the discussion in # 5447
2.x : concat to report isDisposed consistently with termination __EoT__ This PR makes sure the ` Disposable ` of a ` concat ` operator reports ` true ` when the sequence terminates . Reported in # 5439
2x : Fix wording in Async and Publish processors javadoc . __EoT__ Seams that these are some leftovers from the 1.x - > 2.x refactoring .
2.x : Gradle to use less memory , missed an export command __EoT__ Looks like there was a missing `` export '' keyword in the build options and thus gradle ate all 3 GB memory dancing on the edge of the OOMKiller .
2.x : fix time bounded replaySubject getValue ( ) inconsistency with getValues ( ) on old items __EoT__ See https : //github.com/ReactiveX/RxJava/issues/5433 .
2.x : fix buffer ( time , maxSize ) duplicating buffers on time-size race __EoT__ The PR fixes both the time+maxSize bound ` buffer ` operators of ` Flowable ` and ` Observable ` . The logic did n't properly mutually exclude the timer action and the ` onNext ` action , resulting in probabilistic emission of the same buffer twice . Reported in # 5426 .
2.x : more eager cancellation in flatMapX __EoT__ The FlatMapX tests kept failing because there was a race between the cancellation and the disposing of their inner set : the cancel may have interrupted the test wait and ended up in the inner subscribe before ` set.isDisposed ( ) ` would become true in the ` dispose ( ) ` call of the operator that run on the main thread . The change adds/uses a boolean field that gets set first and is checked before the inner are subscribed .
2.x : fix periodic scheduling with negative period causing IAE __EoT__ This PR adds unit tests to verify the ` Scheduler.schedulePeriodicallyDirect ` and ` Scheduler.Worker.schedulePeriodically ` works with non-positive period as required by the Javadoc . The ` computation ` and ` single ` schedulers were not working properly and the underlying ` ScheduledExecutorService ` crashed with ` IllegalArgumentException ` thus these are now fixed with custom handler for the ` period < = 0L ` cases . Related : # 5416 .
2.x : fix doOnNext failure not triggering doOnError when fused __EoT__ This PR fixes an issue when in a fused chain of ` doOnNext ` and ` doOnError ` the ` doOnNext ` function fails , the ` doOnError ` consumer is not called . Originally reported in Reactor-Core : https : //github.com/reactor/reactor-core/issues/664
Fix javadoc for Observable.reduce ( ) and Observable.reduceWith ( ) __EoT__ The sample code given in the javadoc for ` Observable.reduce ( ) ` is n't compiling , since the function returns a ` Single ` . This PR changes it to a compiling example . It also updates the javadoc for ` reduceWith ( ) ` to better match its actual behaviour . *Remark* I 'm not sure whether the sample code for ` reduce ( ) ` is needed at all . The problem that it addresses might be solved better by using ` reduceWith ( ) ` , imho . *Update* - similar changes applied to ` Flowable.reduce ( ) ` and ` Flowable.reduceWith ( ) `
DefaultSubscriber javadoc sample fix __EoT__ The example in the javadoc of ` DefaultSubscriber ` is not compiling , ` DefaultSubscriber ` is not a ` Disposable ` . This PR updates the javadoc to provide a compiling example . Fix is similar to # 5405 for ` DefaultObserver ` .
2.x : Fix documentation of Single.doAfterTerminate . __EoT__ Fix the copy-paste error in the javadoc of ` Single.doAfterTeminate ` mentioning ` doAfterSuccess ` .
Update README.md __EoT__ Added Gitter.im chat for support . As discussed in # 5394
Changed minimum value of rx2.buffer-size to 1 __EoT__ Before the minimum value you could set with the system variable ` rx2.buffer-size ` was 16 . With this commit , that is changed to 1 .
2.x : add missing null checks on values returned by user functions __EoT__ This PR adds null checks to places where it was missing . In addition , the ` XMapNotification ` operators now report a composite exception of the original ` Throwable ` and the error thrown by the function that should return the continuation source . Also fixed ` TestSubscriber ` / ` TestObserver ` not cancelling the sequence if the fused poll crashed .
Fixed Javadoc for SingleFlatMapIterableObservable . __EoT__ Fixed Javadoc for ` SingleFlatMapIterableObservable ` .
2.x : make sure interval+trampoline can be stopped __EoT__ This PR fixes the case where a ` trampoline ` scheduler is used with the ` interval ` or ` intervalRange ` operator , the periodic emissions ca n't be cancelled properly . The synchronous and blocking nature of the periodic schedule is that the ` Disposable ` is never connected with the downstream and the ` interval ` stays in a drain-sleep loop per emission indefinitely . This PR changes the operators to use the ` Worker ` of a trampoline scheduler that is available before the drain-sleep loop thus a downstream cancellation can stop the loop . Any other `` async '' scheduler will still use the direct periodic scheduling facility . In addition , the trampoline loop has been fixed to check for the worker ` disposed ` state in the inner loop .
2.x : Fix typo in error message . __EoT__ When ` BaseTestConsumer ` receives fewer items than expected , the error shown has a typo . Replaced *Fever* with *Fewer* .
2.x : update some marbles of Observable __EoT__ Update/fix to a couple of marble diagrams in ` Observable ` : - ` singleOrError ` : [ reuse existing ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/singleOrError.png ) - ` combineLatestDelayError ` : [ reuse existing ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatestDelayError.png ) - ` concatArrayEager ` : [ new diagram ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-302041653 ) - ` erro ` r : [ new diagrams ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-302043293 ) - ` fromFuture ` : [ new diagrams ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-302054241 ) - ` fromIterable ` : [ new diagram ] ( https : //github.com/ReactiveX/RxJava/issues/5319 # issuecomment-302054967 )
2.x : Fix Javadoc of FunctionX __EoT__ fix the mistake for ` FunctionX ` javadoc
Fix Javadoc for Maybe.toSingle __EoT__ The Javadoc for the ` Maybe.toSingle ( ) ` overload that accepts a ` defaultValue ` incorrectly states that it will convert an empty ` Maybe ` into a ` Single ` that signals ` NoSuchElementException ` ( likely copied from the version of ` Maybe.toSingle ( ) ` that does not accept a default value ) . This change updates the Javadoc to indicate that the returned ` Single ` will emit ` defaultValue ` if called on an empty ` Maybe ` . Relevant existing test : https : //github.com/ReactiveX/RxJava/blob/8819cc933e26449751535bc48ba2f10852c9b96d/src/test/java/io/reactivex/maybe/MaybeTest.java # L2730
Add missing bracket to example code __EoT__ Difficult to count those with all the java 7 boilerplate !
Mark VolatileSizeArrayList as RandomAccess list __EoT__ This is needed for generic functions to select appropriate algorithm when searching etc . Details are in RandomAccess interface javadoc .
2.x : Fix Javadoc of Flowable.toObservable __EoT__ The ` Flowable.toObservable ( ) ` javadoc was referring to ` Publisher ` instead of ` Observable ` .
2.x : Apply promotions for v2.1 __EoT__ This PR applies the promotions listed in # 5243 . Suggested review strategy : - Check if the ` @ Experimental ` annotation has been removed or turned into ` @ Beta ` . - Check if the ` < p > History : 2.0.x ` matches the original value of the updated ` @ since 2.0.x ` .
2.x : Change ObservableSource.defer to Observable.defer in Observable.scan ( ) documentation . __EoT__ - changes ` ObservableSource.defer ` to ` Observable.defer ( ) `
2.x : more detailed no-multi-subscribe with std consumers error message __EoT__ This PR changes the `` Disposable already set ! '' and `` Subscription already set ! '' messages on the standard consumer classes ( ` DisposableSubscriber ` , ` DisposableObserver ` , etc . ) to something more meaningful : '' It is not allowed to subscribe with a ( n ) ` < class name > ` multiple times . Please create a fresh instance of ` < class name > ` and subscribe that to the target source instead . '' Where ` < class name > ` is a placeholder for the ` getClass ( ) .getName ( ) ` of the subclass of those consumer types . It should clearly state to avoid subscribing with them multiple times as well as printing the full class name to indicate the problem is with the use of the implementor class , and not with the abstract RxJava class . Inspired by [ this StackOverflow ] ( http : //stackoverflow.com/questions/43482263/rxjava2-protocolviolationexception-disposable-already-set ) question , one of many such questions . For the internal operators , the original error message stays because when they appear , that is still likely
2.x : add Single.unsubscribeOn ( ) __EoT__ This PR adds the ` Single.unsubscribeOn ( ) ` operator . Related : # 5300 .
Fix JavaDoc image for Single # flatMapObservable __EoT__ [ ` Single.flatMapObservable.png ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapObservable.png ) should be used for ` Single # flatMapObservable ` instead of [ ` Single.flatMap.png ` ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMap.png ) .
Improve doOnDispose JavaDoc __EoT__ Sorry for the earlier PR # 5295 ... : / This addresses the JavaDoc issues discussed in # 5283 . - Removes the Note in ` Observable.doOnDispose ` which claims its action would be called on terminal events . - Slightly adjusts the JavaDocs of the ` Maybe ` / ` Single ` / ` Completable ` variants . - Adds ` @ throws ` note to some ` Observable ` / ` Single ` / ` Maybe ` ` .doOnDispose ` as it was present in the ` Completable ` variant .
2.x : add/remove empty lines in ConnectableObservable and Observable __EoT__ **Edit : ** This PR adds a newline to ` ConnectableObservable ` and removes one excess empty line from ` Observable ` .
2.x : fix Flowable.flatMapMaybe/Single maxConcurrency not requesting more __EoT__ This PR fixes ` Flowable.flatMapMaybe ` and ` Flowable.flatMapSingle ` not replenishing from the upstream when they complete/error per inner source .
2.x : cleanup for text and javadoc 04/15 __EoT__ This PR - fixes a couple of documentation and message copy-paste errors - fixed FlowableFlattenIterable not checking for null returned by ` Iterator : :next ( ) ` - replace ` publisher ` with the appropriate name
2.x : BehaviorProcessor & Subject terminate-subscribe race __EoT__ This PR fixes the race condition in ` BehaviorProcessor ` and ` BehaviorSubject ` when ` onComplete ( ) ` or ` onError ( ) ` is called concurrently with ` subscribe ` and the consumer throws a ` NullPointerException ` instead of relaying the terminal event . The fix involves having a separate ` terminalEvent ` atomic field , CAS-ing in the actual or marker ` Throwable ` and reading that field in ` subscribe ` .
2.x : Single.subscribe ( BiConsumer ) consistent isDisposed __EoT__ Fixes the ` Single.subscribe ( BiConsumer ) ` to report ` isDisposed ` when terminating . Reported in # 5276 .
2.x : enable link to external JDK , fix Schedulers style __EoT__ This PR enables the generated Javadoc to ` { @ link } ` to JDK classes properly ( current 2.0.8 doc [ shows them ] ( http : //reactivex.io/RxJava/2.x/javadoc/2.0.8/io/reactivex/schedulers/Schedulers.html # io ( ) ) as plain text ) . I 'm linking to the v7 docs because v6 is ugly . In addition , I 've fixed the style of the ` Schedulers ` documentation by separating the **Supported system properties** properly into a new paragraph .
2.x : Remove commented out code in IoScheduler __EoT__ Removes some code that was commented out in ` IoScheduler ` . Those lines were last edited in 2 years ago , so I assume they should be safe to delete .
2.x : Fixed broken links in Readme file __EoT__ Fixed broken links for @ Beta and @ Experimental annotations Thank you for contributing to RxJava . Before pressing the `` Create Pull Request '' button , please consider the following points : - [ x ] Please give a description about what and why you are contributing , even if it 's trivial . - [ ] Please include the issue list number ( s ) or other PR numbers in the description if you are contributing in response to those . - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one . If you contribute an operator , ( if applicable ) please make sure you have tests for working with an ` empty ` , ` just ` , ` range ` of values as well as an ` error ` source , with and/or without backpressure and see if unsubscription/cancellation propagates correctly .
Remove @ NonNull annotations in BiConsumer method parameter __EoT__ This PR is part of https : //github.com/ReactiveX/RxJava/issues/5216 This PR remove @ NonNull annotations from `` ` BiConsumer `` ` method parameters , there 's no sense use these annotations in `` ` Single `` ` context because in this case `` ` BiConsumer `` ` always brings you a null parameter .
2.x : fix flatMapIterable appearing to be empty when fused __EoT__ The wrong logical expression in the ` isEmpty ( ) ` method made ` flatMapIterable ` complete earlier , even if data was available in the current iterable . Somewhat related : https : //github.com/reactor/reactor-core/issues/508 ( different logical bug in the same method ) .
Add nullPointerException comments and ObjectHelper test code . __EoT__ : )
2.x : fix CallbackCompletableObserver calling onError , ResourceX wording __EoT__ This PR contains the fix for incorrect call of the ` onError ` handler within ` CallbackCompletableObserver.onComplete ( ) ` reported in [ 5099 ] ( https : //github.com/ReactiveX/RxJava/issues/5099 # issuecomment-289544756 ) as well as wording fixes to the ` ResourceX ` javadoc .
Add TimeUnit null check test case in Timed __EoT__ 1 . It 's about Timed.java test case that is null check TimeUnit parameter . 2. formatting in BasicIntQueueDisposable 3. add testcase blockingIterableNegativeBufferSizeFail for blockingIterable 4. modify BlockingMultiObserver field ’ s modfier
2.x UnicastProcessor fail-fast support __EoT__ This PR adds support for fail-fast behavior to ` UnicastProcessor ` with methods ` UnicastProcessor < T > create ( boolean delayError ) ` , ` UnicastProcessor < T > create ( int capacityHint , Runnable onTerminated , boolean delayError ) ` . Relates to # 5165 , # 5217
2.x : safeguard against building with v1 tags __EoT__ This PR adds the same version guard that 1.x has : stop the build when the version tag does n't start with `` v2 . '' to prevent releasing a 2.x version under the 1.x numbering . This almost happened with today 's botched 1.2.8 release where I forgot to set the target tag to 1.x , but noticed the mistake and stopped the build . Since tags ca n't be deleted or retargeted , the fix ca n't prevent the wrong target tag mistake on itself . A small workaround is to mark bad tagged releases as pre-release . Either way , the 2.x snapshots have a fixed ` 2.0.0-DP0-SNAPSHOT ` and do n't draw a custom version number from the latest release tag on their branch , unlike 1.x .
[ 2.x ] UnicastSubject fail fast support __EoT__ This PR adds support for fail-fast behavior to ` UnicastSubject ` with methods ` UnicastSubject < T > create ( boolean delayError ) ` , ` UnicastSubject < T > create ( int capacityHint , Runnable onTerminated , boolean delayError ) ` . Relates to # 5165
2.x : prevent tasks to self interrupt on the standard schedulers __EoT__ Task wrappers of the various schedulers and modes ( direct & worker ) were able to get cancelled via interruption from the same thread they were running . Related # 5203 .
2.x : better documentation on the abstract consumer classes __EoT__ This PR improves the documentation of the abstract consumer classes such as ` DisposableSubscriber ` , ` ResourceSubscriber ` and their counterparts for the other base reactive types . It contains a lot of copy-paste so please read through all of the text in case the text was not properly adapted to the abstract class at hand . Related : # 5148 .
2.x : fix images of firstElement , flattenAsX , flatMapIterable __EoT__ This PR links in the new images from # 5130 for previously misleading marble diagrams of the operators .
2.x : increase timeout on parallel & completable tests __EoT__ This PR increases the timeout on ` CompletableTest ` test methods and on ` ParallelFlowableTest.parallelismAndPrefetchAsync ` . Related : # 5154 , # 5179 .
2.x : add ParallelTransformer interface , params-validation __EoT__ This PR adds the ` ParallelTransformer ` interface to match the other ` XTransformer ` interfaces , adds ` @ NonNull ` annotations to the ` ParallelFlowable ` operators and adds the ` ParallelFlowable ` class to the parameter validator test set .
2.x : Add a few more @ Nullable & @ NonNull annotations to public interfaces __EoT__ - adds the @ Nullable & @ NonNull annotations to - Emitters - Observer - OnSubscribe - Operator - Source - Transformer for Observable , Maybe , Single , Completable & Flowable .
2.x : add offer ( ) method to Publish & Behavior Processors __EoT__ This PR adds the ` boolean offer ( T item ) ` method to ` PublishProcessor ` and ` BehaviorProcessor ` to prevent ` MissingBackpressureException ` when one of the ` Subscriber ` s is not ready to receive element by indicating a false return value . The sender can then retry the offer with any wait strategy it choses . In addition , this PR adds Reactive-Streams Publisher TCK checks to verify ` AsyncProcessor ` , ` BehaviorProcessor ` , ` PublishProcessor ` , ` ReplayProcessor ` and ` UnicastProcessor ` as being ` Publisher ` s . Unfortunately , the TCK ca n't verify them as ` Processor 's because the TCK has certain expectations about how a ` Processor ` should behave ( namely : expects fail-fast , refCount-like nature ) .
2.x : fix concatMapEager should accept 0 for prefetch __EoT__ Fixes a bug that Flowable.concatMapEager ( mapper , maxConcurrency , prefetch ) and Observable.concatMapEager ( mapper , maxConcurrency , prefetch ) operators will not accept 0 and negative numbers . Reported in # 5185 .
2.x : reflection-based parameter validator & fixes __EoT__ This PR adds a reflection-based parameter validator to check the base reactive classes for proper parameter validation : null checks and argument ranges . The problems detected are fixed as well .
2.x : test to disallow anonymous inner classes __EoT__ This PR adds an unit test that scans the compiled .class files for anonymous inner classes naming ( i.e. , dollar sign followed by a number ) . Since all the main , test and perf classes end up in the same place , the test has exceptions for file names containing ` Perf ` or ` Test ` . The PR also fixes a few Checkstyle warnings from # 5177 and fixes a couple classes from tests that do n't have the word ` Test ` in their name and thus were detected .
2.x : fix replay ( ) .refCount ( ) leaking items between connections __EoT__ This PR updates ` Observable.replay ( ) ` and ` Flowable.replay ( ) ` **for 2.x** to not leak items between reconnections when run with ` .refCount ( ) ` . The ` replay ( ) ` operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data . Only a new ` connect ( ) ` clears this data which may or may not happen . Since ` refCount ` ensures that there wo n't be any latecommers to an already completed connection ( because it also drops its current subscribers on termination or when reaching zero ) , the ` replay ( ) ` can be reset to an empty state . Related : # 5172 , # 5181 .
2.x : fix private field access , few generics problems __EoT__ This PR fixes some private field accessor problems introduced by # 5174 as well as a couple of generics warnings . Note that in IntelliJ , there is a J2ME inspection for private access checks between parent and inner classes .
2.x : WIP removes anonymous inner classes . __EoT__ This is a WIP . Since the changes are big , an incremental review and PR was recommended by @ akarnokd - Removes them from flowable/observable/operators . - Issue [ # 5150 ] ( https : //github.com/ReactiveX/RxJava/issues/5150 )
2.x : add Observable.switchMapSingle and switchMapSingleDelayError __EoT__ This is a new operator discussed in # 4853 . The issue refers to a goodly number of new operators which I 'll do bit by bit as my time allows and to ensure review is not too daunting .
2.x : Single.subscribe ( ) to report isDisposed ( ) true on success/error __EoT__ The ` ConsumerSingleObserver ` did n't report ` isDisposed ` consistently with its state . Reported in # 5160 .
Add @ NonNull to the methods of Emitter __EoT__ This PR is a part of # 4876 This PR adds ` @ NonNull ` annotation to some methods of ` Emitter ` so that the users of RxJava migrating from 1.x to 2.x can easily know passing null to the methods will cause NPE .
2.x : Java 9 compatibility fixes ( March 3 ) __EoT__ Java 9 has changed its overload resolution algorithm and things that resolved unambiguously in Java 8 no longer resolve : `` ` java Flowable < ? extends T > source = ... source.subscribe ( new FlowableSubscriber < T > ( ) { ... } ) ; `` ` With the code above , javac 8 , Eclipse and IntelliJ 2017 EAP picks ` Flowable.subscribe ( FlowableSubscriber < ? super T > s ) ` as expected . However , javac 9 finds it ambiguous with ` Flowable.subscribe ( Subscriber < ? super T > s ) ` despite IntelliJ 2017 EAP not indicating any error and still jumping to the right method via CTRL+Click . The problem may come from the ` ? extends T ` part of the declaration . Having just ` Flowable < T > ` compiles properly with javac9 . Luckily , we do n't need ` ? extends T ` and this PR changes the internal signatures of the affected components .
2.x : fix timed replay-like components replaying outdated items __EoT__ The timed versions of ` Flowable.replay ( ) ` , ` ReplayProcessor ` , ` Observable.replay ( ) ` and ` ReplaySubject ` all replay outdated items to new subscribers and through the ` getValues ( ) ` and ` size ( ) ` state-peeking methods , similar to issue # 3917 resolved via # 4023 . The fix includes a node-walk for new subscribers that skips old entries . Some unit tests were n't logically considering the emission pattern ( i.e. , items timed out should n't appear ) and have been fixed as well . Reported in # 5139 .
2.x : add TestSubscriber.withTag __EoT__ This PR adds the method ` withTag ` to the ` TestBaseConsumer ` that allows setting a textual tag which is then appended to the assertion failure 's message : `` ` Failure message ( latch = 1 , values = 0 , errors = 0 , completions = 0 , tag = x : 5 , y : 7 ) `` ` Use case , for example , is to add the parameters of the current flow to help identify what settings caused the failure . This comes up with unit tests that have some form of ( nested ) loop ( s ) to verify multiple parameter ranges . ( It is often much easier than trying to work out JUnit rules and such . )
2.x : fix repeatWhen and retryWhen signatures __EoT__ Adjust the ` repeatWhen ` and ` retryWhen ` signatures to accept ` Publisher < ? > ` on ` Single ` and ` Completable ` , matching ` Flowable ` 's signature . Reported in # 5135 .
2.x : fix flatMap not cancelling the upstream eagerly __EoT__ This PR fixes the lack of eager cancellation when flatmapping sources and not stopping the upstream if the inner source fails . Unit tests were added to verify ` Single ` ( in case it receives a dedicated implementation one day as currently it delegates to ` Flowable ` ) , ` Flowable ` and ` Observable ` . Reported in # 5132 .
2.x : update javadoc of flatMap ( ) overloads __EoT__ This PR rewords the Javadoc of ` Flowable.flatMap ( ) ` overloads to correctly express their behavior regarding backpressure towards their upstream . In 2.x , only ` merge ( ) ` operators are unbounded-in by default , ` flatMap ` s are by default bounded by ` bufferSize ( ) ` or the ` maxConcurrency ` parameter . In addition , one of the ` flatMap ` overload still had ` resultSelector ` instead of the common ` combiner ` parameter name . As far as I know , there are no language-specific libraries targeting 2.x yet where in the language the actual parameter names are also part of the signature and changing them counts as an incompatible change . Related # 5126 .
2.x : add ParallelFlowable.sequentialDelayError __EoT__ This PR adds the ` sequentialDelayError ` operator to ` ParallelFlowable ` that allows awaiting all 'rails ' in a parallel flow to terminate normally or with the ( composite ) exception of the failed rail ( s ) . To enable this , the ` Flowable.parallel ( ) ` operator 's behavior regarding rail cancellation had to be changed . In v2.0.5 if any of the rails cancelled ( maybe due to a failure , maybe due to an end consumer cancelling the entire parallel flow ) the input ` Flowable ` was cancelled . This PR alters this by requiring all rails to cancel before cancelling the input ` Flowable ` . The change permits one or multiple rails to fail and let others progress in case the new ` sequentialDelayError ` is applied as a terminal operator . The original ` sequential ( ) ` operator still cancels all rails if one of them fails ( triggering the cancellation of the input ` Flowable ` ) . Note that this change may still drop and never process elements in the internal queues of the operators in the parallel flow ( because the
2.x : improve coverage , remove unused code __EoT__ This PR adds coverage to some low-coverage classes and removes unused code . In addition , the ` XFlatMapTest ` now retries each test up to 3 times with exponential backoff since they are the most sensitive to Travis CI fluctuations .
2.x : fix Observable.combineLatest to dispose eagerly __EoT__ This PR fixes ` Observable.combineLatest ` to dispose the sources outside the serialization loop , just like ` Flowable.combineLatest ` does . This allows cancellation even if the serialization loop is busy/blocking inside an ` onNext ` emission . In addition , a unit test was added to ` Flowable.combineLatest ` as well . Reported in # 5111 .
2.x : benchmark the new strict/interop mode __EoT__ Benchmark the overhead of the strict/interop mode . i5 6440HQ , Windows 10 x64 , Java 8u121 ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/23092637/ce9f343c-f5cf-11e6-868b-e24ff6fc2b43.png ) The numbers are consistent with my expectations ; this mobile processor is roughly equivalent to i7 4770 desktop where the cost model is : 1 atomic increment per item equals to roughly 130 Mops/s upper limit , 2 atomic increment per item is roughly 60 Mops/s upper limit . Since the interop mode requires at minimum two atomic increments , 54 Mops/s is a reasonable value to get .
2.x : Flowable as a Publisher to be fully RS compliant __EoT__ This PR performs the changes suggested in # 5110 . - Introduce ` FlowableSubscriber ` with extra textual specification on its relaxed nature - ` Flowable.subscribe ( Subscriber ) ` checks for ` FlowableSubscriber ` and if not found , it wraps the incoming RS ` Subscriber ` into a ` StrictSubscriber ` that follows the RS spec to the letter at any cost . - Introduce ` Flowable.subscribe ( FlowableSubscribe ) ` that most internal operators will use - Change ` AbstractFlowableWithUpstream ` to accept ` Flowable ` as a source , update operators - Some operators were useful with raw ` Publisher ` input , these were duplicated on their outer containing type but use the same internal ` FlowableSubscriber ` - Removed `` cheat '' from the TCK tests , adjusted timeout on ` delay ` - Replaced most ` implements Subscriber ` with ` implements FlowableSubscriber ` - Replaced most ` new Subscriber ` with ` new FlowableSubscriber ` in tests , the rest is required for testing the strictness itself . - ` strict ( ) ` is now an identity operator with
2.x : fix window ( time , size ) not completing windows on timeout __EoT__ This PR fixes the operators ` Flowable.window ( time , size ) ` and ` Observable.window ( time , size ) ` to complete the current window if the time elapses before the size limit is reached . Reported in # 5104 .
2.x : fix doOnSubscribe signalling Undeliv.Exception instead of just onError __EoT__ This PR fixes the issue reported on [ StackOverflow ] ( http : //stackoverflow.com/questions/42279543/exception-is-not-propagated-to-onerror-when-thrown-from-doonsubscribe ) where crashing the lambda in ` Flowable.doOnSubscribe ` calls the ` RxJavaPlugins.onError ` , which crashes the app and prevents calling the ` EmptySubscription.error ` on Android . ( Desktop prints to the console and delivers the error normally . ) The bug was present in the ` Flowable ` , ` Observable ` and ` Completable ` . All 5 base types received the respective unit test to ensure correct behavior .
2.x : Added missing @ NonNull attribute to Function7 . __EoT__ This Pull Request adds the missing @ NonNull attribute to Function7 . On Pull Request # 5023 , Function7 was missing from the updates .
2.x : Add doAfterTerminate callback to the Single type . __EoT__ As mentioned in [ THIS StackOverflow question ] ( http : //stackoverflow.com/questions/42168043/why-is-doafterterminate-missing-from-single-in-rxjava-2 ) , doAfterTerminate ( ) is currently missing in RxJava2 . There 's no strong reason for that , so this PR adds support for it .
2.x : fix CI load sensitive BlockingNextTests , XFlatMapTest __EoT__ This PR updates ` testNoBufferingOrBlockingOfSequence ` with - retry up to 3 times with an exponential backoff as the test is time sensitive and Travis CI load sensitive , - uses ` Schedulers.single ( ) ` as the helper thread and manages resource cleanup properly , - both ` Flowable ` and ` Observable ` variants . Update : Looks like ` XFlatMapTest ` is still flaky , added changes here to try fixing it as well .
2.x : Correct marble diagram dimensions __EoT__ This fixes part of # 4535 , as requested in # 5067 . These changes were generated using the following script : `` ` sh # ! /usr/bin/env bash find . -name '*.java ' -print0 \ | xargs -0 grep '^\s*\* ' \ | grep -oP 'https . * ? \.png ' \ | sort -u \ | while read -r I ; do echo `` Updating $ { I } ... '' # Gather image details . DATA= '' $ ( identify < ( curl -f -L -s `` $ { I } '' ) ) '' # Extract the image 's true width and height . WIDTH= '' $ ( echo `` $ { DATA } '' | grep -oP ' ( ? < =PNG ) \d+ ' ) '' HEIGHT= '' $ ( echo `` $ { DATA } '' | grep -oP 'PNG \d+x\d+ ' | grep -oP ' ( ? < =x ) \d+ ' ) '' # Determine the image 's scaled height , assuming a width of 640 pixels . NEW_HEIGHT= '' $ ( echo 'scale=100 ; s= ' '' $ { WIDTH } '' '
2.x : wrap undeliverable errors __EoT__ This PR adds the ` UndeliverableException ` and ` ProtocolViolationException ` . The former wraps exceptions that happen beyond the lifecycle of a flow and the latter is added to distinguish validation bugs . The ` RxJavaPlugins.onError ` wraps errors into ` UndeliverableException ` unless ` RxJavaPlugins.isBug ( ) ` returns true when the ` Throwable ` is relayed to the ( default ) handler . Having the ` UndeliverableException ` should help with understanding the source of a crash and by having its own stack trace , help locating the offending positions ( for example , a missed ` isDisposed ( ) ` check in a 3rd party library ) .
2.x : cancel upstream first , dispose worker last __EoT__ This PR makes sure the ` Scheduler.Worker ` is disposed only after - disposing/cancelling the upstream , - emitting terminal events . This may help with situations when the worker-dispose interrupts a thread that is blocked and the InterruptedException handler checks for the stream to be disposed so the exception can be safely ignored ( and thus not end up in the RxJavaPlugins.onError handler to crash the app ) . Related : # 4863
2.x : compatibility fixes ( JDK 9 & IntelliJ 2017.1 EAP ) __EoT__ 1 . When the project is checked out into a directory that is not exactly ` */RxJava/ ` ( i.e. , ` /RxJavaSomething/ ` ) the source-code locator in the unit tests failed with a ` NullPointerException ` . The locator is now relaxed to expect ` /RxJava ` prefix . 2 . Running the unit tests from IntelliJ 2017.1 EAP , the ` ExceptionTests.testStackOverflowWouldOccur ` failed with ` AssertionError ` because the final stack depth was exactly the constant value ( 800 ) . The check now uses the correct ` > = ` as the dual of the recursion condition of ` < ` .
Update README.md __EoT__ I tried to use RxJava2 from the example and I get some error message . Error : ( 13 , 38 ) java : variable v is already defined in method main ( java.lang.String [ ] )
Update codecov.yml __EoT__ Fix codecov.yml - ` target ` is used a `` coverage must be greater or equal to the target '' - ` threshold ` is the acceptable amount of loss to still consider the status as successful .
2.x : update readme parallel example __EoT__ Add ` parallel ( ) ` example to the getting started in README.md
2.x : Add @ NonNull annotation for Function/Predicate/etc . __EoT__ One of the larger tasks when transitioning from 1 to 2 is removing the use of null . Right now there 's no automated way to do it , but if we had ` @ NonNull ` then we 'd be able to use static analysis to find where we 're returning null when we should n't be . I 'm not sure the best way to go about it - if we should include jsr305 , use Java 8 's NonNull , create our own , or something else .
2.x : disable codecov-checks on PRs __EoT__ Codecov.io seems to be messing around quite a bit lately . A day after the integration , new checks appeared at every PR that fail because of small irrelevant fluctuations in the coverage itself and they fail the whole PR even though the tests pass . This PR seeks to disable these checks .
2.x : SpscLinkedArrayQueue # poll returns null __EoT__ io.reactivex.internal.queue.SpscLinkedArrayQueue # poll returns null io.reactivex.internal.fuseable.SimpleQueue # poll is not documented or annotated . Therefore I do not know whether returning null is allowed . But I strongly suspect this is not the case . If SimpleQueue # poll might return null , at least io.reactivex.internal.operators.flowable.FlowableGroupJoin.GroupJoinSubscription # drain needs to be fixed .
2.x : Add @ NonNull annotation for Function/Predicate/etc . __EoT__ One of the larger tasks when transitioning from 1 to 2 is removing the use of null . Right now there 's no automated way to do it , but if we had ` @ NonNull ` then we 'd be able to use static analysis to find where we 're returning null when we should n't be . I 'm not sure the best way to go about it - if we should include jsr305 , use Java 8 's NonNull , create our own , or something else .
2.x : Document and test amb subscription ordering . __EoT__ Refs # 5044 .
2.x : add parallel hooks to RxJavaPlugins , add missing params validation __EoT__ This PR adds an ` onAssembly ` hook for ` ParallelFlowable ` operators and adds the missing parameter validation to some parallel operators .
2.x : reintroduce OnErrorNotImplementedException for 0-1 argument subscribe ( ) __EoT__ This PR reintroduces the ` OnErrorNotImplementedException ` wrapper from 1.x and applies it to the ` subscribe ( ) ` methods that do n't define an ` onError ` handler . The errors are still routed to the ` RxJavaPlugins.onError ` handler but now wrapped with ` OnErrorNotImplementedException ` . This should help with cases where the developer forgot to add the handler and distinguish such unhandled errors from other undeliverable errors due to lifecycle limitations .
Add nullability annotations to io.reactivex.annotations interfaces . __EoT__ ( Addresses https : //github.com/ReactiveX/RxJava/issues/4876 ) This pull request annotates everything in the ` io.reactivex.annotations ` package with a new ` @ NonNull ` annotation defined in RxJava . This doesn ’ t annotate everything , but I think it ’ s a good start . In particular , when migrating a large codebase of RxJava 1.x code to 2.x , catching null returns in these interfaces was very difficult . At best , it ’ s noticed while migrating , otherwise it ’ s up to unit tests or a production crash to catch these . With these new annotations , you get much better IDE support ( once you tell IntelliJ about the new annotation ) : < img width= '' 563 '' alt= '' screen shot 2017-01-27 at 2 30 18 pm '' src= '' https : //cloud.githubusercontent.com/assets/23467/22362686/7f172032-e49f-11e6-9fc6-94049c263ceb.png '' > ^ in this example , ` getPhoneNumber ( ) ` is marked as ` @ Nullable ` In addition , support for this annotation can easily be added to static analysis tools like Infer , checker , or any other popular tool . Open Questions * Does this even
2.x : dedicated Single.zip implementation , no dispose on all-success __EoT__ This adds a dedicated implementation for zipping ` Single ` s ( adapted from ` MaybeZipX ` ) . Routing the original ` zip ` through ` Flowable ` added the usually unwanted behavior of cancelling the sources if one of them reports a completion after a row has been consumed from all ( when converted to ` Flowable ` , ` SingleObserver.onSuccess ` becomes ` Subscriber.onNext ` + ` onComplete ` ) . Since there is only ` onSuccess ` and ` onError ` in ` Single ` , there is no need to dispose the sources once all signalled their only ` onSuccess ` . Related : # 5024 .
2.x : option to fail for using blockingX on the computation scheduler __EoT__ This PR adds an ` RxJavaPlugins ` option ` failOnNonBlockingScheduler ` that triggers an ` IllegalStateException ` when the user tries to run a blocking method while the execution is on the ` computation ( ) ` or ` single ( ) ` ` Scheduler ` : `` ` java Flowable.just ( 1 ) .subscribeOn ( Schedulers.computation ( ) ) .map ( v - > Flowable.just ( `` query '' ) .subscribeOn ( Schedulers.io ( ) ) .blockingFirst ( ) ) .doOnNext ( v - > someAPI ( v ) .subscribeOn ( Schedulers.newThread ( ) ) .blockingSubscribe ( ) ) ; .blockingFirst ( ) ; `` ` It is an optional setting , default off . The check is done before going into an await method ( and a few other types of blocking ) . Most blocking operators usually poll the status and try to avoid the actual blocking thus this should n't affect synchronous sequences that one extracts a value from . Detection of a blocking-sensitive scheduler 's thread is done by checking the current thread 's class for implementing the ` NonBlockingThread ` marker
2.x : Add scheduler creation factories __EoT__ Resolves # 4993 This is a pretty vanilla copy from RxJava 1 's implementation . Note that I had to tune NewThread scheduler to not be a singleton to support this . We had talked about borrowing from project reactor 's APIs for different overloads , let me know if you think we should add more fine-grained controls through these .
Fix copyright instructions in CONTRIBUTING __EoT__ After [ changing the copyright of the project ] ( https : //github.com/ReactiveX/RxJava/issues/4978 ) the documentation in CONTRIBUTING.md should be adjusted with the updated copyright header
Override RS dependency to compile , replace owner info __EoT__ This PR overrides the dependency of Reactive-Streams in the generated POM.xml from ` runtime ` to ` compile ` to avoid trouble with plain maven users . In addition , I took the liberty of overriding the responsible owner references which seem to be hard-coded in the ` rxjava-nebula ` plugin . Related : # 4813 , # 5014
2.x : improve the parallel ( ) mode test coverage , improve its code __EoT__ This PR adds additional unit tests for the ` parallel ( ) ` operators , plus : - adds conditional fusion to ` runOn ` , ` filter ` and ` map ` operators - exposes the ` FlowableFlatMap ` 's internal ` Subscriber ` to be reused with ` ParallelFlowable.flatMap ` - uses the ` FlowableConcatMap ` 's internal ` Subscriber ` to be reused with ` ParallelFlowable.concatMap ` - fix generics with ` collect ` and ` reduce ` - change queue overflow errors to ` MissingBackpressureException ` - make sure join-like operators do n't emit the same upstream ` Throwable ` to the ` RxJavaPlugins.onError ` handler if all rails have the same error reference
2.x : add Flowable.parallel ( ) and parallel operators __EoT__ This PR adds the ` parallel ( ) ` method to ` Flowable ` which opens up a sub-DSL with parallel operations . ( Note that only a few operators make sense in a parallel settings . ) This parallel sub-DSL is not limited to computation tasks as it allows specifying the parallelism and the ` Scheduler ` to run the parallel 'rails ' . For example , you can have parallel downloads that block : `` ` java Flowable.range ( 1 , 100 ) .parallel ( 10 ) .runOn ( Schedulers.io ( ) ) .map ( v - > httpClient.blockingGet ( `` http : //server/item/ '' + v ) ) .sequential ( ) .observeOn ( AndroidSchedulers.mainThread ( ) ) .subscribe ( ... ) ; `` `
2.x : A.flatMapB to eagerly check for cancellations before subscribing __EoT__ The ` flatMap ` implementations always subscribed to the generated inner source even if there was an asynchronous cancel while the function was running . With typical functions , there is only a really tiny window inside function but some users tend to block/sleep in the function and when that returns , the ` flatMap ` operator is already cancelled . If the generated inner source emitted an error disregarding its own cancellation signal ( the ` error ( ) ` operators do this ) , those errors end up in the ` RxJavaPlugins.onError ` and crash the app ( on Android ) . This PR adjusts the ` flatMap ` implementations to check for the disposed/cancelled state before subscribing to the inner source . For ` Observable ` and ` Flowable ` , this has practically no extra overhead as the add/remove already checks for the terminal state and can return a boolean for it . The rest require an explicit ` isDisposed ( ) ` check .
2.x : Update marble diagrams for sample overloads __EoT__ This PR updates the referenced marble diagrams to reflect the actual behavior and options with ` sample ` . New images : - ` sample ( time , emitLast ) ` ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.emitlast.png ) - ` sample ( time , scheduler , emitLast ) ` ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.s.emitlast.png ) - ` sample ( other ) ` - the [ original image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.o.png ) indicated the emission of the last item which was not the case ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.o.nolast.png ) - ` sample ( other , emitLast ) ` ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.o.emitlast.png )
2.x : Fix Observable.singleElement doc __EoT__ Fixes a subtle documentation bug . ` Observable.singleElement ` returns ` Maybe < T > ` , not ` Observable < T > ` .
2.x : make Obs.combineLatest consistent with Flowable + doc cornercase __EoT__ This PR fixes ` Observable.combineLatest ` to be consistent with ` Flowable.combineLatest ` by not subscribing to additional input sources if the operator reached a terminal state due to a valueless source ( that completes or errors ) . In addition , such early termination did n't properly cancel the other sources when ` delayErrors == true ` . I 've also extended the documentation on the overloads to warn about empty sources that will terminate the operator , even with ` combineLatestDelayError ` , and thus subscription side-effects may not happen . There is a related issue # 4414 where the operator should fully consume each input source no matter what and terminate when all terminate . I 'm still considering what would be the best way to introduce this . Reported in # 4986
2.x : fix Observable.concatMapEager bad logic for immediate scalars __EoT__ The operator ` Observable.concatMapEager ` had a bad optimization targeting scalar and callable sources and emitted their values immediately even if it was n't that particular source 's turn for it . The ` Flowable ` is not affected , added unit tests for both . Reported in # 4981 .
Update Copyright to 'RxJava Contributors ' __EoT__ Updating all files containing a Copyright header to change from 'Netflix , Inc ' to 'RxJava Contributors ' as per https : //github.com/ReactiveX/RxJava/issues/4978 .
Add newline to end of files missing a newline __EoT__ This is to get rid of the `` No newline at end of file '' warning that exist on many but not all files in the project , so adds a newline to any file missing a newline . This came about while modifying a large number of files for https : //github.com/ReactiveX/RxJava/issues/4978 . This is intended to clean this up once so it does n't cause warnings and noise in each PR this can affect . Probably would be good if the project had a formatter than ensured this as part of CI .
2.x : fix withLatestFrom null checks , lifecycle __EoT__ This PR fixes the lack of null check on the result of the ` combiner ` function as well as fixes the lifecycle of the ` FlowableWithLatestFrom ` to avoid races with the ` onSubscribe ` .
2.x : Add Completable.hide ( ) __EoT__ - adds Completable.hide ( ) operator so that CompletableSubject as well as other custom Completable implementations can be hidden
2.x : Add @ CheckReturnValue to create methods of Subjects + Processors __EoT__ - adds the @ CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too
2.x : add strict ( ) operator for strong RS conformance __EoT__ This PR adds a new instance operator ` strict ( ) ` : Ensures that the event flow between the upstream and downstream follow the Reactive-Streams 1.0 specification by honoring the 3 additional rules ( which are omitted in standard operators due to performance reasons ) . * §1.3 : onNext should not be called concurrently until onSubscribe returns * §2.3 : onError or onComplete must not call cancel * §3.9 : negative requests should emit an onError ( IllegalArgumentException ) In addition , if rule §2.12 ( onSubscribe must be called at most once ) is violated , the sequence is cancelled an onError ( IllegalStateException ) is emitted . Note that the Reactive-Streams specification does n't have any sanction for violating §2.12 . The ` strict ( ) ` operator also replaces the test-only operators that were supporting the Reactive-Streams TCKs already .
2.x : fix Single.takeUntil ( ) other triggering twice __EoT__ This PR fixes the double termination of ` Single.takeUntil ( Publisher ) ` when the ` other ` fires an item and then completes while ignoring the cancellation in between , trying to signal a ` CancellationException ` again which is routed to the ` RxJavaPlugins.onError ` and crashing on Android . In addition , the ` Maybe.takeUntil ( ) ` received a unit test verifying this does n't also happen to it . Related : # 4961 .
2.x : add sample ( ) overload that can emit the very last buffered item __EoT__ The ` sample ( ) ` operator in 1.x has been changed to always emit the very last buffered item before completion for [ 1.1.3 ] ( https : //github.com/ReactiveX/RxJava/releases/tag/v1.1.3 ) : [ Discussion ] ( https : //github.com/ReactiveX/RxJava/issues/3657 ) , [ PR ] ( https : //github.com/ReactiveX/RxJava/pull/3757 ) . This change has been forgotten in 2.x ( because 2.x ` sample ( ) ` was implemented several months earlier ) but unlike 1.x , I do n't want to break existing use cases , hence the introduction of 6 overloads ( 3 for each base type ) that let 's one define the `` tail '' behavior . Note that the associated marble diagrams are inconsistent with the operators implemented , we need a new diagram where the timed-sample also emits the last value : ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/21642878/891ca42a-d285-11e6-876a-e613de2443db.png ) and one new diagram where the sampler-sample does n't emit the last value : ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/21642917/b4dc257c-d285-11e6-8f25-707043957f26.png ) The default sampler-sample should use this and the ` emitLast == true ` version can use
2.x : fix LambdaObserver calling dispose when terminating __EoT__ This PR changes the ` LambdaObserver ` to not dispose the upstream when it receives a terminal event . The ` LambdaSubscriber ` has been previoulsy updated but apparently not synced . Reported in # 4956 . This PR fixes 2 unit test methods of ` Flowable.ignoreElements ( ) ` as they were not actually testing the operator ( discovered when the ` Observable.ignoreElements ( ) ` initially failed after the patch to ` LambdaObserver ` ) .
fix javadoc for BehaviorSubject __EoT__ -fix examples for creating BehaviorSubject with or without initial value .
2.x : A simple Javadoc typo fix . __EoT__ Fixed Javadoc for SingleToObservable , MaybeToObservable , CompletableToObservable
2.x : fix timeout with fallback not cancelling the main source __EoT__ This PR fixes the lack of dispose/cancel call towards the upstream in the timed+fallback ` timeout ` operator version . In addition , the selector version received similar unit tests to ensure they work properly ( they did ) . Related : # 4944 .
2.x : add safeguards to generate ( ) __EoT__ ` Flowable.generate ( ) ` and ` Observable.generate ( ) ` lacked the safeguards that were present in 1.x . This adds those and adds extra state cleanup . Related : # 4931
2.x : add Completable.cache ( ) __EoT__ This PR adds the operator ` cache ( ) ` to ` Completable ` to cache the terminal event of a ` Completable ` sequence . I came across the need for this when [ answering a question ] ( http : //stackoverflow.com/a/41241793/61158 ) where the intent of using ` Completable ` was to indicate an operation has completed but not actually trigger the operation whenever one subscribed . A small drawback , just like with other ` cache ( ) ` operators is that once connected , there is no way for cancel it from within the operator itself . Returning ` Completable & Disposable ` does n't work because of the the type restriction of ` RxJavaPlugins.onAssembly ` . There could be a ` cache ( Consumer < ? super Disposable > onDispose ) ` overload or an example showing ` source.ambWith ( disposer ) .cache ( ) ` .
2.x : fix timer ( ) ISE due to bad resource mgmt __EoT__ Both ` Observable.timer ( ) ` and ` Flowable.timer ( ) ` could report ` IllegalStateException ` because if the delayed task completed before the task 's ` Disposable ` was set , the ` setOnce ` found a non-null , non-terminal reference already set . Related : # 4926 .
2.x : Change Completable to CompletableSource __EoT__ Changing ` Completable ` to ` CompletableSource ` . Also found one other wrong spot that I fixed within this PR . Fixes # 4923
2.x : fix TestSubscriber/Observer message texts __EoT__ Fix the wrong messages in ` TestSubscriber ` and ` TestObserver ` . Related : # 4920 .
2.x : fix & update Observable.repeatWhen and retryWhen ( again ) __EoT__ This PR fixes the ` Observable.repeatWhen ` not completing properly if the handler completes . In addition , the ` ObservableRedo ` has been split to ` ObservableRetryWhen ` and ` ObservableRepeatWhen ` just like their ` Flowable ` counterpart and are now they use a less convoluted algorithm . Related : # 4909
2.x : Observable.scan , no seed - fix post-terminal behaviour __EoT__ This PR * ensures that scan function throwing can not result in two terminal events ( error or complete ) and that additional error event is reported to ` RxJavaPlugins ` error handler . * ensures that scan function if throws is not called again
2.x : FlowableScan - prevent multiple terminal emissions __EoT__ For scan without seed this PR * prevents multiple terminal events being emitted when the scan function throws * prevents processing of a later ` onNext ` if the previous ` onNext ` processing resulted in an error emission * ensures post terminal errors are reported to ` RxJavaPlugins ` error handler For scan with seed ( forgot this one in the last PR ) * ensures post terminal errors are reported to ` RxJavaPlugins ` error handler
2.x : fix compilation errors when using Java 8 __EoT__ This PR fixes a few compilation errors that happen when the project is compiled with Java 8 target ( Eclipse is even slower then ) . Some covariant casts do n't work in 8 and some type arguments inferred as Object get inferred as a more concrete type in 8 . The slight drawback is that with the changes , Java 6 compilation needs extra suppressions .
2.x : Issue and PR `` welcome '' templates __EoT__ This PR adds a basic GitHub template that is presented for new Issues and PRs once 2.x becomes the default branch , similar to # 4890 .
Add CheckReturnValue annotation __EoT__ First draft on this . So far I have only annotated ` subscribeWith ( ) ` and ` test ( ) ` methods . I checked this against Error Prone and their [ check ] ( http : //errorprone.info/bugpattern/CheckReturnValue ) is able of picking up the RxJava annotation . How do you feel if I extend ` BaseTypeAnnotations ` to test for ` @ CheckReturnValue ` too ? Related # 4878
2.x : Common test classes for Processors . __EoT__ Caused by https : //github.com/JakeWharton/RxRelay/pull/20 # discussion_r89308736
2.x : Apply missing RxJavaPlugins.onAssembly on ops __EoT__ This PR adds the missing calls to ` RxJavaPlugins.onAssembly ` on a few operators .
2.x : javadoc : fix wording of some operators , remove @ throws implications __EoT__ This PR fixes some javadoc mistakes with operators such as ` single ` , ` first ` , ` last ` and co and removes ` @ throws ` tags from operators since those do n't throw it when the method is invoked .
2.x : add fluent requestMore to TestSubscriber __EoT__ This PR just adds the ` TestSubscriber.requestMore ` that calls ` request ` and returns ` this ` for method chaining purposes .
2.x : add doAfterNext & doAfterSuccess to the other types __EoT__ This PR adds ` Observable.doAfterNext ` , ` Maybe.doAfterSuccess ` and ` Single.doAfterSuccess ` .
2.x : add ` Flowable.doAfterNext ` operator + 3 doX TCKs __EoT__ This PR adds the ` Flowable.doAfterNext ` operator which calls a ` Consumer ` after the call to ` downstream.onNext ( ) ` with the same value . In addition , ` doOnNext ` , ` doAfterNext ` and ` doFinally ` received their Reactive-Streams TCK tests .
2.x : add doFinally to the rest of the reactive base classes __EoT__ This PR adds the ` doFinally ` operator to the rest of the base reactive classes .
Porting the Scheduler.when operator from 1.x to 2.x __EoT__ In fixing the Scheduler.when in 1.x I noticed that it had n't been ported to 2.x . This PR tries to fix that translating Observable to Flowable and Subscription to Disposable . This also includes the fix from 1.x
2.x : add doFinally for handling post-terminal or cancel cleanup __EoT__ This PR adds the ` Flowable.doFinally ` method that executes an action when the upstream terminates or the downstream cancels ( but only once per subscriber ) . Formerly , one could use ` doAfterTerminate ` + ` doOnCancel ` together but no support for making sure only one executed the cleanup action . Based on the feedback , the rest of the base reactive types can get the same operator a bit later .
2.x : Observable.repeatWhen fix for onError __EoT__ ` Observable.repeatWhen ` was not properly signalling an upstream ` onError ` case . The ` Flowable.repeatWhen ` works as expected .
fix typo in javadoc of Maybe : :toSingle __EoT__
Subtle change in Completable 's documentation for retryWhen . __EoT__ Small change as discussed in # 4809
Fix typo __EoT__
documentation updates __EoT__
2.x : Fix exceptions in javaDoc __EoT__ I 've corrected some javadocs for methods that check arguments using ` ObjectHelper.requireNonNull ( arg , `` message '' ) ` . It throws ` NullPointerException ` instead of ` IllegalArgumentException ` , but as we know copy-pasting is an insidious thing . ; )
2.x : fix Observable.repeatWhen & retryWhen not disposing the inner __EoT__ The ` Observer ` that is subscribing to the ` Observable ` returned by the handler function was not properly linked to the disposing of the end Observer . This PR fixes it by making that ` Observer ` do async ` Disposable ` management and make sure the end ` Observer ` receives a disposable list with both the main and the handler ` Disposable ` s . The ` Flowable ` versions worked properly but added unit tests to them regardless . Reported in # 4782 .
2.x : allow subscribeOn to work with blocking create __EoT__ When running a blocking emission in ` Flowable.create ` with ` subscribeOn ` , the default behavior of ` subscribeOn ` is to schedule downstream requests onto the same thread . Unfortunately , the blocking emission prevents the backing threadpool the ` create ` from accumulating that request amount leading to either buffer bloat or dropped emissions till the very end of the sequence . This PR introduces a ` nonScheduledRequests ` parameter to ` subscribeOn ` that simply calls the upstream 's ` request ( ) ` from the caller 's thread without scheduling it . The parameter is not exposed to the surface API but the ` subscribeOn ` operator does an ` instanceof ` check to see if the upstream type is ` FlowableCreate ` . Note that this requires a direct upstream ` create ` and any intermediate operator re-enables the default behavior . It is possible to traverse the upstream graph to locate a ` FlowableCreate ` but it has relatively high cost and thus penalizing all ` subscribeOn ` usages . Related : # 4735
2.x : cleanup , fixes and coverage 10/25 __EoT__ This is the last part of my dedicated coverage improvement run . - Update code paths and remove unnecessary and unused parts . - Fix ` skipUntil ` lifecycle and concurrency properties . - Fix ` concatMapEager ` error management . - ` Flowable.scan ( T , BiFunction ) ` now emits the initial value only when the upstream signals an event . This has the effect that even if there is a downstream request , the initial value wo n't get emitted . This change reduces the overhead of the operator greatly .
2.x : cleanup & coverage 10/24-2 __EoT__ - better coverage of ` Flowable ` operators - cleanup of operator internals - better coverage of standard Schedulers . - rewrite of ` takeUntil ` to avoid ` onSubscribe ( ) ` races .
2.x : cleanup , fixes , coverage 10/24-1 __EoT__ - Remove unused or unnecessary code paths . - Fix cancellation bugs in ` Flowable ` operators . - Unify ` MapNotification ` , ` Materialize ` , ` OnErrorReturn ` last element backpressure under the same helper class . - Move ` FlowableBlockingIterator ` into ` FlowableBlockingIterable ` . - Reuse parts of ` FlowableSequenceEqual ` in ` FlowableSequenceEqualSingle ` .
2.x : Add Single.fromObservable ( ObservableSource ) __EoT__ - adds an overload to create a Single from an ObservableSource
2.x : fix window-timed test leaking an MBE that affects unrelated tests __EoT__ The ` FlowableWindowWithTimeTest.restartTimerMany ` did not wait for its source to receive the cancellation and subsequent tests could delay this cancel . Related : # 4750
Add more new marble diagrams & update old ones __EoT__
2.x : distinctUntilChanged to store the selected key instead of the value __EoT__ Fix ` distinctUntilChanged ` to store the selected key instead of the input value . Reported in # 4743
2.x : Fixed Javadoc for Disposables.fromFuture __EoT__
2.x : coverage , fixes , cleanup 10/21-1 __EoT__ - fix ` Flowable.materialize ( ) ` terminal signal emission in face of backpressure - fix ` Flowable.onErrorReturn ( ) ` terminal signal emission in face of backpressure - cleanup ` Flowable.publish ( ) ` and enable operator fusion on its input - fix ` Flowable.flatMapSingle ( ) ` and ` Flowable.flatMapMaybe ( ) ` termination detection - compact ` Flowable.blockingSubscribe ( ) ` and ` Observable.blockingSubscribe ( ) ` - compact ` Flowable.subscribeOn ( ) `
2.x : coverage , fixes , cleanup 10/20-2 __EoT__ I cut this short so there is time for the **2.0.0-RC release preparations** . - Introduce ` SimplePlainQueue ` where ` poll ` does n't throw , avoiding the need for try-catches where the queue is one of the standard lock-free queues . - Fix ` FlatMap ` error , cancellation and resource management . - Coverage of some ` Flowable ` operators - Removal of impossible and unused code paths .
2.x : cleanup , fixes , coverage 10/20-1 __EoT__ - Finished covering ` Observable ` operators to a reasonable level ( the remaining are either impossible or only reachable by probabilistic race ) - Synced operator coverage between ` Observable ` and ` Flowable ` - Started covering ` Flowable ` operators - Cleaning up a few ` Flowable ` operators ( cache , concatMap ) - fix ` onBackpressureBuffer ( long , Action , BufferOverflowStrategy ) ` return type - fix ` concatMapDelayError ` wrong barrier mode selected
2.x : Delegate null Collections down to onError in toList __EoT__ - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message
2.x : Remove checked exceptions from transformer interfaces . __EoT__ These functions are for transforming the stream shape , not doing work . Any operation that would throw a checked exception should happen inside the stream , not when shaping it . Closes # 4709 .
2.x : coverage , fixes , cleanup , copy to Flowable 10/19-1 __EoT__ - Explain ` Observable.observeOn ` unboundedness - improve ` Observable ` operator coverage - copy test methods over to ` Flowable ` operators - apply fixes to ` Flowable ` operators - add missing calls to ` RxJavaPlugins.onError ( ) ` - add more time to RS TCK test of ` observeOn `
Merge FlowableEmitter.BackpressureMode into BackpressureStrategy __EoT__ This is the implementation of # 4727
2.x : coverage , fixes , enhancements , cleanup 10/18-1 __EoT__ - improve coverage of more ` Observable ` operators - reduce allocation of ` ConnectableObservable.connect ( Consumer ) ` and ` ConnectableFlowable.connect ( Consumer ) ` - enable fusion on ` Observable.observeOn ` - fix fusion of ` Observable.just ` - remove ` flatMapIterable ( Function , int ) ` overload and have ` flatMapIterable ( Function ) ` use the flatten operator . - fix ` Observable.replay ( ) ` potential emission before ` onSubscribe ` call
2.x : remove variance from the input source of retryWhen __EoT__ The variance of the ` retryWhen ` operator does n't infere properly with java 8 . This PR removes the ` ? extends ` from the function 's input ` Observable ` . Reported in : https : //twitter.com/HansWurst315/status/788108336285753344
2.x : Distinct Operator - delegate null Collection down to onError __EoT__ - returning null as a Collection in the callable did n't go to onError - adopted flowable & observable
2.x : coverage and cleanup 10/17-1 __EoT__ A small set of coverage and cleanup of ` Observable ` operators .
2.x : test sync from Observable to Flowable 10/16-1 __EoT__ - copy the recent unit tests from ` Observable ` to ` Flowable ` - fix the same bugs - perform the same cleanups - compact the same operators - factor out fusion method and constants to ` QueueFuseable ` - have ` Flowable.toList ( Callable ) ` return ` Single `
2.x : coverage , cleanup , fixes 10/15-2 __EoT__ - more ` Observable ` coverage - make ` Observable.sequenceEqual ` return ` Single < Boolean > ` - reimplement ` Observable.distinct ( ) ` - fix ` Observable.combineLatest ` error management - remove or compact unused code paths - fix ` Observable.flatMap ` maxConcurrency behavior with scalars , use of unbounded queue - fix ` Observable.timeInterval ` not saving the ` Disposable `
2.x : Decouple stream operators from Function interface . __EoT__ This allows a single class to implement itself as an operator for all stream types . A similar change was recently made to the transformer types . From https : //github.com/ReactiveX/RxJava/pull/4672 # issuecomment-252417909 .
2.x : Fix Flowable.elementAt on empty sources . Plus sync tests __EoT__ - fixes Flowable.elementAt on an empty source - sync tests between Observable & Flowable elementAt
2.x : cleanup , coverage , fixes 10/14-2 __EoT__ - more ` Observable ` operator coverage - enable fusion with ` filter ` and ` fromCallable ` - change order of size parameter in timed ` buffer ` and ` window ` operators - fix minor mistakes in operators
2.x : coverage and cleanup 10/13-1 __EoT__ Improve coverage of ` Subject ` s and ` FlowableProcessor ` s , remove impossible paths , cleanup code .
2.x : Clean up null usages by using ObjectHelper.requireNonNull __EoT__ Instead of using an if statement to check for ` null ` , ` ObjectHelper.requireNonNull ` will be used now . This reduces a lot of duplicated code . Also I found a few places ( mostly zip operators ) where the wrong Throwable was being onError 'd . In addition for one of the Completable operators the CompositeException call has been fixed . In addition I found another one that was wrong .
2.x : coverage and cleanup 10/12-1 __EoT__ - Add coverage to remaining ` Completable ` operators - Fix inner Throwable order for ` CompletablePeek ` - Compact/rewrite a few operators
2.x : coverage , fixes and cleanup 10/11-2 __EoT__ - cover remaining ` Maybe ` operators - cover ` Single ` operators - cover some of the ` Completable ` operators - fix missing ` onSubscribe ` calls - compact a few operator implementations - fix the order of inner Throwables on certain ` CompositeException ` emissions
2.x : BaseTestConsumer add assertValueAt ( index , Predicate < T > ) __EoT__ Fixes # 4688 - adds assertValueAt ( index , Predicate ) to BaseTestConsumer
2.x : Add Observable.rangeLong & Flowable.rangeLong __EoT__ Will fix # 4683 - adds Observable.rangeLong ( ) - adds Flowable.rangeLong ( ) both implementations are copied same for the unit tests . What should we do about the range overflow check ? We could use BigDecimal to check that .
2.x : coverage and cleanup 10/11-1 __EoT__ This PR enhances the coverage of ` Maybe ` operators ( run out of time for this batch , 5 remaining ) and fixes an NPE bug in ` Maybe.doOnEvent ` due to not saving the ` Disposable ` . Some inner receivers no longer implement ` Disposable ` as ` isDisposed ` is unreachable and not really necessary . In addition ` Maybe.toCompletable ` was removed in favor of ` Maybe.ignoreElement ( ) ` .
2.x : Test static from methods and add Maybe.fromSingle & fromCompletable __EoT__ - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for - Completable.fromAction ( ) - Completable.fromCallable ( ) - Completable.fromObservable ( ) - Completable.fromPublisher ( ) - Completable.fromRunnable ( ) - Completable.fromSingle ( ) - Maybe.fromAction ( ) - Maybe.fromCallable ( ) - Maybe.fromCompletable ( ) - Maybe.fromRunnable ( ) - Maybe.fromSingle ( ) - Single.fromCallable ( )
Update Mockito to 2.1.0 __EoT__ There are no changes from RC-2 to 2.1.0 , so should be good to go 😄
2.x : Fix Flowable + Single elementAt and elementAtOrError operators on empty sources __EoT__ This will fix # 4680 - elementAtOrError ( 1 ) on an empty source just leaves the new Single hanging without signalling onError ( ) - elementAt ( 1 ) on an empty source just leaves the Maybe hanging without signalling onComplete ( ) - I also noticed that elementAt ( ) with a default value on an empty source did not work either .
2.x : fix flatMapX calling SpscLinkedArrayQueue.offer concurrently __EoT__ I forgot to synchronize the offer part of the new flatMapX operators ( since of course , Spsc is for single producer only but here there could be concurrent non fast-path queueing of values ) . ( There is an MpscLinkedArrayQueue in JCTools but I 'm not confident in it and do n't want to use MpscLinkedQueue due to the node allocation . )
2.x : add javadoc and unit test to the recently changed XTransformers __EoT__ This PR adds the javadoc and crash-testing for each XTransformer interface changed by # 4672 .
2.x Remove Function from transformer interfaces to allow a single obj… __EoT__ This pull request removes Function from the super type of the various Transformer interfaces . While these are technically functions , the problem is that if they all extend Function then you can not have a single object instance that can implement multiple Transformer interfaces . The goal is to be able to call a function that returns an object that can be passed to Observable.compose or Single.Compose and so on . This was an issue with RxLifecycle project . See this for more info : https : //github.com/trello/RxLifecycle/issues/39
2.x : Fix javadoc for Single.flatMapObservable __EoT__ - wrong return type was described - some git merging information was added
Limit gradle memory to avoid kill 137 __EoT__ I read that decreasing the memory amount Gradle itself uses may help avoid such kills , let 's try it .
2.x : flatMap { Completable , Maybe , Single } operators __EoT__ This PR adds ` Observable.flatMapCompletable ( Function < T , CompletableSource > ) ` and ` Flowable.flatMapCompletable ( Function < T , CompletableSource > ) ` , both resulting in ` Completable ` ( + support for fusing back to the original type ) . **Edit** Added ` flatMapMaybe ` and ` flatMapSingle ` variants to both ` Flowable ` and ` Observable ` .
2.x : cleanup and fixes 10/03-2 __EoT__ - More coverage - fix some composite exception ordering - fix a few bugs
2.x : cleanup and coverage 10/03 __EoT__ - remove unused methods and classes - make sure ` Maybe.toFlowable ` and ` Maybe.toObservable ` allows macro-fusion back to the original type - improve coverage of various components
2.x : Observable.compose to use ObservableTransformer __EoT__ This changes the ` Observable.compose ` type to ` ObservableTransformer ` to reduce the type-argument/inference problem . The other base types have been previously updated to their respective transfomer types .
Upcast ConcurrentHashMap to Map to avoid compatibility issue __EoT__ Resovles # 4653 See http : //stackoverflow.com/a/32955708/61158
Switch Maybe and Single to use their Transformers in compose ( ) __EoT__ Resolves # 4650
2.x : Merge AmbArray and AmbIterable into Amb for Single , Maybe and Completable types __EoT__ This PR addresses # 4633 - Merge SingleAmbArray and SingleAmbIterable operators into SingleAmb - Merge MaybeAmbArray and MaybeAmbIterable operators into MaybeAmb - Merge CompletableAmbArray and CompletableAmbIterable operators into CompletableAmb
2.x Signal NPE ObservableAmb FlowableAmb __EoT__ This PR addresses # 4640
2.x : Remove unused methods in BasicFuseableObserver __EoT__
Update Mockito to 2.1.0-RC.2 __EoT__ Equivalent of # 4634 , but now for the 2.x branch .
2.x : Clean up SingleFlatMap __EoT__
2.x : add flattenAs { Observable , Flowable } to Single and Maybe __EoT__ This PR adds ` Single.flattenAsObservable ` , ` Single.flattenAsFlowable ` , ` Maybe.flattenAsObservable ` and ` Maybe.flattenAsFlowable ` to map a success value into an ` Iterable ` sequence and stream it as ` Flowable ` or ` Observable ` . It is more efficient than ` Single.toFlowable ( ) .flatMapIterable ( ) ` .
2.x : Add Completable.fromRunnable ( ) __EoT__ addresses # 4628 > There 's ` Maybe.fromRunnable ` but ` Completable ` is missing this method .
2.x : Use predicates in BaseTestConsumer assertError ( Class/Throwable ) to remove duplicate code , tests tweaks to remove few IDE warnings __EoT__ Messages and error checking was duplicates between all three assertError overloads .
2.x : enable operator fusion in onBackpressureBuffer __EoT__ This PR enables operator fusion in ` onBackpressureBuffer ` . The main benefit is that given a non-backpressured source , using ` observeOn ` now reuses ` onBackpressureBuffer ` 's ( un ) bounded queue seamlessly .
2.x : Make CompositeExcpetion thread-safe like 1.x and also fix some issues __EoT__ Right now CompositeExcpetion has several issues : - ` CompositeException ( Throwable ... exceptions ) ` does n't deduplicate exceptions and flatten CompositeExceptions like ` CompositeException ( Iterable < ? extends Throwable > errors ) ` - If using ` CompositeException ( Iterable < ? extends Throwable > errors ) ` to create CompositeException , ` suppress ` can not be used . - ` suppress ` does n't update ` cause ` . - ` suppress ` does n't deduplicate exceptions and flatten CompositeExceptions . - ` suppress ` and ` Throwable.addSuppressed ` are pretty confusing for Java 7+ users . Without looking at the implementation , it 's hard to figure out the differences . This PR made the following changes : - Remove ` CompositeException.suppress ` so that it 's easy to make CompositeException thread-safe . - This may cause some performance lost in some path rarely happening , e.g. , an excpetion is thrown from ` onError ` , but that 's not a big deal . - Since ` suppress ` is removed , it does n't make sense to create an
2.x : Add Single.flatMapMaybe __EoT__
2.x : improve performance of Observable.flatMapIterable __EoT__ This PR improves the performance of ` flatMapIterable ` by inlining the consumption of the generated ` Iterable ` . The performance improvement comes from direct iteration and emission plus removing the overhead of the regular ` flatMap ` as such source mappings are inherently synchronous . # # # Benchmark i7 4790 , Windows 7 x64 , Java 8u102 , JMH 1.13 , ops/s - bigger is better ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18866111/a5a228b6-849e-11e6-9b53-c59df8f32d59.png ) 10x overhead reduction in flattening a single element ` Iterable ` . ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18866190/187bce50-849f-11e6-9e44-473464457c3c.png ) Half the overhead compared to ( an already optimized ) ` Flowable.flatMapIterable ` . ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18866147/d93d6686-849e-11e6-9bdb-7837c55efddc.png ) Nice improvement on the cross-range benchmark ( stream 1 million element split into N outer and M inner elements where N \* M = 1 million ) : ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18866180/005367d4-849f-11e6-9925-9b9d2a33a618.png ) Also quite better than ` Flowable.flatMapIterable ` .
2.x : Add Maybe.flatMapSingle __EoT__ Gave that implementation a try . Feedback is welcome I think there are improvements that can be done .
2.x : Add Completable.andThen ( MaybeSource ) __EoT__
2.x : Factor out typical TestObserver/TestSubscriber methods __EoT__ This PR introduces a new abstract internal class ` BaseTestConsumer ` which now hosts the ` assertX ` methods of ` TestSubscriber ` and ` TestObserver ` which were duplicates before .
2.x : TestSubscriber & TestObserver add assertValue ( Predicate ) __EoT__
2.x : Verify same onNext / onError null behavior across all Subjects and Processors __EoT__
2.x : Evaluate Schedule initialization via Callable __EoT__ This implements the solution proposed in # 4572 - to initialize the Schedulers via a Callable , rather than directly via a value .
2.x : RxJavaPlugins - Do n't pass null throwable down to Error Handler __EoT__
2.x : benchmark just ( ) and fromCallable ( ) throughput __EoT__ This PR adds benchmarks for measuring ` just ( ) ` and ` fromCallable ( ) ` when using ` subscribeOn ` , ` observeOn ` and ` subscribeOn ( ) .observeOn ( ) ` with them . # Benchmark baseline - i7 4770K , Windows 7 x64 , Java 8u102 , JMH 1.13 - throughput ops/s , larger is better # # just ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18817630/bf4c4c9a-8365-11e6-87ea-13b9e2f5303c.png ) ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18817657/69047e10-8366-11e6-9a63-6b0878e55097.png ) # # fromCallable ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18817631/c850e922-8365-11e6-8e7b-f60c2b9bdbaa.png ) ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18817654/5cfcd46e-8366-11e6-9eb7-50e1b872f377.png ) # # just vs. fromCallable ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18817632/d7109ac0-8365-11e6-9936-e287477965e5.png )
2.x : Add missing @ Test annotation on tests __EoT__
2.x : do n't show started unit tests __EoT__ Unfortunately , test reporting ca n't be coalesced so our almost 6000 tests overflow the Travis ' window and making it more difficult to see what went wrong ( especially from mobile ) . However , Travis times the build out if it does n't detect standard output emission for more than 10 minutes ; our tests take 12 minutes on average . By not showing started but showing skipped ( of which we have 200 scattered around ) , the timeout should not happen and the output is not bloated .
2.x : Remove takeFirst ( predicate ) in Observable & Flowable __EoT__
2.x : Enhance NPE messages __EoT__ Now all NPE thrown internally are having this standard message
2.x : Add singleOrError , firstOrError , lastOrError & elementAtOrError to Observable and Flowable __EoT__ Closes # 4588
2.x : UnicastSubject fix onTerminate __EoT__
2.x : Report errors from onError to Plugin when done __EoT__ For the first one that I found I even wrote a test . Then I started noticing more missing spots . If wanted I could port that one test to every operator that I touched . Though I did n't really find tests testing that errors are propagated through the Plugin API .
2.x : Add error assertion with predicate to TestSubscriber and TestObserver __EoT__ Added support for error assertions with to TestSubscriber requested in # 4498 to support custom error evaluation . Removes the need to implement equals and hashCode in exceptions .
2.x fix Flowable.create ( ) not reporting null values properly , unify __EoT__ exception msg across Reported on [ Stackoverflow ] ( http : //stackoverflow.com/questions/39622458/flowableemitter-doesnt-signal-error-when-onnext-got-null ) . There was no proper null check in the various emitters . I 've also unified the message pattern across all ` create ( ) ` emitters .
2.x : Remove some dead code __EoT__ Also what about IntFunction it 's right now in the public API however not used . So the question is does Rx want to expose that interface ?
2.x : Add missing Maybe tests for concatWith & onErrorResumeNext __EoT__ They had no tests previously
2.x : convert the Observable operators to return Single/Maybe __EoT__ This PR updates many ` Observable ` operators to return ` Single ` , ` Maybe ` or ` Completable ` : - count ( ) - > Single - elementAt ( ) - > Maybe - elementAt ( T ) - > Single - first ( T ) - > Single - firstElement ( ) - > Maybe - ignoreElements ( ) - > Completable - lastElement ( ) - > Maybe - reduce ( BiFunction ) - > Maybe - reduce ( Callable , BiFunction ) - > Single - reduceWith ( U , BiFunction ) - > Single - single ( T ) - > Single - singleElement ( ) - > Maybe and deletes Observable.toSingle , Observable.toMaybe and Observable.toCompletable . In addition , ` Flowable.reduce ( BiFunction ) ` now returns ` Maybe < T > ` . Related : # 4321
2.x : count , elementAt , ingoreElements , last , single , reduce , reduceWith to return non-Flowable __EoT__ This PR updates many ` Flowable ` operators to return ` Single ` , ` Maybe ` or ` Completable ` : - ` count ( ) ` - > ` Single ` - ` elementAt ( ) ` - > ` Maybe ` - ` elementAt ( T ) ` - > ` Single ` - ` first ( T ) ` - > ` Single ` - ` firstElement ( ) ` - > ` Maybe ` - ` ignoreElements ( ) ` - > ` Completable ` - ` reduce ( Callable , BiFunction ) ` - > ` Single ` - ` reduceWith ( U , BiFunction ) ` - > ` Single ` - ` single ( T ) ` - > ` Single ` - ` singleElement ( ) ` - > ` Maybe ` and deletes ` Flowable.toSingle ` , ` Flowable.toMaybe ` and ` Flowable.toCompletable ` . ` Flowble.reduce ( BiFunction ) ` was not yet changed from ` Single ` to ` Maybe ` ( to allow empty sources to be reduced
2.x : collect , toList , toSortedList , toMap , toMultimap to return Single __EoT__ This PR makes the following operators return ` Single ` : - ` collect ` - ` collectInto ` - ` toList ` - ` toSortedList ` - ` toMap ` - ` toMultimap ` and changes the documentation to mention ` Single ` instead as well . ( There are some whitespace removals I forgot previously ) .
2.x : make any ( ) and all ( ) return Single , patch up tests __EoT__ This PR changes the return type of ` any ( ) ` and ` all ( ) ` to ` Single ` . I 've also did a small change to ` TestObserver ` by having it implement the other ` XObserver ` types . This resulted in one extra method ` onSuccess ` to be added but now you can subscribe ` TestObserver ` to ` Single ` , ` Maybe ` and ` Completable ` without conversion yet still ` test ( ) ` them with the same convenient API . `` ` java Flowable.range ( 1 , 10 ) .any ( v - > true ) .test ( ) .assertResult ( true ) ; `` `
2.x : last ( ) to return Single __EoT__ This PR changes the return type of ` last ( ) ` to ` Single < T > ` and updates the relevant locations . Originally , it was implemented as ` takeLast ( 1 ) .single ( ) ` so to reduce impact , all other original uses now have this inlined .
Add extra Maybe iterable Amb tests for overlapped emissions __EoT__ - Asserting that downstream will get the results of the first source that began emission , even if multiple sources have overlapped emissions - Testing Success and Error paths
2.x : Enhance NPE message in Create functions of all Base Reactive Types __EoT__
2.x : Fix typo in Single + Maybe defer ( ) __EoT__
2.x : make internal naming consistent , refactor some classes 9/14-2 __EoT__ - Make internal naming of components consistent with the base reactive type - move ` io.reactivex.internal.subscribers.flowable . * ` to ` io.reactivex.internal.subscribers ` - move ` io.reactivex.internal.subscribers.observable . * ` to ` io.reactivex.internal.observers `
2.x : cleanup of style and other minor things , 9/14-1 __EoT__ This PR has 781 lines changed across 511 files so GitHub wo n't display the complete diff . It is advised to check this out and do a diff in your IDE . Notable changes : - replace mention of ` onCompleted ` with ` onComplete ` - remove ` public ` from constructors of package-private classes ( some may think the class was intended to be public but usually is n't ) - few minor whitespace addition around operators ( so the code does n't look so cluttered to me when I have view/debug older code or unit tests contributed a while ago ) - add missing ` . ` from the end of the first sencence in javadocs - removed empty ` /** */ ` comments above the ` serialVersionUID ` fields - use checkstyle tool version 6.19 plus a few more checkstyle rules - fix ObservableRedo asnyc reentrancy problem by serializing the subject
2.x : cleanup of some javadoc errors and mentions of 'Nbp ' __EoT__ - fix some javadoc typos - replace javadoc mentioning of `` unsubscribe '' with either `` cancel '' or `` dispose '' - some minor algorithm reorganizations based on IntelliJ analysis - remove the mention of `` Nbp '' from the code and documentation ( it refers to an earlier naming scheme for Observables and Observers )
2.x : small cleanup and TCK fix __EoT__ - Change the ` Callable < Publisher < T > > ` parameter of ` timeout ` to plain ` Publisher < T > ` to simplify the API surface ; use ` defer ( Callable < Publisher < T > > ) ` as input instead - change the parameter order of ` timeout ` from ` ( long , TimeUnit , Publisher , Scheduler ) ` to ` ( long , Timeunit , Scheduler , Publisher ) ` to better match the general pattern of time-unit-scheduler . - ` Observable.timeout ` has been updated similarly - Add ` FlowableAwaitOnSubscribeTck ` to workaround the case when calling ` onNext ` ( indirectly ) from ` onSubscribe ` may be unexpected ( plus randomly fails the observeOn TCK test ) .
2.x : Add Create test with CancelAble for all types and add more MaybeCreateTest cases __EoT__ ` setCancellable ` was not tested before .
2.x : last Maybe operators __EoT__ This PR adds the last couple of ` Maybe ` operators ` timeout ` and ` unsubscribeOn ` . @ abersnaze Let me know if I missed an operator or you want some overload . In the subsequent PRs , I 'll change the return types of some classical operators to better indicate the cardinality they have ( ` Single ` , ` Completable ` ) .
Observable.timeout/Flowable.timeout should unsubscribe from underlying subscription on dispose __EoT__
2.x : cleanup 9/12-1 , more Maybe operators , more source code checking __EoT__ - more ` Maybe ` operators : ` onTerminateDetach ` , ` repeat ` , ` retry ` - fixed missing ` Backpressure : ` entries of the javadoc where the base type uses Flowable/Publisher - new base type source parser and check for javadoc mistakes : wrong type mentions , a/an use - fixes of those javadoc mistakes
2.x : add Maybe operators , add annotation and source code checker tests __EoT__ - add ` Maybe ` operators : ` delay ` , ` hide ` , ` isEmpty ` , ` onErrorComplete ` , ` onErrorResumeNext ` , ` onExceptionResumeNext ` - add more fusion interfaces and mark ` Maybe.just ` and ` Maybe.empty ` as ` ScalarCallable ` . - added unit test to verify base reactive classes have proper scheduler and backpressure annotations ( wherever appropriate ) - added unit test to verify the javadoc of the main reactive types have the **Backpressure : ** and **Scheduler : ** sections in them ( via scanning the source files if it can find it possible , works for me ) - added unit test to verify that when **Scheduler : ** section mentions a method name , it actually matches the method the javadoc is there for ( lots of copy-paste errors were found this way ) - fix the annotations and documentation errors detected above - the backpressure javadoc section checker for 3 types are currently disabled as I 'm out of time for tonight .
2.x : Remove unused declarations __EoT__
2.x : More usage of ObjectHelper __EoT__
Observable/Flowable/Completable/Single.delay should always call onError on the provided Scheduler __EoT__ Fixes # 4521
2.x : Add missing Resource Observer for Maybe , Completable & Single and adjust some Javadoc __EoT__ Fixes # 4517
2.x : add more Maybe operators 9/09-1 __EoT__ This PR adds some more ` Maybe ` operators : - ` ambWith ` - ` cache ` - ` concatWith ` - ` contains ` - ` count ` - ` defaultIfEmpty ` - ` delay ` - ` switchIfEmpty ` - ` zipWith ` Plus a small cleanup and additional ` TestHelper ` test support ( check double onSubscribe calls , dispose ( ) state management ) .
2.x : fix Single.using , add unit tests and coverage __EoT__ I 've forgotten to create a branch so the first part of todays coverage work [ landed in 2.x direct ] ( https : //github.com/ReactiveX/RxJava/commit/1145819b658983807e0cede5ba2c7d5ac1117baa ) - removed unused methods from various classes - compacted ` SpscArrayQueue ` - added null checks to ` SpscLinkedArrayQueue.offer ( ) ` and ` MpscLinkedQueue.offer ( ) ` - fixed ` ResourceObserver ` not calling ` onStart ` - Added direct NotificationLite-emission methods to ` AppendOnlyLinkedArrayList ` , updated ` SerializedObserver ` and ` SerializedSubscriber ` to use it directly instead of the former indirection - ` TestObserver.isDisposed ` now reports true if terminal events were received ( # 4514 ) - ` ResourceSubscriber ` to use ` SubscriptionHelper ` 's deferred Subscription/requesting management - added unit tests to cover ` DisposableXObserver ` s - ` SerializedObserver ` and ` SerializedSubscriber ` now have proper unit tests each This current PR fixes ` Single.using ` not properly managing the resource and adds unit tests to verify the behavior along with a few extra coverage improvements .
2.x : fix switchMap bad cancellation __EoT__ Both ` switchMap ` implementations did n't properly cancel the current inner consumer ( but instead cancelled the outer 'connection ' only ) . Reported in # 4512 .
2.x : add system properties to adjust thread priorities of Schedulers __EoT__ This PR adds the ability to specify the default thread priorities of ` computation ( ) ` , ` io ( ) ` , ` newThread ( ) ` and ` single ( ) ` schedulers via system properties . I 've added the property names to the ` Schedulers ` javadoc . Related : # 4389 .
2.x : Add exception message in SingleFromCallable __EoT__
2.x : fix operator RefCount , disable FindBugs ( due to Travis OOM ) __EoT__ This PR fixes the operators ` refCount ` ( ensure proper call order to onXXX ) , disables FindBugs due to out-of-memory kills on Travis and increases the half-time sleep of a flaky unit-test .
2.x : Replace ` finallyDo ` references with ` doAfterTerminate ` __EoT__ This should be less confusing .
2.x : Ignore Checkstyle failures __EoT__
2.x : Add Checkstyle for Trailing Whitespace __EoT__ This will add checkstyle though it should not be executed together with Travis and hence does not fail the PR if there are . Also running ` ./gradlew checkstyleMain ` gives a list of places where trailing whitespace exists .
2.x : more Maybe operators , minor cleanups 9/07-1 __EoT__ - minor Javadoc corrections - Note : some Maybe operators shifted within the file - add to ` Maybe ` : ` concatArrayDelayError ` , ` concatArrayEager ` , ` concatEager ` , ` concatDelayError ` , ` mergeArrayDelayError ` , ` mergeDelayError ` , ` sequenceEqual ` , ` timer ` , ` using ` , ` zip ` , ` zipArray ` - improve coverage of ` Observable ` , ` Single ` and ` Maybe ` . - Move tests from ` ObservableTests ` into ` ObservableTest ` drop the former .
2.x : add new methods to Maybe , Observable and Single from 4481 __EoT__ This PR adds just the new methods from # 4481 to allow a much cleaner change of return types later on .
2.x : Flowable.reduce ( ) to return Single , macro fusion __EoT__ This PR adds the baseline for changing ` Flowable ` and ` Observable ` operators to return ` Single ` , ` Completable ` or ` Maybe ` but in case the user wants to go back to the original type via ` toFlowable ` or ` toObservable ` we switch to a natively ` Flowable ` / ` Observable ` operator ( macro-fusion ) . Benchmark comparison ( i7 4790 , Windows 7 x64 , Java 8u102 ) : ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/18269896/98ffbf80-742a-11e6-91b7-23b03bec8b8c.png ) No changes were applied to ` Observable ` yet hence the roughly same result there . ` Flowable.reduce ( ) ` has been updated plus there is a new ` FlowableReduce ` instead of ` scan ( ) .last ( ) ` .
2.x : Completable enhance doOnEvent to reduce allocations __EoT__
2.x : coverage , bugfixes , 9/03-1 __EoT__ - Fixed bugs in ` Flowable.sequenceEqual ` , ` Flowable.zip ` when errors are delayed , ` Flowable.onBackpressureBuffer ` when errors are delayed - Fixed mentions of ` NbpX ` in some places - Synchronized unit tests between ` Observable ` and ` Flowable `
2.x : add more Maybe operators , fix a few javadoc mistakes __EoT__ - Move ` verifyPositive ` into ` ObjectHelper ` - Fix javadoc of ` Flowable.subscribe ( ) ` and ` Observable.subscribe ( ) ` mentioning ` Subscription ` from 1.x - ` Maybe ` : add ` amb ` , ` concat ` , ` concatArray ` , ` merge ` , ` mergeArray ` , ` concatMap ` , ` subscribe ` , ` subscribeWith ` , ` doOnEvent `
2.x : rename Observable and Single # doOnCancel to # doOnDispose __EoT__ # 4456 Completable already used .doOnDispose ( ) however I renamed the arguments to match Observable and Single
2.x : Maybe for lazy Optional __EoT__ In # 4321 I hit on the problem of needing a lazy object that could either be zero or one value . In that issue the idea of switching the return value of ` reduce ( R , Func2 < R , T , R > ) ` from ` Observable < R > ` to ` Single < R > ` because that operator can only ever produce an Observable that emits exactly one value . The problem was that ` reduce ( Func2 < T , T , T > ) ` could not be changed to ` Single < T > ` because the source Observable could be empty and therefore not produce one and only one value . To solve this problem I mentioned we could create a lazy type that represents either 1 or no value could fill the gap between ` Completable ` and ` Single < T > ` . This PR is for the introduction of the ` Maybe < T > ` type .
Fix FlowableOnBackpressureBufferStrategy __EoT__ Fix buffered objects not propagated downstream in FlowableOnBackpressureBufferStrategy Fix drop strategy logic in FlowableOnBackpressureBufferStrategy Add unit test for FlowableOnBackpressureBufferStrategy , copied from FlowableOnBackpressureBufferTest , there is still some work needed to have a better coverage
2.x : Subject/Processor improvements & small cleanup __EoT__ - open up ` verifyPositive ` as protected for validation convenience in subclasses - improve size and state handling of ` DeferredScalarSubscription ` - enable async-fusion on ` AsyncSubject ` and ` AsyncProcessor ` , compact the classes - **behavior change** ` AsyncX.hasValue ( ) ` returns false until the terminal state has been reached - compact the classes ` PublishSubject ` , ` PublishProcessor ` , ` BehaviorSubject ` , ` BehaviorProcessor ` , ` ReplaySubject ` and ` ReplayProcessor ` - enable async-fusion on ` UnicastSubject ` , compact the class - rename ` BaseXQueueDisposable ` to ` BasicXQueueDisposable ` to match ` BasicXQueueSubscription ` - introduce ` DeferredScalarDisposable ` , refactor ` DeferredScalarObserver ` - adjust tests that asserted on the former parameter names - subjects and processors can now be created with newing up their constructor : ` new PublishSubject < > ( ) ` ; there is no mandatory shared state between the ` Observer ` part and the ` Observable ` part because both are now stateless on their own .
2.x : cleanup , behavior clarifications , fixes , coverage 8/28-1 __EoT__ - Add tests - fix mistakes in ` TestObserver ` - Combine ` DisposableHelper ` and its inner ` Disposed ` enum - Compact ` NotificationLite ` and its inner ` Complete ` enum - Fix NPE in ` ListCompositeDisposable ` constructor - Fix ` DeferredScalarObserver ` fusion and state management - Turned a few empty enums into classes with private constructor : coverage ca n't cover them 100 % otherwise . These empty enums have a constructor in their bytecode which never gets called and thus there 's always 10 instructions / 2 method calls missing . - Removed ` TestObserver.awaitDone ( ) ` , one should always await with timeout
2.x : cleanup , bugfixes , coverage 8/27-2 __EoT__ - Remove unused code - Improve coverage of ` Single ` , ` Completable ` and ` Observable ` - Fix minor bugs in operators
Fix typo . __EoT__
2.x : coverage , fixes , cleanup 8/27-1 __EoT__ - updated ` Single.cache ( ) ` to be lock-free , to allocate less and work properly - added test coverage to some classes - remove unused internal ` EmptyObserver ` - update ` PublishSubject ` to support cross-cancellation - update ` TestHelper.race ` to use the current thread for one of the tasks
2.x Improve coverage , fix bugs __EoT__ The new tests revealed some bugs ( nothing major ) .
2.x : collect - handle post terminal events - Observable __EoT__ Post-terminal event handling for ` Observable.collect ` . Added three unit tests that failed on original logic .
2.x : add subscribeWith to get back the subscriber/observer fluently __EoT__ This PR adds the ` subscribeWith ` methods to the base reactive types to mainly help with the 1.x to 2.x changeover as 2.x ` subscribe ( Subscriber ) ` return void instead of the resource/cancellation/unsubscription type ` Disposable ` . See the javadocs and the unit test for example use . Related : # 4400
2.x : fixes , cleanups , renames __EoT__ Changes : - fix spelling mistakes - more consistent parameter naming scheme based on # 1353 ( but incomplete , RC2 ) - fix bugs due to wrong variable naming - compact logic expressions - fix ` Completable.doAfterTerminate ` not called the right time - ` onErrorReturnValue ` renamed to ` onErrorReturnItem ` @ DavidMGross once this PR has been merged , it would be great you submitted one that has ` //TODO ` markers on those lines that need attention . The naming scheme you suggested does n't come intuitively to me so I may skip many of them without the markers .
2.x : add assembly tracking , minor fixes and cleanup __EoT__ Notable changes : - renamed ` amb ( sources ... ) ` to ` ambArray ( sources ... ) ` to be consistent with the naming of other operators with varargs input - Renamed some other varargs operators ot ` xArray ` to be consistent - Added ` RxJavaPlugins.onAssembly ( ) ` to operators , note that no other infrastructure ( such as ` enableAssemblyTracking ` was added ; companion libraries may later utilize these hooks to inject the necessary wrapper classes . - Extended ` RxJavaPlugins.onAssembly ( ) ` to support ` ConnectableX ` operators - Renamed ` FlowProcessor ` into ` FlowableProcessor ` to avoid future confusion with JDK 9 's ` Flow.Processor ` - Removed common value extraction methods from ` Subject ` and ` FlowableProcessor ` and left them in the implementations - Made common terminal state checking methods of ` Subject ` and ` FlowableProcessor ` as abstract since all subtypes can implement them reasonably - fixed copy-paste errors in javadocs , such as wrong class named , referencing non-existent backpressure
2.x : API removals and renames __EoT__ Notable changes : - delete ` concat ` 5-9 arguments , use ` concat ( just ( ... ) ) ` or ` concatArray ( ... ) ` instead - delete ` withLatestFrom ` 5-8 arguments - rename ` merge ( Publisher ... ) ` into ` mergeArray ( Publisher ... ) ` to disambiguate - rename ` merge ( int , int , Publisher ... ) ` into ` mergeArray ( int , int , Publisher ... ) ` to disambiguate - delete ` merge ( int , Publisher ... ) ` overload - rename ` mergeDelayError ( Publisher ... ) ` into ` mergeArrayDelayError ( Publisher ... ) ` to disambiguate - rename ` mergeDelayError ( int , int , Publisher ... ) ` into ` mergeArrayDelayError ( int , int , Publisher ... ) ` to disambiguate - delete ` mergeDelayError ( int , Publisher ... ) ` overload - delete ` takeLatestBuffer ` overloads
2.x : cleanup , enhancements 8/23-1 __EoT__ Notable changes : - Introduce ` Emitter < T > ` as a base interface for ` FlowableEmitter ` and ` ObservableEmitter ` , use it for the ` generate ( ) ` operators to be the push surface . - Hide fusion-related methods in ` TestSubscriber ` and ` TestObserver ` , remove ` test ( ) ` method overload from the base reactive classes , introduce ` SubscriberFusion ` and ` ObserverFusion ` helper in the test source set - Enable fusion on ` Observable.range ( ) ` . - Move ` Observer ` -related tests into the ` observers ` test package .
2.x : Completable.test cancel TestSubscriber when wanted __EoT__
2.x : Single.test cancel TestSubscriber when wanted __EoT__
2.x : Remove explicit StackOverflow check as its a VirtualMachineError . __EoT__ Looks like [ the linked comment ] ( https : //github.com/ReactiveX/RxJava/issues/748 # issuecomment-32471495 ) was misinterpreted ( but not in a way that affected the implementation ) as Scala considered StackOverflowError as non-fatal but RxJava always considered it fatal . As such , its explicit check was redundant .
2.x : Remove unused test methods from safe observer/subscriber . __EoT__
2.x : Move error consumer helper to internal API . __EoT__
2.x : Free upstream resources when default observer/subscriber is canceled . __EoT__
2.x : Remove reference counted Disposable public type . __EoT__ This is a very specific use case to provide as a first-party type which can always be added back later should there be sufficient demand .
2.x : Do not promise a new instance where we return a singleton . __EoT__
2.x : Remove double dash on RxThreadFactory thread names . __EoT__ Also optimize name creation to avoid ` StringBuilder ` having to expand its underlying ` char [ ] ` .
2.x : Correctly dereference subscription before comparing against null . __EoT__
2.x : Correct factory method name for converting an RS Publisher . __EoT__
2.x : Move single-use top-level type to nested class of its only use . __EoT__
2.x : Remove test scheduler factory . __EoT__ This method is misleading in that it 's a factory next to a bunch of accessor methods to shared resources . The TestScheduler constructor is public and can be used directly .
2.x : implement ops , add javadoc , remove unused components 8/19-2 __EoT__ Notable changes : - use JMH 1.13 - fix javadoc generator exclude pattern - add javadoc to many components - remove ` Observers ` and ` Subscribers ` - all their function is available via subscribe ( ) and/or by implementing the abstract ` XObserver ` / ` XSubscriber ` provided - remove ` Schedulers.immediate ( ) ` - remove ` Single.subscribe ( Subscriber ) ` , ` Single.subscribe ( Observer ) ` , ` Completable.subscribe ( Subscriber ) ` and ` Completable.subscribe ( Observer ) ` - remove ` CompletableSerializedObserver ` and ` SingleSerializedObserver ` and their parent package - implement ` Single.takeUntil ` , ` Single.flatMapCompletable ` - update the time-shift handling in the default ` Scheduler.schedulePeriodically ( ) ` to match 1.x - fix ` Single.subscribeOn ` disposable management - renamed ` Subject.hasSubscribers ` to ` Subject.hasObservers `
2.x : added missing ops , cleanup 8/19-1 __EoT__ Notable changes : - renamed and added safe ` create ` support to ` Observable ` , ` Single ` and ` Completable ` - added some javadoc - added ` test ( ) ` method to ` Single ` and ` Completable ` - factored out ` ErrorMode ` into ` internal.util ` ( used by various ` concat ` operators )
2.x : move blocking operators into the base classes __EoT__ This PR removes the ` BlockingFlowable ` and ` BlockingObservable ` classes and moves the blocking operators into the respective reactive classes and names prefixed with ` blocking ` . In addition , many of the mentions of ` Flowable ` has been replaced with ` Observable ` in ` Observable ` . Related : # 4366 .
2.x : remove Try+Optional , introduce Notification __EoT__ This PR removes the ` Try ` and ` Optional ` classes and ( re ) introduces ` Notification < T > ` . There are several ways to implement it . This PR uses the abstract class + private subclasses approach that saves on instance size . Related discussion : # 4365 .
2.x : add withLatestFrom many , cleanups and other enhancements __EoT__ Notable changes : - implemented ` withLatestFrom ` with multiple other sources ( both ` Flowable ` and ` Observable ` ) - added missing ` Exceptions.throwIfFatal ( ) ` after catching throwables - added ` SequentialDisposable ` and replaced internal use of ` SerialDisposable ` with it - added ` package-info.java ` to public packages - added javadoc to some interfaces and methods - removed ` @ Experimental ` tags and set those methods to ` @ since 2.0 ` - added ` HalfSerializer ` to deal with single onNext and multiple onError/onComplete callers
2.x : test sync , fix retryWhen/redoWhen/publish ( Function ) __EoT__ Notable changes : - Implement the ` onBackpressureBuffer ` with overflow strategy ; change the strategy to plain enum . - Additional unit tests from 1.x - Implement ` publish ( Function ) ` properly to support latecommers . - Split ` FlowableRedo ` into ` FlowableRetryWhen ` and ` FlowableRepeatWhen ` . - Make sure ` take ( 0 ) ` still triggers upstream subscription that is immediately cancelled .
2.x : factor out inner classes from the base reactive types __EoT__ This PR factors out the anonymous inner classes from the base reactive types and introduces the appropriate classes and methods in ` *Helper ` enums .
2.x : sync Completable javadoc and related changes __EoT__ This PR mainly adds ` Scheduler : ` descriptions to ` Completable ` , removes deprecated operators or unnecessary aliases . In addition , blocking methods now are named ` blockingAwait ` and ` blockingGet ` .
2.x : Accept subclasses of Throwable for asserting failure . __EoT__
2.x : Sync Single javadoc with 1.x __EoT__ This PR adds javadoc to the ` Single ` methods , fixes a few API differences .
2.x : Observable + Flowable fix some typos __EoT__
2.x : Fix some typos in Flowable + Observer documentation __EoT__
2.x : sync javadoc of Flowable __EoT__ This PR adds the Javadoc to the ` Flowable ` plus removes some deprecated or unnecessary operator overloads . By the sheer amount of documentation , ` Flowable ` ca n't be reviewed on GitHub . Once the CI passes , I 'll merge it and people who wish to review it can immediately start a PR to fix any documentation mistakes .
2.x : Remove conditional resource management from async listeners . __EoT__ Rename them to have a 'Resource ' prefix .
2.x : move DisposableObserver to public area , add some javadocs __EoT__ Move ` DisposableObserver ` to ` io.reactivex.observers ` + some documentation . Related : # 4082 .
2.x : Clarify behavior of RxJavaPlugins.reset ( ) in javadoc __EoT__ Noticed in RxAndroid https : //github.com/ReactiveX/RxAndroid/pull/316 # discussion_r73783555
2.x : Add 'WithUpstream ' interfaces to connectable implementations . __EoT__
2.x : No scheduler change happens for timeInterval ( ) and timestamp ( ) . __EoT__
2.x : Switch ( almost ) all chain operators to FlowableWithUpstream . __EoT__
2.x : Use ArrayListSupplier in more places , add HashMapSupplier . __EoT__
2.x : Remove unused exceptions in public API __EoT__ As wanted in # 4306
2.x : Rename FlowableSource to FlowableWithUpstream to match ObservableWithUpstream . __EoT__
2.x : Promote anonymous Observables to top-level types . __EoT__
2.x : fix SubscriptionArbiter reentrancy/cancel bug __EoT__ This PR fixes the case when a call to request ( ) prevented cancellation of the arbiter if the call never returned , thus locking out the drain loop from the cancellation call . The PR makes sure ` request ( ) ` is only called outside the guarded region . 1.x is not affected because unsubscription and requesting go on separate `` channels '' . The PR also fixes ` FlowableRedo ` by serializing the repeat signal ` Processor ` .
2.x : Promote Observable to Single/Flowable adapters to top-level types . __EoT__
2.x : Add missing license headers __EoT__ Now every file has a license header .
2.x : Move single and completable observers to correct package . __EoT__
2.x : Rename Observable Base Interface Types for consistency __EoT__ Addresses # 4044 .
2.x : Rename Completable Base Interface Types for consistency __EoT__ Addresses # 4044
2.x : Rename ObservableSource to ObservableWithUpstream __EoT__ To unblock # 4300
2.x : Rename Flowable Base Interface Types for consistency __EoT__ Addresses # 4044
2.x : Rename Single Base Interface Types for consistency __EoT__ Addresses # 4044
2.x : Add serialized single subscriber wrapper . __EoT__ There 's already one for observer , subscriber , and completable subscriber .
2.x : Correct default subscriber name . __EoT__
2.x : Actually apply custom scheduler when applying future . __EoT__ Correct annotatoin declaration as well .
2.x : Elide more create/callback wrappers in favor of direct Observables . __EoT__
2.x : move Exceptions to public area , + ExceptionHelper __EoT__ Related : # 4280 . The ` Exceptions.propagate ` and ` Exceptions.throwIfFatal ` are too useful to be hidden in an internal package so this PR moves them into the public ` io.reactivex.exceptions ` package . The terminal atomics related to Throwable containers lives in the ` ExceptionHelper ` enum .
2.x : Remove defunct 'Nbp ' prefix from Observable interfaces . __EoT__
2.x : test sync and missing operators ( 8/02 ) __EoT__ - Add ` rebatchRequests ` which delegates to ` observeOn ` with the help of an internal ` ImmediateThinScheduler ` that only executes tasks immediately . Still not planning to expose an immediate scheduler . - Fix ` FlowableMapNotification ` 's type signature , no need to restrict it to return ` Publisher < R > ` but can go with ` R ` itself . - Make sure ` flatMap ` does n't reorder scalars and elements of the same inner source . - Change parameter ordering on ` mergeDelayError ( Iterator ) ` overloads .
2.x : test sync and operator fixes __EoT__ - rename ` finallyDo ` ( deprecated in 1.x ) to ` doAfterTerminate ` - upgrade sized ` buffer ( ) ` , fix backpressure bug - add post-complete helper methods - fix ` toSingle ` not complaining about an empty/longer source - ` RxJavaPlugins ` to reset the base-type lifecycle callbacks as well
2.x : subscribeOn allow cancelling before the actual subscription happens ( just like 1.x ) __EoT__ This PR fixes the ` subscribeOn ` operator to allow cancellation before the actual subscription to the source takes place - just like how 1.x works .
2.x : Test sync , +groupJoin , +join , +onTerminateDetach __EoT__ - add ` groupJoin ` , ` join ` , ` onTerminateDetach ` - fix missing cancellation in ` FlowableFlattenIterable ` - fix ` fromIterable ` error handling - added several unit test methods and classes from 1.x
2.x : use generic type instead of Object in combineLatest and zip __EoT__ As discussed in https : //github.com/ReactiveX/RxJava/issues/1277 # issuecomment-233357354 This PR gives a stricter type signature for ` combineLatest ` , ` zip ` , ` zipArray ` and ` zipIterable ` . It replaces occurrences of ` Object ` with its generic type ` T ` . In practice users will not need to type-cast arrays in the combine function anymore .
2.x : sync unit tests of Completable , add missing features __EoT__ Do n't worry about not all things tested in this PR , anything extra relative to 1.x will be covered after the sync .
2.x : +fromAsync , distinctUC , skip , take overloads , fix TestSubscriber API __EoT__ This PR adds a few operators and overloads from 1.x - ` fromAsync ` - ` just ` - 10 arguments - ` distinctUntilChanged ( BiPredicate < ? super T , ? super T > comparer ) ` - ` skip ` timed - default scheduler - ` take ` timed - default scheduler - ` toCompletable ` In addition , this PR fixes the API of TestSubscriber by making the initial value primitive ` long ` and having 0 as no initial request instead of the trickery with ` null ` .
2.x : implement concat ( Map ) Eager ( DelayError ) and expose concat ( Map ) DelayError overload __EoT__ Started a syncing process between 1.x and 2.x operators ( based on [ this diff ] ( https : //gist.github.com/akarnokd/4a391527e099412cad87d3dffbfef762 ) ) . The first set is the addition of the eager version of ` concat ` and ` concatMap ` . In addition , all of them get a ` XDelayError ` overloads as well .
2.x : reduce overhead of blocking first/last/single __EoT__ Optimize the reception , less allocation , less overhead in general . Benchmark comparison ( i7 4790 , Windows 7 x64 , Java 8u92 ) ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/16583761/065268fc-42b8-11e6-86a1-4ac91da80c97.png )
2.x : measure overhead of toBlocking ( ) first and last __EoT__ This updates the perf classes a bit and adds a blocking benchmark . ! [ image ] ( https : //cloud.githubusercontent.com/assets/1269832/16580974/5ff08e54-42a7-11e6-889e-cfbb5c0bdecb.png )
2.x : fix wrong reference check in FlattenIterable __EoT__ This was due to bad rewrite of field updater to atomic reference .
2.x : enable op-fusion on GroupBy , doOnX , fix mistakes in map and filter __EoT__ This short PR enables operator fusion on ` groupBy ` and on the ` doOnNext ` , ` doOnError ` , ` doOnComplete ` and ` doOnEach ` operators . In addition , it fixes small mistakes in ` map ` and ` filter ` and adds a method to ` TestSubscriber ` to print better fusion-assertion failure message .
2.x : Enable fusion-consumers __EoT__ This PR enables fusion-consumers such as ` observeOn ` , ` flatMap ` , ` zip ` , ` concatMap ` ; makes ` UnicastProcessor ` async-fuseable ( used by ` window ` ) ; fixes a few hidden issues with operators and has convenience renames of ` SubscriptionHelper.validateX ` . In addition , it features the new ` FlowableFlattenIterable ` used by ` flatMapIterable ` and ` concatMapIterable ` .
Observable direct rest __EoT__ This concludes the architecture switch for 2.x .
2.x : upgrade to Gradle 2.14 __EoT__ Upgrade to 2.14 .
2.x update branch and year in contributing and readme md __EoT__ Target 2.x and ( C ) 2016 .
2.x : cleanup and test renames __EoT__ This PR adds the missing ` @ Override ` annotations and renames the ` Observable ` unit tests to conform a single name pattern .
2.x : run Findbugs on main only __EoT__ Do n't run findbugs for the perf and test packages .
2.x : cleanup of PMD suggestions __EoT__ This PR adjusts the PMD rules and fixes about 300 suggestions .
2.x : Reduce the visibility of internal methods . __EoT__
2.x : Correct method name for Flowable -- > Observable . __EoT__
Remove XResource classes __EoT__ This PR removes the ` XResource ` types and replaces them with ` XDisposable ` or ` XSubscription ` where necessary .
Switch some Observable ops to direct , map fuseable __EoT__ - Switch a few ` Observable ` operators to direct implementations ( reduces allocation ) - Update ` map ` to support operator fusion ; there are no sources or consumer yet though . - Adjust ` BasicFuseableX ` to have different default conveniences - Modify ` CompositeResource ` to indicate success of the mutator methods - increase timeout of ` FlowableOnBackpressureDropTest.testFixBackpressureWithBuffer `
Refactor ConditionalSubscriber , add base fuseable Subscribers __EoT__ This PR refactors ` ConditionalSubscriber ` and renames its method to ` tryOnNext ` . In addition , two new abstract subscriber types were added : ` BasicFuseableSubscriber ` and ` BasicFuseableConditionalSubscriber ` to help writing operators that support fusion ( queue and/or conditional ) .
2.x : Parallelize unit test execution for speed ! __EoT__ This gives me a 57 % reduction in execution time .
2.x : provide an explanation why certain tests are ignored __EoT__ The same as # 4118 , but for 2.x
2.x : Add Findbugs __EoT__ Taken from the 1.x branch
2.x : Remove explicit cancel flags where it can be inferred . __EoT__
2.x : Case IO acronym like a word . __EoT__ This is already being done in the library , and is fairly [ standard practice ] ( https : //google.github.io/styleguide/javaguide.html # s5.3-camel-case ) .
2.x : Switch the last SerialResource to manual resource management . __EoT__
2.x : make sure the helper returns true if the pre-swap value was null __EoT__ The original behavior was somewhat inconsistent : if the target was null before the cancel/dispose , the method did n't return true indicating a successful swap for the current thread . Now that many ` cancelled ` flag has been removed , it has to consistently trigger the remaining cleanup actions .
2.x : Invert subscription validation return type for better semantics . __EoT__
2.x : Remove explicit cancel flags where it can be inferred . __EoT__ I suspect there 's quite a few of these all over . These are just the ones I noted while doing other changes .
2.x : Remove some superfluous reads before writes . __EoT__
2.x : Expose isDisposed method on Disposable . __EoT__ This is a fairly `` dumb '' addition . There 's lots of room for follow-up improvement in the utilization of base helper classes and even removing some now-duplicated state management . Closes # 4075 .
2.x : Switch a SerialResource use to SerialDisposable . __EoT__
2.x : Add PMD __EoT__ Basically taken from the 1.x branch
2.x : Invert request validation return type for better semantics . __EoT__
2.x : Remove EmptySubscriber , start to remove NbpEmptySubscriber . __EoT__ Follow up from comments in # 4083 and # 4085 .
2.x : Merge CancelledSubscriber into EmptySubscriber . __EoT__
2.x : Merge NbpCancelledSubscriber into NbpEmptySubscriber . __EoT__ The NBP version of # 4083 .
2.x : Do not leak the DISPOSED marker instance into public API . __EoT__ If this were to be used by public code it could have have Very Bad™ effects by causing operators to think that they already disposed resources when they actually had not . Since ` Disposable ` is stateless it 's safe for ` disposed ( ) ` and ` empty ( ) ` to be synonymous , although that might change in the future so both methods are retained .
2.x : Replace custom empty Disposables with global instance . __EoT__ I keep thinking I found all of these and then more crop up ...
2.x : Re-use the single empty Disposable instance everywhere . __EoT__
2.x : Some small tweaks to Disposables . __EoT__ - Use BooleanDisposable for Runnables . - Change BooleanDisposable to use null for disposed instead of keeping a marker instance . - Eliminate static factory for CompositeDisposable since its constructors are already public .
2.x : Use more DisposableHelper and SubscriptionHelper in operators . __EoT__
2.x : Dereference atomic ref before identity comparison . __EoT__ This returns false 100 % of the time otherwise .
2.x : Inline last uses of caching DisposableHelper 's constant . __EoT__
Remove second type parameter from Subject and FlowProcessor . __EoT__ Closes # 4056 .
2.x : cleanup a few additional SubscriptionHelper locations __EoT__ Follow up to # 4058 .
Use DisposableHelper and SubscriptionHelper to reduce duplication . __EoT__ A lot of operators contained their own marker instance and class definition of Disposable or Subscription . This changes almost all of them to use the shared instance provided by their respective helper class . Some duplication still exists but can be cleaned up in a subsequent change .
2.x : Convert SchedulerSupport annotation to accept a string value . __EoT__ Closes # 4052 .
2.x : make Flowable operators extend Flowable directly to reduce allocation __EoT__ Relatively straightforward , although manual an tedious , refactoring of the Flowable operators . The number of files is this large because for consistency , the tests have been renamed as well .
2.x : Single operators factored out , headers added __EoT__ ` Single ` operators factored out and made them extend ` Single ` directly . Added missing headers .
2.x : factor out Completable ops , unify disposed markers __EoT__ - Moved the operators of Completable into their respective classes . Updated them to extend ` Completable ` directly . - Fixed a large set of inconsistend ` Disposable ` management among the ` Observable ` operators .
2.x : Use XConsumable in Completable and Single __EoT__ Update to ` Completable ` and ` Single ` to use ` CompletableConsumable ` and ` SingleConsumable ` as input .
2.x : Update Observable 's ops to work with ObservableConsumable __EoT__ This PR updates the ` Observable ` method signatures to accept ` ObservableConsumable ` , similar to how ` Flowable ` methods accept ` Publisher ` . The architecture switch may take a couple of more PRs . I 'll try to limit the change amount in each .
2.x : Update groupID and readme.md __EoT__ This PR updates the readme and changes the group ID . I 'm going to merge this and hope the new group id shows up at https : //oss.jfrog.org/artifactory/libs-snapshot/io/reactivex/ ( may take several attempts , depending on how cooperative the nebula plugin is . )
2.x : Add support for concurrently inserting actions while advancing time __EoT__ This change is adding a bit of thread safety when some threads are trying to insert some actions while the time is changed in the TestScheduler
2.x : Design.md +extension +fusion __EoT__ Added sections from # 3935 .
Clean-up of the 2.x Design.md document __EoT__ I went through all the pending comments that were n't addressed .
Data loss with RetryWithPredicate as compared to Retry Infinite __EoT__ The following test fails once when mapping 3 values . The subscribe only receives 2 values . `` ` java final AtomicBoolean isFirst = new AtomicBoolean ( true ) ; Observable. < Long > just ( 1L , 2L , 3L ) .map ( ( Long x ) - > { System.out.println ( `` map `` + x ) ; if ( x == 2 & & isFirst.getAndSet ( false ) ) { throw new RuntimeException ( `` retryable error '' ) ; } return x ; } ) .retry ( ( i , t ) - > { return true ; } ) .forEach ( System.out : :println ) ; `` ` **output** `` ` map 1 1 map 2 map 3 3 `` ` When you replace ` .retry ( ( i , t ) - > { return true ; } ) ` with the retry infinite ` retry ( ) ` then the output looks like this ... `` ` map 1 1 map 2 map 1 1 map 2 2 map 3 3 `` `
window ( ) emitting overlapping items __EoT__ I 've seen this in 1.07 and 1.09 - using http : //reactivex.io/RxJava/javadoc/rx/Observable.html # window ( rx.functions.Func0 ) , I am able to observe overlapping items in the output . Example test case here : https : //gist.github.com/gjesse/1ae59c32f63d2ad581e8
TrampolineScheduler NullPointerException __EoT__ There is an issue in TrampolineScheduler on 0.20.4 where it can throw a NullPointerException in InnerCurrentThreadScheduler ` enqueue ( Action0 action , long execTime ) ` `` ` java private Subscription enqueue ( Action0 action , long execTime ) { if ( innerSubscription.isUnsubscribed ( ) ) { return Subscriptions.empty ( ) ; } PriorityQueue < TimedAction > queue = QUEUE.get ( ) ; final TimedAction timedAction = new TimedAction ( action , execTime , COUNTER_UPDATER.incrementAndGet ( TrampolineScheduler.this ) ) ; queue.add ( timedAction ) ; if ( wip.getAndIncrement ( ) == 0 ) { do { queue.poll ( ) .action.call ( ) ; } while ( wip.decrementAndGet ( ) > 0 ) ; return Subscriptions.empty ( ) ; } else { // queue was n't empty , a parent is already processing so we just add to the end of the queue return Subscriptions.create ( new Action0 ( ) { @ Override public void call ( ) { PriorityQueue < TimedAction > _q = QUEUE.get ( ) ; if ( _q ! = null ) { _q.remove ( timedAction ) ; } } } ) ; } } `` ` The Exception happens on ` queue.poll (
Observable.cache ( ) creates indefinite number of Threads with Schedulers.io ( ) __EoT__ Hi , It would appear to me that there 's an issue with using when using Observable.cache ( ) and Schedulers.io ( ) . The issue is that an indefinite amount of threads are created as opposed to having thread re-use . This can eventually lead the following fatal scenario : `` java.lang.OutOfMemoryError : Unable to create new native thread '' . I did notice that when using Observable.cache ( ) and Schedulers.from ( Executors.newCachedThreadPool ( ) ) Rx is able to re-use threads . Other than thread-caching configuration , it 's not clear to me why these 2 implementations produce wildly different thread caching results and behavior . I can only assume that this behavior is not intended . It would be great to hear whether that 's the case . Here 's a sample program I 've put together that demonstrates the 2 different results . It 's a very simple example that creates multiple observables and ensures that they are subscribed to and that result is read . I 'm using SettableFuture to mock a lag between calls . Result with Schedulers.from ( Executors.newCachedThreadPool
Funci __EoT__ Missing doc comments for all `` Function with i arguments '' `` ` Func0 < R > Func1 < T1 , R > Func2 < T1 , T2 , R > Func3 < T1 , T2 , T3 , R > Func4 < T1 , T2 , T3 , T4 , R > Func5 < T1 , T2 , T3 , T4 , T5 , R > Func6 < T1 , T2 , T3 , T4 , T5 , T6 , R > Func7 < T1 , T2 , T3 , T4 , T5 , T6 , T7 , R > Func8 < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , R > Func9 < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , R > FuncN < R > `` `
Actioni __EoT__ Missing doc comments for ` Action0 ` .. ` Action 3 ` `` ` Action0 Action1 < T1 > Action2 < T1 , T2 > Action3 < T1 , T2 , T3 > `` `
Class SerializedSubscriber < T > __EoT__ ` Observer ` should be replaced by ` Subscriber ` .
Class BlockingObservable < T > doc comments __EoT__ Perhaps the doc comments can say that you should avoid using these operators except for quick testing and demos since they void the whole idea of asynchrony . - ` forEach ( Action1 < ? super T > onNext ) ` , last ( ) , ... Should we say anything about the fact it throws the exception if the source emits ` onError ` ?
Class GroupedObservable < K , T > __EoT__ Typo ? Instead , you can signal to them that they may discard their buffers by applying an operator like **Observable.take ( int ) ( 0 ) ** to them .
Refactoring conventions __EoT__
Class SafeSubscriber < T > __EoT__ Wrapper around _Observer_ that ensures compliance with the Rx contract . but `` ` SafeSubscriber ( Subscriber < ? super T > actual ) `` ` The doc comments for ` onNext ` etc also mention ` Observer ` instead of ` Subscriber ` .
Class Scheduler __EoT__ This should be in the code comments , not in the doc comments . `` ` Why is this an abstract class instead of an interface ? Java does n't support extension methods and there are many overload methods needing default implementations . Virtual extension methods are n't available until Java8 which RxJava will not set as a minimum target for a long time . If only an interface were used Scheduler implementations would then need to extend from an AbstractScheduler pair that gives all of the functionality unless they intend on copy/pasting the functionality . Without virtual extension methods even additive changes are breaking and thus severely impede library maintenance . `` `
Javadoc Links to Rx.Net __EoT__ ( and where applicable otherwise ) Should we remove all links to Rx .NET since that will be taken care of in the offline docs for the operators ? Ha , ha , the .NET docs should point to the RxJava ones .
asObservable ( ) __EoT__ asObservable ( ) Disguises a object of an Observable subclass as a simple Observable object . Do we have a better word for disguises ( not very important )
publish __EoT__ Change which into that . publish ( ) Returns a ConnectableObservable , **which** waits until its connect method is called before it begins emitting items to those Observers that have subscribed to it . publish ( Func1 < ? super Observable < T > , ? extends Observable < R > > selector ) Returns an Observable **that** emits the results of invoking a specified selector on items emitted by a ConnectableObservable that shares a single subscription to the underlying sequence .
reduce ( all overloads ) __EoT__ reduce ( Func0 < R > initialValueFactory , Func2 < R , ? super T , R > accumulator ) Returns an Observable that applies **a function of your choosing** to the first item emitted by a source a function of your choosing == > accumulator function
scan ( all overloads ) __EoT__ scan ( Func0 < R > initialValueFactory , Func2 < R , ? super T , R > accumulator ) Returns an Observable that applies a function of your choosing to the first item emitted by a source a function of your choosing == > accumulator function
Zip all overloads __EoT__ zip ( java.lang.Iterable < ? extends Observable < ? > > ws , FuncN < ? extends R > zipFunction ) Returns an Observable that emits the results of a **function of your choosing** function of your choosing == > combiner function
Scan/Reduce with Seed Factory __EoT__ Adds overload with seed factory as per https : //github.com/ReactiveX/RxJava/issues/1831
Multiple Zipped Observers never complete __EoT__ The following code never executes the onComplete if the number is greater than 1025 . I think it has to due with back pressure which uses a default request of 1024 . I am using Java 8 `` ` Observable merged1 = Observable.zip ( Observable.range ( 0 , 1026 ) , Observable.range ( 0 , 1026 ) , ( o , e ) - > new int [ ] { o , e } ) ; Observable merged2 = Observable. < int [ ] , Integer , int [ ] > zip ( merged1 , Observable.range ( 0 , 1026 ) , ( o , e ) - > new int [ ] { o [ 0 ] , o [ 1 ] , e } ) .serialize ( ) ; merged2.subscribe ( ( o ) - > System.out.println ( o ) , e - > { } , ( ) - > { System.out.println ( `` This never prints '' ) ; } ) ; `` ` I am using the following version of Java . java version `` 1.8.0_05 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_05-b13 ) Java
Add hasObservers to Subject __EoT__ Other implementations of Rx have a hasObservers method on Subject . It would be nice to have this in RxJava . RxJS : https : //github.com/Reactive-Extensions/RxJS/blob/master/doc/api/subjects/subject.md # rxsubjectprototypehasobservers Rx.NET https : //rx.codeplex.com/SourceControl/latest # Rx.NET/Source/System.Reactive.Linq/Reactive/Subjects/Subject.cs
Javadocs for MissingBackpressureException __EoT__ It has no docs right now . We should also have a link in the exception message that points to the wiki/reactivex.io site for how to handle MissingBackpressureException as it will be a common question .
Javadocs for MissingBackpressureException __EoT__ It has no docs right now . We should also have a link in the exception message that points to the wiki/reactivex.io site for how to handle MissingBackpressureException as it will be a common question .
Observable # first causes retryWhen to trigger retry without an exception __EoT__ Noticed this behavior using rx-netty as internally it does a take ( 1 ) internally : `` ` AtomicLong inc = new AtomicLong ( 0 ) ; Observable.OnSubscribe < Long > onSubscribe = subscriber - > { final long emit = inc.getAndIncrement ( ) ; LOGGER.info ( `` Emitting : { } '' , emit ) ; subscriber.onNext ( emit ) ; subscriber.onCompleted ( ) ; } ; LOGGER.info ( `` DONE : { } '' , Observable.create ( onSubscribe ) .retryWhen ( attempt - > attempt.zipWith ( Observable.range ( 1 , 4 ) , ( n , i ) - > i ) ) .toBlocking ( ) .first ( ) ) ; `` ` The test output is : Emitting : 0 Emitting : 1 DONE : 0 As you can see the observable is subscribed to twice . This is because take , in combination with single , causes the retryWhen producer to request another item .
OnSubscribeCombineLatest not unwrapping ON_NEXT_NULL_SENTINEL __EoT__ I am using a combineLatest method which when outputting a null value the combiner Func causes a ON_NEXT_NULL_SENTINEL to be passed into the subscription 's onNext , which is causing a class cast exception . `` ` java registrationObservable = Observable.combineLatest ( registrationObservable , connectionStateObservable , new Func2 < Registration , Boolean , Registration > ( ) { @ Override public Registration call ( Registration registration , Boolean connected ) { if ( connected ) { return registration ; } return null ; //Passing null here } } ) .filter ( Functions.notNull ) ; `` ` ` notNull ` is defined as : `` ` java public static final Func1 < ? super Object , Boolean > notNull = new Func1 < Object , Boolean > ( ) { @ Override public Boolean call ( Object o ) { return o ! = null ; } } ; `` ` if that is relevant . I have determined that it is due to the RxRingBuffer used by OnSubscribeCombineLatest 's onNext method : `` ` java public void onNext ( Object o ) throws MissingBackpressureException { if ( queue == null ) { throw new IllegalStateException
Remove javadoc @ since annotations between 0.20 and 1.0 __EoT__ the `` @ since 0.x '' annotations were useful for people testing and adopting to RxJava as it coalesced around its 1.0 form , but now that it has , they 're less-useful clutter . After 0.20 , remove the @ since annotations and start with a clean slate ; adding it back in for any post-1.0 API additions .
clojure adapter `` mapcat '' has misleading doc ( re : interleaving ) __EoT__ As of 0.19.6 , ` rx.lang.clojure.core/mapcat ` 's docstring says : > The resulting observables are concatentated together into one observable . This would imply a use of ` .concat ` and therefore an ordering guarantee ( if I understand that method correctly ) , but it actually uses ` .flatMap ` and thus the results of the source observables may be interleaved .
Provide a facility for decorating a Runnable before submission to ExecutorService via Scheduler __EoT__ For Issue # 1279 This provides another method of hooking into the Scheduler process . Rather than forcing the plugin writer to write all 3 Schedulers ( computation/io/newThread ) from scratch , it allows the plugin writer to have access to the Runnable before it gets submitted to the ExecutorService . In my implementation which needs to decorate Runnables , this reduced the effort from a copy-n-paste of the entire Scheduler codebase to a 1-liner . Happy to debate names or any other aspect of this proposal
OperatorFilter failure __EoT__ This test hangs with 0.20.0-RC3 I 'm supposing because of ` OperatorFilter ` : `` ` java import org.junit.Assert ; import org.junit.Test ; import rx.Observable ; import rx.functions.Functions ; public class BackpressureTest { @ Test public void testDoesNotHang ( ) { Assert.assertEquals ( 0 , Observable .empty ( ) .count ( ) .filter ( Functions.alwaysFalse ( ) ) .toList ( ) .toBlocking ( ) .single ( ) .size ( ) ) ; } } `` `
Using Observable toList ( ) after takeWhile ( ) fails in some cases __EoT__ With the latest 0.20.0-RC1 a combination of takeWhile ( ) and toList ( ) on an Observable fails , sometimes . Here 's a unit test that fails : `` ` java @ Test public void testTakeWhile ( ) { int [ ] nums = { 1 , 2 , 3 } ; final AtomicInteger count = new AtomicInteger ( ) ; for ( final int n : nums ) { Observable .from ( Boolean.TRUE , Boolean.FALSE ) .takeWhile ( new Func1 < Boolean , Boolean > ( ) { @ Override public Boolean call ( Boolean value ) { return value ; } } ) .toList ( ) .doOnNext ( new Action1 < List < Boolean > > ( ) { @ Override public void call ( List < Boolean > booleans ) { count.incrementAndGet ( ) ; } } ) .subscribe ( ) ; } assertEquals ( nums.length , count.get ( ) ) ; } `` ` Here 's the same unit test that passes with slight modification : `` ` java @ Test public void testTakeWhile ( ) { int [ ] nums
Using Observable toList ( ) after takeWhile ( ) fails in some cases __EoT__ With the latest 0.20.0-RC1 a combination of takeWhile ( ) and toList ( ) on an Observable fails , sometimes . Here 's a unit test that fails : `` ` java @ Test public void testTakeWhile ( ) { int [ ] nums = { 1 , 2 , 3 } ; final AtomicInteger count = new AtomicInteger ( ) ; for ( final int n : nums ) { Observable .from ( Boolean.TRUE , Boolean.FALSE ) .takeWhile ( new Func1 < Boolean , Boolean > ( ) { @ Override public Boolean call ( Boolean value ) { return value ; } } ) .toList ( ) .doOnNext ( new Action1 < List < Boolean > > ( ) { @ Override public void call ( List < Boolean > booleans ) { count.incrementAndGet ( ) ; } } ) .subscribe ( ) ; } assertEquals ( nums.length , count.get ( ) ) ; } `` ` Here 's the same unit test that passes with slight modification : `` ` java @ Test public void testTakeWhile ( ) { int [ ] nums
OnError while emitting onNext value : object.toString __EoT__ `` ` public OnNextValue ( Object value ) { super ( `` OnError while emitting onNext value : `` + value ) ; this.value = value ; } `` ` I know this is probably a helpful error message in some cases but this can be a really costly operation when an objects toString is an expensive call or contains alot of output . I do n't think we should be printing this in any case but if so it should be on demand ( overload of getMessage ( ) ) rather than eagerly . In my case it is causing a toString of a large context object that is normally only used for debugging purposes which makes the exception logs hard to use and they are rolling over the log files very quickly . There is an added danger that if there is a bug in the toString method it will cause inconsistent exception creation . If the object throws an exception while rendering a string it will actually end up not seeing the real exception .
Missing javadoc comments __EoT__ I 've gone through those parts of the source code that are reflected in the rxjava-core javadocs and flagged those parts of the javadoc comments that are missing or that need attention . In those areas where I felt confident enough to fill in the gaps myself , I have done so , but that still leaves some gaps unfilled . If you are the implementer or if you have the necessary expertise , could you review the files on this list for missing javadocs ? I 've flagged the areas that need help with `` @ warn '' tags . That tag is not part of the javadoc standard , so it triggers a javadoc compilation warning . Please remove those tags from the areas that you fix . < s > subscriptions/MultipleAssignmentSubscription.java [ set ( ) and get ( ) ] < /s > < s > subjects/Subject.java [ class description ] < /s > < s > subjects/TestSubject.java [ all javadocs missing except class description which seems copy-pasted ] < /s > < s > observers/Observers.java [ class description ] < /s > < s > observers/Subscribers.java [ class description ] < /s
Missing javadoc comments __EoT__ I 've gone through those parts of the source code that are reflected in the rxjava-core javadocs and flagged those parts of the javadoc comments that are missing or that need attention . In those areas where I felt confident enough to fill in the gaps myself , I have done so , but that still leaves some gaps unfilled . If you are the implementer or if you have the necessary expertise , could you review the files on this list for missing javadocs ? I 've flagged the areas that need help with `` @ warn '' tags . That tag is not part of the javadoc standard , so it triggers a javadoc compilation warning . Please remove those tags from the areas that you fix . < s > subscriptions/MultipleAssignmentSubscription.java [ set ( ) and get ( ) ] < /s > < s > subjects/Subject.java [ class description ] < /s > < s > subjects/TestSubject.java [ all javadocs missing except class description which seems copy-pasted ] < /s > < s > observers/Observers.java [ class description ] < /s > < s > observers/Subscribers.java [ class description ] < /s
Missing javadoc comments __EoT__ I 've gone through those parts of the source code that are reflected in the rxjava-core javadocs and flagged those parts of the javadoc comments that are missing or that need attention . In those areas where I felt confident enough to fill in the gaps myself , I have done so , but that still leaves some gaps unfilled . If you are the implementer or if you have the necessary expertise , could you review the files on this list for missing javadocs ? I 've flagged the areas that need help with `` @ warn '' tags . That tag is not part of the javadoc standard , so it triggers a javadoc compilation warning . Please remove those tags from the areas that you fix . < s > subscriptions/MultipleAssignmentSubscription.java [ set ( ) and get ( ) ] < /s > < s > subjects/Subject.java [ class description ] < /s > < s > subjects/TestSubject.java [ all javadocs missing except class description which seems copy-pasted ] < /s > < s > observers/Observers.java [ class description ] < /s > < s > observers/Subscribers.java [ class description ] < /s
Missing javadoc comments __EoT__ I 've gone through those parts of the source code that are reflected in the rxjava-core javadocs and flagged those parts of the javadoc comments that are missing or that need attention . In those areas where I felt confident enough to fill in the gaps myself , I have done so , but that still leaves some gaps unfilled . If you are the implementer or if you have the necessary expertise , could you review the files on this list for missing javadocs ? I 've flagged the areas that need help with `` @ warn '' tags . That tag is not part of the javadoc standard , so it triggers a javadoc compilation warning . Please remove those tags from the areas that you fix . < s > subscriptions/MultipleAssignmentSubscription.java [ set ( ) and get ( ) ] < /s > < s > subjects/Subject.java [ class description ] < /s > < s > subjects/TestSubject.java [ all javadocs missing except class description which seems copy-pasted ] < /s > < s > observers/Observers.java [ class description ] < /s > < s > observers/Subscribers.java [ class description ] < /s
Missing javadoc comments __EoT__ I 've gone through those parts of the source code that are reflected in the rxjava-core javadocs and flagged those parts of the javadoc comments that are missing or that need attention . In those areas where I felt confident enough to fill in the gaps myself , I have done so , but that still leaves some gaps unfilled . If you are the implementer or if you have the necessary expertise , could you review the files on this list for missing javadocs ? I 've flagged the areas that need help with `` @ warn '' tags . That tag is not part of the javadoc standard , so it triggers a javadoc compilation warning . Please remove those tags from the areas that you fix . < s > subscriptions/MultipleAssignmentSubscription.java [ set ( ) and get ( ) ] < /s > < s > subjects/Subject.java [ class description ] < /s > < s > subjects/TestSubject.java [ all javadocs missing except class description which seems copy-pasted ] < /s > < s > observers/Observers.java [ class description ] < /s > < s > observers/Subscribers.java [ class description ] < /s
Collection of tiny issues detected by IntelliJ IDEA : ) __EoT__ Observable : lift - parameter `` lift '' not documented pivot - parameter `` groups '' not documented merge - duplicate @ return range - if ( ( start + count ) > Integer.MAX_VALUE ) -- condition is always false dematerialize - @ throws Throwable not declared by method ( as far as I can see it throws OnErrorNotImplementedException ) range , elementAt , forEach - duplicate @ throws IllegalArgumentException unsafeSubscribe - parameter 'subscriber ' not documented subscribe - hook.onSubscribeError ( r ) ; -- throws r , not the result of hook ThrowObservable - `` @ return a reference to the subscription '' on void method RxJavaObservableExecutionHook.onSubscribeStart - typo in parameter name `` observableInsance '' CompositeException - messagePrefix not used ( more to come )
Docs for Serialize __EoT__ Looks like we can improve the javadocs for this : - ) `` ` java /* * @ since 0.17 */ public final Observable < T > serialize ( ) { return lift ( new OperatorSerialize < T > ( ) ) ; } `` `
RxJava Schedulers III __EoT__ The bindings for schedulers in RxScala are incomplete , for instance ` schedulePeriodically ` and ` parallelism ` are missing .
Refactoring conventions __EoT__
RxScala Schedulers __EoT__ I think it is a mistake to use Unit = > Unit instead of ( ) = > Unit . Any takers , or I 'll fix it later this week . `` ` trait Worker extends Subscription { private [ scala ] val asJavaWorker : rx.Scheduler.Worker /** * Schedules a cancelable action to be executed in delayTime . */ def schedule ( action : Unit = > Unit , delayTime : Duration ) : Subscription = this.asJavaWorker.schedule ( new Action0 { override def call ( ) : Unit = action ( ) } , delayTime.length , delayTime.unit ) /** * Schedules a cancelable action to be executed immediately . */ def schedule ( action : Unit = > Unit ) : Subscription = this.asJavaWorker.schedule ( new Action0 { override def call ( ) : Unit = action ( ) } ) `` `
PublishSubject is broken ? __EoT__ Can I ask someone to explain me why this code terminates without writing out anything ? `` ` PublishSubject < String > s = PublishSubject.create ( ) ; Subscription subscribe = s.replay ( 1 ) .doOnNext ( new Action1 < String > ( ) { @ Override public void call ( String t1 ) { System.out.println ( t1 ) ; } } ) .subscribe ( ) ; s.onNext ( `` hello '' ) ; `` ` While debugging , I see that the subject has no subscribers . True , there are no direct subscribers but the ` replay ( ) ` creates a multicast connection .
Rxscala improvement __EoT__ Add ` dropUntil ` , ` contains ` , ` repeat ` , ` doOnTerminate ` , ` startWith ` , ` publish ` variants to RxScala . # 1151 , # 1153 . /cc @ headinthebox @ samuelgruetter
Fix defer for Java 8 type-inference __EoT__ Fixes https : //github.com/Netflix/RxJava/issues/1157
Retry in Scala adaptor is ambiguous __EoT__ The ` retry ` overload leads to ambiguities : `` ` object Test extends App { import rx.scala.lang._ ( null : Observable [ String ] ) .retry ( 3 ) } both method retry in trait Observable of type = > rx.lang.scala.Observable [ String ] and method retry in trait Observable of type ( retryCount : Int ) rx.lang.scala.Observable [ String ] match argument types ( Int ) ( null : Observable [ String ] ) .retry ( 3 ) `` `
Missing Quasar instrumentation on Observable $ 2.call __EoT__ https : //groups.google.com/forum/ # ! topic/quasar-pulsar-user/bC94ftfcXtM
[ 0.16.x ] Possible bug in Sample ( Observable ) operator __EoT__ The Observable.sample ( Observable ) operator behaves non-intuitively ( at least to me ) : Here is the javadoc description : '' Return an Observable that emits the results of sampling the items emitted by the source Observable whenever the specified sampler Observable emits an item or completes . '' Which I understand as : The resulting Observable emits the current value of ` src ` for each value emitted by sampler , repeating ` src ` last value if required ( in case ` sampler ` frequency > ` src ` frequency ) . But the current behavior as of 0.16.1 is : When sampling a source Observable ` src ` using a ` sampler ` Observable , the resulting Observable ` res ` always emits only once the last value of ` src ` , even if ` sampler ` 's frequency is superior to ` src ` 's . Code example : `` ` val src = Observable.interval ( 1 , TimeUnit.SECONDS ) ; val sampler = Observable.interval ( 1 , TimeUnit.MILLISECONDS ) ; val res = src.sample ( sampler ) ; res.subscribe ( aLong
isolate subscriber used for retries , cleanup tests __EoT__ potential fix for # 1024 there is an outstanding question ( see commit comments ) about whether its appropriate for the operator to use ` unsafeSubscribe ` given that it does not completely isolate the ` Subscriber ` from a badly behaved ` Observable ` .
Can not subscribe to a Retry observable once all subscribers unsubscribed __EoT__ For version 0.16.1 and master of rx-java-core . Once all subscribers have unsubscribed from a retry observable it is not possible to subscribe again to it . Unit test below ( that would belong in OperatorRetryTest.java if its valid ) . The same test once changed slightly to conform to code in master fails also but earlier ! Code for both 0.16.1 and master is below : version 0.16.1 : `` ` java @ Test public void testRetryAllowsSubscriptionAfterAllSubscriptionsUnsubsribed ( ) { final AtomicInteger subsCount = new AtomicInteger ( 0 ) ; OnSubscribeFunc < String > onSubscribe = new OnSubscribeFunc < String > ( ) { @ Override public Subscription onSubscribe ( Observer < ? super String > observer ) { subsCount.incrementAndGet ( ) ; return new Subscription ( ) { @ Override public void unsubscribe ( ) { subsCount.decrementAndGet ( ) ; } } ; } } ; Observable < String > stream = Observable.create ( onSubscribe ) ; Observable < String > streamWithRetry = stream.retry ( ) ; Subscription sub = streamWithRetry.subscribe ( ) ; assertEquals ( 1 , subsCount.get ( ) ) ; sub.unsubscribe ( )
OperatorGroupBy does not accept multiple subscriptions when source async __EoT__ The test below fails in 0.16.1 . I have not tested against new versions but I suggest we should if the test is valid . Please have a look , thanks . `` ` java import static org.mockito.Mockito.mock ; import static org.mockito.Mockito.never ; import static org.mockito.Mockito.verify ; import java.util.concurrent.TimeUnit ; import org.junit.Test ; import org.mockito.Matchers ; import rx.Observable ; import rx.Observer ; import rx.observables.GroupedObservable ; import rx.util.functions.Func1 ; public class OperatorGroupByTest2 { @ Test public void testGroupByOnAsynchronousSourceAcceptsMultipleSubscriptions ( ) throws InterruptedException { // choose an asynchronous source Observable < Long > source = Observable .interval ( 10 , TimeUnit.MILLISECONDS ) .take ( 1 ) ; // apply groupBy to the source Observable < GroupedObservable < Boolean , Long > > stream = source .groupBy ( IS_EVEN ) ; // create two observers Observer < GroupedObservable < Boolean , Long > > o1 = mock ( Observer.class ) ; Observer < GroupedObservable < Boolean , Long > > o2 = mock ( Observer.class ) ; // subscribe with the observers stream.subscribe ( o1 ) ; stream.subscribe ( o2 ) ; // check that subscriptions were successful verify ( o1 , never
Race condition in rx.operators.OperationJoin __EoT__ I just picked up RxJava for the first time , and was experimenting with Observable.join ( ) . I discovered a race condition when both sides of the join are publishing in parallel - they will both emit each other 's item . e.g . 1 -- -2 -- -**3** -- -4 -- a -- -b-**c** -- d- Could result in : 1 , a 2 , a 1 , b 2 , b 3 , a 3 , b **3 , c** 1 , c 2 , c **3 , c** 1 , d 2 , d 3 , d 4 , a 4 , b 4 , c 4 , d I have a patch for this on my fork - I 'll submit a pull request .
Error reporting can enter infinite loop __EoT__ Relevant thread dump : java.lang.Thread.State : RUNNABLE at java.lang.Throwable.getCause ( Throwable.java:415 ) - locked < 0x00007f48cf6b4f20 > ( a java.lang.NullPointerException ) at rx.util.CompositeException.attachCallingThreadStack ( CompositeException.java:87 ) at rx.util.CompositeException . ( CompositeException.java:42 ) at rx.util.CompositeException . ( CompositeException.java:51 ) This is an infinite loop caused by collapsing multiple throwables together . In the presence of CompositeExceptions , we need to break out of the while-loop in CompositeException.attachCallingThreadStack on Throwables that have self-referential loops
Weird behaviour of switch when the outer sequence completes but the last inner still has elements __EoT__ Hi all , I just ran into a behavior of switch ( as of RxJava 0.16.0 ) that I do n't think is correct . When the outer sequence completes , but the last inner sequence that the operator was subscribed to still has some elements , I 'd expect the operator to either - also complete immediately , or - pass on the rest of the elements in the inner sequence and complete when the inner sequence completes . However , the output of the code below makes me think that neither is the case with the current implementation . When I try to run `` ` scala import rx.lang.scala.Observable import rx.lang.scala.schedulers.NewThreadScheduler import scala.concurrent.duration import duration._ val source : Observable [ Observable [ String ] ] = Observable.items ( Observable.interval ( 200.milli , NewThreadScheduler ( ) ) .map ( `` a `` + _.toString ) .take ( 10 ) , Observable.interval ( 200.milli , NewThreadScheduler ( ) ) .map ( `` b `` + _.toString ) .take ( 10 ) ) .zip ( Observable.interval ( 500.milli , NewThreadScheduler ( ) ) )
Combine latest fix __EoT__ Fixes potential issues mentioned in # 613 Question : it emits a `` row '' while holding a lock . This ensures a FIFO behavior towards the client observer . Do we want such strong guarantee ?
NullPointerException in the 'toList ' operator __EoT__ The following code will throw a NullPointerException . `` ` java Observable.from ( ( String ) null ) .toList ( ) .toBlockingObservable ( ) .single ( ) ; `` ` < pre > Exception in thread `` main '' java.lang.NullPointerException at java.util.concurrent.ConcurrentLinkedQueue.checkNotNull ( ConcurrentLinkedQueue.java:807 ) at java.util.concurrent.ConcurrentLinkedQueue.offer ( ConcurrentLinkedQueue.java:326 ) at java.util.concurrent.ConcurrentLinkedQueue.add ( ConcurrentLinkedQueue.java:296 ) at rx.operators.OperationToObservableList $ ToObservableList $ 1.onNext ( OperationToObservableList.java:62 ) at rx.operators.OperationToObservableIterable $ ToObservableIterable.onSubscribe ( OperationToObservableIterable.java:46 ) at rx.Observable.subscribe ( Observable.java:236 ) at rx.operators.OperationToObservableList $ ToObservableList.onSubscribe ( OperationToObservableList.java:57 ) at rx.Observable.subscribe ( Observable.java:236 ) at rx.operators.OperationMaterialize $ MaterializeObservable.onSubscribe ( OperationMaterialize.java:57 ) at rx.Observable.subscribe ( Observable.java:236 ) at rx.operators.OperationToIterator.toIterator ( OperationToIterator.java:47 ) at rx.observables.BlockingObservable.getIterator ( BlockingObservable.java:172 ) at rx.observables.BlockingObservable $ 2.iterator ( BlockingObservable.java:353 ) at rx.observables.BlockingObservable._singleOrDefault ( BlockingObservable.java:66 ) at rx.observables.BlockingObservable.single ( BlockingObservable.java:278 ) at rx.Test.main ( Test.java:25 ) < /pre > The cause is ` rx.operators.OperationToObservableList ` https : //github.com/Netflix/RxJava/blob/069ae42843822b846d450b38a4aa5039182e121f/rxjava-core/src/main/java/rx/operators/OperationToObservableList.java # L58 uses ` ConcurrentLinkedQueue ` to cache the values but ` ConcurrentLinkedQueue ` rejects null value . Is ` ArrayList ` or ` LinkedList ` enough here ?
ReplaySubject emits items received after onError __EoT__ This snippet `` ` scala val sub = ReplaySubject [ Int ] ( ) sub.onNext ( 1 ) sub.onNext ( 2 ) sub.onError ( new Exception ( `` Kabloooy ! '' ) ) // Gets moved to after onNext ( 3 ) sub.onNext ( 3 ) sub.subscribe ( n = > println ( `` sub1 : `` + n ) , e = > println ( `` sub1 : `` + e.getMessage ) , ( ) = > println ( `` sub1 : completed '' ) ) println ( `` done '' ) `` ` outputs `` ` sub1 : 1 sub1 : 2 sub1 : 3 sub1 : Kabloooy ! done `` ` but I would expect `` ` sub1 : 1 sub1 : 2 sub1 : Kabloooy ! done `` ` since items received after onError should not be emitted by ReplaySubject . ( Thank you Dragisa Krsmanovic for pointing this out )
Unsubscribe from takeLast __EoT__ When I unsubscribe from an Observable which emits the last value of an infinite stream , I expect to get no element . This is the case in C # : `` ` cs var o = Observable.Interval ( TimeSpan.FromMilliseconds ( 200 ) ) .TakeLast ( 1 ) ; var s = o.Subscribe ( i = > Console.WriteLine ( `` Interesting : Infinity = `` + i ) ) ; Thread.Sleep ( 1000 ) ; s.Dispose ( ) ; Thread.Sleep ( 1000 ) ; Console.WriteLine ( `` Press any key ... '' ) ; Console.ReadKey ( ) ; `` ` outputs `` ` Press any key ... `` ` But with RxJava , it 's different ( note that Scala 's takeRight calls Java 's takeLast ) : `` ` scala val o = Observable.interval ( 200 millis ) .takeRight ( 1 ) val s = o.subscribe ( i = > println ( s '' Interesting : Infinity = $ i '' ) ) Thread.sleep ( 1000 ) s.unsubscribe ( ) Thread.sleep ( 1000 ) `` ` outputs `` ` Interesting : Infinity = 4 `` `
Operator : Join __EoT__ http : //msdn.microsoft.com/en-us/library/hh229750 ( v=vs.103 ) .aspx
Operator : And __EoT__ http : //msdn.microsoft.com/en-us/library/hh229153 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229905 ( v=vs.103 ) .aspx
Unsubscribing multiple times __EoT__ Quoting from an email by @ headinthebox , to make sure we do n't forget about this issue : > Another bug in RxJava/Scala > > When you create a new subscription it does not remember that is is already disposed > > In scala ( using trivial companion object ) > > Val s = Subscription { println ( “ hi ” ) } > s.unsubscribe ( ) > s.unsubscribe ( ) > > prints “ hi ” twice , in .NET only once . > > In the course I will tell the students it prints only once The issue is already present in Java : `` ` java public static void main ( String [ ] args ) { Subscription s = Subscriptions.create ( new Action0 ( ) { public void call ( ) { System.out.println ( `` hi '' ) ; } } ) ; s.unsubscribe ( ) ; s.unsubscribe ( ) ; } `` ` also prints `` hi '' twice . Let 's fix this first in Java , and then add a companion object ` Subscription ` to RxScala .
Flaky unit tests __EoT__ It looks like there are some flaky unit tests : On my machine , this test failed today ( but only once ) : `` ` rx.operators.OperationNext $ UnitTest.testOnErrorViaHasNext `` ` On cloudbees , these tests seem to be flaky : `` ` Build # 278 : rx.concurrency.CurrentThreadScheduler $ UnitTest.testSequenceOfDelayedActions Build # 276 : rx.concurrency.CurrentThreadScheduler $ UnitTest.testSequenceOfDelayedActions Build # 237 : rx.concurrency.CurrentThreadScheduler $ UnitTest.testSequenceOfDelayedActions Build # 185 : rx.concurrency.CurrentThreadScheduler $ UnitTest.testSequenceOfDelayedActions Build # 251 : rx.concurrency.TestSchedulers.testSchedulingWithDueTime Build # 277 : rx.operators.OperationConcat $ UnitTest.testConcatConcurrentWithInfinity `` ` Edit : also `` ` Build # 290 : rx.operators.OperationConcat $ UnitTest.testConcatConcurrentWithInfinity `` `
Exception not properly propagated __EoT__ Given `` ` java static Func1 < Integer , Integer > f = new Func1 < Integer , Integer > ( ) { public Integer call ( Integer arg0 ) { throw new RuntimeException ( `` the error in f '' ) ; } } ; `` ` when I run this : `` ` java public static void main ( String [ ] args ) { System.out.println ( `` started '' ) ; System.out.println ( Observable.from ( 1 ) .map ( f ) .toBlockingObservable ( ) .single ( ) ) ; System.out.println ( `` done '' ) ; } `` ` I get ( as expected ) this output : `` ` started Exception in thread `` main '' java.lang.RuntimeException : the error in f at RxJavaHelloWorld $ 2.call ( RxJavaHelloWorld.java:226 ) at [ blah blah ... ] at RxJavaHelloWorld.main ( RxJavaHelloWorld.java:240 ) `` ` However , when I observe it on a different thread : `` ` java public static void main ( String [ ] args ) { System.out.println ( `` started '' ) ; System.out.println ( Observable.from ( 1 ) .observeOn ( Schedulers.threadPoolForComputation ( ) ) .map ( f ) .toBlockingObservable
buffer ( ) using TimeAndSizeBasedChunks incorrectly forces thread into interrupted state __EoT__ In TimeAndSizeBasedChunks.emitChunk , if emitChunk is called from the scheduled action in createChunk ( i.e from the timeout thread ) , calling subscription.unsubscribe ( ) ends up calling cancel ( ) on the future which sets the thread 's interrupted state to true . This state has an adverse effect on any blocking call performed in that thread .
Operator : ElementAt and ElementAtOrDefault __EoT__ http : //msdn.microsoft.com/en-us/library/hh229725 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229845 ( v=vs.103 ) .aspx
Implemented the 'any ' operator __EoT__ This implements the operator ` Any ` from # 24 in all two variants . However , I encountered two problems . Updated : the online document http : //msdn.microsoft.com/en-us/library/hh211993 ( v=vs.103 ) .aspx is wrong . See my later discussion . Another question is if I add the ` any ` method to ` rx.Observable < T > ` , some unit tests will fail as the method ` any ` in ` rx.Observable < T > ` overrides the method ` org.mockito.Matchers.any ( java.lang.Class < T > ) ` in some unit tests ( e.g. , ` rx.subjects.ReplaySubject < T > ` ) . Do I need to use another method name , or just modify the unit tests ? Now the ` any ` methods in ` rx.Observable < T > ` are commented out . Thanks .
Operator : Average __EoT__ http : //msdn.microsoft.com/en-us/library/hh211950 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229389 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh211732 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh211857 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh211744 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh211770 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh212005 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229502 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229070 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229012 ( v=vs.103 ) .aspx
Operator : Sum __EoT__ http : //msdn.microsoft.com/en-us/library/hh212105 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh211904 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh212004 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh212033 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229430 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229456 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229627 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229323 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229683 ( v=vs.103 ) .aspx http : //msdn.microsoft.com/en-us/library/hh229319 ( v=vs.103 ) .aspx
Operator : Aggregate __EoT__ Add aggregate ( or alias to reduce ? ) http : //msdn.microsoft.com/en-us/library/hh229154 ( v=vs.103 ) .aspx
Interval __EoT__ I have attempted to implement the `` Interval '' operator ( # 55 ) here . As far as I can see , it seems to work . This is based on the quite fresh work on schedulers . It does n't work with the ` currentThread ` or ` newThread ` schedulers , I guess due to the simple ` SleepingAction ` . It does work with a ` ScheduledExecutorService ` , though . For testing this conveniently , I also wrote a test scheduler with adjustable time . Looking forward to any review comments .
Operator : Finally __EoT__ http : //msdn.microsoft.com/en-us/library/hh212133 ( v=vs.103 ) .aspx
Update grade plugin and Kotlin ver __EoT__
Add NonNull annotation and use requireActivity __EoT__ See # 483 and https : //github.com/permissions-dispatcher/PermissionsDispatcher/pull/511 # issuecomment-420142755
Update gradle.properties for snapshot __EoT__
Add note for download section . __EoT__
Add note for Xiaomi support __EoT__ ref : https : //github.com/permissions-dispatcher/PermissionsDispatcher/issues/386 # issuecomment-418680789 😇
Clean forgotten Todo __EoT__ Clean forgotten Todo in build.graddle
Update to latest KotlinPoet Version __EoT__ - Updated Kotlin from 1.1.51 to 1.2.0 - Updated Gradle from 3.0.0 to 3.0.1 - Updated KotlinPoet from 0.6-snapshot to 0.6 [ Update to KotlinPoet 0.6 thanks to @ mannodermaus Job ] ( https : //github.com/permissions-dispatcher/PermissionsDispatcher/issues/389 ) [ Fix my issue with outdated KotlinPoet version used ] ( https : //github.com/permissions-dispatcher/PermissionsDispatcher/issues/415 )
nullable params with Kotlin __EoT__ # # Overview When the function annotated with ` @ NeedsPermission ` has a nullable parameter , the generated function in the dispatcher have a non nullable one instead . # # # Expected The ` **WithPermissionCheck ` generated method should use a nullable parameter too # # # Actual The ` **WithPermissionCheck ` use a non-nullable parameter # # Environment - v3.0.1 # # Reproducible steps `` ` kotlin //Function in Activity @ NeedsPermission ( Manifest.permission.ACCESS_COARSE_LOCATION ) internal fun functionWithNullableParameter ( string : String ? ) { // ... } //Generated function in the PermissionsDispatcher fun HomeActivity.functionWithNullableParameterWithPermissionCheck ( string : String ) { // ... } `` `
Remove a workaround for targetSdkVersion < 23 __EoT__ # # Overview - Currently we have a workaround that checks ` PermissionUtils.getTargetSdkVersion ( target ) < 23 ` to make sure that the library works under Marshmallow device . - This feature is requested by a few user initially , but it 's over one and a half year since the library came out so it 's okay to remove this workaround to avoid unnecessary check for most of user . `` ` java static void onRequestPermissionsResult ( MainActivity target , int requestCode , int [ ] grantResults ) { switch ( requestCode ) { case REQUEST_SHOWCAMERA : if ( PermissionUtils.getTargetSdkVersion ( target ) < 23 & & ! PermissionUtils.hasSelfPermissions ( target , PERMISSION_SHOWCAMERA ) ) { target.onCameraDenied ( ) ; return ; } if ( PermissionUtils.verifyPermissions ( grantResults ) ) { target.showCamera ( ) ; } else { if ( ! PermissionUtils.shouldShowRequestPermissionRationale ( target , PERMISSION_SHOWCAMERA ) ) { target.onCameraNeverAskAgain ( ) ; } else { target.onCameraDenied ( ) ; } } break ; default : break ; } } `` `
Make android.app.Fragment handling way more explicitly __EoT__ # # Overview Now we have the problem ( https : //github.com/hotchemi/PermissionsDispatcher/issues/279 ) that is caused by ` optional-base ` plugin and new Gradle . And I also found out that there 's an unresolvable case like below with current approach : - When user want to use both ` v4.Fragment ` and normal ` Fragment ` in the same app with v13 support library dependency To avoid that I 'd like to propose the following interface change . - Remove optional-base gradle plugin - Add v13 argument in ` @ RuntimePermission ` , if its value is true the library generates a code with ` FragmentCompat ` . `` ` java @ Target ( ElementType.TYPE ) @ Retention ( RetentionPolicy.CLASS ) public @ interface RuntimePermissions { boolean v13 ( ) default false ; } `` ` I 'd say that by changing the way of dealing with Fragment explicitly we 'll be able to avoid unexpected bugs eternally and make code much more declarative . What do you think ? @ aurae @ shiraji
Update gradle version to 2.14 . __EoT__
Remove redundant public modifiers . __EoT__
Update kotlin 1.0.3 __EoT__ I think we need to update kotlin plugin as well .
Update kotlin to 1.0.2 . __EoT__ I found a bug with Kotlin 1.0.3 so downgrade to 1.0.2. https : //youtrack.jetbrains.com/issue/KT-13602 # # Change - Update kotlin to 1.0.2 . - Update JavaPoet to 1.0.7 .
Simplify constants a little bit . __EoT__
Endorse AA plugin in README __EoT__ This commit also fixes a typo ( missing s ) . resolves # 168
Add ProGuard support __EoT__ Close # 172 I made draft for README . Feel free to comment on that !
Add target SDK version check for special permissions __EoT__ Close # 147
Prepare for 2.1.2 . __EoT__
Fix lint onRequestPermissionsResult __EoT__ Fix # 124 Fix # 130
Duplicated value exception __EoT__ I have these functions : @ NeedsPermission ( { Manifest.permission.CAMERA , Manifest.permission.WRITE_EXTERNAL_STORAGE } ) public void showCamera ( ) { } @ OnPermissionDenied ( { Manifest.permission.CAMERA , Manifest.permission.WRITE_EXTERNAL_STORAGE } ) void onShowCameraDenied ( ) { } `` ` @ OnNeverAskAgain ( { Manifest.permission.CAMERA , Manifest.permission.WRITE_EXTERNAL_STORAGE } ) void onShowCameraNeverAsk ( ) { } @ NeedsPermission ( Manifest.permission.WRITE_EXTERNAL_STORAGE ) void showGetStorage ( ) { } @ OnPermissionDenied ( Manifest.permission.WRITE_EXTERNAL_STORAGE ) void onGetStorageDenied ( ) { } @ OnNeverAskAgain ( Manifest.permission.WRITE_EXTERNAL_STORAGE ) void onGetStorageNeverAsk ( ) { } `` ` -- - These Functions to show camera and show gallery picker As you know camera app needs to permissions ( Camera , Storage ) , and gallery app only need storage permission . In three first functions to manage with camera permissions , and the other function to manage gallery permission The Bug is : You provide me to set multiple permission with camera and storage in NeedsPermission annotation , but you prevent me to set them in OnPermissionDenied and OnNeverAskAgain annotations . This is an error : Error : Execution failed for task ' : app : compileStagingDebugJavaWithJavac ' . > permissions.dispatcher.processor.exception.DuplicatedValueException : [ android.permission.WRITE_EXTERNAL_STORAGE ] is
Duplicated value exception __EoT__ I have these functions : @ NeedsPermission ( { Manifest.permission.CAMERA , Manifest.permission.WRITE_EXTERNAL_STORAGE } ) public void showCamera ( ) { } @ OnPermissionDenied ( { Manifest.permission.CAMERA , Manifest.permission.WRITE_EXTERNAL_STORAGE } ) void onShowCameraDenied ( ) { } `` ` @ OnNeverAskAgain ( { Manifest.permission.CAMERA , Manifest.permission.WRITE_EXTERNAL_STORAGE } ) void onShowCameraNeverAsk ( ) { } @ NeedsPermission ( Manifest.permission.WRITE_EXTERNAL_STORAGE ) void showGetStorage ( ) { } @ OnPermissionDenied ( Manifest.permission.WRITE_EXTERNAL_STORAGE ) void onGetStorageDenied ( ) { } @ OnNeverAskAgain ( Manifest.permission.WRITE_EXTERNAL_STORAGE ) void onGetStorageNeverAsk ( ) { } `` ` -- - These Functions to show camera and show gallery picker As you know camera app needs to permissions ( Camera , Storage ) , and gallery app only need storage permission . In three first functions to manage with camera permissions , and the other function to manage gallery permission The Bug is : You provide me to set multiple permission with camera and storage in NeedsPermission annotation , but you prevent me to set them in OnPermissionDenied and OnNeverAskAgain annotations . This is an error : Error : Execution failed for task ' : app : compileStagingDebugJavaWithJavac ' . > permissions.dispatcher.processor.exception.DuplicatedValueException : [ android.permission.WRITE_EXTERNAL_STORAGE ] is
READ_EXTERNAL_STORAGE broken on API 15 device __EoT__ This will also apply to other permissions that were only introduced in newer Android versions than the app is running on . A method in my app requires READ_EXTERNAL_STORAGE permission , but this permission was only introduced in API 16 . When running the generated ... WithCheck ( ) method on an API 15 device , PermissionsUtils.hasSelfPermissions will never return true ( since the READ_EXTERNAL_STORAGE permission does n't exist ) , and so the target method will never get called - even though the app will run fine without that permission . PermissionsDispatcher acts as if the permission has been denied . I 'm working around it with `` ` java if ( Build.VERSION.SDK_INT > = Build.VERSION_CODES.M ) { MyActivityPermissionsDispatcher.doThingWithCheck ( this ) ; } else { doThing ( ) ; } `` ` but that feels broken and it would be much cleaner if I did n't have to .
READ_EXTERNAL_STORAGE broken on API 15 device __EoT__ This will also apply to other permissions that were only introduced in newer Android versions than the app is running on . A method in my app requires READ_EXTERNAL_STORAGE permission , but this permission was only introduced in API 16 . When running the generated ... WithCheck ( ) method on an API 15 device , PermissionsUtils.hasSelfPermissions will never return true ( since the READ_EXTERNAL_STORAGE permission does n't exist ) , and so the target method will never get called - even though the app will run fine without that permission . PermissionsDispatcher acts as if the permission has been denied . I 'm working around it with `` ` java if ( Build.VERSION.SDK_INT > = Build.VERSION_CODES.M ) { MyActivityPermissionsDispatcher.doThingWithCheck ( this ) ; } else { doThing ( ) ; } `` ` but that feels broken and it would be much cleaner if I did n't have to .
Allow parameters __EoT__ It would be nice if it could allow parameters for the function that needs permission . For example , if the function is @ NeedsPermission ( the permission ) void myFunc ( Object aParamater ) { ... could be called by MyActivityPermissionDispatcher.myFuncWithCheck ( this , theObjectParameter ) ; Btw , any ETA on version 2.0 ?
Allow multiple methods to use same @ NeedsPermission ( and avoid DuplicatedValueException ) __EoT__ Say that you have multiple methods that each require the identical permission to , say , write to external storage . Because you do n't know what the user is going to do , you want to make sure that if _either_ method is called , the appropriate permissions is checked and a request is made to the user ... So -- - you annotate with ` @ NeedsPermission ( `` android.permission.WRITE_EXTERNAL_STORAGE '' ) ` on each . But now , you get one of these : ` Error : Execution failed for task ' : compileDebugJavaWithJavac ' . > permissions.dispatcher.processor.exceptions.DuplicatedValueException : [ android.permission.WRITE_EXTERNAL_STORAGE ] is duplicated in interface permissions.dispatcher.NeedsPermission ` Unfortunately , the documentation for the new runtime permissions kind of assume that there 's only one occasion in which you 'll be asking for a permission -- you can set various [ request codes ] ( https : //github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java # L88-L96 ) in ` @ onRequestPermissionResult ` -- supposedly one per permission , right ? But in the above case you 'd have to set them to account for each _method_ that might be
Add Permission Denied handling __EoT__ At the moment , PermissionsDispatcher 's generated code for ` onRequestPermissionsResult ` verifies the grant results and invokes the positive callback annotated with ` @ NeedsPermission ( s ) ` in case the permissions were granted . How about we add support for negative callbacks , accompanied by an annotation named ` @ DeniedPermission ( s ) ` , invoked when the user denies a requested Runtime Permission ? This would be different from ` @ ShowsRationale ( s ) ` , which triggers an action at the time the permission is already being asked for . Here 's an example I threw together : `` ` java @ RuntimePermissions public class MyActivity extends AppCompatActivity { // The usual constants and members ( ... ) @ Override public void onCreate ( Bundle savedInstanceState ) { // Some other setup code ( ... ) // Add a click listener to some button , initializing a `` dangerous action '' requiring a Runtime Permission someButton.setOnClickListener ( v - > MyActivityPermissionsDispatcher.setupCameraWithCheck ( this ) ) ; } @ NeedsPermission ( Manifest.permission.CAMERA ) void setupCamera ( ) { // Perform `` dangerous action '' , now that permission is
Optimize InMemoryHashAggregationBuilder.hashSortedGroupIds ( ) __EoT__ This method boxes one int for every group , which could be very expensive when spilling many groups . It should be optimized to avoid the boxing , but doing a sort on ` int ` s instead of ` Integer ` s
QUARTER ( ) function does n't work correctly __EoT__ For some reason , quarter ( ) returns : 1/1 through 3/31 = 1 4/1 through 7/31 = 2 8/1 through 11/30 = 3 12/1 through 12/31 = 4 It should be : 1/1 through 3/31 = 1 4/1 through 6/30 = 2 7/1 through 9/30 = 3 10/1 through 12/31 = 4
添加自定义字体资源文件，打补丁包失败 __EoT__ Error : Execution failed for task ' : app : tinkerProcessReleaseResourceId ' . > com.tencent.tinker.build.aapt.AaptUtil $ AaptUtilException : /Users/apple/AndroidStudioProjects/Jian/app/build/intermediates/res/merged/release/font is not a valid resource sub-directory . 打补丁包的时候提示这个信息，工程里包含了自定义字体的资源文件夹 ! [ image ] ( https : //user-images.githubusercontent.com/13451082/35558659-9e1541f6-05e3-11e8-8840-6fbd9422776b.png ) Tinker版本 1.9.1 gradle版本 3.0.1 系统 Mac
demo中gradlew -PTINKER_ENABLE=false 传参无效，当做字符处理了 __EoT__ 异常类型：demo中gradlew -PTINKER_ENABLE=false 传参无效，当做字符处理了 tinker版本：1.9.2 gradle版本：如:2.10 是否使用热更新SDK： TinkerPatch SDK 系统：如 : Mac、Windows def buildWithTinker ( ) { return hasProperty ( `` TINKER_ENABLE '' ) ? Boolean.parseBoolean ( TINKER_ENABLE ) : ext.tinkerEnabled } 应该这样写，加个强转
fix ( loader ) : modify the method we check patch signature . __EoT__ Do not invoke openssl verify , only check the hash of publicKey 's signature . fix # 555 ( Ca n't verify patch that is signed by keystore providing by WoSign CA )
[ bugfix ] fix MissingFormatArgumentException __EoT__ fix MissingFormatArgumentException when format string contains ' % ' in the format string . fix # 540 增加判断了不定参数的长度，已经重构了参数名。
bugfix : in android o preview , the type of nativeLibraryPathElements ha… __EoT__ …s change to NativeLibraryElement [ ] https : //android.googlesource.com/platform/libcore/+/o-preview/dalvik/src/main/java/dalvik/system/DexPathList.java # 102
[ enhancement ] add function that specifies the output folder for tinker patch result . __EoT__
fix mapping bug __EoT__ 修复关于类的处理bug 混淆的类之前保留的是当前的混淆名称 ，应该保留之前的名称
大神这个兼容Java1.8吗 __EoT__ 使用这个 compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } 然后开启 jackOptions { enabled = true } 就会报错，Application类不能在运行时生成，所以找不到这个类 ! [ image ] ( https : //cloud.githubusercontent.com/assets/20541921/25111651/d4ce8808-241e-11e7-9799-e06628b58de1.png ) ! [ image ] ( https : //cloud.githubusercontent.com/assets/20541921/25111667/e78446fe-241e-11e7-8aaf-a0a6eb5f02cf.png )
Update merge_mapping.py __EoT__ fix spelling mistake
1. add new interface getBaseContext for application __EoT__
java.lang.IllegalAccessError : tried to access method net.dongliu.apk.parser.ApkParser.parseResourceTable ( ) V from class com.tencent.tinker.build.apkparser.AndroidParser __EoT__ Analyze old and new apk files : old apk : app.hx-fast-debug.apk , size=13775890 , md5=0c49056e441dec39a2f6c59ebfe8ac16 new apk : app.hx-fast-debug.apk , size=13940072 , md5=665f95e57f1cd48a9f3079f3eec0b690 UnZipping apk to F : \JBWPLAY\Monking-Android\app.hx\build\outputs\tinkerPatch\fast\debug\app.hx-fast-debug-old UnZipping apk to F : \JBWPLAY\Monking-Android\app.hx\build\outputs\tinkerPatch\fast\debug\app.hx-fast-debug-new Check for loader classes in dex : classes.dex Check for loader classes in dex : classes2.dex Found add resource : res/drawable-hdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png Found add resource : res/drawable-hdpi-v4/abc_btn_check_to_on_mtrl_000.png Found add resource : res/drawable-hdpi-v4/abc_btn_check_to_on_mtrl_015.png Found add resource : res/drawable-hdpi-v4/abc_btn_radio_to_on_mtrl_000.png Found add resource : res/drawable-hdpi-v4/abc_btn_radio_to_on_mtrl_015.png Found add resource : res/drawable-hdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png Found add resource : res/drawable-hdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png Found add resource : res/drawable-hdpi-v4/abc_cab_background_top_mtrl_alpha.9.png Found add resource : res/drawable-hdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png Found add resource : res/drawable-hdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png Found add resource : res/drawable-hdpi-v4/abc_ic_menu_cut_mtrl_alpha.png Found add resource : res/drawable-hdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png Found add resource : res/drawable-hdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png Found add resource : res/drawable-hdpi-v4/abc_ic_menu_share_mtrl_alpha.png Found add resource : res/drawable-hdpi-v4/abc_ic_star_black_16dp.png Found add resource : res/drawable-hdpi-v4/abc_ic_star_black_36dp.png Found add resource : res/drawable-hdpi-v4/abc_ic_star_black_48dp.png Found add resource : res/drawable-hdpi-v4/abc_ic_star_half_black_16dp.png Found add resource : res/drawable-hdpi-v4/abc_ic_star_half_black_36dp.png Found add resource : res/drawable-hdpi-v4/abc_ic_star_half_black_48dp.png Found add resource : res/drawable-hdpi-v4/abc_list_divider_mtrl_alpha.9.png Found add resource : res/drawable-hdpi-v4/abc_list_focused_holo.9.png Found add resource : res/drawable-hdpi-v4/abc_list_longpressed_holo.9.png Found add resource : res/drawable-hdpi-v4/abc_list_pressed_holo_dark.9.png Found add resource : res/drawable-hdpi-v4/abc_list_pressed_holo_light.9.png Found add resource : res/drawable-hdpi-v4/abc_list_selector_disabled_holo_dark.9.png Found add resource : res/drawable-hdpi-v4/abc_list_selector_disabled_holo_light.9.png
fix java heap out of memory when dex __EoT__ fix : 当dex过大时，直接使用dx脚本会报类似 java heap out of memory的错误。
deal with proguard warning __EoT__ 解决proguard warning的另一个方案
Increase ImmutableDexTransform 's compatibility __EoT__
immutable dex __EoT__ 新的apk中class在dex中的顺序 参照旧的 apk中class在dex中的顺序，以此减少dex diff包大小。
fixbug : 当忽略assets中的全部资源时，防止忽略tinker添加测试资源 . __EoT__
Correct spelling mistake __EoT__ Correct spelling mistake
资源patch删除资源 打进resources_out.zip的小bug __EoT__ 在学习资源patch过程中发现，新apk删除资源后打patch，最后还是会copy到resources_out.zip，看源码应该是想过滤掉删除资源不做copy，测试发现应该是DeletedResVisitor在deletedFiles.add时没有对路径进行转义。
Gradle编译1.7.0过程中类重复：java.util.zip.ZipException : duplicate entry : META-INF/services/javax.annotation.processing.Processor __EoT__ 集成完1.6.2到项目后，测试成功； 修改1.6.2.为1.7.0 -- 》gradle clean aR -- > build过程中报如下错误： : app : prepareComGoogleAndroidGmsPlayServicesAppinvite920Library : app : prepareComGoogleAndroidGmsPlayServicesAuth920Library : app : prepareComGoogleAndroidGmsPlayServicesAuthBase920Library : app : prepareComGoogleAndroidGmsPlayServicesBase920Library : app : prepareComGoogleAndroidGmsPlayServicesBasement920Library : app : prepareComGoogleAndroidGmsPlayServicesCast920Library : app : prepareComGoogleAndroidGmsPlayServicesCastFramework920Library : app : prepareComGoogleAndroidGmsPlayServicesClearcut920Library : app : prepareComGoogleAndroidGmsPlayServicesContextmanager920Library : app : prepareComGoogleAndroidGmsPlayServicesDrive920Library : app : prepareComGoogleAndroidGmsPlayServicesFitness920Library : app : prepareComGoogleAndroidGmsPlayServicesGames920Library : app : prepareComGoogleAndroidGmsPlayServicesGass920Library : app : prepareComGoogleAndroidGmsPlayServicesGcm920Library : app : prepareComGoogleAndroidGmsPlayServicesIdentity920Library : app : prepareComGoogleAndroidGmsPlayServicesIid920Library : app : prepareComGoogleAndroidGmsPlayServicesLocation920Library : app : prepareComGoogleAndroidGmsPlayServicesMaps920Library : app : prepareComGoogleAndroidGmsPlayServicesNearby920Library : app : prepareComGoogleAndroidGmsPlayServicesPanorama920Library : app : prepareComGoogleAndroidGmsPlayServicesPlaces920Library : app : prepareComGoogleAndroidGmsPlayServicesPlus920Library : app : prepareComGoogleAndroidGmsPlayServicesSafetynet920Library : app : prepareComGoogleAndroidGmsPlayServicesTagmanager920Library : app : prepareComGoogleAndroidGmsPlayServicesTagmanagerApi920Library : app : prepareComGoogleAndroidGmsPlayServicesTasks920Library : app : prepareComGoogleAndroidGmsPlayServicesVision920Library : app : prepareComGoogleAndroidGmsPlayServicesWallet920Library : app : prepareComGoogleAndroidGmsPlayServicesWearable920Library : app : prepareComGoogleFirebaseFirebaseAnalytics920Library : app : prepareComGoogleFirebaseFirebaseAnalyticsImpl920Library : app : prepareComGoogleFirebaseFirebaseAuth920Library : app : prepareComGoogleFirebaseFirebaseAuthCommon920Library : app : prepareComGoogleFirebaseFirebaseAuthModule920Library : app : prepareComGoogleFirebaseFirebaseCommon920Library : app : prepareComGoogleFirebaseFirebaseConfig920Library : app : prepareComGoogleFirebaseFirebaseCrash920Library : app : prepareComGoogleFirebaseFirebaseDatabase920Library : app : prepareComGoogleFirebaseFirebaseDatabaseConnection920Library : app : prepareComGoogleFirebaseFirebaseIid920Library : app : prepareComGoogleFirebaseFirebaseMessaging920Library : app : prepareComGoogleFirebaseFirebaseStorage920Library : app : prepareComGoogleFirebaseFirebaseStorageCommon920Library : app : prepareComMakeramenRoundedimageview221Library : app : prepareComMeiyouAd_sdk202TestSNAPSHOTLibrary : app : prepareComMeiyouAppCommon202TestSNAPSHOTLibrary
[ tinker sample ] __EoT__ copy all variants apk to bakApk
Public symbol string/com_crashlytics_android_build_id declared here is not defined . __EoT__ 项目使用了twitter开源的的Fabric `` ` java apply plugin : 'io.fabric' `` ` gradle build的时候出现以下错误 : `` ` bash tinker gen resource public.xml in build/intermediates/tinker_intermediates/public.xml tinker gen resource idx.xml in build/intermediates/tinker_intermediates/idx.xml : app : processDebugResources /tinker/tinker-sample-android/app/build/intermediates/res/merged/debug/values/public.xml Error : ( 473 ) Public symbol string/com_crashlytics_android_build_id declared here is not defined . Error : Execution failed for task ' : app : processDebugResources ' . `` `
Public symbol string/com_crashlytics_android_build_id declared here is not defined . __EoT__ 项目使用了twitter开源的的Fabric `` ` java apply plugin : 'io.fabric' `` ` gradle build的时候出现以下错误 : `` ` bash tinker gen resource public.xml in build/intermediates/tinker_intermediates/public.xml tinker gen resource idx.xml in build/intermediates/tinker_intermediates/idx.xml : app : processDebugResources /tinker/tinker-sample-android/app/build/intermediates/res/merged/debug/values/public.xml Error : ( 473 ) Public symbol string/com_crashlytics_android_build_id declared here is not defined . Error : Execution failed for task ' : app : processDebugResources ' . `` `
Enforce limitations on ILM policy names __EoT__ Enforces restrictions on ILM policy names to ensure we do n't accept policy names the system ca n't handle , or may reserve for future use . As of now , the limitations are : 1 . Length < 255 bytes 2 . Can not start with ` _ ` 3 . Can not contain ` , ` ( as we allow comma-separated names in e.g . ` GET _ilm/one , two ` - currently you can ` PUT ` , but not ` GET ` a policy named ` contains , comma ` as far as I can tell , although other special characters work fine ) 4 . Can not contain spaces . Resolves # 34928 -- - ~~For consistency , ILM policy names must now follow the same rules as index names.~~ ~~I ended up copying most of the logic , as there was a little bit of index-specific code in the original , and also it felt weird to call intoMetaDataCreateIndexService from here . If anyone strongly objects it would be possible to do this without any duplication , though , with only minor tweaks to the index-name checking
[ CCR ] Validate remote cluster license as part of put auto follow pattern api call __EoT__ in addition of validation that when auto follow coordinator starts auto following indices in the leader cluster .
DOCS Add audit ignore policy settings to auditing reference __EoT__ Adds the logfile audit ignore policy settings synopsis to the Auditing Reference page .
[ CCR ] Get all auto follow patterns and no auto follow metadata __EoT__ Return empty response when querying all auto follow patterns , but there is no auto follow metadata .
SQL : Introduce IsNull node to simplify expressions __EoT__ Add ` IsNull ` node in parser to simplify expressions so that ` < value > IS NULL ` is no longer translated internally to ` NOT ( < value > IS NOT NULL ) ` Closes : # 34876
DOCS Auditing search queries __EoT__ This documents how to include the search queries in the audit log . There is a catch , that even if enabling ` emit_request_body ` , which should output queries included in request bodies , search queries were not output because , implicitly , no REST layer audit event type was included . This folk knowledge is herein imprinted .
Add trace log of the request for the query and fetch phases __EoT__ This change adds a logger for the query and fetch phases that prints all requests before their execution at the trace level . This will help debugging cases where an issue occurs during the execution since only completed queries are logged by the slow logs .
DOCS : Add SecurityExtension breaking change __EoT__ We changed the way realm settings are defined , and this affects custom realms in SecurityExtensions . This change adds those details to the breaking changes docs . Relates : # 30241
Make possible to enforce path-style access method to buckets in S3 client settings __EoT__ Hi , We use [ Minio ] ( https : //www.minio.io/ ) as an ES snapshots repository and it would be easier if it was possible to control the method ( DNS- or Path-style ) used by AWS S3 client inside the repository-S3 plugin to access the buckets . The ES repository-S3 plugin does n't specify pathStyle setting when instantiates the AWS S3 client , so the client auto-detects that DNS-style access method should be used . Minio supports DNS-style access method , but in our case it 's impossible to maintain DNS-entries for the buckets . The solution proposed in # 30752 to use IP-address as an endpoint does n't suit us too for number of reasons ( at least it 's not an appropriate solution when Minio is clustered ) . The lacking setting actually already existed , but was deprecated by # 24143 and removed by # 24445 during the reorganisation of repository/client settings .
Fix TcpTransport compression test __EoT__ This commit fixes an assertion in the TcpTransportTests compression test .
SQL : Handle null literal for AND and OR in ` WHERE ` __EoT__ Eliminate ` null ` literal in the ` Optimizer ` where we know that we are in the WHERE clause so we can evaluate NULL to false . Now the ` null ` literal is not reaching the ` QueryTranslator ` . Fixes : # 35088
[ DOCS ] Cleans up monitoring configuration steps __EoT__ This PR is related to https : //github.com/elastic/stack-docs/pull/138 and https : //github.com/elastic/kibana/pull/24881 It adds information that previously existed in https : //www.elastic.co/guide/en/elastic-stack-overview/master/monitoring-production.html and removes information that is more appropriate for the Kibana documentation . It also cleans up some of the `` X-Pack '' terminology .
Painless Context Doc : Add field context example __EoT__ relates to # 34829
Add more detailed OS name on Linux __EoT__ Today our OS information returned in node stats only returns a high-level name of the OS ( e.g. , `` Linux '' ) . Yet , for some uses this is too high-level and knowing at a finer level of granularity the underlying OS can be useful . This commit extracts the pretty name on Linux from /etc/os-release . This pretty name usually includes the Linux vendor and the Linux vendor version number ( e.g. , Fedora 28 ) .
HLRest : refactor put_user to utilize ` User ` object __EoT__ This follows https : //github.com/elastic/elasticsearch/pull/33552 , when the ` _authenticate ` API added a new ` User ` object for the API 's response . This changes the ` put_user ` API to also employ a ` User ` object in the request . The ` User ` object changed slightly . A bug with ` put_user ` only putting/updating enabled ( but not disabled ) users has been fixed . CC @ elastic/es-security
Make limit on number of expanded fields configurable __EoT__ Currently we introduced a hard limit of 1024 to the number of fields a query can be expanded to in # 26541 . Instead of using a hard limit , we should make this configurable . This change removes the hard limit check and uses the existing ` max_clause_count ` setting instead . Closes # 34778
[ Docs ] Add painless context details for bucket_selector __EoT__ Adds docs for ` bucket_selector ` context , including example and corresponding doc test Similar to the ` bucket_script ` PR , I opted to only test this through the doc testing mechanism since the script itself is trivial . Related to # 34829
[ Rollup ] improve handling of failures on first search __EoT__ Improve error handling in the Indexer if an exception occurs ~during saving state and/or~ during the very 1st retrieval ( query execution ) *Notes* - Tagging this as Rollup , because roolup is the only user of this code at the moment . - I am not aware of any reported bugs in the wild , the 2 problems have been found as part reading the code and re-using it . So severity seems low , but I still classify this as ` bug ` /cc @ jimczi @ polyfractal
[ CCR ] Rename leaderClient variables and parameters to remoteClient __EoT__
Logfile auditing settings remove after deprecation __EoT__ Follow-up of https : //github.com/elastic/elasticsearch/pull/34475 # pullrequestreview-165208224 Removes ` .prefix ` deprecated settings for the logfile auditing and states so in the migrate asciidoc .
Section header preceded by blank line __EoT__ This PR updates the documentation to insert a blank line before the section header , so that the asciidoc renders correctly .
Fixes fast vector highlighter docs per issue # 24318 . __EoT__ The ` fvh ` highlighter does not support span queries . This fix updates the docs to add a warning stating the lack of span query support for ` fvh ` . Fixes # 24318
[ ML ] Prevent notifications being created on deletion of a non existent job __EoT__ If the job does not exist return a 404 immediately rather than creating audit messages about failing to delete a job that is not there . Fixes a bug introduced in # 34058 ( 6.5.0 ) Closes # 35336
[ CCR ] Auto follow Coordinator fetch cluster state in system context __EoT__ Auto follow Coordinator should fetch the leader cluster state using system context .
Preserve ` format ` when aggregation contains unmapped date fields __EoT__ Currently when aggregating on an unmapped date field ( e.g . when using a ` date_histogram ` ) we do n't preserve the aggregations ` format ` setting but instead use the default format . This can lead to loosing the aggregations ` format ` when aggregating over several indices where some of them contain unmapped date fields and are encountered first in the reduce phase . Related to # 31760
Allow unmapped fields in composite aggregations __EoT__ Today the ` composite ` aggregation throws an error if a source targets an unmapped field and ` missing_bucket ` is set to false . Documents without a value for a source can not produce any bucket if ` missing_bucket ` is not activated so the error is a shortcut to say that the response will be empty . However this is not consistent with the ` terms ` aggregation which accepts unmapped field by default even if the response is also guaranteed to be empty . This commit removes this restriction , if a source contains an unmapped field we now return an empty response ( no buckets ) . Closes # 35317
[ RCI ] Add IndexShardOperationPermits.asyncBlockOperations ( ActionListener < Releasable > ) __EoT__ The current implementation of asyncBlockOperations ( ) can be used to execute some code once all indexing operations permits have been acquired , then releases all permits immediately after the code execution . This immediate release is not suitable for treatments that need to keep all permits over multiple execution steps . This commit adds a new ` asyncBlockOperations ( ) ` that exposes a ` Releasable ` , making it possible to acquire all permits and only release them all when needed by closing the releasable . This method is aimed to be used in a ` TransportReplicationAction ` that will acquire all permits on the primary shard . The existing ` blockOperations ( ) ` and ` asyncBlockOperations ( ) ` methods have been modified to delegate permit acquisition/releasing to this new method . Relates to # 33888
HLRC : reindex API with wait_for_completion false __EoT__ Extend High Level Rest Client Reindex API to support requests with wait_for_completion=false . This method will return a TaskID and results can be queried with Task API refers : # 27205
Add docs on JNA temp directory not being noexec __EoT__ If the underlying mount point for the JNA temporary directory is mounted noexec on Linux , then the JVM will not be able to map the native code in as executable . This will prevent JNA from executing and will prevent Elasticsearch from being able to execute some functions that rely on native code ( e.g. , memory locking , and installing system cal filters ) . We do not want to get into the business of catching exceptions and parsing messages towards this because these exception messages can change on us . We also do not want to jump through a lot of hoops to check the underlying mount point for noexec . Instead , we will rely on documentation to address this problem . This commit adds to the important system configuration section of the docs that the JNA temporary directory is not on a mount point with the noexec mount option . Closes # 35064
[ CCR ] Adjust list of dynamic index settings that should be replicated __EoT__ and added a test that verifies whether builtin dynamic index settings are classified as replicated or non replicated ( whitelisted ) .
Replicate index settings to followers __EoT__ This commit uses the index settings version so that a follower can replicate index settings changes as needed from the leader .
Rename RealmConfig.globalSettings ( ) to settings ( ) __EoT__ There is no longer a concept of non-global `` realm settings '' . All realm settings should be loaded from the node 's settings using standard Setting classes . This change renames the `` globalSettings '' field and method to simply be '' settings '' . Relates : # 30241
watcher : Fix integration tests to ensure correct start/stop of Watcher __EoT__ Ensure that Watcher is correctly started and stopped between tests for SmokeTestWatcherWithSecurityIT , SmokeTestWatcherWithSecurityClientYamlTestSuiteIT , SmokeTestWatcherTestSuiteIT , WatcherRestIT , XDocsClientYamlTestSuiteIT , and XPackRestIT The change here is to throw an ` AssertionError ` instead of ` break ; ` to allow the ` assertBusy ( ) ` to continue to busy wait until the desired state is reached . closes # 33291 , closes # 29877 , closes # 34462 , closes # 30705 , closes # 34448 more details : https : //github.com/elastic/elasticsearch/issues/33291 # issuecomment-435200954 Note - I was n't able to reproduce the actual test failures , but this is a strong candidate as the root cause and optimistically closing the open issues EDIT : updated list of impacted classes EDIT2 : added XDocsClientYamlTestSuiteIT , and XPackRestIT and optimistically closing # 34448
Remove ALL shard check in CheckShrinkReadyStep __EoT__ Since it 's still possible to shrink an index when replicas are unassigned , we should not check that all copies are available when performing the shrink , since we set the allocation requirement for a single node . Resolves # 35321
Use soft-deleted docs to resolve strategy for engine operation __EoT__ A CCR [ test failure ] ( https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+periodic/84/console ) shows that the approach in https : //github.com/elastic/elasticsearch/pull/34474 is flawed . Restoring the LocalCheckpointTracker from an index commit can cause both FollowingEngine and InternalEngine to incorrectly ignore some delete operations . Here is a [ small scenario ] ( https : //gist.github.com/dnhatn/5d8f271deda5c08b89ac258c8868d30b ) to illustrate the problem : 1 . Delete doc with seq=1 = > engine will add a delete tombstone to Lucene 2 . Flush a commit consisting of only the delete tombstone 3 . Index doc with seq=0 = > engine will add that doc to Lucene but soft-deleted 4 . Restart an engine with the commit ( step 2 ) ; the engine will fill its LocalCheckpointTracker with the delete tombstone in the commit 5 . Replay the local translog in reverse order : index # 0 then delete # 1 6 . When process index # 0 , an engine will add it into Lucene as a live doc and advance the local checkpoint to 1 ( seq # 1 was restored from the commit - step 4 ) . 7 . When process
[ ILM ] Check shard and relocation status in AllocationRoutedStep __EoT__ This is a follow-up from # 35161 where we now check for started and relocating state in ` AllocationRoutedStep ` . Resolves # 35258
Ignore date ranges containing 'now ' when pre-processing a percolator query __EoT__ Today when a percolator query containing a date range then the query analyzer extracts that range , so that at search time the ` percolate ` query can exclude percolator queries efficiently that are never going to match . The problem is that if 'now ' is used it is evaluated at index time . So the idea is to exclude date ranges with 'now ' , so that the query analyzer ca n't extract it and the ` percolate ` query is then able to evualate 'now ' at query time . ~~This is WIP to see whether this approach is acceptable and it is lacking tests.~~
Add a frozen engine implementation __EoT__ This change adds a ` frozen ` engine that allows lazily open a directory reader on a read-only shard . The engine wraps general purpose searchers in a LazyDirectoryReader that also allows to release and reset the underlying index readers after any and before secondary search phases . Relates to # 34352
Put a fake allocation id on allocate stale primary command __EoT__ Put a fake allocation id on allocate stale primary command ; remove it after recovery is done Spin-off of https : //github.com/elastic/elasticsearch/pull/33432 # issuecomment-419810349 Eliminates case when the node after AllocateStalePrimary ( or after recovery from a snapshot ) crashes between shard initialization and shard recovery and allocation id is already adjusted . Relates to # 33432
[ CCR ] Enforce auto follow pattern name restrictions __EoT__ An auto follow pattern name : * can not start with ` _ ` * can not contain a ` , ` * can be encoded in UTF-8 * the length of UTF-8 encoded bytes is no longer than 255 bytes Based on the restrictions for ILM policy names : https : //github.com/elastic/elasticsearch/issues/34928 # issuecomment-435191565
[ ML ] Add Missing data checking class __EoT__ This PR adds a class that will search buckets and indices to decide if there is any missing data in the buckets . This code is not in use yet . NOTE : The dependencies of this class may change when it is integrated into the DatafeedJob . The current dependencies seemed natural but depending on where the class is used , they may change , but the overall behavior will probably stay the same . Relates https : //github.com/elastic/elasticsearch/issues/35131
Make version field names more meaningful __EoT__ Replaces the recently added ` version.build_version ` with ` version.qualified ` in the main response . We refer to it as ` version_qualified ` in the doc tests .
[ CCR ] Added HLRC support for pause follow API __EoT__ This change also includes the docs for hlrc pause follow API . I picked a simple api to get the hlrc work started for ccr . Relates to # 33824 /cc @ hub-cap
` Convert Processor ` enhancement ( description , snippet ) __EoT__ Sometimes , the users are confused about they can use ` Convert Processor ` for changing existing field 's type to other types even the existing one is already ingested . This confusion is from the first line of description . Also , code snippet has not complete syntax , so it is misleading the right usage .
[ Painless ] Remove extraneous compile method __EoT__ With the removal of SearchScript ( # 34730 ) , an extraneous compile method was left behind in PainlessScriptEngine . This change removes the method and updates the tests that depend on it to use the main compile method which gives better test coverage .
[ CCR ] Fail with a better error if leader index is red __EoT__ when fetching history uuids from leader index as part of put follow and resume follow APIs .
Remove ILM specific gradle extra args __EoT__
Remove build qualifier from server 's Version __EoT__ Build on # 35155 ( and contains commits from ) - Rename the constant with an automated IDE refactoring - this generates a high number of changes and changed files . - Pass only the numeric part of the version in places like plugin properties so the server does n't have to deal with qualifier and snapshot . - adds a new substitution to doc tests as the docs now need to know about both . - adds a new ` String ` version field to ` Build ` to hold the complete version string passed on from the build . - replace ` Version.getDisplayVersion ` with ` Build.CURRENT.getVersion ( ) ` introduced above - add a new ` build_version ` parameter to ` version ` . Was not sure this is the way to go , feedback is welcome . The alternative is to have ` version.number ` show the build qualifier as well without adding a new ` build_version ` . It did use to have ` -SNAPSHOT ` in there , but it 's not technically a `` number '' . Not that the content of ` version.number `
Fix DeleteRequest validation for nullable or empty id/type __EoT__ Actually if you send a delete document request like ` DeleteRequest ( `` index '' , `` '' , `` '' ) ` instead of error you effectively execute delete index and get NPE as ` { acknowledged=true } ` could not be parsed into ` DeleteResponse ` This PR as well fixes GetRequest / UpdateRequest / ExplainRequest validation for null and/or empty id/type . Closes # 35297
SQL : Improve CircuitBreaker logic for SqlParser __EoT__ Grammar 's identifiers can be completely skipped from counting depths as they just add another level to the tree and they are always children of some other expression which gets counted . Increased maximum depth from 100 to 200 . After testing on production configuration with -Xss1m , depths of at least 250 can be used , so being conservative we put the limit lower . Fixes : # 35299
Watcher : Ignore system locale/timezone in croneval CLI tool __EoT__ The elasticsearch-croneval CLI tool uses local dates to display when something gets triggered the next time . This is very confusing . This commit ensures , that UTC and local timezone times will be written out . The output looks like this and contains localized dates for each trigger date as well as for ` now ` . `` ` Now is [ Tue , 28 Aug 2018 17:23:51 +0000 ] in UTC , local time is [ ᏔᎵᏁ , 28 ᎦᎶ 2018 12:23:51 -0500 ] Here are the next 10 times this cron expression will trigger : 1 . Mon , 2 Jan 2040 11:00:00 +0000 ᏉᏅᎯ , 2 ᎤᏃ 2040 06:00:00 -0500 2 . ... `` ` This also removes an old outstanding TODO to use the jopt parsing to cast the count to an integer instead of doing it ourselves . Note : Happy to discuss further how the format should look like , just came up with it without thinking too much about it .
Remove deprecated RealmConfig constructor __EoT__ This removes an obsolete constructor that was still being called from some tests . Relates : # 30241
[ CCR ] Change resume follow api to be a master node action __EoT__ In order to start shard follow tasks , the resume follow api already needed execute N requests to the elected master node . This now happens locally . The pause follow API is also a master node action , which should make how both APIs execute more consistent .
Docs : Update CONTRIBUTING.md with shortcut command for assembling only the tar distribution __EoT__ This will help people assemble distributions without running into a problem I ran into when running the normal ` assemble ` command , in which ` buildBwcVersion ` failed because I lacked old Java versions : `` ` sh > Task : distribution : bwc : bugfix : buildBwcVersion FAILED [ 6.4.3 ] ERROR : JAVA_HOME is set to an invalid directory : null [ 6.4.3 ] [ 6.4.3 ] Please set the JAVA_HOME variable in your environment to match the [ 6.4.3 ] location of your Java installation . `` `
Remove include_type_name from the relevant APIs . __EoT__ We 've decided that the bulk , delete , get , index , update , and search APIs should not contain this request parameter , and we will instead accept both typed and typeless calls .
Register Azure max_retries setting __EoT__ The Azure ` max_retries ` setting , mentioned in the [ documentation ] ( url https : //www.elastic.co/guide/en/elasticsearch/plugins/6.x/repository-azure.html ) , is not properly registered . Note that after adding settings validation to the tests , this was caught by the existing test ` testGetSelectedClientBackoffPolicyNbRetries ` .
[ Docs ] Add painless context details for bucket_script __EoT__ Fleshes out the details of the ` bucket_script ` context , adds an example and corresponding doc test . I decided not to add a test to ` ContextExampleTests ` because the script is trivial , and we can test it through the usual doc testing mechanism . Related to # 34829
SQL : new SQL CLI logo __EoT__ This adds a new logo for the SQL CLI representing the Elastic logo `` painted '' with `` Elastic '' letters .
Logger : Merge ESLoggerFactory into Loggers __EoT__ ` ESLoggerFactory ` is now not particularly interesting and simple enought to fold entirely into ` Loggers . So let 's do that . Closes # 32174
SQL : Fix null handling for AND and OR in SELECT __EoT__ Override ` process ( ) ` in ` BinaryLogicProcessor ` which does n't immediately return null if left or right argument is null , which is the behaviour of ` process ( ) ` of the parent class ` BinaryProcessor ` . Also , add more tests for ` AND ` and ` OR ` in SELECT clause with literal . Fixes : # 35240
Check for java 11 in buildSrc __EoT__ We could probably consolidate this in the same way we have ` minumRuntimeVersion ` , but get the check in order first .
Add missing up-to-date configuration __EoT__ The source properties file and the dynamic elasticsearch version ( set based on properties ) were missing from task outputs leading to the task being incorrectly considered up to date . Closes # 35204
SQL : Introduce Coalesce function __EoT__ Add Coalesce conditional for replacing null values . Fix # 35060 P.S . This took longer than it should due to some gradle foobar . Also more tests need to be added on the having front .
Upgrade to lucene-8.0.0-snapshot-31d7dfe6b1 __EoT__ This PR upgrades the master branch to lucene-8.0.0-snapshot-31d7dfe6b1 . There are several changes that need to be reviewed : * removal of ` MultiFields.getFields ` and its impact on ` TermVectorsService ` is the main issue that needs reviewed /cc @ romseygeek Other changes include : * migration of Points encoding to selective indexing * change to ` TokenStreamComponents ` as a final class
Fix failing ICU tests __EoT__ Fixes # 35173
Prevent throttled indices to be searched through wildcards by default __EoT__ Today if a wildcard , date-math expression or alias expands/resolves to an index that is search-throttled we still search it . This is likely not the desired behavior since it can unexpectedly slow down searches significantly . This change adds a new indices option that allows ` search ` , ` count ` and ` msearch ` to ignore throttled indices by default . Users can force expansion to throttled indices by using ` ignore_throttled=true ` on the rest request to expand also to throttled indices . Relates to # 34352 Relates to # 33732
[ CCR ] Improve error when operations are missing __EoT__
[ CCR ] Add extra validation to unfollow api __EoT__ Validate whether the follow index actually exists and whether the follow index actually has custom ccr metadata .
chore ( docs ) : Minor formatting / wording fixes __EoT__
HLRC : Add InvalidateToken security API __EoT__ This change adds the Invalidate Token API ( DELETE /_xpack/security/oauth2/token ) to the Elasticsearch High Level Rest Client . Relates : # 29827
[ Elasticsearch Monitoring ] Collect only display_name ( for now ) __EoT__ This is a forward port of some of the changes made in # 8445 , specifically the change mentioned in https : //github.com/elastic/elasticsearch/pull/34023 # issuecomment-433212636 . Currently , in master , the ` cluster_stats ` collector collects _all_ cluster metadata and indexes it into ` .monitoring-es-* ` . However , per the discussion linked to above , we decided to collect _only_ the ` display_name ` cluster metadata setting for now . This PR makes this change .
ingest : dot_expander_processor prevent null add/append to source document __EoT__ * do n't allow null values to be added to the source document if the field does not exist in the source document . * do n't allow null values to be appended to an existing field if the field does not exist in the source document . -- -- -- -- -- -- I noticed some peculiar behavior w/r/t the dot expander processor adding in ` null ` values when either 1 ) the field declared is missing from the source document 2 ) the source document already contains the nested objects . For example : `` ` PUT _ingest/pipeline/expander { `` processors '' : [ { `` dot_expander '' : { `` field '' : `` network.name '' } } ] } POST test/_doc/1 ? pipeline=expander { `` foo '' : `` bar '' } POST test/_doc/2 ? pipeline=expander { `` network '' : { `` name '' : '' bar '' } } GET test/_doc/_mget { `` docs '' : [ { `` _id '' : `` 1 '' } , { `` _id '' : `` 2 '' } ] } `` ` Results in :
SQL : Introduce NotEquals node to simplify expressions __EoT__ Add NotEquals node in parser to simplify expressions so that < value1 > ! = < value2 > is no longer translated internally to NOT ( < value1 > = < value2 > ) Closes : # 35210 Fixes : # 35233
Build : Pull `` skip assemble on qa '' to common build __EoT__ Pull all of the logic that we use to skip the ` assemble ` and ` dependenciesInfo ` tasks on ` qa ` projects into one spot in our root build file .
MINOR : Remove Dead Code in Routing __EoT__
Update snapshots.asciidoc __EoT__ Remove an extra `` a ''
SQL : [ tests ] Fix select csv spec and enable it __EoT__ Replace ` || ` and ` & & ` with ` OR ` and ` AND ` as the former are not SQL standard operators .
ingest : raise visibility of ingest plugin documentation __EoT__ part of # 33188 * adds a processor plugin link from the main reference * moves set security user to main documentation * updates x-pack security doc to point to main documenation -- -- -- -- -- - Updated processor page < img width= '' 500 '' alt= '' image '' src= '' https : //user-images.githubusercontent.com/976291/47792920-0c80e800-dceb-11e8-8e1f-763eaf9cdd65.png '' > Updated x-pack/stack doc < img width= '' 500 '' alt= '' image '' src= '' https : //user-images.githubusercontent.com/976291/47793231-d42dd980-dceb-11e8-9357-a8b8c0e8be54.png '' > EDIT : updated description to match latest PR EDIT2 : updated description to match latest PR
Skip Rollover step if next index already exists __EoT__ If the Rollover step would fail due to the next index in sequence already existing , just skip to the next step instead of going to the Error step . This prevents spurious ` ResourceAlreadyExistsException ` s created by simultaneous RolloverStep executions from causing ILM to error out unnecessarily . Resolves # 34465 - I tested this fix manually against a setup that otherwise reliably reproduced that issue for a few hours , and did not encounter any failures due to an unnecessary ` ResourceAlreadyExistsException ` . However , I 'm still somewhat concerned that the error message a user encounters if they really do have a problem with the index existing is n't clear - see the test case I added ( ` testRolloverAlreadyExists ` ) to see what I mean . We could change that message to be clearer in this case , but that may cause the error to be less clear if the ` RolloverInfo ` is ` null ` via some other way . Any thoughts ?
Remove Joda usage from ILM __EoT__ This commit removes the Joda time usage from ILM and the HLRC components of ILM . It also fixes an issue where using the ` ? human=true ` flag could have caused the parser not to work . These millisecond fields now follow the standard we use elsewhere in the code , with additional fields added iff the ` human ` flag is specified . This is a breaking change for ILM , but since ILM has not yet been released , no compatibility shim is needed .
HLRC : Add ML API PUT filter __EoT__ Adds the PUT Filter ML API . Relates to # 29827
Discovery EC2 : Utilize Amazon SDK to resolve EC2 metadata server __EoT__ Discovery EC2 uses hard coded url for EC2 metadata server ` http : //169.254.169.254/ ` . It makes some difficulties on testing like # 35141 With this PR _discovery-ec2_ uses Amazon SDK to resolve metadata server , improves unit and integration testing and aligns with approach used in _repositoty-s3_ . Closes # 35141
[ CCR ] Change max_read_request_size default __EoT__ This changes the ` max_read_request_size ` default from unlimited to ` 32MB ` .
Small corrections to HLRC doc for _termvectors __EoT__ Relates to # 33447
CCR/TEST : Limit indexing docs in FollowerFailOverIT __EoT__ The suite FollowerFailOverIT is failing because some documents are not replicated to the follower . Maybe the FollowTask is not working as expected or the background indexers eat all resources while the follower cluster is trying to reform after a failover ; then CI is not fast enough to replicate all the indexed docs within 60 seconds ( sometimes I see 80k docs on the leader ) . This commit limits the number of documents to be indexed into the leader index by the background threads so that we can eliminate the latter case . This change also replaces a docCount assertion with a docIds assertion so we can have more information if these tests fail again . Relates # 33337
Add equals/hashCode to SeqNoStats __EoT__ This commit adds equals/hashCode to SeqNoStats so we can verify it wholly in tests .
[ Scripting ] Make Max Script Length Setting Dynamic __EoT__ This changes the current script.max_size_in_bytes to be dynamic so it can be set through the cluster settings API . This setting is also applied to inline scripts in the compile method of ScriptService to prevent excessively long inline scripts from being compiled . The script length limit is removed from Painless as this is no longer necessary with the protection in compile . Relates # 23209
[ DOCS ] Move CCR overview pages __EoT__ Related to https : //github.com/elastic/elasticsearch/pull/34726 and https : //github.com/elastic/stack-docs/pull/132 This PR removes the CCR overview pages from the Elasticsearch Reference ( since they exist in the Stack Overview here : https : //www.elastic.co/guide/en/elastic-stack-overview/master/xpack-ccr.html ) . It also updates the title of the CCR section so that it aligns with the other titles .
Remove AbstractComponent usage in x-pack core __EoT__ This change removes the use of AbstractComponent in the security module . The classes now declare their own loggers . Relates # 34488
TEST : Only check max_seq_no_of_updates when rollback __EoT__ Currently , we assume that rollback always happens in the test testRestoreLocalHistoryFromTranslogOnPromotion . However , if the global checkpoint equals max_seq_no , we wo n't rollback . This causes the max_seq_no_of_updates assertion failed because max_seq_no_of_updates wo n't be advanced to the global checkpoint . With this commit , we assert max_seq_no_of_updates in two different paths . CI : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+release-tests/45/console
Move ObjectPath , XContentSource and XContentUtils to core __EoT__ These are used by Watcher to return arbitrary JSON from third-party sources . In order to use them from the high-level rest client , they should be moved into core .
Add document _count API support to Rest High Level Client . __EoT__ Add ` count ( ) ` api method , ` CountRequest ` and ` CountResponse ` classes to HLRC . Code in server module is unchanged . Relates to # 27205
Run code snippets in ReindexDocumentationIT __EoT__ Actually ` ReindexDocumentationIT ` has documentation code snippets but it does not run as no ` test* ` -methods there . This PR enforces to run ReindexDocumentationIT code examples . Closes # 32093
Do not alloc full buffer for small change requests __EoT__ Today we always allocate a full buffer ( 1024 elements ) in a LuceneChangesSnapshot even though the requesting size is much smaller . With this change , we will use the requesting size as the buffer size if it 's smaller than the default batch size ; otherwise uses the default batch size .
Moving xpack.plugin.core ml response to use new base class __EoT__ There are just two core responses that inherit from ` AbstractStreamableXContentTestCase ` and the other is yet to be implemented in the HLRC .
CCR : Add NodeClosedException to retryable list __EoT__ This change adds NodeClosedException to the retry-able exception list . CI instance : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+6.x+matrix-java-periodic/ES_BUILD_JAVA=java11 , ES_RUNTIME_JAVA=java8 , nodes=virtual & & linux/33/console Error log : `` ` 1 > [ 2018-11-02T02:01:33,765 ] [ WARN ] [ o.e.x.c.a.ShardFollowNodeTask ] [ follower2 ] shard follow task encounter non-retryable error 1 > org.elasticsearch.node.NodeClosedException : node closed { follower2 } { hHpicNRuSy-szrRAPPQZNQ } { wVoQ350CTRCp0YsEYECggg } { 127.0.0.1 } { 127.0.0.1:44889 } { xpack.installed=true } 1 > at org.elasticsearch.action.support.replication.TransportReplicationAction $ ReroutePhase $ 2.onClusterServiceClose ( TransportReplicationAction.java:894 ) ~ [ elasticsearch-6.6.0-SNAPSHOT.jar:6.6.0-SNAPSHOT ] 1 > at org.elasticsearch.cluster.ClusterStateObserver $ ContextPreservingListener.onClusterServiceClose ( ClusterStateObserver.java:315 ) ~ [ elasticsearch-6.6.0-SNAPSHOT.jar:6.6.0-SNAPSHOT ] `` `
SQL : Fix null handling for IN = > painless script __EoT__ Include ` null ` literals when generating the painless script for ` IN ` expressions . Previously , they were skipped , because of an issue that has been fixed with # 35108 . Fixes : # 35122
[ CCR ] Change response classes to not use Streamable __EoT__ Only the response classes of get auto follow pattern , the follow and stats APIs were moved away from Streamable . The other APIs use ` AcknowledgedResponse ` or ` BaseTasksResponse ` as response class and moving that class away from Streamable is a bigger change .
Upadte TESTING.ascidoc BWC section __EoT__ - Remove outdated sections - add pointer to VersionCollections from # 34818 . - align some headers
Introduce build qualifier parameter __EoT__ Continues work that begin in # 34050 With this change we drop the snapshot and qualifier from the Version class of the build so this is represented as the version in ` server ` and we change the version properties to a string that can have qualifier and snapshot to be used throughout the build , this is also the version that is included in the build-tool properties . The final change will be to remove qualifier from ` server ` 's Version class .
ILM : use node _id attribute when allocating to one node __EoT__ ILM 's Shrink Action was using a nodes `` _name '' attribute to allocate to prepare for the shrink step . Since the name is configurable by a user and may use the same name for multiple nodes on one machine , _id is safer since it is guaranteed to be unique . closes # 35043 .
Add a note around using separate indices for percolator queries and documents . __EoT__ Addresses https : //github.com/elastic/elasticsearch/issues/34056 # issuecomment-434018003 .
Fix a bug in function_score queries where we use the wrong boost_mode . __EoT__ Addresses # 35123 .
Implement VersionCollection in Java __EoT__ This is not a straight forward rewrite . It 's in preparation of removing the ` build ` and ` snapshot ` from ` Version ` classes in both core and build-tools . As such , the Gradle project will track qualifiers and snapshots in version names , but Elasticsearch will have no knowledge of these . We used to mark unreleased versions as snapshots in the version collection to differentiate them , this is no longer possible once we remove that property . The new implementation replaces the old Groovy one and brings a few changes : - does not track unreleased versions by name . Unfortunately we ca n't generate Gradle project names dynamically , so the named projects that used to build these unreleased versions are now just numbered placeholders to which we bind the versions in order at configuration time . - hopefully this approach make the intent of version collection cleaner , and simplifies the implementation of some methods . - I found the existing names confusing - no longer uses ` snapshot ` in any of the terminology , I found that confusing in the context of bwc testing
ML : Add support for rollup Indexes in Datafeeds __EoT__ This adds rollup index support for data extraction in datafeeds . There are SOME changes inside the Rollup side of the house , so review from them for these changes may be necessary * Updating ` RollupSearchAction ` so that a previously crafted search can be injected via the constructor
Watcher : fix metric stats names __EoT__ The current watcher stats metric names does n't match the current documentation . This commit fixes the behavior of ` queued_watches ` metric , deprecates ` pending_watches ` metric and adds ` current_watches ` to match the documented behavior . It also fixes the documentation , which introduced ` executing_watches ` metric that was never added . Fixes # 34865
[ Docs ] Updating URL for Openstack Swift plugin __EoT__ The repository plugin for Openstack Swift was developed originally by Wikimedia foundation but is now retired . We took over it and now have a 6.x compatible version with tests . We are still testing but the up-to-date version is in our fork .
Replace parameter unicodeSetFilter with unicode_set_filter __EoT__ Depreate parameter unicodeSetFilter and replace it with unicode_set_filter for IcuFoldingTokenFilter . Close # 22823
SQL : handle wildcard expansion on incorrect fields __EoT__ So far , the wildcard expansion worked fine for fields that were correctly spelled or fields that do exist in the mapping . In case they did n't exist or they were misspelled , a NPE was thrown . This fixes https : //github.com/elastic/elasticsearch/issues/35092
Update query_cache.asciidoc __EoT__ We should state that the cached contents can not be seen , as I have had a user ask if this was possible , and my understanding is that it is not possible . If seeing the contents is on the roadmap , then we can also state this , but I did not find such evidence .
Core : Remove settings from AbstractComponent __EoT__ Stop passing ` Settings ` to ` AbstractComponent ` 's ctor . This allows us to stop passing around ` Settings ` in a *ton* of places . While this change touches many files , it touches them all in fairly small , mechanical ways , doing a few things per file : 1 . Drop the ` super ( settings ) ; ` line on everything that extends ` AbstractComponent ` . 2 . Drop the ` settings ` argument to the ctor if it is no longer used . 3 . If the file does n't use ` logger ` then drop ` extends AbstractComponent ` from it . 4 . Clean up all compilation failure caused by the ` settings ` removal and drop any now unused ` settings ` isntances and method arguments . I 've intentionally *not* removed the ` settings ` argument from a few files : 1 . TransportAction 2 . AbstractLifecycleComponent 3 . BaseRestHandler These files do n't *need* ` settings ` either , but this change is large enough as is . Relates to # 34488
Fixes randomDateTimeZone method __EoT__ The randomDateTimeZone method should n't return deprecated timezones this causes some tests to fail with deprecation warning . To reproduce the original problem run : `` ` ./gradlew : server : test -Dtests.seed=76CEA73BEE556317 -Dtests.class=org.elasticsearch.index.query.RangeQueryBuilderTests -Dtests.method= '' testMustRewrite '' -Dtests.security.manager=true -Dtests.jvms=4 -Dtests.locale=dz-BT -Dtests.timezone=America/Indiana/Marengo -Dcompiler.java=11 -Druntime.java=11 `` `
update ILM integ test cluster poll interval to 1s __EoT__ To test a theory for https : //github.com/elastic/elasticsearch/issues/35105 , I am opening this to see how it behaves in CI . More logging is also necessary to see how to resolve this consistently , beyond timing magic .
Packaging : Update procrun executables to version 1.1.0 __EoT__ This commit updates the procrun manager and service exes to 1.1.0 . There are a few bug fixes , including for a bug which can cause lingering processes when removing the service .
Make XContentBuilder in AliasActions build ` is_write_index ` field __EoT__ Alias 'is_write_index ' feature was introduced in 6.4 version . but , toXContent method of AliasActions does not build for ` is_write_index ` field . so ` is_write_index ` can not be set with IndicesAliasesRequest ( RestHighLevelClient ) You can see it in the code below . https : //github.com/elastic/elasticsearch/blob/237650e9c054149fd08213b38a81a3666c1868e5/server/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java # L448 # # Sample of RestHighLevelClient It does not set ` is_write_index ` despite specifying options with ` writeIndex ` chaining method . `` ` java IndicesAliasesRequest request = new IndicesAliasesRequest ( ) ; IndicesAliasesRequest.AliasActions aliasAction = new IndicesAliasesRequest.AliasActions ( IndicesAliasesRequest.AliasActions.Type.ADD ) .index ( index ) .alias ( alias ) .filter ( filter ) .writeIndex ( isWriteIndex ) ; // this chaining method does not working . request.addAliasAction ( aliasAction ) ; return client.indices ( ) .updateAliases ( request , RequestOptions.DEFAULT ) ; `` ` # # Notes - I added test for this PR
Remove deprecated url parameters ` _source_include ` and ` _source_exclude ` __EoT__ Removes ` _source_include ` and ` _source_exclude ` url parameters . These parameters have been deprecated in # 33475 . Closes # 22792
NETWORKING : MockTransportService Wait for Close __EoT__ * Make ` MockTransportService ` wait ` 30s ` for close listeners to run before failing the assertion * Closes # 34990 * Closes # 33756
Pre-populate unicast hosts files __EoT__ Today when ESIntegTestCase starts some nodes it writes out the unicast hosts files each time a node starts its transport service . This does mean that a number of nodes can start and perform their first pinging round without any unicast hosts which , if the timing is unlucky and a lot of nodes are all started at the same time , can lead to a split brain as in # 35052 . Prior to # 33554 this was unlikely to happen since the MockUncasedHostsProvider would always have yielded the existing hosts , so the timing would have to have been implausibly unlucky . Since # 33554 , however , it 's more likely because the race occurs between the start of the first round of pinging and the writing of the unicast hosts file . It is realistic that new nodes will be configured with the existing nodes from startup , so this change reinstates that behaviour Closes # 35052 .
cleanup ILM qa structure __EoT__ This commit does a few things - moves ILM-specifc rest yaml tests into plugin/ilm/qa , and creates special : plugin : ilm : qa : rest module to test them - removes the with-security tests of the yaml tests since they are covered in the rest tests now - moves ChangePolicyforIndexIT into the qa/multi-node project since that test is not currently running in main ilm since integTest is disabled
Loggers : Drop last deprecated logger function __EoT__ Drop the last function from ` Loggers ` that just wraps Log4j2 . Relates to # 32174
[ Docs ] Improve Reindex/Update/Delete By Query . __EoT__
Allow to enable pings for specific remote clusters __EoT__ When we connect to remote clusters , there may be a few more routers/firewalls in-between compared to when we connect to nodes in the same cluster . We 've experienced cases where firewalls drop connections completely and keep-alives seem not to be enough , or they are not properly configured . It is already possible to enable application-level pings through the ` transport.ping_schedule ` setting , but such setting affects also intra-cluster communication . With this PR we add a per cluster new setting ( called ` cluster.remote. $ { cluster_alias } .transport.ping_schedule ` ) that allows to configure application-level pings for each remote cluster . Relates to # 34405 Possible relates to # 30247
Update type to `` seat '' __EoT__ otherwise this throws an exception : java.lang.IllegalArgumentException : Rejecting mapping update to [ seats ] as the final mapping would have more than 1 type : [ seat , _doc ] May be , later for the types removal , we can modify ` seats.json ` to have a type ` _doc ` instead of ` seat `
[ DOCS ] Add info on calendar v fixed interval . Closes # 29410 __EoT__ Extensive edit to add additional information on the difference between calendar intervals and fixed-length intervals .
HLRest : add security authenticate API __EoT__ This adds the security authenticate API . This API is exceptional because it does not have a request body 🦄 I have added ` EmptyBodyRequest ` up from the ` security ` package .
[ TEST ] Enforce skip headers when needed __EoT__ The java yaml test runner supports sending request headers , yet not all clients support headers . This commit makes sure that we enforce adding a skip section with feature `` headers '' whenever headers are used in a do section as part of a test . That decreases the chance for new tests to break client builds due to the missing skip section . Closes # 34650
[ ML ] Enable reusing field extraction logic when no time field is required __EoT__
SQL : Fix NPE thrown if HAVING filter evals to null __EoT__ Surround script with ` nullSafeFilter ` also for ` AggFilter ` translation . Fixed query translation tests to properly set ` onAggs ` . Fixes : # 35107
[ DOCS ] Fixed edit links for ILM APIs and added the APIs to the REST ref __EoT__
throw exception when ilm-rollover-step runs on index without rollover alias __EoT__ The ILM Rollover Step can execute on the incorrect index if the rollover alias exists on another valid index , but not the one the step is executing against . This is a problem and is now guarded against
SQL : [ tests ] Remove AbstractBuilderTestCase dep __EoT__ Extend directly from ` EsTestCase ` to speed up execution . Fixes : # 35098
Core : Drop settings member from AbstractComponent __EoT__ Drops the ` Settings ` member from ` AbstractComponent ` , moving it from the base class on to the classes that use it . For the most part this is a mechanical change that does n't drop ` Settings ` accesses . The one exception to this is naming threads where it switches from an invocation that passes ` Settings ` and extracts the node name to one that explicitly passes the node name . This change does n't drop the ` Settings ` argument from ` AbstractComponent ` 's ctor because this change is big enough as is . We 'll do that in a follow up change .
rename ILM Phase `` minimum_age '' to `` min_age '' __EoT__ closes # 34927 .
Native roles store uses mget to retrieve roles __EoT__ The native roles store previously would issue a search if attempting to retrieve more than a single role . This is fine when we are attempting to retrieve all of the roles to list them in the api , but could cause issues when attempting to find roles for a user . The search is not prioritized over other search requests , so heavy aggregations/searches or overloaded nodes could cause roles to be cached as missing if the search is rejected . When attempting to load specific roles , we know the document id for the role that we are trying to load , which allows us to use the multi-get api for loading these roles . This change makes use of the multi-get api when attempting to load more than one role by name . This api is also constrained by a threadpool but the tasks in the GET threadpool should be quicker than searches . See # 33205
Move to Error step if ClusterState* steps throw __EoT__ Previously , if ClusterStateActionSteps or ClusterStateWaitSteps threw an exception while executing , the exception would only be caught and logged by the generic ClusterStateUpdateTask machinery and the index would become stuck on that step . Now , exceptions thrown in these steps will be caught and the index will be moved to the Error step . Credit to @ talevy for the test cases , turns out we both worked on this separately and he got to them first .
SQL : Move qa directory into sql directory __EoT__ Moves ` x-pack/qa/sql/* ` into ` x-pack/plugin/sql/qa ` to make it simpler to run all of the sql tests . This lines up with how newer projects like cross cluster replication are testing themselves .
SQL : Optimizer rule for folding nullable expressions __EoT__ Add optimization for folding NULLable expressions when dealing with a NULL argument . This is a variant of folding for the NULL case . Fix # 34826
Docs : Remove range notation from random score docs __EoT__ The ` random_score ` function produces values between 0 ( inclusive ) and 1 ( exclusive ) and documented it with fancy methematical range notation . It is so fancy I thought it was a typo . This changes the documentation to use words . Relates to # 35084
[ Rollup ] Proactively resolve index patterns in RollupSearch endoint __EoT__ This changes the RollupSearch endpoint to proactively resolve index patterns . Today , we assume any index that does n't have a rollup cap to be a raw/live index . But if the user specifies a wildcard pattern on a rollup index ( ` rollup-foo* ` ) , this causes a problem . We ca n't find an index that matches the exact string ` `` rollup-foo* '' ` so we assume it is a live index and pass it off to the regular Search endpoint . Search resolves that to the rollup index , searches it but gets no hits because none of the names match . The result is an empty search response that does n't make sense to the user . Instead , we should resolve index patterns up front in the RollupSearch endpoint . If the index pattern ( s ) match more than one rollup index , an exception is thrown just like before . But if the pattern only matches one rollup index , execution is allowed to continue . Regular indices continue to function as before , the only difference is that
Remove some documentation that only makes sense with multiple types . __EoT__ * Remove a tip about ignore_above that only makes sense with multiple types . * Remove a line from the percolator documentation that refers to multiple types . Relates to https : //github.com/elastic/elasticsearch/issues/34056 .
Fix LineLength Check Suppressions : index.mapper __EoT__ Fix linelength suppressions in index.mapper Relates # 34884
add ILM rolling upgrade tests __EoT__ Adds basic rolling upgrade tests to check that lifecycles are still recognizable between rolling cluster upgrades and managed indices stay managed . This is a placeholder for discussing types of checks so they are ready once we backported
[ TEST ] improve validation of yaml suites __EoT__ Validation of test sections and suites consists of checking that the proper skip features sections are in place depending on the features used in tests . The validation logic was previously only performed on do sections included in each test section , and the skip needed to be present in the same test section . What happens often though is that the skip is added to the setup section , or the teardown section . This commit improves the validation of test suites by validating setup and teardown section first , then looking at each test section while still eventually reading the skip section from setup or teardown . We are also making SkipSection , SetupSection , TearDownSection , ClientYamlTestSection and ClientYamlTestSuite immutable . Previously it was possible to utilize constants like SetupSection.EMPTY , which were modifiable and affect every other future users by modifiying them . This has been corrected . Also , validation has been improved to cumulate errors so that all the errors from a suite will be listed at once . This was originated from # 34735 and is a prerequisite to get # 34735 merged .
SQL : Proper handling of nested fields at the beginning of the columns list __EoT__ This fixes https : //github.com/elastic/elasticsearch/issues/32951 by considering the first nested field to be extracted as the first one from the left and not as the last one ( even if it 's not coming from a nested document ) in the list of columns to be retrieved .
Adds backport label to list to ignore in release notes script __EoT__
Remove Accountable interface from BytesReference __EoT__ Part of removing BytesReference dependencies on lucene , so that it can be moved to the core library . Related to # 34803
Change CCR API request classes to use Writeable serialization instead of Streamable __EoT__ Only the follow stats request could n't be changed to use Writeable serialization , because that requires changes in ` TransportTasksAction ` and ` BaseTasksRequest ` base classes .
Update reindex.asciidoc __EoT__ Highlighted that ` _source ` needs to exist in the source index .
SQL : Fix failing test due to random timezone __EoT__ Use null values for ` languages ` instead of ` birth_date ` to avoid differences with H2 because of timezone randomization . Fixes : # 35042
Bulk Api support for global parameters __EoT__ Bulk Request in High level rest client should be consistent with what is possible in Rest API , therefore should support global parameters . Global parameters are passed in URL in Rest API . Some parameters are mandatory - index , type - and would fail validation if not provided before before the bulk is executed . Optional parameters - routing , pipeline . The usage of these should be consistent across sync/async execution and bulk processor . closes # 26026
Add explanation for ? include_defaults parameter , link to Cluster Get Settings reference __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ] (
Remove remaining line length violations in o.e.cluster __EoT__ relates # 34923 , # 34884
[ ML ] Refactor doc value format into ExtractedField __EoT__ This commit moves the knowledge of which doc value format to be used down to the ` ExtractedField ` instead of being in the data extractor .
Label required scripts in Scripted Metric Agg docs __EoT__ When ` combine_script ` and ` reduce_script ` were made into required parameters for Scripted Metric aggregations in # 33452 , the docs were not updated to reflect that . This PR marks those parameters are required in the documentation .
Replace another deprecated Loggers method with LogManager . __EoT__ Dropping another deprecated ` Loggers ` method to be replaced with ` LogManager ` .
[ ILM ] Fix Move To Step API causing ILM to hang __EoT__ The Move To Step API now checks to see if the target step is an AsyncActionStep , and if so , runs it . AsyncActionSteps are otherwise only run when they are entered by executing the previous step , rather than periodically or on cluster state updates , so if an AsyncActionStep was entered via the Move To Step API , ILM would never touch that index again . Fixes # 34294
Fix test failure on Windows __EoT__ The functionality is not available on Windows so the tests should be skipped .
SQL : Add ` CAST ` and ` CONVERT ` to ` SHOW FUNCTIONS ` __EoT__ Fixes : # 34939
Logging : Drop another deprecated Loggers method __EoT__ Drop a method from ` Loggers ` that we deprecated because it just delegated to ` LogManager ` .
Fix CCR API specification __EoT__ This commit fixes two issues with the CCR API specification : - remove the CCR stats endpoint , it is not currently implemented - fix the documentation links
Cleanup suppressed overlength line for action.support package __EoT__ Clean up lines over 140 characters in the ` org.elasticsearch.action.support . * ` packages ( master branch version ) Relates to # 34884
Enforce a [ skip ] when using [ contains ] __EoT__ Ensures that we are friendly with other runners that may not have implemented the feature .
HLRC XPack Protocol clean up : Migration ; Graph ; Watcher __EoT__ Move parts related to XPack for packages Migration ; Graph ; Watcher from protocol to client Drop protocol module Relates # 34451
SQL : Implement CAST between STRING and IP __EoT__ This allows comparison between IP fields and STRING input from the user where automatic conversion is not yet supported ( e.g . : for IN ) Closes : # 34799
SQL : [ Test ] Fix and enable test with randomness __EoT__ Increase minimum number of elements for List < > ctor arguments for specific classes that validate the size of the list . Fixes : # 34753
SQL : Fix function args verification and error msgs __EoT__ Extract data type verification for function arguments to a single place so that NULL type can be treated as RESOLVED for all functions . Moreover this enables to have consistent verification error messages for all functions . Fixes : # 34752 Fixes : # 33469
[ Docs ] Add migration note about expanded fields limit __EoT__ Adds a note to warn users about the limit introduced in # 26541 .
[ ML ] Rename the json file structure to ndjson __EoT__ The file structure finder endpoint can find the NDJSON ( newline-delimited JSON ) file format , but called it ` json ` . This change renames the ` format ` for this file structure to ` ndjson ` , which is more precise and will hopefully avoid confusion .
Add start rollup job support to HL REST Client __EoT__ This change adds support for starting a rollup job to High Level REST Client . Relates to # 29827
convert FilePermissionsTask.groovy to .java __EoT__ related to # 34459 , convert the FilePermissionsTask.groovy to java
[ CCR ] Fix request serialization bug __EoT__ and some parameters that were not set in tests .
HLRC : Add security Create Token API __EoT__ This adds the Create Token API ( POST /_xpack/security/oauth2/token ) to the High Level Rest Client .
[ TEST ] Manually trigger resource watching __EoT__ SSLTrustRestrictionsTests.testRestrictionsAreReloaded checks that the SSL trust configuration is automatically updated reapplied if the underlying `` trust_restrictions.yml '' file is modified . Since the default resource watcher frequency is 5seconds , it could take 10 second to run that test ( as it waits for 2 reloaded ) . Previously this test set that frequency to a very low value ( 3ms ) so that the elapsed time for the test would be reduced . However this caused other problems , including that the resource watcher would frequently run while the cluster was shutting down and files were being cleaned up . This change resets that watch frequency back to its default ( 5s ) and then manually calls the `` notifyNow '' method on the resource watcher whenever the restrictions file is modified , so that the SSL trust configuration is reloaded at exactly the right time . Resolves : # 34502
[ HLRC ] Add support for get role mappings API __EoT__ This commit adds support for get role mappings API in HLRC .
SQL : Fix incorrect AVG data type __EoT__ Close # 33773
HLRC : Drop extra level from user parser __EoT__ It had support for an object between ` created ` and the root that we do n't return in 7.0+ .
add ILM rolling upgrade tests __EoT__ Adds basic rolling upgrade tests to check that lifecycles are still recognizable between rolling cluster upgrades and managed indices stay managed . This is a placeholder for discussing types of checks so they are ready once we backported
[ DOCS ] Added attributes for HLRC javadoc packages . __EoT__ These make it simpler to link to specific classes in the Javadoc .
Fix line length for bootstrap/client/discovery/gateway files __EoT__ Removes the checkstyle suppressions for files in org.elasticsearch.bootstrap/client/discovery/gateway packages . Relates to # 34884
HLRC : Adding Update datafeed API __EoT__ HLRC : ML Adds the Update Datafeed API Relates to # 29827
Enforce 140 char line lengths for packages action.bulk/delete/explain/get/index __EoT__ part of # 34884 No changes beyond adding newlines to satisfy the 140 char line length .
Remove line length violations for o.e.cluster ( mostly ) __EoT__ This commit removes line length violations in most of the classes under org.elasticsearch.cluster .
Drop deprecationLogger from AbstractComponent __EoT__ Drops the ` deprecationLogger ` from ` AbstractComponent ` , moving it to places where we need it . This saves us from building a bunch of ` DeprecationLogger ` s that we do n't need . Relates to # 34488
Contributing : Clarify width of snippets __EoT__ Clarifies the width rules for snippets .
MINOR : Remove Deadcode in aggregtions.support __EoT__ * Removed methods are just unused ( the exceptions being isGeoPoint ( ) and is isFloatingPoint ( ) but those could more efficiently be replaced by enum comparisons to streamline the code for the type checks ) * Removed exceptions are n't thrown
SQL : Handle aggregation for null group __EoT__ When dealing with a null group , make sure the associated aggs return null Fix # 34896
Tests : remove possibly unnecessary rollup job logging __EoT__ It seems that this statement is a debug leftover since it currently adds an error message ` { `` jobs '' : [ ] } ` after each successful REST test .
Increase the length of randomly generated field __EoT__ randomAlphaOfLength ( 2 ) produced duplicates which led to com.fasterxml.jackson.core.JsonParseException : Duplicate field increase it to randomAlphaOfLength ( 7 ) closes # 34837
Introduce cross-cluster replication API docs __EoT__ This commit is our first introduction to cross-cluster replication docs . In this commit , we introduce the cross-cluster replication API docs . We also add skelton docs for additional content that will be added in a series of follow-up commits .
Responses can use Writeable.Reader interface __EoT__ In order to remove Streamable from the codebase , Response objects need to be read using the Writeable.Reader interface which this change enables . This change enables the use of Writeable.Reader by adding the ` Action # getResponseReader ` method . The default implementation simply uses the existing ` newResponse ` method and the readFrom method . As responses are migrated to the Writeable.Reader interface , Action classes can be updated to throw an UnsupportedOperationException when ` newResponse ` is called and override the ` getResponseReader ` method . Relates # 34389
SQL : Provide null-safe scripts for Not and Neg __EoT__ Introduce null-safe Painless scripts for Not and Neg Simplify script generation for Unary functions Close # 34848
Fix put/resume follow request parsing __EoT__ This commit adds some fields that were missing from put follow , and fixes a bug in resume follow .
Fix line length for org.elasticsearch.common . * files __EoT__ This removes the checkstyle suppressions for things in the ` common ` package . Relates to # 34884
[ ML ] Extract common native process base class __EoT__ We currently have two different native processes : autodetect & normalizer . There are plans for introducing a new process . All these share many things in common . This commit refactors the processes to extend an ` AbstractNativeProcess ` class that encapsulates those commonalities with the purpose of reusing the code for new processes in the future .
Refactor children aggregator into a generic ParentJoinAggregator __EoT__ This commit adds a new ParentJoinAggregator that implements a join using global ordinals in a way that can be reused by the ` children ` and the upcoming ` parent ` aggregation . This new aggregator is a refactor of the existing ParentToChildrenAggregator with two main changes : * It uses a dense bit array instead of a long array when the aggregation does not have any parent . * It uses a single aggregator per bucket if it is nested under another aggregation . For the latter case we use a ` MultiBucketAggregatorWrapper ` in the factory in order to ensure that each instance of the aggregator handles a single bucket . This is more inlined with the strategy we use for other aggregations like ` terms ` aggregation for instance since the number of buckets to handle should be low ( thanks to the breadth_first strategy ) . This change is also required for # 34210 which adds the ` parent ` aggregation in the parent-join module .
[ Style ] Fix line lengths in action.admin.indices __EoT__ Clean up lines over 140 characters in the the ` org.elasticsearch.action.admin.indices ` packages Relates to # 34884
HLRC - add support for source exists API __EoT__ API re-uses the GetRequest object ( following the precedent set by the plain “ exists ” api ) . Relates to # 27205
[ CCR ] Retry when no index shard stats can be found __EoT__ Index shard stats for the follower shard are fetched , when a shard follow task is started . This is needed in order to bootstap the shard follow task with the follower global checkpoint . Sometimes index shard stats are not available ( e.g . during a restart ) and we fail now , while it is very likely that these stats will be available some time later .
Docs for the audit logfile structured format __EoT__ This is the docs part of the following work on structured logfile auditing : https : //github.com/elastic/elasticsearch/pull/31931 https : //github.com/elastic/elasticsearch/pull/34475 It documents the format and file name changes . This PR is geared towards the 6.x branch . It will be followed by another one PR that will completely forget the deprecated format ( and will describe this as a breaking change , as has been suggested here https : //github.com/elastic/elasticsearch/pull/34475 # pullrequestreview-165208224 )
[ Test ] Fix FullClusterRestartIT.testShrink ( ) with copy_settings param __EoT__ The pull request # 34338 added strict deprecation mode to the REST tests and adds the copy_settings param when testing the shrink of an index . This parameter has been added in 6.4.0 and will be removed in 8.0 , so the test now needs to take care of the old cluster version when adding the copy_settings param . Details of the test failure : < details > 08:44:03 Suite : org.elasticsearch.upgrades.FullClusterRestartIT 08:44:03 1 > [ 2018-10-25T14:12:54,119 ] [ INFO ] [ o.e.u.FullClusterRestartIT ] [ testAliasWithBadName ] before test 08:44:03 1 > [ 2018-10-25T14:12:54,133 ] [ INFO ] [ o.e.u.FullClusterRestartIT ] [ testAliasWithBadName ] initializing REST clients against [ http : // [ : :1 ] :53175 , http : // [ : :1 ] :60283 ] 08:44:03 2 > REPRODUCE WITH : ./gradlew : qa : full-cluster-restart : v6.0.0 # oldClusterTestRunner -Dtests.seed=342C433F8075401B -Dtests.class=org.elasticsearch.upgrades.FullClusterRestartIT -Dtests.method= '' testShrink '' -Dtests.security.manager=true -Dtests.locale=ar-QA -Dtests.timezone=IST -Dcompiler.java=11 -Druntime.java=8 08:44:03 1 > [ 2018-10-25T14:12:54,200 ] [ INFO ] [ o.e.u.FullClusterRestartIT ] [ testAliasWithBadName ] after test 08:44:03 IGNOR/A 0.09s | FullClusterRestartIT.testAliasWithBadName 08:44:03 > Assumption # 1 : Can only test bad alias name if old
TEST : Stablize Minio Free Port Search __EoT__ * Binding to ` 0 ` gives us free ports that are assigned sequentially by Linux making collisions much less likely compared to manually finding a free port in a range * Closes # 32208
Delete flaky SettingsBasedHostProviderIT test __EoT__ ` testClusterFormsByScanningPorts ` is flaky : sometimes in CI it 's not possible to bind to any of the ports we need to in order for the port scanning to work . This change removes this test , and # 34809 describes a better way to test this behaviour .
[ ML ] Include message in field_stats for text log files __EoT__ This change ensures the ` message ` field is always included in the ` field_stats ` for the semi-structured text log file file structure . Previously it was not , as it will almost certainly contain all distinct values . However , for consistency in the UI it 's useful to include it .
update updating-policy docs __EoT__ This contains updates to the ILM Docs explaining how updates to policies work and affect policy execution on indices .
XContent : Check for bad parsers __EoT__ Adds checks for misbehaving parsers . The checks are n't perfect at all but they are simple and fast enough that we can do them all the time so they 'll catch most badly behaving parsers . Closes # 34351
Improved documentation - reg multiple index_patterns __EoT__ Modified example text to include multiple index patterns used in the code
Rollup : Skip cleanup if nodes too old __EoT__ Skips the rollup cleanup at the end of every test if some of the nodes in the test cluster have a version before rollup was released . As a side effect of doing this , I move the `` is x-pack installed '' test from on-demand to before the first test . This should result in less requests in general and it makes is a little simpler to store the node versions and whether or not any node has x-pack installed . I expect other cleanup code will be able to use this version checking infrastructure . In addition , I think the yml tests could also reuse it . They have some fairly complex logic to look up the versions of nodes but I do n't believe it is required . Both of those will have to wait for a follow up change . Closes # 34629
SQL : Return error with ORDER BY on non-grouped . __EoT__ Previously , for some queries the validation for ORDER BY fields did n't kick in since a HAVING close or an ORDER BY with scalar function would add ` Filter ` and ` Project ` plans between the ` OrderBy ` and the ` Aggregate ` . Now the LogicalPlan tree beneath ` OrderBy ` is traversed and the ORDER BY fields are properly verified . Fixes : # 34590
Reduce channels in AbstractSimpleTransportTestCase __EoT__ This is related to # 30876 . The AbstractSimpleTransportTestCase initiates many tcp connections . There are normally over 1,000 connections in TIME_WAIT at the end of the test . This is because every test opens at least two different transports that connect to each other with 13 channel connection profiles . This commit modifies the default connection profile used by this test to 6 . One connection for each type , except for REG which gets 2 connections .
[ DOCS ] Updates Elasticsearch monitoring tasks __EoT__ Related to https : //github.com/elastic/stack-docs/issues/86 and https : //github.com/elastic/elasticsearch/pull/34369 This PR updates the monitoring configuration tasks in the Elasticsearch Reference to include the usage of Metricbeat .
HLRC : Split ILM request converters __EoT__ In an effort to encapsulate different clients , the request converters are being shuffled around . This splits the Index Lifecycle Management request converters . This has already been done for pretty much all the other clients by @ hub-cap , ILM has n't yet .
[ Docs ] Add ` indices.query.bool.max_clause_count ` setting __EoT__ This change adds a section about the global search setting ` indices.query.bool.max_clause_count ` that limits the number of boolean clauses allowed in a Lucene BooleanQuery . Closes # 19858
Test : ensure char [ ] does n't being with prefix __EoT__ The testCharsBeginsWith test has a check that a random prefix of length 2 is not the prefix of a char [ ] . However , there is no check that the char [ ] is not randomly generated with the same two characters as the prefix . This change ensures that the char [ ] does not begin with the prefix . Closes # 34765
ILM Docs : update start/stop documentation __EoT__ adds documentation explaining the different operation modes in the context of starting and stopping ILM . note : ` index.lifecycle.skip ` is not documented because this is subject to change . This can be added in a different PR
fix PolicyStatsTests mutateInstance __EoT__ through randomization , there is a chance that the mutateInstance for PolicyStatsTests does not actually mutate the original object . This PR aims to fix this
Logging : server : clean up logging __EoT__ Replace internal deprecated calls to ` Loggers.getLogger ( Class ) ` with direct calls to log4j ` LogManager.getLogger ( Class ) ` Relates : # 32174
SQL : Introduce ODBC mode , similar to JDBC __EoT__ Extend mode parameter to include 'odbc' Close # 34720
Supplementary explanation for code snippets line width __EoT__ Add `` Line width for code snippets is 76 characters '' to Java Language Formatting Guidelines For issue # 34795
CCR : Rename follow-task parameters and stats __EoT__ This commit renames the follow-task parameters and its stats . Below is the list of the changes : # # Params - remote_cluster ( unchanged ) - leader_index ( unchanged ) - max_batch_operation_count - > max_read_request_operation_count - max_batch_size - > max_read_request_size - max_write_request_operation_count ( new ) - max_write_request_size ( new ) - max_concurrent_read_batches - > max_outstanding_read_requests - max_concurrent_write_batches - > max_outstanding_write_requests - max_write_buffer_size ( unchanged ) - max_write_buffer_count ( unchanged ) - max_retry_delay ( unchanged ) - poll_timeout - > read_poll_timeout # # Stats - remote_cluster ( unchanged ) - leader_index ( unchanged ) - follower_index ( unchanged ) - shard_id ( unchanged ) - leader_global_checkpoint ( unchanged ) - leader_max_seq_no ( unchanged ) - follower_global_checkpoint ( unchanged ) - follower_max_seq_no ( unchanged ) - last_requested_seq_no ( unchanged ) - number_of_concurrent_reads - > outstanding_read_requests - number_of_concurrent_writes - > outstanding_write_requests - buffer_size_in_bytes - > write_buffer_size_in_bytes ( new ) - number_of_queued_writes - > write_buffer_operation_count - mapping_version - > follower_mapping_version - total_fetch_time_millis - > total_read_time_millis - total_fetch_remote_time_millis - > total_read_remote_exec_time_millis - number_of_successful_fetches - > successful_read_requests - number_of_failed_fetches - > failed_read_requests - operation_received - > operations_read - total_transferred_bytes - > bytes_read - total_index_time_millis - > total_write_time_millis
Switch build-tools to latest target version __EoT__ - we already require Java 11 to build , yet we target the minimum supported version in build-tools ( currently 8 ) - this is because we have some checks that are executed in a new JVM which could be running the minimum version . - For everything else it would be nice to be able to use new features , like the new process API . With this change , we selectively compile the few classes that need an older target version and move everything over to Java 10 . Unfortunately the current Gradle version does not support 11 as a target version yet .
NETWORKING : Add SSL Handler before other Handlers __EoT__ * The only way to run into the issue in # 33998 is for ` Netty4MessageChannelHandler ` to be in the pipeline while the SslHandler is not . Adding the SslHandler before any other handlers should ensure correct ordering here even when we handle upstream events in our own thread pool * Relates # 33998 * I would like to not close # 33998 yet since it looks to me like this is a Netty bug ( though I could n't reproduce it in isolation yet ) that somehow causes the ` Netty4MessageChannelHandler ` to be invoked before the initialize call returns ( though the first `` UGLY '' point in https : //github.com/netty/netty/wiki/Thread-model could be the culprit here ... if we do n't see the error anymore with this change we could look into opening an issue with Netty I think ) .
Add a new `` contains '' feature to yml test __EoT__ The contains syntax was added in # 30874 but the skips were not properly put in place . The java runner has the feature so the tests will run as part of the build , but language clients will be able to support it at their own pace .
Enable ingest attachment docs tests on JDK 11 __EoT__ These were disabled because ingest attachement was not playing well with JDK 11 . We have addressed that by upgrading the Tika dependency , yet forgot to reenable these . This commit enables these tests again . Relates # 31305
Scripting : Remove SearchScript __EoT__ This commit removes the last non context based script class .
[ CCR ] Added write buffer size limit __EoT__ This limit is based on the size in bytes of the operations in the write buffer . If this limit is exceeded then no more read operations will be coordinated until the size in bytes of the write buffer has dropped below the configured write buffer size limit . Renamed existing ` max_write_buffer_size ` to ` max_write_buffer_count ` to indicate that limit is count based . Closes # 34705
[ Painless ] Add instance bindings __EoT__ This change adds instance bindings to Painless . This binding allows a whitelisted method to be called on an instance instantiated prior to script compilation . Whitelisting must be done in code as there is no practical way to instantiate a useful instance from a text file ( see the tests for an example ) . Since an instance can be shared by multiple scripts , each method called must be thread-safe .
Improved IndexNotFoundException 's default error message __EoT__ The message is improved by including the missing index name . Fixes # 34628 .
check for null argument is already done in splitStringByCommaToArray __EoT__
[ TEST ] Improve validation of do sections __EoT__ We throw parsing exception when an unknown array is found , but we do n't when an unknown top-level field is found . This commit makes sure that unsupported top-level fields are not ignored in a do section . Closes # 34651
Rollup add default metrics to histo groups __EoT__ This adds default metrics ` [ min , max ] ` to histogram groupings ( numeric and date ) . I was not 100 % sure to put these default metrics , but keeping them as simple metric aggregations keeps it simple and makes it more obvious to the end user what capabilities are there for what fields . If a user provides a metric for a histogram field , it is assumed that they want that specific metric only . Docs need to be updated as well . closes # 34379 P.S . Would be nice to get this into 6.5 , but could be delayed to a next version if need be .
SQL : Fix queries with filter resulting in NO_MATCH __EoT__ Previously , ` Mapper ` was returning an incorrect plan which resulted in an `` ` SQLFeatureNotSupportedException : Found 1 problem ( s ) line 1:8 : Unexecutable item `` ` Queries with a ` WHERE ` and/or ` HAVING ` clause which results in NO_MATCH are now handled correctly and return 0 rows . Fixes : # 34613
HLRC API for _termvectors __EoT__ relates to # 27205
SQL : Verifier allows aliases aggregates for sorting __EoT__ Improve Verifier rule that prevented grouping , aliases inside aggregates to not be accepted for ordering . Close # 34607
Fix compilation error peculiar to eclipse2018-09 __EoT__ Only the first of several vararg params needs explicit type info to resolve this . Oddly the ` testRemotableRequestsAllowRemoteIndices ` contains an identical construct but has no compilation error .
CCR : Do not follow if leader does not have soft-deletes __EoT__ We should not create a follower index and abort a follow request if the leader does not have soft-deletes . Moreover , we also should not auto-follow an index if it does not have soft-deletes .
TESTS : Use File Based Discovery in REST Tests __EoT__ * For 7.0 use file based discovery in REST tests * Relates # 33675
Removes Set Policy API in favour of setting index.lifecycle.name directly __EoT__ Still to do : - [ x ] Add a test for changing the policy using the update settings API and checking the new policy is used after the current phase completes Closes # 34302
Adding stack_monitoring_agent role __EoT__ # # Motivation Starting with 6.4.0 users have been able to monitor ( in the x-pack sense ) Kibana using Metricbeat . And starting with 6.5.0 users will be able to monitor Elasticsearch using Metricbeat as well . If users are using more than a Basic license with security enabled in Elasticsearch ( ` xpack.security.enabled : true ` ) , then Metricbeat will need to provide a username and password to connect to Elasticsearch . The username must belong to a user with a security role that has sufficient privileges for Metricbeat to **collect** monitoring data for the stack and **index** it into monitoring indices , ` .monitoring-* ` . For discussion purposes , let 's call this role ` stack_monitoring_agent ` . Metricbeat needs to call APIs of each Elastic stack product that it 's monitoring to **collect** metrics for these products . So the ` stack_monitoring_agent ` role must have sufficient privileges to call these APIs . Additionally , Metricbeat needs to connect to the Elasticsearch monitoring cluster in order to **index** monitoring data collected from various Elastic stack products into ` .monitoring-* ` indices . So the ` stack_monitoring_agent ` role must have
Auto configure all test tasks __EoT__ With this change , we apply the common test config automatically to all newly created test tasks instead of opting in specifically . For plugin authors using the plugin externally this means that the configuration will be applied to their RandomizedTestingTasks as well . The purpose of the task is to simplify setup and make it easier to change projects that use the ` test ` task but actually run integration tests to use a task called ` integTest ` for clarity , but also because we may want to configure and run them differently . E.x . using different levels of concurrency .
SQL : Implement null handling for ` IN ( v1 , v2 , ... ) ` __EoT__ Implemented null handling for both the value tested but also for values inside the list of values tested against . The null handling is implemented for local processors , painless scripts and Lucene Terms queries making it available for ` IN ` expressions occuring in ` SELECT ` , ` WHERE ` and ` HAVING ` clauses . Closes : # 34582
[ test ] Introduce strict deprecation mode for REST tests __EoT__ # 33708 introduced a strict deprecation mode that makes a REST request fail if there is a warning header in the response returned by Elasticsearch ( usually a deprecation message signaling that a feature or a field has been deprecated ) . This change adds the strict deprecation mode into the REST integration tests , and makes the tests fail if a deprecated feature is used . Also any test using a deprecated feature has been modified to pass the build . There are two notable exceptions : * High-level REST client ( addressed separately by # 34009 ) * YAML tests were the only REST integration tests that actually analyzed the http warnings headers and failed if there was an unexpected warning ( not defined as expected in the rest-spec tests ) . Adding the new mode to the YAML tests will not bring any tangible benefit .
[ CCR ] Renamed leader_cluster to remote_cluster __EoT__ and also some occurrences of clusterAlias to remoteCluster . Closes # 34682
[ CCR ] Change ShardFollowTask defaults __EoT__ Per # 31717 this commit changes the defaults to the following : Batch size of 5120 ops . Maximum of 12 concurrent read requests . Maximum of 9 concurrent write requests . This is not necessarily our final values but it 's good to have these as defaults for the purposes of initial testing .
Generate non-encrypted license public key __EoT__ After this commit ( https : //github.com/elastic/elasticsearch/commit/cca1a2a7cf55230a21f1b777009dfa90c428bb85 ) , Elasticsearch use fips-140 compliant key-pair to sign x-pack license , which public key is store in plain-text , but the key-pair-generator tool still generate old-style encrypted public key . This patch edit the key-pair-generator to generate a key pair that public key is not encrypted .
[ CCR ] Make leader cluster a required argument __EoT__ This change makes it no longer possible to follow / auto follow without specifying a leader cluster . If a local index needs to be followed then ` cluster.remote . *.seeds ` should point to nodes in the local cluster . Closes # 34258
[ CCR ] Cleanup pause follow action __EoT__ * Change the ` TransportPauseFollowAction ` to extend from ` TransportMasterNodeAction ` instead of ` HandledAction ` , this removes an async cluster state api call . * Introduced ` ResponseHandler ` that removes duplicated code in ` TransportPauseFollowAction ` and ` TransportResumeFollowAction ` . * Changed ` PauseFollowAction.Request ` to not use ` readFrom ( ) ` .
Scripting : Add back params._source access in scripted metric aggs __EoT__ Access to special variables _source and _fields were accidentally removed in recent refactorings . This commit adds them back , along with a test . closes # 33884
Test : Fix last reference to SearchScript __EoT__ This was accidentally left over when converting to FieldScript . closes # 34683
Add cluster-wide shard limit warnings __EoT__ In a future major version , we will be introducing a soft limit on the number of shards in a cluster based on the number of nodes in the cluster . This is intended to prevent operations which may unintentionally destabilize the cluster . This limit is configurable , and checked on operations which create or open shards and issue a warning if the operation would take the cluster over the configured limit . There is an option to enable strict enforcement of the limit , which turns the warnings into errors . In a future release , the option will be removed and strict enforcement will be the default ( and only ) behavior . This PR will be followed by a 7.0-only PR which removes the enforcement option and deprecation warnings and always enforces the limit . Relates to # 20705 . This is take 2 of # 32856
HLRC : Standardize access in *RequestConverters __EoT__ With the move to separate RequestConverters classes for each client , some of the access restrictions on the new classes are more open than the prior RequestConverters class . This standardizes the *RequestConverters classes as package-private , final , and with a private constructor so that no instances of them can be inadvertently created .
[ CCR ] Add qa test library __EoT__ Introduced test qa lib that all CCR qa modules depend on in order to avoid test code duplication . All qa multi node tests now extend from a new base class that adds several helper methods .
Ensure phase_time is set when in the `` new '' phase __EoT__ Since there 's no transition into the `` new '' phase it was n't set until the `` hot '' phase , so now we initialize it when initializing the policy context . Resolves # 34277
INGEST : Document Pipeline Processor __EoT__ * Added documentation for Pipeline Processor * Relates # 33188
Collapse pipeline aggs into single package __EoT__ Collapses all the ` org.elasticsearch.search.aggregations.pipeline . * ` packages down to a single level . - Restrict visibility of Aggregators and Factories - Move PipelineAggregatorBuilders up a level so it is consistent with AggregatorBuilders - Checkstyle line length fixes for a few classes - Minor odds/ends ( swapping to method references , formatting , private variables , deprecated logger , etc ) Relates # 22868
ingest : document index.default_pipeline __EoT__
CCR : Add TransportService closed to retryable errors __EoT__ Both testFollowIndexAndCloseNode and testFailOverOnFollower failed because they responded to the FollowTask a TransportService closed exception which is currently considered as a fatal error . This behavior is not desirable since a closing node can throw that exception , and we should retry in this case . This change adds TransportService closed error to the list of retryable errors . Closes # 34694 This approach is quite ugly - I am open to suggestions .
[ CCR ] Move leader_index and leader_cluster parameters from resume follow to put follow api __EoT__ As part of this change the leader index name and leader cluster name are stored in the CCR metadata in the follow index . The resume follow api will read that when a resume follow request is executed .
[ TEST ] Minor updates to rest api spec tests __EoT__ This pull request adds some missing feature fields for headers and corrects the format of the ` msearch ` request definition .
ingest : better support for conditionals with simulate ? verbose __EoT__ This commit introduces two corrections to the way simulate ? verbose handles conditionals on processors . 1 ) Prior to this change when executing simulate ? verbose for processors with conditionals that evaluate to false , that processor would still be displayed in the result set . What was displayed was correct , such that no changes to the document occurred . However , if the conditional evaluates to false , the processor should not even be displayed . 2 ) Prior to this change when executing simulate ? verbose for pipeline processors with conditionals , the individual steps would no longer be displayed . Commit e37e5df addressed the issue , but failed account for a conditional on the pipeline processor . Since a pipeline processor can introduce cycles and is effectively a single processor that encapsulates multiple other processors that are potentially guarded by a single conditional , special handling is needed to for pipeline and conditional pipeline processors . -- -- -- -- -- -- -- 1 ) showing steps when conditional evaluates to false `` ` PUT _ingest/pipeline/mypipeline0 { `` processors '' : [ { ``
[ Rollup ] Job deletion should be invoked on the allocated task __EoT__ We should delete a job by directly talking to the allocated task and telling it to shutdown . Today we shut down a job via the persistent task framework . This is not ideal because , while the job has been removed from the persistent task CS , the allocated task continues to live until it gets the shutdown message . This means a user can delete a job , immediately delete the rollup index , and then see new documents appear in the just-deleted index . This happens because the indexer in the allocated task is still running and indexes a few more documents before getting the shutdown command . In this PR , the transport action is changed to a ` TransportTasksAction ` , and we invoke ` onCancelled ( ) ` directly on the matching job . The race condition still exists after this PR ( albeit less likely ) , but this was a precursor to fixing the issue and a self-contained chunk of code . I 'll followup with a second PR to fix the race itself .
[ MINOR ] Docs .security index is never auto-created __EoT__ @ droberts195 reported that the ` .security-* ` index is not auto-created anymore . This is true since a long time ( cec90f452a6d9763ae7d9f233 I guess ) .
CCR : Requires soft-deletes on the follower __EoT__ Since # 34412 and # 34474 , a follower must have soft-deletes enabled to work correctly . This change requires soft-deletes on the follower . Relates # 34412 Relates # 34474
re-enable bwc tests __EoT__ Part of the workflow for https : //github.com/elastic/elasticsearch/pull/34724 # issuecomment-432226546 .
Empty GetAliases authorization fix __EoT__ The bug that this is fixing was introduced in # 31952 and was discussed here https : //github.com/elastic/elasticsearch/pull/31952 # discussion_r222623667 . The bug is about aliases authorization . A user might see aliases which he is not authorized to see . This happens when the user is **not authorized to see any** alias and the ` GetAlias ` request is empty which is a marking that **all aliases** are requested . No aliases should be returned in the response but , due to this bug , all aliases are woefully returned . @ javanna When this is merged I will investigate removing ` originalAliases ` from the ` GetAlias ` request .
INGEST : Document Processor Conditional __EoT__ Relates # 33188
[ ILM ] Add null check to CopyExecutionStateStep __EoT__ Adds a null check for IndexMetaData similar to those in # 33455 .
[ CCR ] Add total fetch time took stat __EoT__ This new stat keeps track how much time was spent on fetches from the leader cluster perspective . The current name of this new stat is ` total_fetch_took_time_millis ` and it does n't describe well what this stat represents . I 'm not sure what would be a good name . Maybe ` total_fetch_leader_time_millis ` or ` total_fetch_remote_time_millis ` to indicate it is the same as ` total_fetch_time_millis ` but from a different perspective ? cc : @ bleskes / @ jasontedor
SQL : Support pattern against compatible indices __EoT__ Extend querying support on multiple indices from being strictly identical to being just compatible . Use FieldCapabilities API ( extended through # 33803 ) for mapping merging . Close # 31837 # 31611
[ CCR ] Auto follow pattern APIs adjustments __EoT__ * Changed the resource id of auto follow patterns to be a user defined name in all auto follow pattern crud APIs . * Which leader cluster to use is now specified in the body of an auto follow pattern . * Fail when an unfollowed leader index matches with two or more auto follow patterns . The unfollow leader index will then not be followed and the error can be seen in the auto follow stats API . The reason this validation is needed is , because multiple auto follow patters can be defined for a single leader cluster .
[ Test ] Remove dead code from ExceptionSerializationTests __EoT__ The ` ignore ` set contains entries of type Class < ? > , but the check is performed on Path objects . This always returns false so is useless currently . Looking at the first commit of this test shows that this already was there from the start of this test , so this behaviour seems to have never resulted in anything . My current guess is is can be removed .
A small typo in migration-assistance doc __EoT__ typo - missing word be < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ] ( https :
ingest : processor stats __EoT__ Note - this change was originally merge with PR # 34202 , but was reverted due to a failing test https : //github.com/elastic/elasticsearch/pull/34724/commits/27c70774c2555a7909db85e8d4a44f52d5db0c94 has been introduced to fix the failing test . All other code has been reviewed ( cherry-picked from before reverted ) -- -- -- -- -- - This change introduces stats per processors . Total , time , failed , current are currently supported . All pipelines will now show all top level processors that belong to it . Failure processors are not displayed , however , the time taken to execute the failure chain is part of the stats for the top level processor . The processor name is the type of the processor , ordered as defined in the pipeline . If a tag for the processor is found , then the tag is appended to the type . Pipeline processors will have the pipeline name appended to the name of the name of the processors ( before the tag if one exists ) . If more then one pipeline is used to process the document , then each pipeline will carry its own stats . The outer most pipeline
SQL : Implement IN ( value1 , value2 , ... ) expression . __EoT__ Implement the functionality to translate the ` field IN ( value1 , value2 , ... ) expressions to proper Lucene queries or painless script depending on the use case . The ` IN ` expression can be used in SELECT , WHERE and HAVING clauses . Closes : # 32955
Tests : Add checks to GeoDistanceQueryBuilderTests __EoT__ Adds checks for parsed geo distance query . It is a bit hackish since it compares with query 's toString ( ) output , but it is better than no checks . The parsed query itself has default visibility , so we can not access it here unless we move the test to org.apache.lucene.document package . Fixes # 34043
INGEST : Rename Pipeline Processor Param . __EoT__ * ` name ` is more readable/ergonomic than having ` pipeline ` twice
Core : Move IndexNameExpressionResolver to java time __EoT__ This switches from joda time to java time when resolving index names using date math . This commit also removes two non registered settings from the code , which could not be used anyway . An unused method was removed as well . Relates # 27330
Force Merge : clarify execution and storage requirements __EoT__ Because of the additional space required you I was wondering how operations are executed : sync or async . Docs did not give me an answer . Using trial and error I found out it is executed synchronously . I thought the information to be useful for others too .
SQL : Implement ` CONVERT ` , an alternative to ` CAST ` __EoT__ ` CONVERT ` works exactly like cast with slightly different syntax : ` CONVERT ( < value > , < data_type ) ` as opposed to ` CAST ( < value > AS < data_type > ) ` Moreover it support format of the MS-SQL data types ` SQL_ < type > ` , e.g . : ` SQL_INTEGER ` Closes : # 34513
[ Build ] Simplify testclusters configuration __EoT__ Remove interface until we really need it .
SQL : Allow min/max aggregates on date fields __EoT__ Allow ` MIN ( ) ` and ` MAX ( ) ` aggregate functions to operate also on arguments of type DATE apart from the numeric ones . Fixes : # 34477
Upgrade forbiddenapis to 2.6 __EoT__ - version bump - 11 is now supported , so no need to restrict it to 10 - adjust to output change in forbiddenapis Closes # 33759 ( w.r.t . the version upgrade , but the discussion there is welcome to continue )
SQL : the SSL default configuration should n't override the https protocol if used __EoT__ This fixes the bug reported in https : //github.com/elastic/elasticsearch/issues/33817 .
Update SSLDriver for JDK 11 changes __EoT__ JDK11 introduced some changes with the SSLEngine . A number of error messages were changed . Additionally , there were some behavior changes in regard to how the SSLEngine handles closes during the handshake process . This commit updates our tests and SSLDriver to support these changes .
Make sure to use the type _doc in the REST documentation . __EoT__ * Replace custom type names with _doc in REST examples . * Avoid using two mapping types in the percolator docs . * Rename doc - > _doc in the main repository README . * Also replace some custom type names in the HLRC docs .
[ Docs ] clarification about cardinality accuracy __EoT__ Adds a bit more clarification about how accuracy is dependent on the dataset in question . The cardinality docs were actually updated with a better description some time after # 18231 was opened , but I thought a tiny bit more clarification could n't hurt . : ) Closes # 18231
Security : do n't call prepare index for reads __EoT__ The security native stores follow a pattern where ` SecurityIndexManager # prepareIndexIfNeededThenExecute ` wraps most calls made for the security index . The reasoning behind this was to check if the security index had been upgraded to the latest version in a consistent manner . However , this has the potential side effect that a read will trigger the creation of the security index or an updating of its mappings , which can lead to issues such as failures due to put mapping requests timing out even though we might have been able to read from the index and get the data necessary . This change introduces a new method , ` checkIndexVersionThenExecute ` , that provides the consistent checking of the security index to make sure it has been upgraded . That is the only check that this method performs prior to running the passed in operation , which removes the possible triggering of index creation and mapping updates for reads . Additionally , areas where we do reads now check the availability of the security index and can short circuit requests . Availability in this context means that
Deprecate type exists requests . __EoT__
Update synonym-tokenfilter.asciidoc __EoT__ Remove ugly double-dot .
Enable using defined setups from test setup in docs __EoT__ In the docs tests , we have pre-defined setups in the build.gradle file , and we can also define test setup sections within the doc page itself . Alas , these two are incompatible in that if you try to use a pre-defined setup alongside a test setup section , the pre-defined setup will be silently ignored . This commit enables pre-defined setup sections to be used together with test setup sections . The ordering here is that pre-defined setup sections will be executed first , followed by the test setup section .
Allow set section in setup section of REST tests __EoT__ This commit enables using a set section in the setup section of REST tests .
ingest : processor stats __EoT__ This change introduces stats per processors . Total , time , failed , current are currently supported . All pipelines will now show all top level processors that belong to it . Failure processors are not displayed , however , the time taken to execute the failure chain is part of the stats for the top level processor . The processor name is the type of the processor , ordered as defined in the pipeline . If a tag for the processor is found , then the tag is appended to the type ( colon separated ) . Pipeline processors will have the pipeline name appended ( colon separated ) to the name of the pipeline ( before the tag if one exists ) . If more then one pipeline is used to process the document , then each pipeline will carry its own stats . The outer most pipeline will also include the inner most pipeline stats . Conditional processors will only be included in the stats if the condition evaluates to true . Best attempts are made to carry forward processor metrics between cluster state changes . If no changes are made to
Use trial license in docs tests __EoT__ This commit switches to using a trial license in the docs tests that run on the default distribution . This is needed so that docs tests can be executed against non-basic features .
Scripting : Convert script fields to use script context __EoT__ This commit removes the use of SearchScript for script fields and adds a new FieldScript .
ingest : processor stats __EoT__ This change introduces stats per processors . Total , time , failed , current are currently supported . All pipelines will now show all top level processors that belong to it . Failure processors are not displayed , however , the time taken to execute the failure chain is part of the stats for the top level processor . The processor name is the type of the processor , ordered as defined in the pipeline . If a tag for the processor is found , then the tag is appended to the type ( colon separated ) . Pipeline processors will have the pipeline name appended ( colon separated ) to the name of the pipeline ( before the tag if one exists ) . If more then one pipeline is used to process the document , then each pipeline will carry its own stats . The outer most pipeline will also include the inner most pipeline stats . Conditional processors will only be included in the stats if the condition evaluates to true . Best attempts are made to carry forward processor metrics between cluster state changes . If no changes are made to
Fix JDK references in contributing docs __EoT__ After we bumped the JDK compiler minimum requirements to JDK 11 , we missed updating the contributing docs to point to JDK 11 instead of JDK 10 . This commit fixes that . Additionally , when we stopped requiring JDK 7 to run the reindex from old tests , we did not update the contributing docs to reflect this . This commit also fixes that . Closes # 34668 , relates # 34103 , relates # 34646
Separate remote clusters docs from CCS __EoT__ With remote clusters taking on a larger role , we have make the infrastructure more generic than being tied to cross-cluster search ( CCS ) . We want to refer to the remote clusters configuration in the cross-cluster replication ( CCR ) docs . Yet , these docs are still tied to CCS . This commit extracts the remote clusters docs from CCS ( with some wording changes to make them more general ) so that we can refer to them in the CCR docs . Relates # 33413
HLRC : Delete role API __EoT__ Adds the `` Delete role '' API to the high-level REST client .
Enable the Gradle daemon __EoT__
CCR : Following primary should process NoOps once __EoT__ This is a follow-up for https : //github.com/elastic/elasticsearch/pull/34288 # discussion_r223584992 . Relates # 34288
Switch old reindex tests to use use JDK 8 __EoT__ This commit switches the old reindex tests to use JDK 8 . This enables us to not require that JDK 7 be installed , easing the burden on developers . Closes # 34341
CCR : Replicate existing ops with old term on follower __EoT__ Since # 34288 , we might hit deadlock if the FollowTask has more fetchers than writers . This can happen in the following scenario : Suppose the leader has two operations [ seq # 0 , seq # 1 ] ; the FollowTask has two fetchers and one writer . 1 . The FollowTask issues two concurrent fetch requests : { from_seq_no : 0 , num_ops:1 } and { from_seq_no : 1 , num_ops:1 } to read seq # 0 and seq # 1 respectively . 2 . The second request which fetches seq # 1 completes before , and then it triggers a write request containing only seq # 1 . 3 . The primary of a follower fails after it has replicated seq # 1 to replicas . 4 . Since the old primary did not respond , the FollowTask issues another write request containing seq # 1 ( resend the previous write request ) . 5 . The new primary has seq # 1 already ; thus it wo n't replicate seq # 1 to replicas but will wait for the global checkpoint to advance at
Geo : Do n't flip longitude of envelopes crossing dateline __EoT__ When a envelope that crosses the dateline is specified as a part of geo_shape query is parsed it should n't have its left and right points flipped . Fixes # 34418
Fix completion suggester 's score tie-break __EoT__ The shard suggestion sort uses a different tie-break than the one that is used to merge different shards responses . The former uses the internal document identifier when scores are the same whereas the latter compares the surface form first . Because of this discrepancy some suggestion outputs are linked to the wrong documents because the merge sort reorders the shard suggestions differently . This change fixes this bug by duplicating the Lucene collector in order to be able to apply the same tiebreak strategy than the merge sort . This logic will be removed when https : //issues.apache.org/jira/browse/LUCENE-8529 is fixed . Closes # 34378
HLRC XPack Protocol clean up : Licence , Misc __EoT__ Move parts related to XPack Licence and Misc from protocol to client Relates # 34451
Remove references to multiple types in the search documentation . __EoT__
[ HLRC ] Add Start/Stop Watch Service APIs . __EoT__ This adds both the start water service and stop watcher service apis to the HLRC . Includes new request objects , tests , and documentation .
Fill LocalCheckpointTracker with Lucene commit __EoT__ Today we rely on the LocalCheckpointTracker to ensure no duplicate when enabling optimization using max_seq_no_of_updates in the FollowingEngine . The problem is that the LocalCheckpointTracker is not fully reloaded when opening an engine with an out-of-order index commit . Suppose the starting commit has seq # 0 and seq # 2 , then the current LocalCheckpointTracker would return `` false '' when asking if seq # 2 was processed before although seq # 2 in the commit . This change scans the existing sequence numbers in the starting commit , then marks these as completed in the LocalCheckpointTracker to achieve the consistent state between LocalCheckpointTracker and Lucene commit . ( This is an unreleased bug in the FollowingEngine of CCR ) . Relates # 33656
[ TEST ] [ ML ] Reinstate date parsing test __EoT__ The test was muted due to a bug in an early access build of Java 11 which is now resolved https : //bugs.java.com/bugdatabase/view_bug.do ? bug_id=JDK-8206980
HLRC : Add ILM Retry __EoT__ * Relates # 33100 -- -- -- -- -- -- -- -- -- -- * Unfortunately I only found an easy way to test the negative case here ( retry fails ) . We have the same issue in the rest API tests where we also seem to only test the failure though .
Rollup add default metrics to histo groups __EoT__ This adds default metrics ` [ min , max ] ` to histogram groupings ( numeric and date ) . I was not 100 % sure to put these default metrics , but keeping them as simple metric aggregations keeps it simple and makes it more obvious to the end user what capabilities are there for what fields . If a user provides a metric for a histogram field , it is assumed that they want that specific metric only . Docs need to be updated as well . closes # 34379 P.S . Would be nice to get this into 6.5 , but could be delayed to a next version if need be .
Fix threshold frequency computation in Suggesters __EoT__ The ` term ` and ` phrase ` suggesters have different options to filter candidates based on their frequencies . The ` popular ` mode for instance filters candidate terms that occur in less docs than the original term . However when we compute this threshold we use the total term frequency of a term instead of the document frequency . This is not inline with the actual filtering which is always based on the document frequency . This change fixes this discrepancy and clarifies the meaning of the different frequencies in use in the suggesters . It also ensures that the threshold does n't overflow the maximum allowed value ( Integer.MAX_VALUE ) . Closes # 34282
Check stemmer language setting early __EoT__ Currently the StemmerTokenFilterFactory checks the validity of the language setting only when the first TokenStream is processed . Instead we should throw an error earlier at mapping creation time . This change adds a check to the StemmerTokenFilterFactory constructor that checks for a valid ` language ` setting by trying to create a new TokenStream from an empty input stream . This will throw errors about wrong language settings early on . Closes # 34170
Add SAML Redirect Signing test __EoT__ Add a test to verify that we generate correct signatures for our SAML2 Single Logout requests when using the redirect binding .
Docs - removed experimental/beta markers from adjacency matrix aggregation __EoT__ This is now a GA feature
Core : Parse floats in epoch millis parser __EoT__ In order to stay BWC compatible with joda time , the epoch millis date formatter needs to properly parse dates with a dot like ` 123.45 ` . This adds this functionality for the epoch millis parser in the same way as for the epoch seconds parser .
Remove unused methods in ValueType __EoT__ The removed methods seem unused in the rest of the project .
Handle missing user in user privilege APIs __EoT__ For user/_has_privileges and user/_privileges , handle the case where there is no user in the security context . This is likely to indicate that the server is running with a basic license , in which case the action will be rejected with a non-compliance exception ( provided we do n't throw a NPE ) . The implementation here is based on the _authenticate API . Resolves : # 34567
[ HLRC ] Add support for Delete role mapping API __EoT__ Building on expression dsl and create role mapping API , this commit adds support for delete role mapping API to high level client .
Add GetRollupCaps API to high level rest client __EoT__ This is based on @ tlrx 's branch in # 32703 , so a review should probably hold off until that PR is merged so that this diff is a little cleaner . The GetRollupIndexCaps API uses basically the same serialization of objects with a slightly different endpoint , but this PR was getting big enough already so I 'll do that one in a followup . Related # 29827
[ DOCS ] Adds new lazy ml node setting __EoT__ We now have a new setting that allows a number of lazily provisioned ML nodes .
Rework ILM build to separate integration tests __EoT__ Having integration tests separated from the unit tests in the qa directory works much more smoothly with our testing infrastructure , matches what other plugins do , and tests in a more `` real '' deployment scenario by having all plugins installed . This should fix the current build problems with the ` index-lifecycle ` branch .
Docs : Reenable rollup docs tests __EoT__ We 'd disabled them because we did n't have a way to clean up after each test . I implemented # 34342 which adds the clean ups so now we can re-enable the tests . In the ` setup ` sections we have to use ` raw ` requests instead of ` x-pack ` requests because we do n't have the json config for x-pack . Closes # 33319
[ Rollup ] Add support for date histo ` format ` when searching __EoT__ Adds support for query-time formatting of the date histo keys when executing a rollup search . Closes # 34391
Change wording for FIPS 140-2 __EoT__ Co-authored-by : derickson < dave @ elastic.co >
Fixing line lengths in murmur3 and hdfs plugins __EoT__ Murmu3 and HDFS plugins were removed from the style check suppression . This fixes their line lengths .
[ TEST ] Reduce forecast disk space requirement for tests __EoT__ The setting that reduces the disk space requirement for the forecasting integration tests was accidentally removed in # 31757 when files were moved around . This change simply adds back the setting that existed before that .
SQL : return constants for all matching records in constants-containing SELECTs __EoT__ This PR fixes https : //github.com/elastic/elasticsearch/issues/31863 by : - making a constant to be used outside aggregation only queries : ` SELECT 123 FROM index ` - not skipping an ES query in case of constants-only selects - loosen the binary pipe restriction of being used only in aggregation queries
[ CCR ] Split cluster alias from leader index field into its own field in follow APIs __EoT__ and also validate whether the cluster alias has been configured .
Watcher : Validate email adresses when storing a watch __EoT__ Right now , watches fail on runtime , when invalid email addresses are used . All those fields can be checked on parsing , if no mustache is used in any email address template . In that case we can return immediate feedback , that invalid email addresses should not be specified when trying to store a watch . **Reviewers note** : This is rather for discussion than for review . Do you think this makes sense despite the additional check if mustache templates are used or not ? When mustache is used , than this can still fail on runtime - even though the majority of the cases that I have seen are indeed using static email addresses when defining a watch . Closes # 33980
[ Tests ] Correct map lookup in ReplicationTrackerTests __EoT__ Fixing what looks like an unintentional glitch in this test . ` checkpoints ` is a ` Map < String , CheckpointState > ` , so lookups should most likely be Strings too .
Add get-user-privileges API __EoT__ The get-user-privileges API ( ` _xpack/security/user/_privileges ` ) returns the current user 's effective privileges in a role-like structure . Because the effective privileges are the result of merging potentially multiple roles , the resulting structure has a few differences to the standard role JSON - some fields that are single values in roles , are multivariate ( arrays ) in this API . It is only possible to return the current user 's privileges , but the es-security-runas-user header can be used to load another user as the current effective user . Resolves : # 32777
Scripting : Convert domainSplit function for ML to whitelist __EoT__ This commit moves the definition of domainSplit into java and exposes it as a painless whitelist extension . The method also no longer needs params , and version which ignores params is added and deprecated .
Increment settings version when upgrading index __EoT__ When we upgrade an index , we set the settings version upgraded setting . This should be considered a settings change , and therefore we need to increment the settings version . This commit addresses that . Relates # 34429
TEST : Capture replication targets when ReplicationGroup ready __EoT__ Today , WriteReplicationAction uses the list of replication targets directly from the primary shard of ReplicationGroup . It should be fine except when we add/remove or promote a shard while a WriteReplicationAction is executing . We have encountered these two issues : 1 . Replicas are not found in the replication targets . This happens because we remove a replica but the WriteReplicationAction still uses the old replication targets which include the removed replica . `` ` ERROR 30.5s J3 | ShardFollowTaskReplicationTests.testFailLeaderReplicaShard < < < FAILURES ! 2 > ... 1 more 2 > Caused by : java.util.NoSuchElementException : No value present 2 > at java.util.Optional.get ( Optional.java:135 ) 2 > at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase $ ReplicationAction $ ReplicasRef.performOn ( ESIndexLevelReplicationTestCase.java:590 ) 2 > at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplica ( ReplicationOperation.java:166 ) 2 > at org.elasticsearch.action.support.replication.ReplicationOperation.performOnReplicas ( ReplicationOperation.java:153 ) 2 > at org.elasticsearch.action.support.replication.ReplicationOperation.execute ( ReplicationOperation.java:124 ) 2 > at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase $ ReplicationAction.execute ( ESIndexLevelReplicationTestCase.java:517 ) 2 > at org.elasticsearch.index.replication.ESIndexLevelReplicationTestCase $ ReplicationGroup.executeWriteRequest ( ESIndexLevelReplicationTestCase.java:240 ) `` ` CI : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+6.x+periodic/112/consoleText 2 . Access ReplicationGroup from a primary shard which has n't activated the primary-mode yet . This is because we wo n't activate the primary-mode
Analysis : Wrap at 140 columns __EoT__ Applies our standard column width to all analysis plugins .
Expressions : Wrap at 140 columns __EoT__ Apply our standard line length to all of the java files in the ` lang-expression ` module .
SMB : Wrap at 140 columns __EoT__ Applies our max column width to the store-smb project .
Search : Wrap lucene classes at 140 columns __EoT__ Applies our line length guidance for all classes in the server in ` lucene ` directories *except* ` XMoreLikeThis ` . The only long line in ` XMoreLikeThis ` says `` remove this when we upgrade to Lucene 5 . Given that we 're on Lucene 8 , this is a little terrifying and deserves another look .
TESTS : Remove Dead Code in Test Infra . __EoT__ * None of this infrastructure is used * Some redundant throws and resulting catch code removed
Pass the host name on as ` server_name ` if proxy mode is on __EoT__ In remote cluster setup if we see a configured proxy we should set the seed nodes host name as the ` server_name ` to trigger SNI based routing even for seed nodes . Since remote cluster connections are plain TCP connections we have to set the host manually since the other side ca n't take it from the request URL like in the HTTP case . This also adds some more informative logging to remote cluster connection .
add start trial API to HLRC __EoT__ Introduces client-specific request and response classes that do not depend on the server The ` type ` parameter is named ` licenseType ` in the response class to be more descriptive . The parts that make up the acknowledged-required response are given slightly different names than their server-response types to be consistent with the naming in the put license API @ hub-cap I believe this is the blessed way to do this as of now , let me know if anything 's not in the right place This takes over from https : //github.com/elastic/elasticsearch/pull/32799 which I 'll close
Rollup : Consolidate rollup cleanup for http tests __EoT__ This moves the rollup cleanup code for http tests from the high level rest client into the test framework and then entirely removes the rollup cleanup code for http tests that lived in x-pack . This is nice because it consolidates the cleanup into one spot , automatically invokes the cleanup without the test having to know that it is `` about rollup '' , and should allow us to run the rollup docs tests . Part of # 34530
[ ML ] Add option to allow jobs to be opened when there are no ML nodes __EoT__ *Original comment by @ droberts195 : * At present if there are no ML nodes then opening an ML job will fail immediately due to the checks in ` OpenJobAction.validate ( ) ` . Given the way it is proposed to add lazy ML nodes to Cloud LINK REDACTED ) , there is a requirement to relax this check when running in Cloud . We need to add a boolean setting that allows jobs to be opened if there are no ML nodes at all in the cluster . However , jobs should not be allowed to open when there _are_ ML nodes in the cluster but they are all full to capacity . The new setting will default to ` false ` , but be set to ` true ` in Cloud clusters . A job that is opened when there are no ML nodes in the cluster will stay in the ` opening ` state until an ML node joins the cluster , at which point the job will get allocated to the ML node .
LLREST : Wrap at 140 columns __EoT__ Wraps a single line in a test to fit on 140 characters , removing the only checkstyle suppression for the clients directory .
Add Debug/Trace logging to token service __EoT__ The token service has fairly strict validation and there are a range of reasons why request may be rejected . The detail is typically returned in the client exception / json body but the ES admin can only debug that if they have access to detailed logs from the client . This commit adds debug & trace logging to the token service so that it is possible to perform this debugging from the server side if necessary .
Cleanup : removing unused class __EoT__ This PR just removes the ` USER_INFO ` class constants that are n't actually being used anywhere . Once these are removed , there is also need for their type to exist , the class ` BuiltinUserInfo ` , so this PR removes this class as well .
SCRIPTING : Move sort Context to its Own Class __EoT__ * SCRIPTING : Move sort Context to its Own Class * Extracted SortScript * Kept mechanics close to what they were with SearchScript * ` execute ` appears to return ` String ` as well as ` Number ` in certain scenarios so I had to keep the ` Object ` return here relates # 33602
Switch to parametric CI jobs __EoT__ CI will already take the new parameters into account .
MINOR : Remove Deadcode in X-Pack Tests __EoT__ Just two random things I found while researching other things
initial api reference docs for ILM __EoT__ initial attempt at filling out the API reference docs for some ILM endpoints
Security : do n't call prepare index for reads __EoT__ The security native stores follow a pattern where ` SecurityIndexManager # prepareIndexIfNeededThenExecute ` wraps most calls made for the security index . The reasoning behind this was to check if the security index had been upgraded to the latest version in a consistent manner . However , this has the potential side effect that a read will trigger the creation of the security index or an updating of its mappings , which can lead to issues such as failures due to put mapping requests timing out even though we might have been able to read from the index and get the data necessary . This change introduces a new method , ` checkIndexVersionThenExecute ` , that provides the consistent checking of the security index to make sure it has been upgraded . That is the only check that this method performs prior to running the passed in operation , which removes the possible triggering of index creation and mapping updates for reads . Additionally , areas where we do reads now check the availability of the security index and can short circuit requests . Availability in this context means that
Assume that rollover datemath tests run on the same day . __EoT__ in # 28741 RolloverIT fails because we are cutting over to the next day while the test executes . We assume that this does n't happen based on the assertions in the test . This adds a assumeTrue to ensure we are at least 5 min away form a date-flip . Closes # 28741
Build : Drop missing checkstyle suppressions __EoT__ This drops checkstyle suppressions that refer to files that do n't exist since those suppressions do n't do anything other than make us feel bad . It also updates some suppressions to more closely match the path to the file that they suppress . These suppressions are still needed but didn't pass the `` the file exists '' test because they were n't precise . It is just easier on future-me if they are precise .
HLRC : Add remove index lifecycle policy __EoT__ This change adds the command RemoveIndexLifecyclePolicy to the HLRC . This uses the new TimeRequest as a base class for RemoveIndexLifecyclePolicyRequest on the client side .
JDBC : Fix artifactId in pom __EoT__ We 're publishing jdbc into our maven repo as though its artifactId is ` x-pack-sql-jdbc ` but the pom listed the artifactId as ` jdbc ` . This fixes the pom to line up with where we 're publishing the artifact . Closes # 34399
Add ` date ` value type support for certain metrics in Rollup __EoT__ Currently , when creating a new ` RollupJobConfig ` only numeric field mapper types are supported for the different metrics . Support for ` min ` , ` max ` and , ` value_count ` over ` date ` fields should be added . Since ` date ` can just be treated as a ` long ` , hopefully the change is not too pervasive . This issue is blocking ML support for rollup indices : # 31999 Pinging @ colings86 @ polyfractal
HLRC : Add support for XPack Post Start Basic Licence API __EoT__ HLRC : Add support for XPack Post Start Basic Licence API Relates to # 29827
Add delete rollup job support to HL REST Client __EoT__ Related to # 29827 , add support for deletion of a job to HLRC . A few notes on the PR : - refactored to use ` AcknowledgedResponse ` to remove a small bit of duplication
Change CCR internal integration tests to use a leader and follower cluster instead of a single clustrer __EoT__ * Extracted the ` ShardChangesIT # testGetOperationsBasedOnGlobalSequenceId ( ) ` test to its own test , because it just tests the shard changes api . * Renamed AutoFollowTests to AutoFollowIT , because it is an integration test . * Renamed ShardChangesIT to IndexFollowingIT , because shard changes it the name of an internal api and is n't a good name for an integration test . * Introduced ccr base test class that sets up a leader and follower cluster and change ` IndexFollowingIT ` and ` AutoFollowIT ` to use this new base ccr test class . The ` AutoFollowIT ` needs to restart the clusters between each tests , because it is using auto follow stats in assertions . Auto follow stats are only reset by stopping the elected master node .
Disallow negative query boost __EoT__ This change disallows negative query boosts . Negative scores are not allowed in Lucene 8 so it is easier to just disallow negative boosts entirely . We should also deprecate negative boosts in 6x in order to ensure that users are aware when they 'll upgrade to ES 7 . Relates # 33309
Add dedicated test for chain replication __EoT__ This commit adds a dedicated test that chain replication leader - > middle - > follow is successful .
Test fix - GraphExploreResponse HLRC xContent ordering is unreliable __EoT__ XContent ordering is unreliable when derived from map insertions but the parsed objects ’ .equals ( ) methods have the sort logic required to prove connections and vertices are correct . Disabled the xContent equivalence checks . Closes # 33686
Watcher : Remove test-only setting __EoT__ In 54cb890eb7ca7b9704d0031902f37f29202c2904 a setting for testing only was introduced , that delayed the start up of watcher . With the changes of how is watcher is started/stopped over time , this is not needed anymore . I ran the watcher tests about 50 times on my local CI and keep running them for some time , but there were no failures so far .
HLRC : Fix the tags to be in sync with docs . __EoT__ Correct the tags mapping with the documentation . This was added in https : //github.com/elastic/elasticsearch/pull/34171
Create/Update role mapping API __EoT__ We added support for role mapper expression DSL in # 33745 , that allows us to build the role mapper expression used in the role mapping ( as rules for determining user roles based on what the boolean expression resolves to ) . This change now adds support for create/update role mapping API to the high-level rest client .
Do not update number of replicas on no indices __EoT__ Today when submitting an update settings request to update the number of replicas with a wildcard that does not match any indices and allow no indices is set to true , the request ends up being interpreted as updating the number of replicas for all indices . That is , consider the following sequence : `` ` PUT /test-index { `` settings '' : { `` index.number_of_replicas '' : 0 } } `` ` `` ` PUT /non-existent-*/_settings ? expand_wildcards=open & allow_no_indices=true { `` settings '' : { `` index.number_of_replicas '' : 1 } } `` ` `` ` GET /test-index/_settings `` ` The latter will show that the number of replicas on test-index is now one . This is surprising , and should be considered a bug . The underlying problem here is treating no indices in the underlying methods used to update the routing table and the metadata as meaning all indices . This commit takes away this assumption . Tests that relied on this behavior have been changed to no longer rely on this . A test for this situation is added in ` UpdateNumberOfReplicasIT ` .
Core : Remove two methods from AbstractComponent __EoT__ This removes another two methods from ` AbstractComponent ` . One isn't used at all and another is only used in a single class in our resource watcher to log messages about settings we removed years ago . I've dropped the logging and removed that method as well .
Use RoleRetrievalResult for better caching __EoT__ Security caches the result of role lookups and negative lookups are cached indefinitely . In the case of transient failures this leads to a bad experience as the roles could truly exist . The CompositeRolesStore needs to know if a failure occurred in one of the roles stores in order to make the appropriate decision as it relates to caching . In order to provide this information to the CompositeRolesStore , the return type of methods to retrieve roles has changed to a new class , RoleRetrievalResult . This class provides the ability to pass back an exception to the roles store . This exception does not mean that a request should be failed but instead serves as a signal to the roles store that missing roles should not be cached and neither should the combined role if there are missing roles . As part of this , the negative lookup cache was also changed from an unbounded cache to a cache with a configurable limit . Relates # 33205
Fix spelling mistake . __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? Yes - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? Yes - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? Yes - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . No - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? Yes - If you are submitting this code for a class then read our [ policy ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md #
[ DOCS ] improve formatting of Query String Query doc page __EoT__ Hello dear sirs , This pull request is to fix what seems to be a formatting issue in the [ Query String Query ] ( https : //www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html # _multi_field ) doc page ( section `` Multi Field '' ) . To have a complete idea please see screenshots attached . Before : ! [ 2018-10-13_query_string_before ] ( https : //user-images.githubusercontent.com/7804425/46907208-6aea5000-cf0f-11e8-9cf0-1d8b0df3a161.png ) After : ! [ 2018-10-13_query_string_after ] ( https : //user-images.githubusercontent.com/7804425/46907211-6de54080-cf0f-11e8-9f34-7b557106b4ec.png ) It looked like the two `` Parameters '' tables should have been one , and I made them so . Doc tests pass ( ` ./gradlew : docs : check ` ) , also the `` after '' screenshot was created from an HTML built with an ` elastic/docs ` script . Please tell me if you find this useful or if there are any issues I am open to discussion . Thank you !
Tests : Handle epoch date formatters edge cases __EoT__ This commit handles cases testing withLocale and withZone when the zone and locale in question is the same as the special base case . This can happen sometimes since the locale and zoneids are randomized .
Fix handling of empty keyword in terms aggregation __EoT__ Empty values on keyword fields are filtered by the ` map ` execution mode of the ` terms ` aggregation . This commit restores them as valid buckets . Closes # 34434
[ Monitoring ] Add additional necessary mappings for apm-server __EoT__ Resolves https : //github.com/elastic/kibana/issues/23959 This PR adds necessary mappings for an existing field currently used in the UI as well as an additional field that the UI will use . Update : This PR also includes [ fields from here ] ( https : //github.com/elastic/stack-monitoring/issues/3 # issuecomment-427389611 ) and [ from here ] ( https : //github.com/elastic/kibana/issues/23862 ) cc @ graphaelli
MINOR : Remove Dead Code in ExpressionTermSetQuery __EoT__ No need to pass the ` null ` here .
HLRC : Get SSL Certificates API __EoT__ This change adds support for the get SSL certificate API to the high level rest client .
Change shard changes api 's threadpool from get to search __EoT__
Update TESTING.asciidoc title __EoT__ Minor change displaying ` Testing ` as ` h1 ` instead of plain text . Asciidoc anchorId can not contain white spaces , hence the rendering till now has been ` [ [ Testing Framework Cheatsheet ] ] = Testing ` as plain text . The change is defining ` TestingFrameworkCheatsheet ` as an anchor to the block ( by simply removing the white spaces ) , thus ` = Testing ` can be correctly parsed as ` h1 ` . The anchor is not used in a cross reference , so this change should not brake any references .
Tests : Fix DateFormatter equals tests with locale __EoT__ This commit removes randomization of locale for DateFormatter equals tests , instead using explicit locales . The test framework already randomizes locales , so the random choice of the second locale can sometimes be equal to the already chosen locale . Randomization also does not provide any extra protection , as the equality of DateFormatter does not implement equality of the locales itself . closes # 34337
Docs : Remove unnecessary qualifier from wildcard import note __EoT__ This commit removes the suggestions to send a PR with instructions for more IDEs on disabling wildcard imports . This is not explicitly needed both because the main IDEs instructions already exist , and any part of the docs are welcome for PRs to add more clarity . closes # 34415
[ Painless ] Add a Map for java names to classes for use in the custom classloader __EoT__ This fixes a bug that was n't including the class used for a static import where only the static import is whitelisted . This affects extensions that use classes that are not part of the core .
NETWORKING : Upgrade Netty to 4.1.30 __EoT__ * closes # 34411
Allow an AuthenticationResult to return metadata __EoT__ PR # 34290 made it impossible to use thread-context values to pass authentication metadata out of a realm . The SAML realm used this technique to allow the SamlAuthenticateAction to process the parsed SAML token , and apply them to the access token that was generated . This new method adds metadata to the AuthenticationResult itself , and then the authentication service makes this result available on the thread context . Closes : # 34332
[ ML ] Add an ingest pipeline definition to structure finder __EoT__ The ingest pipeline that is produced is very simple . It contains a grok processor if the format is semi-structured text , a date processor if the format contains a timestamp , and a remove processor if required to remove the interim timestamp field parsed out of semi-structured text . Eventually the UI should offer the option to customize the pipeline with additional processors to perform other data preparation steps before ingesting data to an index .
Handle pre-6.x time fields __EoT__ In ccb9ab5717d85c6786b081f197d67ac7dde4d317 we changed how we deal with time fields to support the ` DateTime ` -format fields added in 6.0 , but dropped support for pre-6.x ` Long ` -format fields . This change reinstates this support for cases where pre-6.x data is made available to ML ( e.g . in a mixed-version CCS setup or after an upgrade ) .
CCR : Following primary should process operations once __EoT__ Today we rewrite the operations from the leader with the term of the following primary because the follower should own its history . The problem is that a newly promoted primary may re-assign its term to operations which were replicated to replicas before by the previous primary . If this happens , some operations with the same seq_no may be assigned different terms . This is not good for the future optimistic locking using a combination of seqno and term . This change ensures that the primary of a follower only processes an operation if that operation was not processed before . The skipped operations are guaranteed to be delivered to replicas via either primary-replica resync or peer-recovery . However , the primary must not acknowledge until the global checkpoint is at least the highest seqno of all skipped ops ( i.e. , they all have been processed on every replica ) . Relates # 31751 Relates # 31113
[ Painless ] Allow statically imported methods without whitelisted class __EoT__ Currently , a class must be whitelisted separately to allow a statically imported method to also be whitelisted . This removes the extraneous check to see if the class for a statically imported method is already whitelisted , so a statically imported method can be whitelisted independently .
Improve ` getRestHandlerWrapper ` JavaDocs __EoT__ Questions on how to work with ` ActionPlugin # getRestHandlerWrapper ( ) ` come up in discuss forums all the time . This change adds an example to the javadoc how this method should/could be used .
Build : Pass offline flag through to bwc build __EoT__ This commit makes the bwc build aware of the offline flag passed to the outer build . closes # 34361
SQL : Functions enhancements ( OCTET_LENGTH function , order functions alphabetically , RANDOM function docs ) __EoT__ - A new function was added - OCTET_LENGTH . - FunctionRegistry was refactored to keep an alphabetic track of functions . Also , when listing functions ( ` SHOW FUNCTIONS ` command ) the aliases are now part of the list in an alphabetic order . Until now , all the aliases of a function were listed right after the function name making the overall list not fully ordered alphabetically . - Documentation for RANDOM ( ) function was added . This PR addresses https : //github.com/elastic/elasticsearch/issues/33477
Fix expected next step being incorrect when executing async action __EoT__ This fixes an issue where an incorrect expected next step is used when checking to execute ` AsyncActionStep ` s after a cluster state step . It fixes this scenario : - ` ExecuteStepsUpdateTask ` executes a ` ClusterStateWaitStep ` or ` ClusterStateActionStep ` successfully - The next step is also a ` ClusterStateWaitStep ` , so it loops - The ` ClusterStateWaitStep ` has a next stepkey ( which gets set to the ` nextStepKey ` in the code ) - The ` ClusterStateWaitStep ` fails the condition , meaning that it will have to wait longer - The ` nextStepKey ` is now incorrect though , because we did not advance the index 's step , and it 's not ` null ` ( which is another safe value if there is no step after the ` ClusterStateWaitStep ` ) This fixes the problem by resetting the nextStepKey to null if the condition is not met , since we are not going to advance the step metadata in this case ( thereby skipping the ` maybeRunAsyncAction ` invocation ) . This commit also tightens up and enhances
Use RUNTIME_JAVA_HOME for running micro-benchmarks __EoT__ While developing microbenchmarks for # 34349 , I 've noticed that we do n't honour ` RUNTIME_JAVA_HOME ` for running the benchmarks . It 's useful to run some of the benchmarks against older JDKs , though .
Allow excluding folder names when scanning for dangling indices __EoT__ ES is scanning for dangling indices on every cluster state update . For this , it lists the subfolders of the indices directory to determine which extra index directories exist on the node where there 's no corresponding index in the cluster state . These are potential targets for dangling index import . On certain machine types , and with large number of indices , this subfolder listing can be horribly slow . This means that every cluster state update will be slowed down by potentially hundreds of milliseconds . One of the reasons for this poor performance is that ` Files.isDirectory ( ) ` is a relatively expensive call on some OS and JDK versions . There is no need though to do all these ` isDirectory ` calls for folders which we know we are going to discard anyhow in the next step of the dangling indices logic . This PR allows adding an exclusion predicate to the ` availableIndexFolders ` methods which can dramatically speed up this method when scanning for dangling indices . Benchmarks are below : `` ` Linux : Benchmark Mode Cnt Score Error
Logging : Make ESLoggerFactory package private __EoT__ Since all calls to ` ESLoggerFactory ` outside of the logging package were deprecated , it seemed like it 'd simplify things to migrate all of the deprecated calls and declare ` ESLoggerFactory ` to be package private . This does that .
[ CCR ] Clear fetch exceptions if an empty but successful shard changes response returns __EoT__ Also fixed ShardFollowNodeTaskTests to not return ops when responseSize is empty . Otherwise ops are returned when no ops are expected to be returned .
LLRC : Test for warnings behavior __EoT__ Add tests for the Low Level REST Client 's strict deprecation hangling . Relates to # 33708
[ DOCS ] Removes experimental label from term_set query __EoT__
[ DOCS ] Removes beta label from index sorting __EoT__
Typo in x-pack template for thread_pool.management __EoT__ Fix a typo in x-pack template for the node_stats.thread_pool.management
[ Build ] randomizedtesting : Allow property values to be closures __EoT__ Makes it easier to have property values that are evaluated at build time rather than configuration time in a Gradle idiomatic way .
Feature/hlrc ml docs cleanup __EoT__ Cleaning up our docs to dry them up . Many of the changes are find/replace . Verified docs generate and all seems to look ok to me .
Minor corrections in geo-queries.asciidoc __EoT__
[ DOCS ] Remove beta label from normalizers __EoT__
Rename CCR stats implementation __EoT__ In the CCR docs we want to refer to the endpoint that returns following stats as the follow stats API . This commit renames the internal implementation of this endpoint to reflect this usage .
Add max_children limit to nested sort __EoT__ **FEATURE BRANCH** - First SortMode added ( including nested fields ) related with ( # 33592 )
[ testclusters ] Rename clsuterformation - > testclusters [ part 3 ] __EoT__ No other changes
[ Build ] make sure there are no duplicate classes in third party audit __EoT__ Implements the suggestions from # 33759 . The versions specific classes are now extracted from older to newest version overwriting each-other so we 'll only have the right ones .
BWC Build : Read CI properties to determine java version __EoT__ Instead of maintaining a hard coded mapping between releases and java versions , read the CI properties file of the checked out release to figure it out automatically .
Allow User/Password realms to disable authc __EoT__ The `` lookupUser '' method on a realm facilitates the `` run-as '' and '' authorization_realms '' features . This commit allows a realm to be used for `` lookup only '' , in which case the `` authenticate '' method ( and associated token methods ) are disabled . It does this through the introduction of a new '' authentication.enabled '' setting , which defaults to true . Closes : # 33292
Enable security automaton caching __EoT__ Building automatons can be costly . For the most part we cache things that use automatons so the cost is limited . However : - We do n't ( currently ) do that everywhere ( e.g . we do n't cache role mappings ) - It is sometimes necessary to clear some of those caches which can cause significant CPU overhead and processing delays . This commit introduces a new cache in the security Automatons class to avoid unnecesarily recomputing automatons .
Preserve thread context during authentication __EoT__ There may be values in the thread context that ought to be preseved for later use , even if one or more realms perform asynchronous authentication . This commit changes the AuthenticationService to wrap the potentially asynchronous calls in a ContextPreservingActionListener that retains the original thread context for the authentication .
[ ML ] Allow asynchronous job deletion __EoT__ This changes the delete job API by adding the choice to delete a job asynchronously . The commit adds a ` wait_for_completion ` parameter to the delete job request . When set to ` false ` , the action returns immediately and the response contains the task id . This also changes the handling of subsequent delete requests for a job that is already being deleted . It now uses the task framework to check if the job is being deleted instead of the cluster state . This is a beneficial for it is going to also be working once the job configs are moved out of the cluster state and into an index . Also , force delete requests that are waiting for the job to be deleted will not proceed with the deletion if the first task fails . This will prevent overloading the cluster . Instead , the failure is communicated better via notifications so that the user may retry . Finally , this makes the ` deleting ` property of the job visible ( also it was renamed from ` deleted ` ) . This allows a client
HLRC : ML Adding get datafeed stats API __EoT__ This adds the ML get datafeed stats API to the HLRC Relates to # 29827
Tasks : Document that status is not semvered __EoT__ The ` status ` part of the tasks API reflects the internal status of a running task . In general , we do not make backwards breaking changes to the ` status ` but because it is internal we reserve the right to do so . I suspect we will very rarely excercise that right but it is important that we have it so we 're not boxed into any particular implementation for a request . In some sense this is policy making by documentation change . In another it is clarification of the way we 've always thought of this field . I also reflect the documentation change into the Javadoc in a few places . There I acknowledge Kibana 's `` special relationship '' with Elasticsearch . Kibana parses ` _reindex ` 's ` status ` field and , because we 're friends with those folks , we should talk to them before we make backwards breaking changes to it . We *want* to be friends with everyone but there is only so much time in the day and we do n't *want* to make backwards breaking fields to
HLRC : ML Add preview datafeed api __EoT__ This adds the ML preview datafeed API to the HLRC Relates to # 29827
Provide useful error when a policy does n't exist __EoT__ When an index is configured to use a lifecycle policy that does not exist , this will now be noted in the step_info for that policy . Contrary to what 's noted in the associated issue ( # 33074 ) , this does not move the index to the Error step , and instead sets the ` step_info ` with a note that the policy does not exist . This prevents issues with recovering from this state . Resolves # 33074
Logging : Drop remaining Settings log ctor __EoT__ Drops the last logging constructor that takes ` Settings ` because it is no longer needed . Watcher goes through a lot of effort to pass ` Settings ` to ` Logger ` constructors and dropping ` Settings ` from all of those calls allowed us to remove quite a bit of log-based ceremony from watcher .
[ ML ] Remove unused last_data_time member from Job __EoT__ Job has the field ` last_data_time ` I can not see any use of this member outside of the unit tests beyond checking it is not set when a job is created . I believe this to be a legacy mistake as the field is always null but it is possible the field was set in some earlier version so backwards compatibility must be maintained . The lenient job parsers ( hlrc & core ) ignore unknown fields so will dispose of the field if set , the strict job parser is only used at job creation and the field was rejected if set at job creation in ` Job.invalidCreateTimeSettings ` so the effect is the same the job will not be created albeit with a different error message . In the UI the last data time value comes from the datacounts . Additionally I 've refactored copy-and-paste date parsing code used in many of the ml pojos
Docs : Allow skipping response assertions __EoT__ We generate tests from our documentation , including assertions about the responses returned by a particular API . But sometimes we *can't* assert that the response is correct because of some defficiency in our tooling . Previously we marked the response ` // NOTCONSOLE ` to skip it , but this is kind of odd because ` // NOTCONSOLE ` is really to mark snippets that are json but are n't requests or responses . This introduces a new construct to skip response assertions : `` ` // TESTRESPONSE [ skip : reason we skipped this ] `` `
HLRC : Add activate watch action __EoT__ Adds activate watch action to the high level rest client . Relates # 29827
[ Security ] Get Alias API wildcard exclusion with Security __EoT__ This builds on https : //github.com/elastic/elasticsearch/pull/33518 . Wildcard index expressions are tricky because when security is enabled , widcards ( inclusions and exclusions ) have to be expanded **in the scope of the authenticated user** . Relates : https : //github.com/elastic/elasticsearch/issues/33805 **EDIT : ** The security plugin authorizes actions on indices . This implies that a request with the [ indices expression ] ( https : //www.elastic.co/guide/en/elasticsearch/reference/current/multi-index.html ) containing wildcards has to be first evaluated , in the authorization layer , before the request is handled . For authorization purposes , wildcards in expressions will only be expanded to indices visible by the authenticated user . However , this `` constrained '' evaluation has to be compatible with the expression evaluation that a cluster without the security plugin installed would do . Therefore every change in the evaluation logic in any of the to sites has to be mirrored in the other . # 33518 added support forwildcard exclusion ( ` - ... * ` ) at the core logic site . This PR mirrors that at the ` IndicesAndAliasesResolver ` site , which is the site that does
Document smtp.ssl.trust configuration option __EoT__ This adds documentation for ` smtp.ssl.trust ` that was reintroduced in # 31684 in 6.3.2 . Resolves # 32936
Mapping not working __EoT__ Hiya Following the examples in your docs , create-mapping does not seem to work , eg : `` ` curl -XPUT http : //localhost:9200/twitter/tweet -d ' { tweet : { properties : { message : { type : `` string '' , store : `` yes '' } } } } ' `` ` > No handler found for uri [ /twitter/tweet ] and method [ PUT ] I tried creating the index first , but same thing . Also , the JSON format for specifying the mapping type to use when indexing a document is ambiguous , eg : `` ` curl -XPUT http : //localhost:9200/twitter/tweet/1 -d \ ' { tweet : { user : `` kimchy '' , postDate : `` 2009-11-15T14:12:12 '' , message : `` trying out Elastic Search '' } } ' `` ` Does that mean that the document has mapping type 'tweet ' , or that there is no mapping type specified , and it has a single top level key called 'tweet ' . And one thing i 'm not sure about ? Is a mapping the same thing as a type ? So you would never have
[ Authz ] Allow update settings action for system user __EoT__ When the ` cluster.routing.allocation.disk.watermark.flood_stage ` watermark is breached , DiskThresholdMonitor marks the indices as read-only . This failed when x-pack security was present as system user does not have the privilege for update settings action ( `` indices : admin/settings/update '' ) . This commit adds the required privilege for the system user . Also added missing debug logs when access is denied to help future debugging . An assert statement is added to catch any missed privileges required for system user . Closes # 33119
Replace version with reader cache key in IndicesRequestCache __EoT__ Today we use the version of a DirectoryReader as a component of the key of IndicesRequestCache . This usage is perfectly fine since the version is advanced every time a new change is made into IndexWriter . In other words , two DirectoryReaders with the same version should have the same content . However , this invariant is only guaranteed in the context of a single IndexWriter because the version is reset to the committed version value when IndexWriter is re-opened . Since # 33473 , each IndexShard may have more than one IndexWriter , and using the version of a DirectoryReader as a part of the cache key can cause IndicesRequestCache to return stale cached values . For example , in # 27650 , we rollback the engine ( i.e. , re-open IndexWriter ) , index new documents , refresh , then make a count request , but the search layer mistakenly returns the count of the DirectoryReader of the previous IndexWriter because the current DirectoryReader has the same version of the old DirectoryReader even their documents are different . This is possible because these two readers come from different
[ TESTS ] Set SO_LINGER and SO_REUSEADDR on the mock socket __EoT__ In ` SessionFactoryLoadBalancingTests # testRoundRobinWithFailures ( ) ` we kill ldap servers randomly and immediately bind to that port connecting to mock server socket . This is done to avoid someone else listening to this port . As the creation of mock socket and binding to the port is immediate , sometimes the earlier socket would be in ` TIME_WAIT ` state thereby having problems with either bind or connect . This commit sets the SO_REUSEADDR explicitly to ` true ` and also sets the linger on time to ` 0 ` ( as we are not writing any data ) so as to allow re-use of the port and close immediately . Note : I could not find other places where this might be problematic but looking at test runs and netstat output I do see lot of sockets in TIME_WAIT . If we find that this needs to be addressed we can wrap ServerSocketFactory to set these options and use that with in memory ldap server configuration during tests . Closes # 32190
[ HLRC ] Update Stop & Start ILM APIs to use Validatable __EoT__ Convert the Stop and Start request objects to inherit from the preferred ` Validatable ` instead of ` ActionRequest ` .
Security : upgrade unboundid ldapsdk to 4.0.8 __EoT__ This commit upgrades the unboundid ldapsdk to version 4.0.8 . The primary driver for upgrading is a fix that prevents this library from rewrapping Error instances that would normally bubble up to the UncaughtExceptionHandler and terminate the JVM . Other notable changes include some fixes related to connection handling in the library's connection pool implementation . Closes # 33175
ILM integration test with full policy __EoT__ - this adds an integration test that runs through a policy with all the actions defined . - adds a test specific to a policy having just a rollover action - bumps the node count to 4 NOTE : test fails , and I think it is due to timing of async actions being executed in parallel
Fix misspelled words in comments , error messages , and test code __EoT__ Fixing typos is sometimes very hard . It 's not so easy to visually review them . Recently , I discovered a very useful tool for it , [ misspell ] ( https : //github.com/client9/misspell ) . This pull request fixes minor typos detected by [ misspell ] ( https : //github.com/client9/misspell ) except for the false positives . If you would like me to work on other files as well , let me know . -- - < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ?
Add early termination support for min/max aggregations __EoT__ This commit adds the support to early terminate the collection of a leaf in the min/max aggregator . If the query matches all documents the min and max value for a numeric field can be retrieved efficiently in the points reader . This change applies this optimization when possible .
Security : reduce memory usage of DnRoleMapper __EoT__ The ` DnRoleMapper ` class is used to map distinguished names of groups and users to role names . This mapper builds in an internal map that maps from a ` com.unboundid.ldap.sdk.DN ` to a ` Set < String > ` . In cases where a lot of distinct DNs are mapped to roles , this can consume quite a bit of memory . The majority of the memory is consumed by the DN object . For example , a 94 character DN that has 9 relative DNs ( RDN ) will retain 4KB of memory , whereas the String itself consumes less than 250 bytes . In order to reduce memory usage , we can map from a normalized DN string to a List of roles . The normalized string is actually how the DN class determines equality with another DN and we can drop the overhead of needing to keep all of the other objects in memory . Additionally the use of a List provides memory savings as each HashSet is backed by a HashMap , which consumes a great deal more memory than an appropriately sized ArrayList . The
Require combine and reduce scripts in scripted metrics aggregation __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > Fixes # 32804 Implementation notes : - Integration and unit tests updated - Throws IllegalArgumentException when combine or reduce is not provided - only unit tests test for exceptions , integration only tests positive cases - Behavior : no combine , no reduce - > exception combine , no reduce - > exception no combine , reduce - > exception combine , reduce - > success
Require JDK 11 for compilation __EoT__ Now that JDK 11 is GA , we would switch our 6.x and master branches to the JDK 11 compiler . This commit makes this change , as well as removes JDK 10 from the CI configuration .
Preserve the order of nested documents in the Lucene index __EoT__ Today we reverse the initial order of the nested documents when we index them in order to ensure that parents documents appear after their children . This means that a query will always match nested documents in the reverse order of their offsets in the source document . Reversing all documents is not needed so this change ensures that parents documents appear after their children without modifying the initial order in each nested level . This allows to match children in the order of their appearance in the source document which is a requirement to efficiently implement # 33587 . Old indices created before this change will continue to reverse the order of nested documents to ensure backwark compatibility .
[ GCE Discovery ] Automatically set project-id and zone __EoT__ Settings ` cloud.gce.project_id ` , ` cloud.gce.zone ` are not mandatory - they could be automatically set from a gce metadata server . Picking up the default zone is useful for cases like a single region . Details on impl differences with GCE : [ com.google.cloud.ServiceOptions # getDefaultProjectId ] ( https : //github.com/GoogleCloudPlatform/google-cloud-java/blob/master/google-cloud-clients/google-cloud-core/src/main/java/com/google/cloud/ServiceOptions.java # L333 ) tries to resolve project based on * system property ` GOOGLE_CLOUD_PROJECT ` ( or legacy system property ` GCLOUD_PROJECT ` ) * environment variable ` GOOGLE_CLOUD_PROJECT ` or ` GCLOUD_PROJECT ` * from ` http : //metadata.google.internal/computeMetadata/v1/project/project-id ` This PR allows without settings to fallback to retrieve info from gce metadata server Closes # 13618
Change step execution flow to be deliberate about type __EoT__ This commit changes the way that step execution flows . Rather than have any step run when the cluster state changes or the periodic scheduler fires , this now runs the different types of steps at different times . ` AsyncWaitStep ` is run at a periodic manner , ie , every 10 minutes by default ` ClusterStateActionStep ` and ` ClusterStateWaitStep ` are run every time the cluster state changes . ` AsyncActionStep ` is now run only after the cluster state has been transitioned into a new step . This prevents these non-idempotent steps from running at the same time . It addition to being run when transitioned into , this is also run when a node is newly elected master ( only if set as the current step ) so that master failover does not fail to run the step . This also changes the ` RolloverStep ` from an ` AsyncActionStep ` to an ` AsyncWaitStep ` so that it can run periodically . Relates to # 29823
Change `` REST Verb '' to `` HTTP Verb '' __EoT__ The verbs/methods are actually from HTTP and not from REST . References : https : //developer.mozilla.org/en-US/docs/Web/HTTP/Methods https : //tools.ietf.org/html/rfc2616.html # section-5.1.1
HLRC : Add throttling for update & delete-by-query __EoT__ This change adds throttling to the update-by-query and delete-by-query cases similar to throttling for reindex . This mostly means additional methods on the client class itself , since the request hits the same RestHandler , just with slightly different endpoints , and also the return values are similar . Also updating the docs to reflect this .
[ DOCS ] Note that User Cluster Metadata is not private __EoT__ As user-defined cluster metadata is accessible to anyone with access to get the cluster settings , stored in the logs , and likely to be tracked by monitoring solutions , it is useful to clarify in the documentation that it should not be used to store secret information . Per discussion in # 34023
Add ES version 6.4.3 ( master branch ) __EoT__
HLRC : PutUserRequest should not be closeable __EoT__ The PutUserRequest implemented closeable as it assumed ownership of the password provided to the class . This change removes the ownership of the password , documents it in the javadoc , and removes the closeable implementation . Additionally , the intermediate bytes used for writing the password to XContent are now cleared . This makes the PutUserRequest consistent with the behavior discussed in # 33509 .
Test : Revert pinning MockWebServer to TLSv1.2 __EoT__ Revert `` [ TESTS ] Pin MockWebServer to TLS1.2 ( # 33127 ) '' ( commit 214652d4af8188d4ba872626eeea3bcdff7096f0 ) and `` Pin TLS1.2 in SSLConfigurationReloaderTests '' ( commit d9f5e4fd2e06c9b69f3b4744e49e747e1ff708b4 ) , which pinned the MockWebServer used in the SSLConfigurationReloaderTests to TLSv1.2 in order to prevent failures with JDK 11 related to ssl session invalidation . We no longer need this pinning as the problematic code was fixed in # 34130 .
Test : Revert pinning MockWebServer to TLSv1.2 __EoT__ Revert `` [ TESTS ] Pin MockWebServer to TLS1.2 ( # 33127 ) '' ( commit 214652d4af8188d4ba872626eeea3bcdff7096f0 ) and `` Pin TLS1.2 in SSLConfigurationReloaderTests '' ( commit d9f5e4fd2e06c9b69f3b4744e49e747e1ff708b4 ) , which pinned the MockWebServer used in the SSLConfigurationReloaderTests to TLSv1.2 in order to prevent failures with JDK 11 related to ssl session invalidation . We no longer need this pinning as the problematic code was fixed in # 34130 .
[ DOCS ] Clarifies examples in reindex and task APIs __EoT__ Fixes https : //github.com/elastic/elasticsearch/issues/33071
Docs : Fix typo in field name in aggregations __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md #
Use OptionalInt instead of Optional < Integer > __EoT__ Optionals containing boxed primitive types are prohibitively costly because they have two level of boxing . For Optional < Integer > the analogous OptionalInt can be used to avoid the boxing of the contained int value .
SQL : Remove more ANTLR4 grammar ambiguities __EoT__ The ` - ` and ` + ` as a number literal prefix are already parsed by the rule in ` valueExpression ` . Follows : # 33854
Allowing { index } /_xpack/rollup/data to accept comma delimited list __EoT__ { index } /_xpack/rollup/data is supposed to be able to return given a comma delimited list of indices , there was a slight oversight on the REST facing side that caused index lookups to be the literal string and not an expanded list from the parameter . I apologize if the labels are not correct , this is my first bug PR referencing a released version .
HLRC : Add get rollup job __EoT__ Adds support for the get rollup job to the High Level REST Client . I had to do two interesting and unexpected things : 1 . I ported the rollup state wiping code into the high level client tests . I 'll move this into the test framework in a followup and remove the x-pack version . 2 . The ` timeout ` in the rollup config was serialized using the ` toString ` representation of ` TimeValue ` which produces fractional time values which are more human readable but are n't supported by parsing . So I switched it to ` getStringRep ` .
TEST : Index diff num docs in rolling upgrade tests __EoT__ Today we index the same number of documents ( 50 documents ) in each round of the rolling upgrade tests . If the actual count does not match , it 's hard for us to guess the problematic round . Relates # 27650
Fix cross fields mode of the query_string query __EoT__ This change fixes a bug in the cross fields mode of the ` query_string ` query . The multi fields query builder must be reseted before parsing in order to clear the list of expanded fields coming from the previous text block . Closes # 34215
Completion types with multi-fields support __EoT__ Mappings with completion type and multi-fields , were not able to index array or object format on completion fields . Only string format was supproted . This is fixed by providing multiField parser with externalValueContext with already parsed object closes # 15115 < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission
Core : Add methods to get locale/timezone from DateFormatter __EoT__ This adds some method into the ` DateFormatter ` interface , namely * ` withLocale ( ) ` to change the locale of a date formatter * ` getLocale ( ) ` * ` getZone ( ) ` * ` hashCode ( ) ` * ` equals ( ) ` These methods will be needed for aggregations and mapping changes , where zones and locales can be specified in the mapping or in search/aggs parts of a search request .
[ Monitoring ] Updating test assertion __EoT__ Follow up to # 33860 . This test assertion was failing when I tried to backport # 33860 in # 34023 . So I 'm fixing it in ` master ` and will backport it as part of # 34023 .
HLRC : add change password API support __EoT__ This change adds support for the change password APIs to the high level rest client . The response for this API adopts the empty response object introduced in # 33481
SQL : Fix grammar for ` * ` in arithm expressions __EoT__ Previously , parsing an arithmetic expression with ` * ` and no spaces , e.g . : ` 2*i ` threw a parsing exception as the grammar rule for tableIdentifier was clashing with the rule for arithmetic operator ` * ` . This issue comes already in the lexer and the left part of the expression ( in our example ` 2* ` ) was recognized as a TABLE_IDENTIFIER token . The solution adopted is to allow the ` * ` wildcard in the table name only if it 's surrounded with double quotes , e.g . : ` `` my*index '' ` Closes : # 33957
Handle terms query when detecting if a query can match nested docs __EoT__ When nested objects are present in the mappings , we add a filter in queries to exclude them if there is no evidence that the query can not match in this space . In 6x we visit the query in order to find a mandatory clause that can match root documents only . If we find one we can omit the nested documents filter . Currently only ` term ` and ` range ` queries are checked , this change adds the support for ` terms ` query to effectively remove the nested filter if a mandatory ` terms ` clause targets a non-nested field . Closes # 34067
Clean up TransportMasterNodeAction __EoT__ Mainly this fixes a warning by replacing the unchecked ` new ActionRunnable ` with the checked ` new ActionRunnable < Response > ` , and it also fixes the line length violations in this class .
SQL : Fix function resolution __EoT__ If conversion from camelCase to CAMEL_CASE format does n't succeed , try to resolve the function by capitalizing all letters . Fixes : # 34114
Use more descriptive task names for ILM cluster state updates __EoT__ Rather than using `` ILM '' for everything , we should use more descriptive names so debugging from logs is easier to do . Resolves # 34118
Checkstyle : Catch wide snippets __EoT__ We use wrap code in ` // tag ` and ` //end ` to include it in our docs . Our current docs style wraps code snippets in a box that is only wide enough for 76 characters and adds a horizontal scroll bar for wider snippets which makes the snippet much harder to read . This adds a checkstyle check that looks for java code that is included in the docs and is wider than that 76 characters so all snippets fit into the box . It solves many of the failures that this catches but suppresses many more . I will clean those up in a follow up change .
Disallow `` enabled '' attribute change for types in mapping update ( # 33566 ) __EoT__ This commit adds a check for ` enabled ` attribute change for types when a ` RestPutMappingAction ` is received . A ` MappingException ` is thrown when such a change is detected . Change are prevented in both ways : ` false ` to ` true ` and ` true ` to ` false ` . Here is a sample cURL output : `` ` { `` error '' : { `` root_cause '' : [ { `` type '' : `` mapper_exception '' , `` reason '' : `` Ca n't update attribute for type [ type1.foo.enabled ] in index mapping '' } ] , `` type '' : `` mapper_exception '' , `` reason '' : `` Ca n't update attribute for type [ type1.foo.enabled ] in index mapping '' } , `` status '' : 500 } `` ` Tests are not part of this commit , they will be developed after design validation .
[ TEST ] Fix ShardChangesIT # testFollowIndex_backlog test __EoT__ Only use primary shards and get expected count from leader index . Closes # 34173
Removing unused ML parameters __EoT__ There are two unused parameters currently in the ML code ` ACCEPTABLE_PERCENTAGE_DATE_PARSE_ERRORS_SETTING ` and ` ACCEPTABLE_PERCENTAGE_OUT_OF_ORDER_ERRORS_SETTING ` . Recently , versions that support dynamic updating were added and are no longer necessary either .
[ ML ] Fix unit test deadlock problem __EoT__ This change fixes a potential deadlock problem in the unit test introduced in # 34117 . It also removes a piece of debug code and corrects a docs formatting problem that were both added in that same PR .
drop elasticsearch-translog for 7.0 __EoT__ drop elasticsearch-translog for 7.0 # 32281 adds ` elasticsearch-shard ` to provide bwc version of ` elasticsearch-translog ` for 6.x - for 7.0 elasticsearch-translog has to be dropped Relates to # 31389
Docs : DRY up HLRC index docs __EoT__ Use tricks pioneered in # 34125 to shorted asciidoc for the index API's docs . Also slightly shorten the supported-api docs file .
[ Tests ] Merge two document mapper ESSingleNodeTests __EoT__ Just found a TODO in DocumentMapperParserTests that this test can probably merged with another similar ESSingleNodeTestCase and just moved the existing methods to DocumentMapperMergeTests.java . Since the name now is a bit too specific also renamed this to just DocumentMapperTests.java
Allow specifying shard changes batch sizes in bytes __EoT__ This commit changes the shard changes requests from using a raw byte value to being able to be specified using bytes units ( e.g. , 4mb ) .
[ CCR ] Add unfollow API __EoT__ The unfollow API changes a follower index into a regular index , so that it will accept write requests from clients . For the unfollow api to work the index following needs to be stopped and the index needs to be closed . Closes # 33931
Scripting : Remove ExecutableScript __EoT__ This commit removes the legacy ExecutableScript , which was no longer used except in tests . All uses have previously been converted to script contexts .
Docs : Cut down on high level rest client copy-and-paste-ness __EoT__ This introduces a mechanism to slightly reduce the copy-and-paste-ness of the documentation for the High Level REST Client . It pulls out the entire '' execution '' portion of the page that we can include in every page . Doing this requires the introduction of a few attributes . It then uses these attributes to further cut down on some copy-and-paste-ness . This also standardizes some of the ` id ` s in the search documentation to the naming scheme that we seem to be using in the newer docs .
[ DOCS ] Moves reserved keywords under SQL section __EoT__ The SQL reserved keywords page appears in a strange place in the Elasticsearch Reference : ! [ image ] ( https : //user-images.githubusercontent.com/26471269/46174085-eafc8e80-c25c-11e8-8b72-d6c8fb163f7e.png ) This PR moves it under the `` SQL access '' section : ! [ image ] ( https : //user-images.githubusercontent.com/26471269/46174331-986fa200-c25d-11e8-933d-f672ee43f72d.png )
TESTS : Relax Assertion About Deleting Shard Dir __EoT__ * Allow empty state directory to prevent test from failing * Closes # 32686
[ DOCS ] Adds new dynamic machine learning settings __EoT__ Related to https : //github.com/elastic/elasticsearch/pull/33961 and https : //github.com/elastic/elasticsearch/issues/33565 This PR adds documentation for the new dynamic settings .
[ ML ] Add a timeout option to file structure finder __EoT__ This can be used to restrict the amount of CPU a single structure finder request can use . The timeout is not implemented precisely , so requests may run for slightly longer than the timeout before aborting . The default is 25 seconds , which is a little below Kibana 's default timeout of 30 seconds for calls to Elasticsearch APIs .
Painless : Remove caching of Painless scripts __EoT__ When a script uses the special-cased SearchScript or ExecutableScript , Painless is internally caching the GenericElasticsearchScript that is generated via compile as part of the newInstance method for the factories . This breaks the model for class bindings as the class binding expects to not have any stored information for each instance generated via newInstance from the factory . This change fixes the issue by creating a new instance of the GenericElasticsearchScript each time newInstance is called against the factory .
[ CCR ] Validate index privileges prior to following an index __EoT__ Prior to following an index in the follow API , check whether current user has sufficient privileges in the leader cluster to read and monitor the leader index . Also check this in the create and follow API prior to creating the follow index . In put auto follow pattern API validate whether the user has privileges to follow indices that match with the provided index patterns in an auto follow pattern prior to storing it . Also introduced READ_CCR cluster privilege that include the minimal cluster level actions that are required for ccr in the leader cluster . So a user can follow indices in a cluster , but not use the ccr admin APIs . Closes # 33553
Update SSLTrustRestrictionTests for JDK11 __EoT__ In prior versions of Java , we expected to see a SSLHandshakeException when starting a handshake with a server that we do not trust . In JDK11 , the exception has changed to a SSLException , which SSLHandshakeException extends . This is most likely a side effect of the TLS 1.3 changes in JDK11 . This change updates the test to catch the SSLException instead of the SSLHandshakeException and enables the test to work on JDK8 through JDK11 . Closes # 29989
Scripting : Add watcher script contexts __EoT__ This commit removes the use of ExecutableScript from watcher in favor of custom script contexts for both watcher condition scripts and transform scripts .
Update SSLReloadIntegTests to work with JDK11 __EoT__ In prior versions of Java , we expected to see a SSLHandshakeException when starting a handshake with a server that we do not trust . In JDK11 , the exception has changed to a SSLException , which SSLHandshakeException extends . This is most likely a side effect of the TLS 1.3 changes in JDK11 . This change updates the test to catch the SSLException instead of the SSLHandshakeException and enables the test to work on JDK8 through JDK11 . Closes # 32293
Use more precise does S3 bucket exist method __EoT__ We are using a deprecated method for checking if an S3 bucket exists . This deprecated method has a limitation that it can not distinguish between invalid credentials and a lack of permissions . This commit switches to using a method that correctly surfaces if invalid credentials are supplied when checking for the existence of a bucket .
REST client : introduce a strict deprecation mode __EoT__ Minimal change that marks a rest request as failed if a deprecation warning has been issued by the server . This is valuable for internal tests and documentation snippets so that only non-deprecated code is used . This also minimizes possible divergence of the high level REST client from the server . ` off ` ( default ) : the warning is logged at WARN level . As before the response is returned to the caller for further analysis . The caller still can retrieve all warnings from the response . ` on ` : the warning is logged at WARN level but the response is marked as failed . The caller can retrieve all warnings from the ResponseException . Fixes # 33534
[ CCR ] Adjust list retryable errors __EoT__ The following changes were made : * Added ElasticsearchSecurityException . For in the case the current user has insufficient privileges while an index is being followed . Prior to following ccr checks whether the current user has sufficient privileges and if not the follow api fails with an error . * Added Index block exception . If the leader index gets closed , this exception is returned . * Added ClusterBlockException service unavailable . In case for example the leader cluster is without elected master . * Removed IndexNotFoundException . If the leader / follower index has been deleted , ccr will need to stop the shard follow tasks with an error . Closes # 33954 Depends on # 33983
Fix AggregationFactories.Builder equality and hash regarding order __EoT__ Fixes the equals and hash function to ignore the order of aggregations to ensure equality after serialization and deserialization . Note : At time of writing the impact of this issue mainly affects tests ( - > non-issue ) , however in future work I am storing aggregation configuration as part of job configurations and therefore require this fix . It also fixes a potential issue in caching when the same query contains aggregations in different order . 1st it will not hit in the cache , 2nd cache objects which shall be equal might end up twice in the cache . Previous fix : https : //github.com/elastic/elasticsearch/pull/33942 switches to a LinkedHashSet instead of a List . CC @ jimczi @ cbuescher @ colings86
correct spelling of response in filter_path __EoT__ This commit corrects the spelling of response in the description of filter_path in the REST API spec .
Core : Do n't rely on java time for epoch seconds formatting __EoT__ In order to be compatible with joda time , this adds an epoch seconds formatter , that is able to parse floating point values . However joda time discards the floating point values , but still parses the data , where as this one is able to parse the whole value including milliseconds . This also allows to name the formatter 'epoch_seconds ' with an s at the end just like 'epoch_millis ' .
Watcher : Reenable watcher stats REST tests __EoT__ Due to a bug , that was fixed in # 33360 and commit 1de2a925ce8bf30d53ad71dfcd6e33ebbf7827c6 the initial adding of a watch could get lost . Closes # 33326
Remove special-casing of Synonym filters in AnalysisRegistry __EoT__ The synonym filters no longer need access to the AnalysisRegistry in their constructors , so we can remove the special-case code and move them to the common analysis module
Fixed CCR stats api serialization issues and __EoT__ always use ` IndicesOptions.strictExpand ( ) ` for indices options . The follow index may be closed and we still want to get stats from shard follow task and the whether the provided index name matches with follow index name is checked when locating the task itself in the ccr stats transport action .
Support 'string'-style queries on metadata fields when reasonable . __EoT__ This change has two components : - Support ` prefix ` and ` regexp ` queries on ` _index ` fields for consistency , since we already support ` wildcard ` queries . - Update ` ignored ` and ` routing ` field types to inherit from ` StringFieldType ` , which allows them to support 'string'-style queries like ` prefix ` , ` regex ` , and ` wildcard ` . We temporarily removed support for ` wildcard ` as part of the refactor in # 34062 , and this PR restores that support for compatibility , and also makes sure the other query types are implemented for consistency . Note that we may eventually deprecate support for 'string'-style queries on ` ignored ` and ` routing ` fields , pending a separate discussion .
SQL : Internal refactoring of operators as functions __EoT__ Sorry for the largish PR , the renaming and moving of some files had a broad effect ( the PR actually adds only ~300 loc ) . The main goal of this PR is to centralize and simplify the script generation between operators and functions which are currently decoupled . As part of this process most predicates ( ` < ` , ` < = ` , etc ... ) were made ` ScalarFunction ` as their purpose and functionality is quite similar ( see ` % ` and ` MOD ` functions ) . ~~In a similar vein , the script generation and processing was moved onto ` Expression ` itself as a general concern - it the future it might be tweaked a bit and~~was moved to the ` NamedExpression ` . ` ProcessDefinition ` was renamed to ` Pipe ` to make the name shorter and a bit more clearer ( a Pipe of processes ) though it does n't fully convey its purpose . The advantage of moving this into the expression itself is that OO-ify the generation . The script customization which was scattered across the
Tests : Add support for custom contexts to mock scripts __EoT__ This commit adds the ability to plug in compilation of custom contexts in mock script engine . This is needed for testing plugins which add custom contexts like watcher .
[ DOCS ] Synchronize location of Breaking Changes __EoT__ Related to https : //github.com/elastic/docs/issues/382 This PR moves the `` Breaking Changes '' section nearer the `` Release Notes '' section , to synchronize the location of this information across the library . It also merges all of the 7.0 breaking change pages into a single page .
[ DOCS ] Synchronizes captialization in top-level titles __EoT__ Related to https : //github.com/elastic/elasticsearch/pull/33588 # issuecomment-420086577 , I 've updated the top-level titles to sentence case for use in the Stack Overview and the Elasticsearch Reference .
[ SQL ] Clean up LogicalPlanBuilder # doJoin __EoT__ Currently the local ` type ` and ` condition ` variables are unused . After removing them and connected code inside the method , this method seems always to return an exception , so I wonder if it can be removed altogether .
Fix remote cluster seeds fallback __EoT__ Recently we introduced the settings ` cluster.remote ` to take the place of ` search.remote ` for configuring remote cluster connections . We made this change due to the fact that we have generalized the remote cluster infrastructure to also be used within cross-cluster replication and not only cross-cluster search . For backwards compatibility , when we made this change , we allowed that ` cluster.remote ` would fallback to ` search.remote ` . Alas , the initial change for this contained a bug for handling the ` proxy ` and ` seeds ` settings . The bug for the ` seeds ` settings arose because we were manually iterating over the concrete settings only for ` cluster.remote ` seeds but not for ` search.remote ` seeds . This commit addresses this by iterating over both ` cluster.remote ` seeds and ` search.remote ` seeds . Additionally , when checking for existence of proxy settings , we have to not only check ` cluster.remote ` proxy settings , but also fallback to ` search.remote ` proxy settings . This commit addresses both issues , and adds tests for these situations . Relates # 33413
[ ML ] [ HLRC ] Replace REST-based ML test cleanup with the ML client __EoT__ Now that all basic APIs for managing jobs and datafeeds have been implemented we replace the duplicated ` MlRestTestStateCleaner ` with an implementation that uses the HLRC Machine Learning client itself .
Handle MatchNoDocsQuery in span query wrappers __EoT__ This change adds a new SpanMatchNoDocsQuery query that replaces MatchNoDocsQuery in the span query wrappers . The ` wildcard ` query now returns MatchNoDocsQuery if the target field is not in the mapping ( # 34093 ) so we need the equivalent span query in order to be able to pass it to other span wrappers . Closes # 34105
Bad regex in CORS settings should throw a nicer error __EoT__ Currently a bad regex in CORS settings throws a PatternSyntaxException , which then bubbles up through the bootstrap code , meaning users have to parse a stack trace to work out where the problem is . We should instead catch this exception and rethrow with a more useful error message .
[ HLRC ] Support for role mapper expression dsl __EoT__ This commit adds support for role mapping expression dsl . Functionally it is similar to what we have on the server side except for the rule evaluation which is not required on the client . The role mapper expression can either be field expression or composite expression of one or more expressions . Role mapper expression parser is used to parse JSON DSL to list of expressions . This forms the base for role mapping APIs ( get , post/put and delete )
Watcher : Reduce script cache churn by checking for mustache tags __EoT__ Watcher is using a lot of so called TextTemplate fields in a watch definition , which can use mustache to insert the watch id for example . For the user it is non-obvious which field is just a string field or which field is a text template . This also means , that for every such field , we currently do a script compilation , even if the field does not contain any mustache syntax . This will lead to an increased script cache churn , because those compiled scripts ( that only contain a string ) , will evict other scripts . On top of that , this also means that an unneeded compilation has happened , instead of returning that string immediately . The usages of mustache templating are in all of the actions ( most of the time far more than one compilation ) as well as most of the inputs . Especially when running a lot of watches in parallel , this will reduce execution times and help reuse of real scripts . Reviewers note : We already had some discussion about this ,
Fold EngineSearcher into Engine.Searcher __EoT__ EngineSearcher can be easily folded into Engine.Searcher which removes a level of inheritance that is necessary for most of it 's subclasses . This change folds it into Engine.Searcher and removes the dependency on ReferenceManager .
TESTS : Enable DEBUG Logging in Flaky Test __EoT__ * This should surface what errors are thrown on CI and in org.elasticsearch.transport.RemoteClusterConnection.ConnectHandler # collectRemoteNodes ( the sequence of caught error in the last catch block ( https : //github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/transport/RemoteClusterConnection.java # L544 ) and moving on to the next seed node seems to be the only path by which the error logged in # 33756 ( ` RuntimeException ` without message from a successful connect callback and then subsequent cancellation because closed exception on the same listener ) could come about ) * Relates # 33756 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Ca n't reproduce the issue in # 33756 at all locally ( tried 100k+ runs on OSX , Ubuntu and CentOS ) , but I think this should make it relatively straightforward to track this down .
Build DocStats from SegmentInfos in ReadOnlyEngine __EoT__ This change is related to # 33903 that ports the DocStats simplification to the master branch . This change builds the docStats in the ReadOnlyEngine from the last committed segment infos rather than the reader . Co-authored-by : Tanguy Leroux < tlrx.dev @ gmail.com >
When creating wildcard queries , use MatchNoDocsQuery when the field type does n't exist . __EoT__ Follow-up from # 34062 .
[ DOCS ] Moves graph to docs folder __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the graph API content from x-pack/docs/rest-api/graph to docs/reference/graph
Security : use default scroll keepalive __EoT__ Security previously hardcoded a default scroll keepalive of 10 seconds , but in some cases this is not enough time as there can be network issues or overloading of host machines . After this change , security will now use the default keepalive timeout , which is controllable using a setting and the default value is 5 minutes .
Calculate changed roles on roles.yml reload __EoT__ In order to optimize the use of the role cache , when the roles.yml file is reloaded we now calculate the names of removed , changed , and added roles so that they may be passed to any listeners . This allows a listener to selectively clear cache for only the roles that have been modified . The CompositeRolesStore has been adapted to do exactly that so that we limit the need to reload roles from sources such as the native roles stores or external role providers . See # 33205
Delegate wildcard query creation to MappedFieldType . __EoT__ This is consistent with how we handle ` fuzzy ` , ` prefix ` , and ` regexp ` queries . As part of this change , disallow wildcard queries on non-string fields , in addition to ` collation ` fields .
Painless : Cleanup Cache __EoT__ This change does the following : * Adds equals/hashcode methods to the Painless* objects within the lookup package . * Changes the caches to use the Painless* objects as keys as well as values . This forces future changes to taken into account the appropriate values for caching . * Deletes the existing caching objects in favor of Painless* objects . This removes a pair of bugs that were not taking into account subtle corner cases related to augmented methods and caching . * Uses the Painless* objects to check for equivalency in existing Painless* objects that may have already been added to a PainlessClass . This removes a bug related to return not being appropriately checked when adding methods . * Cleans up several error messages .
Logging : Drop two deprecated methods __EoT__ This drops two deprecated methods from ` ESLoggerFactory ` , switching all calls to those methods to calls to methods of the same name on ` LogManager ` .
REST test for typeless APIs . __EoT__ This commit duplicates REST tests for the - ` indices.create ` - ` indices.put_mapping ` - ` indices.get_mapping ` - ` index ` - ` get ` - ` delete ` - ` update ` - ` bulk ` APIs , so that we both test them when used without types ( include_type_name=false ) and with types , mostly for mixed-version cluster tests . Given a suite called ` X_test_name.yml ` , I first copied it to ` ( X+1 ) _test_name_legacy.yml ` and then changed ` X_test_name.yml ` to set ` include_type_name=false ` on every API that supports it . Relates # 15613
Core : Abstract DateMathParser in an interface __EoT__ This commits creates a DateMathParser interface , which is already implemented for both joda and java time . While currently the java time DateMathParser is not used , this change allows the construction of the parser to be opaque to the underlying implementation of the date formatter .
Update configuring-es.asciidoc __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md # contributing-as-part-of-a-class ) for that .
Search : Simply SingleFieldsVisitor __EoT__ ` SingleFieldsVisitor ` is meant to load a single stored field but it manages to be quite complex to reason about because it inherits from our '' basic '' ` FieldsVisitor ` which is designed to load many fields . This breaks that inheritance and adds logic to ` SingleFieldsVisitor ` so it can be properly stand alone . While this amounts to more lines of code they ought to be significantly easier to reason about .
Changing bucket length and data indexed timestamps __EoT__ cause is outlined in https : //github.com/elastic/ml-cpp/issues/208 closes # 33966
CCR : replicates max seq_no of updates to follower __EoT__ This commit replicates the max_seq_no_of_updates on the leading index to the primaries of the following index via ShardFollowNodeTask . The max_seq_of_updates is then transmitted to the replicas of the follower via replication requests ( that 's BulkShardOperationsRequest ) . Relates # 33656
[ Docs ] Add reason to use Settings API over config file __EoT__ Extending the warning to prefer the ` setttings ` API over changes in the configuration file by giving reasons why this might be dangerous .
Add nested and object fields to field capabilities response __EoT__ This commit adds nested and object fields to the field capabilities response . Closes # 33237
[ CCR ] Do n't auto follow follow indices in the same cluster . __EoT__
Scripting : Use ParameterMap for deprecated ctx var in update scripts __EoT__ This commit removes the sysprop controlling whether ctx is in params for update scripts and replaces it with use of the new ParameterMap , which outputs a deprecation warning whenever params.ctx is used .
Move max_unsafe_auto_id_timestamp constant to Engine __EoT__ We should not access InternalEngine in other classes .
Add a limit for graph phrase query expansion __EoT__ Today query parsers throw TooManyClauses exception when a query creates too many clauses . However graph phrase queries do not respect this limit . This change adds a protection against crazy expansions that can happen when building a graph phrase query . This is a temporary copy of the fix available in https : //issues.apache.org/jira/browse/LUCENE-8479 but not merged yet . This logic will be removed when we integrate the Lucene patch in a future release .
Only make indexes read-only on Shrink and ForceMerge actions __EoT__ ILM now only forces indices to become read only in the case of Shrink and Force Merge actions , as these are most useful in cases where the index is no longer being written to . This prevents immediately making indices with a lifecycle with no '' warm '' phase read-only , as described in # 33485 .
[ ML ] Modify thresholds for normalization triggers __EoT__ The ( arbitrary ) threshold factors used to judge if scores have changed significantly enough to trigger a look-back renormalization have been changed to values that reduce the frequency of such renormalizations .
CRUD : Fix wait for refresh tests __EoT__ When we implemented ` refresh=wait_for ` I added a test with the wrong name . This caused us to not run it . The test asserted that running several operations with ` refresh=wait_for ` did not fail if the index was ` _close ` d while the operations were waiting . But to be honest , failure here is n't that bad . The index being waited on is closed . You ca n't do anything with it any way . The most important thing is actually that these operations do n't hang forever . Because hanging forever means that the resources used by the operations are n't freed . Anyway , when I noticed the error I reenabled the test . But they don't pass consistently because *sometimes* the operations being tested fail . They do n't seem to hang and they always fail with `` this index is closed so you ca n't do anything with it '' sorts of messages . When the test started failing we disabled it again . This reenables the test but causes it to ignore these `` index is closed '' failures . We'd
Remove Join utility class __EoT__ The functionality that this class offers can be replaced with String.join in current Java versions .
Use a threadsafe map in SearchAsyncActionTests __EoT__ Today ` SearchAsyncActionTests # testFanOutAndCollect ` uses a simple ` HashMap ` for the ` nodeToContextMap ` variable , which is then accessed from multiple threads without , apparently , explicit synchronisation . This provides an explanation for the test failure identified in # 29242 in which ` .toString ( ) ` returns ` `` [ ] '' ` just before ` .isEmpty ` returns ` false ` , without any concurrent modifications . This change converts ` nodeToContextMap ` to a ` newConcurrentMap ( ) ` so that this can not occur . It also fixes a race condition in the detection of double-calling the subsequent search phase . Closes # 29242 .
Replicate max seq_no of updates to replicas __EoT__ We start tracking max seq_no_of_updates on the primary in # 33842 . This commit replicates that value from a primary to its replicas in replication requests or the translog phase of peer-recovery . With this change , we guarantee that the value of max seq_no_of_updates on a replica when any index/delete operation is performed at least the max_seq_no_of_updates on the primary when that operation was executed . Relates # 33656
[ ML ] Return both Joda and Java formats from structure finder __EoT__ Previously the timestamp_formats field in the response from the find_file_structure endpoint contained Joda timestamp formats . This change makes that clear by renaming the field to joda_timestamp_formats , and also adds a java_timestamp_formats field containing the equivalent Java time format strings .
Fix created version for similarity validation . __EoT__ It mistakenly uses the Elasticsearch major version instead of the Lucene major version . I noticed it when backporting , it is not noticeable on master because the only two Lucene versions that are supported , 7 and 8 , encode norms the same way , unlike Lucene 6 .
[ ML ] Leniently parse ml persistent task parameters __EoT__ Ignore unknown fields when parsing the job and datafeed persistent task parameters . This is required for migrating the ml configuration work # 32905 where additional fields will be added to the task parameters ( as the config wo n't be available in the cluster state ) and those fields need to be safely parsed during a rolling upgrade to 7.0
refactor CompositeValuesSourceParserHelper for reusage __EoT__ refactor CompositeValuesSourceParserHelper for reusage by making it public and moving toXContent in order to be able to reuse the functionality downstream
Make TransportService more test-friendly __EoT__ Today , TransportService uses System.currentTimeMillis ( ) to get the current time to report on things like timeouts , and enqueues lambdas for future execution . However , in tests it is useful to be able to fake out the current time and to see what all these enqueued lambdas are really for . This change alters the situation so that we can obtain the time from the more easily-faked ThreadPool # relativeTimeInMillis ( ) , and implements some friendlier toString ( ) methods on the various Runnables so we can see what they are later .
NETWORKING : Upgrade to Netty 4.1.29 __EoT__ Few minor fixes to performance and SSL in in ` 4.1.29 ` = > why not upgrade now that it 's out for a month : )
[ CCR ] Expose auto follow stats to monitoring __EoT__
[ Monitoring ] Add cluster metadata to cluster_stats docs __EoT__ Resolves # 33691 . This PR teaches Monitoring to collect cluster metadata , if any is set , and index it into ` cluster_stats ` docs in ` .monitoring-es-* ` . After this PR , ` cluster_stats ` docs in ` .monitoring-es-* ` will contain an additional top-level ` cluster_settings ` field like so : `` ` { ... `` cluster_settings '' : { `` cluster '' : { `` metadata '' : { ... } } } } `` `
SQL : functions docs update __EoT__ Changed the format of the String and Math functions documentation page to have a unified approach , regarding document template and samples .
CCR : Make AutoFollowMetadata immutable __EoT__ We should make AutoFollowMetadata immutable to avoid being inconsistent when one thread modifies it while other reads it . CI : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-unix-compatibility/os=fedora/16/console `` ` ERROR 6.76s J1 | AutoFollowTests.testAutoFollowManyIndices < < < FAILURES ! > Throwable # 1 : java.util.ConcurrentModificationException > at __randomizedtesting.SeedInfo.seed ( [ 660C1616F2D0A0E7:4E3E396B9B410590 ] :0 ) > at java.util.ArrayList $ Itr.checkForComodification ( ArrayList.java:909 ) > at java.util.ArrayList $ Itr.next ( ArrayList.java:859 ) > at org.elasticsearch.common.io.stream.StreamOutput.lambda $ writeMapOfLists $ 1 ( StreamOutput.java:538 ) > at org.elasticsearch.common.io.stream.StreamOutput.writeMap ( StreamOutput.java:559 ) > at org.elasticsearch.common.io.stream.StreamOutput.writeMapOfLists ( StreamOutput.java:536 ) > at org.elasticsearch.xpack.core.ccr.AutoFollowMetadata.writeTo ( AutoFollowMetadata.java:125 ) > at org.elasticsearch.common.io.stream.StreamOutput.writeNamedWriteable ( StreamOutput.java:947 ) > at org.elasticsearch.cluster.metadata.MetaData.writeTo ( MetaData.java:879 ) > at org.elasticsearch.cluster.ClusterState.writeTo ( ClusterState.java:744 ) `` `
[ ML ] Review and upgrade static node settings and into dynamic cluster settings __EoT__ ML has accumulated some static node settings that make it hard for users to change . These settings require setting the setting to each node and restarting the node . For example , ` max.anomaly.records ` limits the number of records that our output per bucket to 500 by default . There has been users requesting increasing that limit . We should update that setting to be a dynamic cluster setting and deprecate the old one . At the same time , it would be good to review other similar settings .
[ CCR ] Add get auto follow pattern api __EoT__ Relates to # 33007
Fix typo ` NodeEnvironment # assertPathsDoNotExist ` __EoT__ * We want to check the individual paths here one by one to get a better to interpret assertion message
In MatchQuery , remove a check for fragile search analyzers . __EoT__ As far as I can tell this guard against fragile analyzers is no longer relevant , since we stopped setting special analyzers on numeric fields ( https : //github.com/elastic/elasticsearch/commit/3bf6f4076c9294a4b6b1e8bc08b671ef6ad74380 ) . Instead of removing the guard completely , I opted to keep a check for untokenized + unnormalized fields to avoid going through the analysis process unnecessarily . My motivation for simplifying this check is that I 'd like to add support for ` split_queries_on_whitespace ` to the new 'queryable object ' fields . As it stands , I would have to add a dedicated ` instanceof ` check for the new mapper type , which I 'd like to avoid . @ jimczi and @ nik9000 it would be great to get your thoughts on this ! I am not 100 % clear on the historical context , and may be missing an important detail .
Introduce abstract security transport testcase __EoT__ This commit introduces an AbstractSimpleSecurityTransportTestCase for security transports . This classes provides transport tests that are specific for security transports . Additionally , it fixes the tests referenced in # 33285 .
TESTS : Make score Float # NaN when there is no max score __EoT__ Fixes test failure due to maxScore set to Float # MinValue instead of Float # NaN . Closes # 33993
Fix for test version following backport of annotated_text plugin __EoT__ Version check is now > = 6.5.0 for annotated_text support
Clarify RemoteClusterService # groupIndices behaviour __EoT__ When executing a cross-cluster search , we need to search against all local indices ( and no remote indices ) in case no indices are specified . Also , if only remote indices are specified , no local indices will be queried . We previously added empty local indices whenever they were not present in the map of the grouped indices , then we would act differently later based on the extracted remote indices . Instead , we now add the empty array for local indices only in case we need to search all local indices ; the entry for local indices is not added when local indices should not be searched . This way the grouped indices reflect reality and provide a better indication of what indices will be searched .
Add validation unit tests for empty and malformed queries ( # 33095 ) __EoT__ This pull request adds unit tests to leverage REST query validation action logic . It checks for ` ParsingException ` when malformed or empty queries are sent .
Fix AutoQueueAdjustingExecutorBuilder settings validation __EoT__ Settings validation in AutoQueueAdjustingExecutorBuilder always checked against a default value which means that we never can change a max queue size that is lower than the default . This change adds tests and fixes this validation .
TEST : Avoid invalid ranges in ShardChangesActionTests __EoT__ If numWrites is between 2 and 9 , we will issue an invalid range because the from_seq_no is negative . This commit makes sure that numWrites is at least 10 , and adds an explicit test to verify invalid request ranges . CI : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-unix-compatibility/os=debian/18/console
[ TEST ] Increase processing delay in LDAP tests __EoT__ SearchGroupsResolverInMemoryTests would ( rarely ) fail in a way that suggests that the server-side delay ( 100ms ) was not enough to trigger the client-side timeout ( 5ms ) . The server side delay has been increased to try and overcome this . Resolves : # 32913
Propagate auto_id_timestamp in primary-replica resync __EoT__ A follow-up of # 33693 to propagate max_seen_auto_id_timestamp in a primary-replica resync . Relates # 33693
Propagate auto_id_timestamp in primary-replica resync __EoT__ A follow-up of # 33693 to propagate max_seen_auto_id_timestamp in a primary-replica resync . Relates # 33693
[ ML ] Display integers without .0 in file structure field stats __EoT__ Previously numeric values in the field_stats created by the find_file_structure endpoint were always output with a decimal point . This looked unfriendly and unnatural for fields that clearly store integer values . This change converts integer values to type Integer before output in the file structure field stats .
Do n't test corruption detection within CFS checksum __EoT__ It is known that Lucene does not check the tail of CFS file ( CompoundFileS , like an archive ) - see note at https : //github.com/apache/lucene-solr/blob/60e8ee717d9cd8d2425c100c21168d6a43b78516/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java # L82-L85 Therefore if we 'd like Lucene checkIndex to detect corruption we should not corrupt checksum ( last 4 bytes ) of cfs file . Closes # 33881
SQL : Move away internally from JDBCType to SQLType __EoT__ This is a first step in allowing our own custom types ( such as ` Interval ` ) internally and within JDBC as we 're moving away from a fixed enum to a pluggable interface ( which is implemented by ` JDBCType ` as well ) . Fix # 33904
HLRC : ML Stop datafeed API __EoT__ This adds the ML Stop datafeed API to the HLRC Relates to # 29827
Add commented out JVM options for G1GC __EoT__ These options are available now that we will be supporting G1GC for Java 10 and above . They are also designed so that the CMS options do n't have to be commented out in order for the G1 options to take effect .
[ CCR ] Move headers from auto follow pattern to auto follow metadata __EoT__ This ensures that we will not serialize the headers as part of the auto follow pattern in the to be added get auto follow api . Also changed the AutoFollowMetadata # context ( ) method to not include auto follow metadata as part of api calls .
[ Test ] ClientYamlSuiteRestApiParser parses specs without path parts __EoT__ Previously ClientYamlSuiteRestApiParser threw an exception when an api spec contained neither path parts nor url parameter sections . Fixes # 31649
Watcher : Ensure that execution triggers properly on initial setup __EoT__ This commit reverts most of # 33157 as it introduces another race condition and breaks a common case of watcher , when the first watch is added to the system and the index does not exist yet . This means , that the index will be created , which triggers a reload , but during this time the put watch operation that triggered this is not yet indexed , so that both processes finish roughly add the same time and should not overwrite each other but act complementary . This commit reverts the logic of cleaning out the ticker engine watches on start up , as this is done already when the execution is paused - which also gets paused on the cluster state listener again , as we can be sure here , that the watches index has not yet been created . This also adds a new test , that starts a one node cluster and emulates the case of a non existing watches index and a watch being added , which should result in proper execution . Closes # 33320
keep IndexFormatToo ( Old|New ) Exception in corruption marker __EoT__ CorruptIndexException , IndexFormatTooOldException and IndexFormatTooNewException are handled in the similar way at Store # getMetadata . It is worth to do same in Store # readLastCommittedSegmentsInfo Closes # 33916
API : Drop deprecated methods from Retry __EoT__ We deprecated the ` Retry.withBackoff ` flavors with ` Settings ` in 6.5 because they were no longer needed . This drops them form 7.0 .
Removing poor randomization for node name __EoT__ Running with `` ` ./gradlew : x-pack : plugin : ml : test -Dtests.seed=B624F5D318CE943B -Dtests.class=org.elasticsearch.xpack.ml.MachineLearningFeatureSetTests -Dtests.method= '' testNodeCount '' -Dtests.security.manager=true -Dtests.locale=es-EC -Dtests.timezone=America/Yakutat `` ` Causes two nodes to both be called ` b ` 🤦‍♂️ Gave them deterministic names for the given test scenario .
NETWORKING : Fix Portability of SO_LINGER=0 in Tests __EoT__ * Setting SO_LINGER for open but not connected non-blocking sockets throws on OSX * Fixed by only applying setting to connected sockets which will save the same number of FDs as doing it on open sockets anyway * closes # 33879 -- -- -- -- -- -- -- -- -- -- -- -- -- I manually verified that this works fine on OSX .
Propagate max_auto_id_timestamp in peer recovery __EoT__ Today we do n't store the auto-generated timestamp of append-only operations in Lucene ; and assign -1 to every index operations constructed from LuceneChangesSnapshot . This looks innocent but it generates duplicate documents on a replica if a retry append-only arrives first via peer-recovery ; then an original append-only arrives via replication . Since the retry append-only ( delivered via recovery ) does not have timestamp , the replica will happily optimize the original request while it should not . This change transmits the max auto-generated timestamp from the primary to replicas before translog phase in peer recovery . This timestamp will prevent replicas from optimizing append-only requests if retry counterparts have been processed . Relates # 33656 Relates # 33222 - I labeled this non-issue since this is an unreleased bug .
[ DOCS ] Fix list formatting in TESTING.asciidoc __EoT__ Fix the steps listed in ` Testing packaging ` to `` ` 1. step1 2. step2 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- vagrant plugin install vagrant-cachier -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 3. step3 `` ` instead of `` ` instead of : 1. step1 2. step2 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- vagrant plugin install vagrant-cachier -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 1. step3 `` `
Corrected typo in text __EoT__ Hi , I found possible typo error in doc . < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ]
Restore local history from translog on promotion __EoT__ If a shard was serving as a replica when another shard was promoted to primary , then its Lucene index was reset to the global checkpoint . However , if the new primary fails before the primary/replica resync completes and we are now being promoted , we have to restore the reverted operations by replaying the translog to avoid losing acknowledged writes . Relates # 33473 Relates # 32867
HLRC : Add support for reindex rethrottling __EoT__ This change adds support for rethrottling reindex requests to the RestHighLevelClient .
Move SoraniNormalizationFilterFactory to the common analysis plugin __EoT__ I think this was just missed out in # 25715
Update geolite2 database in ingest geoip plugin __EoT__ There have been several country subdivision changes since last time the GeoLite2 databases were updated . For examples , [ China 's subdivisions have new codes ] ( https : //www.iso.org/obp/ui/ # iso : code:3166 : CN ) and [ Norway has merged two counties into one ] ( https : //en.wikipedia.org/wiki/Tr % C3 % B8ndelag ) . Additionally , we are adding ` region_iso_codes ` to documents [ starting with the 6.5 release of the Ingest GeoIP Plugin ] ( https : //github.com/elastic/elasticsearch/pull/31669 ) . These codes are used in Kibana region maps as a Join Field for region boundaries we create in the [ Elastic Maps Service ] ( http : //maps.elastic.co/ # file/China % 20Provinces ) . So it would be great to bundle the latest GeoLite databases with Elasticsearch 6.5 . The [ geolite2-databases repo has already been updated and deployed ] ( https : //github.com/elastic/geolite2-databases/pull/2 ) . This PR just updates the dependency and corresponding database tests .
[ ML ] Refactor job deletion logic into the transport action __EoT__ The job deletion logic was scattered around a few places : the transport action , the job manager and the deletion task . Overloading the task with deletion logic also meant extra dependencies in the core package which should be unnecessary . This commit consolidates all this logic into the transport action and replaces the deletion task with a plain one that needs not be aware of deletion logic .
Logging : Drop Settings from some logger lookups __EoT__ Drops ` Settings ` from some of the methods to lookup loggers and deprecates another logger lookup that takes ` Settings ` because ` Settings ` is no longer required to build a logger .
ingest : support simulate with verbose for pipeline processor __EoT__ This change better supports the use of simulate ? verbose with the pipeline processor . Prior to this change any pipeline processors executed with simulate ? verbose would not show the full steps that include the intermediate processors for the inner pipelines . This changes also moves the PipelineProcess and TrackingResultProcessor classes to enable instance checks and to avoid overly public classes . -- -- -- -- -- -- -- - Prior to this change : `` ` PUT _ingest/pipeline/mypipeline1 { `` processors '' : [ { `` set '' : { `` if '' : `` true '' , `` tag '' : `` set_from_pipeline1 '' , `` field '' : `` a '' , `` value '' : `` foo '' } } , { `` pipeline '' : { `` pipeline '' : `` mypipeline2 '' } } ] } PUT _ingest/pipeline/mypipeline2 { `` processors '' : [ { `` rename '' : { `` tag '' : `` rename_from_pipeline2 '' , `` field '' : `` a '' , `` target_field '' : `` a1 '' } } , { `` pipeline '' : { ``
HLRC : Reindex should support ` requests_per_seconds ` parameter __EoT__ The high level Rest clients reindex method currently does n't pass on the '' requests_per_second '' that are optionally set in ReindexRequest through the Rest layer . This change makes sure the value is added to the request parameters if set .
SQL : TRUNCATE and ROUND functions __EoT__ This adds the TRUNCATE math function and changes the ROUND one to accept two parameters . This fixes https : //github.com/elastic/elasticsearch/issues/33494
SQL : Fix ANTL4 Grammar ambiguities . __EoT__ Removed rules in the grammar that were superfluous , as they are already `` caught '' other rules in the same context . Fixes : # 31885
[ DOCS ] [ ML ] Document the ML find_file_structure endpoint __EoT__ Relates # 33471 Relates # 33630
Test that transient settings beat persistent ones __EoT__ Transient settings override persistent settings , but in fact all of the tests that run as part of ` : server : test ` and ` : server : integTest ` will pass if the precedence is changed to be the other way round . This change adds a test that verifies the precedence is as documented .
Remove no-op test __EoT__ This test was introduced when muting some other tests in # 32498 , but not removed when the tests were unmuted in # 32514 .
[ CCR ] Add auto follow stats api __EoT__ GET /_ccr/auto_follow/stats Returns : `` ` { `` number_of_successful_follow_indices '' : ... `` number_of_failed_follow_indices '' : ... `` number_of_failed_remote_cluster_state_requests '' : ... `` recent_auto_follow_errors '' : [ ... ] } `` ` Relates to # 33007
Add contains method to LocalCheckpointTracker __EoT__ This change adds `` contains '' method to LocalCheckpointTracker . One of the use cases is to check if a given operation has been processed in an engine or not by looking up its seq_no in LocalCheckpointTracker . Relates # 33656
Use custom index metadata for ILM state __EoT__ Using index settings for ILM state is fragile and exposes too much information that does n't need to be exposed . Using custom index metadata is more resilient and allows more controlled access to internal information . Also adds a class ( ` LifecycleExecutionState ` ) to handle serializing/deserializing information to/from the ` Map < String , String > ` that must be used for custom index metadata . This PR is pretty big , so some areas to focus on for reviewers : 1 ) The ` LifecycleExecutionState ` class and associated ` Tests ` 2 ) The new ` ShrinkCopyExecutionState ` , which copies over the custom metadata after the shrunken index has been created , and surrounding machinery/tests . 3 ) Changes to ` IndexLifecycleRunner ` , as GitHub collapses this and it 's easy to miss .
[ ML ] Add the number of ML nodes to the ML feature set usage info __EoT__ Currently the ML usage info contains details of how many jobs and datafeeds are created/running , but _not_ the most basic statistic of how many ML nodes are in the cluster . It should be pretty easy to add this to the ` MachineLearningFeatureSetUsage ` class . Then the ` MachineLearningFeatureSet.execute ( ) ` method can populate it by iterating the discovery nodes in the cluster state and looking for the ` ml.enabled ` attribute ( which basically propagates each node 's ` node.ml ` setting to the other nodes ) . Something like : `` ` int mlNodeCount = 0 ; for ( DiscoveryNode node : clusterState.getNodes ( ) ) { Map < String , String > nodeAttributes = node.getAttributes ( ) ; String enabled = nodeAttributes.get ( MachineLearning.ML_ENABLED_NODE_ATTR ) ; if ( Boolean.parseBoolean ( enabled ) ) { ++mlNodeCount ; } } `` `
Do not override named S3 client credentials __EoT__ In cases when mixed secure S3 client credentials and insecure S3 client credentials were used ( that is , those defined on the repository ) , we were overriding the credentials from the repository using insecure settings to all the repositories . This commit fixes this by not mixing up repositories that use insecure settings with those that use secure settings . Closes # 33769
Painless : Rename *Binding classes to *ClassBinding . __EoT__ With the upcoming instance bindings , the singular *Binding name is n't descriptive enough with multiple binding types . This renames the existing *Binding classes to *ClassBinding . Mechanical change ( with some error messages changed from binding to class binding by hand ) .
Create a WatchStatus class for the high-level REST client . __EoT__ This class will be used in a few of the watcher responses ( 'get watch ' , 'ack watch ' , etc . ) , so it 's being introduced first in its own PR . To create this PR , I first copied over all ` WatchStatus ` and its dependencies without modification , then iteratively cleaned them up . It 's likely easiest to review by going through the commits separately .
Move CompletionStats into the Engine __EoT__ By moving CompletionStats into the engine we can easily cache the stats for read-only engines if necessary . It also moves the responsibiltiy out of IndexShard which has quiet some complexity already . Relates to # 33835
Fix potential NPE in ` _cat/shards/ ` with partial CommonStats __EoT__ Today if we fetch common stats from a shard we might get a partial response if the shard is closed while we fetch the stats . This causes hard to track and reproduce NPEs . This change streamlines null checking to ensure we only render stats we actually received .
Test framework fall cleaning __EoT__ Wraps all lines in our test framework at 140 characters because that is our standard line length and removes all of the checkstyle suppressions for the test framework . Drops most of ` ModuleTestCase ` because it is n't used and we 're moving away from using guice in the way that it wants to test anyway . Also switches a few classes that extend it but do n't use it to extend ` ESTestCase ` instead .
Allow TokenFilterFactories to rewrite themselves against their preceding chain __EoT__ We currently special-case ` SynonymFilterFactory ` and ` SynonymGraphFilterFactory ` , which need to know their predecessors in the analysis chain in order to correctly analyze their synonym lists . This special-casing does n't work with Referring filter factories , such as the Multiplexer or Conditional filters . We also have a number of filters ( eg the Multiplexer ) that will break synonyms when they appear before them in a chain , because they produce multiple tokens at the same position . This commit adds two methods to the TokenFilterFactory interface . * getChainAwareTokenFilterFactory ( ) allows a filter factory to rewrite itself against its preceding filter chain , or to resolve references to other filters . It replaces ` ReferringFilterFactory ` and ` CustomAnalyzerProvider.checkAndApplySynonymFilter ` , and by default returns ` this ` . * runForSynonyms ( ) defines whether or not a filter should be applied when building a synonym list Analyzer . By default it returns ` true ` . Fixes # 33609
[ CCR ] Rename idle_shard_retry_delay to poll_timout in auto follow patterns __EoT__
Move DocsStats into Engine __EoT__ By moving DocStats into the engine we can easily cache the stats for read-only engines if necessary . It also moves the responsibiltiy out of IndexShard which has quiet some complexity already .
[ Docs ] Clarify accessing Date methods in painless __EoT__ I just tried to access the millis of a date field in painless and tried to use `` getMillis '' on the document value like ` doc [ 'event_date ' ] .value.getMillis ` because that is how I read the documentation . It turns out the way it works is ` doc [ 'event_date ' ] .value.millis ` . I might be missing something , but if not I think the docs are a bit misleading and could be corrected like suggested .
add RemoveCorruptedShardDataCommand __EoT__ add ` elasticsearch-shard ` command-line tool * We should have one tool for dealing with corruptions , both in the translog and in the lucene index The tool will refuse to run if there are no existing corruption markers ( i.e. , it will only work on known corrupted shards ) * adds ` elasticsearch-shard remove-corrupted-segments ` tool instead of dropped in # 32279 ` index.shard.check_on_startup : fix ` setting * actually translog does **not** create corrupted file marker - it has to be address in following PR * The tool will first run a dry run and show an analysis of what it 's going to do to the user , get confirmation and then perform required operations . * ` -dry-run ` option could be there to provide an overview * The tool should fail when check index fails to drop corrupted segments in Lucene . In the future we can offer users to only recover the translog , if needed . We do n't feel we need the complexity right now . * We should document the implication of the tool to join relationships as it may be unexpected to users . * The
Cut over to unwrap segment reader __EoT__ The fix in # 33757 introduces some workaround since FilterCodecReader didn't support unwrapping . This cuts over to a more elegant fix to access the readers segment infos .
SQL : Fix issue with options for QUERY ( ) and MATCH ( ) . __EoT__ Previously multiple comma separated lists of options where not recognized correctly which resulted in only the last of them to be taked into account , e.g . : For the following query : SELECT * FROM test WHERE QUERY ( 'search ' , 'default_field=foo ' , 'default_operator=and ' ) '' only the ` default_operator=and ` was finally passed to the ES query . Fixes : # 32602
Emphasize that filesystem-level backups do n't work __EoT__ It is not obvious that a filesystem-level backup may capture an inconsistent set of files that may fail on restore , or ( worse ) succeed having silently discarded some data . This change spells the out , and reorganises the first page or so of the snapshot/restore docs to make this warning fit more nicely .
Use the global doc id to generate random scores __EoT__ This commit changes the random_score function to use the global docID of the document rather than the segment docID to generate random scores . As a result documents that have the same segment docID within the shard will generate different scores .
Add minimal sanity checks to custom/scripted similarities . __EoT__ Lucene 8 introduced more constraints on similarities , in particular : - scores must not be negative , - scores must not decrease when term freq increases , - scores must not increase when norm ( interpreted as an unsigned long ) increases . We ca n't check every single case , but could at least run some sanity checks . Relates # 33309
Profiler : Don ’ t profile NEXTDOC for ConstantScoreQuery . __EoT__ A ConstantScore query will return the iterator of its inner query . However , when profiling , the constant score query is wrapped separately from its inner query , which distorts the times emitted by the profiler . Return the iterator directly in such a case . Closes # 23430
[ CCR ] Change FollowIndexAction.Request class to be more user friendly __EoT__ Instead of having one constructor that accepts all arguments , all parameters should be provided via setters . Only leader and follower index are required arguments . All arguments are validated in the validate ( ) method . This should make this class easier to use in tests and transport client .
SQL : day and month names tests workaround __EoT__ Because of https : //github.com/elastic/elasticsearch/issues/33621 # issuecomment-420617752 and the fact that ` -Djava.locale.providers=COMPAT ` option is not passed along when the jvm is forked for a test , the tests use a different approach to verify the DAYNAME and MONTHNAME functions . Fixes https : //github.com/elastic/elasticsearch/issues/33621
Test : Relax jarhell gradle test __EoT__ Gradle can sometimes emit mixed log lines due to how we spawn things in separate processes . This commit changes the jarhell integ test to only look for the exception and message , instead of including the outer part about the exception in thread main . closes # 33774
[ CCR ] Fail with a descriptive error if leader index does not exist __EoT__ PR for # 33737
Add ES version 6.4.2 ( master branch ) __EoT__ Self descriptive title : )
Ensure realtime ` _get ` and ` _termvectors ` do n't run on the network thread __EoT__ The change in # 27500 introduces this regression that causes ` _get ` and ` _term_vector ` actions to run on the network thread if the realtime flag is set . This fixes the issue by delegating to the super method forking on the corresponding threadpool . Relates to # 27500 This code is not released yet .
Factor out a ChannelActionListener __EoT__ We use similar / same concepts in SerachTransportService and HandledTransportAction but both duplicate the efforts with slightly different implementation details . This streamlines sending responses / exceptions back to a channel in an ActionListener with appropriate logging .
Checkstyle : Package declarations __EoT__ Make sure that all java files have a package declaration and that all of the package declarations line up with the directory structure . This would have caught the bug that I caused in 190ea9a6def9082348d983b16420ef02607d4c17 and fixed in b6d68bd805f1858a0210e381402236dea1d42509 .
SQL : Better handling of number parsing exceptions __EoT__ Add proper exceptions in case the parsing of numbers ( too large , invalid format ) fails . Close # 33622
[ DOCS ] Fixed list formatting __EoT__ In the ` rest-api-spec ` test documentation there are some small issues with GitHub formatting . This pr fixes them : )
Update scroll.asciidoc - clarifying that the ` _scroll_id ` does n't always change between ` scroll ` requests __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read
Clarify scoring for multi_match phrase type __EoT__ The original statement `` Runs a match_phrase query on each field and combines the _score from each field . '' for the phrase type is a bit misleading . The phrase type behaves like the best_fields type and does not combine the scores of each fields .
corrected several grammar errors __EoT__ Corrected several grammar errors .
[ ML ] [ HLRC ] Remove deleted property from Job __EoT__ The deleted property is meant to be used internally . Users of the client should not need interact with that property .
SQL : Move some UCASE tests to a file that ignores them for certain known locales __EoT__ Fix for https : //github.com/elastic/elasticsearch/issues/33687
Remove discovery-file plugin __EoT__ In # 33241 we moved the file-based discovery functionality to core Elasticsearch , but preserved the ` discovery-file ` plugin , and support for the existing location of the ` unicast_hosts.txt ` file , for BWC reasons . This commit completes the removal of this plugin .
HLRC : Get ML calendars __EoT__ For # 29827
New Annotated_text field type __EoT__ Largely a copy of ` text ` field type but adds ability to include markdown-like syntax in the text . The “ AnnotatedText ” class parses text+markup and converts into plain text and AnnotationTokens . The annotation token values are injected unchanged alongside the regular text tokens to provide a form of additional indexed overlay useful in positional searches and highlighting . See example use in https : //gist.github.com/markharwood/13dfd386d1c3ae76e116dd3d42413f58 Closes # 29467
SQL : Grammar tweak for number declarations __EoT__ Consider plus and minus as part of a number declaration ( to avoid the minus be treated as a negation ) . Close # 33765
NETWORKING : Def CName in Http Publish Addr to True __EoT__ * Follow up to # 32806 setting the setting to true for 7.x
[ CCR ] Changed AutoFollowCoordinator to keep track of certain statistics __EoT__ The following stats are being kept track of : 1 ) The total number of times that auto following a leader index succeed . 2 ) The total number of times that auto following a leader index failed . 3 ) The total number of times that fetching a remote cluster state failed . 4 ) The most recent 256 auto follow failures per auto leader index ( e.g . create_and_follow api call fails ) or cluster alias ( e.g . fetching remote cluster state fails ) . Each auto follow run now produces a result that is being used to update the stats being kept track of in AutoFollowCoordinator . The transport and rest actions are added in a follow up PR . Relates to # 33007
MINOR : Drop Redundant Ctx . Check in ScriptService __EoT__ * This check is completely redundant , the expression script engine will throw anyway ( and with a similar message ) for those contexts that it can not compile . Moreover , the update context is not the only context that is not suported by the expression engine at this point so handling the update context separately here makes no sense . -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Just a random find : )
[ Monitoring ] Removing unused version . * fields __EoT__ This PR removes fields that are not actually used by the Monitoring UI . This will greatly simplify the eventual migration to using Metricbeat for monitoring Elasticsearch ( see https : //github.com/elastic/beats/pull/8260 # discussion_r215885868 for more context and discussion around removing these fields from ES collection ) .
add version , policyname , and modifiedDate to ILM Explain API __EoT__ Adds the currently executing policy-name , its version , and its modified date to the explain api for every executing/managed index TODO : - [ x ] find right place for integration test catching a phase mid-execution ( so the info is rendered ) - decided that the right place is the IndexLifecycleIT Client tests . two birds with one stone . - [ x ] update HLRC code to reflect server changes
HLRC : split indices request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the IndicesClient request converters .
Build : Change test task sanity check to be per project __EoT__ This commit changes the sanity check which ensures the test task was properly replaced with randomized testing to have a per project check , isntead of a global one . The previous global check assumed all test tasks within the root project and below should be randomized testing , but that is not the case for a multi project in which only one project is an elasticsearch plugin . While the new check is not able to emit all of the failed replacements in one error message , the efficacy of the check remains .
[ CCR ] Do not unnecessarily wrap fetch exception in a ElasticSearch exception and __EoT__ properly map fetch_exception.exception field as object . The extra ` caused_by ` level is not necessary here : `` ` '' fetch_exceptions '' : [ { `` from_seq_no '' : 1 , `` retries '' : 106 , `` exception '' : { `` type '' : `` exception '' , `` reason '' : `` [ index1 ] IndexNotFoundException [ no such index ] '' , `` caused_by '' : { `` type '' : `` index_not_found_exception '' , `` reason '' : `` no such index '' , `` index_uuid '' : `` _na_ '' , `` index '' : `` index1 '' } } } ] , `` `
Fixed a grammatical mistake : 'a HTTP ... ' - > 'an HTTP ... ' __EoT__ Fixed the mistake of 'a HTTP ... ' , as I have mentioned in # 33728 . Closes # 33728
[ CCR ] Handle leader index with no mapping correctly __EoT__ When a leader index is created , it may not have a mapping yet . Currently if you follow such an index the shard follow tasks fail with NoSuchElementException , because they expect a single mapping . This commit fixes that , by allowing that a leader index does not yet have a mapping . Closes # 33736
Ensure fully deleted segments are accounted for correctly __EoT__ We ca n't rely on the leaf reader ordinal in a wrapped reader since it might not correspond to the ordinal in the SegmentInfos for it's SegmentCommitInfo . Relates to # 32844 Closes # 33689 Closes # 33755
[ CCR ] Make index.xpack.ccr.following_index an internal setting __EoT__
[ CCR ] Fail with a good error if a follow index does not have ccr metadata __EoT__ instead of a NPE .
DiskThresholdDecider # canAllocate can report negative free bytes __EoT__ DiskThresholdDecider # canAllocate can report negative free bytes * it is enough for messages use size format with ` ByteSizeValue.toString ( bytes ) ` Closes # 33596
Skip rebalancing when cluster_concurrent_rebalance threshold reached __EoT__ Follow-up from # 27628 This is a pre-emptive check during shard relocation . Most of the time during relocation when relocating shards are more than the _cluster_concurrent_rebalance_ we are skipping rebalancing instead of iterating over all the shards and returning a ` THROTTLE ` decision . This results in faster shard iteration . **Benchmarking** - Data nodes ( i3.8xlarge ) AWS EC2 - Master node ( c4.8xlarge ) AWS EC2 - Shards ( count 25k , 2500 indices , 5 primary , 1 replica , size 5gb ) - Cluster settings ` `` indices.recovery.max_bytes_per_sec '' : `` 300mb '' ` ` `` cluster.routing.allocation.node_concurrent_recoveries '' : `` 4 '' ` ` `` cluster.routing.allocation.cluster_concurrent_rebalance '' : `` 2 '' ` - OS version ` 4.9.38-16.35.amzn1.x86_64 ` - JRE ` 1.8 ` - Performed relocation from 100 data nodes to 100 data nodes . Time spent on rebalance , tp90 is ` 732ms ` , total time spent in allocation tp90 is ` 4820ms ` without optimization.This optimization cuts down the time spent in rebalance which is roughly 15 % of the time spent in a single iteration made by the master
Move precommit task implementation to java __EoT__ - There are no intended functional changes . - tried to keep the constructors light and move things into fields and task actions , bot h of which are called at runtime , so we do n't need ` afterEvaluate ` - prefer delegation over inheritance for exec tasks . The fact taht we are executing is an implementation detail , delegation exposes configuration for the task that we never use , nor want to . - reduce coupling by making the tasks unaware of project extensions like ` runtimeJavaHome `
Favor running compile tasks before pre-commit __EoT__ With this change we wo n't need to call ` ./gradlew compileJava ` before calling ` precommit ` . This is not 100 % what CI achieved . To do that we would need to set up this relationship between all the tasks between all the projects so that compile is done for all projects first , not just this one . I think this will be sufficient and we can leave the rest up to Gradle as it will already order projects based on dependencies .
Add create rollup job api to high level rest client __EoT__ This pull request adds the Create Rollup Job API to the high level REST client . It supersedes # 32703 and adds dedicated request/response objects so that it does not depend on server side components . Related # 29827
Make custom index metadata completely immutable __EoT__ Currently ` IndexMetadata # getCustomData ( ... ) ` wraps the custom metadata in an unmodifiable map , but in case there is no entry for the specified key then a NPE is thrown by Collections.unmodifiableMap ( ... ) . This is not ideal in case callers like to throw an exception with a specific message . ( like in the case for ccr to indicate that the follow index was not created by the create_and_follow api and therefor incompatible as follow index ) I think making ` DiffableStringMap ` itself immutable is better then just wrapping custom metadata with ` Collections.unmodifiableMap ( ... ) ` in all methods that access it . Also removed the ` equals ( ) ` , ` hashcode ( ) ` and to ` toString ( ) ` methods of ` DiffableStringMap ` , because ` AbstractMap ` already implements these methods .
[ CCR ] Make auto follow patterns work with security __EoT__ Relates to # 33007
Scripting : Rework joda time backcompat __EoT__ This commit switches the joda time backcompat in scripting to use augmentation over ZonedDateTime . The augmentation methods provide compatibility with the missing methods between joda 's DateTime and java 's ZonedDateTime . Due to getDayOfWeek returning an enum in the java API , ZonedDateTime is wrapped so that the method can return int like the joda time does . The java time api version is renamed to getDayOfWeekEnum , which will be kept through 7.x for compatibility while users switch back to getDayOfWeek once joda compatibility is removed . Usage of the joda time methods trigger a deprecation warning .
Test : Fix dv date bwc tests when no docs have a value __EoT__ This commit adds a guard around the rare case that no documents in the 10 iterations actually have any values , thus making the warning check incorrect . closes # 32779
Do not count shard changes tasks against REST tests __EoT__ When executing CCR REST tests it is going to be expected after global checkpoint polling goes in that shard changes tasks can still be pending at the end of the test . One way to deal with this is to set a low timeout on these polls , but then that means we are not executing our REST tests with our default production settings and instead would be using an unrealistic low timeout . Alternatively , since we expect these tasks to be there , we can not count them against the test . That is what this commit does . Relates # 33683
[ HLRC ] [ ML ] Add ML get datafeed API to HLRC __EoT__ Relates # 29827
Move CCR REST tests to ccr sub-project __EoT__ This commit moves the CCR REST tests to the ccr sub-project as another step towards running : x-pack : plugin : ccr : check giving us full coverage on CCR .
Move CCR monitoring tests to ccr sub-project __EoT__ This commit moves the CCR monitoring tests from the monitoring sub-project to the ccr sub-project .
Remove unneeded listener on MoveToNextStepUpdateTask __EoT__ There was a listener that re-runs the policy with the new state when the cluster state is processed by the ` MoveToNextStepUpdateTask ` . This removes this listener as we will execute the policy through the ` IndexLifecyleService ` cluster state listener .
Add script to cache dependencies __EoT__ With the introduction of immutable workers into our CI , we now have a problem where we would have to download dependencies on every single build . To this end our infrastructure team has introduced the possibility to download dependencies one time and then bake these into the base immutable worker image . For this , we introduce our version of this special script which runs a task that downloads all dependencies of all configurations . With this script , our infrastructure team will be rebuilding these images on an at-least daily basis . This helps us avoid having to download the dependencies for every single build .
Cleanup assertions in global checkpoint listeners __EoT__ This commit is a cleanup of the assertions in global checkpoint listeners , simplifying them and adding some messages to them in case the assertions trip . Relates # 33690
[ CCR ] Move ccr tests in core module back to ccr module __EoT__ When developing ccr it is not ideal if tests are in multiple modules . Even the classes these tests test are in the core module , it is easier if these tests are in ccr module in order to avoid running the test task in core module . This results in running many non ccr tests . This way when developing ccr we can run locally : ./gradlew x-pack : plugin : core : precommit x-pack : plugin : ccr : check before pushing to PR branches and be confident that the PR build passes , without running x-pack : plugin : core : check task .
HLRC : ML PUT Calendar __EoT__ For # 29827
[ Tests ] Fix randomization in StringTermsIT __EoT__ I just ran into this while removing multi-line statements , but this seems like an actual bug in the intended randomization of the test , possibly a leftover from a debugging session . My guess is the COLLECT_SEGMENT_ORDS variable should be randomized .
Only notify ready global checkpoint listeners __EoT__ When we add a global checkpoint listener , it is also carries along with it a value that it thinks is the current global checkpoint . This value can be above the actual global checkpoint on a shard if the listener knows the global checkpoint from another shard copy ( e.g. , the primary ) , and the current shard copy is lagging behind . Today we notify the listener whenever the global checkpoint advances , regardless if it goes above the current global checkpoint known to the listener . This commit reworks this implementation . Rather than thinking of the value associated with the listener as the current global checkpoint known to the listener , we think of it as the value that the listener is waiting for the global checkpoint to advance to ( inclusive ) . Now instead of notifying all waiting listeners when the global checkpoint advances , we only notify those that are waiting for a value not larger than the actual global checkpoint that we advanced to .
Do n't count hits via the collector if the hit count can be computed from index stats . __EoT__ This is something that we were already doing when sorting by field , which is now also done when sorting by score . As-is this change will speed up top-k ` term ` queries . This could work for ` match_all ` queries as well when we implement the ` setMinCompetitiveScore ` API on their Scorer .
Test fix - Graph vertices could appear in different orders __EoT__ Graph vertices could appear in different orders based on map insertion sequence Closes # 33686
Structured audit logging __EoT__ As it now stands logfile security auditing is *almost* structured . Most fields are of the form ` key= [ value ] ` and there is no text in between the entries ( besides the comma and space delimiters ) . If all values where of the form ` key= [ value ] ` then such entries would count as ` 'structured ' ` . Examples of such values , which are *not* prepended by the field name , are : ` date ` , ` host name ` , ` node name ` , ` layer : rest or transport ` . This PR builds the log event as a *Map* , and lets log4j 's internals ( precisely the ` layout ` assigned to the ` appender ` ) to handle the actual printing format . This is better because we could have many appenders for the same log each with a particular layout from : JSON , XML or syslog ( all structured ) to custom ones to get the desired human friendly templated format . Even better : we could change ` appenders ` and ` layouts ` at runtime , without
Core : Add DateFormatter interface for java time parsing __EoT__ The existing approach used java time date formatters when a format based string like ` date_time||epoch_millis ` was used , instead of the custom code written in the epoch date formatter . In order to properly solve this , a new interface called ` DateFormatter ` has been added , which now can be implemented for custom formatters . Currently there are two implementations , one using java time and one doing the epoch_millis formatter , which simply parses a number and then converts it to a date in UTC timezone . The DateFormatter interface now also has a method to retrieve the name of the formatter , which is needed for mapping changes anyway . The existing ` CompoundDateTimeFormatter ` class has been removed , the name was not really nice anyway . One more minor change is the fact , that the new java time using FormatDateFormatter does not try to parse the date with its printer implementation first ( which might be a strict one and fail ) , but a printer can now be specified in addition . This saves one potential failure/exception when parsing less
[ CCR ] Check whether the rejected execution exception has set the shutdown flag __EoT__ and if so debug log it and otherwise rethrow . This should fix a couple of test failures where during test teardown tests failed due to uncaught exceptions being detected .
Adjust BWC version on settings upgrade test __EoT__ The skip_unavailable setting did not exist until 6.1.0 . This means that we need to skip this test on versions prior to 6.1.0 . We need to use this setting because otherwise we will fail startup without it ( since we are not setting up a real remote cluster connection ) . This commit adds a skip for all versions prior to 6.1.0 .
[ Docs ] Minor fix in ` has_child ` javadoc comment __EoT__ The min and max constants are accidentaly the wrong way around .
[ Kerberos ] Add realm name & UPN to user metadata __EoT__ We have a Kerberos setting to remove realm part from the user principal name ( ` remove_realm_name ` ) . If this is true then the realm name is removed to form username but in the process , the realm name is lost . For scenarios like Kerberos cross-realm authentication , one could make use of the realm name to determine role mapping for users coming from different realms . This commit adds user metadata for ` realm ` and ` user_principal_name ` .
SQL : Return functions in JDBC driver metadata __EoT__ Update JDBC database metadata to advertised the supported functions Add aliases to some date/time functions to match the ODBC spec Fix # 33671
[ Kerberos ] Move tests based on SimpleKdc to evil-tests __EoT__ We have a test dependency on Apache Mina when using SimpleKdcServer for testing Kerberos . When checking for LDAP backend connectivity , the code checks for deadlocks which require additional security permissions ` accessClassInPackage.sun.reflect ` . As this is only for test and we do not want to add security permissions to production , this commit moves these tests and related classes to x-pack evil-tests where they can run with security manager disabled . The plan is to handle the security manager exception in the upstream issue [ DIRMINA-1093 ] ( https : //issues.apache.org/jira/browse/DIRMINA-1093 ) and then once the release is available to run these tests with security manager enabled . Closes # 32739
Security : remove wrapping in put user response __EoT__ This change removes the wrapping of the created field in the put user response . The created field was added as a top level field in # 32332 , while also still being wrapped within the ` user ` object of the response . Since the value is available in both formats in 6.x , we can remove the wrapped version for 7.0 .
SQL : Return correct catalog separator in JDBC __EoT__ Return ` : ` instead of ` . ` ( which leads to syntax errors ) . Fix # 33654
[ CCR ] Add validation for max_retry_delay __EoT__
[ CCR ] Add monitoring mapping verification test __EoT__ Added test that verifies that all fields in ` ShardFollowNodeTaskStatus ` are mapped in ` monitoring-es.json ` .
CORE : Disable Setting Type Validation __EoT__ * Reverts setting type validation introduced in # 33503
Use serializable exception in GCP listeners __EoT__ We used TimeoutException here but that 's not serializable . This commit switches to a serializable exception so that we can test for the exception type on the remote side . Relates # 33620
Addressing forecast IT deleteForecast test failure ( # 33561 ) __EoT__ This particular test failure is tricky to reproduce . I have added an index refresh after we delete the forecast docs to hopefully mitigate the bug . Since I can not reproduce it , I can not confirm the fix . @ droberts195 let me know what you think .
[ DOCS ] Moves securing-communications to docs __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the securing-communications content from x-pack/docs/security to docs/reference/security . NOTE : There is no code snippet testing in this content , so no changes are required to the gradle checks .
[ HLRC ] [ ML ] Add ML delete datafeed API to HLRC __EoT__ Relates # 29827
Use serializable exception in GCP listeners __EoT__ We used TimeoutException here but that 's not serializable . This commit switches to a serializable exception so that we can test for the exception type on the remote side . Relates # 33620
[ CCR ] Add metadata to keep track of the index uuid of the leader index in the follow index __EoT__ The follow index api checks if the recorded uuid in the follow index matches with uuid of the leader index and fails otherwise . This validation will prevent a follow index from following an incompatible leader index . The create_and_follow api will automatically add this custom index metadata when it creates the follow index . Closes # 31505
SQL : Fix result column names for CAST __EoT__ Previously , when an non-pruned cast ( casting as a different data type ) got applied on a table column in the ` SELECT ` clause , the name of the result column did n't contain the target data type of the cast , e.g . : SELECT CAST ( MAX ( salary ) AS DOUBLE ) FROM `` test_emp '' returned as column name : CAST ( MAX ( salary ) ) instead of : CAST ( MAX ( salary ) AS DOUBLE ) Closes # 33571
Fix field mapping updates with similarity __EoT__ This change fixes a bug introduced in 6.3 that prevents fields with an explicit similarity to be updated . It also adds a test that checks this case for similarities but also for analyzers since they could suffer from the same problem . Closes # 33611
Use file-based discovery not MockUncasedHostsProvider __EoT__ Today we use a special unicast hosts provider , the ` MockUncasedHostsProvider ` , in many integration tests , to deal with the dynamic nature of the allocation of ports to nodes . However # 33241 allows us to use file-based discovery to achieve the same goal , so the special test-only ` MockUncasedHostsProvider ` is no longer required . This change removes ` MockUncasedHostProvider ` and replaces it with file-based discovery in tests based on ` EsIntegTestCase ` .
[ CCR Monitoring ] Only collect stats for specified indices __EoT__ Follow up to # 33617 . Relates to # 30086 . As with all other per-index Monitoring collectors , the ` CcrStatsCollector ` should only collect stats for the indices the user wants to monitor . This list is controlled by the ` xpack.monitoring.collection.indices ` setting and defaults to all indices .
Add follower index to CCR monitoring and status __EoT__ This commit adds the follower index to CCR shard follow task status , and to monitoring .
[ CCR ] Add auto follow pattern APIs to transport client . __EoT__
Address license state update/read thread safety __EoT__ This change addresses some issues regarding thread safety around updates and method calls on the XPackLicenseState object . There exists a possibility that there could be a concurrent update to the XPackLicenseState when there is a scheduled check to see if the license is expired and a cluster state update . In order to address this , the update method now has a synchronized block where member variables are updated . Each method that reads these variables is now also synchronized . Along with the above change , there was a consistency issue around security calls to the license state . The majority of security checks make two calls to the license state , which could result in incorrect behavior due to the checks being made against different license states . The majority of this behavior was introduced for 6.3 with the inclusion of x-pack in the default distribution . In order to resolve the majority of these cases , the ` isSecurityEnabled ` method is no longer public and the logic is also included in individual methods about security such as ` isAuthAllowed ` . There were a few cases where this
Remove volatile from global checkpoint listeners __EoT__ This field does not need to be volatile because all accesses are done under a lock . This commit removes the unnecessary volatile modifier from this field .
[ CCR ] Added history uuid validation __EoT__ For correctness we need to verify whether the history uuid of the leader index shards never changes while that index is being followed . * The history UUIDs are recorded as custom index metadata in the follow index . * The follow api validates whether the current history UUIDs of the leader index shards are the same as the recorded history UUIDs . If not the follow api fails . * While a follow index is following a leader index ; shard follow tasks on each shard changes api call verify whether their current history uuid is the same as the recorded history uuid . Relates to # 30086
[ CCR ] Update es monitoring mapping and __EoT__ change qa tests to query based on leader index .
Add ` _source ` -only snapshot repository __EoT__ This change adds a ` _source ` only snapshot repository that allows to wrap any existing repository as a _backend_ to snapshot only the ` _source ` part including live docs markers . Snapshots taken with the ` source ` repository wo n't include any indices , doc-values or points . The snapshot will be reduced in size and functionality such that it requires full re-indexing after it 's successfully restored . The restore process will copy the ` _source ` data locally starts a special shard and engine to allow ` match_all ` scrolls and searches . Any other query , or get call will fail with and unsupported operation exception . The restored index is also marked as read-only . This feature aims mainly for disaster recovery use-cases where snapshot size is a concern or where time to restore is less of an issue . **NOTE** : The snapshot produced by this repository is still a valid lucene index . This change does n't allow for any longer retention policies which is out of scope for this change .
upgrade randomizedrunner to 2.7.0 __EoT__ Targets https : //github.com/randomizedtesting/randomizedtesting/issues/268 + many other [ bug fixes ] ( https : //github.com/randomizedtesting/randomizedtesting/blob/master/CHANGES.txt )
Fix heading in composite-aggregation.asciidoc __EoT__ The heading for the `` Missing buckets '' in the `` Order '' section is too deep .
[ HLRC ] [ ML ] Add ML put datafeed API to HLRC __EoT__ This also changes both ` DatafeedConfig ` and ` DatafeedUpdate ` to store the query and aggs as a bytes reference . This allows the client to remove its dependency to the named objects registry of the search module . Relates # 29827
Update AWS SDK to 1.11.340 in repository-s3 __EoT__ Updates the version of the AWS SDK to 1.11.340 ( previously 1.11.225 ) in the repository-s3 plugin . I was a bit worried about how the removal of the region setting ( # 22758 ) would play with the latest versions of the AWS SDK , because in code samples the region is always set when creating the client . With this pull request , when no endpoint is defined then the client is initialized with the S3 default endpoint and region ( as provided by the AWS SDK ) and with the [ enableForceGlobalBucketAccess ] ( https : //docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/AmazonS3Builder.html # enableForceGlobalBucketAccess -- ) option . With this option , the first HTTP request ( doesBucketExist ( ) ) will be executed against the default S3 endpoint which returns a HTTP redirection response with the bucket 's region set in the response headers . This region is then used by the AWS SDK for the other requests . It also keeps an internal cache that contains the resolved regions to use for a given bucket . When the endpoint is defined in the settings : - if this endpoint is an AWS
Update match-query.asciidoc __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md # contributing-as-part-of-a-class ) for that .
[ CCR ] Improve shard follow task 's retryable error handling __EoT__ Improve the failure handling of retryable errors by retrying remote calls in a exponential backoff like manner . The delay between a retry would not be longer than the configured max retry delay . Also retryable errors will be retried indefinitely . Relates to # 30086
Clarify context suggestions filtering and boosting __EoT__ This change clarifies the documentation of the context completion suggester regarding filtering and boosting with contexts . Unlike the suggester v1 , filtering on multiple contexts works as a disjunction , a suggestion matches if it contains at least one of the provided context values and boosting selects the maximum score among the matching contexts . This commit also adapts an old test that was written for the v1 suggester and commented out for version 2 because the behavior changed .
Disable CCR REST endpoints if CCR disabled __EoT__ This commit avoids enabling the CCR REST endpoints if CCR is disabled .
Upgrade remote cluster settings __EoT__ This commit adds settings upgraders for the ` search.remote . * ` settings that can be in the cluster state to automatically upgrade these settings to ` cluster.remote.* ` . Because of the infrastructure that we have here , these settings can be upgraded when recovering the cluster state , but also when a user tries to make a dynamic update for these settings . Relates # 33413 , relates # 33536
NETWORKING : http.publish_host Should Contain CNAME __EoT__ * Restores old 2.x behaviour of prepending the hostname to ` http.publish_host ` if available * closes # 22029
Reset replica engine to global checkpoint on promotion __EoT__ When a replica starts following a newly promoted primary , it may have some operations which do n't exist on the new primary . Thus we need to throw those operations to align a replica with the new primary . This can be done by first resetting an engine from the safe commit , then replaying the local translog up to the global checkpoint . Relates # 32867
HLRC : ML Delete Forecast API __EoT__ Adds the ML Delete Forecast API to the HLRC This relates to ( # 29827 )
Remove debug logging in full cluster restart tests __EoT__ These logs are incredibly verbose , and it makes chasing normal failures burdensome . This commit removes the debug logging , which can be reenabled again if needed .
Expose CCR to the transport client __EoT__ This commit exposes CCR to the transport client .
SQL : Make Literal a NamedExpression __EoT__ Literal now is a NamedExpression reducing the need for Aliases for folded expressions leading to simpler optimization rules . Fix # 33523
[ DOCS ] Adds missing built-in user information __EoT__ Related to https : //github.com/elastic/elasticsearch/pull/32515 This PR adds information about the beats_system and apm_system built-in users to https : //www.elastic.co/guide/en/elasticsearch/reference/master/windows.html
Improves doc values format deprecation message __EoT__ This changes the deprecation message when doc values fields do not supply a format form logging a deprecation warning for each offending field individually to logging a single message which lists all offending fields Closes # 33572
Use IndexWriter.getFlushingBytes ( ) rather than tracking it ourselves __EoT__ Currently we keep track of how many bytes are currently being written to disk in an AtomicLong within ` InternalEngine ` , updating it on refresh . The IndexWriter has its own accounting for this , and exposes it via a ` getFlushingBytes ` method in the latest lucene 8 snapshot . This commit removes the InternalEngine tracking in favour of just using the IndexWriter method .
Fix upgrading of list settings __EoT__ Upgrading list settings is broken because of the conversion that we do to strings , and then when we try to put back the upgraded value we do not know that it is a representation of a list . This commit addresses this by adding special handling for list settings . Relates # 33536 , relates # 33537 , relates # 33503
Add read-only Engine __EoT__ This change adds an engine implementation that opens a reader on an existing index but does n't permit any refreshes or modifications to the index . Relates to # 32867 Relates to # 32844
HLRC : Add ML get categories API __EoT__ Relates # 29827
SQL : Adds MONTHNAME , DAYNAME and QUARTER functions __EoT__ This PR adds three functions from those listed [ here ] ( https : //github.com/elastic/elasticsearch/issues/33092 ) .
SQL : Fix bug in REPLACE function . Adds more tests to all string functions __EoT__ The bug made all inline testing with this function to throw exceptions apparently unrelated to the function itself . Added more tests to all other functions targetting the missing inline testing part .
[ ML ] Rename input_fields to column_names in file structure __EoT__ This change tightens up the meaning of the `` input_fields '' field in the file structure finder output . Previously it was permitted but not calculated for JSON and XML files . Following this change the field is called `` column_names '' and is only permitted for delimited files . Additionally the way the column names are set for headerless delimited files is refactored to encapsulate the way they're named to one line of the code rather than having the same logic in two places .
Add full cluster restart base class __EoT__ This commit adds a base class for full cluster restart tests .
CORE : Validate Type for String Settings __EoT__ * Special handling for ` String ` in the generic Setting class ( I think this is justified though a little dirty because we parse raw values String values for all types ... I do n't see how else we can do this without changing the APIs either ) : * If we parse out a ` String ` type setting , validate that it came from a scalar raw value * Closes # 33135
Copy and validate soft-deletes setting on resize __EoT__ This change copies and validates the soft-deletes setting during resize . If the source enables soft-deletes , the target must also enable it . Closes # 33321
SQL : Fix result column names for arithmetic functions __EoT__ Previously , When an arithmetic function is applied on a table column in the ` SELECT ` clause the name of the result column name contained weird characters used internally when processing the SQL statement . E.g . : ` SELECT CHAR ( emp_no % 10000 ) FROM `` test_emp '' ` returned : ` CHAR ( ( emp_no { f } # 14 ) % 10000 ) ) ` as the column name instead of : ` CHAR ( ( emp_no ) % 10000 ) ) ` Fixes : https : //github.com/elastic/elasticsearch/issues/31869
Upgrade to latest Lucene snapshot __EoT__ * Collectors now take Scorable * Adds IndexWriter.getFlushingBytes ( )
Enable not wiping cluster settings after REST test __EoT__ In some cases we want to skip wiping cluster settings after a REST test . For example , one use-case would be in the full cluster restart tests where want to test cluster settings before and after a full cluster restart . If we wipe the cluster settings before the restart , then it would not be possible to assert on them after the restart .
MINOR : Remove Dead Code in SearchScript __EoT__ * ` lookup ` is not used anywhere * ` getLeafContext ` is not used anywhere
[ Monitoring ] Update beats template to include apm-server metrics __EoT__ Related to https : //github.com/elastic/stack-monitoring/issues/1 This PR updates the mappings for the beats monitoring index template to include mappings for ` apm-server ` . cc @ ycombinator
Fix typos __EoT__ This commit fixes some typos in the docs and source code . Extracted from # 32815
[ CCR ] Add create_follow_index privilege __EoT__ This is a new index privilege that the user needs to have in the follow cluster . This privilege is required in addition to the ` manage_ccr ` cluster privilege in order to execute the create and follow api . Closes # 33555
Strengthen FilterRoutingTests __EoT__ Today the FilterRoutingTests take the belt-and-braces approach of excluding some node attribute values and including some others . This means that we don't really test that both inclusion and exclusion work correctly : as long as one of them works as expected then the test will pass . This change improves these tests by only using one approach at once , demonstrating that both do indeed work .
Mapping not working __EoT__ Hiya Following the examples in your docs , create-mapping does not seem to work , eg : `` ` curl -XPUT http : //localhost:9200/twitter/tweet -d ' { tweet : { properties : { message : { type : `` string '' , store : `` yes '' } } } } ' `` ` > No handler found for uri [ /twitter/tweet ] and method [ PUT ] I tried creating the index first , but same thing . Also , the JSON format for specifying the mapping type to use when indexing a document is ambiguous , eg : `` ` curl -XPUT http : //localhost:9200/twitter/tweet/1 -d \ ' { tweet : { user : `` kimchy '' , postDate : `` 2009-11-15T14:12:12 '' , message : `` trying out Elastic Search '' } } ' `` ` Does that mean that the document has mapping type 'tweet ' , or that there is no mapping type specified , and it has a single top level key called 'tweet ' . And one thing i 'm not sure about ? Is a mapping the same thing as a type ? So you would never have
Remove some duplicate request conversion methods in the HLRC . __EoT__
Remove underscore from auto-follow API __EoT__ This commit removes the leading underscore from _auto_follow in the auto-follow API endpoints .
CCR : Use single global checkpoint to normalize range __EoT__ We may use different global checkpoint values to validate/normalize the range of a change request if the global checkpoint is advanced between these calls . If this is the case , then we generate an invalid request range and cause the follow task aborted . `` ` 1 > Caused by : java.lang.IllegalArgumentException : Invalid range ; from_seqno [ 17 ] , to_seqno [ 16 ] 1 > at org.elasticsearch.index.engine.LuceneChangesSnapshot. < init > ( LuceneChangesSnapshot.java:86 ) ~ [ elasticsearch-7.0.0-alpha1-SNAPSHOT.jar:7.0.0-alpha1-SNAPSHOT ] 1 > at org.elasticsearch.index.engine.InternalEngine.newChangesSnapshot ( InternalEngine.java:2421 ) ~ [ elasticsearch-7.0.0-alpha1-SNAPSHOT.jar:7.0.0-alpha1-SNAPSHOT ] 1 > at org.elasticsearch.index.shard.IndexShard.newChangesSnapshot ( IndexShard.java:1673 ) ~ [ elasticsearch-7.0.0-alpha1-SNAPSHOT.jar:7.0.0-alpha1-SNAPSHOT ] 1 > at org.elasticsearch.xpack.ccr.action.ShardChangesAction.getOperations ( ShardChangesAction.java:307 ) ~ [ main/ : ? ] `` ` CI : - https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-unix-compatibility/os=opensuse/2661/console - https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+6.x+release-tests/1018/console
CORE : Make Pattern Exclusion Work with Aliases __EoT__ * Adds the pattern exclusion logic to finding aliases * Closes # 33395
Reverse logic for CCR license checks __EoT__ This commit reverses the logic for CCR license checks in a few actions . This is done so that the successful case , which tends to be a larger block of code , does not require indentation . Relates # 33496
Add latch countdown on failure in CCR license tests __EoT__ We have some listeners in the CCR license tests that invoke Assert # fail if the onSuccess method for the listener is unexpectedly invoked . This can leave the main test thread hanging until the test suite times out rather than failing quickly . This commit adds some latch countdowns so that we fail quickly if these cases are hit . Relates # 33496
Add license checks for auto-follow implementation __EoT__ This commit adds license checks for the auto-follow implementation . We check the license on put auto-follow patterns , and then for every coordination round we check that the local and remote clusters are licensed for CCR . In the case of non-compliance , we skip coordination yet continue to schedule follow-ups . Relates # 33007
Rename `` after '' to `` minimum_age '' in lifecycle definition __EoT__ This renames the `` after '' field to better reflect what the meaning is . Supercedes # 32624
Bootstrap a new history_uuid when force allocating a stale primary __EoT__ This commit ensures that we bootstrap a new history_uuid when force allocating a stale primary . A stale primary should never be the source of an operation-based recovery to another shard which exists before the forced-allocation . Closes # 26712
INGEST : Remove Outdated TODOs __EoT__ Top to bottom : * ` CompoundProcessor ` is in the ingest package now - > resolved * Java generics do n't offer type checking so nothing can be done here - > removed TODO and test * # 16019 was closed and not acted on - > TODO can go away
Painless : Add Static Methods Shortcut __EoT__ Static methods in Painless can be whitelisted using the static section with the same format as Painless bindings except using the 'from ' keyword instead of the 'bound_to ' keyword . The following format is used : `` ` static { double max ( double , double ) from java.lang.Math } `` ` and will be called as `` ` ... return max ( 5 , var ) `` `
Include fallback settings when checking dependencies __EoT__ Today when checking settings dependencies , we do not check if fallback settings are present . This means , for example , that if ` cluster.remote . *.seeds ` falls back to ` search.remote . *.seeds ` , and ` cluster.remote . *.skip_unavailable ` and ` search.remote . *.skip_unavailable ` depend on ` cluster.remote . *.seeds ` , and we have set ` search.remote . *.seeds ` and ` search.remote . *.skip_unavailable ` , then validation will fail because it is expected that ` cluster.remote . *.seeds ` is set here . This commit addresses this by also checking fallback settings when validating dependencies . To do this , we add a new settings exist method that also checks for fallback settings , a case that was not possible previously . Relates # 33413
HLRC : Add Get Lifecycle Policy API to HLRC __EoT__ Adds Request and Reponse classes for accessing lifecycle policies . Changes existing tests to use these classes where appropriate . Sets up SPI configuration to allow parsing *Actions from XContent . Relates to https : //github.com/elastic/elasticsearch/issues/33100
Encapsulate Client as class variable for PolicyStepsRegistry __EoT__ Rather than pass in the client on the ` update ` step , this makes it passed in to the constructor so it 's not required on every update .
Test : Fix test name __EoT__ This test has the wrong name and has n't been automatically running . This fixes the name so we 'll run it .
HLRC : split xpack request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the XPackClient request converters .
HLRC : split watcher request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the WatcherClient request converters .
HLRC : add enable and disable user API support __EoT__ This change adds support for enable and disable user APIs to the high level rest client . There is a common request base class for both requests with specific requests that simplify the use of these APIs . The response for these APIs is simply an empty object so a new response class has been created for cases where we expect an empty response to be returned . Finally , the put user documentation has been moved to the proper location that is not within an x-pack sub directory and the document tags no longer contain x-pack . See # 29827
[ ML ] Add a file structure determination endpoint __EoT__ This endpoint accepts an arbitrary file in the request body and attempts to determine the structure . If successful it also proposes mappings that could be used when indexing the file's contents , and calculates simple statistics for each of the fields that are useful in the data preparation step prior to configuring machine learning jobs .
HLRC : ML Forecast Job __EoT__ Adds ML Forecast Job to the HLRC . This relates to ( # 29827 )
HLRC : split migration request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the MigrationClient request converters .
HLRC : split snapshot request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the SnapshotClient request converters .
Removes redundant test method in SQL tests __EoT__ Creating a PR to ensure the build is green before pushing
Adds checks to ensure index metadata exists when we try to use it __EoT__ IF the index no longer exists when we try to retrieve the index metadata it 's been delete since the policy was triggered and there is nothing for us to do . Currently in a few places we throw a NPE if this happens which , although it does not affect the execution result is ugly and logs a needless stack trace which suggests something might be wrong even though its not . This change makes sure we check for when this happens , logs a debug message and then ignores execution of that index for whatever operation is in progress .
HLRC : ML Post Data __EoT__ Adds the ability to Post Data to an ML job in the HLRC . This relates to ( # 29827 )
Pass Directory instead of DirectoryService to Store __EoT__ Instead of passing DirectoryService which causes yet another dependency on Store we can just pass in a Directory since we will just call ` DirectoryService # newDirectory ( ) ` on it anyway .
Collapse package structure for metrics aggs __EoT__ This change collapses all metrics aggregations classes into a single package ` org.elasticsearch.aggregations.metrics ` . It also restricts the visibility of some classes ( aggregators and factories ) that should not be used outside of the package . Relates # 22868
SQL : Improve alias vs index resolution __EoT__ Follow-up to # 33363 which improves pattern resolution for aliases vs indices .
[ SECURITY ] Set Auth-scheme preference __EoT__ Some browsers ( eg . Firefox ) behave differently when presented with multiple auth schemes in 'WWW-Authenticate ' header . The expected behavior is that browser select the most secure auth-scheme before trying others , but Firefox selects the first presented auth scheme and tries the next ones sequentially . As the browser interpretation is something that we do not control , we can at least present the auth schemes in most to least secure order as the server 's preference . This commit modifies the code to collect and sort the auth schemes presented by most to least secure . The priority of the auth schemes is fixed , the lower number denoting more secure auth-scheme . The current order of schemes based on the ES supported auth-scheme is [ ` Negotiate ` , ` Bearer ` , ` Basic ` ] and when we add future support for other schemes we will need to update the code . If need be we will make this configuration customizable in future . Unit test to verify the ` WWW-Authenticate ` header values are sorted by server preference as more secure to least secure
add notion of version and creation_date to LifecyclePolicyMetadata __EoT__ It is useful to keep track of which version of a policy is currently being executed by a specific index . For management purposes , it would also be useful to know at which time the latest version was inserted so that an audit trail is left for reconciling changes happening in ILM . The work here only adds a notion of version and creation_date to the lifecycle-metadata . The index settings are not updated with which version their currently executed ` phase_definition ` is because these settings are to be moved to custom indexmetadata anyways , and I would prefer to minimize conflicts here , happy to do this in a follow-up if the time is right .
HLRC : split tasks request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the TasksClient request converters .
Move up acquireSearcher logic to Engine __EoT__ By moving the logic to acquire the searcher up to the engine it 's simpler to build new engines that are for instance read-only .
HLRC : split license request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the LicenseClient request converters .
HLRC : split graph request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the GraphClient request converters .
[ DOCS ] Adds delete forecast API __EoT__ Related to https : //github.com/elastic/elasticsearch/pull/33218 and https : //github.com/elastic/elasticsearch/issues/31134
Pass TranslogRecoveryRunner to engine from outside __EoT__ This commit allows us to use different TranslogRecoveryRunner when recovering an engine from its local translog . This change is a prerequisite for the commit-based rollback PR ( # 32867 ) . Relates : https : //github.com/elastic/elasticsearch/pull/32867 # discussion_r212683687
HLRC : ML Update Job __EoT__ Adds the ability to update a Machine Learning job through the HLRC . This relates to ( # 29827 )
[ ML ] Rename log structure to file structure __EoT__ Many files supplied to the upcoming ML data preparation functionality will not be `` log '' files . For example , CSV files are generally not `` log '' files . Therefore it makes sense to rename library that determines the structure of these files . Although `` file structure '' could be considered too broad , as the library currently only works with a few text formats , in the future it may be extended to work with more formats .
Fix generics in ScriptPlugin # getContexts ( ) __EoT__
Core : Fix IndicesSegmentResponse.toXcontent ( ) serialization __EoT__ When index sorting is enabled , toXContent tried to serialize an SortField object , resulting in an exception , when using the _segments endpoint . Relates # 29120
[ CCR ] Added auto follow patterns feature __EoT__ Auto Following Patterns is a cross cluster replication feature that keeps track whether in the leader cluster indices are being created with names that match with a specific pattern and if so automatically let the follower cluster follow these newly created indices . This change adds an ` AutoFollowCoordinator ` component that is only active on the elected master node . Periodically this component checks the the cluster state of remote clusters if there new leader indices that match with configured auto follow patterns that have been defined in ` AutoFollowMetadata ` custom metadata . This change also adds two new APIs to manage auto follow patterns . A put auto follow pattern api : `` ` PUT /_ccr/_autofollow/ { { remote_cluster } } { `` leader_index_pattern '' : [ `` logs-* '' , ... ] , `` follow_index_pattern '' : `` { { leader_index } } -copy '' , `` max_concurrent_read_batches '' : 2 ... // other optional parameters } `` ` and delete auto follow pattern api : `` ` DELETE /_ccr/_autofollow/ { { remote_cluster_alias } } `` ` The auto follow patterns are directly tied to the remote
Generalize search.remote settings to cluster.remote __EoT__ With features like CCR building on the CCS infrastructure , the settings prefix ` search.remote ` makes less sense as the namespace for these remote cluster settings than does a more general namespace like ` cluster.remote ` . This commit replaces these settings with ` cluster.remote ` with a fallback to the deprecated settings ` search.remote ` .
TEST : Create following engines in the main thread __EoT__ There are two races in the ` testUpdateAndReadChangesConcurrently ` if the following engines are created in the worker threads . We fixed the translog issue in # 33352 , but there is still another race with ` createStore ` . This commit ensures that we create all following engines in the main thread . Relates # 33352 Closes # 33344
Acquire seacher on closing engine should throw AlreadyClosedException __EoT__ Closes # 33330
Replace PhaseAfterStep with PhaseCompleteStep __EoT__ This removes ` PhaseAfterStep ` in favor of a new ` PhaseCompleteStep ` . This step in only a marker that the ` LifecyclePolicyRunner ` needs to halt until the time indicated for entering the next phase . This also fixes a bug where phase times were encapsulated into the policy instead of dynamically adjusting to policy changes . Supersedes # 33140 , which it replaces Relates to # 29823
Introduce ` TransportLogger ` for common logging __EoT__ Historically we have had a ESLoggingHandler in the netty module that logs low-level connection operations . This class just extends the netty logging handler with some ( broken ) message deserialization . This commit fixes this message serialization and moves the class to server . This new logger logs inbound and outbound messages . Eventually , we should move other event logging to this class ( connect , close , flush ) . That way we will have consistent logging regards of which transport is loaded . Resolves # 27306 on master . Older branches will need a different fix .
Add sni name to SSLEngine in netty transport __EoT__ This commit is related to # 32517 . It allows an `` sni_server_name '' attribute on a DiscoveryNode to be propagated to the server using the TLS SNI extentsion . This functionality is only implemented for the netty security transport .
[ ingest ] geo-ip performance improvements __EoT__ Re-implement the cache to avoid jackson JSON de-serialization for every IP lookup . The built in maxmind cache caches JsonNode objects . This requires de-serialization for every lookup , even if the object is found in cache . Profiling shows that is very expensive ( CPU ) . The cache will now consist of the fully de-serialized objects . Profiling shows that the new footprint for the CityDB is ~6KB per cache entry . This may result in ~6MB increase with the 1000 entry default . The performance has been measured up to 40 % faster on a modern 4 core/8 thread CPU for an ingest ( minimal indexing ) workflow . Further , the since prior implementation cached the JsonNode objects , and there is not a 1:1 relationship between an IP lookup / JsonNode object , the default cache size was most likely too small to be very effective . While this change does not change the 1000 default cache size , it will now cache more since there is now a 1:1 relationship between an IP lookup and value in the cache . -- -- -- -- -- -- --
HLRC : Add ILM Status to HLRC __EoT__ Adds support for the Index Lifecycle Management Status to the Java High-Level Rest Client . Relates to # 33100 -- -- -- -- Notes to reviewer ( s ) : * I do n't think there should be anything controversial here , and probably do n't need 5 reviewers ... just was n't sure who to tag . * the naming conventions were chosen to match the start/stopILM . * Using a TimedRequest instead of a StatusILMRequest ... not sure the preference here , but it kinda matches the ` AcknowledgedResponse ` in terms of not creating typed request/response when not needed .
INGEST : Allow Repeated Invocation of Pipeline __EoT__ * Allows repeated , non-recursive invocation of the same pipeline -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Without this change you ca n't run the following pipeline : `` ` PUT _ingest/pipeline/outer-pipeline { `` description '' : `` outer pipeline '' , `` processors '' : [ { `` pipeline '' : { `` pipeline '' : `` inner-pipeline '' } } , { `` pipeline '' : { `` pipeline '' : `` inner-pipeline '' } } ] } `` ` because it will complain about ` inner-pipeline ` being executed twice ( it incorrectly complains about `` recursive '' invocation here ) . IMO , this should not throw as there may be valid use cases for using the same nested pipeline repeatedly to dry things up .
add new phase definition setting used for retrieving phase to execute __EoT__ Since policies can be updated independent of execution plans for the current phase being executed , it would be nice to know what the phase that is executing looks like in JSON . This PR does just that , while also using that index setting to reconstruct the phase steps to execute ( for consistency ) There may or may not be a few unit tests missing to verify the json itself , let me know what you think . I figure the serialization is sufficient . Also , the expectation is that these will move from settings to IndexMetaData.Custom as a next step
Add an index setting to control TieredMergePolicy # deletesPctAllowed __EoT__ This change adds an expert index setting called ` index.merge.policy.deletes_pct_allowed ` . It controls the maximum percentage of deleted documents that is tolerated in the index . Lower values make the index more space efficient at the expense of increased CPU and I/O activity . Values must be between ` 20 ` and ` 50 ` . Default value is ` 33 ` .
Logging : Further clean up logging ctors __EoT__ Drops and unused logging constructor , simplifies a rarely used one , and removes ` Settings ` from a third . There is now only a single logging ctor that takes ` Settings ` and we 'll remove that one in a follow up change .
HLRest : add xpack put user API __EoT__ This commit adds a security client to the high level rest client , which includes an implementation for the put user api . As part of these changes , a new request and response class have been added that are specific to the high level rest client . One change here is that the response was previously wrapped inside a ` user ` object . The plan is to remove this wrapping and this PR adds an unwrapped response outside of the ` user ` object so we can remove the ` user ` object later on . See # 29827
Do n't count metadata fields towards index.mapping.total_fields.limit __EoT__ The maximum number of fields per index is limited to 1000 by default by the ` index.mapping.total_fields.limit ` setting to prevent accidental mapping explosions due to too many fields . Currently all metadata fields also count towards this limit , which can lead to some confusion when using lower limits . It is not obvious for users that they can not actually add as many fields as are specified by the limit in this case . This change takes the number of metadata fields out of the field count that we check against the field limit . It also adds tests that check that we can add fields up to the specified limit , but throw an exception for any additional field added . Closes # 24096
Fix deprecated setting specializations __EoT__ Deprecating some setting specializations ( e.g. , list settings ) does not cause deprecation warning headers and deprecation log messages to appear . This is due to a missed check for deprecation . This commit fixes this for all setting specializations , and ensures that this can not be missed again .
HLRC : split cluster request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the ClusterClient request converters .
HLRC : Add ML get influencers API __EoT__ Relates # 29827
Add conditional token filter to elasticsearch __EoT__ Lucene has a ConditionTokenFilter which allows you to selectively apply tokenfilters , depending on the state of the current token in the tokenstream . This commit exposes this functionality in elasticsearch , adding a new AnalysisPredicateScript context .
Build : Merge xpack checkstyle config into core __EoT__ Merges the xpack checkstyle_suppressions.xml file into the core checkstyle_suppressions.xml file . We needed two files in the past because we had two repositories . Now that we have one we can use just one .
INGEST : Implement Drop Processor __EoT__ * Throw ` DroppedDocumentException ` to indicate document is not to be indexed * Catch and rethrow where necessary to prevent Exception being logged and avoid unnecessary wrapping and other operations on the exception * In simulate API : Do n't add dropped documents to returned ` docs ` array * In index request : return ` `` noop '' ` type index response for dropped documents * closes # 23726
[ ML ] Add field stats to log structure finder __EoT__ The log structure endpoint will return these in addition to pure structure information so that it can be used to drive pre-import data visualizer functionality . The statistics for every field are count , cardinality ( distinct count ) and top hits ( most common values ) . Extra statistics are calculated if the field is numeric : min , max , mean and median .
Adds ILMClient for use with transport client __EoT__
Add interval response parameter to AutoDateInterval histogram __EoT__ The goal of this PR is to add an interval parameter at the top level of the AutoIntervalHistogram . This allows clients to know what interval was used for the aggregation without comparing bucket key values . The one bit I could use some advice on is the best way to persist this field onto ` ParsedAutoDateHistogram ` for HL REST client support : it 's not clear to me how to add this for a response only field ( i.e . one that is n't present on the AggregationBuilder ) Here 's what the new response looks like : `` ` '' aggregations '' : { '' postal_codes '' : { '' buckets '' : [ { '' key_as_string '' : `` 2017-01-01T00:00:00.000Z '' , '' key '' : 1483228800000 , '' doc_count '' : 1718 } , { '' key_as_string '' : `` 2018-01-01T00:00:00.000Z '' , '' key '' : 1514764800000 , '' doc_count '' : 3282 } ] , '' interval '' : `` 1y '' } } `` `
MINOR+CORE : Remove Dead Methods ClusterService __EoT__ * None of these methods are used anywhere -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Just a random find while researching something else : )
SQL : Align SYS TABLE for ODBC SQL_ALL_* args __EoT__ Fix a bug in SYS TABLES command that did skipped SQL_ALL_* arguments for catalog and table types Fix # 33312
Do n't build bwc on assemble __EoT__ Gradle triggers the build of artifacts even if assemble is disabled . Most users will not need bwc distributions after running ` ./gradlew assemble ` so instead of forcing them to add ` -x buildBwcVersion ` , we detect this and skip the configuration of the artifacts .
Allow query caching by default again __EoT__ With the introduction of the default distribution , it means that by default the query cache is wrapped in the security implementation of the query cache . This cache does not allow caching if the request does not carry indices permissions . Yet , this will not happen if authorization is not allowed , which it is not by default . This means that with the introduction of the default distribution , query caching was disabled by default ! This commit addresses this by checking if authorization is allowed and if not , delegating to the default indices query cache . Otherwise , we proceed as before with security . Additionally , we clear the cache on license state changes . Closes # 33191
Fixes Rendering of after in Phase __EoT__ Closes # 33282
[ DOCS ] Moves monitoring pages to docs folder __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the remaining files from x-pack/docs/monitoring to docs/reference/monitoring .
Fix inner hits retrieval when stored fields are disabled ( _none_ ) __EoT__ Now that types are unique per mapping we can retrieve the document mapper without referencing the type . This fixes an NPE when stored fields are disabled . For 6x we 'll need a different fix since mappings can still have multiple types . Relates # 32941
SQL : Show/desc commands now support table ids __EoT__ Extend SHOW TABLES , DESCRIBE and SHOW COLUMNS to support table identifers not just SQL LIKE pattern . This allows both Elasticsearch-style multi-index patterns and SQL LIKE . To disambiguate between the two ( as the `` vs ' can be easy to miss ) , the grammar now requires LIKE keyword as a prefix for all LIKE-like patterns . Also added some docs comparing the two types of patterns . Fix # 33294
REST high-level client : add delete by query API __EoT__ Relates to # 27205 - [ x ] Requires # 32679 to be merged first . - [ x ] Requires # 32760 to be merged first .
[ ML ] The sort field on get records should default to the record_score __EoT__ This is not changing the behaviour as when the sort field was set to ` influencer_score ` the secondary sort would be used and that was using the ` record_score ` at the highest priority .
[ ML ] Minor improvements to categorization Grok pattern creation __EoT__ 1 . The TOMCAT_DATESTAMP format needs to be checked before TIMESTAMP_ISO8601 , otherwise TIMESTAMP_ISO8601 will match the start of the Tomcat datestamp . 2 . Exclude more characters before and after numbers . For example , in 1.2.3 we do n't want to match 1.2 as a float .
Disable assemble task instead of removing it __EoT__ Right now running ` ./gradlew assemble ` fails because of projects that remove it . Gradle is making steps to make it impossible to remove tasks , there are already deprecation around it , and it seems like removing tasks does n't remove them from everywhere . The problem was triggered by cd378d5cc9ffe84705761b5c7c6f0b26215cdd36 which on the surface has nothing to do with how this failed . There 's also # 33343 for dealing with the testing task . With this change , the assemble task is disabled instead of removed so we are more in-line with what Gradle expects . On the long term I would like to move publishing into it 's own plugin instead of assigning special meaning to disabling the ` assemble ` task , making it opt-in rather than opt-out .
Simplify the return type of FieldMapper # parse . __EoT__ No implementation of this method returned a non-null value . It looks like the dynamic creation of field mappers is fully handled by ` DocumentParser # parseDynamicValue ` .
[ ML ] Delete forecast API __EoT__ Forecasts are currently deleted when : - the job is deleted - or , as part of midnight maintenance if the ` expires_in ` value is exceeded ( 14d default ) The possibility to delete a single forecast would enhance usability of the forecasting feature . This could be useful in some scenarios , for example if a typo in the forecasting time range happened like 100d instaed of 10d . Follow on UI changes - https : //github.com/elastic/kibana/issues/18511
[ Docs ] Add search timeout caveats __EoT__ Global search timeouts and timeouts specified in the search request body use the same internal mechanism as search cancellation . Therefore the same caveats apply , mostly around the responsiveness of the timeout which gets only checked by a running search on segment boundaries by default . Closes # 31263
TESTS : Fix Race Condition in Temp Path Creation __EoT__ * Calling ` createTempDir ` concurrently here in the ` Follower ` s causes collisions at times which lead to ` createEngine ` throwing because of unexpected files in the newly created temp dir * Fixed by creating all temp dirs in the main test thread * closes # 33344
Fix from_range in search_after in changes snapshot __EoT__ I introduced this bug while addressing code review in https : //github.com/elastic/elasticsearch/pull/33222 # discussion_r213842257 . We can have multiple documents in Lucene with the same seq_no for parent-child documents ( or without rollback ) . In this case , the usage `` lastSeenSeqNo + 1 '' is an off-by-one error as it may miss some documents . This error merely affects the ` skippedOperations ` contract . I labeled `` non-issue '' for this non-released bug . Closes # 33318
Adds code to help with IndicesRequestCacheIT failures __EoT__ Relates to # 32827
Adds documentation about defining rollover action in ILM __EoT__
[ ML ] Prevent NPE parsing the stop datafeed request . __EoT__ If a stop datafeed request is sent to a non-master node and the request contains parameters in the request body e.g . `` ` POST _xpack/ml/datafeeds/my-datafeed/_stop { `` timeout '' : `` 30s '' } `` ` then a NullPointerException is thrown streaming the request as one of the fields is not initialised by all constructors . Before this fix an alternative is to pass the options as query parameters in which case the field is safely initialised . `` ` POST _xpack/ml/datafeeds/my-datafeed/_stop ? timeout=30s `` `
HLRC : Add ML get overall buckets API __EoT__ Relates # 29827
Core : Fix epoch millis java time formatter __EoT__ The existing implemention could not deal with negative numbers as well as +- 999 milliseconds around the epoch . This commit uses Instant.ofEpochMilli ( ) and tries to parse the input as a number directly instead of using a date formatter .
[ Docs ] Improve tuning for speed advice __EoT__ This change merges two sections in the `` Tune for search speed '' documentation that recommend mapping numeric identifiers as keywords . Both sections contain mostly the same advice , so they can be merged . Closes # 32733
[ CI ] IndexShardTests # testIndexCheckOnStartup fails __EoT__ https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+6.x+multijob-unix-compatibility/os=fedora/1268/console Reproduce locally with : `` ` ./gradlew : server : test \ -Dtests.seed=1DC5F9791FEAA886 \ -Dtests.class=org.elasticsearch.index.shard.IndexShardTests \ -Dtests.method= '' testIndexCheckOnStartup '' \ -Dtests.security.manager=true \ -Dtests.locale=et \ -Dtests.timezone=Pacific/Efate \ -Dcompiler.java=10 \ -Druntime.java=8 `` `
Security for _field_names field should not override field statistics __EoT__ In Lucene 8 the statistics for a field ( doc_count , sum_doc_count , ... ) are checked and invalid values ( v < 0 ) are rejected . Though for the _field_names field we hide the statistics of the field if security is enabled since some terms ( field names ) may be filtered . However this statistics are never used , this field is not used for ranking and can not be used to generate term vectors . For these reasons this commit restores the original statistics for the field in order to be compliant with Lucene 8 .
Add early termination support to BucketCollector __EoT__ This commit adds the support to early terminate the collection of a leaf in the aggregation framework . This change introduces a MultiBucketCollector which handles CollectionTerminatedException exactly like the Lucene MultiCollector . Any aggregator can now throw a CollectionTerminatedException without stopping the collection of a sibling aggregator . This is useful for aggregators that can infer their result without visiting all documents ( e.g . : a min/max aggregation on a match_all query ) .
Logging : Drop Settings from some logging ctors __EoT__ Drops ` Settings ` from some logging ctors now that they are no longer needed . This should allow us to stop passing ` Settings ` around to quite as many places .
REST high-level client : add update by query API __EoT__ Relates to # 27205 - [ x ] Requires # 32679 to be merged first .
TEST : Increase timeout testFollowIndexAndCloseNode __EoT__ This test fails several times due to timeout when asserting the number of docs on the following and leading indices . This change reduces the number of docs to verify and increases the timeout .
HLRC : ML Flush job __EoT__ This relates to ( # 29827 )
HLRC : Adding ML Job stats __EoT__ Sorry for the size of this PR . There were a handful of Pojos that needed to be added before the GET jobs stats action could be completed . I wanted to put them in separate PRs , but with how much refactoring is being done on the HLRC , coupled with my commits getting all out of order , I just opted to open it as is . I am still putting things in the Protocol package for now . We can move all the Pojos at once when the new client ML package is ready ( do n't want to cause unnecessary merge conflicts ) . This relates to ( # 29827 )
LLREST : Drop deprecated methods __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . In a long series of PRs I 've changed all of the old style requests . This drops the deprecated methods and will be released with 7.0 .
[ DOCS ] Moves machine learning APIs to docs folder __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the rest-api/ml folder and its contents from x-pack/docs/en to docs/reference in the elasticsearch repo In particular , it moves the API source files that have code snippet testing enabled . The rest of the files can be moved as their examples are fixed . It also adds info about the minimum required subscription level for testing purposes .
completely drop ` index.shard.check_on_startup : fix ` for 7.0 __EoT__ We keep and deprecate ` index.shard.check_on_startup : fix ` for ` 6.x ` branch . This PR completely drops it for 7.0 Relates to https : //github.com/elastic/elasticsearch/pull/32279
drop ` index.shard.check_on_startup : fix ` __EoT__ * drop ` index.shard.check_on_startup : fix ` setting * put a corrupt marker if it is detected during start up check that index Relates # 31389
[ DOCS ] Moves ml folder from x-pack/docs to docs __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the pages under the x-pack/docs/ml folder to the docs/reference/ml folder . The API quick reference page is moved to the stack-docs repo .
[ DOCS ] Move rollup APIs to docs __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the source files from x-pack/docs/en/rest-api/rollup to docs/reference/rollup
[ DOCS ] Rename X-Pack Commands section __EoT__ Renames the `` X-Pack Commands '' section such that it can contain reference information for other commands too . Related to https : //github.com/elastic/elasticsearch/pull/32281/files/5f6b084324c607a92020909df6730c8e8a4b10f6 # r211410593
Fix pom for build-tools __EoT__ Looks like ` java-gradle-plugin ` reconfigures the pom . Stop using it since we do n't publish to Gradle plugin portal .
SQL : test coverage for JdbcResultSet __EoT__ Before this PR , the JdbcResultSet class had almost no tests . This PR tries to add a more complete set of tests for this class . Some issues were fixed in the process as well . Fix for https : //github.com/elastic/elasticsearch/issues/32078
Work around to be able to generate eclipse projects __EoT__ Workaround for gradle/gradle # 6582 to force correct task ordering .
Highlight that index_phrases only works if no slop is used __EoT__ Highlight that ` index_phrases ` only works if no slop is used at query time .
SQL : handle differently security connection related errors in the CLI __EoT__ The error message being displayed when either an authorization or authentication error occurs upon CLI connection to the ES server is confusing and does n't reflect the underlying cause . This PR addresses this . Fix for https : //github.com/elastic/elasticsearch/issues/33230
[ ML ] Refactor delimited file structure detection __EoT__ 1 . Use the term `` delimited '' rather than `` separated values '' 2 . Use a single factory class with arguments to specify the delimiter and identification constraints This change makes it easier to add support for other delimiter characters .
SQL : Support multi-index format as table identifier __EoT__ Extend tableIdentifier to support multi-index format ; not just * but also enumeration and exclusion . That is support table identifiers such as ` `` tes* , -test* '' ` not just ` `` tes* '' ` .
Renames XPackField.INDEX _LIFCYCLE value to `` ilm '' __EoT__ This brings the name in line with everywhere else and means that name seen on the feature usage and ` GET _xpack ` APIs will match the plugin name . This change also removes ` IndexLifcycle.NAME ` since this was only used to name the scheduler job and that can be done using ` XPackField.INDEX_LIFECYCLE ` instead
Enable forbiddenapis server java9 __EoT__ Noticed this was disabled because the forbiddenapis Gradle plugin had a bug . This PR enables the generation of tasks for the additional source sets and correctly configures them in their respective build scripts .
Integrates soft-deletes into Elasticsearch __EoT__ This PR integrates Lucene soft-deletes [ ( LUCENE-8200 ) ] ( https : //issues.apache.org/jira/browse/LUCENE-8200 ) into Elasticsearch . Highlight works in this PR include : 1 . Replace hard-deletes by soft-deletes in InternalEngine 2 . Use _recovery_source if _source is disabled or modified ( # 31106 ) 3 . Soft-deletes retention policy based on the global checkpoint ( # 30335 ) 4 . Read operation history from Lucene instead of translog ( # 30120 ) 5 . Use Lucene history in peer-recovery ( # 30522 ) These pieces were reviewed already in the feature branch but we would like to give them an extra look before pulling into the upstream . Relates # 30086 Closes # 29530 These works have been done by the whole team ; however , these individuals ( lexical order ) have significant contribution in coding and reviewing : Co-authored-by : Adrien Grand < jpountz @ gmail.com > Co-authored-by : Boaz Leskes < b.leskes @ gmail.com > Co-authored-by : Jason Tedor < jason @ tedor.me > Co-authored-by : Martijn van Groningen < martijn.v.groningen @ gmail.com > Co-authored-by : Nhat Nguyen < nhat.nguyen @ elastic.co > Co-authored-by : Simon Willnauer < simonw
Integrates soft-deletes into Elasticsearch __EoT__ This PR integrates Lucene soft-deletes [ ( LUCENE-8200 ) ] ( https : //issues.apache.org/jira/browse/LUCENE-8200 ) into Elasticsearch . Highlight works in this PR include : 1 . Replace hard-deletes by soft-deletes in InternalEngine 2 . Use _recovery_source if _source is disabled or modified ( # 31106 ) 3 . Soft-deletes retention policy based on the global checkpoint ( # 30335 ) 4 . Read operation history from Lucene instead of translog ( # 30120 ) 5 . Use Lucene history in peer-recovery ( # 30522 ) These pieces were reviewed already in the feature branch but we would like to give them an extra look before pulling into the upstream . Relates # 30086 Closes # 29530 These works have been done by the whole team ; however , these individuals ( lexical order ) have significant contribution in coding and reviewing : Co-authored-by : Adrien Grand < jpountz @ gmail.com > Co-authored-by : Boaz Leskes < b.leskes @ gmail.com > Co-authored-by : Jason Tedor < jason @ tedor.me > Co-authored-by : Martijn van Groningen < martijn.v.groningen @ gmail.com > Co-authored-by : Nhat Nguyen < nhat.nguyen @ elastic.co > Co-authored-by : Simon Willnauer < simonw
HLRC : Add Put Lifecycle Policy API to HLRC __EoT__ Adds support for the Put Lifecycle Policy API to the High Level REST Client . Converts existing ILM integration tests to use the new HLRC Put API instead of the LLRC . As a prerequisite for this change , the Lifecycle POJOs moved from ` protocol ` to ` client.indexlifecycle ` , following the new HLRC code structure .
Painless : Fix Bindings Bug __EoT__ When the change was made to the format for in the whitelist for bindings , parameters from both the constructor and the method were combined into a single list instead of separate lists . The check for method parameters was being executed from the start of the combined list rather than the correct position . The tests for bindings used a constructor and a method that only used the int types so this was not caught . The test has been changed to also use a double type and this issue is fixed within this PR .
SQL : prevent duplicate generation for repeated aggs __EoT__ Prevent generation of duplicate aggs caused by repetitive functions , leading to invalid query . Fix # 30287
Remove usage of ` index.shrink.source . * ` in 7.x __EoT__ We cut over to ` index.resize.source . * ` but still have these constants being public in ` IndexMetaData ` . Those Settings and constants are not needed in 7.x while we still need to keep the keys known to private settings since they might be part of the index settings of old indices . We can remove that in 8.0 . Yet , we should remove the settings to make sure they are not used again .
Fix serialization of empty field capabilities response __EoT__ When no response are required ( no indices match the requested patterns ) the empty response throws an NPE in the transport serialization ( writeTo ) .
Fix nested _source retrieval with includes/excludes __EoT__ If an exclude or an include clause removes an entry to a nested field in the original source at query time , the creation of nested hits fails with an NPE . This change fixes this exception and replaces the nested document source with an empty map . Closes # 33163 Closes # 33170
[ DOCS ] TLS file resources are reloadable __EoT__ Make clearer that file resources that are used as key trust material are polled and will be reloaded upon modification .
Watcher : Fix race condition when reloading watches __EoT__ The current watcher implementation had two issues on reload , that could lead to the existing watches not properly cleared out . One fix here was to ensure that when ` TriggerService.start ( ) ` is called , we ensure in the trigger engine implementations that current watches are removed instead of adding to the existing ones in ` TickerScheduleTriggerEngine.start ( ) ` The second fix is a bit more subtle , as the underlying issue is rooted more subtle due concurrent code . When ` WatcherService.reload ( ) ` is called it calls in turn ` WatcherService.reloadInner ( ) ` , which is synchronized . In the reload method we cleared out existing watches and executions . Also , there were two additional minor fixes 1 . If the node is not a data node , we forgot to set the status to STARTING when watcher is being started . This should not be a big issue , because a non-data node does not spent a lot of time loading as there are no watches which need loading . 2 . If a new cluster state came in during a
Ignore module-info in jar hell checks __EoT__ JarHell should ignore module-info classes in any package so it does n't clash with jigsaw . The PR also adds a test around the jarHell Gradle task to assert that module-info is ignored , but jar hell is otherwise detected . Closes # 32985
Move file-based discovery to core __EoT__ Today we support a static list of seed hosts in core Elasticsearch , and allow a dynamic list of seed hosts to be provided via a file using the ` discovery-file ` plugin . In fact the ability to provide a dynamic list of seed hosts is increasingly important in containerized environments , so this change moves this functionality to core Elasticsearch to avoid the need for a plugin . For BWC purposes the plugin still exists , but does nothing more than issue a warning when it is used . A followup PR will introduce the breaking change of its removal . Furthermore , in order to start up nodes in integration tests we currently assign a known port to each node before startup , which unfortunately sometimes fails if another process grabs the selected port in the meantime . By moving the ` discovery-file ` functionality into the core product we can use it to avoid this race . Relates # 29244 Closes # 33030
[ DOC ] Repository GCS ADC not supported __EoT__ ADC - Application Default Credentials For the repository gcs plugin we use [ Google Cloud Client Library for Java ] ( https : //github.com/GoogleCloudPlatform/google-cloud-java/tree/master/google-cloud-clients/google-cloud-storage ) for the communication with the storage service . For authenticating the calls , common to most other google client libraries , this library uses another library https : //github.com/google/google-auth-library-java that is designed to do it 's job seamlessly when the client is run in a google environment , such as Compute Engine , Kubernetes Engine or App Engine . Specifically , it checks environment variables and searches predefined file paths for plain text credential files ; details are [ here ] ( https : //github.com/google/google-auth-library-java # application-default-credentials ) . This `` automatic '' discovery is not compatible with the Java security manager . It does not work ( generates a [ warning ] ( https : //github.com/elastic/elasticsearch/blob/49109187e2adb514d90b017e3ace2753f93be3db/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java # L134 ) ) and it had not worked for some time now , although the docs said otherwise . This PR rectifies the docs . Closes https : //github.com/elastic/elasticsearch/issues/23992
Upgrade to latest Gradle 4.10 __EoT__ Will wait for GA before merging this . Upgrade is much smoother , probably the last on the 4.x series as the teams tarted removing deprecated features from master after the RC was cut .
Fix/30904 cluster formation part2 __EoT__ This is a continuation of # 32028 which I accidentally merged , then reverted right away due to lack of caffeine .
[ TESTS ] Pin MockWebServer to TLS1.2 __EoT__ Ensure that the SSLConfigurationReloaderTests can run with JDK 11 by pinning the Server TLS version to TLS1.2 Resolves # 32124
Move file-based discovery to core __EoT__ Today we support a static list of seed hosts in core Elasticsearch , and allow a dynamic list of seed hosts to be provided via a file using the ` discovery-file ` plugin . In fact the ability to provide a dynamic list of seed hosts is increasingly important in containerized environments , so this change moves this functionality to core Elasticsearch to avoid the need for a plugin . For BWC purposes the plugin still exists , but does nothing more than issue a warning when it is used . A followup PR will introduce the breaking change of its removal . Furthermore , in order to start up nodes in integration tests we currently assign a known port to each node before startup , which unfortunately sometimes fails if another process grabs the selected port in the meantime . By moving the ` discovery-file ` functionality into the core product we can use it to avoid this race . Relates # 29244 Closes # 33030
[ Kerberos ] Skip unsupported languages for tests __EoT__ Ran for all locales in the system to find locales which caused problems in tests due to incorrect generalized time handling in SimpleKdcServer . Closes # 33228
Ingest : Add conditional per processor __EoT__ * Adds conditional ` if ` setting to all processors in a pipeline * closes # 21248
[ Rollup ] Only allow aggregating on multiples of configured interval __EoT__ We need to limit request aggregations to whole multiples of the configured interval for both ` histogram ` and ` date_histogram ` . Otherwise , agg buckets wo n't overlap with the rolled buckets and the results will be incorrect . For histogram , the validation is very simple : request must be > = the config , and modulo evenly . Dates are tricksier . - If both request and config are fixed dates , we can convert to millis and treat them just like a regular histo ( request must be > = the config , and modulo evenly ) - If both are calendar , we make sure the request is > = the config with a static lookup map that ranks the calendar values relatively . All calendar units are `` singles '' , so they are evenly divisible already - We disallow any other combination ( one fixed and one calendar , etc ) As an aside , the validation of dates was apparently broken before ... it converted both request and config intervals to millis without regard to fixed vs calendar .
Watcher : Reload properly on remote shard change __EoT__ When a node dies that carries a watcher shard or a shard is relocated to another node , then watcher needs not only trigger a reload on the node where the shard relocation happened , but also on other nodes where copies of this shard , as different watches may need to be loaded . This commit takes the change of remote nodes into account by not only storing the local shard allocation ids in the WatcherLifeCycleService , but storing a list of ShardRoutings based on the local active shards . This also fixes some tests , which had a wrong assumption . Using ` TestShardRouting.newShardRouting ` in our tests for cluster state creation led to the issue of always creating new allocation ids which implicitely lead to a reload .
Apply settings filter to get cluster settings API __EoT__ Some settings have filters applied to them and we use this in logs and the get nodes info API . For consistency , we should apply this in the get cluster settings API too .
Fix classpath security checks for external tests . __EoT__ This commit checks that when we manually add a class to the codebase map , that it does in-fact not exist on the classpath in a jar . This will only be true if we are using the test framework externally such as when a user develops a plugin . This check is only needed when running tests via an IDE such as IntelliJ . Closes # 33045
[ Rollup ] Re-factor Rollup Indexer into a generic indexer for re-usability __EoT__ # # # # Motivation I am working on a feature that is similar to rollup as it will work with the same 2 cycle process of 1st querying a source index and 2nd indexing results to a destination index . @ polyfractal and I discussed this and realised it would be useful if such features could use a common approach to performing these kinds of operations . This PR serves to implement that common approach . # # # # Solution This PR extracts a super class out of the rollup indexer called the iterative indexer . The implementor of it can define the query , transformation of the response , indexing and the object to persist the position/state of the indexer . # # # # To be discussed Apart from the approach ( I will annotate some open questions in code ) , naming ; The change introduces a package ` org.elasticsearch.xpack.core.indexing ` and a class ` IterativeIndexer ` - I could not find a better name yet , I am more than happy about suggestions . # # # # Notes This PR
Painless : Add Bindings __EoT__ This change allows the specification of a data structure called a binding to store some permanent state within a single script instance . An example binding specified in the whitelist would be as follows : `` ` binding org.elasticsearch.painless.TestBinding { ( int , int ) int someCall ( int , int ) } `` ` Within the script a user would use this class by simply doing the following : `` ` someCall ( 1 , 2 , 3 , 4 ) `` ` where the arguments are split between a call to the constructor the first time this method is called and then the method call for each time the method is called . The constructor has the opportunity to store the arguments passed in as state within the TestBinding class for use within the member method . Each subsequent time the script is run , the parameters are already stored in a local instance so they will not need to be re-calculated . Each binding must contain exactly one constructor and one method .
Remote 6.x transport BWC Layer for ` _shrink ` __EoT__ The shrink action was renamed to ` _resize ` with the addition or split . This bwc layer is unnecessary on 7.x since 6.latest will always use the resize action .
HLRC : Add ML Get Records API __EoT__ Relates # 29827
[ ML ] Fix character set finder bug with unencodable charsets __EoT__ Some character sets can not be encoded and this was tripping up the binary data check in the ML log structure character set finder . The fix is to assume that if ICU4J identifies that some bytes correspond to a character set that can not be encoded and those bytes contain zeroes then the data is binary rather than text . Fixes # 33227
TESTS : Fix overly long lines __EoT__ Those 2 lines break checkstyle in master , they 're both 141 chars long .
Remove unsupported group_shard_failures parameter __EoT__ We have had support for the ` group_shard_failures ` parameter in our code for a while , since we introduced failures grouping . When we introduced validation of parameters at REST , we seem to have forgotten to expose such parameter . Given that the parameter is effectively not supported for many months now , that no user has complained about that and that grouping is the expected behaviour , this commit removes support for the parameter . Relates to # 32598
Parse PEM Key files leniantly __EoT__ Allow for extra non-whitespace before the Header of PEM encoded key files . Resolves # 33168
Core : Add java time xcontent serializers __EoT__ This ensures that the java time class exposed by painless have proper serialization/string representations . Closes # 31853
Consider multi release jars when running third party audit __EoT__ Exclude classes meant for newer versions than what we are auditing against , those classes wo n't be found . There 's no reason to exclude JDK classes from newer versions , with this PR , we will not extract them in the first place .
Update MSI documentation __EoT__ Updates images for 6.3 ( and future ) installers .
[ CCR ] Introduce leader index name & last fetch time stats to stats api response __EoT__
HLRC : Move ML protocol classes into client ml package __EoT__
Scroll queries asking for rescore are considered invalid __EoT__ This PR changes our behavior from silently ignoring rescore in a scroll query to instead report to the user that such a query is invalid . Closes # 31775
Painless : Fix Semicolon Regression __EoT__ Trailers ( statements following something like an if statement ) that do n't use brackets currently require a semicolon even if they 're the last statement . This is a regression caused by ( https : //github.com/elastic/elasticsearch/pull/29566 ) and noted by ( https : //github.com/elastic/elasticsearch/issues/33193 ) . This change fixes the regression and adds a test for the broken case . Note most of the lines are ANTLR regeneration and the only relevant files are PainlessParser.g4 and the added/updated tests .
Switch remaining LLREST usage to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . In a long series of PRs I 've changed all of the old style requests that I could find with ` grep ` . In this PR I change all requests that I could find by *removing* the deprecated methods . Since this is a non-trivial change I do not include actually removing the deprecated requests . I'll do that in a follow up . But this should be the last set of usage removals before the actual deprecated method removal . Yay !
File-based recovery with soft-deletes should send only operations after the local checkpoint __EoT__ Today a file-based recovery will replay all existing translog operations from the primary on a replica so that that replica can have a full history in translog as the primary . However , with soft-deletes enabled , we should not do it because : 1 . All operations before the local checkpoint of the safe commit exist in the commit already . 2 . The number of operations before the local checkpoint may be considerable and requires a significant amount of time to replay on a replica . Relates # 30522 Relates # 29530 /cc @ bleskes
[ Rollup ] Better error message when trying to set non-rollup index __EoT__ We do n't allow the user to configure a rollup index against an existing index , but the exceptions that we return are not clear about that . They indicate issues with metadata , instead of stating the real reason ( not allowed to use a non-rollup index to store rollup data ) . This makes the exception better , and adds a bit more testing
HLRC : Use Optional in validation logic __EoT__ The Validatable class comes from an old class in server code , that assumed null was returned in the event of validation having no errors . This commit changes that to use Optional , which is cleaner than passing around null objects .
Remove unused User class from protocol __EoT__ This commit removes the unused User class from the protocol project . This class was originally moved into protocol in preparation for moving more request and response classes , but given the change in direction for the HLRC this is no longer needed . Additionally , this change also changes the package name for the User object in x-pack/plugin/core to its original name .
Adds docs for how to set up a policy __EoT__
Use Lucene history in primary-replica resync __EoT__ This commit makes primary-replica resyncer use Lucene as the source of history operation instead of translog if soft-deletes is enabled . With this change , we no longer expose translog snapshot directly in IndexShard . Relates # 29530 /cc @ bleskes
ingest : Introduce the dissect processor __EoT__ The ingest node dissect processor is an alternative to Grok to split a string based on a pattern . Dissect differs from Grok such that regular expressions are not used to split the string . Dissect can be used to parse a source text field with a simpler pattern , and is often faster the Grok for basic string parsing . This processor uses the dissect library which does most of the work . -- -- -- -- EDIT : removed comments about breaking change , since this will no longer be a breaking change . Rally Benchmark : -- -- -- -- -- -- -- -- - Rally track here : https : //github.com/jakelandis/rally-tracks-ingest/blob/dissect_tests/http_logs_for_ingest/track.json Full test results here : https : //gist.github.com/jakelandis/de554f394e5455ee66797c2b956d63bf Single node , 1 shard , 0 replicas , i7 4 core/8 thread running ~3.7GHz with NVMe disk . _source is disabled and refresh_interval is set to -1 . All fields use the following mapping to focus on the ingest node performance . `` ` '' type '' : `` keyword '' , '' index '' : false , '' doc_values '' : false `` ` Data set is the
Make soft-deletes settings final __EoT__ For now , we do not support changing the soft-deletes setting even with closed indices . Therefore we should make it a final setting .
Add link to es-kotlin-wrapper-client __EoT__ I recently created this client and think it is of interest to other users . I intend to continue adding features to it in the next months . < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? Yes , my details should be on file . - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? Yes - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS
[ docs ] Remove repeating words __EoT__ Trivial change removing repeating words from a few docs
Minor spelling and grammar fix __EoT__ Simple documentation change to fix a spelling and grammar mistake
Only fetch mapping updates when necessary __EoT__ Today we fetch the mapping from the leader and apply it as a mapping update whenever the index metadata version on the leader changes . Yet , the index metadata can change for many reasons other than a mapping update ( e.g. , settings updates , adding an alias , or a replica being promoted to a primary among many other reasons ) . This commit builds on the addition of a mapping version to the index metadata to only fetch mapping updates when the mapping version increases . This reduces the number of these fetches and application of mappings on the follower to the bare minimum . Relates # 33147
Remove support for deprecated params._agg/_aggs for scripted metric aggregations __EoT__ This is the last piece of # 29328 , removing the behavior that was deprecated in # 31597 . Presumably to target 7.0 .
Watcher : Simplify finding next date in cron schedule __EoT__ The code introduced in 3fa36807f87ad90af593e86f9ed843ced3260973 to fix an issue with crons always returning -1 was not very readable . This implementation uses streams to improve readability .
Run Third party audit with forbidden APIs CLI ( part3/3 ) __EoT__ This concludes the work to switch to using runtime java for forbidden APIs check and should allow us to always run Gradle with compile java . The new implementation is functional equivalent with the old , ant based one . It parses task standard error to get the missing classes and violations in the same way . I considered re-using ` ForbiddenApisCliTask ` but Gradle makes it hard to build inheritance with tasks that have task actions , since the order of the task actions ca n't be controlled . This inheritance is n't dully desired either as the third party audit task is much more opinionated and we do n't want to expose some of the configuration . We could probably extract a common base class without any task actions , but probably more trouble than it 's worth .
Fix plugin build test on Windows __EoT__ Replace slashes for windows , Gradle knows how to interpret the paths correctly .
HLRC+MINOR : Remove Unused Private Method __EoT__ * This one seems to be unused since 92eb32477
Remove old unused test script files ( # 29328 ) __EoT__ I noticed these still referenced the old ` params._agg/_aggs ` values when working on # 29328 . Per the comment thread in that issue they are no longer used , so I 'm removing them instead of updating them .
DOCS : Make ellipsis optional in /cat/thread_pool __EoT__ The fix proposed in # 31442 fails with the oss distro because the added 3dots does not match anything with the default oss while a 3dots expression requires matching at least one thread pool . This change makes a 3dots optional so the thread_pool list can match both the oss distro ( without ccr ) and default distro ( with ccr ) . Relates # 31442
separate out IndexLifecycleService cluster-state change concerns __EoT__ Changes to the IndexLifecycleService were necessary since relying on ClusterChangedEvents for a full picture of the cluster state 's settings was a mistake . It is not necessary that these events hold all settings , especially ones that are set at node start-up . Changes to main include : - move poll interval updates to a SettingsUpdateConsumer - move scheduler start/stop to a localMasterNodeListener - keep triggerPolicies in clusterChanged Changes to tests include : - removal of some low-level state transition checks in the Service that no longer make sense since the changes are unconditionally specified in the appropriate listeners - add integration tests for poll-interval updates - add integration test assertions for verifying scheduler is started up correctly thank you @ dakrone for uncovering the issue with how ClusterChangedEvent was being used ! And for the patch to fix things !
Build analysis-icu client JAR __EoT__ This plugin needs to be able to be installed client side because it contains doc values formats that can be returned to the transport client . To keep this simple for developers , we publish the client JAR to Maven so that they can depend on the plugin in their POM and install the plugin there .
ShardSearchFailure # readFrom to set index and shardId __EoT__ As part of recent changes made to ` ShardOperationFailedException ` we introduced ` index ` and ` shardId ` members to the base class , but the subclasses are entirely responsible for the serialization of such fields . In the case of ` ShardSearchFailure ` , we have an additional ` SearchShardTarget ` instance member which also holds the index and the shardId , hence they get serialized as part of ` SearchShardTarget ` itself . When de-serializing a ` ShardSearchFailure ` though , we need to remember to also set the parent class ` index ` and ` shardId ` fields otherwise they get lost Relates to # 32640
Token API supports the client_credentials grant __EoT__ This change adds support for the client credentials grant type to the token api . The client credentials grant allows for a client to authenticate with the authorization server and obtain a token to access as itself . Per RFC 6749 , a refresh token should not be included with the access token and as such a refresh token is not issued when the client credentials grant is used . The addition of the client credentials grant will allow users authenticated with mechanisms such as kerberos or PKI to obtain a token that can be used for subsequent access .
Build : forked compiler max memory matches jvmArgs __EoT__ This commit removes the setting of the fork options maximum memory size in our build plugin and instead adds the value in the gradle.properties file to be alongside the value set in jvmArgs . This change is necessary when using parallel compilation as 512m is not sufficient for parallel compilation on some machines .
Introduce mapping version to index metadata __EoT__ This commit introduces mapping version to index metadata . This value is monotonically increasing and is updated on mapping updates . This will be useful in cross-cluster replication so that we can request mapping updates from the leader only when there is a mapping update as opposed to the strategy we employ today which is to request a mapping update any time there is an index metadata update . As index metadata updates can occur for many reasons other than mapping updates , this leads to some unnecessary requests and work in cross-cluster replication .
SQL : Enable aggregations to create a separate bucket for missing values __EoT__ At the moment , the GROUP BY statements in SELECTs will not consider inexistent values in columns . This PR enables missing values to be added as a separate bucket in the aggregation results . This is part of a larger effort regarding NULL/missing values handling . This fixes https : //github.com/elastic/elasticsearch/issues/32831
SECURITY : Fix Compile Error in ReservedRealmTests __EoT__ * Compilation was broken here by # 32515 since the 5.x versions were removed between PR creation and merge
support only string format for date , root object & date range __EoT__ Limit date ` format ` attribute to String values only ( to avoid serialization issues ) Closes # 23650
Fix forbiddenapis on java 11 __EoT__ Forbidden APIs does n't yet support Java 11 , so use the signatures from 10 when running on 11 . Closes # 33082 .
Reload Secure Settings REST specs & docs __EoT__ This is a minimal REST API spec and docs for the REST handler for the ` _nodes/reload_secure_settings ` endpoint . Relates https : //github.com/elastic/elasticsearch/issues/29135
Refactor CachingUsernamePassword realm __EoT__ This is a refactoring of the gnarly caching logic in ` CachingUsernamePasswordRealm ` . I 've been mulling over https : //github.com/elastic/elasticsearch/pull/30794 # pullrequestreview-142644017 . The refactoring concerns the ` authenticateWithCache ` method ; ` lookupWithCache ` has only been revamped so that it follows the same pattern . There is now a distinction between the listener of the in-flight authn request and the listeners of requests returned from cache . This greatly simplifies branching , removing redundancy and dead branches .
Add proxy support to RemoteClusterConnection __EoT__ This adds support for connecting to a remote cluster through a tcp proxy . A remote cluster can configured with an additional ` search.remote. $ clustername.proxy ` setting . This proxy will be used to connect to remote nodes for every node connection established . We still try to sniff the remote clsuter and connect to nodes directly through the proxy which has to support some kind of routing to these nodes . Yet , this routing mechanism requires the handshake request to include some kind of information where to route to which is not yet implemented . The effort to use the hostname and an optional node attribute for routing is tracked in # 32517 Closes # 31840
TEST : Skip assertSeqNos for closed shards __EoT__ If a shard was closed , we return null for SeqNoStats . Therefore the assertion ` assertSeqNos ` will hit NPE when it verifies a closed shard . This commit skips closed shards in ` assertSeqNos ` and enables this assertion in ` AbstractDisruptionTestCase ` .
Switch remaining x-pack tests to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack/qa/saml-idp-tests ` and ` x-pack/qa/security-setup-password-tests ` projects to use the new versions .
Switch remaining tests to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` client ` and ` distribution ` projects to use the new versions .
Switch remaining ml tests to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack/plugin/ml/qa/native-multi-node-tests ` and ` x-pack/plugin/ml/qa/single-node-tests ` projects to use the new versions .
Security index expands to a single replica __EoT__ This change removes the use 0-all for auto expand replicas for the security index . The use of 0-all causes some unexpected behavior with certain allocation settings . This change allows us to avoid these with a default install . If necessary , the number of replicas can be tuned by the user . Closes # 29933 Closes # 29712
Track fetch exceptions for shard follow tasks __EoT__ This commit adds tracking and reporting for fetch exceptions . We track fetch exceptions per fetch , keeping track of up to the maximum number of concurrent fetches . With each failing fetch , we associate the from sequence number with the exception that caused the fetch . We report these in the CCR stats endpoint , and add some testing for this tracking . Relates # 30086
HLRC : request/response homogeneity and JavaDoc improvements __EoT__ Brings response/requests for ML HLRC into a more homogeneous format when it comes to Docs and immutability .
Do NOT allow termvectors on nested fields __EoT__ Requesting _termvectors on a nested field or any sub-fields of a nested field returns empty results . Closes # 21625 , # 32652
[ Rollup ] Move toAggCap ( ) methods out of rollup config objects __EoT__ This pull request moves the ` toAggCap ( ) ` methods out of the rollup configuration objects . These methods are used in the ` RollupJobCaps ` and can be computed there , simplifying the rollup configuration objects .
Add hook to skip asserting x-content equivalence __EoT__ This commit adds a hook to AbstractSerializingTestCase to enable skipping asserting that the x-content of the test instance and an instance parsed from the x-content of the test instance are the same . While we usually expect these to be the same , they will not be the same when exceptions are involved because the x-content there is lossy .
[ Rollup ] Move getMetadata ( ) methods out of configuration objects __EoT__ This pull request removes the ` getMetadata ( ) ` methods from the ` DateHistoGroupConfig ` and ` HistoGroupConfig ` objects . This way the configuration objects do not rely on ` RollupField.formatMetaField ( ) ` anymore and do not expose a ` getMetadata ( ) ` method that is tighlty coupled to the rollup indexer .
[ DOCS ] Add docs for Application Privileges __EoT__ - Adds docs for new _xpack/security/privileges/ APIs - Update docs for Has Privileges API to include `` application '' privilege checking - Update docs for defining roles ( API + guide ) to include `` application '' privileges , and `` global '' privileges
Remove canSetPolicy , canUpdatePolicy , and canRemovePolicy __EoT__ Since we now store a pre-compiled list of steps for an index 's phase in the ` PolicyStepsRegistry ` , we no longer need to worry about updating policies as any updates wo n't affect the current phase , and will only be picked up on phase transitions . This also removes the tests that test these methods Relates to # 29823
[ TEST ] Add some security access control yaml tests for Rollup __EoT__ No need for review , these tests were just sufficiently complicated that I wanted a CI run on them first before merging : ) These two tests compliment the existing unit tests which check Rollup 's ACL/security integration . The first test creates to indices , puts a document in each one , and then assigns a role to the test user that can only access one of the indices . A rollup job is created with a pattern that would match both indices , and we verify that only the allowed document was rolled up ( e.g . verifying that the unpermissioned index stays hidden ) . The second test creates a single index with two documents tagged by the keyword `` public '' / '' private '' . An attribute-based role is created that only allows viewing `` public '' documents . We then verify the rollup job only rolled the `` public '' doc , and not the `` private '' one .
Move non duplicated actions back into xpack core __EoT__ Most actions ' request and response were moved from xpack core into protocol . We have decided to instead duplicate the actions in the HLRC instead of trying to reuse them . This commit moves the non duplicated actions back into xpack core and severs the tie between xpack core and protocol so no other actions can be moved and not duplicated .
[ CI ] GraphExploreResponseTests.testFromXContent fails __EoT__ `` ` Suite : org.elasticsearch.protocol.xpack.graph.GraphExploreResponseTests 1 > [ 2018-08-23T05:01:44,073 ] [ INFO ] [ o.e.p.x.g.GraphExploreResponseTests ] [ testFromXContentWithFailures ] before test 1 > [ 2018-08-23T05:01:45,305 ] [ INFO ] [ o.e.p.x.g.GraphExploreResponseTests ] [ testFromXContentWithFailures ] after test 1 > [ 2018-08-23T05:01:45,310 ] [ INFO ] [ o.e.p.x.g.GraphExploreResponseTests ] [ testFromXContent ] before test 1 > [ 2018-08-23T05:01:45,525 ] [ INFO ] [ o.e.p.x.g.GraphExploreResponseTests ] [ testFromXContent ] after test 2 > REPRODUCE WITH : ./gradlew : x-pack : protocol : test -Dtests.seed=280221F02AE6E6DA -Dtests.class=org.elasticsearch.protocol.xpack.graph.GraphExploreResponseTests -Dtests.method= '' testFromXContent '' -Dtests.security.manager=true -Dtests.locale=fr-BE -Dtests.timezone=America/Rio_Branco -Dcompiler.java=10 -Druntime.java=8 FAILURE 0.24s J2 | GraphExploreResponseTests.testFromXContent < < < FAILURES ! > Throwable # 1 : arrays first differed at element [ 29 ] ; expected : < org.elasticsearch.protocol.xpack.graph.Connection @ 75d26158 > but was : < org.elasticsearch.protocol.xpack.graph.Connection @ 5a3a5b58 > > at __randomizedtesting.SeedInfo.seed ( [ 280221F02AE6E6DA:96A14E8A3410600 ] :0 ) > at org.elasticsearch.protocol.xpack.graph.GraphExploreResponseTests.assertEqualInstances ( GraphExploreResponseTests.java:102 ) 2 > NOTE : leaving temporary files on disk at : /var/lib/jenkins/workspace/elastic+elasticsearch+6.x+periodic/x-pack/protocol/build/testrun/test/J2/temp/org.elasticsearch.protocol.xpack.graph.GraphExploreResponseTests_280221F02AE6E6DA-001 2 > NOTE : test params are : codec=Asserting ( Lucene70 ) : { } , docValues : { } , maxPointsInLeafNode=1761 , maxMBSortInHeap=7.7452117757666 , sim=RandomSimilarity ( queryNorm=false ) : { } , locale=fr-BE , timezone=America/Rio_Branco
TESTS : Fix Random Fail in MockTcpTransportTests __EoT__ * ` foobar.txGet ( ) ` appears to return before ` serviceB.stop ( ) ` returns , causing ` ServiceB.close ( ) ` to run concurrently with the ` stop ` call and running into a race condition * Fixed by only running ` close ` after ` stop ` has returned via the latch * Closes # 32863
HLRC : Fix Compile Error From Missing Throws __EoT__ * 50441f97ae745814db96c262e99d0f465aca5b2c removed the throws , breaking compilation here
Remove passphrase support from reload settings API __EoT__ We do not support passphrases on the secure settings storage ( the keystore ) . Yet , we added support for this in the API layer . This commit removes this support so that we are not limited in our future options , or have to make a breaking change . Relates # 32691
HLRC : Add ML Get Buckets API __EoT__ Relates # 29827
[ Watcher ] Improved error messages for CronEvalTool __EoT__ CronEvalTool prints an error only for cron expressions that result in no coming time events . If a cron expression results in less than the specified ` -count ` ( default 10 ) time events , the CronEvalTool prints all the coming times and displays no error message . Fixes # 32735
Search : Support of wildcard on docvalue_fields __EoT__ For consistency with stored_fields , docvalue_fields should support the use of wildcards . See also : # 26390 Closes # 26299
Change query field expansion __EoT__ This commit changes the query field expansion for query parsers to not rely on an hardcoded list of field types . Instead we rely on the type of exception that is thrown by MappedFieldType # termQuery to include/exclude an expanded field . Supersedes # 31655 Closes # 31798
INGEST : Cleanup Redundant Put Method __EoT__ Follow up to # 32617 cleaning up a remaining unused ` public ` interface .
SQL : skip uppercasing/lowercasing function tests for AZ locales as well __EoT__ This is a fix for https : //github.com/elastic/elasticsearch/issues/32589 # issuecomment-412630686 .
Fix the default pom file name __EoT__ Before this change the default was fixed at compile time and not picking up changes in the build script .
rename pre-phase/pre-action to new/init __EoT__ this will keep things more consistent with the initial PhaseAfterStep , which has a phase name of ` new `
Switch ml basic tests to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack/qa/ml-basic-multi-node ` project to use the new versions .
Switch some watcher tests to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack/qa/smoke-test-monitoring-with-watcher ` , ` x-pack/qa/smoke-test-watcher ` , and ` x-pack/qa/smoke-test-watcher-with-security ` projects to use the new versions .
Set maxScore for empty TopDocs to Nan rather than 0 __EoT__ We used to set ` maxScore ` to ` 0 ` within ` TopDocs ` in situations where there is really no score as the size was set to ` 0 ` and scores were not even tracked . In such scenarios , ` Float.Nan ` is more appropriate , which gets converted to ` max_score : null ` on the REST layer . That 's also more consistent with lucene which set ` maxScore ` to ` Float.Nan ` when merging empty ` TopDocs ` ( see ` TopDocs # merge ` ) .
HLRC : Create server agnostic request and response __EoT__ The HLRC has historically reused the same Request and Response classes that the server module uses . This commit deprecates the use of any server module Request and Response classes , and adds a small bit of validation logic that differs from server slightly , in that it does not assume a check for a null ValidationException class is not enough to determine if validation failed .
HLRC : close job refactor __EoT__ This refactors the close job HLRC entry so that it passes data in the POST body instead of query params .
Update remote-info.asciidoc __EoT__ Simple mistake fix .
Allow extension of CapturingTransport by subclasses __EoT__ Today , CapturingTransport # createCapturingTransportService creates a transport service with a connection manager with reasonable default behaviours , but overriding this behaviour in a consumer is a litle tricky . Additionally , the default behaviour for opening a connection duplicates the content of the CapturingTransport # openConnection ( ) method . This change removes this duplication by delegating to openConnection ( ) and introduces overridable nodeConnected ( ) and onSendRequest ( ) methods so that consumers can alter this behaviour more easily . Relates # 32246 in which we test the mechanisms for opening connections to unknown ( and possibly unreachable ) nodes .
Expose ` max_concurrent_shard_requests ` in ` _msearch ` __EoT__ Today ` _msearch ` does n't allow modifying the ` max_concurrent_shard_requests ` per sub search request . This change adds support for setting this parameter on all sub-search requests in an ` _msearch ` . Relates to # 31877
[ DOCS ] Add RequestedAuthnContext Documentation __EoT__ Docs for # 31238 - Adds documentation for the req_authn_context_class_ref setting - Adds a section in SAML Guide regarding the use of SAML Authentication Context .
[ TEST ] Split tests and skip file permission test on Windows __EoT__ Changes to split tests for keytab file test cases instead of randomized testing for testing branches in the code in the same test . On windows platform , for keytab file permission test , we required additional security permissions for the test framework . As this was the only test that required those permissions , skipping that test on windows platform . The same scenario gets tested in *nix environments . Closes # 32768
HLRC : Add ML Get Job __EoT__ This adds the GET ML Job endpoint to the HLRC . Relates to # 29827
Add beta label to MSI on install Elasticsearch page __EoT__ The main installation instructions page for the Windows MSI installer includes a header at the top to indicate that the installer is in beta , but the Installing Elasticsearch page does not . This commit adds the beta label to the MSI entry within the installation options .
Ensure that _exists queries on keyword fields use norms when they 're available . __EoT__
Fix quoted _exists_ query __EoT__ This change in the ` query_string ` query fixes the detection of the special ` _exists_ ` field when it is used with a quoted term . Closes # 28922
[ DOCS ] Fixed formatting of Example headings . __EoT__
Fix multi fields empty query __EoT__ This change fixes empty query removal when all fields remove the search term in ` simple_query_string ` , ` multi_match ` and ` query_string ` . Closes # 33009
add user authentication test for ILM __EoT__ These are some user-auth scenarios I think may be worth testing . For some reason , the tests hang on the read-only action . Still not sure why .
Fix north pole overflow error in GeoHashUtils.bbox ( ) __EoT__ Fixes an overflow error in GeoHashUtils.bbox ( ) calculation of a bounding box for geohashes with maximum precision located next to the north pole . Closes # 32857
Switch some x-pack tests to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack/qa/audit-tests ` , ` x-pack/qa/ml-disabled ` , and ` x-pack/qa/multi-node ` projects to use the new versions .
HLRC : Clear ML data after client tests __EoT__ This commit duplicates the ` MlRestTestStateCleaner ` to make sure all ML data is removed after each test . After implementing the job and datafeed APIs in the HLRC , we shall replace this implementation with one using the HLRC itself . Closes # 32993
Find CCR QA sub-projects automatically __EoT__ Today we are by-hand maintaining a list of CCR QA sub-projects that the check task depends on . This commit simplifies this by finding these sub-projects automatically and adding their check task as dependencies of the CCR check task .
Enable avoiding mmap bootstrap check __EoT__ The maximum map count boostrap check can be a hindrance to users that do not own the underlying platform on which they are executing Elasticsearch . This is because addressing it requires tuning the kernel and a platform provider might now allow this , especially on shared infrastructure . However , this bootstrap check is not needed if mmapfs is not in use . Today we do not have a way for the user to communicate that they are not going to use mmapfs . This commit therefore adds a setting that enables the user to disallow mmapfs . When mmapfs is disallowed , the maximum map count bootstrap check is not enforced . Additionally , we fallback to a different default index store and prevent the explicit use of mmapfs for an index . Closes # 32267
[ DOCS ] Add FIPS 140-2 documentation __EoT__ This commit adds documentation regarding FIPS 140-2 compliance and necessary Elasticsearch configuration .
GraphClient for the high level REST client and associated tests __EoT__ Documentation yet to be done
Use a dedicated ConnectionManger for RemoteClusterConnection __EoT__ This change introduces a dedicated ConnectionManager for every RemoteClusterConnection such that there is not state shared with the TransportService internal ConnectionManager . All connections to a remote cluster are isolated from the TransportService but still uses the TransportService and it 's internal properties like the Transport , tracing and internal listener actions on disconnects etc . This allows a remote cluster connection to have a different lifecycle than a local cluster connection , also local discovery code does n't get notified if there is a disconnect on from a remote cluster and each connection can use it 's own dedicated connection profile which allows to have a reduced set of connections per cluster without conflicting with the local cluster . Closes # 31835
[ DOCS ] Add configurable password hashing docs __EoT__ Adds documentation about the newly introduced configuration option for setting the password hashing algorithm to be used for the users cache and for storing credentials for the native and file realm .
INGEST : Simplify IngestService __EoT__ * Follow up to # 32617 * Flatten redundant inner classes of ` IngestService `
Handle 6.4.0+ BWC for Application Privileges __EoT__ When the application privileges feature was backported to 6.x/6.4 the BWC version checks on the backport were updated to 6.4.0 , but master was not updated . This commit updates all relevant version checks , and adds tests .
[ Kerberos ] Add troubleshooting documentation __EoT__ This commit adds troubleshooting section for Kerberos . Most of the times the problems seen are caused due to invalid configurations like keytab missing principals or credentials not up to date . Time synchronization is an important part for Kerberos infrastructure and the time skew can cause problems . To debug further documentation explains how to enable JAAS Kerberos login module debugging and Kerberos/SPNEGO debugging by setting JVM system properties .
Implement CCR licensing __EoT__ This commit implements licensing for CCR . CCR will require a platinum license , and administrative endpoints will be disabled when a license is non-compliant . Relates # 30086 , relates # 32971
INGEST : Move all Pipeline State into IngestService __EoT__ * Moves all pipeline state into the ingest service * Retains the existing pipeline store and pipeline execution service as inner classes to make the review easier , they should be flattened out in the next step * All tests for these classes were copied ( and adapted ) to the ingest service tests * This is a refactoring step to enable a clean implementation of a pipeline processor ( See # 32473 )
[ DOC ] Splits role mapping APIs into separate pages __EoT__ Related to https : //github.com/elastic/elasticsearch/pull/32794 and https : //github.com/elastic/elasticsearch/pull/32825 The Role Mappings API documentation ( https : //www.elastic.co/guide/en/elasticsearch/reference/master/security-api-role-mapping.html ) currently contains information about multiple APIs ( get , delete , put , etc ) . This PR splits that information across multiple pages , mirroring the layout of the machine learning APIs and openAPI output . This change was discussed briefly in # 32635 ( comment )
Generalize remote license checker __EoT__ Machine learning has baked a remote license checker for use in checking license compatibility of a remote license . This remote license checker has general usage for any feature that relies on a remote cluster . For example , cross-cluster replication will pull changes from a remote cluster and require that the local and remote clusters have platinum licenses . This commit generalizes the remote cluster license check for use in cross-cluster replication .
Trim unreferenced translog when the safe commit advanced __EoT__ Since # 28140 when the global checkpoint is advanced , we try to move the safe commit forward , and clean up old index commits if possible . However , we forget to trim unreferenced translog . This change makes sure that we prune both old translog and index commits when the safe commit advanced . Relates # 28140 Closes # 32089 /cc @ bleskes
Fix an inaccuracy in the dynamic templates documentation . __EoT__ In 5.x , we began overwriting all dynamic templates during a 'put mappings ' request instead of appending new ones to the end , as the documentation claims . We decided in # 24853 to continue overwriting existing templates . This PR updates the documentation to reflect the new behavior . Relates to # 30274 and # 24853 .
Logging : Use settings when building daemon threads __EoT__ Subclasses of ` EsIntegTestCase ` run multiple Elasticsearch nodes in the same JVM and when we log we look at the name of the thread to figure out the node name . This makes sure that all calls to ` daemonThreadFactory ` include the node name . Closes # 32574 I 'd like to follow this up with more drastic changes that make it impossible to do this incorrectly but that change is much larger than this and I 'd like to get these log lines fixed up sooner rather than later .
All Translog inner closes should happen after tragedy exception is set __EoT__ We faced with the nasty race condition . See https : //github.com/elastic/elasticsearch/issues/32526 ` InternalEngine.failOnTragic ` method has thrown ` AssertionError ` . If you carefully look at if branches in this method , you will spot that its only possible , if either Lucene ` IndexWriter ` has closed from inside or ` Translog ` , has closed from inside , but tragedy exception is not set . For now , let us concentrate on the ` Translog ` class . We found out that there are two methods in Translog - namely ` rollGeneration ` and ` trimOperations ` that are closing Translog in case of Exception without tragedy exception being set . This pull request fixes these 2 methods . To fix it , I 've decided to pull ` tragedyException ` from ` TranslogWriter ` up-to ` Translog ` class , because in these 2 methods IndexWriter could be innocent , but still Translog needs to be closed . Also to protect us in the future and make sure ` close ` method is never called from inside ` Translog ` special assertion examining stack
copy LifecyclePolicy to protocol.xpack __EoT__ This is the final PR for copying over the necessary components for clients to parse/render LifecyclePolicy . Changes include : - move of named-x-content server objects away from client - move validation into the client copy of LifecyclePolicy - move LifecycleAction into an interface with ` getName `
Pass DiscoveryNode to initiateChannel __EoT__ This is related to # 32517 . This commit passes the DiscoveryNode to the initiateChannel method for different Transport implementation . This will allow additional attributes ( besides just the socket address ) to be used when opening channels .
Add mzn and dz to unsupported locales __EoT__ for the KerberosTestCase
Update docs for cluster API __EoT__ What about this for node filters update ? Relates to # 30455
HLRC : Forbid all Elasticsearch logging infra __EoT__ All of the Elasticsearch logging infrastructure relies on log4j but we do n't want the high level rest client to rely on log4j2 . All of its logging goes through commons-logging because our dependencies drag in commons logging already . Anyway , this bans direct use of Elasticsearch's logging infrastructure in the high level REST client . It is still possible to use it indirectly though and there is n't anything we can really do about that until we split the high level rest client from Elasticsearch 's server jar .
Only configure publishing if it 's applied externally __EoT__ Alternate implementation for # 32195 . As discussed there , we should only configure publishing if already applied .
[ CI ] ScriptedMetricIT testInitMapWithParams fails __EoT__ Failed in master twice : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+intake/2549/console https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+intake/2548/console `` ` ./gradlew : server : integTest \ -Dtests.seed=D714A8F18E960CA2 \ -Dtests.class=org.elasticsearch.search.aggregations.metrics.ScriptedMetricIT \ -Dtests.method= '' testInitMapWithParams '' \ -Dtests.security.manager=true \ -Dtests.locale=es-UY \ -Dtests.timezone=America/Puerto_Rico \ -Dcompiler.java=10 \ -Druntime.java=8 `` ` Reproduces locally also . It looks like it fails because of the changes merged today in https : //github.com/elastic/elasticsearch/pull/31597
[ Kerberos ] Add documentation for Kerberos realm __EoT__ This commit adds documentation for configuring Kerberos realm . Configuring Kerberos realm documentation highlights important terminology and requirements before creating Kerberos realm . Most of the documentation is centered around configuration from Elasticsearch rather than go deep into Kerberos implementation . Kerberos realm settings are mentioned in the security settings for Kerberos realm .
Watcher : Properly find next valid date in cron expressions __EoT__ When a list of cron expressions is provided , and one of those addresses is already expired , the expired one will be considered as an option instead of the valid next one . This commit also reduces the visibility of the CronnableSchedule and refactors a comparator to look like java 8 .
Set forbidden APIs target compatibility to compiler java version __EoT__ + Fix use of APIs deprecated in java 9+
Move connection listener to ConnectionManager __EoT__ This is a followup to # 31886 . After that commit the ` TransportConnectionListener ` had to be propogated to both the ` Transport ` and the ` ConnectionManager ` . This commit moves that listener to completely live in the ` ConnectionManager ` . The request and response related methods are moved to a ` TransportMessageListener ` . That listener continues to live in the ` Transport ` class .
Store phase steps for index in PolicyStepsRegistry __EoT__ This changes the way that steps are retrieved from ` PolicyStepsRegistry ` to store the steps on a per-index basis ( in memory for now , though that will change in subsequent PRs ) . These steps are rebuilt as the index changes phases . This also fixes a bug where an action with the same phase and name was not being considered changed ( and thus updated ) in the compiled steps list . These are now correctly considered as `` upsert '' diffs . Relates to # 29823
[ DOCS ] Splits the roles API documentation into multiple pages __EoT__ The Role Management API documentation ( https : //www.elastic.co/guide/en/elasticsearch/reference/master/security-api-roles.html ) currently contains information about multiple APIs ( get , delete , put , etc ) . This PR splits that information across multiple pages , mirroring the layout of the machine learning APIs and openAPI format . This change was discussed briefly in https : //github.com/elastic/elasticsearch/pull/32635 # discussion_r209154427
[ TEST ] Run pre 6.4 nodes in non-FIPS JVMs __EoT__ Elasticsearch versions earlier than 6.4.0 can not properly run in a FIPS 140 JVM . This commit ensures that we use a non-FIPS JVM for nodes that we spin up in BWC tests even when we 're testing FIPS . Resolves # 32737 It also reverts e497173 and e64bb48 and as such resolves # 32868
Make Geo Context Mapping Parsing More Strict __EoT__ Currently , if geo context is represented by something other than geo_point or an object with lat and lon fields , the parsing of it as a geo context can result in ignoring the context altogether , returning confusing errors such as number_format_exception or trying to parse the number specifying as long-encoded hash code . It would also fail if the geo_point was stored . This commit makes the mapping parsing more strict and will fail during mapping update or index creation if the geo context does n't point to a geo_point field . Supersedes # 32412 Closes # 32202
[ ML ] Adding an open job to a group does not update autodetect with related scheduled events __EoT__ Steps to reproduce : 1 . Create a calendar with a scheduled event 2 . Add a new job group to the calendar 3 . Create a job and open it . In the UI this is achieved by creating the job but not starting the datafeed 4 . Edit the job to add it to the new group 5 . Run the job and see that is has not picked up the calendar associated with the group The problem is that updating the job with a group does not update autodetect with scheduled events . cc @ pheyos
Scripted metric aggregations : add deprecation warning and system property to control legacy params __EoT__ This is a followup to PR # 30111 implementing issue # 29328 . This implements the suggestion from @ rjernst that the legacy ` params._agg/_aggs ` should be available by default and disabled via a system property . A deprecation warning is emitted when scripted metric aggregations are used with the deprecated params enabled . This is to be followed up with another PR removing the deprecated behavior ( and updating relevant tests ) . I have that implemented but will finalize it after making any requested changes here , and presumably it would n't get merged until this is ported to the appropriate release branch and a target branch is selected for removing the old params .
Enable FIPS140LicenseBootstrapCheck __EoT__ This commit ensures that ` xpack.security.fips_mode.enabled : true ` can not be set in a node that does n't have the appropriate license . The bootstrap check was introduced in # 32437 but was not enabled .
Fix InternalAutoDateHistogram reproducible failure __EoT__ Closes # 32215 . This PR addresses two issues : 1 . Reproducible test failure outlined by @ DaveCTurner in # 32215 : `` ` ./gradlew : server : test -Dtests.seed=55C6AF1793E2275B -Dtests.class=org.elasticsearch.search.aggregations.bucket.histogram.InternalAutoDateHistogramTests -Dtests.method= '' testReduceRandom '' -Dtests.security.manager=true -Dtests.locale=en-IN -Dtests.timezone=Pacific/Chuuk `` ` The problem here was a mistake in setting up the expected results : I had originally written the test setup to start with the _smallest_ possible ` innerInterval ` and try the larger ones , but the approach in the reduce method is to try the largest and step down . I 've updated the logic to reflect this and run the test with ` -Dtests.iters=200 ` to convince myself this wo n't cause a further failure . 2 . In the course of tracking down the first problem , I 've noticed what I believe is an actual bug in the auto interval implementation : instead of using the ` maximumInnerInterval ` of the _current_ rounding , we use the index of the initial rounding passed in . To fix this , I 've updated the logic and added a test case that fails using the old code path , and passes with
Remove assertion in testDocStats on deletedDocs counter __EoT__ testDocStats test is flaky and sometimes it 's failing on jenkins and failure is not reproducible locally . The reason for this failure is in timing . If the number of deleted documents is greater than 33 % of inserted documents , Lucene will schedule segments to merge if TieredMergePolicy is used ( it 's not the case for LogMergePolicy , but ES is only using TieredMergePolicy ) . If this merge is performed before stats are retrieved - we will get 0 for `` deleted '' counter . So basically this counter could be either 0 or numOfDeletedDocs at this point , but this is the too loose assertion and we decided to remove it at all . Closes # 32766
Update getting-started.asciidoc __EoT__ Highlighted that you can change shard counts using ` _shrink ` and ` _split ` .
doc : fix allowed value of HighlighterBuilder encoder in javadoc __EoT__ refs # 32745
Add `` remove a tag '' script logic as an example __EoT__ It took me quite a while of online searching and experimenting to realize the function-call asymmetry in the Add versus Remove from a list , like the `` tags '' list ! I realize we can not give examples for every single thing the user wants to do in Painless , but this is such a common use case ( removing a tag from a single doc , or from a set of docs with Update-By-Query ) that I believe it ought to be demonstrated immediately after the `` add a tag '' example . We have an example of removing an entire document field , but not removing one element of a list ( a multi-valued field ) . Also , a minor grammar fix : I have added an apostrophe to the word `` its '' in the accompanying text of the example just above .
Security : remove put privilege API __EoT__ This commit removes the put privilege API in favor of having a single API to create and update privileges . If we see the need to have an API like this in the future we can always add it back .
Guard against null in email admin watches __EoT__ The Kibana settings docs that these watches rely on can sometimes contain no xpack settings . When this is the case , we will end up with a null pointer exception in the script . We need to guard against in these scripts so this commit does that . Closes # 32590
Re enable ml bwc tests __EoT__ Re-enable BWC tests for ML now that # 32816 has been backported to 6.x
migrate more actions to protocol.xpack __EoT__ this PR creates client-side instances of the following actions : - DeleteAction - ForceMergeAction - ReadOnlyAction - RolloverAction - ShrinkAction AllocateAction can be found here ( https : //github.com/elastic/elasticsearch/pull/32853 )
Fix docs for fixed filename for heap dump path __EoT__ The docs here incorrectly state that it is okay for a heap dump file to exist when heap dump path is configured to a fixed filename . This is incorrect , the JVM will fail to write the heap dump if a heap dump file already exists at the specified location ( see the DumpWriter constructor DumpWriter : :DumpWriter ( const char* path ) in the JVM source ) . Closes # 32873
Painless : Special Case def __EoT__ This removes def from the classes map in PainlessLookup and instead always special cases it . This prevents potential calls against the def type that should n't be made and forces all cases of def throughout Painless code to be special cased .
Update WordPress plugins links __EoT__ Hi , 1 . Removed outdated WordPress plugins https : //wordpress.org/plugins/elasticsearch-indexer/ _Last update 3 years ago_ https : //wordpress.org/plugins/wp-elasticsearch/ _Last update 6 years ago_ 2 . Add ElasticPress plugin to the list
Docs enhancement : added reference to cluster-level setting __EoT__ Add reference to cluster-level setting ` search.default_allow_partial_results ` in the existing docs that describe the query-level settings . Closes # 32809
remove extraneous CreateIndexRequest context in ShrinkAction __EoT__ no clue why this was here
update cluster-state task execution to halt on new phase __EoT__ As we migrate to a per-phase execution model , we need to prepare our cluster-state-step execution model to be aligned . It is the case that the final iteration into the next `` currentStep '' from the next phase would not be available in the registry yet . This change exits the execution loop early as to not jump into executing the next phase 's steps before the registry is properly updated
remove ` type ` config from LifecyclePolicy JSON __EoT__ Since there is only one production policy , Timeseries , there is no reason to expose the ` type ` argument to the user .
INGEST : Add Configuration Except . Data to Metdata __EoT__ * closes # 27728
cluster formation DSL - Gradle integration - part 2 __EoT__ Adds the initial cluster formation DSL and integration with Gradle task graph and task life-cycle . The main purpose of the CI is to exercise this integration and add integration tests for it . The actual syntax of the DSL will be subject to change ( some things are already changed ) , I do n't think it 's worth focusing on it much as long as it 's not something that drives into a corner . Keeping it easy to change the DSL is a design goal . I already have local changes that iterate on it . I think the best time to talk about the DSL syntax is when we actually start using it . Starting the review with ` ClusterformationPluginIT.java ` and ` buildSrc/src/testKit/clusterformation/build.gradle ` might make it easier to understand other changes . @ rjernst I will extend the DSL to restrict to specific task types in a future PR .
cluster formation DSL - Gradle integration - part 2 __EoT__ Adds the initial cluster formation DSL and integration with Gradle task graph and task life-cycle . The main purpose of the CI is to exercise this integration and add integration tests for it . The actual syntax of the DSL will be subject to change ( some things are already changed ) , I do n't think it 's worth focusing on it much as long as it 's not something that drives into a corner . Keeping it easy to change the DSL is a design goal . I already have local changes that iterate on it . I think the best time to talk about the DSL syntax is when we actually start using it . Starting the review with ` ClusterformationPluginIT.java ` and ` buildSrc/src/testKit/clusterformation/build.gradle ` might make it easier to understand other changes . @ rjernst I will extend the DSL to restrict to specific task types in a future PR .
Introduce global checkpoint listeners __EoT__ This commit introduces the ability for global checkpoint listeners to be registered at the shard level . These listeners are notified when the global checkpoint is updated , and also when the shard closes . To encapsulate these listeners , we introduce a shard-level component that handles synchronization of notification and modifications to the collection of listeners . Relates # 32651
Move connection profile into connection manager __EoT__ This is related to # 31835 . It moves the default connection profile into the ConnectionManager class . The will allow us to have different connection managers with different profiles .
[ ML ] Removing old per-partition normalization code __EoT__ Per-partition normalization is an old , undocumented feature that was never used by clients . It has been superseded by per-partition maximum scoring ( see # 32748 ) . This PR removes the now redundant code . A PR containing the corresponding changes to the ml-cpp code will follow .
Use JDK 10 for 6.4 BWC builds __EoT__ The 6.4 release will officially be built with JDK 10 . We should push JDK 10 down to the BWC builds for the 6.4 branch then too .
Introduce the dissect library __EoT__ The dissect library will be used for the ingest node as an alternative to Grok to split a string based on a pattern . Dissect differs from Grok such that regular expressions are not used to split the string . Note - Regular expressions are used during construction of the objects , but not in the hot path . A dissect pattern takes the form of : ' % { a } % { b } , % { c } ' which is composed of 3 keys ( a , b , c ) and two delimiters ( space and comma ) . This dissect pattern will match a string of the form : 'foo bar , baz' and will result a key/value pairing of 'a=foo , b=bar , and c=baz ' . See the comments in DissectParser for a full explanation . This commit does not include the ingest node processor that will consume it . However , the consumption should be a trivial mapping between the key/value pairing returned by the parser and the key/value pairing needed for the IngestDocument . -- -- -- -- -- - Note to reviewer ( s
introduce random timeseries lifecycle policy util method __EoT__ It is useful to have a random TimeseriesLifecycleType-backed LifecyclePolicy for testing . This PR exposes a helper method to create one and use it for serialization tests in LifecyclePolicyTests
Move validation to server for put user requests __EoT__ This change moves the validation for values of usernames and passwords from the request to the transport action . This is done to prevent the need to move more classes into protocol once we add this API to the high level rest client . Additionally , this resolves an issue where validation depends on settings and we always pass empty settings instead of the actual settings . Relates # 32332
[ ML ] Add high level REST client docs for ML put job endpoint __EoT__ Relates # 29827 Relates # 32726
Watcher : Remove unused hipchat render method __EoT__ The HipChatMessage # render is no longer used , and instead the HipChatAccount # render is used in the ExecutableHipChatAction . Only a test that validated the HttpProxy used this render method still . This commit cleans it up .
Watcher : Remove extraneous auth classes __EoT__ The auth.basic package was an example of a single implementation interface that leaked into many different classes . In order to clean this up , the HttpAuth interface , factories , and Registries all were removed and the single implementation , BasicAuth , was substituted in all cases . This removes some dependenies between Auth and the Templates , which can now use static methods on BasicAuth . BasicAuth was also moved into the http package .
Watcher : migrate PagerDuty v1 events API to v2 API __EoT__ The PagerDuty v1 API is EOL and will stop accepting new accounts shortly . This commit swaps out the watcher use of the v1 API with the new v2 API . It does not change anything about the existing watcher API . Closes # 32243
MINOR : Remove ` IndexTemplateFilter ` __EoT__ * This is n't used anywhere anymore ever since 00c123b59f8ba11eb260e6b70acf7be80bccc949 and dc166c5dc6bcf4abb7f25c6f4143f07d8176333d
Core : Add java time version of rounding classes __EoT__ This commit adds a java time version of the existing rounding classes , which features the same test suite and a small test class to check if serialization works as expected .
Aggregations/HL Rest client fix : missing scores __EoT__ Significant_terms ' score doubles were being parsed as long . Added test . Thanks for the report/fix , Blakko Closes # 32770
INGEST : Create Index Before Pipeline Execute __EoT__ * Ensures that indices are created before the default pipeline setting is read to correcly handle the case of an index template containing a default pipeline ( without the fix the first document does not get the pipeline applied as explained in # 32758 ) * Was n't quite sure what a reasonable UT would be here , I can try writing one if we want it but it seems that would be a lot of mocking from where we are at with the test infra here ( we are currently just mocking the cluster service , so we 'd have to mock the steps for index creation + verify the right order of calls I guess ? ... not sure if that 's a valuable test but happy to add it : ) ) . * closes # 32758
Fix NOOP bulk updates __EoT__ # 31821 introduced an unreleased bug where NOOP updates were incorrectly mutating the bulk shard request , inserting null item to be replicated , which would result in ` NullPointerException ` s when serializing the request to be shipped to the replicas . Closes # 32808 /cc : @ bleskes
Remove client connections from TcpTransport __EoT__ This is related to # 31835 . This commit adds a connection manager that manages client connections to other nodes . This means that the TcpTransport no longer maintains a map of nodes that it is connected to .
Set up ILM docs . __EoT__ Replaces https : //github.com/elastic/elasticsearch/pull/32386 .
Mute security-cli tests in FIPS JVM __EoT__ All Unit tests in this module are muted in FIPS 140 JVMs and as such the CI run [ fails ] ( https : //github.com/elastic/elasticsearch/issues/32698 ) . This commit disables test task in a FIPS JVM and reverts adding a dummy test .
Unmute WildFly tests in FIPS JVM __EoT__ WildflyIT test fails in a FIPS JVM due to the amount of output in stderr . The excessive stderr output is due to https : //bugs.openjdk.java.net/browse/JDK-8202893 and is not an indication of a failure that should be tracked . This commit adjusts the limit to something more lenient that would allow the test to succeed . Reverts # 32543
[ ML ] [ DOCS ] Refer to rules feature as custom rules __EoT__
[ ML ] Partition-wise maximum scores __EoT__ Added infrastructure to push through the 'person name field value ' to the normalizer process . This is required by the normalizer to retrieve the maximum scores for individual partitions . The native-code normaliser process will currently simply ignore the new field . Therefore it is safe ( and desirable ) that this change be pushed prior to the corresponding native code ( ml-cpp ) changes . Relates to https : //github.com/elastic/ml-cpp/issues/181
bytes method on XContentBuilder removed __EoT__ bytes method on XContentBuilder removed using BytesReference.bytes ( docBuilder )
Add a task to run forbiddenapis using cli __EoT__ Add a task that offers an equivalent check to the forbidden APIs plugin , but runs it using the forbiddenAPIs CLI instead . This is n't wired into precommit first , and does n't work for projects that require specific signatures , etc . It 's meant to show how this can be used . The next step is to make a custom task type and configure it based on the project extension from the pugin and make some minor adjustments to some build scripts as we ca n't bee 100 % compatible with that at least due to how additional signatures are passed . Notes : - there 's no ` -- target ` for the CLI version so we have to pass in specific bundled signature names - the cli task already wires to ` runtimeJavaHome ` - no equivalent for ` failOnUnsupportedJava = false ` but does n't seem to be a problem . Tested with Java 8 to 11 - there 's no way to pass additional signatures as URL , these will have to be on the file system , and ca n't be resources on
[ Kerberos ] Add debug log statement for exceptions __EoT__ This commit adds missing debug log statements for exceptions that occur during ticket validation . I thought these get logged somewhere else in authentication chain but even after enabling trace logs I could not see them logged . As the Kerberos exception messages are cryptic adding full stack trace would help debugging faster .
Make x-pack core pull transport-nio __EoT__ The security nio transports depend on transport-nio . This commit modifies x-pack core to include the transport-nio jar into the x-pack core module .
Painless : Clean Up Whitelist Names __EoT__ Renames variables in the whitelists to match the current naming scheme . Mechanical change .
Cat apis : Fix index creation time to use strict date format __EoT__ With the move to java time , the default formatter used by toString on ZonedDateTime uses optional components for least significant portions of the date . This commit changes the cat indices api to use a strict date time format , which will always output milliseconds , even if they are zero . closes # 32466
[ ML ] 'finished_time ' still reported after job has been reopened __EoT__ # # Description Found in 6.3.2 Currently , when a job closes , the ` finished_time ` key is created/updated in the job config and it 's value represents the timestamp of when the job was last closed . If the user reopens the job , we still show the last ` finished_time ` until the job closes again . This is misleading , as there should n't be a ` finished_time ` reported while a job is still open . # # Steps to reproduce 1 . Create a job 2 . Open the job 3 . Close the job 4 . Re-open the job 5 . Notice that ` finished_time ` is still being reported and the value coincides with the time at which the job was last closed .
Test : Only sniff host metadata for node_selectors __EoT__ Our rest testing framework has support for sniffing the host metadata on startup and , before this change , it 'd sniff that metadata before running the first test . This prevents running these tests against elasticsearch installations that wo n't support sniffing like Elastic Cloud . This change allows tests to only sniff for metadata when they encounter a test with a ` node_selector ` . These selectors are the things that need the metadata anyway and they are super rare . Tests that use these wo n't be able to run against installations that do n't support sniffing but we can just skip them . In the case of Elastic Cloud , these tests were never going to work against Elastic Cloud anyway .
Painless context doc updates for scripted metric aggregation `` state '' context variables __EoT__ The changes that this doc refers too were implemented for # 29328 . The PR that officially deprecates the old functionality is still open ( # 31597 ) but the new names are in place on the 6.4 branch . This change brings the scripted metric agg context docs in line with the new agg state context variable .
Painless : Clean up PainlessCast __EoT__ Renames variables and methods in PainlessCast to go along with the new naming scheme . Mechanical change .
[ TEST ] Certificate NONE not allowed in FIPS JVM __EoT__ There was a NONE certificate validation creeping . NONE Certificate validation is a no-no on a fips JVM , thanks @ jkakavas for the pointer ! Closes https : //github.com/elastic/elasticsearch/issues/32673
[ ML ] Refactor ProcessCtrl into Autodetect and Normalizer builders __EoT__ This moves the helper functionality for creating the autodetect and mormalizer processes into corresponding builders .
Access build tools resources __EoT__ The build plugin now adds a task to write out specific resources meant for consumption to the file sustem . `` ` exportBuildResources { resource 'checkstyle_conf ' , `` $ buildDir/checkstyle.xml '' } `` ` The task is not ran by default , the tasks that need the files should depend on it . Will update existing uses in checkstyle and look for others in a subsequent PR . Came out of a discussion following # 31989 .
Tests : Disable rolling upgrade tests with system key on fips JVM __EoT__ This disables the x-pack rolling upgrade tests using a fips JVM , as there are problems creating the keystore . Relates # 32737
HLRC : Ban LoggingDeprecationHandler __EoT__ LoggingDeprecationHandler requires log4j2 but we do n't require log4j2 in the client . This bans LoggingDeprecationHandler and removes all uses of it in the high level client . Closes # 32151
Fix test reproducability in AbstractBuilderTestCase setup __EoT__ Currently AbstractBuilderTestCase generates certain random values in its ` beforeTest ( ) ` method annotated with @ Before only the first time that a test method in the suite is run . This changes the values of subsequent random values and has the effect that when running single methods from a test suite with '' -Dtests.method=* '' , the random values it sees are different from when the same test method is run as part of the whole test suite . This makes it harder to use the reproduction lines logged on failure . This changes the above method so that ` beforeTest ` will do the same call to the random value source each time a test method is run , so reproduction by running just one method is possible again . Closes # 32400
Adding ML HLRC wrapper and put_job API call __EoT__ This adds the Machine Learning HLRC wrapper class and creates the first request/response objects necessary for the PUT /job/ < job_id > request .
[ DOCS ] Adjust high-level client x-pack docs __EoT__ - Expose x-pack usage docs page which was not linked in supported-apis page - make watcher a top-level dir outside of x-pack directory - move x-pack info and usage pages to miscellaneous - add new Watcher category to supported-apis ( they were under miscellaneous ) - remove x-pack prefix from watcher docs titles
Move icu4j and super-csv version numbers to versions file __EoT__ The upcoming ML log structure finder functionality will use these libraries , and it makes sense to use the same versions that are being used elsewhere in Elasticsearch . This is especially true with icu4j , which is pretty big .
[ DOCS ] Add missing link to get license API docs __EoT__ Without the link , the page is effectively not reachable
Refactor TransportShardBulkAction to better support retries __EoT__ Processing bulk request goes item by item . Sometimes during processing , we need to stop execution and wait for a new mapping update to be processed by the node . This is currently achieved by throwing a ` RetryOnPrimaryException ` , which is caught higher up . When the exception is caught , we wait for the next cluster state to arrive and process the request again . Sadly this is a problem because all operations that were already done until the mapping change was required are applied again and get new sequence numbers . This in turn means that the previously issued sequence numbers are never replicated to the replicas . That causes the local checkpoint of those shards to be stuck and with it all the seq # based infrastructure . This PR refactors how we deal with retries with the goal of removing ` RetryOnPrimaryException ` and ` RetryOnReplicaException ` ( not done yet ) . It achieves so by introducing a class ` PrimaryExecutionContext ` that is used the capture the execution state and allows continuing from where the execution stopped . The class also formalizes the steps
Java version reproduction __EoT__ Provide the ability to control compiler and hava versions just by passing a property . The actual java home comes from the ` JAVA < major > _HOME ` env vars that we allready require . This works better with the Gradle daemon as well . Output is also changed a bit . for ` -Druntime.java=8 -Dcompiler.java=9 ` : `` ` ======================================= Elasticsearch Build Hamster says Hello ! Gradle Version : 4.9 OS Info : Linux 4.17.8-1-ARCH ( amd64 ) Compiler JDK Version : 11 ( Oracle Corporation 11-ea [ OpenJDK 64-Bit Server VM 11-ea+22 ] ) Runtime JDK Version : 11 ( Oracle Corporation 11-ea [ OpenJDK 64-Bit Server VM 11-ea+22 ] ) Gradle JDK Version : 10 ( Oracle Corporation 10.0.1 [ OpenJDK 64-Bit Server VM 10.0.1+10 ] ) Compiler java.home : /home/alpar/opt/jdk-11-ea22/ Runtime java.home : /home/alpar/opt/jdk-11-ea22/ Gradle java.home : /usr/lib/jvm/java-10-openjdk Random Testing Seed : EA858533191E8DFB ======================================= `` ` Without configuration : `` ` ======================================= Elasticsearch Build Hamster says Hello ! ======================================= Gradle Version : 4.9 OS Info : Linux 4.17.8-1-ARCH ( amd64 ) JDK Version : 10 ( Oracle Corporation 10.0.1 [ OpenJDK 64-Bit Server VM 10.0.1+10 ] ) JAVA_HOME : /usr/lib/jvm/java-10-openjdk Random
Core : Create java time based DateMathParser __EoT__ This is a first step of porting over the date math parser to java time . There is one corner case which requires parsing the date twice , in order to find out if there is a timezone in the specified date which gets used over an additionally specified timezone . This is something I would like to get rid of . I copied the test suite from the existing date math parser , which is passing right now . In case you are wondering why I did not use the ` .truncatedTo ( ) ` methods in java time , those do not support certain units , which we are using in the date math parser .
[ TEST ] Add `` ne '' as an unsupported SimpleKdc locale __EoT__ SimpleKdcServer can not handle some locales , so we explicitly avoid using them in tests . Adding `` ne '' ( Nepali ) to that list .
[ Test ] Handle file permissions for Windows __EoT__ This commit modifies the test to handle file permissions in windows/dos environments . The test requires access to UserPrincipal and so have modified plugin-security policy to access user information . Closes # 32637
move qa yaml tests to inside the ILM plugin __EoT__ The qa tests with security have n't actually gone as far as testing security roles yet , so this is a start in the hopes of both bringing the tests into the ilm plugin , and re-using the same cluster for all the tests
Painless : Add an Ingest Script Processor Example __EoT__ This PR adds two pieces . The first is a small set of documentation providing instructions on how to get setup to run context examples . This will require a download similar to how Kibana works for some of the examples . The second is an ingest processor example using the downloaded data . More examples will follow as ideally one per PR . This also adds a set of tests to individually test each script as a unit test .
Add expected mapping type to ` MapperException ` __EoT__ Currently if a document can not be indexed because it violates the defined mapping for the index , a ` MapperException ` is thrown . In most cases this exception contains only the name of the field which could not be parsed . The defined index mapping can be retrieved using get mappings . In some cases it is useful to expose the expected field type in the exception itself , so that the user can react based on the error msg ( avoiding the additional call and response parsing ) . This parsing add the expected data type to the ` MapperException ` . Fixes # 31502
Core : Remove some logging constructors __EoT__ Remove a few of the logger constructors that are n't widely used or are n't used at all and deprecate a few more logger constructors in favor of log4j2 's ` LogManager ` .
Adds REST client support for starting and stopping ILM __EoT__ Not sure if this is the best way to expose this API . I think given the REST api for this API are separate endpoints ( ` _ilm/start ` and ` _ilm/stop ` ) that we should either : 1 . Split this API into two on the transport layer as well and have a ` StartILMAction ` and a ` StopILMAction ` with their own request and response objects 2 . Keep the action as is but hide the ` PutOperationRequest ` from the user and have the client expose a ` PutOperationModeResponse startILM ( RequestiOptions ) ` method and a ` PutOperationModeResponse stopILM ( RequestOptions ) ` method . In either case I 'm not sure its a good idea to expose the current ` PutOperationModeRequest ` class to the user since its not particularly user friendly because : a . As far as the user is concerned what they want to do is start and stop ILM not put it into an `` operation mode '' b . The ` OperationMode ` enum itself is not particular user friendly since its values are ` RUNNING ` ,
Build : Add back setting artifact id of pom for rest high level client __EoT__ This commit adds back the publishing section that sets the artifact id of the generated pom file for the high level rest client . This was accidentally removed during a consolidationo of the shadow plugin logic .
SQL : Bug fix for the optional `` start '' parameter usage inside LOCATE function __EoT__ The incorrect ` NodeInfo ` is created when the optional parameter is not used , leading to the incorrect constructor being used . Fixes https : //github.com/elastic/elasticsearch/issues/32554
Scripting : Replace Update Context __EoT__ Same as # 32068 and # 32003 ( fully resolves the todo together with # 32068 ) . One notable point would be the change in behaviour this introduces and I 'm not 100 % sure about : Previously the ` params ` included ` ctx ` under ` params.ctx ` because of the way ` org.elasticsearch.painless.ScriptImpl ` worked ( using the ` params ` to provide the ` ctx ` indirectly ) . With this change , making ` ctx ` and actual parameter this was n't necessary anymore and I did n't add any logic that puts ` ctx ` into ` params ` here ( seemed wrong to me since it being there was just a side effect ? ) . This required a change to this IT : See https : //github.com/elastic/elasticsearch/compare/master ... original-brownbear : replace-update-context ? expand=1 # diff-585f6613de46bec6547c7b2aed89db8bR135 The test forced a circular dependency in a kind of complicated way because the ` for ` loop would hit the key ` ctx ` and then put ` ctx ` to ` ctx.ctx ` . This does n't happen anymore with the change here so I just directly forced
Painless : Move More Logic to PainlessLookup __EoT__ This moves some run-time lookups for methods and fields to the PainlessLookup .
Switch WritePipelineResponse to AcknowledgedResponse __EoT__ We previously discussed moving the classes extending ` AcknowledgedResponse ` to simply use ` AcknowledgedResponse ` , making the class non-abstract . This moves the first class to do this , removing ` WritePipelineResponse ` in the process . If we like the way this looks , I will switch the remaining classes over to using ` AcknowledgedResponse ` .
move replicas action functionality into AllocateAction __EoT__ Since replica counts and allocation rules are set separately , it is not always clear how many replicas are to be allocated in the allocate action . Moving the replicas action to occur at the same time as the allocate action , resolves this confusion that could end an undesired state . This means that the ReplicasAction is removed , and a new optional replicas parameter is added to AllocateAction .
Adding ` Job ` and ` AnalysisConfig ` for HLRC __EoT__ Adds client side Pojos for Job configuration and AnalysisConfig . * Validations were removed ( other than null checks ) * default values removed as well ( as they should be set server side ) * They are not wire transportable Additionally , certain uninteresting/internal fields have been removed .
Fix role query that can match nested documents __EoT__ This change makes sure that the role query excludes nested documents when it is ran to select the parent documents allowed by the role . It fixes the exception that is thrown when the mapping has nested fields and the role query can match nested documents .
Whitelisting / from Circuit Breaker Exception __EoT__ < ! -- Bug report -- > **Elasticsearch version** ( ` bin/elasticsearch -- version ` ) : 5.1.1 ( This issue observed from v5.0.0 onwards ) **Plugins installed** : [ ] **JVM version** ( ` java -version ` ) : 1.7.0_181 **OS version** ( ` uname -a ` if on a Unix-like system ) : 4.9.70-25.242.amzn1.x86_64 ( Amazon EC2 ) **Description of the problem including expected versus actual behavior** : When Circuit Breaker has tripped , certain diagnostic requests like `` _cluster/health '' succeed where as request to / fails with 503 Service Unavailable . This behavior is observed because of this commit : https : //github.com/elastic/elasticsearch/commit/f32b70047241fe319cb37047cc2a47d1b56da6e1 where certain API paths are whitelisted from Circuit Breaking exception , but / is not whitelisted . Could you please let us know if you foresee any issues if we add / to the Circuit Breaking whitelist ? If not , we can submit a pull-request with the above mentioned change . # # # # # Actual Behavior When Circuit Breaker has tripped , request to / results in `` 503 Service Unavailable '' even if the cluster is up and running . `` `
TESTS : Explicitly Fail Http Client Timeouts __EoT__ * Do n't quietly ignore timeouts when waiting for HTTP responses * Fixes # 32702
Fixes suggestion generics __EoT__ This solves a compile problem in Eclipse where Eclipse could not resolve the generics for the options field in ` PhraseSuggestion.Entry ` . But I think this is also a good change in general because ` PhraseSuggestion.Entry ` is now declaring the specific ` Option ` implementation it requires rather than ` Suggest.Entry.Option ` which is more general and could lead to weird bugs . ` CompletionSuggestion.Entry ` and ` TermSuggestion.Entry ` already declare the more specific class they use so I think this was an oversight in ` PhaseSuggestion.Entry `
CORE : Upgrade to Jackson 2.8.11 __EoT__ * Did n't go for ` 2.8.11.2 ` because that was not available for all Jackson modules we use , this version does fix the issue mentioned in # 30352 as well though and we can probably just move to ` 2.9.x ` at some point instead of complicating the build for this . * closes # 30352
Prevent cause from being null in ShardOperationFailedException __EoT__ ` ShardOperationFailedException ` and corresponding implementors seem to suggest that the cause may be null , case that is also handled in a few places . Yet , it does not seem to be possible in practice for the cause to be null , hence we can clean that up and enforce the cause to be a non null value . This is best done by making ` ShardOperationFailedException ` an abstract class rather than an interface , which holds the instance members that all the subclasses have in common and can also enforce that cause , status and reason are non null . Such change also allows to share common code between the different subclasses . Relates to # 32608 where this was uncovered and a test was added for the case where cause is null , test that can now be removed..
Preserve index_uuid when creating QueryShardException __EoT__ As part of # 32608 we made sure that the fully qualified index name is taken from the query shard context whenever creating a new ` QueryShardException ` . That change introduced a regression as instead of setting the entire ` Index ` object to the exception , which holds index name and index uuid , we ended up setting only the index name ( including cluster alias ) . With this commit we make sure that the index uuid does not get lost and we try to lower the chances that a similar bug makes it in another time . That 's done by making ` QueryShardContext ` return the fully qualified ` Index ` ( which also holds the uuid ) rather than only the fully qualified index name .
Painless : Clean up FunctionRef __EoT__ This change consolidates all the logic for generating a FunctionReference ( renamed from FunctionRef ) from several arbitrary constructors to a single static function that is used at both compile-time and run-time . This increases long-term maintainability as it is much easier to follow when and how a function reference is being generated . It moves most of the duplicated logic out of the ECapturingFuncRef , EFuncRef and ELambda nodes and Def as well .
Expose whether or not the global checkpoint updated __EoT__ It will be useful for future efforts to know if the global checkpoint was updated . To this end , we need to expose whether or not the global checkpoint was updated when the state of the replication tracker updates . For this , we add to the tracker a callback that is invoked whenever the global checkpoint is updated . For primaries this will be invoked when the computed global checkpoint is updated based on state changes to the tracker . For replicas this will be invoked when the local knowledge of the global checkpoint is advanced from the primary . Relates # 32651
Reduce connections used by MockNioTransport __EoT__ The MockNioTransport ( similar to the MockTcpTransport ) is used for integ tests . The MockTcpTransport has always only opened a single for all of its work . The MockNioTransport has awlays opened the default number of connections ( 13 ) . This means that every test where two transports connect requires 26 connections . This is more than is necessary . This commit modifies the MockNioTransport to only require 3 connections .
[ Rollup ] Remove builders from RollupJobConfig __EoT__ This pull request removes the builders from the last Rollup configuration object .
Add temporary directory cleanup workarounds __EoT__ On some Linux distributions tmpfiles.d cleans files and directories under /tmp if they have n't been accessed for 10 days . This can cause problems for ML as ML is currently the only component that uses the temp directory more than a few seconds after startup . If you did n't open an ML job for 10 days and then tried to open one then the temp directory would have been deleted . This commit prevents the problem occurring in the case of Elasticsearch being managed by systemd , as systemd private temp directories are not subject to periodic cleanup ( by default ) . Additionally there are now some docs to warn people about the risk and suggest a manual mitigation for .tar.gz users . Fixes # 31732
Adding job process pojos to protocol pkg __EoT__ Adds client side Pojos for DataCounts , ModelSizeStats , ModelSnapshot , Quantiles . Also creates a new Job pojo , which currently just has the ParseField ` ID ` defined as numerous packages in side the ML protocol refer to the ` job_id ` field . * Validations were removed ( other than null checks ) * default values removed as well ( as they should be set server side ) * They are not wire transportable Additionally , certain uninteresting/internal fields have been removed .
Verify primary mode usage with assertions __EoT__ Primary terms were introduced as part of the sequence-number effort ( # 10708 ) and added in ES 5.0 . Subsequent work introduced the replication tracker which lets the primary own its replication group ( # 25692 ) to coordinate recovery and replication . The replication tracker explicitly exposes whether it is operating in primary mode or replica mode , independent of the ` ShardRouting ` object that 's associated with a shard . During a primary relocation , for example , the primary mode is transferred between the primary relocation source and the primary relocation target . After transferring this so-called primary context , the old primary becomes a replication target and the new primary the replication source , reflected in the replication tracker on both nodes . With the most recent PR in this area ( # 32442 ) , we finally have a clean transition between a shard that 's operating as a primary and issuing sequence numbers and a shard that 's serving as a replication target . The transition from one state to the other is enforced through the operation-permit system , where we block permit acquisition during
[ CI ] InternalAutoDateHistogramTests # testReduceRandom reproducable failure __EoT__ Failure : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+periodic/6700/console Reproducable locally with this seed : `` ` REPRODUCE WITH : ./gradlew : server : test \ -Dtests.seed=6345BDE5AED7493F \ -Dtests.class=org.elasticsearch.search.aggregations.bucket.histogram.InternalAutoDateHistogramTests \ -Dtests.method= '' testReduceRandom '' \ -Dtests.security.manager=true \ -Dtests.locale=lv \ -Dtests.timezone=HST `` ` Error : `` ` java.lang.AssertionError : expected : < { 1532036050000=59 , 1532036051000=58 , 1532036052000=3 , 1532036053000=71 , 1532036054000=20 , 1532036055000=48 , 1532036110000=100 , 1532036170000=49 , 1532036230000=92 } > but was : < { 1532036050000=259 , 1532036080000=0 , 1532036110000=100 , 1532036140000=0 , 1532036170000=49 , 1532036200000=0 , 1532036230000=92 } > at __randomizedtesting.SeedInfo.seed ( [ 6345BDE5AED7493F : A37811F4888AD069 ] :0 ) at org.junit.Assert.fail ( Assert.java:88 ) at org.junit.Assert.failNotEquals ( Assert.java:834 ) at org.junit.Assert.assertEquals ( Assert.java:118 ) at org.junit.Assert.assertEquals ( Assert.java:144 ) at org.elasticsearch.search.aggregations.bucket.histogram.InternalAutoDateHistogramTests.assertReduced ( InternalAutoDateHistogramTests.java:107 ) at org.elasticsearch.search.aggregations.bucket.histogram.InternalAutoDateHistogramTests.assertReduced ( InternalAutoDateHistogramTests.java:45 ) at org.elasticsearch.test.InternalAggregationTestCase.testReduceRandom ( InternalAggregationTestCase.java:264 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke ( RandomizedRunner.java:1713 ) at com.carrotsearch.randomizedtesting.RandomizedRunner $ 8.evaluate ( RandomizedRunner.java:907 ) `` ` Other seeds seem to be okay , so I do n't think the test needs to be muted right away .
Include translog path in error message when translog is corrupted __EoT__ Currently , when TranslogCorruptedException is thrown most of the times it does not contain information about the translog location on the file system . There is the translog recovery tool that accepts the translog path as an argument and users are constantly puzzled where to get the path . See for example https : //github.com/elastic/elasticsearch/issues/24929 . This pull request adds `` source '' information to every TranslogCorruptedException thrown . The source could be local file , remote translog source ( used for recovery ) , assertion ( translog entry is constructed to perform some assertion ) or translog is constructed inside the test .
[ CI ] HttpExporterSslIT # testCanAddNewExporterWithSsl fails on FIPS JVM __EoT__ The following reproduces on the FIPS JVM : `` ` REPRODUCE WITH : ./gradlew : x-pack : plugin : monitoring : internalClusterTest \ -Dtests.seed=E34BAFEB137A1040 \ -Dtests.class=org.elasticsearch.xpack.monitoring.exporter.http.HttpExporterSslIT \ -Dtests.method= '' testCanAddNewExporterWithSsl '' \ -Dtests.security.manager=true \ -Dtests.locale=no-NO \ -Dtests.timezone=Africa/Blantyre `` ` From https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+matrix-java-periodic/ES_BUILD_JAVA=java11 , ES_RUNTIME_JAVA=java8fips , nodes=virtual & & linux/222/console Relevant stack traces : `` ` 2 > java.io.IOException : Invalid keystore format 2 > at sun.security.provider.JavaKeyStore.engineLoad ( JavaKeyStore.java:658 ) 2 > at sun.security.provider.JavaKeyStore $ JKS.engineLoad ( JavaKeyStore.java:56 ) 2 > at sun.security.provider.KeyStoreDelegator.engineLoad ( KeyStoreDelegator.java:224 ) 2 > at sun.security.provider.JavaKeyStore $ DualFormatJKS.engineLoad ( JavaKeyStore.java:70 ) 2 > at java.security.KeyStore.load ( KeyStore.java:1445 ) 2 > at sun.security.util.AnchorCertificates $ 1.run ( AnchorCertificates.java:61 ) 2 > at sun.security.util.AnchorCertificates $ 1.run ( AnchorCertificates.java:52 ) 2 > at java.security.AccessController.doPrivileged ( Native Method ) 2 > at sun.security.util.AnchorCertificates. < clinit > ( AnchorCertificates.java:52 ) 2 > at sun.security.provider.certpath.AlgorithmChecker.checkFingerprint ( AlgorithmChecker.java:214 ) 2 > at sun.security.provider.certpath.AlgorithmChecker. < init > ( AlgorithmChecker.java:164 ) 2 > at sun.security.provider.certpath.AlgorithmChecker. < init > ( AlgorithmChecker.java:118 ) 2 > at sun.security.validator.SimpleValidator.engineValidate ( SimpleValidator.java:157 ) 2 > at sun.security.validator.Validator.validate ( Validator.java:260 ) 2 > at sun.security.validator.Validator.validate ( Validator.java:236 ) 2 > at
Ignore script fields when size is 0 __EoT__ Addresses issue # 31824 I have added the condition as discussed .
Add space after period __EoT__ Add space after period < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md # contributing-as-part-of-a-class
Tests : Fix Typo Causing Flaky Settings Test __EoT__ * We were comparing the wrong timeout value in the ` randomValueOtherThan ` call here , leading to no mutation happening for a certain seed * closes # 32639
Fix content type detection with leading whitespace __EoT__ Today content type detection on an input stream works by peeking up to twenty bytes into the stream . If the stream is headed by more whitespace than twenty bytes , we might fail to detect the content type . We should be ignoring this whitespace before attempting to detect the content type . This commit does that by ignoring all leading whitespace in an input stream before attempting to guess the content type . Relates # 32357
Docs : Allow snippets to have line continuation __EoT__ Currently , snippets in lists can not be rendered correctly as a console command because the console command requires a line continuation '+ ' . This allows snippets to have a line continuation between the snippet and the `` ` // CONSOLE `` ` . Example : `` ` * List Item : + [ source , js ] -- -- curl < something > -- -- + // CONSOLE `` `
INGEST : Fix ThreadWatchDog Throwing on Shutdown __EoT__ * # 32539 is caused by the fact that ThreadWatchDog.Default could throw on shutdown if the ThreadPool is interrupted while ` interruptLongRunningExecutions ` is in progress . This is a result of the watchdog not having a lifecycle of its own ( normally it terminates when the threadpool terminates ) . * We ca n't easily use ` org.elasticsearch.common.util.concurrent.EsRejectedExecutionException # isExecutorShutdown ` to catch this state the same way other components do since thatwould require adding the core lib to Grok as a dependency * Since we have no knowledge of the lifecycle in this compontent since we 're only passed the scheduler ` BiFunction ` I fixed this by only scheduling the watchdog when there 's actually registered threads in it . * I think using the patter of locking via two ` Atomic* ` values should not be much of a performance concern here under load since either the integer will be > 0 in this case ( because we have multiple Grok in parallel ) or the running state will be true because there likely was at least one thread registered when the watchdog ran and so the enqueing
Adding xpack.core.ml.datafeed to protocol.xpack.ml.datafeed __EoT__ Simple creation of configuration objects that reflect the core configuration objects for ML Datafeeds . - Validations were removed ( other than null checks ) - default values removed as well ( as they should be set server side ) - They are not wire transportable
Remove UpdateSettingsTestHelper class __EoT__ By making the ` settings ( ) ` method public on ` UpdateSettingsRequest ` ( I think it should have been in the first place ) we can get rid of this class entirely . Mock response objects are now constructed by parsing JSON without making the constructor public . Relates to # 29823
Remove RolloverIndexTestHelper __EoT__ This removes the ` RolloverIndexTestHelper ` class in favor of making a couple of getters publically accessible as well as custom building a response object using JSON parsing . Relates to # 29823
Remove ILM constructor hacks __EoT__ This commit removes the hacks associated with mocking Response objects . Rather than parse a wrapped byte array , the constructors for ` IndicesAliasesResponse ` and ` ResizeResponse ` are made public Relates to # 29823
[ Kerberos ] Use canonical host name with SPNEGO test __EoT__ The Apache Http components support for Spnego scheme uses the canonical hostname by default . On Centos , by default , there are other aliases like ` localhost.localdomain ` , ` localhost4 ` , ` localhost4.localdomain4 ` . This commit modifies where we resolve hostname to use ` getCanonicalHostName ` instead of ` getHostName ` and adds DelegationPermission to security policy for the alternate aliases of localhost . Closes # 32498
LOGGING : Upgrade to Log4J 2.11.1 __EoT__ * Upgrade to ` 2.11.1 ` to fix memory leaks in slow logger when logging large requests * This was caused by a bug in Log4J https : //issues.apache.org/jira/browse/LOG4J2-2269 and is fixed in ` 2.11.1 ` via https : //git-wip-us.apache.org/repos/asf ? p=logging-log4j2.git ; h=9496c0c * Fixes # 32537 * Fixes # 27300
Avoid NPE on shard changes action __EoT__ If a leader index is deleted while there is an active follower , the follower will send shard changes requests bound for the leader index . Today this will result in a null pointer exception because there will not be an index routing table for the index . A null pointer exception looks like a bug to a user so this commit addresses this by throwing an index not found exception instead .
Cross-cluster search : preserve cluster alias in shard failures __EoT__ When some remote clusters return shard failures as part of a cross-cluster search request , the cluster alias currently gets lost . As a result , if the shard failures are all caused by the same error , and against indices belonging to different clusters , but with the same index name , only one failure gets returned as part of the search response , meaning that failures are grouped by index name , ignoring the cluster alias . With this commit we make sure that ` ShardSearchFailure ` returns the cluster alias as part of the index name . Also , we set the fully qualfied index name when creating a ` QueryShardException ` . That way shard failures are grouped by cluster : index . Such fixes should cover at least most of the cases where either 1 ) the shard target is set but we do n't have the index in the cause ( we were previously reading it only from the cause that did not have the cluster alias ) 2 ) the shard target is missing but if the cause is a ` QueryShardException `
Adds ckb to the list of unsupported languages __EoT__ Adds ckb ( locale ckb-IQ ) to the list of unsupported languages for Kerberos tests . Reproduction line for when the issue manifested : `` ` ./gradlew : x-pack : plugin : security : test -Dtests.seed=3F588AADB5767BE1 -Dtests.class=org.elasticsearch.xpack.security.authc.kerberos.KerberosTicketValidatorTests -Dtests.method= '' testWhenKeyTabWithInvalidContentFailsValidation '' -Dtests.security.manager=true -Dtests.locale=ckb-IQ -Dtests.timezone=America/Guatemala `` `
SCRIPTING : Move Aggregation Scripts to their own context __EoT__ Same as # 32003 in motivation , handling another step of the todo . Also , handled another todo in ` BucketSelectorPipelineAggregator ` by moving ` params ` from being a field on the compiled script to being an input so that the new type ` BucketAggregationScript ` is stateless and can be reused in loops .
Painless : Use LocalMethod Map For Lookup at Runtime __EoT__ This modifies Def to use a Map < String , LocalMethod > to look up user-defined methods at runtime instead of writing constant methodhandles to do the reverse lookup . This creates a consistency between how LocalMethods are looked up at compile-time and run-time . This consistency will allow this code to be more maintainable moving forward . This will also allow FunctionReference to be cleaned up in a follow up PR .
[ ML ] Add ML result classes to protocol library __EoT__ This commit adds the ML results classes to the X-Pack protocol library used by the high level REST client . ( Other commits will add the config classes and stats classes . ) These classes : - Are publically immutable - Are privately mutable - this is perhaps not as nice as the config classes , but to do otherwise would require adding builders and the corresponding server-side classes that the old transport client used do n't have builders - Have little/no validation of field values beyond null checks - Are convertible to and from X-Content , but NOT wire transportable - Have lenient parsers to maximize compatibility across versions - Have the same class names and getter names as the corresponding classes in X-Pack core to ease migration for transport client users - Do n't reproduce all the methods that do calculations or transformations that the the corresponding classes in X-Pack core have
Suppress LicensingDocumentationIT.testPutLicense in release builds __EoT__ The testPutLicense test tries to put a license generated using snapshot keys into release cluster . This commit suppresses the test during the release builds . Closes # 32580
Suppress Wildfly test in FIPS JVMs __EoT__ Until # 32534 is fixed , this suppresses this failing test on FIPS JVMs , but allows the suite to pass and includes a dummy @ AwaitsFix test too .
ingest : move Dot Expander Processor doc to correct alpha sorted position __EoT__ Fixes the out of order Dot Expander Processor here : https : //www.elastic.co/guide/en/elasticsearch/reference/current/ingest-processors.html Before : < img width= '' 323 '' alt= '' image '' src= '' https : //user-images.githubusercontent.com/976291/42175978-fe22630e-7dec-11e8-9b5a-8f1b763eb869.png '' > After : < img width= '' 271 '' alt= '' image '' src= '' https : //user-images.githubusercontent.com/976291/42176000-1ab91350-7ded-11e8-8e5a-90b7a183a596.png '' > Note - no changes to documentation , just copy/paste . Also , successfully built the doc locally . The sort order is still not perfect , but at least the first letters are sorted correctly .
Introduce CCR stats endpoint __EoT__ This commit introduces the CCR stats endpoint which provides shard-level stats on the status of CCR follower tasks .
[ ML ] Add some ML config classes to protocol library __EoT__ This commit adds four ML config classes to the X-Pack protocol library used by the high level REST client . ( Other commits will add the remaining config classes , plus results and stats classes . ) These classes : - Are immutable - Have little/no validation of field values beyond null checks - Are convertible to and from X-Content , but NOT wire transportable - Have lenient parsers to maximize compatibility across versions - Have the same class names , member names and getter/setter names as the corresponding classes in X-Pack core to ease migration for transport client users - Do n't reproduce all the methods that do calculations or transformations that the the corresponding classes in X-Pack core have
[ TEST ] Split transport verification mode none tests __EoT__ This commit splits SecurityNetty4TransportTests in two methods one handling verification mode certificate and full and one handling verification mode none . This is done so that the second method can be muted in a FIPS 140 JVM where verification mode none can not be used .
Core : Move helper date formatters over to java time __EoT__ Some classes use internal date formatters , which now can be moved over to java time using the DateFormatters class . The same applies for a few test cases .
[ Rollup ] Remove builders from DateHistogramGroupConfig __EoT__ Same motivation as # 32507 but for the ` DateHistogramGroupConfig ` configuration object . This pull request also changes the format of the time zone from a Joda 's ` DateTimeZone ` to a simple ` String ` . It should help to port the API to the high level rest client and allows clients to not be forced to use the Joda Time library . Serialization is impacted but does not need a backward compatibility layer as DateTimeZone are serialized as String anyway . XContent also expects a String for timezone , so I found it easier to move everything to String but I 'm happy to have any feedback on this change . Related to # 29827
[ ML ] Add Detector config classes to protocol library __EoT__ This commit adds the Detector class and its dependencies to the X-Pack protocol library used by the high level REST client . ( Future commits will add the remaining config classes , plus results and stats classes . ) These classes : - Are immutable , with builders , but the builders do no validation beyond null checks - Are convertible to and from X-Content , but NOT wire transportable - Have lenient parsers to maximize compatibility across versions - Have the same class names , member names and getter/setter names as the corresponding classes in X-Pack core to ease migration for transport client users - Do n't reproduce all the methods that do calculations or transformations that the the corresponding classes in X-Pack core have
[ Rollup ] Remove builders from MetricConfig __EoT__ Same motivation as # 32507 but for the ` MetricConfig ` configuration object . Related to # 29827
Remove _xpack from CCR APIs __EoT__ For a new feature like CCR we will go without this extra layer of indirection . This commit replaces all /_xpack/ccr/_ ( \S+ ) endpoints by /_ccr/ $ 1 endpoints .
Add cluster UUID to Cluster Stats API response __EoT__ Resolves # 32205 . Adds ` cluster_uuid ` field to ` GET _cluster/stats ` REST API response .
Security : move User to protocol project __EoT__ The User class has been moved to the protocol project for upcoming work to add more security APIs to the high level rest client . As part of this change , the toString method no longer uses a custom output method from MetadataUtils and instead just relies on Java 's toString implementation .
SQL : Minor fix for javadoc __EoT__ Fixes https : //github.com/elastic/elasticsearch/issues/32553 . Reproduceable only with Java 11 jvm
Painless : Move Some Lookup Logic to PainlessLookup __EoT__ Renames existing methods in PainlessLookup . Adds lookupPainlessClass , lookupPainlessMethod , and lookupPainlessField to PainlessLookup . This consolidates the logic necessary to look these things up into a single place and begins the clean up of some of the nodes that were looking each of these things up individually . This also has the added benefit of improved consistency in error messaging .
Rename ILM , ILM endpoints and drop _xpack __EoT__ This commit does the following : - renames index-lifecycle plugin to ilm - modifies the endpoints to ilm instead of index_lifecycle - drops _xpack from the endpoints - drops a few duplicate endpoints
[ Rollup ] Remove builders from HistoGroupConfig __EoT__ Same motivation as # 32507 but for the ` HistoGroupConfig ` configuration object . Related to # 29827
Make index.lifecycle.name setting internal __EoT__ This commit makes the ` index.lifecycle.name ` setting internal an index , this means that the policy can only be set on the index creation , or with the specialized ` RestSetIndexLifecyclePolicy ` action . Relates to # 29823 @ colings86 I 'm not 100 % sure we should do as-is . You currently ca n't remove a policy from the index , unlike a setting ( which you could set to ` null ` to remove it ) we do n't currently have a way to do that , in order to delete a policy then you have to create a dummy policy and update the index to use it . Maybe someone can explain more of the background for why we originally wanted this to be an internal setting ? I think we should either add an API to remove the lifecycle policy from an index , or keep this as a dynamic setting , what do you think ?
org.elasticsearch.xpack.qa.sql.nosecurity.JdbcSqlSpecIT Fails on Upper and lower casing functions __EoT__ Build URL : `` ` http : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-unix-compatibility/os=amazon/2595 `` ` Reproduce commands : `` ` ./gradlew : x-pack : qa : sql : no-security : integTestRunner \ -Dtests.seed=5870E6CDF96A6756 \ -Dtests.class=org.elasticsearch.xpack.qa.sql.nosecurity.JdbcSqlSpecIT \ -Dtests.method= '' test { string-functions.testUpperCasingTheSecondLetterFromTheRightFromFirstName } '' \ -Dtests.security.manager=true \ -Dtests.locale=tr \ -Dtests.timezone=America/Dawson ./gradlew : x-pack : qa : sql : no-security : integTestRunner \ -Dtests.seed=5870E6CDF96A6756 \ -Dtests.class=org.elasticsearch.xpack.qa.sql.nosecurity.JdbcSqlSpecIT \ -Dtests.method= '' test { string-functions.testSelectInsertWithLcaseAndLengthWithOrderBy } '' \ -Dtests.security.manager=true \ -Dtests.locale=tr \ -Dtests.timezone=America/Dawson ./gradlew : x-pack : qa : sql : no-security : integTestRunner \ -Dtests.seed=5870E6CDF96A6756 \ -Dtests.class=org.elasticsearch.xpack.qa.sql.nosecurity.JdbcSqlSpecIT \ -Dtests.method= '' test { string-functions.testUpperCasingTheSecondLetterFromTheRightFromFirstNameWithOrderByAndGroupBy } '' \ -Dtests.security.manager=true \ -Dtests.locale=tr \ -Dtests.timezone=America/Dawson `` ` Errors looks to be expecting diacritics on the output but not finding them and instead finding a normalised character . e.g . : `` ` 14:46:33 FAILURE 0.08s | JdbcSqlSpecIT.test { string-functions.testUpperCasingTheSecondLetterFromTheRightFromFirstName } < < < FAILURES ! 14:46:33 > Throwable # 1 : org.junit.ComparisonFailure : Different result for column [ f ] , entry [ 2 ] expected : < Ala [ İ ] n > but was : < Ala [ I ] n > 14:46:33 > at __randomizedtesting.SeedInfo.seed ( [ 5870E6CDF96A6756 : D024D91757960AAE ]
fixed elements in array of produced terms __EoT__
INGEST : Enable default pipelines __EoT__ * Add ` default_pipeline ` index setting * Empty string pipeline argument is interpreted as no pipeline * closes # 21101
Remove cluster state initial customs __EoT__ This infrastructure was introduced in # 26144 and made obsolete in # 30743
[ TEST-FAILURE ] org.elasticsearch.client.documentation.LicensingDocumentationIT fails on release-tests CI __EoT__ Build URL : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+release-tests/855/console I have tried to reproduce this locally without any luck , although I was not able to run with ` -Dbuild.snapshot=false ` locally so this bug might be specific to release builds . Reproduce command ( as lifted from CI failure , locally I removed the ` -Dbuild.snapshot=false ` ) : `` ` REPRODUCE WITH : ./gradlew : client : rest-high-level : integTestRunner \ -Dtests.seed=6B866F493C3B7898 \ -Dtests.class=org.elasticsearch.client.documentation.LicensingDocumentationIT \ -Dtests.method= '' testPutLicense '' \ -Dtests.security.manager=true \ -Dbuild.snapshot=false \ -Dtests.jvm.argline= '' -Dbuild.snapshot=false '' \ -Dtests.locale=el-GR \ -Dtests.timezone=Africa/Khartoum `` ` It looks like the test is trying to put an invalid license and expecting ES to return an exception saying the license is valid but the server is returning that the licence is invalid . Maybe the way the test is creating an valid licence might be wrong : `` ` 1 > [ 2018-08-02T10:45:24,332 ] [ INFO ] [ o.e.c.d.LicensingDocumentationIT ] [ testPutLicense ] before test 2 > NOTE : leaving temporary files on disk at : /var/lib/jenkins/workspace/elastic+elasticsearch+master+release-tests/client/rest-high-level/build/testrun/integTestRunner/J0/temp/org.elasticsearch.client.documentation.LicensingDocumentationIT_6B866F493C3B7898-001 2 > NOTE : test params are : codec=Asserting ( Lucene70 ) : { } , docValues : {
[ ML ] Remove multiple_bucket_spans __EoT__ This commit removes the never released multiple_bucket_spans configuration parameter . This is now replaced with the new multibucket feature that requires no configuration .
[ ML ] Rename JobProvider to JobResultsProvider __EoT__ ` JobProvider ` is badly named as it used for gathering job results and has little to do with jobs themselves . This is anticipating the need for another class called ` JobProvider ` or similar that will actually get Jobs
Build : Add elastic maven to repos used by BuildPlugin __EoT__ This commit adds the elastic repo , alongside maven central , to any plugin using BuildPlugin . This is necessary now because the default distribution , which the test framework uses by default , is now only hosted on elastic maven . While inside the elasticsearch build this does not matter , those that build external plugins with our build-tools could have tests fail to find the distribution dependency .
Clarify the error message when a pipeline agg is used in the 'order ' parameter . __EoT__
[ test ] turn on host io cache for opensuse __EoT__ The hope is that this will resolve the problems with very slow io we're seeing on this box in # 30295 I think it 's worth trying this before moving the disk to the IDE controller ( see https : //github.com/elastic/infra/pull/5975 )
[ ML ] Improve error when no available field exists for rule scope __EoT__ Closes # 32542
[ ML ] Improve error for functions with limited rule condition support __EoT__ Closes # 32545
Painless : Clean Up PainlessField __EoT__ Updates PainlessField variable names to current naming scheme and removes extraneous variables .
Scripting : Conditionally use java time api in scripting __EoT__ This commit adds a boolean system property , ` es.scripting.use_java_time ` , which controls the concrete return type used by doc values within scripts . The return type of accessing doc values for a date field is changed to Object , essentially duck typing the type to allow co-existence during the transition from joda time to java time .
[ CI ] Connection issues in BasicDistributedJobsIT __EoT__ https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-windows-compatibility/1767/consoleFull Does not reproduce with : `` ` REPRODUCE WITH : gradlew : x-pack : plugin : ml : internalClusterTest \ -Dtests.seed=98AB1BDCBBCE6890 \ -Dtests.class=org.elasticsearch.xpack.ml.integration.BasicDistributedJobsIT \ -Dtests.security.manager=true \ -Dtests.locale=en-US \ -Dtests.timezone=UTC REPRODUCE WITH : gradlew : x-pack : plugin : ml : internalClusterTest \ -Dtests.seed=98AB1BDCBBCE6890 \ -Dtests.class=org.elasticsearch.xpack.ml.integration.BasicDistributedJobsIT \ -Dtests.security.manager=true \ -Dtests.locale=en-US \ -Dtests.timezone=UTC `` ` I found https : //github.com/elastic/elasticsearch/issues/29897 but this looks different in that I do n't see an assertion failure in the logs . Rather something in the test cluster formation seems to be getting off track . Cluster starts up , then one node is shut down ( [ 2018-07-19T10:11:05,813 ] [ INFO ] [ o.e.t.InternalTestCluster ] Closing random node [ node_t0 ] , looks like this is done on purpose ) . After that I see socket failures and refused connections . Not sure if they are related to the test running of some general test cluster problem : `` ` 15:12:15 1 > java.net.SocketException : Socket is closed 15:12:15 1 > at java.net.Socket.getOutputStream ( Socket.java:943 ) ~ [ ? :1.8.0_172 ] 15:12:15 1 > at org.elasticsearch.transport.MockTcpTransport $ MockChannel.sendMessage ( MockTcpTransport.java:412 ) [ framework-7.0.0-alpha1-SNAPSHOT.jar:7.0.0-alpha1-SNAPSHOT ] 15:12:15
testNoNodeNameWarning fails on Windows __EoT__ https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-windows-compatibility/1793/console `` ` 12:28:27 FAILURE 0.03s J2 | EvilLoggerTests.testNoNodeNameWarning < < < FAILURES ! 12:28:27 > Throwable # 1 : java.lang.AssertionError : 12:28:27 > Expected : a string ending with `` no_node_name/log4j2.properties '' 12:28:27 > but : was `` C : \Users\jenkins\workspace\elastic+elasticsearch+master+multijob-windows-compatibility\qa\evil-tests\build\resources\test\org\elasticsearch\common\logging\no_node_name\log4j2.properties '' `` ` NB forward slashes vs backslashes 👿 Introduced in # 31588 which is labelled backport-pending so this may propagate further back . I 'm suppressing the test for now .
Core : Minor size reduction for AbstractComponent __EoT__ This removes a constructor from ` AbstractComponent ` and ` AbstractLifecycleComponent ` that we were n't using and it switches the logger creation away from one of the ` Settings ` flavored methods which are no longer needed .
SQL : Added support for string manipulating functions with more than one parameter __EoT__ This PR is the second part fix for https : //github.com/elastic/elasticsearch/issues/31604 . It covers all the functions with more than one parameter : CONCAT , LEFT , RIGHT , REPEAT , POSITION , LOCATE , REPLACE , SUBSTRING , INSERT .
[ DOCS ] Reloadable Secure Settings __EoT__ This is the docs part of the opus on reloadable secure settings for plugins https : //github.com/elastic/elasticsearch/issues/29135 .
Watcher : Reenable HttpSecretsIntegrationTests # testWebhookAction test __EoT__ The error message mentioned in # 30094 does not link to to a cause by the test itself , as there are still inflight requests according to the circuit breaker . I ran this test class over 100k times on bare metal and could not reproduce it . I will reenable the test for now . Closes # 30094
[ Rollup ] Remove builders from TermsGroupConfig __EoT__ While working on adding the Create Rollup Job API to the high level REST client ( # 29827 ) , I noticed that the configuration objects like ` TermsGroupConfig ` rely on the ` Builder ` pattern in order to create or parse instances . These builders are doing some validation but the same validation could be done within the constructor itself or on the server side when appropriate . This pull request removes the builder for ` TermsGroupConfig ` , removes some other methods that I consider not really usefull once the ` TermsGroupConfig ` object will be exposed in the high level REST client . It also simplifies the parsing logic . Related to # 29827
Switch x-pack rolling restart tests to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack : qa : rolling-upgrade* ` projects to use the new versions .
NETWORKING : Fix Netty Leaks by upgrading to 4.1.28 __EoT__ * Upgrade to ` 4.1.28 ` since the problem reported in # 32487 is a bug in Netty itself ( see https : //github.com/netty/netty/issues/7337 ) * Fixed other leaks in test code that now showed up due to fixes improvements in leak reporting in the newer version * Needed to extend permissions for netty common package because it now sets a classloader at runtime after changes in https : //github.com/netty/netty/commit/63bae0956aeb42e875ad303a2281989ad92acbf2 * Adjusted forbidden APIs check accordingly * Closes # 32487
[ DOCS ] Small fixes in rule configuration page __EoT__ This PR adds a link and makes some small fixes to this page : https : //www.elastic.co/guide/en/elastic-stack-overview/master/ml-configuring-detector-custom-rules.html
Painless : Clean up PainlessMethod __EoT__ Renames and removes variables from PainlessMethod to follow the new naming convention . Generates methodtypes at compile-time instead of using a method at run-time . Moves write method to MethodWriter .
Build : Remove shadowing from benchmarks __EoT__ Removes shadowing from the benchmarks . It is n't *strictly* needed . We do have to rework the documentation on how to run the benchmark , but it still seems to work if you run everything through gradle .
SQL : Add test for handling of partial results __EoT__ Makes sure that partial results are rejected in the SQL mode . Closes # 32284
Changed ReindexRequest to use Writeable.Reader __EoT__ -- This is a pre-stage for adding the reindex API to the REST high-level-client -- Follows the pattern set in # 26315
fix no= > not typo __EoT__ Found a small typo when reading the docs
HLRC : Add delete watch action __EoT__ Relates # 29827
High-level client : fix clusterAlias parsing in SearchHit __EoT__ When using cross-cluster search through the high-level REST client , the cluster alias from each search hit was not parsed correctly . It would be part of the index field initially , but overridden just a few lines later once setting the shard target ( in case we have enough info to build it from the response ) . In any case , getClusterAlias returns ` null ` which is a bug . With this change we rather parse back clusterAliases from the index name , set its corresponding field and properly handle the two possible cases depending on whether we can or can not build the shard target object .
Use the determinant formula for calculating the orientation of a polygon __EoT__ The method for working out whether a polygon is clockwise or anticlockwise is mostly correct but does n't work in some rare cases such as the included test case . This PR changes it to determine the orientation from the direction of the cross product of two of the edges of the polygon at a point on its convex hull , which should work more reliably .
[ Kerberos ] Add missing javadocs __EoT__ This commit adds missing javadocs and fixes few where the build failed when using JDK 11 for compilation . Closes # 32461
[ Kerberos ] Remove Kerberos bootstrap checks __EoT__ This commit removes Kerberos bootstrap checks as they were more of validation checks and better done in Kerberos realm constructor than as bootstrap checks . This also moves one Kerberos realm per node check to where we initialize realms . This commit adds few validations which were missing earlier like missing read permissions on keytab file or if it is a directory to throw an exception with an error message .
ShardFollowNodeTask should fetch operation once __EoT__ Today ShardFollowNodeTask might fetch some operations more than once . This happens because we ask the leading for up to max_batch_count operations ( instead of the left-over size ) for the left-over request . The leading then can freely respond up to the max_batch_count , and at the same time , if one of the previous requests completed , we might issue another read request whose range overlaps with the response of the left-over request . Closes # 32453
Add high level rest client support for SetIndexLifecyclePolicy __EoT__ This adds HLRC support for the ILM operation of setting an index 's lifecycle policy . It also includes extracting and renaming a number of classes ( like the request and response objects ) as well as the addition of a new ` IndexLifecycleClient ` for the HLRC . This is a prerequisite to making the ` index.lifecycle.name ` setting internal only , because we require a dedicated REST endpoint to change the policy , and our tests currently set this setting with the REST client multiple places . A subsequent PR will change the setting to be internal and move those uses over to this new API . This misses some links to the documentation because I do n't think ILM has any documentation available yet . Relates to # 29827 and # 29823
Switch security to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack/plugin/security ` project to use the new versions .
Painless : Add PainlessConstructor __EoT__ PainlessMethod was being used as both a method and a constructor , and while there are similarities , there are also some major differences . This allows the reflection objects to be stored reducing the number of other pieces of data stored in a PainlessMethod as they are now redundant . This temporarily increases some of the code in FunctionRef and PainlessDocGenerator as they now differentiate between constructors and methods , BUT is also makes the code more maintainable because there are n't checks in several places anymore to differentiate .
update rollover to leverage write-alias semantics __EoT__ Updates Rollover to leverage the ability to preserve aliases and swap which is the write index . Historically , Rollover would swap which index had the designated alias for writing documents against . This required users to keep a separate read-alias that enabled reading against both rolled over and newly created indices , whiles the write-alias was being re-assigned at every rollover . With the ability for aliases to designate a write index , Rollover can be a bit more flexible with its use of aliases . Updates include : - Rollover validates that the target alias has a write index ( the index that is being rolled over ) . This means that the restriction that aliases only point to one index is no longer necessary . - Rollover explicitly ( and atomically ) swaps which index is the write-index by explicitly assigning the existing index to have ` is_write_index : false ` and have the newly created index have its rollover alias as ` is_write_index : true ` . This is only done when ` is_write_index : true ` on the write index . Default behavior of removing the alias from
Make various LifecycleSettings Settings internal __EoT__ These are only ever set internally during regular ILM execution , they do n't need to be set otherwise . A subsequent PR will work on adding a dedicated endpoint for the ` LIFECYCLE_NAME ` setting so it can be changed by a user ( and then marked as ` InternalIndex ` as well ) Relates to # 29823
Update Fuzzy Query docs to clarify default behavior re max_expansions __EoT__ Stating that the Fuzzy Query generates `` all possible '' matching terms is misleading , given that the query 's default behavior is to generate a maximum of 50 matching terms . Maybe it 's worthwhile to use one of those Warning boxes somewhere towards the top of the page to clarify this ? I suspect many users will read `` generates all possible matching terms '' and immediately begin using the query , expecting it to generate all possible terms _by default_ ( having done exactly that myself ) .
INGEST : Clean up Java8 Stream Usage __EoT__ * GrokProcessor : Rationalize the loop over the map to save allocations and indirection * IngestDocument : No need for the ` Stream ` - > loop magic for a simple ` addAll ( ) ` * KeyValueProcessor : Remove unnecessary Stream ( s ) usage when looping over a simple array *Also , pre-build execution instead of redundantly evaluating null checks and string concatenation ( for ` fieldPathPrefix ` )
Ensure KeyStoreWrapper decryption exceptions are handled __EoT__ This commit ensures that all possible Exceptions in KeyStoreWrapper # decrypt ( ) are handled . More specifically , in the case that a wrong password is used for secure settings , calling ` readX ` on the DataInputStream that wraps the CipherInputStream can throw an IOException . It also adds a test for loading a KeyStoreWrapper with a wrong password .
Do not expose hard-deleted docs in Lucene history __EoT__ Today when reading operation history in Lucene , we read all documents . However , if indexing a document is aborted , IndexWriter will hard-delete it ; we , therefore , need to exclude that document from Lucene history . This commit makes sure that we exclude aborted documents by using the hard liveDocs of a SegmentReader if there are deletes . Closes # 32269
Tests : Fix convert error tests to use fixed value __EoT__ The error tests for hex values previously used a random string of digits , but this could be a valid hex value . This commit changes these tests to use a fixed invalid hex value . closes # 32370
REST high-level client : parse back _ignored meta field __EoT__ ` GetResult ` and ` SearchHit ` have been adjusted to parse back the _ignored meta field whenever it gets printed out . Also expanded the test to make sure this is covered . Fixed also a small problem around highlighted fields in SearchHitTests .
Reject follow request if following setting not enabled on follower __EoT__ Today we do not check if the ` following_index ` setting of the follower is enabled or not when processing a follow-request . If that setting is disabled , the follower will use the default engine , not the following engine . This change checks and rejects such invalid follow requests . Relates # 30086
TEST : testDocStats should always use forceMerge __EoT__ Due to the recent change in LUCENE-8263 , we need to adjust the deletion ration to between 10 % to 33 % to preserve the current behavior of the test . However , we may need another refinement if soft-deletes is enabled as the actual deletes are different because of delete tombstones . This commit prefers to always execute forceMerge instead of adjusting the deletion ratio so that this test can focus on testing docStats . Closes # 32449
Painless : Add MethodType to PainlessMethod __EoT__ MethodType can be computed at compile-time rather than run-time . This removes the method that collects MethodType at run-time from a PainlessMethod since is it no longer necessary .
Remove reference to non-existent store type __EoT__ We removed the default_fs store type yet the docs still contain a reference to them . This commit addresses that by removing this reference , and changing a reference to this section of the docs to instead refer to mmapfs .
Fix ordering of bootstrap checks in docs __EoT__ In the section of the bootstrap checks docs for the maximum map count check , we refer to max size virtual memory check and explicitly call out the maximum size virtual memory check as being the previous point . However , this is not correct as the previous point is currently the max file size check . It does make sense for these two checks to be proximate to each other in the docs so this commit reorders the checks so that the maximum size virtual memory check indeed comes before the maximum map count check . This makes the sense in the maximum map count check correct .
Skips to next available action on missing step __EoT__ if policy update on index means current step no longer exists This change only updates the setPolicy for index to add this functionality . The update policy API will be changed in a follow up PR .
Validate source of an index in LuceneChangesSnapshot __EoT__ Today it 's possible to encounter an Index operation in Lucene whose _source is disabled , and _recovery_source was pruned by the MergePolicy . If it 's the case , we create a Translog # Index without source and let the caller validate it later . However , this approach is challenging for the caller . 1 . Deletes and No-Ops do n't allow invoking `` source ( ) '' method . The caller has to make sure to call `` source ( ) '' only on index operations . The current implementation in CCR does not follow this and fail to replica deletes or no-ops . 2 . It 's easier to reason if a Translog # Index always has the source .
Upgrade to Lucene-7.5.0-snapshot-608f0277b0 __EoT__ The main highlight is the removal of the ` reclaim_deletes_weight ` in the TieredMergePolicy . The es setting ` index.merge.policy.reclaim_deletes_weight ` is deprecated in this commit and the value is ignored . The new merge policy setting ` setDeletesPctAllowed ` should be added in a follow up .
[ Kerberos ] Avoid vagrant update on precommit __EoT__ This commit avoids dependency during compile on copy keytab to be present in the generated sources so precommit does not stall for updating vagrant box . Closes # 32387
Copy missing segment attributes in getSegmentInfo __EoT__ The index sort and the attributes map of a segment are not copied on committed segments that are not loaded by the internal or external searcher .
Switch x-pack/plugin to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack/plugin ` project to use the new versions .
Correcting a minor typo __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md # contributing-as-part-of-a-class ) for that .
Build : Stop double generating buildSrc pom __EoT__ When we added the ` java-gradle-plugin ` to ` buildSrc ` it added a second task to generate the pom that duplicates the publishing work that we configure in ` BuildPlugin ` . Not only does it dupliciate the pom , it creates a pom that is missing things like ` name ` and ` description ` which are required for publishing to maven central . This change disables the duplicate pom generation .
Switch x-pack full restart to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack : qa : full-cluster-restart ` project to use the new versions .
Release requests in cors handler __EoT__ There are two scenarios where a http request could terminate in the cors handler . If that occurs , the requests need to be released . This commit releases those requests .
Docs : Fix callouts in put license HL REST docs __EoT__
[ ML ] Consistent pattern for strict/lenient parser names __EoT__ Previously we had two patterns for naming of strict and lenient parsers . Some classes had CONFIG_PARSER and METADATA_PARSER , and used an enum to pass the parser type to nested parsers . Other classes had STRICT_PARSER and LENIENT_PARSER and used ternary operators to pass the parser type to nested parsers . This change makes all ML classes use the second of the patterns described above .
Update update-settings.asciidoc __EoT__ edited the documentation
Remove some dead code __EoT__ Removing some dead code or supressing warnings where apropriate . Most of the time the variable tested for null is dereferenced earlier or never used before .
Introduce index store plugins __EoT__ Today we allow plugins to add index store implementations yet we are not doing this in our new way of managing plugins as pull versus push . That is , today we still allow plugins to push index store providers via an on index module call where they can turn around and add an index store . Aside from being inconsistent with how we manage plugins today where we would look to pull such implementations from plugins at node creation time , it also means that we do not know at a top-level ( for example , in the indices service ) which index stores are available . This commit addresses this by adding a dedicated plugin type for index store plugins , removing the index module hook for adding index stores , and by aggregating these into the top-level of the indices service . Relates # 32267
Make sure _forcemerge respects ` max_num_segments ` . __EoT__ An upcoming [ Lucene change ] ( https : //issues.apache.org/jira/browse/LUCENE-7976 ) will make TieredMergePolicy respect the maximum merged segment size all the time , meaning it will possibly not respect the ` max_num_segments ` parameter anymore if the shard is larger than the maximum segment size . This change makes sure that ` max_num_segments ` is respected for now in order to give us time to think about how to integrate this change , and also to delay it until 7.0 as this might be a big-enough change for us to wait for a new major version .
TESTS : Fix Buf Leaks in HttpReadWriteHandlerTests __EoT__ * Release all ref counted things that were n't getting properly released * Mannually force channel promise to be completed because mock channel does n't do it and it prevents one ` release ` call in ` io.netty.channel.ChannelOutboundHandlerAdapter # write ` from firing * Now passes a few thousand iterations with leak detection set to paranoid
Only enforce password hashing check if FIPS enabled __EoT__ This commit modifies the FIPS password hashing algorithm check to only be executed if FIPS mode is enabled .
Remove `` best_compression '' option from the ForceMergeAction __EoT__ This option is only settable while the index is closed , and does n't make sense for a force merge . Relates to # 29823
Painless : Fix Documentation Links __EoT__ Fix the context documentation to use the ref and xpack-ref from versions instead of custom local ones .
Painless : Decouple PainlessLookupBuilder and Whitelists __EoT__ Mostly a mechanical change . This moves all code related to the whitelists to a WhitelistsToPainlessLookup class so that PainlessLookupBuilder has no dependencies on the whitelists to build a PainlessLookup . This allows for Painless to create a Lookup from other sources moving forward which may have practical applications in both testing and jar separation shortly .
[ DOCS ] Adds recommendation for xpack.security.enabled __EoT__ This PR adds a tip to the xpack.security.enabled setting , recommending that it be set explicitly rather than relying on the default value ( which changes based on subscription level ) .
[ TEST ] Fix failure due to exception message in java11 __EoT__ @ cbuescher looks like CI turned up another variation of # 32036 , this time in rollup tests : ) Changed the test to be less restrictive and only look for the classes we care about , so that we do n't fail on java 11 with more verbose exception messages .
[ ML ] [ DOCS ] Add documentation for detector rules and filters __EoT__
Add opaque_id to index audit logging __EoT__ Logs opaque_id if it is available with all audit log messages using index-based audit log . Closes # 31521
Number of utilities for writing gradle integration tests __EoT__ These are collected from a number of open PRs and are required to improove existing and write more readable future tests . I am extracting them to their own PR hoping to be able to merge and use them sooner .
Determine the minimum gradle version based on the wrapper __EoT__ This is restrictive and forces users of the plugin to move together with us , but without integration tests it 's close to impossible to make sure that the claimed compatability is really there . If we do want to offer more flexibility , we should add those tests first . @ nik9000 this is the promised follow-up to # 32200
Enable FIPS JVM in CI __EoT__ Now that # 31666 and # 31989 are merged we can run our tests in fips JVM . This commit enables us to run tests on a Java 8 JVM using BouncyCastleFIPS as a Security Provider .
Networking : Fix test leaking buffer __EoT__ * Test ` handler ` must release buffer the same way the replaced ` org.elasticsearch.http.netty4.Netty4HttpRequestHandler # channelRead0 ` releases it ( our test handler replaces it as the last pipeline item under `` handler '' ) * Closes # 32289
Painless : Update More Methods to New Naming Scheme __EoT__ This finishes the updating the methods in the PainlessLookupBuilder to the new naming scheme . Mechanical change . Methods include the ones used for copying members in the inheritance hierarchy , calculating shortcuts , and setting the functional interface .
Ingest : Support integer and long hex values in convert __EoT__ This commit adds checks for hex formatted strings in the convert processor , allowing strings like ` 0x1 ` to be parsed as integer ` 1 ` . closes # 32182
Rest HL client : Add put license action __EoT__ Relates # 29827
Add ERR to ranking evaluation documentation __EoT__ This change adds a section about the Expected Reciprocal Rank metric ( ERR ) to the Ranking Evaluation documentation .
Introduce Application Privileges with support for Kibana RBAC __EoT__ This commit introduces `` Application Privileges '' to the X-Pack security model . Application Privileges are managed within Elasticsearch , and can be tested with the _has_privileges API , but do not grant access to any actions or resources within Elasticsearch . Their purpose is to allow applications outside of Elasticsearch to represent and store their own privileges model within Elasticsearch roles . Access to manage application privileges is handled in a new way that grants permission to specific application names only . This lays the foundation for more OLS on cluster privileges , which is implemented by allowing a cluster permission to inspect not just the action being executed , but also the request to which the action is applied . To support this , a `` conditional cluster privilege '' is introduced , which is like the existing cluster privilege , except that it has a Predicate over the request as well as over the action name . Specifically , this adds - GET/PUT/DELETE actions for defining application level privileges - application privileges in role definitions - application privileges in the has_privileges API - changes to the cluster permission
Build : Shadow x-pack : protocol into x-pack : plugin : core __EoT__ This bundles the x-pack : protocol project into the x-pack : plugin : core project because we 'd like folks to consider it an implementation detail of our build rather than a separate artifact to be managed and depended on . It is now bundled into both x-pack : plugin : core and client : rest-high-level . To make this work I had to fix a few things . Firstly , I had to make PluginBuildPlugin work with the shadow plugin . In that case we have to bundle only the ` shadow ` dependencies and the shadow jar . Secondly , every reference to x-pack : plugin : core has to use the ` shadow ` configuration . Without that the reference is missing all of the un-shadowed dependencies . I tried to make it so that applying the shadow plugin automatically redefines the ` default ` configuration to mirror the ` shadow ` configuration which would allow us to use bare project references to the x-pack : plugin : core project but I could n't make it work . It 'd *look* like it works
[ Kerberos ] Add Kerberos authentication support __EoT__ This commit adds support for Kerberos authentication with a platinum license . Kerberos authentication support relies on SPNEGO , which is triggered by challenging clients with a 401 response with the ` WWW-Authenticate : Negotiate ` header . A SPNEGO client will then provide a Kerberos ticket in the ` Authorization ` header . The tickets are validated using Java 's built-in GSS support . The JVM uses a vm wide configuration for Kerberos , so there can be only one Kerberos realm . This is enforced by a bootstrap check that also enforces the existence of the keytab file . In many cases a fallback authentication mechanism is needed when SPNEGO authentication is not available . In order to support this , the DefaultAuthenticationFailureHandler now takes a list of failure response headers . For example , one realm can provide a ` WWW-Authenticate : Negotiate ` header as its default and another could provide ` WWW-Authenticate : Basic ` to indicate to the client that basic authentication can be used in place of SPNEGO . In order to test Kerberos , unit tests are run against an in-memory KDC that is
Register ERR metric with NamedXContentRegistry __EoT__ This adds the ERR metric to the provided xContent parsers in the module and the high level rest client registry . Also adding integration tests to make sure the metric is correctly registered and usable from the client .
[ CI ] Reactivate 3rd party tests on CI __EoT__ Fixes broken build for third-party tests Similar to # 31919 Relates # 31918 / Closes https : //github.com/elastic/infra/issues/6085 Some recent builds of this job that failed this way https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+third-party-tests/29/ https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+third-party-tests/28/ https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+third-party-tests/27/
[ DOCS ] Rollup Caps API incorrectly mentions GET Jobs API __EoT__ Tiny change in rollup caps docs which refers to the wrong API
Consistent encoder names __EoT__ This commit updates encoder names to be consistent within documentation and align with snake casing convention .
Add WeightedAvg metric aggregation __EoT__ WIP , but putting this up to see how @ colings86 feels about the MultiValueSource stuff . Still needs loads of tests , comments and documentation . Notable changes in this PR : - A new MultiValueSource and associated classes has been added . This allows aggs to define multiple sources of values , as well as define a script , format , multi-value mode , etc for each independently - The old MultiValueSource and related kin ( from Matrix Agg module ) are renamed to ` ArrayValueSource ` because it takes multiple fields in an array . This was done because I could n't find a good way to refactor the matrix aggs to use the new multi-value style , but did n't want to leave the name the same ( and it also caused conflict issues ) . ~A new overload for ` MultiValueMode ` was added . I wanted to reuse the capabilities of ` MultiValueMode ` , but all the existing selectors always returned ` true ` for ` advanceDoc ( ) ` and set a default value . I wanted the normal ` advanceDoc ( ) ` behavior , but
Switch monitoring to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack/plugin/monitoring ` project to use the new versions .
Rename ranking evaluation ` quality_level ` to ` metric_score ` __EoT__ The notion of `` quality '' seems to be a somewhat overloaded term in the search ranking evaluation context . Its usually used to decribe certain levels of `` good '' vs. `` bad '' of a seach result wrt . the user needs . We currently report the result of the evaluation metric calculation as ` quality_level ` which I find a bit missleading now . This changes it to something more neutral like ` metric_score ` .
Add new permission for JDK11 to load JAAS libraries __EoT__ Hadoop 's security model uses the OS level authentication modules to collect information about the current user . In JDK 11 , the UnixLoginModule makes use of a new permission to determine if the executing code is allowed to load the libraries required to pull the user information from the OS . This PR adds that permission and re-enables the tests that were previously failing when testing against JDK 11 . Fixes # 31498 . Tagging this as Core/Build for issue parity .
specify subdirs of lib , bin , modules in package __EoT__ Explicitly include all subdirectories of these folders in /usr/share/elasticsearch in package distributions so that they are managed by the package manager . This change does really have an effect in the 7.x series , where there are no subdirectories in bin , and we were already doing this in lib and modules . It does have an effect in the 6.x series where the bin/x-pack subdirectory was not previously tracked by the package manager and could be left behind on removal in rpm distributions . I tried to do this in a more graceful way but my gradle-fu was not strong enough .
add qa project for running ILM tests against security __EoT__ add QA project for running ILM tests against security This is a bare-bones skeleton for running existing yaml tests with security enabled . Additional tests which test users and roles should follow
Switch x-pack : plugin : core to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` x-pack : plugin : core ` project to use the new versions .
Painless : Clean up add methods in PainlessLookup __EoT__ This is largely mechanical change that cleans up the addConstructor , addMethod , and addFields methods in PainlessLookup . Changes include renamed variables , better error messages , and some minor code movement to make it more maintainable long term .
CCE when re-throwing `` shard not available '' exception in TransportShardMultiGetAction __EoT__ ClassCastException can be thrown by callers of TransportActions.isShardNotAvailableException ( e ) as e is not always an instance of ElasticSearchException fixes # 32173
Add new fields to monitoring template for Beats state __EoT__ New data is reported from Beats to the monitoring endpoint . This PR adds the template change necessary for it . See https : //github.com/elastic/beats/issues/7521 for more details . Queue data is skipped for now as implementation is not finished yet . Note : This PR will have to be backported .
CCR : Fix incorrect read request completion condition __EoT__ Today we consider a read request is exhausted if ` from_seqno ` is equal to or greater than the ` max_required_seqno ` . However , if we stop when ` from_seqno ` equals to the ` max_required_seqno ` , we will miss an operation whose seqno is ` max_required_seqno ` because that operation was not seen yet .
Improve message when JAVA_HOME not set __EoT__ Offer a hint about the Gradle daemon and link to issue for details . closes # 31399
[ CCR ] Add random shard follow task test __EoT__ Added a shard follow task unit tests that process random generated shard changes api responses and assert operations are processed as expected .
[ TEST ] improve REST high-level client naming conventions check __EoT__ Check the deprecated methods are effectively deprecated . Also compare the class rather than their names when checking argument types .
[ DOCS ] Clarified that you must remove X-Pack plugin when upgrading __EoT__ Related to https : //github.com/elastic/stack-docs/pull/82
Remove BouncyCastle dependency from runtime __EoT__ This commit introduces a new project that builds a Jar of the classes that have a dependency on BouncyCastle and puts it in a subdirectory of lib ( /tools/security-cli ) along with the BouncyCastle jars . This directory is then passed in the ES_ADDITIONAL_CLASSPATH_DIRECTORIES of the CLI tools that use these classes . BouncyCastle is removed as a runtime dependency ( remains as a compileOnly one ) from x-pack core and x-pack security .
Fix not waiting for Netty ThreadDeathWatcher in IT ( # 31758 ) __EoT__ backport of # 31758
[ Tests ] Adapt QueryStringQueryBuilderTests expectations __EoT__ With the introduction of field aliases , the toQuery ( ) method now can also return BlendedTermQuery . Added this to the list of expected query classes . Closes # 32234
MINOR : Remove unused ` IndexDynamicSettings ` __EoT__ Not used anywhere ever since 04045a072fbdbf3a0b1ec7d8271c8a13000e75d1
[ ML ] Use default request durability for .ml-state index __EoT__ The initial decision to use async durability was made a long time ago for performance reasons . That argument no longer applies and we prefer the safety of request durability . Additionally this setting has caused a number of difficult to diagnose test failures
[ CCR ] Add more unit tests for shard follow task __EoT__ The added tests are based on specific scenarios as described in the test plan . Before this change the ShardFollowNodeTaskTests contained more random like tests , but these have been removed and in a followup pr better random tests will be added in a new test class as is described in the test plan .
Dependencies : Upgrade to joda time 2.10 __EoT__ Changelog : http : //www.joda.org/joda-time/changes-report.html Reviewers Note : I intent to backport down to 6.x branch . Please veto as part of the review if you disagree .
Remove aliases resolution limitations when security is enabled __EoT__ Resolving wildcards in aliases expression is challenging as we may end up with no aliases to replace the original expression with , but if we replace with an empty array that means _all which is quite the opposite . Now that we support and serialize the original requested aliases , whenever aliases are replaced we will be able to know what was initially requested . MetaData # findAliases can then be updated to not return anything in case it gets empty aliases , but the original aliases were not empty . That means that empty aliases are interpreted as _all only if they were originally requested that way . Relates to # 31516
TESTS : Check for Netty resource leaks __EoT__ * Enabled advanced leak detection when loading ` EsTestCase ` * Added custom ` Appender ` to collect leak logs and check for logged errors in a way similar to what is done for the ` StatusLogger ` * Fixes # 20398 -- -- -- -- - I manually verified this works by adding a ` .retain ( ) ` call in ` org.elasticsearch.transport.netty4.Netty4MessageChannelHandler # channelRead ` .
Require Gradle 4.9 as minimum version __EoT__ Do the check in the build plugin as well to be more informative to users of build-tools . We use APIs specific to Gradle 4.9 so earlier will not work . Without this change users of build-tools might get an exception from which it 's not immediately obvious what the problem is .
Access SSL contexts using names instead of Settings __EoT__ Historically we have loaded SSL objects ( such as SSLContext , SSLIOSessionStrategy ) by passing in the SSL settings , constructing a new SSL configuration from those settings and then looking for a cached object that matches those settings . The primary issue with this approach is that it requires a fully configured Settings object to be available any time the SSL context needs to be loaded . If the Settings include SecureSettings ( such as passwords for keys or keystores ) then this is not true , and the cached SSL object can not be loaded at runtime . This commit introduces an alternative approach of naming every cached ssl configuration , so that it is possible to load the SSL context for a named configuration ( such as `` xpack.http.ssl '' ) . This means that the calling code does not need to have ongoing access to the secure settings that were used to load the configuration . Resolves : # 30344
Detect old trial licenses and mimic behaviour __EoT__ Prior to 6.3 a trial license default to security enabled . Since 6.3 they default to security disabled . If a cluster is upgraded from < 6.3 to > 6.3 , then we detect this and mimic the old behaviour with respect to security .
Painless : Simplify Naming in Lookup Package __EoT__ This removes some extraneous naming syntax and makes clear the meaning of certain naming conventions without ambiguities ( stricter ) within the lookup package . Purely mechanical change . Note this does not cover a large portion of the PainlessLookupBuilder and PainlessLookup yet as there are several more follow up PRs for these incoming .
add support for write index resolution when creating/updating documents __EoT__ This commit introduces a new option to IndicesOptions that requires a write index to exist and then uses this option for index/update requests . Get requests ignore the write index .
add ILM ShrinkAction IT __EoT__ - adds integration test for shrink action - nit : expands phases used by allocate/replicas to include ` cold `
ECS Task IAM profile credentials ignored in repository-s3 plugin __EoT__ ECS Task IAM profile credentials ignored in repository-s3 plugin Closes # 26913 Based on PR # 31918 ` EC2ContainerCredentialsProviderWrapper ` - utilises IAM role for a task - both relative to ` http : //169.254.170.2 ` and absolute + fail over to ` InstanceProfileCredentialsProvider ` that is currently in use . provider relies on **environment variables** common to containers
Rest HL client : Add put watch action __EoT__ Relates # 29827 To discuss : This implementation behaves like the current transport client , that you basically can not configure a Watch POJO representation as an argument to the put watch API , but only a bytes reference . You can use the the ` WatchSourceBuilder ` from the ` org.elasticsearch.plugin : x-pack-core ` dependency to build watches . This commit also changes the license type to trial , so that watcher is available in high level rest client tests . /cc @ hub-cap
Build : Remove pom generation for plugin zip files __EoT__ In 1.x and 2.x , plugins were published to maven and the plugin installer downloaded them from there . This was later changed to install from the download service , and in 5.0 plugin zips were no longer published to maven . However , the build still currently produces an unused pom file . This is troublesome in the special case when the main jar of a plugin needs to be published ( and thus needs a pom file of the same name ) . closes # 31946
Fix rollup on date fields that do n't support epoch_millis __EoT__ The rollup indexer uses a range query to select the next page of results based on the last time bucket of the previous round and the ` delay ` configured on the rollup job . This query uses the ` epoch_millis ` format implicitly but does n't set the ` format ` . This result in errors during the rollup job if the field definition does n't allow this format . It can also miss documents if the format is not accepted but another format in the field definition is able to parse the query ( e.g . : ` epoch_second ` ) . This change ensures that we use ` epoch_millis ` as the only format to parse the rollup range query .
Introduce a Hashing Processor __EoT__ It is useful to have a processor similar to https : //www.elastic.co/guide/en/logstash/6.0/plugins-filters-fingerprint.html in Elasticsearch . A processor that leverages a variety of hashing algorithms to create cryptographically-secure one-way hashes of values in documents . supersedes https : //github.com/elastic/elasticsearch/issues/30790 TODO : - [ x ] rest tests maybe follow-up PR : add documentation https : //github.com/elastic/elasticsearch/issues/31694
Adjust SSLDriver behavior for JDK11 changes __EoT__ This is related to # 32122 . A number of things changed related to adding TLS 1.3 support in JDK11 . Some exception messages and other SSLEngine behavior changed . This commit fixes assertions on exception messages . Additionally it identifies two bugs related to how the SSLDriver behaves in regards to JDK11 changes . Finally , it mutes a tests until correct behavior can be identified . There is another open issue for that muted test ( # 32144 ) .
[ test ] use randomized runner in packaging tests __EoT__ Use the randomized runner from the test framework and add some basic logging to make the packaging tests behave more similarly to how we use junit in the rest of the project
Add support for field aliases . __EoT__ Closes # 23714 . Merges feature branch tracked in # 31372 .
Painless : Clean up addPainlessClass __EoT__ This change cleans up the addPainlessClass methods by doing the following things : * Rename many variable names to match the new conventions described in the JavaDocs for PainlessLookup * Decouples Whitelist.Class from adding a PainlessClass directly * Adds a second version of addPainlessClass that is intended for use to add future defaults in a follow PR This change also fixes the method and field caches by storing Classes instead of Strings since it would technically be possible now that the whitelists are extendable to have different Classes with the same name . It was convenient to add this change together since some of the new constants are shared . Note the changes are largely mechanical again where all the code behavior should remain the same .
Call setReferences ( ) on custom referring tokenfilters in _analyze __EoT__ When building custom tokenfilters without an index in the _analyze endpoint , we need to ensure that referring filters are correctly built by calling their # setReferences ( ) method Fixes # 32154
Fix BwC Tests looking for UUID in Index Stats Pre 6.4 __EoT__ * UUID field was added for # 31791 and only went into 6.4 and 7.0 * Fixes # 32119
Improve docs for search preferences __EoT__ Today it is unclear what guarantees are offered by the search preference feature , and we claim a guarantee that is stronger than what we really offer : > A custom value will be used to guarantee that the same shards will be used > for the same custom value . This commit clarifies this documentation . Forward-port of # 32098 to ` master ` .
Fix CP for namingConventions when gradle home has spaces __EoT__ Closes # 31736 . Probably not Windows specific , just not common to have spaces on Linux . Thanks for reporting it @ astefan !
Fix ` range ` queries on ` _type ` field for singe type indices __EoT__ With the introduction of single types in 6.x , the ` _type ` field is no longer indexed , which leads to certain queries that were working before throw errors now . One such query is the ` range ` query , that , if performed on a single typer index , currently throws an IAE since the field is not indexed . This change adds special treatment for this case in the TypeFieldMapper , comparing the range queries lower and upper bound to the one existing type and either returns a MatchAllDocs or a MatchNoDocs query . Relates to # 31632 Closes # 31476
Remove versionType from translog __EoT__ With the introduction of sequence number , we no longer use versionType to resolve out of order collision in replication and recovery requests . This PR removes removes the versionType from translog . We can only remove it in 7.0 because it is still required in a mixed cluster between 6.x and 5.x .
Switch distribution to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` distribution/archives/integ-test-zip ` project to use the new versions .
Painless : Add PainlessClassBuilder __EoT__ Several pieces of data in PainlessClass can not be passed in at the time the PainlessClass is created so it must be `` frozen '' after all the data is collected . This means PainlessClass is currently serving two functions as both a builder and a set of data . This separates the two pieces into clearly distinct values . This change also removes the PainlessMethodKey in favor of a simple String . The goal is to have the painless method key be completely internal to the PainlessLookup eventually and this simplifies the way there . Note that this was added since PainlessClass and PainlessClassBuilder were already being changed instead of a follow up PR .
Build : Make additional test deps of check __EoT__ This commit moves additional unit test runners from being dependencies of the test task to dependencies of check . Without this change , reproduce lines are incorrect due to the additional test runner not matching any of the reproduce class/method info . closes # 31964
Disable C2 from using AVX-512 on JDK 10 __EoT__ The C2 compiler in JDK 10 appears to have an issue compiling to AVX-512 instructions ( on hardware that supports such ) . As a workaround , this commit adds a JVM flag on JDK 10+ to disable the use of AVX-512 instructions until a fix is introduced to the JDK . Instead , we use a flag to enable AVX and AVX2 only . Note : Based on my reading of the C2 code , this flag does not appear to have any impact on hardware that does not support AVX2 . I have tested this manually on an Intel Atom C2538 processor that supports neither AVX nor AVX2 . I have also tested this manually on an Intel i5-3317U processor that supports AVX but not AVX2 . Relates # 31425
Build : Move shadow customizations into common code __EoT__ Moves the customizations to the build to produce nice shadow jars and javadocs into common build code , mostly BuildPlugin with a little into the root build.gradle file . This means that any project that applies the shadow plugin will automatically be set up just like the high level rest client : * The non-shadow jar will not be built * The shadow jar will not have a `` classifier '' * Tests will run against the shadow jar * Javadoc will include all of the shadowed classes * Service files in ` META-INF/services ` will be merged
Painless : Fix Bug with Duplicate PainlessClasses __EoT__ When building the PainlessMethods and PainlessFields they stored a reference to a PainlessClass . This reference was prior to `` freezing '' the PainlessClass so the data was both incomplete and mutable . This has been replaced with a target java class instead since the PainlessClass is accessible through a java class now and it requires no special modifications to get around a chicken and egg issue .
Docs : Fix missing example script quote __EoT__ it seems lost right quote
[ CCR ] Initial replication group based tests __EoT__ Tests shard follow task in the context of a leader and follower ReplicationGroup , in order to test how the shard follow logic reacts to certain shard related failure scenarios . More tests will need to be added , but this indicates what changes need to be made in order to support these tests .
[ ML ] Wait for aliases in multi-node tests __EoT__ Closes # 32034 ` MlJobIT . testDeleteJobAfterMissingAliases ` fails occasionally with a ` index_not_found_exception ` when checking the job aliases exist immediately after creating a job . The test was robust on single nodes but after switching to 3 node test clusters the new aliases may not be immediately visible . This change waits for them to appear . Additionally this adds an ` awaitBusy ` to ` RestoreModelSnapshotIT.test ` for the case where a ` ForecastRequestStats ` is not up to date on a replica
Ensure to release translog snapshot in primary-replica resync __EoT__ We create a translog snapshot inside the resync method , and that snapshot will be closed by the resync listener . However , if the resync method throws an exception before the resync listener is initialized , the translog snapshot wo n't be released . Closes # 32030
Replace TokenizerFactory with Supplier __EoT__ Handles TODOs from https : //github.com/elastic/elasticsearch/pull/24869 * Replaces all occurences of TokenizerFactory with ` Supplier < Tokenizer > ` * Remove unused parameter from constructor
Relax TermVectors API to work with textual fields other than TextFieldType __EoT__ When working on a new plugin for an `` annotated_text '' field type I discovered the termvectors API has a hard-coded assumption that ` TextFieldType ` is the only sort of field that can contain text . This assumption also impacts core 's existing ` PhraseFieldType ` . This change shifts up a level in the class hierarchy to allow subclasses of ` StringFieldType ` Closes # 31902
Updates the build to gradle 4.9 __EoT__ There are fixes to the dependency report , most importantly for us , it still works even if ` failOnVersionConflict ` would fail the build .
Check that client methods match API defined in the REST spec __EoT__ We have been encountering name mismatches between API defined in our REST spec and method names that have been added to the high-level REST client . We should check this automatically to prevent futher mismatches , and correct all the current ones . This commit adds a test for this and corrects the issues found by it .
Add exclusion option to ` keep_types ` token filter __EoT__ Currently the ` keep_types ` token filter includes all token types specified using its ` types ` parameter . Lucenes TypeTokenFilter also provides a second mode where instead of keeping the specified tokens ( include ) they are filtered out ( exclude ) . This change exposes this option as a new ` mode ` parameter that can either take the values ` include ` ( the default , if not specified ) or ` exclude ` . Closes # 29277
[ Test ] Modify assert statement for ssl handshake __EoT__ There have been changes in error messages for ` SSLHandshakeException ` in Java11 . This has caused a failure in our tests . This commit modifies test verification to assert on exception type of class ` SSLHandshakeException ` . There was another issue in Java11 which caused NPE . The bug has now been fixed on Java11 - early access build 22 . Bug Ref : https : //bugs.java.com/bugdatabase/view_bug.do ? bug_id=8206355 Enable the skipped tests due to this bug . Testing done locally with early access build 22 . Closes # 31940
Painless : Move and Rename Several Methods in the lookup package __EoT__ Mechanical change . Moves several shared static methods into a new PainlessLookupUtility class . These are used by both PainlessLookupBuilder and PainlessLookup along with several of the node classes for conversion between type names and types and java classes to painless classes .
Bypass highlight query terms extraction on empty fields __EoT__ Dealing with empty fields in the highlight phase can slow down the query because the query terms extraction is done independently on each field . This change shortcuts the highlighting performed by the unified highlighter for fields that are not present in the document . In such cases there is nothing to higlight so we do n't need to visit the query to build the highligh builder .
Switch many non-x-pack , non-qa to new style requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes most of the calls not in X-Pack or ` qa ` to their new versions .
[ Rollup ] Add new capabilities endpoint based on concrete rollup indices __EoT__ ~This adds a ` key ` query string parameter to the GetRollupCaps API , which allows the user to specify how they would like the capabilities grouped at the top level.~ ~The default behavior is as before : grouping by index pattern . But if the user specifies ` key : rollup_index ` , it groups the capabilities by the concrete rollup index where the rollups are stored . The rest of the response is unchanged from before ( shows a list of all the jobs in that index , their config , etc ) ~ This introduces a new GetRollupIndexCaps API which allows the user to retrieve rollup capabilities of a specific rollup index ( or index pattern ) . This is distinct from the existing RollupCaps endpoint ; it 's a subtle but distinct difference . - Multiple jobs can be stored in multiple indices and point to a single target data index pattern ( ` logstash-* ` ) . The existing API finds capabilities/config of all jobs matching that data index pattern . - One rollup index can hold data from multiple jobs ,
SQL : allow LEFT and RIGHT as function names __EoT__ Due to the way ANTLR works , any declared tokens need to be accounted for manually inside function names ( otherwise a different rule gets applied ) . Fix # 32046
[ test ] turn on host io cache for opensuse __EoT__ The hope is that this will resolve the problems with very slow io we're seeing on this box in # 30295 I think it 's worth trying this before moving the disk to the IDE controller ( see https : //github.com/elastic/infra/pull/5975 )
Watcher : Store username on watch execution __EoT__ There is currently no way to see what user executed a watch . This commit adds the decrypted username to each execution in the watch history , in a new field executed_by . Closes # 31772
[ Docs ] Use correct formatting for links __EoT__ Looks like someone forgot to format these as links .
Painless : Separate PainlessLookup into PainlessLookup and PainlessLookupBuilder __EoT__ Purely mechanical change that moves all the code required to build a PainlessLookup from a List of whitelists into a PainlessLookupBuilder . Moved the marker def class as a top level class for use by both .
Scripting : Remove Dead Code from Painless Module __EoT__ Neither this method nor the removed class are used anymore .
Consistent algo in TransportChangePasswordActionTests __EoT__ Ensure that the same algorithm is used for settings and change password requests for consistency , even if we do not expext to reach the code where the algorithm is checked for now . Completes a7eaa409e804f218aa06fd02d9166b9a5998b48a
[ Rollup ] Fix duplicate field names in test __EoT__ This commit ensures that random field names do not clash with the explicit field names set by the tests . Closes # 32067
[ Tests ] Fix failure due to changes exception message __EoT__ Java 11 seems to get more verbose on the ClassCastException we check for in SearchDocumentationIT . This changes the test from asserting the exact exception message to only checking the two classes involved are part of the message . Closes # 32029
Remove unused params from SSource and Walker __EoT__ The `` source '' field in SSource seems unused . If removed , it can also be removed from the ctor , which in turn makes is possible to delete the sourceText in the Walker class .
Cleanup Duplication in ` PainlessScriptEngine ` __EoT__ * Extract duplicate building of compiler settings to method * Remove dead method params + dead constant in ` ScriptProcessor `
SCRIPTING : Remove unused MultiSearchTemplateRequestBuilder __EoT__ * Ever since 46e8d97813addd8c57fa54d2c700d26a171f2dbb this class is unused it seems
Add nio http transport to security plugin __EoT__ This is related to # 27260 . It adds the SecurityNioHttpServerTransport to the security plugin . It randomly uses the nio http transport in security integration tests .
Replace Ingest ScriptContext with Custom Interface __EoT__ * Resolving part of this todo : https : //github.com/elastic/elasticsearch/pull/32003/files # diff-7baf7c80f050de6daa1d08ed27675188L50 * Removed mocking from script processor test to actually run the new code in the mock script service * Adjusted IT to new API
[ Rollup ] Histo group config should support scaled_floats __EoT__ Metric config already whitelist scaled_floats , but it was n't added to the histo group config . This centralizes the mapping types map so that both metrics and histo ( and any future configs ) use the same map . Fixes # 32035
Clean Up Snapshot Create Rest API __EoT__ Fixes some issues brought up after this PR ( # 31215 ) was already merged . Also fixes issues related to indices options where they should be parameters rather than part of the request body .
Make watcher settings reloadable __EoT__ This commit allows for rebuilding watcher secure secrets via the reload_secure_settings API call . The commit also renames a method in the Notification Service to make it a bit more readable .
lazy snapshot repository initialization __EoT__ Instead of eager initialization of underlying blob store in ctor this PR move actual initialization of underlying blob store to later stage . It makes possible to register e.g . s3repo with bucket that is not available at the moment .
Adds a new auto-interval date histogram __EoT__ This change adds a new type of histogram aggregation called ` auto_date_histogram ` where you can specify the target number of buckets you require and it will find an appropriate interval for the returned buckets . The aggregation works by first collecting documents in buckets at second interval , when it has created more than the target number of buckets it merges these buckets into minute interval bucket and continues collecting until it reaches the target number of buckets again . It will keep merging buckets when it exceeds the target until either collection is finished or the highest interval ( currently years ) is reached . A similar process happens at reduce time . This aggregation intentionally does not support min_doc_count , offest and extended_bounds to keep the already complex logic from becoming more complex . The aggregation accepts sub-aggregations but will always operate in ` breadth_first ` mode deferring the computation of sub-aggregations until the final buckets from the shard are known . min_doc_count is effectively hard-coded to zero meaning that we will insert empty buckets where necessary . This is also the first aggregation to merge buckets at collection time
HLRC : Add xpack usage api __EoT__ This commit adds the _xpack/usage api to the high level rest client . Currently in the transport api , the usage data is exposed in a limited fashion , at most giving one level of helper methods for the inner keys of data , but then exposing thos subobjects as maps of objects . Rather than making parsers for every set of usage data from each feature , this PR exposes the entire set of usage data as a map of maps .
Add secure setting for watcher email password __EoT__ Other watcher actions already account for secure settings in their sensitive settings , whereas the email sending action did not . This adds the ability to optionally set a secure_password for email accounts .
Watcher : cleanup ensureWatchExists use __EoT__ Previously , the ensureWatchExists was overridable . This commit makes it final so that it can not be overridden , and cleans up some redundant code in the process .
Mute ML native qa test on Windows __EoT__ Adding assumption to not run this test on Windows temporarily . Relates to # 32033
Add second level of field collapsing __EoT__ Closes # 24855
Remove deprecated AnalysisPlugin # requriesAnalysisSettings method __EoT__ Follow up to # 32025
[ Rollup ] Use composite 's missing_bucket __EoT__ We can leverage the composite agg 's new ` missing_bucket ` feature on terms groupings . This means the aggregation criteria used in the indexer will now return null buckets for missing keys . We then index these and rely on a default ` null_value ` on the Rollup 's mapping to inject a placeholder . On the search side of the house , we can remove the placeholder when unrolling the response . By indexing null values , we can guarantee correct doc counts with `` combined '' jobs ( where a job rolls up multiple schemas ) . This was previously impossible since composite would ignore documents that did n't have _all_ the keys , meaning non-overlapping schemas would cause composite to return no buckets . The documentation has been adjusted to recommend a single , combined job . It also makes reference to the previous issue to help users that are upgrading ( rather than just deleting the sections ) . **BWC** This change is somewhat incompatible with older rollup jobs , because all jobs in a shared index share the same mapping templates . So if the template
[ ML ] Move open job failure explanation out of root cause __EoT__ When an ML job can not be allocated to a node the exception contained an explanation of why the job could n't be allocated to each node in the cluster . For large clusters this was not particularly easy to read and made the error displayed in the UI look very scary . This commit changes the structure of the error to an outer ElasticsearchException with a high level message and an inner IllegalStateException containing the detailed explanation . Because the definition of root cause is the innermost ElasticsearchException the detailed explanation will not be the root cause ( which is what Kibana displays ) . Fixes # 29950
Access SSL contexts using names instead of Settings __EoT__ Historically we have loaded SSL objects ( such as SSLContext , SSLIOSessionStrategy ) by passing in the SSL settings , constructing a new SSL configuration from those settings and then looking for a cached object that matches those settings . The primary issue with this approach is that it requires a fully configured Settings object to be available any time the SSL context needs to be loaded . If the Settings include SecureSettings ( such as passwords for keys or keystores ) then this is not true , and the cached SSL object can not be loaded at runtime . This commit introduces an alternative approach of naming every cached ssl configuration , so that it is possible to load the SSL context for a named configuration ( such as `` xpack.http.ssl '' ) . This means that the calling code does not need to have ongoing access to the secure settings that were used to load the configuration . Resolves : # 30344
[ ML ] Re-enable memory limit integration tests __EoT__ Following on from # 31289 , the C++ changes have been committed so these tests can be re-enabled .
Add nio transport to security plugin __EoT__ This is related to # 27260 . It adds the SecurityNioTransport to the security plugin . Additionally , it adds support for ip filtering . And it randomly uses the nio transport in security integration tests .
XContentTests : insert random fields at random positions __EoT__ Currently ` AbstractXContentTestCase # testFromXContent ` appends random fields . This PR shuffled all fields after the random fields have been appended , hence the random fields are actually added to random positions .
Force execution of fetch tasks __EoT__ Forces fetch tasks to queue even in the event that the queue is already full . The reasoning is that fetch tasks may only be follow-up to query tasks , so the number of additional fetch tasks that may enter the threadpool is expected to be reasonable . Closes # 29442 Note : not really sure how to test this since we are already testing all parts of this behavior on the unit-test level , as well as overall rejection logic on the integration test level and I can not figure out how to make a sane IT test that would only reject fetches .
Fix unreachable error condition in AmazonS3Fixture __EoT__ The ` else ` branch where currently the error response should be thrown is not reachable because ` handler ` is always non-null inside the previous outer check . Moving error creation into an else branch on the other condition check , removing the other superflous check for non-null handler inside the first branch .
Adds a check to only fail policy update if unsafe action is changed __EoT__
Tests : Fix SearchFieldsIT.testDocValueFields __EoT__ This test produced different implementations of joda time classes , depending on if the data was serialized or not ( DateTime vs MutableDateTime ) . This now uses a common base class to extract the milliseconds from the data . Closes # 31992
[ ML ] Get ForecastRequestStats doc in tests __EoT__ Since switching ML tests to use a 3 node cluster in # 31757 there have been intermittent failures in ` RestoreModelSnapshotIT ` where the forecast status is not ` FINISHED ` . In what appears to be an overly cautious test there is an ` assertBusy ` waiting for status to change to ` FINISHED ` then the next line of code gets the forecast once again and asserts ` status== FINISHED ` but sometimes the status is not the same . This is due to searching on a replica that is not up to date with the primary . I 've changed the search to a GET to ensure the latest is read . I also removed the redundant assertion , which somewhat negates the change .
[ ML ] Ensure immutability of MlMetadata __EoT__ The test failure in # 31916 revealed that updating rules on a job was modifying the detectors list in-place . That meant the old cluster state and the updated cluster state had no difference and thus the change was not propagated to non-master nodes . This commit fixes that and also reviews all of ML metadata in order to ensure immutability . Closes # 31916
Adds concept of a safe action __EoT__ A safe action is one that does not have unwanted side effects if the configuration of the action is change in the policy while and index is executing the action . This commit formalises this concept with the only current unsafe action being ShrinkAction . It also adds testing around this and add a method to LifecyclePolicy which returns whether the action for the provided StepKey is safe . Also , makes IndexLifecycleRunners checks use the safe indications instead of
testBuilderUsesDefaultSSLContext fails due to a wrong exception message __EoT__ This test failed today of the above test while running on java11 , which may be relevant : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+matrix-java-periodic/ES_BUILD_JAVA=java11 , ES_RUNTIME_JAVA=java11 , nodes=virtual & & linux/168/console `` ` 16:26:03 FAILURE 0.58s J2 | RestClientBuilderIntegTests.testBuilderUsesDefaultSSLContext < < < FAILURES ! 16:26:03 > Throwable # 1 : java.lang.AssertionError : 16:26:03 > Expected : a string containing `` General SSLEngine problem '' 16:26:03 > but : was `` PKIX path building failed : sun.security.provider.certpath.SunCertPathBuilderException : unable to find valid certification path to requested target '' 16:26:03 > at __randomizedtesting.SeedInfo.seed ( [ 40A8A6346B9B56FA:78D0B8F8B871D88F ] :0 ) 16:26:03 > at org.hamcrest.MatcherAssert.assertThat ( MatcherAssert.java:20 ) 16:26:03 > at org.elasticsearch.client.RestClientBuilderIntegTests.testBuilderUsesDefaultSSLContext ( RestClientBuilderIntegTests.java:82 ) 16:26:03 > at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) 16:26:03 > at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) 16:26:03 > at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) 16:26:03 > at java.base/java.lang.reflect.Method.invoke ( Method.java:566 ) 16:26:03 > at java.base/java.lang.Thread.run ( Thread.java:834 ) `` `
Tests : Remove use of joda time in some tests __EoT__ This also extends the dateformatters test to ensure that the printers are acting the same in java time and joda time .
[ Test ] Reactive 3rd party tests on CI __EoT__ 3rd party tests are failing because the repository-s3 is expecting some enviromnent variables in order to test session tokens but the CI job is not ready yet to provide those . This pull request relaxes the constraints on the presence of env vars so that the 3rd party tests can still be executed on CI . closes # 31813
SQL : HAVING clause should accept only aggregates __EoT__ Improve Verifier to allow HAVING clauses only on aggregates Close # 31726
Docs : fix typo in datehistogram __EoT__
Revert translog changes introduced for CCR __EoT__ We introduced these changes in # 26708 because for CCR . However , CCR now uses Lucene instead of translog . This commit reverts these changes so that we can minimize differences between the ccr and the master branch .
Switch url repository rest tests to new style requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` module/repository-url ` project to use the new versions .
Switch reindex tests to new style requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` modules/reindex ` project to use the new versions .
[ DOCS ] Removes alternative docker pull example __EoT__ This PR removes the alternative `` docker pull '' command so that the instructions are focused on the default path . cc'ing @ jarpy , who added this information in https : //github.com/elastic/elasticsearch/pull/27166 Related to https : //github.com/elastic/kibana/pull/20624 and https : //github.com/elastic/logstash/pull/9831
Add Snapshots Status API to High Level Rest Client __EoT__ This PR adds the Snapshots Status API to the High Level Rest Client . There are a few points that are strange , mainly that some of the response objects serialize themselves differently across XContent and regular Writables . Relates # 27205
Test : fix null failure in watcher test __EoT__ A new commit was merged that does not allow a null attachement & & text . This is valid for the slack API , as it does not allow this , but our unit tests did . This commit fixes the broken unit test . Closes # 31948
Switch test framework to new style requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` test/framework ` project to use the new versions .
[ ML ] Mute test failing due to Java 11 date time format parsing bug __EoT__ Follow on to # 31817 The ` DataDescriptionTests ` fail on Java 11 with the format string ` yyyy.MM.dd G 'at ' HH : mm : ss z ` ~~due to a change in the validation , a capital ` Z ` should be used instead of lower case~~ . The cause is a bug in Java 11 early access build https : //bugs.java.com/bugdatabase/view_bug.do ? bug_id=JDK-8206980 , the failing test is muted until that bug is resolved . This change also returns the root cause ` DateTimeException ` in the error . Note setting the time stamp format string can only be done via the API and not in the UI . Reproduce command is : `` ` ./gradlew : x-pack : plugin : core : test -Dtests.seed=C2598B6DFDB04B7B -Dtests.class=org.elasticsearch.xpack.core.ml.job.config.DataDescriptionTests -Dtests.method= '' testVerify_GivenValidFormat '' -Dtests.security.manager=true -Dtests.locale=en-TZ -Dtests.timezone=America/Port-au-Prince `` `
Fix assertIngestDocument wrongfully passing __EoT__ * Previously docA being subset of docB passed because iteration was over docA 's keys only * Scalars in nested fields were not compared in all cases * Assertion errors were hard to interpret ( message was n't correct since it only mentioned the class type ) * In cases where two paths contained different types a ClassCastException was thrown instead of an AssertionError * Adjusted a few tests that now failed ( but were generally correct in behaviour imo except for the assertion ) * Fixes # 28492
[ CCR ] Move api parameters from url to request body . __EoT__ Currently all params are url query string params . In # 30102 the api params are designed to be in the request bodye and this PR changes this .
Remove unused reference to filePermissionsCache __EoT__ Currently Role.Builder keeps a reference to the FieldPermissionsCache that is passed into its constructors . This seems to be unused except for passing it on to convertFromIndicesPrivileges ( ) in the second ctor itself , but we do n't need to keep the internal reference in that case , so it can be removed . Relates to # 31876
Added lenient flag for synonym token filter __EoT__ Relates to # 30968
HLRest : Move xPackInfo ( ) to xPack ( ) .info ( ) __EoT__ Originally I put the X-Pack info object into the top level rest client object . I did that because we thought we 'd like to squash ` xpack ` from the name of the X-Pack APIs now that it is part of the default distribution . We still kind of want to do that , but at least for now we feel like it is better to keep the high level rest client aligned with the other language clients like C # and Python . This shifts the X-Pack info API to align with its json spec file . Relates to # 31870
Docs : add security delete role to api call table __EoT__ DELETE was missing from the top table .
[ test ] port archive distribution packaging tests __EoT__ Recreates the rest of the bats packaging tests for the tar distribution in the java packaging test project , with support for both tar and zip packaging , both oss and default flavors , and on Linux and Windows . Most tests are followed fairly closely , some have either been dropped if unnecessary or folded into others if convenient . For # 26741
Slack message empty text __EoT__ Adding constructors to the slack message class to support more flexibility in null parameters . Additionally provided setters for use-cases where this can be added before message template is created . https : //github.com/elastic/elasticsearch/issues/30071 Replacing old pull request : https : //github.com/elastic/elasticsearch/pull/31288
Rewrite shard follow node task logic __EoT__ The current shard follow mechanism is complex and does not give us easy ways the have visibility into the system ( e.g . why we are falling behind ) . The main reason why it is complex is because the current design is highly asynchronous . Also in the current model it is hard to apply backpressure other than reducing the concurrent reads from the leader shard . This PR has the following changes : * Rewrote the shard follow task to coordinate the shard follow mechanism between a leader and follow shard in a single threaded manner . This allows for better unit testing and makes it easier to add stats . * All write operations read from the shard changes api should be added to a buffer instead of directly sending it to the bulk shard operations api . This allows to apply backpressure . In this PR there is a limit that controls how many write ops are allowed in the buffer after which no new reads will be performed until the number of ops is below that limit . * The shard changes api includes the current global checkpoint
Fix wrong NaN check in MovingFunctions # stdDev ( ) __EoT__ The initial check will never be true , because of the special semantics of NaN , where no value is equal to Nan , including NaN . Thus , x == Double.NaN always evaluates to false . The method still works correct because later computations will also return NaN if the avg argument is NaN , but the intended shortcut does n't work .
Date : Add DateFormatters class that uses java.time __EoT__ A newly added class called DateFormatters now contains java.time based builders for dates , which also intends to be fully backwards compatible , when the name based date formatters are picked . A duelling test class has been added that ensures the same dates when parsing java or joda time formatted dates for the name based dates . A first user of this class is the ingest module , which now uses java.time under the hood instead of joda time . Note , that java.time and joda time are not fully backwards compatible , which also means that old formats will currently not work with this setup . Note : This is does not include the joda to java-time conversions in the ingest processors done in # 30612 , just adding the new class .
[ ML ] Switch ML native QA tests to use a 3 node cluster __EoT__ Single node tests are not representative of how ML is used in the real world and the bug # 31691 would have been discovered early if in a multi node test . This changes the ` ml-native-tests ` project to run in a 3 node cluster This change is essentially renaming the ` ml-native-tests ` project to ` ml-native-multi-node-tests ` and setting ` numNodes = 3 ` The gradle command to run the tests is ` ./gradlew : x-pack : qa : ml-native-multi-node-tests : integTest `
Change trappy float comparison __EoT__ Comparing primitive floats with '== ' can be trappy because e.g . special handling of NaN values . It can be avoided by using Float.compare ( ) .
Fix building AD URL from domain name __EoT__ The steps to read the settings and build URLs happen in a non-obvious order , which meant that we would build the default URL ( from the domain name , and port ) before we 'd actually read the port settings . This would cause the URL to always have a port of ` 0 ` . Relates : bccf988 -- - _Release Notes : _ Fixed a bug where Active Directory URLs would be constructed with a port number of ` 0 `
Add opaque_id to audit logging __EoT__ Logs opaque_id if it is available with all audit log messages . Relates # 31521 @ jaymode , not sure if this should be backported to 6.4.0 and if we consider adding fields to the audit log format a breaking change .
add support for is_write_index in put-alias body parsing __EoT__ The Rest Put-Alias Action does separate parsing of the alias body to construct the IndicesAliasesRequest . This extra parsing was missed in # 30703 .
Improve release notes script __EoT__ The current release notes script does not handle area labels that are not two parts , such as `` : ml '' . As these area labels are rare , I have simply hard-coded a title for these area labels . In addition , the script will not explicitly call out instances where multiple area labels are present on an issue .
Remove the ability to index or query context suggestions without context __EoT__ This is a follow up of # 30712 that removes the ability to index or query and context enabled completion field without context . Relates # 30712
Ingest : Enable Templated Fieldnames in Rename __EoT__ Adds templating to rename 's field and target field to fix # 29657
[ Docs ] [ Rollup ] Fix typo in the API Quick Reference __EoT__ The Stop endpoint was not correct in the Quick Reference .
Ingest : Add ignore_missing option to RemoveProc __EoT__ Added ` ignore_missing ` setting to the RemoveProcessor to fix # 23086 Tried to do it a little cleaner than in # 31578 and not add a getter to the ` Processor ` just to test the factory and instead just create the ` Processor ` via the factory and verify behaviour and the factory picking up the setting in one go ( change the existing test to use the factory too , to test the default without adding the constructor ) .
Add template config for Beat state to X-Pack Monitoring __EoT__ With https : //github.com/elastic/beats/pull/7075 Beats introduces state reporting for X-Pack Monitoring . The data sent up to Elasticsearch ends up stored in the following format . `` ` '' beats_state '' : { `` timestamp '' : `` 2018-07-05T07:21:03.581Z '' , `` state '' : { `` module '' : { `` count '' : 1 , `` names '' : [ `` http '' ] } } , `` beat '' : { `` uuid '' : `` 594039b5-6353-4d78-9bad-778ecc0fe83f '' , `` type '' : `` metricbeat '' , `` version '' : `` 7.0.0-alpha1 '' , `` name '' : `` ruflin '' , `` host '' : `` ruflin '' } } `` ` This PR adds the new fields to the template .
Watcher : Add ssl.trust email account setting __EoT__ In order to allow users to specify hosts , where SSL is always trusted , this setting is exposed . Otherwise the system keystore needs to be configured properly . With the switch to static smtp account properties , this setting got lost , but was available in earlier versions . For more info see https : //javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html To reviewers : This whole thing is still up for discussion , as this trusts hosts not based on certs . However this might still be easier than changing the system keystore . We also should think how this can be more properly integrated , and how this would be configured in an ideal world .
Remove link to oss-MSI __EoT__ This commit removes the link to an oss-MSI ; there is only one version of the MSI , which includes X-Pack .
Upgrade to Lucene-7.5.0-snapshot-b9e064b935 __EoT__ This snapshot includes LUCENE-8384 which blocks work in Lucene rollback .
HLREST : Add x-pack-info API __EoT__ This is the first x-pack API we 're adding to the high level REST client so there is a lot to talk about here ! = Open source The *client* for these APIs is open source . We 're taking the previously Elastic licensed files used for the ` Request ` and ` Response ` objects and relicensing them under the Apache 2 license . The implementation of these features is staying under the Elastic license . This lines up with how the rest of the Elasticsearch language clients work . = Location of the new files We 're moving all of the ` Request ` and ` Response ` objects that we're relicensing to the ` x-pack/protocol ` directory . We 're adding a copy of the Apache 2 license to the root fo the ` x-pack/protocol ` directory to line up with the language in the root ` LICENSE.txt ` file . All files in this directory will have the Apache 2 license header as well . We don't want there to be any confusion . Even though the files are under the ` x-pack ` directory , they are Apache 2
[ ML ] Fix master node deadlock during ML daily maintenance __EoT__ This is the implementation for master and 6.x of # 31691 . Native tests are changed to use multi-node clusters in # 31757 . Relates # 31683
Build : Switch integ-test-zip to OSS-only __EoT__ We mistakenly enabled bundling of the default distribution 's bin scripts into the ` integ-test-zip ` artifact used by plugin authors to test plugins . These did n't change the version of Elasticsearch used for testing but as a side effect changed the LICENSE.txt from the Apache 2 license to the Elastic license . We really did n't mean for that to happen . The bin script and the elasticsearch-sql-cli jar file bundled into the distribution are indeed governed by the Elastic license but we did n't intend for them to be in the testing artifact in the first place . This removes them and fixes the license of the ` integ-test-zip ` artifact .
SQL : Remove restriction for single column grouping __EoT__ For historical reasons SQL restricts GROUP BY to only one field . This commit removes the restriction and improves the test suite with multi group by tests . Close # 31793
Build : Fix detection of Eclipse Compiler Server __EoT__ It looks like Eclipse 's compiler server recently changed something so our `` eclipse detector '' stopped working for it . I 've updated the detector so it ought to work now .
Inconsistency between description and example __EoT__ Small fix of inconsistency between description and example
Do not return all indices if a specific alias is requested via get aliases api . __EoT__ If a get alias api call requests a specific alias pattern then indices not having any matching aliases should not be included in the response . This is a second attempt to fix this ( first attempt was # 28294 ) . The reason that the first attempt was reverted is because when xpack security is enabled then index expression ( like * or _all ) are resolved prior to when a request is processed in the get aliases transport action , then ` MetaData # findAliases ` ca n't know whether requested all where requested since it was already expanded in concrete alias names . This change now adds an additional field to the request calss that keeps track whether all aliases where requested . Closes # 27763
QA : build improvements related to SQL projects __EoT__ Register SQL as an xpackModule Specify group for SQL QA to disambiguate projects ( otherwise due to an old Gradle bug ( https : //github.com/gradle/gradle/issues/847 ) any subprojects under SQL QA will not be able to refer to SQL xpackModule Co-authored-by : Alpar Torok < torokalpar @ gmail.com >
[ Docs ] Add clarification to analysis example __EoT__ There have been at least two PRs trying to fix the spelling of `` lazi '' because it is n't very clear from the example that the english analyzer will stem each token in the example . This adds a short description of the analysis process to make this clearer . Relates to # 31797
SQL : Fix incorrect HAVING equality __EoT__ Fix bug that causes ` HAVING a = b ` to be translated ad-litteram in Painless which uses ` == ` for equality checks not ` = ` . Close # 31796
Smaller aesthetic fixes to InternalTestCluster __EoT__ Smaller stuff that I noticed while working on other stuff ...
[ Docs ] Clarify accepted ` sort ` usage with ` rescore ` __EoT__ Rescore only works with an explicite `` sort '' element if it is on descending '' _score '' . Even using `` order '' : `` asc '' will throw an error .
Do not return all indices if a specific alias is requested via get aliases api . __EoT__ If a get alias api call requests a specific alias pattern then indices not having any matching aliases should not be included in the response . This is a second attempt to fix this ( first attempt was # 28294 ) . The reason that the first attempt was reverted is because when xpack security is enabled then index expression ( like * or _all ) are resolved prior to when a request is processed in the get aliases transport action , then ` MetaData # findAliases ` ca n't know whether requested all where requested since it was already expanded in concrete alias names . This change now adds an additional field to the request calss that keeps track whether all aliases where requested . Closes # 27763
Remove obsolete parameters from analyze rest spec __EoT__ This commit also fixes a typo in the analyze high-level client documentation .
[ Docs ] Fix wrong link in Korean analyzer docs __EoT__
[ CI ] HaHdfsFailoverTestSuiteIT # testHAFailoverWithRepository fails because it was unable to create repo __EoT__ Could not reproduce this locally , even with many iterations . Tagging this as Snapshot/Restore , but it might be a security issue instead since the failure was authentication related . https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+31230_gradle48_jdk11+matrix-java-feature-branch/ES_BUILD_JAVA=java11 , ES_RUNTIME_JAVA=java10 , nodes=virtual & & linux/16/console `` ` ./gradlew : plugins : repository-hdfs : integTestHaRunner \ -Dtests.seed=6FA024F53EBF2435 \ -Dtests.class=org.elasticsearch.repositories.hdfs.HaHdfsFailoverTestSuiteIT \ -Dtests.method= '' testHAFailoverWithRepository '' \ -Dtests.security.manager=true \ -Dtests.locale=fr-MC \ -Dtests.timezone=Europe/Kaliningrad `` ` `` ` org.elasticsearch.client.ResponseException : method [ PUT ] , host [ http : // [ : :1 ] :33111 ] , URI [ /_snapshot/hdfs_ha_repo_read ] , status line [ HTTP/1.1 500 Internal Server Error ] { `` error '' : { `` root_cause '' : [ { `` type '' : '' repository_exception '' , '' reason '' : '' [ hdfs_ha_repo_read ] failed to create repository '' } ] , '' type '' : '' repository_exception '' , '' reason '' : '' [ hdfs_ha_repo_read ] failed to create repository '' , '' caused_by '' : { `` type '' : '' unchecked_i_o_exception '' , '' reason '' : '' Could not retrieve the current user information
Fix handling of points_only with term strategy in geo_shape __EoT__ Fixes 2 issues that together cause errors during index creation with geo_shapes that use the term strategy . The term strategy changes the default for points_only parameter , but this was n't taken into account during serialization . So , setting the term strategy would add ` `` points_only '' : true ` to serialization . At the same time if the term strategy would also cause the ` points_only ` setting to be not marked as a processed element during parsing , which would cause index creation to fail with the error : ` Mapping definition for [ location ] has unsupported ` ` parameters : [ points_only : true ] ` . Fixes # 31707
SQL : Fix incorrect message for aliases __EoT__ Fix the naming in the verification message thrown for aliases over multiple indices with different mappings . Close # 31611
Reduce more raw types warnings __EoT__ Similar to # 31523
Remove support for deprecated StoredScript contexts __EoT__ -- related to # 27612 -- follows up on # 28939
[ ML ] [ TEST ] Use java 11 valid time format in DataDescriptionTests __EoT__ It seems that java 11 tightened some validations with regard to time formats . The random instance creator was setting an odd time format to the data description which is invalid when run with java 11 . This commit changes it to a valid format .
[ ML ] Do n't treat stale FAILED jobs as OPENING in job allocation __EoT__ Job persistent tasks with stale allocation IDs used to always be considered as OPENING jobs in the ML job node allocation decision . However , FAILED jobs are not relocated to other nodes , which leads to them blocking up the nodes they failed on after node restarts . FAILED jobs should not restrict how many other jobs can open on a node , regardless of whether they are stale or not . Closes # 31794
Fix Eclipse license header generation on Windows __EoT__ Updates the build.gradle to take into account the OS differences for Windows ( in particular line separator and project naming ) Without these changes on Windows : * the generated ` .jdt.ui.prefs ` is invalid due the extra line feed and is not picked up by Eclipse * even if it were , the Apache license is used for all projects inside .settings including for xpack projects
Add JDK11 support and enable in CI __EoT__ - Update CI to include JDK 11 . - mute failing tests with issue ID mentioned - upgrade bouncycastle to avoid invalid manifest errors on JDK 11 - improve how BWC builds are logged . This one is not directly related to JDK 11 , but helped debug failures while working on it . Each line of the BWC build will be prefixed and indented , to make it easier to distinguish from CI logs that it 's the BWC build and not the main Gradle build . Closes # 31230 , # 31500
Watcher : Fix check for currently executed watches __EoT__ The ack watch action has a check for currently executed watches , to make sure that currently running watches can not be acknowledged . This check only checked on the coordinating node for watches being executed , but should have checked the whole cluster using a WatcherStatsRequest , which is being switched to in this commit .
Watcher : Ensure correct method is used to read secure settings __EoT__ As SecureSetting is extended from Setting , you can easily accidentally use ` SecureSetting.simpleString ( ) ` to read a secure setting instead of ` SecureSetting.secureString ( ) ` . This commit changes this behaviour in some watcher notification services .
[ ML ] Rate limit established model memory updates __EoT__ There is at most one model size stats document per bucket , but during lookback a job can churn through many buckets very quickly . This can lead to many cluster state updates if established model memory needs to be updated for a given model size stats document . This change rate limits established model memory updates to one per job per 5 seconds . This is done by scheduling the updates 5 seconds in the future , but replacing the value to be written if another model size stats document is received during the waiting period . Updating the values in arrears like this means that the last value received will be the one associated with the job in the long term , whereas alternative approaches such as not updating the value if a new value was close to the old value would not .
[ Docs ] Correct default rescore ` window_size ` __EoT__ I was looking into some unrelated issue in the query rescorer and was suprised to see that the default ` window_size ` parameter does n't seem to be related to from/size any more . From looking at the code and trying it out it seems to always default to 10 . This might be the wrong behaviour , but at least that seems to be the current one so I first want to suggest making the doc change . I 'll do a bit of digging when this might have changed and if it was a concious decision or somehow slipped in .
S3 fixture should report 404 on unknown bucket __EoT__ Today , ` AmazonS3Fixture ` returns 403 on attempts to access any inappropriate bucket , whether known or otherwise . In fact , S3 reports 404 on nonexistent buckets and 403 on inaccessible ones . This change enhances AmazonS3Fixture to distinguish these cases .
Detach Transport from TransportService __EoT__ Today TransportService is tightly coupled with Transport since it requires an instance of TransportService in order to receive reponses and send requests . This is mainly due to the Request and Reponse handlers being maintained in TransportService but also because of the lack of a propper callback interface . This change moves request handler registry and repsonse handler registration into Transport and adds all necessary methods to ` TransportConnectionListener ` in order to remove the ` TransportService ` dependency from ` Transport ` Transport now accepts one or more ` TransportConnectionListener ` instances that are executed sequentially in a blocking fashion .
[ ML ] Return statistics about forecasts as part of the jobsstats and usage API __EoT__ This change adds stats about forecasts , to the jobstats api as well as xpack/_usage . The following information is collected : # # # # _xpack/ml/anomaly_detectors/ { jobid|_all } /_stats : - total number of forecasts - memory statistics ( mean/min/max ) - runtime statistics - record statistics - counts by status # # # # _xpack/usage - collected by job status as well as overall ( ` _all ` ) : - total number of forecasts - number of jobs that have at least 1 forecast - memory , runtime , record statistics - counts by status Fixes # 31395 Implementation notes : - reused existing functionality but had to move classes to core due to dependencies - added functionality to use aggregations for the collection of statistics Todo : - [ x ] check documentation/specs ( https : //www.elastic.co/guide/en/elasticsearch/reference/current/index.html ) - [ x ] schema updates for consumers of above API 's
Fixture for Minio testing __EoT__ Adds a Minio fixture to run the S3 repository tests against Minio . I 've also collapsed the single qa subproject into the s3-repository project , which simplifies the code structure ( having it all in one place ) and helps to avoid having too many Gradle subprojects .
[ DOCS ] Starting Elasticsearch __EoT__ This PR creates a `` Starting Elasticsearch '' page , similar to the `` Stopping Elasticsearch '' page here : https : //www.elastic.co/guide/en/elasticsearch/reference/current/stopping-elasticsearch.html The goal is to put this information in a separate page so that it can be referenced from getting started tutorials where we advise users to stop and start Elasticsearch several times and do n't want to repeat all the various commands every time . This new page re-uses the existing info about starting Elasticsearch on various distributions , which was buried in the installation pages .
Painless : Complete Removal of Painless Type __EoT__ This completes the removal of Painless Type . The new data structures in the definition are a map of names ( String ) to Java Classes and a map of Java Classes to Painless Structs . The names to Java Classes map can contain a 2 to 1 ratio of names to classes depending on whether or not a short ( imported ) name is used . The Java Classes to Painless Structs is 1 to 1 always where the Java Class name must match the Painless Struct name . This should lead a significantly simpler type system in Painless moving forward since the Painless Type only held redundant information since Painless does not support generics .
Fix not waiting for Netty ThreadDeathWatcher in IT __EoT__ Same problem and solution as in # 30763 Fixes # 30547 -- -- -- -- -- -- -- - I manually verified that this makes the thread linger warning at the end of the test go away .
Watcher : Consolidate setting update registration __EoT__ Previously the call to register a listener for settings updates was in each individual service , rather than in the notification service itself . This change ensures that each child of the notification service gets registered with the settings update consumer .
Re-enable BWC checks __EoT__ It was disabled by # 31675
ingest : Introduction of a bytes processor __EoT__ This processor allows for human readable byte values ( e.g . 1kb ) to be converted to value in bytes ( e.g . 1024 ) . Internally this processor re-uses `` ByteSizeValue.parseBytesSizeValue '' which supports conversions up to Long.MAX_VALUE and the following units : `` b '' , `` kb '' , `` mb '' , `` gb '' , `` tb '' , pb '' . This change also introduces a generic return type for the AbstractStringProcessor to allow for code reuse while supporting a String - > T conversion . ( String - > Long in this case ) .
Fix coerce validation_method in GeoBoundingBoxQueryBuilder __EoT__ The Rectangle constructor validates bounds before coerce has a chance to normalize coordinates so it can not be used as intermittent storage . This commit removes the Rectangle as an intermittent storage for the bounding box coordinates . Fixes # 31718
Add analyze API to high-level rest client __EoT__ Relates to # 27205
Add support for AWS session tokens __EoT__ AWS supports the creation and use of credentials that are only valid for a fixed period of time . These credentials comprise three parts : the usual access key and secret key , together with a session token . This commit adds support for these three-part credentials to the EC2 discovery plugin and the S3 repository plugin . Note that session tokens are only valid for a limited period of time and yet there is no mechanism for refreshing or rotating them when they expire without restarting Elasticsearch . Nonetheless , this feature is already useful for nodes that need only run for a few days , such as for training , testing or evaluation . # 29135 tracks the work towards allowing these credentials to be refreshed at runtime . Resolves # 16428
Watcher : Reenable start/stop yaml tests __EoT__ The underlying cause for this has been fixed , thus the tests can be reenabled . Closes # 30298
Follow engine should not fill gaps upon promotion and recovery __EoT__ PR for # 31318
resolveHasher defaults to NOOP __EoT__ This changes the default behavior when resolving the hashing algorithm from unrecognised hash strings , which was introduced in # 31234 A hash string that does n't start with an algorithm identifier can either be a malformed/corrupted hash or a plaintext password when Hasher.NOOP is used ( against warnings ) . Do not make assumptions about which of the two is true for such strings and default to Hasher.NOOP . This covers the case for malformed hashes also as hash verification will subsequently fail . Finally , do not log the potentially malformed hash as this can very well be a plaintext password . Resolves # 31697 Reverts 58cf95a
Painless : Add Context Docs __EoT__ This adds information about all the different places a Painless script can be used in Elasticsearch and X-Pack . Each context is listed out with what variables and API are available , and what side-effects and return value affect upon script completion .
Watcher : Fix chain input toXcontent serialization __EoT__ The xcontent parameters were not passed to the xcontent serialization of the chain input . This could lead to wrongly stored watches , which did not contain passwords but only their redacted counterparts .
Match the examples in the description __EoT__ The example deviated a little bit from the description since they changed in [ this ] ( https : //github.com/elastic/elasticsearch/commit/fc406c9a5ac900d3d63f22623b84ed885342c2d8 ) commit
REST high-level client : add cluster get settings API __EoT__ Relates to # 27205
typo __EoT__
Clean up some double semicolons __EoT__ Non-issue , just sed-ed some annoying double-semicolons .
Enable setting client.path.prefix='/ ' __EoT__ These are changes for running the rest tests against a cluster on Cloud . * Ensure all paths have a leading ` / ` by setting path prefix * ~Allow adding additional blacklisted tests for ` CoreWithSecurityClientYamlTestSuiteIT ` ~ ( Merged in # 31074 ) * ~Allow specifying custom cluster credentials for ` CoreWithSecurityClientYamlTestSuiteIT ` ~ ( Merged in # 31235 )
[ DOCS ] Secure settings specified per node __EoT__ It might not be obvious that ` SecureSettings ` need to be specified per node . If there 's a mistake , and a node misses a setting , then the exception should be informative in most cases . It is not informative in the case of the S3 plugin . This might cause frustration , as per : https : //discuss.elastic.co/t/is-repository-s3-plugin-fixed-in-6-3/135997/3 Even if this arguably does not mend the source of frustration ( S3 plugin should not quietly default to using instance credentials ) , I think the proposed doc mention is not superfluous .
has_parent builder : exception message/param fix __EoT__ has_parent builder throws exception message that it expects a ` type ` while parser excepts ` parent_type `
TEST : Randomize soft-deletes settings __EoT__ This change allows us to test our system with/without soft-deletes enabled .
Fix gradle4.8 deprecation warnings __EoT__ Closes # 31264 - enables stable publishing and removes workarounds . - the workaround was failing to attach pom generation to assemble because this was done after the task graph was generated , this is no longer the case - the wrapper task can not be replaced , so we configure the one provided by Gradle - update plugins that generate deprecation warnings - iterate on some earlier fixes
Fix naming conventions task __EoT__ Move min compiler and runtime version to files so we can fix the source and target comparability of the build script to those Closes # 31665
Introduce a Hashing Processor __EoT__ It is useful to have a processor similar to https : //www.elastic.co/guide/en/logstash/6.0/plugins-filters-fingerprint.html in Elasticsearch . A processor that leverages a variety of hashing algorithms to create cryptographically-secure one-way hashes of values in documents . supersedes https : //github.com/elastic/elasticsearch/issues/30790 TODO : - [ x ] rest tests maybe follow-up PR : add documentation https : //github.com/elastic/elasticsearch/issues/31694
Do not check for object existence when deleting repository index files __EoT__ Before deleting a repository index generation file , BlobStoreRepository checks for the existence of the file and then deletes it . We can save a request here by using BlobContainer.deleteBlobIgnoringIfNotExists ( ) which ignores error when deleting a file that does not exist . Since there is no way with S3 to know if a non versioned file existed before being deleted , this pull request also changes S3BlobContainer so that it now implements deleteBlobIgnoringIfNotExists ( ) . It will now save one more request ( blobExist ? ) when appropriate . The tests and fixture have been modified to conform the S3 API that always returns a 204/NO CONTENT HTTP response on deletions .
Remove extra check for object existence in repository-gcs read object __EoT__ This pull request removes another extra blob exist check when reading an object from Google Cloud Storage .
Support multiple system store types __EoT__ When falling back to using the system keystore and - most usually - truststore , do not assume that it will be a JKS store , but deduct its type from { @ code KeyStore # getDefaultKeyStoreType } . This allows the use of any store type the Security Provider supports by setting the keystore.type java security property .
[ Test ] Clean up some repository-s3 tests __EoT__ This pull request removes some tests in the repository-s3 plugin that have not been executed for 2+ years but have been maintained for nothing . Most of the tests in AbstractAwsTestCase were obsolete or superseded by fixture based integration tests . This pull request also adds few REST YAML tests for repositories in order to check that they all behave the same ( top : they do n't )
Use capital letters in headings in documentation __EoT__ Headers should start with capital letters .
Update api.asciidoc __EoT__ Adding new elastic search plugin url to support new language < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? - If you are submitting this code for a class then read our [ policy ] ( https
Merge AzureStorageService and AzureStorageServiceImpl and clean up tests __EoT__ This pull request merges the AzureStorageService interface and the AzureStorageServiceImpl classes into one single AzureStorageService class . It also removes some tests in the repository-azure plugin that have not been executed for 2+ years .
TEST : Fix test task invocation __EoT__ ` ./gradlew test ` was broken by 8557bbab28a52106536f4f47fbe3f36a7f3951be . Fails with : `` ` sh FAILURE : Build failed with an exception . * What went wrong : Found the 1 ` test ` tasks : : client : benchmark : test - > class org.gradle.api.tasks.testing.Test_Decorated `` ` on master I think simply removing the test task fixes things though ( should be ok now since that commit made the test replace action hard against missing ` test ` tasks right ? ) .
Grok Processor does not support non- ( a-zA-Z_ ) field characters for field names __EoT__ example Ingest pipeline that fails : ` @ ` field name . `` ` POST _ingest/pipeline/_simulate { `` pipeline '' : { `` description '' : `` _description '' , `` processors '' : [ { `` grok '' : { `` field '' : `` foo '' , `` patterns '' : [ `` % { WORD : @ } '' ] } } ] } , `` docs '' : [ { `` _index '' : `` index '' , `` _type '' : `` type '' , `` _id '' : `` id '' , `` _source '' : { `` foo '' : `` bar '' } } ] } `` ` exception : `` ` { `` docs '' : [ { `` error '' : { `` root_cause '' : [ { `` type '' : `` exception '' , `` reason '' : `` java.lang.IllegalArgumentException : java.lang.IllegalArgumentException : Provided Grok expressions do not match field value : [ bar ] '' , `` header '' : { `` processor_type '' : `` grok '' } } ] ,
[ DOCS ] Fix licensing API details __EoT__ This PR corrects some details in the licensing APIs .
Relax TranslogWriter # assertNoSeqNumberConflict __EoT__ If the recovery and indexing are concurrently happening , it 's possible for a replica to receive the same operation twice : one from the replication , and the other from the recovery . However , these operations are not identical because we do n't store the versionType of operations in the Lucene index . The TranslogWriter # assertNoSeqNumberConflict assertion has been tripped several times in the CCR branch since we use Lucene in peer-recovery . This commit relaxes that assertion by excluding the versionType from the check .
Fix CreateSnapshotRequestTests Failure __EoT__ Original test failure found here : ( https : //github.com/elastic/elasticsearch/issues/31625 ) Had to rework the tests to only include options available externally for create snapshot requests .
Configurable password hashing algorithm/cost __EoT__ for the stored passwords of users for the realms that this applies ( native , reserved ) . Replaces predefined choice of bcrypt with cost factor 10 . This also introduces PBKDF2 with configurable cost ( number of iterations ) as an algorithm option for password hashing both for storing passwords and for the user cache . Does n't support `` on the fly '' change of hashing algorithm selection as pre-existing users wo n't be able to authenticate . Documentation additions will be handled in a separate PR .
[ DOCS ] Replace CONFIG_DIR with ES_PATH_CONF __EoT__ Several security pages used a `` CONFIG_DIR '' environment variable , which I 've changed to ES_PATH_CONF to match what was done for the `` CONF_DIR '' occurrences . Related to https : //www.elastic.co/guide/en/elasticsearch/reference/6.3/breaking_60_packaging_changes.html # _literal_conf_dir_literal_is_no_longer_supported
Core : Require all actions have a Task __EoT__ The TaskManager and TaskAwareRequest could return null when registering a task according to their javadocs , but no implementations ever actually did that . This commit removes that wording from the javadocs and ensures null is no longer allowed .
Print output when the name checker IT fails __EoT__ Provide more insight when the test fails to help debug in CI .
Add MultiSearchTemplate support to High Level Rest client __EoT__ Note some changes to core classes were required to support tests : * Added SearchType.currentlySupported to list only the usable options * Changed SearchResponse.Clusters constructor to public * Added SearchRequest.DEFAULT_BATCHED_REDUCE_SIZE constant * Added missing `` tookInMillis '' to MultiSearchTemplateResponse * Added SearchTemplateResponse toString ( ) for comparisons in tests
Add test for low-level client round-robin behaviour __EoT__ This PR adds test coverage for the round-robin behaviour of the low-level client
SQL : Refactor package names of sql-proto and sql-shared-proto projects __EoT__ - renames project ` sql-proto ` to ` sql-action ` , - renames package ` sql.plugin ` to ` sql.action ` - renames project ` sql-shared-client ` to ` sql-client ` - renames package ` sql.shard.client ` to ` sql.client ` - renames project ` sql-shared-proto ` to ` sql-proto ` Closes # 31593
Remove deprecation warnings to prepare for Gradle 5 ( sourceSets.main.output.classesDirs ) __EoT__ Gradle replaced ` project.sourceSets.main.output.classesDir ` of type ` File ` with ` project.sourceSets.main.output.classesDirs ` of type ` FileCollection ` ( see [ SourceSetOutput ] ( https : //github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/java/org/gradle/api/tasks/SourceSetOutput.java ) ) Build output is now stored on a per language folder . There are a few places where we use that , here 's these and how it's fixed : - Randomized Test execution - look in all test folders ( pass the multi dir configuration to the ant runner ) - DRY the task configuration by introducing ` basedOn ` for ` RandomizedTestingTask ` DSL - Extend the naming convention test to support passing in multiple directories - Fix the standalon test plugin , the dires were not passed trough , checked with a debuger and the statement had no affect due to a missing ` = ` . Closes # 30354
Fix missing get-snapshots docs reference __EoT__ This is related to # 31537 . It fixes a missing docs references in get_snapshots.asciidoc .
Do not check for Azure container existence everytime an Azure object is accessed or modified __EoT__ The current AzureStorageServiceImpl always checks if the Azure container exists before reading or writing an object to the Azure container . This pull request removes this behavior , reducing the number of overhall requests executed for all snapshots operations . It also removes a check for blob existence when deleting an object . Third party test for Azure now executes in 30 % less time .
Merge AwsS3Service and InternalAwsS3Service in a S3Service class __EoT__ The interface and its implementation can be merged into a single class , which is renamed to S3Service like the other S3BlobStore , S3Repository classes . As a follow-up request I plan to remove some unused tests .
only set ` vm.max_map_count ` if greater __EoT__ This fixes some logic that was not quite right in # 31285 it should only be changed if the value requested is greater than rather than and should not include equality on that . Signed-off-by : Ben Abrams < me @ benabrams.it >
Add Get Snapshots High Level REST API __EoT__ With this commit we add the get snapshots API to the Java high level REST client . Relates # 27205
QA : Merge query-builder-bwc to restart test __EoT__ Merges the ` query-builder-bwc ` qa project into the ` full-cluster-restart ` qa project , saving a cluster starts on every build and *many* cluster starts on ` ./gradlew bwcTests ` .
[ Docs ] Fix typo in elasticsearch.yml name __EoT__
Docs : Skip xpack snippet tests if no xpack __EoT__ Skips tests the require xpack if we run the doc build without xpack . So this should work : `` ` ./gradlew -p docs check -Dtests.distribution=oss-zip `` ` This is implemented by detecting parts of the doc that look like : `` ` [ testenv= '' basic '' ] `` ` Relates to # 30665
Add Create Snapshot to High-Level Rest Client __EoT__ Added support to the high-level rest client for the create snapshot API call . This required several changes to toXContent which may need to be cleaned up in a later PR . Also added several parsers for fromXContent to be able to retrieve appropriate responses along with tests .
Remove legacy MetaDataStateFormat __EoT__ Removes the legacy ( pre-1.5 ) legacy MetaDataStateFormat ( see # 10316 ) .
Add rest highlevel explain API __EoT__ Add explain API to rest high level client . I create this PR firstly and I always have problem while parsing ` GetReult ` of ` ExplainResponse ` through XContent . I used ` GetResult.toXContentEmbedded/fromXContentEmbedded ` and it works well in ` GetResultTests ` , but in ` ExplainResponseTests ` seems it always fails with some arbitrary fields added in it . Anyone has any idea ? Relates to # 27205
Preserve thread context when connecting to remote cluster __EoT__ Establishing remote cluster connections uses a queue to coordinate multiple concurrent connect attempts . Connect attempts can be initiated by user triggered searches as well as by system events ( e.g . when nodes disconnect ) . Multiple such concurrent events can lead to the connectListener of one event to be called under the thread context of another connect attempt . This can lead to the situation as seen in # 31462 where the connect listener is executed under the system context , which breaks when fetching the search shards from the remote cluster . I think that # 31241 has made this bug more prominent as cluster state updates are now always applied under system context . Closes # 31462
JDBC driver prepared statement set* methods __EoT__ Fixes https : //github.com/elastic/elasticsearch/issues/31493
[ TEST ] call yaml client close method from test suite __EoT__ We added a way to close the yaml test client with # 31575 . Such close method also needs to be called from the test suite though for the additional clients to be closed .
Fix a formatting issue in the docvalue_fields documentation . __EoT__ Currently the paragraph does n't render as a bulleted list .
[ TEST ] Close additional clients created while running yaml tests __EoT__ We recently introduced a mechanism that allows to specify a node selector as part of do sections ( see # 31471 ) . When a node selector that is not the default one is configured , a new client will be initialized with the same properties as the default one , but with the specified node selector . This commit improves such mechanism but also closing the additional clients being created and adding equals/hashcode impl to the custom node selector as they are cached into a map . Relates to # 31471
Docs : Clarify sensitive fields watcher encryption __EoT__ In order to clarify the scope of the encrypting sensitive settings in watcher based on community questions .
Watcher : Remove never executed code __EoT__ This code snippet was never executed , as the version was never set and thus always -1 , after parsing the watch . With the changes done in c9d77d20fdb8a46b614515555d5d0697b2c6e5fc this logic would not have worked correctly anyway .
Improve robustness of geo shape parser for malformed shapes __EoT__ Ensures that malformed geoshapes are more reliably ignored if '' ignore_malformed '' is set to true instead of failing the entire document . Closes # 31428
Improve test times for tests using ` RandomObjects : :addFields ` __EoT__ Currently RandomObjects : :addFields can potentially generate a large number of fields . This commit decreases the chances that a new object or array is added as a new branch of an object , which lowers the probability of ending up with very big documents generated . It also reduces the number of documents generated for the SimulatePipelineResponseTests from 10 to 5 to reduce the testing time required for parsing .
[ Test ] Add full cluster restart test for Rollup __EoT__ This pull request adds a full cluster restart test for a Rollup job . The test creates and starts a Rollup job on the cluster and checks that the job already exists and is correctly started on the upgraded cluster . This test allows to test that the persistent task state is correctly parsed from the cluster state after the upgrade , as the ` status ` field has been renamed to ` state ` in # 31031 . The test undercovers a ` ClassCastException ` that can be thrown in the ` RollupIndexer ` when the timestamp as a very low value that fits into an integer . When it 's the case , the value is parsed back as an Integer instead of Long object and ` ( long ) position.get ( rollupFieldName ) ` fails . @ bleskes This is the follow up test you asked for in https : //github.com/elastic/elasticsearch/pull/31031 # discussion_r194630493
[ DOCS ] Fix heading format errors __EoT__ Affects composite-aggregation.asciidoc - Closes # 31327
fix writeIndex evaluation for aliases __EoT__ AliasOrIndex.Alias # writeIndex was returning a write index when an alias was pointing to only one index , regardless whether ` is_write_index ` was set to ` false ` . This fixes that so that there is no write index in such a case that an alias points to only one index with ` is_write_index=false ` .
Add x-opaque-id to search slow logs __EoT__ Add x-opaque-id to search slow logs only . Indexing slow log and audit logs will be handled as separate PRs . Relates # 31521
Watcher : Fix put watch action __EoT__ If no version is specified when putting a watch , the index API should be used instead of the update API , so that the whole watch gets overwritten instead of being merged with the existing one . Merging only happens when a version is specified , so that credentials can be omitted , which is important for the watcher UI .
Renames endpoints for setting and deleting ILM policies __EoT__ ` PUT { index } /_index_lifecycle/remove_policy ` is now ` DELETE { index } /_lifecycle ` ` PUT { index } /_index_lifecycle/set_policy/ { policy_name } ` is now ` PUT { index } /_lifecycle/ { policy_name } `
Add package pre-install check for java binary __EoT__ The package installation relies on java being in the path . If java is not in the path , the tests fail at post-install time . This commit adds a pre-install check to validate that java exists , and if it fails , the package is never installed , and thus keeps a system clean , rather than aborting at post-install and leaving behind a mess . Closes # 29665
Reduce number of raw types warnings __EoT__ Among the ~7000 warnings we currently have , raw type warnings are one of the biggest group ( aprox . 1700 ) and one that is the easiest to reduce , I think . This PR is a first attempt to reduce this number , most of the time by using the unbounded wildcard .
Migrate scripted metric aggregation scripts to ScriptContext design __EoT__ This is the start to an implementation of new script contexts for scripted metric agg scripts as outlined in # 29328 . I do n't think this is ready to merge yet but wanted to submit it for feedback on some specific questions and also a sanity check on general direction . General questions ( I will comment in the diff for more specific points ) : 1 . I 've used `` agg '' and `` aggs '' as the variable names , as direct translation from the old params._agg and _aggs . Should these have leading underscores like `` _score '' or no underscore like `` params '' ? Any other suggestion for names ? RESOLUTION : Went with `` state '' / '' states '' 2 . Detailed backwards compatibility strategy still needs to be fleshed out ( specifically when and how deprecation warnings need to be emitted ) . RESOLUTION : Deprecation warning and system property to disable deprecated behavior will come in a subsequent PR . 3 . I have n't done any work yet to support the new contexts in expression scripts . Obviously this
turn GetFieldMappingsResponse to ToXContentObject __EoT__
Close xcontent parsers ( partial ) __EoT__ I 'm working through the codebase trying to close every instance where we leave an XContentParser open ... there are a lot of them . I will follow with separate PR 's that enforce that we close XContentParsers . I recommend viewing this PR with & w=1 . If there 's too much here , I 'm happy to break it up into multiple different PRs . Relates # 30692
Ingest Attachment : Upgrade Tika to 1.18 __EoT__ Fixes ES from hanging when a bad zip file is loaded through Tika . Zip File found here : https : //issues.apache.org/jira/browse/COMPRESS-432 Upgrades include tika : 1.17 - > 1.18 commons-compress : 1.14 - > 1.16
Add get field mappings to High Level REST API Client __EoT__ Add get field mappings to High Level REST API Client Relates to # 27205
[ DOCS ] Updates Watcher examples for code testing __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR adds the appropriate testing keywords for all of the x-pack/docs/en/watcher pages , so that they can be removed from the build.gradle file . Note that most of these were examples that contained just a subsection of a watch definition , so I marked them as //NOTCONSOLE . If you would prefer to develop these snippets into full examples so that they can be automatically tested , let me know and I 'll help .
[ DOCS ] Move sql to docs __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the content from x-pack/docs/en/sql to docs/reference/sql
[ DOCS ] Move monitoring to docs folder __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the content from x-pack/docs/en/monitoring to docs/reference/monitoring , with the exception of files that require more than a basic license , since that infrastructure work is still outstanding .
Core : Combine doExecute methods in TransportAction __EoT__ TransportAction currently contains 2 doExecute methods , one which takes a the task , and one that does not . The latter is what some subclasses implement , while the first one just calls the latter , dropping the given task . This commit combines these methods , in favor of just always assuming a task is present .
turn GetFieldMappingsResponse to ToXContentObject __EoT__
Ingest Attachment : Upgrade Tika to 1.18 __EoT__ Fixes ES from hanging when a bad zip file is loaded through Tika . Zip File found here : https : //issues.apache.org/jira/browse/COMPRESS-432 Upgrades include tika : 1.17 - > 1.18 commons-compress : 1.14 - > 1.16
Add get field mappings to High Level REST API Client __EoT__ Add get field mappings to High Level REST API Client Relates to # 27205
[ DOCS ] Updates Watcher examples for code testing __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR adds the appropriate testing keywords for all of the x-pack/docs/en/watcher pages , so that they can be removed from the build.gradle file . Note that most of these were examples that contained just a subsection of a watch definition , so I marked them as //NOTCONSOLE . If you would prefer to develop these snippets into full examples so that they can be automatically tested , let me know and I 'll help .
[ DOCS ] Move monitoring to docs folder __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the content from x-pack/docs/en/monitoring to docs/reference/monitoring , with the exception of files that require more than a basic license , since that infrastructure work is still outstanding .
IndexShard should not return null stats __EoT__ IndexShard should not return null stats - empty stats or AlreadyClosedException if it 's closed is better that eliminates NPE in [ PrimaryReplicaSyncer:87 ] ( https : //github.com/elastic/elasticsearch/blob/4d7447cb5e67f2739d5edc374e9c7c3a46d414da/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java # L87 ) on closing shard as well Relates to # 30176
fix repository update with the same settings but different type __EoT__
Mockito failure in HttpExporterTests - `` Checked exception is invalid for this method '' __EoT__ Failure on master : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-unix-compatibility/os=ubuntu & & virtual/2507/console Reproduces for me with this seed : REPRODUCE WITH : ./gradlew : x-pack : plugin : monitoring : test -Dtests.seed=8D2608B025564A6 -Dtests.class=org.elasticsearch.xpack.monitoring.exporter.http.HttpExporterTests -Dtests.method= '' testHttpExporterShutdown '' -Dtests.security.manager=true -Dtests.locale=ar-SA -Dtests.timezone=Asia/Damascus ERROR 0.02s J2 | HttpExporterTests.testHttpExporterShutdown < < < FAILURES ! > Throwable # 1 : org.mockito.exceptions.base.MockitoException : > Checked exception is invalid for this method ! > Invalid : java.io.IOException : expected > at __randomizedtesting.SeedInfo.seed ( [ 8D2608B025564A6:86026F40A148152D ] :0 ) > at org.elasticsearch.xpack.monitoring.exporter.http.HttpExporterTests.testHttpExporterShutdown ( HttpExporterTests.java:471 ) > at java.lang.Thread.run ( Thread.java:748 )
Node selector per client rather than per request __EoT__ We have made node selectors configurable per request , but all of other language clients do n't allow for that . A good reason not to do so , is that having a different node selector per request breaks round-robin . This PR makes NodeSelector configurable only at client initialization , so it has to be the same for every request . It also contains a docs improvement on this matter , important given that a single node selector can still affect round-robin .
Core : Combine messageRecieved methods in TransportRequestHandler __EoT__ TransportRequestHandler currently contains 2 messageReceived methods , one which takes a Task , and one that does not . The first just delegates to the second . This commit changes all existing implementors of TransportRequestHandler to implement the version which takes Task , thus allowing the class to be a functional interface , and eliminating the need to throw exceptions when a task needs to be ensured .
Upgrade to Lucene 7.4.0 . __EoT__ This moves Elasticsearch from a recent 7.4.0 snapshot to the GA release .
[ ML ] Add ML filter update API __EoT__ This adds an api to allow updating a filter : POST _xpack/ml/filters/ { filter_id } /_update The request body may have : - description : setting a new description - add_items : a list of the items to add - remove_items : a list of the items to remove This commit also changes the PUT filter api to error when the filter_id is already used . As now there is an api for updating filters , the put api should only be used to create new ones . Also , updating a filter results into a notification message auditing the change for every job that is using that filter .
Avoid deprecation warning when running the ML datafeed extractor . __EoT__ In # 29639 we added a ` format ` option to doc-value fields and deprecated usage of doc-value fields without a format so that we could migrate doc-value fields to use the format that comes with the mappings by default . However I missed to fix the machine-learning datafeed extractor . I 'm setting the ` non-issue ` label since this bug is not released . @ dimitris-athanasiou Could you have a look ?
REST high-level client : add simulate pipeline API __EoT__ relates to # 27205
Get Mapping API to honour allow_no_indices and ignore_unavailable __EoT__ Get Mapping currently throws index not found exception ( and returns 404 status code ) from the REST layer whenever an index was specified and no indices have been returned . We should not have this logic in the REST layer though as only our index resolver should decide whether we need to throw exceptions or not based on provided indices and corresponding indices options . Closes # 31485
[ PkiRealm ] Invalidate cache on role mappings change __EoT__ PkiRealm caches successful authentications and provides ways to invalidate the cache . But in some scenario 's the cache was not being invalidated on role mapping change . PkiRealm does not inform role mapper to get notified for cache refresh on role mapping updates as it does not invoke ` UserRoleMapper # refreshRealmOnChange ` The logic in ` TransportClearRealmCacheAction # nodeOperation ` which gets invoked for refreshing cache on realms , considers null or empty realm names in the request as to clear cache on all realms . When LDAP realm is not configured then it clears cache for all realms so it works fine in that case , but when LDAP realm is configured then role mapper sends a request with LDAP realm name ( s ) and so the cache is cleared only for those realms . This commit resolves the issue by registering PkiRealm with role mapper for cache refresh . PkiRealm implements CachingRealm and as it does not extend CachingUsernamePasswordRealm , have modified the interface method ` refreshRealmOnChange ` to accept CachingRealm .
[ Security ] Check auth scheme case insensitively __EoT__ According to [ RFC 7617 ] ( https : //tools.ietf.org/html/rfc7617 ) , the ` Basic ` authentication scheme name should not be case sensitive . Case insensitive comparisons are also applicable for bearer tokens where ` Bearer ` authentication scheme is used as per [ RFC 6750 ] ( https : //tools.ietf.org/html/rfc6750 ) and [ RFC 7235 ] ( https : //tools.ietf.org/html/rfc7235 # page-10 ) Some Http clients may send authentication scheme names in different case types for eg . ` Basic ` ` basic ` , ` BASIC ` , ` BEARER ` etc. , so the lack of case-insensitive check is an issue when these clients try to authenticate with elasticsearch . This commit adds case-insensitive checks for ` Basic ` and ` Bearer ` authentication schemes . Closes # 31486
In NumberFieldType equals and hashCode , make sure that NumberType is taken into account . __EoT__
[ DOCS ] Add code snippet testing in more ML APIs __EoT__ This PR adds code snippet testing for more machine learning APIs . Related to https : //github.com/elastic/elasticsearch/issues/30665
Rename createNewTranslog to fileBasedRecovery __EoT__ We renamed ` createNewTranslog ` to ` fileBasedRecovery ` in the RecoveryTarget but did not do this for RecoverySourceHandler . This commit makes sure that we a consistent parameter in both recovery source and target .
add APIs to Maintenance Mode in ILM __EoT__ - POST _xpack/index_lifecycle/_stop - issues a request to be placed into STOPPED mode ( maintenance mode ) . This is not immediate , since we must first verify that it is safe to go from STOPPING - > STOPPED . - POST _xpack/index_lifecycle/_start - issues a request to be placed back into RUNNING mode ( immediately ) - GET _xpack/index_lifecycle/_status - get back the current mode our lifecycle management is in - update task was hardened to support uninstalled metadata - if no metadata is installed , the start/stop actions will install metadata and proceed to try and change it ( default start mode is RUNNING ) - rename MAINTENANCE - > STOPPED , MAINTENANCE_REQUESTED - > STOPPING , NORMAL - > RUNNING follow-up to # 31164 .
[ DOCS ] Move migration APIs to docs __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the migration API reference information from x-pack/docs/en/rest-apis/migration to docs/reference/migration/
Core : Convert TransportAction.execute uses to client calls __EoT__ This commit converts some of the existing calls to TransportAction.execute to use the equivalent client method for the desired action .
inherit [ index.lifecycle.date ] from rolled-over time __EoT__ Indices that are rolled over preserve their origin index.lifecycle.date as the time the index was created . Although this is also fine , it would make more sense to start the timer for moving to the warm phase from the time it was rolled over so that we capture the time elapsed from the latest data , as opposed to when the index was created . This commit adds an extra step within the RolloverAction that extracts the index.creation_date of the newly created index from the RolloverStep and sets that as the index.lifecycle.date of the rolled-over index that is waiting for its next phase .
Return transport addresses from UnicastHostsProvider __EoT__ With # 20695 we removed local transport and there is just ` TransportAddress ` now . The UnicastHostsProvider currently returns ` DiscoveryNode ` instances , where , during pinging , we 're actually only making use of the TransportAddress to establish a first connection to the possible new node . To simplify the interface , we can just return a list of transport addresses instead , which means that it 's not necessary anymore to create fake node objects in each plugin just to return the address information .
Use Lucene soft-deletes in peer recovery __EoT__ This commit adds Lucene soft-deletes as another source for peer-recovery besides translog . Relates # 29530
Adds ability to update a policy __EoT__ This will work as long as no indexes are in the shrink action action
Ensure local addresses are n't null __EoT__ Currently we set local addresses on the creation time of a NioChannel . However , this may return null as the local address may not have been set yet . An example is the local address has not been set on a client channel as the connection process is not yet complete . This PR modifies the getter to set the local field if it is currently null .
Remove unused generic type for client execute method __EoT__ This commit removes the request builder generic type for AbstractClient as it was unused .
Introduce http and tcp server channels __EoT__ Historically in TcpTransport server channels were represented by the same channel interface as socket channels . This was necessary as TcpTransport was parameterized by the channel type . This commit introduces TcpServerChannel and HttpServerChannel classes . Additionally , it adds the implementations for the various transports . This allows server channels to have unique functionality and not implement the methods they do not support ( such as send and getRemoteAddress ) . Additionally , with the introduction of HttpServerChannel this commit extracts some of the storing and closing channel work to the abstract http server transport .
extend is-write-index serialization support to 6.4 __EoT__ # 30942 added the is-write-index functionality to aliases and # 31412 back-ports this functionality to 6.4 . This commit reflects this extended support
[ DOCS ] Omit shard failures assertion for incompatible responses __EoT__ The failures in the docs snippet testing seen in # 31339 [ comment ] ( https : //github.com/elastic/elasticsearch/pull/31339 # issuecomment-397609887 ) are due to the framework inserting the assertion ` is_false : _shards.failures ` which causes errors if the response is not a JSON object . The ml datafeed preview API does not return a JSON object and is excluded from the check .
Remove QueryCachingPolicy # ALWAYS_CACHE __EoT__ The QueryCachingPolicy # ALWAYS_CACHE was deprecated in Lucene-7.4 and will be removed in Lucene-8.0 . This change replaces it with QueryCachingPolicy . This also makes INDEX_QUERY_CACHE_EVERYTHING_SETTING visible in testing only .
Add missing info about Homebrew installation __EoT__ A better fix is probably to make the above change and also to put the “ Successfully running node ” section into a different file and refer users to it as the next file at the end of each installation section . It is currently difficult to ascertain that that section pertains to all of the installation platforms and methods , not only to the MSI Windows one . < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is
Mention ip_range datatypes from ip type page __EoT__ A link to the ip_range datatype page provides a way for newer users to know it exists if they land directly on the ip datatype page first via a search .
Multiplexing token filter __EoT__ This adds a ` multiplexer ` token filter to elasticsearch , which allows you to run tokens through multiple different tokenfilters and stack the results . For example , you can now easily index the original form of a token , its lowercase form and a stemmed form all at the same position , allowing you to search for stemmed and unstemmed tokens in the same field .
Fix use of time zone in date_histogram rewrite __EoT__ Currently , DateHistogramAggregationBuilder # rewriteTimeZone uses the aggregation date math parser and time zone to check whether all values in a read have the same timezone to speed up computation . However , the upper and lower bounds to check are retrieved as longs in epoch time , so they do n't need to get parsed using a time zone or a parser other than `` epoch_millis '' . This PR changes this behaviour that was causing problems when the field type mapping was specifying only `` epoch_millis '' as a format but a different time zone than UTC was used . Closes # 31392
More Like This Query documentation - remove reference to `` ids '' and `` like_text '' parameter __EoT__ A user on the discuss forums [ reported ] ( https : //discuss.elastic.co/t/more-like-this-documentation/114477/2 ) that MLT had deprecated ` ids ` and ` like_text ` params but not removed them from the docs following their removal from the codebase . I tried these params in 6.0 and it does look like docs diverge from code at this point . The API now only takes a single ` like ` parameter which either accepts a string ( the equivalent behaviour of the old ` like_text ` ) or an array of objects with index , type and id settings to identify individual docs ( the equivalent of the old ` ids ` setting ) . Valid examples below : GET kaleida/article/_search { `` query '' : { '' more_like_this '' : { `` fields '' : [ '' headline '' ] , `` like '' : [ { `` _index '' : `` kaleida '' , `` _type '' : `` article '' , `` _id '' : `` szeNvGABw9SxSpuUzKMH '' } ] } } } GET kaleida/article/_search { `` query '' :
Security : fix joining cluster with production license __EoT__ The changes made to disable security for trial licenses unless security is explicitly enabled caused issues when a 6.3 node attempts to join a cluster that already has a production license installed . The new node starts off with a trial licenses and ` xpack.security.enabled ` is not set for the node , which causes the security code to skip attaching the user to the request . The existing cluster has security enabled and the lack of a user attached to the requests causes the request to be rejected . This commit changes the security code to check if the state has been recovered yet when making the decision on whether or not to attach a user . If the state has not yet been recovered , the code will attach the user to the request in case security is enabled on the cluster being joined . Closes # 31332
Unify http channels and exception handling __EoT__ This is a general cleanup of channels and exception handling in http . This commit introduces a CloseableChannel that is a superclass of TcpChannel and HttpChannel . This allows us to unify the closing logic between tcp and http transports . Additionally , the normal http channels are extracted to the abstract server transport . Finally , this commit ( mostly ) unifies the exception handling between nio and netty4 http server transports .
[ DOCS ] Moves the info API to docs __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR copies the rest-api/index.asciidoc and info.asciidoc from x-pack/docs/en to docs/reference in the elasticsearch repo It also adds info about the minimum required subscription level for testing purposes .
Preserve response headers on cluster update task __EoT__ # 31241 changed the cluster state update tasks to run under system context . The context wrapping did not preserve response headers , though . This has led to a test failure on 6.x # 31408 , as the deprecation warnings were not carried back anymore to the caller when creating an index . This can not as easily be fixed because these response headers are generated on the execute method of the cluster state update thread ( which could potentially be shared by multiple tasks ) . The general situation with the response headers looks a bit messy . For example , # 23950 made sure to preserve the response headers when creating an index and updating settings for an index . The subsequent # 25961 seems to have undone that for index creation ( removing the wrapping of the action listener ) , but it looks like that did not break any tests ? In order to make # 31241 less breaking and err on the side of caution , I 've changed the restorable context supplier to preserve response headers . Closes # 31408
[ DOCS ] Add code snippet testing for more ML APIs __EoT__ This PR adds code snippet testing for more machine learning APIs . Related to https : //github.com/elastic/elasticsearch/issues/30665
Do not preallocate bytes for channel buffer __EoT__ Currently , when we open a new channel , we pass it an InboundChannelBuffer . The channel buffer is preallocated a single 16kb page . However , there is no guarantee that this channel will be read from anytime soon . Instead , this commit does not preallocate that page . That page will be allocated when we receive a read event .
Mockito failure in HttpExporterTests - `` Checked exception is invalid for this method '' __EoT__ Failure on master : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-unix-compatibility/os=ubuntu & & virtual/2507/console Reproduces for me with this seed : REPRODUCE WITH : ./gradlew : x-pack : plugin : monitoring : test -Dtests.seed=8D2608B025564A6 -Dtests.class=org.elasticsearch.xpack.monitoring.exporter.http.HttpExporterTests -Dtests.method= '' testHttpExporterShutdown '' -Dtests.security.manager=true -Dtests.locale=ar-SA -Dtests.timezone=Asia/Damascus ERROR 0.02s J2 | HttpExporterTests.testHttpExporterShutdown < < < FAILURES ! > Throwable # 1 : org.mockito.exceptions.base.MockitoException : > Checked exception is invalid for this method ! > Invalid : java.io.IOException : expected > at __randomizedtesting.SeedInfo.seed ( [ 8D2608B025564A6:86026F40A148152D ] :0 ) > at org.elasticsearch.xpack.monitoring.exporter.http.HttpExporterTests.testHttpExporterShutdown ( HttpExporterTests.java:471 ) > at java.lang.Thread.run ( Thread.java:748 )
Docs : Add note about removing prepareExecute from the java client __EoT__ relates # 30966
Add get stored script and delete stored script to high level REST API __EoT__ Add get stored script and delete stored script to High Level REST API Client Relates to # 27205
Core : Combine Action and GenericAction __EoT__ Since # 30966 , Action no longer has anything but a call to the GenericAction super constructor . This commit renames GenericAction into Action , thus eliminating the Action class . Additionally , this commit removes the Request generic parameter of the class , since it was unused .
Fix reference to XContentBuilder.string ( ) __EoT__ In 6.3 this was moved to ` Strings.toString ( XContentBuilder ) ` as part of the XContent extraction . This commit fixes the docs to reference the new method . Resolves # 31326
Avoid sending duplicate remote failed shard requests __EoT__ Today if a write replication request fails , we will send a shard-failed message to the master node to fail that replica . However , if there are many ongoing write replication requests and the master node is busy , we might overwhelm the cluster and the master node with many shard-failed requests . This commit tries to minimize the shard-failed requests in the above scenario by caching the ongoing shard-failed requests . This issue was discussed at https : //discuss.elastic.co/t/half-dead-node-lead-to-cluster-hang/113658/25 .
RestAPI : Reject forcemerge requests with a body __EoT__ This commit adds validation to forcemerge rest requests which contain a body . All parameters to force merge must be part of http params . closes # 29584
Packaging : Remove windows bin files from the tar distribution __EoT__ This commit removes windows specific files from the tar distribution . Windows users use the zip , linux users use the tar .
[ DOCS ] Adds testing for security APIs __EoT__ This PR adds code snippet testing to the security APIs that were missing this info and removes these exceptions from the build.gradle file . Related to https : //github.com/elastic/elasticsearch/issues/30665
Clarify that IP range data can be specified in CIDR notation . __EoT__ Relates to https : //github.com/elastic/elasticsearch/issues/31083 .
Use system context for cluster state update tasks __EoT__ This PR makes it so that cluster state update tasks always run under the system context , only restoring the original context when the listener that was provided with the task is called . A notable exception is the ` clusterStatePublished ( ... ) ` callback which will still run under system context , because it 's defined on the executor-level , and not the task level , and only called once for the combined batch of tasks and can therefore not be uniquely identified with a task / thread context . I 've looked at usages of this , and adapted the two problematic ones to use ` clusterStateProcessed ` instead . Relates # 30603
Percentile/Ranks should return null instead of NaN when empty __EoT__ The other metric aggregations ( min/max/etc ) return ` null ` as their XContent value and string when nothing was computed ( due to empty/missing fields ) . Percentiles and Percentile Ranks , however , return ` NaN ` which is inconsistent and confusing for the user . This fixes the inconsistency by making the aggs return ` null ` . This applies to both the numeric value and the `` as string '' value . Note : like the metric aggs , this does not change the value if fetched directly from the percentiles object , which will return as ` NaN ` / ` `` NaN '' ` . This only changes the XContent output . I looked through all the other metric aggs and they appear to return null ( or 0.0 , in the case of cardinality/value_count/sum ) . So percentiles were the only outliers . This is sorta a bwc break , but could also be seen as a bugfix . I 'm not sure what we want to do with regards to backporting . Closes # 29066
Move language analyzers from server to analysis-common module . __EoT__ The following analyzers were moved from server module to analysis-common module : ` greek ` , ` hindi ` , ` hungarian ` , ` indonesian ` , ` irish ` , ` italian ` , ` latvian ` , ` lithuanian ` , ` norwegian ` , ` persian ` , ` portuguese ` , ` romanian ` , ` russian ` , ` sorani ` , ` spanish ` , ` swedish ` , ` turkish ` and ` thai ` . Relates to # 23658
Reload secure settings for plugins __EoT__ This is the merge PR of the [ reload-secure-store-action ] ( https : //github.com/elastic/elasticsearch/tree/reload-secure-store-action ) feature branch , progress of which has been tracked in https : //github.com/elastic/elasticsearch/issues/29135 . **This is not intended to be reviewed as a whole , small incremental changes have been reviewed independently . The PR is opened to have CI run ( several times ) . ** CC @ elastic/es-security Closes https : //github.com/elastic/elasticsearch/issues/29135
Remove some cases in FieldTypeLookupTests that are no longer relevant . __EoT__ These cases are left over from when we distinguished between a field 's 'index name ' and 'full name ' .
Ensure we do n't use a remote profile if cluster name matches __EoT__ If we are running into a race condition between a node being configured to be a remote node for cross cluster search etc . and that node joining the cluster we might connect to that node with a remote profile . If that node now joins the cluster it connected to it as a CCS remote node we use the wrong profile and ca n't use bulk connections etc . anymore . This change uses the remote profile only if we connect to a node that has a different cluster name than the local cluster . This is not a perfect fix for this situation but is the safe option while potentially only loose a small optimization of using less connections per node which is small anyways since we only connect to a small set of nodes . Closes # 29321
add is-write-index flag to aliases __EoT__ This commit adds the is-write-index flag for aliases . It allows requests to set the flag , and responses to display the flag . It does not validate and/or affect any indexing/getting/updating behavior of Elasticsearch -- this will be done in a follow-up PR . This is a follow-up to : https : //github.com/elastic/elasticsearch/pull/30703 It made more sense to split the above PR into two PRs . One for introducing the ` is_write_index ` flag , and another to use it for validation and index resolution .
Support for remote path in reindex api __EoT__ **Elasticsearch version** : 5.x **Plugins installed** : [ ] **JVM version** : **OS version** : **Describe the feature** : In the 5.x reindex api , support for remote is added , e.g , POST _reindex { `` source '' : { `` remote '' : { `` host '' : `` http : //otherhost:9200 '' , `` username '' : `` user '' , `` password '' : `` pass '' } , ... However the host property is strictly enforced to three parts , scheme , host and port . We host elasticsearch behind a proxy and need the ability to specify a path too . I found code in https : //github.com/elastic/elasticsearch/blob/v5.2.0/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java , that enforces this rule . ... private static final Pattern HOST_PATTERN = Pattern.compile ( `` ( ? < scheme > [ ^ : ] + ) : // ( ? < host > [ ^ : ] + ) : ( ? < port > \\d+ ) '' ) ; ... Can we add the support for path ?
[ ML ] Put ML filter API response should contain the filter __EoT__
Support for remote path in reindex api __EoT__ Support for remote path in reindex api Closes # 22913
Add byte array pooling to nio http transport __EoT__ This is related to # 28898 . This PR implements pooling of bytes arrays when reading from the wire in the http server transport . In order to do this , we must integrate with netty reference counting . That manner in which this PR implements this is making Pages in InboundChannelBuffer reference counted . When we accessing the underlying page to pass to netty , we retain the page . When netty releases its bytebuf , it releases the underlying pages we have passed to it .
Remove trial status info from start trial doc __EoT__ This is related to # 31325 . There is currently information about the get-trial-status api on the start-trial api documentation page . It also has the incorrect route for that api . This commit removes that information as the start-trial page properly links to a page providing documenation about get-trial-status .
render non-ElasticsearchException in ILM __EoT__ ILM was rendering exceptions using the exception helper that basically ignores simply rendering non-elasticsearch exceptions when no details are desired . This commit updates the method used to still be a rather simple rendering of the exception . The rendering lacks all the causes , but does a sufficient job in rendering the top-level message for one of our most expected exceptions ... IllegalArgumentException Previous Example : `` ` { `` test '' : { ... `` step_info '' : { `` error '' : `` No ElasticsearchException found '' } } } `` ` now the ` error ` will render ` { `` type '' : `` illegal_argument_exception '' , `` message '' : `` an explanation '' } `
Introduce Maintenance Mode to ILM __EoT__ This PR introduces a concept of a maintenance mode for the lifecycle service . During maintenance mode , no policies are executed . To be placed into maintenance mode , users must first issue a request to be placed in maintenance mode . Once the service is assured that no policies are in actions that are not to be interrupted ( like ShrinkAction ) , the service will place itself in maintenance mode . APIs introduced in follow-up PR - POST _xpack/index_lifecycle/maintenance/_request - issues a request to be placed into maintenenance mode . This is not immediate , since we must first verify that it is safe to go from REQUESTED - > IN maintenance mode . - POST _xpack/index_lifecycle/maintenance/_stop - issues a request to be taken out ( this is immediate ) - GET _xpack/index_lifecycle/maintenance - get back the current mode our lifecycle management is in
add is-write-index flag to aliases __EoT__ This commit adds the is-write-index flag for aliases . It allows requests to set the flag , and responses to display the flag . It does not validate and/or affect any indexing/getting/updating behavior of Elasticsearch -- this will be done in a follow-up PR . This is a follow-up to : https : //github.com/elastic/elasticsearch/pull/30703 It made more sense to split the above PR into two PRs . One for introducing the ` is_write_index ` flag , and another to use it for validation and index resolution .
Add rollover-creation-date setting to rolled over index __EoT__ This PR introduces a new section to IndexMetaData for storing information about rollover actions that took place against a specific index . Information stored - which alias was used to rollover - when the index was rolled over with that alias - which conditions were met Closes # 30887
[ ML ] Hold ML filter items in sorted set __EoT__ Filter items should be unique . They should also be sorted to make them easier to read plus save sorting in the autodetect process .
Move IndexLifecycleMetadata installation to put-lifecycle-action __EoT__ There is a problematic scenario with x-pack-cluster master-nodes attempting to install custom metadata into the cluster-state and broadcasting that to non-x-pack-enabled nodes . Since those nodes are not aware of this custom metadata , their cluster-state recovery will be broken . This change ensures that newly-elected x-pack master nodes bootstrap IndexLifecycleMetadata upon the first request to leverage its features . This means that PutLifecycleAction is now responsible for installing the metadata . Since this X-Pack API can only be called once all nodes in the cluster have x-pack enabled , it is safe to assume that the cluster will appropriately handle the cluster-state recovery with the new set of index-lifecycle metadata . in response to rolling upgrade test failure here : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+index-lifecycle+feature-branch/69/
[ Tests ] Fix edge case in ScriptedMetricAggregatorTests __EoT__ An expected exception is only thrown when there are documents in the index created in the test setup . Fixed the test by making sure there is at least one . Closes # 31307
Upgrade to Lucene-7.4.0-snapshot-518d303506 __EoT__
Add QA project and fixture based test for discovery-ec2 plugin __EoT__ This commit adds a new QA sub project to the discovery-ec2 plugin . This project uses a fixture to test the plugin using a multi-node cluster . Once all nodes are started , the nodes transport addresses are written in a file that is later read by the fixture . This will need more work and thinking to be executable on real EC2 instances , but the test is already useful .
REST Client : NodeSelector for node attributes __EoT__ Add a ` NodeSelector ` so that users can filter the nodes that receive requests based on node attributes . I believe we 'll need this to backport # 30523 and we want it anyway . I also added a bash script to help with rebuilding the sniffer parsing test documents .
[ ML ] Failures in ML tests in UpgradeClusterClientYamlTestSuiteIT __EoT__ Failure : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+g1gc/5918 This seems to be caused by the error in C library , so it is most likely different form # 30456 `` ` 2 > REPRODUCE WITH : ./gradlew : x-pack : qa : rolling-upgrade : with-system-key : v6.4.0-SNAPSHOT # upgradedClusterTestRunner -Dtests.seed=2400057C67EBE734 -Dtests.class=org.elasticsearch.upgrades.UpgradeClusterClientYamlTestSuiteIT -Dtests.method= '' test { p0=upgraded_cluster/30_ml_jobs_crud/Test job with no model memory limit has established model memory after reopening } '' -Dtests.security.manager=true -Dtests.jvm.argline= '' -XX : -UseConcMarkSweepGC -XX : +UseG1GC '' -Dtests.locale=en-IE -Dtests.timezone=EST5EDT -Dtests.rest.suite=upgraded_cluster FAILURE 1.08s | UpgradeClusterClientYamlTestSuiteIT.test { p0=upgraded_cluster/30_ml_jobs_crud/Test job with no model memory limit has established model memory after reopening } < < < FAILURES ! > Throwable # 1 : java.lang.AssertionError : Failure at [ upgraded_cluster/30_ml_jobs_crud:88 ] : expected [ 2xx ] status code but api [ xpack.ml.close_job ] returned [ 500 Internal Server Error ] [ { `` error '' : { `` root_cause '' : [ { `` type '' : '' exception '' , '' reason '' : '' Fatal error : 'si_signo 11 , si_code : 1 , si_errno : 0 , address : 0x7f692bfcd56c , library : /var/lib/jenkins/workspace/elastic+elasticsearch+master+g1gc/x-pack/qa/rolling-upgrade/with-system-key/build/cluster/v6.4.0-SNAPSHOT # mixedClusterTestCluster node0/elasticsearch-7.0.0-alpha1-SNAPSHOT/modules/x-pack-ml/platform/linux-x86_64/bin/../lib/libMlMaths.so , base : 0x7f692bd6c000 ,
Uncouple persistent task state and status __EoT__ This pull request removes the relationship between the state of persistent task ( as stored in the cluster state ) and the status of the task ( as reported by the Task APIs and used in various places ) that have been confusing for some time ( # 29608 ) . In order to do that , a new ` PersistentTaskState ` interface is added . This interface represents the persisted state of a persistent task . The methods used to update the state of persistent tasks are renamed : ` updatePersistentStatus ( ) ` becomes ` updatePersistentTaskState ( ) ` and now takes a ` PersistentTaskState ` as a parameter . The ` Task.Status ` type as been changed to ` PersistentTaskState ` in all places were it make sense ( in persistent task customs in cluster state and all other methods that deal with the state of an allocated persistent task ) . Since the task status and task state are both named writeables , the change should be backward compatible and does not require extra serialization/deserialization logic . A node could deserialize the state of a persistent task as a
Remove http status code maps __EoT__ Currently we maintain a compatibility map of http status codes in both the netty4 and nio modules . These maps convert a RestStatus to a netty HttpResponseStatus . However , as these fundamentally represent integers , we can just use the netty valueOf method to convert a RestStatus to a HttpResponseStatus .
Do not run ` sysctl ` for ` vm.max_map_count ` when its already set __EoT__ Context : This fails in a docker container otherwise . The change was inspired by issues getting it working and after researching I found a similar change applied to another project : https : //github.com/spujadas/elk-docker/pull/106 the major difference here is that we include equality in the condition rather than only if its greater than . This was the error I encountered : `` ` Mixlib : :ShellOut : :ShellCommandFailed -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- service [ elasticsearch ] ( /opt/kitchen/cache/cookbooks/elasticsearch/libraries/provider_service.rb line 132 ) had an error : Mixlib : :ShellOut : :ShellCommandFailed : Expected process to exit with [ 0 ] , but received '1' -- -- Begin output of /etc/init.d/elasticsearch start -- -- STDOUT : * Starting Elasticsearch Server ... fail ! STDERR : /etc/init.d/elasticsearch : line 122 : ulimit : max locked memory : can not modify limit : Operation not permitted sysctl : setting key `` vm.max_map_count '' : Read-only file system -- -- End output of /etc/init.d/elasticsearch start -- -- Ran /etc/init.d/elasticsearch start returned 1 `` ` After
TEST : getCapturedRequestsAndClear should be atomic __EoT__ We might lose messages between getCapturedRequestsAndClear calls . This commit makes sure that both getCapturedRequestsAndClear and getCapturedRequestsByTargetNodeAndClear are atomic .
Painless : Fix bug for static method calls on interfaces __EoT__ We were not calling static interface methods correctly leading to errors . Java 8 did n't care , but Java 9+ is stricter . Example -- `` ` java.lang.IncompatibleClassChangeError : Method java.util.Comparator.comparing ( Ljava/util/function/Function ; ) Ljava/util/Comparator ; must be InterfaceMethodref constant `` ` StackOverflow explanation -- ( https : //stackoverflow.com/questions/34360718/invokestatic-on-static-method-in-interface ? utm_medium=organic & utm_source=google_rich_qa & utm_campaign=google_rich_qa )
QA : Fix resolution of default distribution __EoT__ If you run ` ./gradlew -p qa bwcTest -Dtests.distribution=zip ` then we need to resolve older versions of the default distribution . Since those are n't available in maven central , we need add the elastic maven repo to the project .
Extract common http logic to server __EoT__ This is related to # 28898 . With the addition of the http nio transport , we now have two different modules that provide http transports . Currently most of the http logic lives at the module level . However , some of this logic can live in server . In particular , some of the setting of headers , cors , and pipelining . This commit begins this moving in that direction by introducing lower level abstraction ( HttpChannel , HttpRequest , and HttpResonse ) that is implemented by the modules . The higher level rest request and rest channel work can live entirely in server .
Build : Fix the license in the pom zip and tar __EoT__ For 6.3 we renamed the ` tar ` and ` zip ` distributions to ` oss-tar ` and ` oss-zip ` . Then we added new ` tar ` and ` zip ` distributions that contain x-pack and are licensed under the Elastic License . Unfortunately we accidentally generated POM files along side the new ` tar ` and ` zip ` distributions that incorrectly claimed that they were Apache 2 licensed . Oooops . This fixes the license on the POMs generated for the ` tar ` and ` zip ` distributions .
Treat ack timeout more like a publish timeout __EoT__ This PR changes the ack timeout mechanism so that its behavior is closer to the publish timeout , i.e. , it only comes into play after committing a cluster state . This ensures for example that an index creation request with a low ( ack ) timeout value does not return before the cluster state that contains information about the newly created index is even committed .
[ ML ] Add description to ML filters __EoT__ This adds a ` description ` to ML filters in order to allow users to describe their filters in a human readable form which is also editable ( filter updates to be added shortly ) .
More detailed tracing when writing metadata __EoT__ Packaging tests are occasionally failing ( # 30295 ) because of very slow index template creation . It looks like the slow part is updating the on-disk cluster state , and this change will help to confirm this .
[ Tests ] Mutualize fixtures code in BaseHttpFixture __EoT__ Many fixtures have similar code for writing the pid & ports files or for handling HTTP requests . This commit changes the current ExampleFixture in order to make it an abstract BaseHttpFixture class that can be extended for specific testing purposes . This class provides some simple Request and Response classes to represent the HTTP requests and responses and takes care of writing the pid and ports files and starting the HTTP server . It allows to remove duplicated code and forbidden APIs invocations . The current AmazonS3Fixture , GoogleCloudStorageFixture , AzureStorageFixture , and URLFixture have been removed . The AmazonS3TestServer , AzureStorageTestServer , GoogleCloudStorageTestServer have been renamed and now extend BaseHttpFixture . This commit also fixes an issue with the AntFixture that was expecting a false result for the waitCondition ( ) , whereas it should expect ` true ` .
Reenable Checkstyle 's unused import rule __EoT__ Now most unused imports have been removed in # 31207 , we can enable the ` UnusedImports ` check in Checkstyle . It does a good job with latest version of Checkstyle ( updated in # 31269 ) . When a ` { @ link Something } ` javadoc comment is used in a comment block ( non-javadoc ) , the class must be fully qualified .
Reenable Checkstyle 's unused import rule __EoT__ Now most unused imports have been removed in # 31207 , we can enable the ` UnusedImports ` check in Checkstyle . It does a good job with latest version of Checkstyle ( updated in # 31269 ) . When a ` { @ link Something } ` javadoc comment is used in a comment block ( non-javadoc ) , the class must be fully qualified .
Immediately flush channel after writing to buffer __EoT__ This is related to # 27260 . Currently when we queue a write with a channel we set OP_WRITE and wait until the next selection loop to flush the write . However , if the channel does not have a pending write , it is probably ready to flush . This PR implements an optimistic flush logic that will attempt this flush .
Use quotes around path in elasticsearch-cli.bat __EoT__ Looks like a leftover - all other ` .bat ` fails use quotes around path except ` elasticsearch-cli.bat ` . And surely enough , calling the command from a folder with spaces on Windows will lead to errors . This PR fixes that by adding the missing quotes .
move security ingest processors to a sub ingest directory __EoT__ It makes sense to introduce new Security ingest processors ( example : # 31087 ) , and this change would give them a good place to be written .
SQL : Whitelist SQL utility class for better scripting __EoT__ Add SQL class for reusing code inside SQL functions within Painless Fix # 29832
[ Docs ] All Rollup docs experimental , better agg limitations , clarify DeleteJob __EoT__ Putting up for CI , no need for review - All rollup pages should be marked as experimental instead of just the top page - While the job config docs state which aggregations are allowed , adding a section which specifically details this in one place is more convenient for the user - Add a clarification that the DeleteJob API does not delete the rollup data , just the rollup job .
CCS : do n't proxy requests for already connected node __EoT__ Cross-cluster search selects a subset of nodes for each remote cluster and sends requests only to them , which will act as a proxy and properly redirect such requests to the target nodes that hold the relevant data . What happens today is that every time we send a request to a remote cluster , it will be sent to the next node in the proxy list ( in round-robin fashion ) , regardless of whether the target node is already amongst the ones that we are connected to . In case for instance we need to send a shard search request to a data node that 's also one of the selected proxy nodes , we may end up sending the request to it through one of the other proxy nodes . This commit optimizes this case to make sure that whenever we are already connected to a remote node , we will send a direct request rather than using the next proxy node . There is a side-effect to this , which is that round-robin will be a bit unbalanced as the data nodes that are also
Removes experimental tag from scripted_metric aggregation __EoT__
Adds API to assign or change the policy for an index __EoT__ This api will change ` index.lifecycle.name ` for all indexes in the provided pattern as long as they are not currently in the shrink action . Later changes will loosen this restriction so an index is only reject if it is currently in the shrink action AND the diff between the old and new policy includes changes to the shrink action . Also later changes will detect if the current step is not present in the new policy and move the index onto the next available step
[ Rollup ] Metric config parser must use builder so validation runs __EoT__ The parser for the Metric config was directly instantiating the config object , rather than using the builder . That means it was bypassing the validation logic built into the builder , and would allow users to create invalid metric configs ( like using unsupported metrics ) . The job would later blow up and abort due to bad configs , but this is n't immediately obvious to the user since the PutJob API succeeded . /cc @ eskibars
[ ML ] Check licence when datafeeds use cross cluster search __EoT__ Configuring ML datafeeds to use cross cluster search is trivial : define an index pattern for the remote cluster then use that in the datafeed . The datafeed will run against any cluster including pure OSS without x-pack installed or x-pack clusters without a platinum or trial license as required for ML . This change prevents a datafeed using ccs from starting if the remote cluster does not have x-pack installed and a sufficient license , the check is made only when starting a datafeed . **Release Note** If a Machine Learning datafeed is configured to use cross cluster search to retrieve data then the remote clusters must have x-pack installed and a valid licence for Machine Learning . Datafeeds using cross cluster search will not start if the licence requirements are not met .
Add notion of internal index settings __EoT__ We have some use cases for an index setting to only be manageable by dedicated APIs rather than be updateable via the update settings API . This commit adds the notion of an internal index setting . Such settings can be set on create index requests , they can not be changed via the update settings API , yet they can be changed by action on behalf of or triggered by the user via dedicated APIs . Relates # 29823
REST hl client : cluster health to default to cluster level __EoT__ With # 29331 we added support for the cluster health API to the high-level REST client . The transport client does not support the level parameter , and it always returns all the info needed for shards level rendering . We have maintained that behaviour when adding support for cluster health to the high-level REST client , to ease migration , but the correct thing to do is to default the high-level REST client to ` cluster ` level , which is the same default as when going through the Elasticsearch REST layer .
[ ML ] Update test thresholds to account for changes to memory control __EoT__ To avoid temporary failures , I have disabled these tests until elastic/ml-cpp # 122 is committed .
Log warnings when cluster state publication failed to some nodes __EoT__ If the publishing of a cluster state to a node fails , we currently only log it as debug information and only on the master . This makes it hard to see the cause of ( test ) failures when logging is set to default levels . This PR adds a warn level log on the node receiving the cluster state when it fails to deserialise the cluster state and a warn level log on the master with a list of nodes for which publication failed .
Fix AntFixture waiting condition __EoT__ The ` AntFixture ` waiting condition is evaluated to ` false ` but it should be ` true ` .
Ignore numeric shard count if waiting for ALL __EoT__ Today , if ` GET /_cluster/health ? wait_for_active_shards=all ` does not immediately succeed then it throws an exception due to an erroneous and unnecessary call to ` ActiveShardCount # enoughShardsActive ( ) ` . This commit fixes this logic . Fixes # 31151 .
index_prefixes back-compat should test 6.3 __EoT__
Core : Remove plain execute method on TransportAction __EoT__ TransportAction has many variants of execute . One of those variants executes by returning a future , which is then often blocked on by calling get ( ) . This commite removes this variant of execute , instead using a helper method for tests that want to block , or having tests pass in a PlainActionFuture directly as a listener .
Update checkstyle to 8.10.1 __EoT__ This pull request updates the Checkstyle version used in the ` PrecommitTasks ` from ` 7.5 ` to ` 8.10.1 `
Revert upgrade to Netty 4.1.25.Final __EoT__ This reverts upgrading to Netty 4.1.25.Final until we have a cleaner solution to dealing with the object cleaner thread . Relates # 31232
[ DOCS ] Updates machine learning custom URL screenshots __EoT__ This PR updates the documentation and screenshots related to custom URL enhancements .
Fix race in clear scroll __EoT__ Here is the problem : if two threads are racing and one hits a failure freeing a context and the other succeeded , we can expose the value of the has failure marker to the succeeding thread before the failing thread has had a chance to set the failure marker . This is a problem if the failing thread counted down the expected number of operations , then be put to sleep by a gentle lullaby from the OS , and then the other thread could count down to zero . Since the failing thread did not get to set the failure marker , the succeeding thread would respond that the clear scroll succeeded and that makes that thread a liar . This commit addresses by first setting the failure marker before we potentially expose its value to another thread .
[ DOCS ] Clarify audit index settings when indexing to remote __EoT__ Docs do n't mention anything about ` xpack.security.audit.index.settings ` when forwarding events to a remote cluster . This is important because in the case when X-pack security is also installed on the remote cluster , the settings there take precedence . Jay , do you think we should only [ register the audit index template ] ( https : //github.com/elastic/elasticsearch/blob/eaee530778bc5f71cd1fe05335dae21d2907fbbf/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java # L890 ) if ` xpack.security.audit.enabled ` is true ? In this case , when indexing events to a remote with x-pack security installed ( but with auditing turned off , by default ) index settings from local will be picked up . Closes : https : //github.com/elastic/elasticsearch/issues/30422
REST high-level client : add Cluster Health API __EoT__ Relates to # 27205 It 's not a final PR , there are things to discuss and tasks to finish . Want to be sure that I am on a right track . Questions : - There is formatting output parameter 'level ' . Currently , it is used only in REST API . Do we need it in High level client ? **UPD : added** - It can allow to decrease traffic and return empty 'indices ' map if the level is set to 'cluster ' . The same for shards . - Found out that API parameter 'master_timeout ' is n't [ documented ] ( https : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html ) but present in ClusterHealthRequest and parsed in REST Controller . Is it as it should be ? **UPD : added** For discussion in this PR : - Serialize in XContent object name ( in this case 'index ' and 'shardId ' ) **UPD : removed** - Pros : Objects can be XContented without level-up name and still have all fields ; Easier to parse ( including for any other clients ) - Cons : Non-breaking but API change ; A
[ ML ] [ TEST ] Mute tests using rules __EoT__ This is in preparation of pushing the new rules design in the ` ml-cpp ` side . These tests will be switched on again after merging in the new rules implementation .
Support RequestedAuthnContext __EoT__ This implements limited support for RequestedAuthnContext by : - Allowing SP administrators to define a list of authnContextClassRef to be included in the RequestedAuthnContext of a SAML Authn Request - Veirifying that the authnContext in the incoming SAML Asertion's AuthnStatement contains one of the requested authnContextClassRef - Only EXACT comparison is supported as the semantics of validating the incoming authnContextClassRef are deployment dependant and require pre-established rules for MINIMUM , MAXIMUM and BETTER Also adds necessary AuthnStatement validation according to the rules indicated by [ 1 ] and [ 2 ] Resolves # 29995 [ 1 ] https : //docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf 3.4.1.4 , line 2250-2253 [ 2 ] https : //kantarainitiative.github.io/SAMLprofiles/saml2int.html [ SDP-IDP10 ]
Ensure LuceneChangesSnapshot reads in leaf order __EoT__ Today we re-initialize DV instances while we read docs for the snapshot . This is caused by the fact that we sort the docs by seqID which causes then to be our of order . This change sorts documents temporarily by docID , fetches the metadata ( not source ) into a in-memory datastructure and sorts it back . This allows efficient reuse of DV instances .
Add Get Aliases API to the high-level REST client __EoT__ Add Get Aliases API to the high-level REST client Relates to # 27205
Validate xContentType in PutWatchRequest . __EoT__ This closes # 30057 . Trying to post a new watch by executing ` POST _xpack/watcher/watch/my_watch ` without any body will result in a NullPointerException . This change fixes that by validating that POST & PUT requests always have a non-null body . < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your
[ DOCS ] Added 6.3 info & updated the upgrade table . __EoT__
[ DOCS ] Added 6.3 info & updated the upgrade table . __EoT__
Upgrade to Netty 4.1.25.Final __EoT__ This commit upgrades us to Netty 4.1.25 . This upgrade is more challenging than past upgrades , all because of a new object cleaner thread that they have added . This thread requires an additional security permission ( set context class loader , needed to avoid leaks in certain scenarios ) . Additionally , there is not a clean way to shutdown this thread which means that the thread can fail thread leak control during tests . As such , we have to filter this thread from thread leak control . Closes # 31124 , relates netty/netty # 7463 , relates netty/netty # 8014
Enable custom credentials for core REST tests __EoT__ The core REST tests with security currently use a hardcoded username and password . This is not amenable to running these tests in scenarios where the user controls the creation of the cluster and owns the credentials for this cluster . This commit enables running the core REST tests with security with a custom username and password . Relates # 30119
Encapsulate Translog in Engine __EoT__ This removes the abstract ` getTranslog ` method in ` Engine ` , instead leaving it to the abstract implementations of the other methods that use the translog . This allows future Engines not to have a Translog , as instead they must implement the methods that use the translog pieces to return necessary values .
HLRest : Add get index templates API __EoT__ Relates # 27205
Remove all unused imports and fix CRLF __EoT__ The X-Pack opening and the recent other refactorings left a lot of unused imports in the codebase . This commit removes them all . Sadly the Checktyle ` UnusedImports ` rule does not handle all cases when imports are made just for Javadoc , so I left it disabled for now . This commit also fixes some CRLF that have been commited in the MultiSearchActionTookTests.java file .
[ Docs ] Remove mention pattern files in Grok processor __EoT__ Pattern files have been removed in 16fa3e546e172d3d194c2711654824d4851d69f8 ( ~~6.2.4~~ 5.0.0 ) .
Use stronger write-once semantics for Azure repository __EoT__ There 's no need for an extra ` blobExists ( ) ` call when writing a blob to the Azure service . Azure provides an option ( with stronger consistency guarantees ) on the ` upload ` method that guarantees that the blob that 's uploaded does not already exist . This saves one network roundtrip . I have not tested this against the real Azure service , only used the API docs to develop this . @ tlrx can you help me check that this works against the actual Azure service ? Thanks . Relates to # 19749
Do n't swallow exceptions on replication __EoT__ Swallowing these exceptions is dangerous as they can result in replicas going out-of-sync with the primary . Follow-up to # 28571
Limit the number of concurrent requests per node __EoT__ With ` max_concurrent_shard_requests ` we used to throttle / limit the number of concurrent shard requests a high level search request can execute per node . This had several problems since it limited the number on a global level based on the number of nodes . This change now throttles the number of concurrent requests per node while still allowing concurrency across multiple nodes . Closes # 31192
Call ensureNoSelfReferences ( ) on _agg state variable after scripted metric agg script executions __EoT__ I noticed this issue when working on PR # 30111 . @ s1monw committed changes in January in # 28335 checking for self-references in collections that come from scripts . In the case of scripted metric aggs , we have the ` params._agg ` map and ` _aggs ` list that the various involved scripts all modify . The original change added the self-reference check for the result of the combine script , but ` params._agg ` can play effectively the same role for init and map scripts so arguably it should be held to the same standard . This PR adds a similar check after execution of the init , map , and reduce scripts . I also added unit tests for the init , map , and combine cases . Reduce does n't seem to be quite as convenient to unit test ( please correct me if I 'm missing something here ! ) but I did n't see this as a blocker since the existing checks are n't unit tested in general anyway . Another option is to consolidate these test cases
Packaging : Move java version checker back to its own jar __EoT__ The java version checker requires being written with java 7 APIs . In order to use java 8 apis in other launcher utilities , this commit moves the java version checker back to its own jar .
[ test ] add fix for rare virtualbox error __EoT__ See the vagrant issue mentioned in this commit for details . This error has happened a couple times in packaging test CI builds with workers using virtualbox 5.2.10r122088
Fully encapsulate LocalCheckpointTracker inside of the engine __EoT__ This makes the Engine interface not expose the ` LocalCheckpointTracker ` , instead exposing the pieces needed ( like retrieving the local checkpoint ) as individual methods .
Remove dependencies report task dependencies __EoT__ A previous commit tried to add task dependencies for the : distribution : generateDependenciesReport task so that a user did not have to run `` dependenciesInfo : distribution : generateDependenciesReport '' . However this method did not reliably add all task dependencies due to task ordering issues in previous versions of Gradle and our build . This commit removes this for now and a user will continue to have to run `` dependenciesInfo : distribution : generateDependenciesReport '' .
Add recognition of MPL 2.0 __EoT__ This commit adds the ability for the dependencies info check to recognize version 2.0 of the Mozilla Public License .
Fix unknown licenses __EoT__ The goal of this commit is to address unknown licenses when producing the dependencies info report . We have two different checks that we run on licenses . The first check is whether or not we have stashed a copy of the license text for a dependency in the repository . The second is to map every dependency to a license type ( e.g. , BSD 3-clause ) . The problem here is that the way we were handling licenses in the second check differs from how we handle licenses in the first check . The first check works by finding a license file with the name of the artifact followed by the text -LICENSE.txt . Yet in some cases we allow mapping an artifact name to another name used to check for the license ( e.g. , we map lucene- . * to lucene , and opensaml- . * to shibboleth . The second check understood the first way of looking for a license file but not the second way . So in this commit we teach the second check about the mappings from artifact names to license names . We do this by copying
Remove version from license file name for GCS SDK __EoT__ Most of our license file names strip the version off the artifact name when deducing the license filename . However , the version on the GCS SDK ( google-api-services-storage ) does not match the usual format and instead starts with a vee . This means that the license filename for this license ended up carrying the version and we should not do that . This commit adjusts the regex the deduces the license filename to account for this case , and adjusts the google-api-services-storage license files accordingly .
Fully encapsulate LocalCheckpointTracker inside of the engine __EoT__ This makes the Engine interface not expose the ` LocalCheckpointTracker ` , instead exposing the pieces needed ( like retrieving the local checkpoint ) as individual methods .
Add licenses for transport-nio __EoT__ We have a direct dependency on Netty here so we should be attaching the licenses . This is needed for accurate dependency-license reporting .
Remove DocumentFieldMappers # simpleMatchToFullName . __EoT__ The functionality is duplicative of MapperService # simpleMatchToIndexNames . This is another preparatory refactor relating to the field alias work .
Allow to trim all ops above a certain seq # with a term lower than X , … __EoT__ Allow to trim all ops above a certain seq # with a term lower than X , post backport fix Relates to # 10708
Compliant SAML Response destination check __EoT__ Only validate the Destination element of an incoming SAML Response if the SAML Response is signed . The standard [ 1 ] - 3.5.5.2 and [ 2 ] - 3.2.2 does mention that the Destination element is optional and should only be verified when the SAML Response is signed . Some Identity Provider implementations are known to not set a Destination XML Attribute in their SAML responses when those are not signed , so this change also aims to enhance interoperability . [ 1 ] https : //docs.oasis-open.org/security/saml/v2.0/saml-bindings-2.0-os.pdf [ 2 ] https : //docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf
Remove DocumentFieldMappers # smartNameFieldMapper , as it is no longer needed . __EoT__ I think this method is left over from when it was possible to specify ` path ` and ` index_name ` -- hopefully I 'm not missing something .
Allow to trim all ops above a certain seq # with a term lower than X __EoT__ Allow to trim all ops above a certain seq # with a term lower than X Relates to # 10708
SQL : Make a single JDBC driver jar __EoT__ Adds a single JDBC driver jar that shades all external dependencies and bundles all necessary classes . Closes # 29856
Enhance license detection for various licenses __EoT__ This commit enhances the license detection that we have for various licenses . Here we improve the detection for all licenses ( especially the Apache 2.0 License ) , the BSD 2-clause license , the MIT ( with attribution ) license , and we add detection for the BSD 3-clause license . One way that we achieved this improvement is by changing how the license files are read so that rather than reading them as a multi-line string which ended up represented as `` [ line1 , line2 , line3 , ... ] '' internally , we read the full bytes of the license text and replace all whitespace with a single space so the license text is now loaded as `` line1 line2 line3 '' . For the MIT license we add the actual license text and remove the `` MIT '' string as not all copies of the license clearly indicate that the text is the MIT license . We take a similar strategy for the BSD-2 and BSD-3 clause licenses . With this change , we reduce the number of `` custom '' licenses in the codebase from 31 to
[ DOCS ] Add note about long-lived idle connections __EoT__ Clarify that we expect to have idle inter-node connections within the cluster , and that the network needs to be configured not to disrupt these .
Move number of language analyzers to analysis-common module __EoT__ The following analyzers were moved from server module to analysis-common module : ` snowball ` , ` arabic ` , ` armenian ` , ` basque ` , ` bengali ` , ` brazilian ` , ` bulgarian ` , ` catalan ` , ` chinese ` , ` cjk ` , ` czech ` , ` danish ` , ` dutch ` , ` english ` , ` finnish ` , ` french ` , ` galician ` and ` german ` . Relates to # 23658
Default max concurrent search req . numNodes * 5 __EoT__ We moved to 1 shard by default which caused some issues in how many concurrent shard requests we allow by default . For instance searching a 5 shard index on a single node will now be executed serially per shard while we want these cases to have a good concurrency out of the box . This change moves to ` numNodes * 5 ` which corresponds to the default we used to have in the previous version . Relates to # 30783 Closes # 30994
[ ML ] ForecastIT test fix : flush job to ensure all results have been written __EoT__ flush ml job to ensure all results have been written fixes # 31173
Painless : Restructure Spec Documentation __EoT__ This splits general-syntax into the remaining spec sections statements , scripts , functions , lambdas , and regexes . This also splits the operators into different sections in the Painless spec to reduce the size of the original operators page from enormous to manageable . Also includes clean up of the general operators section . Subsequent operators sections will be cleaned up in different PRs . Note this PR looks huge , but it 's actually not . Most of the lines are the split of operators into different pages .
high level REST api : cancel task __EoT__ The goal of this PR is to expose the cancel task functionality from the high level REST client , as part of # 27205 . Still a few things to do on this , but wanted to put it up early in case I 've gone off the rails with any of this . There are three things in particular I am unsure about : 1 - I 'm unhappy with my integration testCase in ` ClusterClientIT ` , some options to make it better include using a similar technique to ` TasksIT.testTasksCancellation ` ( which feels like duplication but an ok approach ) , or alternatively , passing something through that I can write better assertions against somehow . would love thoughts here . 2 - The response for ` cancelTask ` is the same as ` listTasks ` , for the documentation , should I copy paste and change the verb , or just say `` the response is the same '' ? 3 - In terms of testing this locally against a running server , it seems like a valuable thing to do , but does need a task
Enable engine factory to be pluggable __EoT__ This commit enables the engine factory to be pluggable based on index settings used when creating the index service for an index . Relates # 26827
Rename elasticsearch-nio to nio __EoT__ This commit renames : libs : elasticsearch-nio to : libs : nio .
Rename elasticsearch-core to core __EoT__ This commit renames : libs : elasticsearch-core to : libs : core .
Move cli sub-project out of server to libs __EoT__ This commit moves the cli sub-project out of server to libs where it makes more sense .
[ DOCS ] Clarifies recommendation for audit index output type __EoT__ Fixes https : //github.com/elastic/elasticsearch/issues/31139 Also splits the following long page into multiple pages : https : //www.elastic.co/guide/en/elastic-stack-overview/master/auditing.html
Add nio-transport as option for http smoke tests __EoT__ This is related to # 27260 and # 28898 . This commit adds the transport-nio plugin as a random option when running the http smoke tests . As part of this PR , I identified an issue where cors support was not properly enabled causing these tests to fail when using transport-nio . This commit also fixes that issue .
Share common parser in some AcknowledgedResponses __EoT__ Several AcknowledgedResponse implementations only parse the boolean acknowledged flag and then create an instance of their class using that flag . This can be simplified by adding this basic parser to the superclass , provide a common helper method and call the appropriate ctor in the fromXContent methods .
Remove reference to multiple fields with one name __EoT__ If there is only one type per index then each field 's name is unique . Not sure whether this should be backported to 6.x - it still applies there in the sense that indices created in 5.x might still be present . Guidance appreciated .
Remove BlobContainer.move ( ) method __EoT__ This method removes the ` BlobContainer.move ( ) ` method that was wastefully implemented on cloud based repository implementations . closes # 30680
Minor typos in templates.asciidoc __EoT__ Hi All , I 've corrected two minor typos : 1. replaced ` fieldname ` with ` field name ` 2. added a dot Cheers , Rafal < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os )
Add a ` feature_vector ` field . __EoT__ This field is similar to the ` feature ` field but is better suited to index sparse feature vectors . A use-case for this field could be to record topics associated with every documents alongside a metric that quantifies how well the topic is connected to this document , and then boost queries based on the topics that the logged user is interested in . Relates # 27552
Added max_expansion param to span_multi __EoT__ Causes span query to throw exception if term expansions with in multi_term inner query exceeds max_expansion param Example query : { `` span_multi '' : { `` match '' : { `` prefix '' : { `` user '' : { `` value '' : `` ki '' , '' boost '' : 1.08 } } } , '' max_expansions '' : 22 , '' boost '' :1.0 } } I was trying to patch one older version of ES to avoid heap crash , but noticed that its logged as an issue here - https : //github.com/elastic/elasticsearch/issues/27432
Reject long regex in query_string __EoT__ This change applies the existing ` index.max_regex_length ` to regex queries produced by the ` query_string ` query . Relates # 28344
[ TEST ] Make SSL restrictions update atomic __EoT__ ` SSLTrustRestrictionsTests ` updates the restrictions YML file during the test run to change the set of restrictions . This update was small , but it was n't atomic . If the yml file is reloaded while empty or invalid , then it causes all SSL certificates to be considered invalid ( until it is reloaded again ) , which could break the sniffing/administrative client that runs underneath the tests . Relates : # 29989
Fix off-by-one error in chunks coordinator __EoT__ This commit fixes an off-by-error in the chunks coordinator where the batches would be of size one more than the batch size .
Add high-level client methods that accept RequestOptions __EoT__ With # 30490 we have introduced a new way to provide request options whenever sending a request using the high-level REST client . Before you could provide headers as the last argument varargs of each API method , now you can provide ` RequestOptions ` that in the future will allow to provide more options which can be specified per request . This commit deprecates all of the client methods that accept a ` Header ` varargs argument in favour of new methods that accept ` RequestOptions ` instead . For some API we do n't even go through deprecation given that they were not released since they were added , hence in that case we can just move them to the new method .
[ DOCS ] Enables testing for monitoring examples __EoT__ This PR attempts to enable code snippet testing for the monitoring/indices.asciidoc page , which is externalized here : https : //www.elastic.co/guide/en/elasticsearch/reference/master/config-monitoring-indices.html The first example needs to be skipped , however , since it results in the following 404 error otherwise : > 1 > [ 2018-06-05T19:46:44,113 ] [ INFO ] [ o.e.s.XDocsClientYamlTestSuiteIT ] [ test { yaml=en/monitoring/indices/line_11 } ] : after test 1 > [ 2018-06-05T19:46:44,113 ] [ ERROR ] [ o.e.s.XDocsClientYamlTestSuiteIT ] This failing test was generated by documentation starting at en/monitoring/indices.asciidoc : line_11 . It may include many snippets . See Elasticsearch 's docs/README.asciidoc for an explanation of test generation . 2 > REPRODUCE WITH : ./gradlew : x-pack : docs : integTestRunner -Dtests.seed=CF22EFB6F9816360 -Dtests.class=org.elasticsearch.smoketest.XDocsClientYamlTestSuiteIT -Dtests.method= '' test { yaml=en/monitoring/indices/line_11 } '' -Dtests.security.manager=true -Dtests.locale=be -Dtests.timezone=CNT FAILURE 0.40s | XDocsClientYamlTestSuiteIT.test { yaml=en/monitoring/indices/line_11 } < < < FAILURES ! > Throwable # 1 : java.lang.AssertionError : Failure at [ en/monitoring/indices:10 ] : expected [ 2xx ] status code but api [ raw [ method=GET path=_template/.monitoring-* ] ] returned [ 404 Not Found ] [ { } ] > at __randomizedtesting.SeedInfo.seed ( [ CF22EFB6F9816360:4776D06C577D0E98 ] :0 ) > at org.elasticsearch.test.rest.yaml.ESClientYamlSuiteTestCase.executeSection ( ESClientYamlSuiteTestCase.java:373
[ DOCS ] Moves ML node info to docs __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the x-pack/docs/en/node.asciidoc ( which contains information about the machine learning node ) to the docs/reference/modules folder .
Combine accepting selector and socket selector __EoT__ This is related to # 27260 . This commit combines the ` AcceptingSelector ` and ` SocketSelector ` classes into a single ` NioSelector ` . This change allows the same selector to handle both server and socket channels . This is valuable as we do not necessarily want a dedicated thread running for accepting channels . With this change , this commit removes the configuration for dedicated accepting selectors for the normal transport class . The accepting workload for new node connections is likely low , meaning that there is no need to dedicate a thread to this process .
QA : Switch xpack rolling upgrades to three nodes __EoT__ This is much more realistic and can find more issues . This causes the '' mixed cluster '' tests to be run twice so I had to fix the tests to work in that case . In most cases I did as little as possible to get them working but in a few cases I went a little beyond that to make them easier for me to debug while getting them to work . My test changes : 1 . Remove the `` basic indexing '' tests and replace them with a copy of the tests used in the OSS . We have no way of sharing code between these two projects so for now I copy . 2 . Skip the a few tests in the `` one third '' upgraded scenario : * creating a scroll to be reused when the cluster is fully upgraded * creating some ml data to be used when the cluster is fully ugpraded 3 . Drop many `` assert yellow and that the cluster has two nodes '' assertions . These assertions duplicate those made by the wait condition and they fail
Use follower primary term when applying operations __EoT__ The primary shard copy on the following has authority of the replication operations that occur on the following side in cross-cluster replication . Yet today we are using the primary term directly from the operations on the leader side . Instead we should be replacing the primary term on the following side with the primary term of the primary on the following side . This commit does this by copying the translog operations with the corrected primary term . This ensures that we use this primary term while applying the operations on the primary , and when replicating them across to the replica ( where the replica request was carrying the primary term of the primary shard copy on the follower ) .
[ DOCS ] Moves commands to docs folder __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the commands folder and its contents from x-pack/docs/en to docs/reference in the elasticsearch repo It also adds info about the minimum required subscription level for testing purposes .
Give the engine the whole index buffer size on init . __EoT__ Currently the engine is initialized with a hardcoded 256MB of RAM . Elasticsearch may never use more than that for a given shard , ` IndexingMemoryController ` only has the power to flush segments to disk earlier in case multiple shards are actively indexing and use too much memory . While this amount of memory is enough for an index with few fields and larger RAM buffers are not expected to improve indexing speed , this might actually be little for an index that has many fields . Kudos to @ bleskes for finding it out when looking into a user who was reporting a **much** slower indexing speed when upgrading from 2.x to 5.6 with an index that has about 20,000 fields .
Remove extra checks from HdfsBlobContainer __EoT__ Those who fail to read API documentation are doomed to reimplement it . This PR saves one network roundtrip when reading or deleting files from an HDFS repository .
Security : make native realm usage stats accurate __EoT__ The native realm 's usage stats were previously pulled from the cache , which only contains the number of users that had authenticated in the past 20 minutes . This commit changes this so that we pull the current value from the security index by executing a search request . In order to support this , the usage stats for realms is now asynchronous so that we do not block while waiting on the search to complete .
Remove RestGetAllMappingsAction __EoT__ We currently have a specific REST action to retrieve all indices and types mappings , which used internally the get index API . This does n't seem to be required anymore though as the existing ` RestGetMappingAction ` could as well take the requests with no indices and types specified . This commit removes the ` RestGetAllMappingsAction ` in favour of using ` RestGetMappingAction ` also for requests that do n't specify indices nor types .
[ ML ] [ DOCS ] Add example of top N derivative aggregation __EoT__ The current [ documentation ] ( https : //www.elastic.co/guide/en/x-pack/current/ml-configuring-aggregation.html ) for aggregating data in ML datafeeds describes limitations that are no longer accurate in particular the top level aggregation does not need to be a ` date_histogram ` . This updates the restrictions and sdds an example of using a terms agg with a pipeline derivative aggregation which is a commonly asked for use case . Closes # 31091
Fix audit index template upgrade loop __EoT__ Index Audit trail allows the override of the index settings from the template with index settings from the conf file [ here ] ( https : //github.com/elastic/elasticsearch/blob/54740cc551ee36f4bca9526cead71268aba84e46/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java # L894 ) . The [ customAuditIndexSettings ] ( https : //github.com/elastic/elasticsearch/blob/54740cc551ee36f4bca9526cead71268aba84e46/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java # L994 ) function extracts settings which are **not** prefixed by `` index . '' . Conversely , ` IndexTemplateMetaData ` s returned by ` ClusterState # getMetaData ( ) .getTemplates ( ) ` do have index settings prefixed . Hence ` TemplateUpgradeService # calculateTemplateChanges ` returns a template change . The ` putIndexTemplateRequest ` request , with index settings lacking the 'index . ' prefix , is acknoledged because of [ this ] ( https : //github.com/elastic/elasticsearch/blob/54740cc551ee36f4bca9526cead71268aba84e46/server/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java # L78 ) leniency . The template is not changed in effect , and on the next check , ` TemplateUpgradeService # calculateTemplateChanges ` will report changes again , looping .
Move RestGetSettingsAction to RestToXContentListener __EoT__ We are currently using a custom ` RestBuilderListener ` that behaves exactly the same as ` RestToXContentListener ` .
Remove use of deprecated methods to perform request __EoT__ The old perform request methods on the REST client have been deprecated in favor using request-flavored methods . This commit addresses the use of these deprecated methods in the CCR test suite .
[ DOCS ] Clarify nested datatype introduction __EoT__ The original wording caused some confusion as to whether nested documents can be indexed independently from the rest of the root document 's hierarchy
[ Tests ] Fix assertions on parsing exception __EoT__ The structure of the expected exception slightly changed , the change adapts the assertions accordingly . Closes # 31104
[ Docs ] Delete superfluous callouts __EoT__ Closes # 30532
[ Rollup ] Disallow index patterns that match rollup indices __EoT__ We should not allow the user to configure index patterns that also match rollup indices ( either the index specified in the config , or previously created jobs ) . Matching against rollup indices will almost certainly lead to bad behavior , because the expected fields in the user index wo n't exist in the rollup ( due to renaming ) . It is also unlikely a user will want to match against a rollup index . For example , it is quite natural for a user to specify ` metricbeat-* ` as the index pattern , and then store the rollups in ` metricbeat-rolled ` . This will start throwing errors as soon as the rollup index is created because the indexer will try to search it . While we 're at it , we should forbid the index pattern being equal to the rollup index too . /cc @ cdahlqvist
Upgrade to Lucene-7.4.0-snapshot-0a7c3f462f __EoT__ This snapshot includes : - LUCENE-8341 : Record soft deletes in SegmentCommitInfo which will resolve # 30851 - LUCENE-8335 : Enforce soft-deletes field up-front
Add cors support to NioHttpServerTransport __EoT__ This is related to # 28898 . This commit adds cors support to the nio http transport . Most of the work is copied directly from the netty module implementation . Additionally , this commit adds tests for the nio http channel .
[ DOCS ] Fixes example in Defining Roles __EoT__ This PR fixes a syntax error in https : //www.elastic.co/guide/en/elastic-stack-overview/master/defining-roles.html There was a missing comma in the clicks_admin example . This PR also enables code snippet testing for that example .
Allow terms query in _rollup_search __EoT__ This change adds the ` terms ` query to the list of accepted queries for the _rollup_search endpoint .
Share common readFrom/writeTo code in AcknowledgeResponse __EoT__ The majority of Responses inheriting from AcknowledgeResponse implement the readFrom and writeTo serialization method in the same way . Moving this as a default into AcknowledgeResponse and letting the few exceptions that need a slightly different implementation handle this themselves saves a lot of duplication . I do n't know if there is/was other reasons about not doing this in the past , if so I 'd like to learn about them .
TEST : Retry synced-flush if ongoing ops on primary __EoT__ When the last indexing operation is completed , we will fire a global checkpoint sync . Since a global checkpoint sync request is a replication request , it will acquire an index shard permit on the primary when executing . If this happens at the same time while we are issuing the synced-flush , the synced-flush request will fail as it thinks there are in-flight operations . We can avoid such situation by retrying another synced-flush if the current request fails due to ongoing operations on the primary . Closes # 29392
Only auto-update license signature if all nodes ready __EoT__ Allows rolling restart from 6.3 to 6.4 . Relates to https : //github.com/elastic/elasticsearch/issues/30731 # issuecomment-391982558 and # 30251
Add BlobContainer.writeBlobAtomic ( ) __EoT__ This commit adds a new writeBlobAtomic ( ) method to the BlobContainer interface that can be implemented by repository implementations which support atomic writes operations . When the repository does not support atomic writes , this method just delegate the write operation to the usual writeBlob ( ) method . As a follow up method , I think we could just remove the ` BlobContainer.move ( ) ` method now it 's just used during repository verification . Related to # 30680
Add a doc value format to binary fields . __EoT__ This will be necessary for the ` docvalue_fields ` option to work correctly once we use the field 's doc-value format to format doc-value fields . Binary values are formatted as base64-encoded strings . Tagged as a non-issue since it affects unreleased code . This issue was found in the PR testing of # 30831 .
Move caching of the size of a directory to ` StoreDirectory ` . __EoT__ In spite of the existing caching , I have seen a number of nodes hot threads where one thread had been spending all its cpu on computing the size of a directory . I am proposing to move the computation of the size of the directory to ` StoreDirectory ` in order to skip recomputing the size of the directory if no changes have been made . This should help with users that have read-only indices , which is very common for time-based indices .
Clarify docs about boolean operator precedence . __EoT__ Unfortunately , the classic queryparser does not honor the usual precedence rules of boolean operators . See https : //issues.apache.org/jira/browse/LUCENE-3674 .
Docs : remove notes on sparsity . __EoT__ Sparsity is less of a concern since 6.0 . Closes # 30833
API Change : put_mapping : change default ignore_conflicts to false __EoT__ In keeping with my comment about having options default to ` false ` , and having to `` enable '' features with a ` true ` value , perhaps ` ignoreConflicts ` should be renamed to ` warn_on_conflict ` Actually , thinking about it more , I think that ` ignore_conflicts ` is the right name , but that it should default to ` false ` . Silently ignoring a problem seems like the wrong approach . I 'd rather have to take the decision to ignore it myself .
Improve documentation of dynamic mappings . __EoT__ Closes # 30939
Decouple MultiValueMode . __EoT__ Currently this class takes care of both selecting the relevant value , and replacing missing values if any . This is fine for sorting , which always needs to do both at the same time , but we also have a number of aggregations and script utils that need to retain information about missing values so this change proposes to decouple selection of the relevant value and replacement of missing values .
Docs : Clarify constraints on scripted similarities . __EoT__ Scripted similarities provide a lot of flexibility but they still need to obey some rules to not confuse Lucene .
update retry-action to be in line with indices requests __EoT__ The original endpoint was behind ` _xpack ` . It seems like we are moving to a more free-flowing API pattern across _xpack boundaries . This PR updates the retry endpoint to get in line
Update get.asciidoc __EoT__ Fix typo in `` Get '' request documentation .
Upgrade to Lucene-7.4.0-snapshot-0a7c3f462f __EoT__ This snapshot includes : - LUCENE-8341 : Record soft deletes in SegmentCommitInfo which will resolve # 30851 - LUCENE-8335 : Enforce soft-deletes field up-front
Add get mappings support to high-level rest client __EoT__ This adds support for the get mappings API to the high level rest client . Relates to # 27205
Fix index prefixes to work with span_multi __EoT__ Text fields that use ` index_prefixes ` can rewrite ` prefix ` queries into ` term ` queries internally . This commit fix the handling of this rewriting in the ` span_multi ` query . This change also copies the index options of the text field into the prefix field in order to be able to run positional queries . This is mandatory for ` span_multi ` to work but this could also be useful to optimize ` match_phrase_prefix ` queries in a follow up . Note that this change can only be done on indices created after 6.3 since we set the index options to doc only in this version . Fixes # 31056
Upgrade to Lucene-7.4.0-snapshot-0a7c3f462f __EoT__ This snapshot includes : - LUCENE-8341 : Record soft deletes in SegmentCommitInfo which will resolve # 30851 - LUCENE-8335 : Enforce soft-deletes field up-front
Match phrase queries against non-indexed fields should throw an exception __EoT__ I 'll open a separate PR against 6.x to issue a deprecation warning instead of throwing an exception .
In the internal highlighter APIs , use the field type as opposed to the mapper . __EoT__ A preparatory refactor for the work on field aliases .
Enable customizing REST tests blacklist __EoT__ This commit enables adding additional REST tests to the blacklist for builds that already define tests.rest.blacklist . Relates # 30119
[ ML ] Add secondary sort to ML events __EoT__ Adds a secondary sort to ML get scheduled events . Fixes a rare test failure in the yml tests where the order of returned events is not deterministic .
[ Rollup ] Specialize validation exception for easier management __EoT__ Extends ` ActionRequestValidationException ` with a rollup-specific version to make it easier to handle mapping validation issues on the client side . The type will now be ` rollup_action_request_validation_exception ` instead of ` action_request_validation_exception `
Make Persistent Tasks implementations version and feature aware __EoT__ With # 31020 we introduced the ability for transport clients to indicate what features they support in order to make sure we do n't serialize object to them they do n't support . This PR adapts the serialization logic of persistent tasks to be aware of those features and not serialize tasks that are n't supported . Also , a version check is added for the future where we may add new tasks implementations and need to be able to indicate they should n't be serialized both to nodes and clients . As the implementation relies on the interface of ` PersistentTaskParams ` , these are no longer optional . That 's acceptable as all current implementation have them and we plan to make ` PersistentTaskParams ` more central in the future . Relates to # 30731
Remove usage of explicit type in docs __EoT__ Since Elasticsearch is moving away from index types , here is another piece of docs that was updated to reflect that . Feel free to amend in any way you see fit .
Share common readFrom/writeTo code in AcknowledgeResponse __EoT__ The majority of Responses inheriting from AcknowledgeResponse implement the readFrom and writeTo serialization method in the same way . Moving this as a default into AcknowledgeResponse and letting the few exceptions that need a slightly different implementation handle this themselves saves a lot of duplication . I do n't know if there is/was other reasons about not doing this in the past , if so I 'd like to learn about them .
Make Persistent Tasks implementations version and feature aware __EoT__ With # 31020 we introduced the ability for transport clients to indicate what features they support in order to make sure we do n't serialize object to them they do n't support . This PR adapts the serialization logic of persistent tasks to be aware of those features and not serialize tasks that are n't supported . Also , a version check is added for the future where we may add new tasks implementations and need to be able to indicate they should n't be serialized both to nodes and clients . As the implementation relies on the interface of ` PersistentTaskParams ` , these are no longer optional . That 's acceptable as all current implementation have them and we plan to make ` PersistentTaskParams ` more central in the future . Relates to # 30731
Fix wehther/whether typo in watcher conditions documentation __EoT__ Found it when reading the latest documentation here : https : //www.elastic.co/guide/en/x-pack/current/condition.html
Moved pipeline APIs to ingest namespace __EoT__ This PR follows up on this [ discussion ] ( https : //github.com/elastic/elasticsearch/pull/30793 # discussion_r191191584 ) . - [ x ] Requires # 30865 to be merged first .
[ DOCS ] Fixes accounting circuit breaker setting names __EoT__ The documentation for the account circuit breaker listed the settings for it 's limit and overhead to be ` network.breaker.accounting.limit ` and ` network.breaker.accounting.overhead ` when in ` HieratchyCircuitBreakerService ` it seems the settings are actually ` indices.breaker.accounting.limit ` and ` indices.breaker.accounting.overhead ` .
[ DOCS ] Rewords _field_names documentation __EoT__ Corrects the language around when we write to ` _field_names ` and when you might want to disable it given that n recent versions it does not carry the indexing overhead it once did . Relates to # 30862
Index phrases __EoT__ This commit adds an ` index_phrases ` option to text fields , which if enabled creates a subsidiary field containing two-term shingles from the main field . Phrase match queries are then redirected to this subsidiary field .
Make Persistent Tasks implementations version and feature aware __EoT__ With # 31020 we introduced the ability for transport clients to indicate what features they support in order to make sure we do n't serialize object to them they do n't support . This PR adapts the serialization logic of persistent tasks to be aware of those features and not serialize tasks that are n't supported . Also , a version check is added for the future where we may add new tasks implementations and need to be able to indicate they should n't be serialized both to nodes and clients . As the implementation relies on the interface of ` PersistentTaskParams ` , these are no longer optional . That 's acceptable as all current implementation have them and we plan to make ` PersistentTaskParams ` more central in the future . Relates to # 30731
Introduce client feature tracking __EoT__ This commit introduces the ability for a client to communicate to the server features that it can support and for these features to be used in influencing the decisions that the server makes when communicating with the client . To this end we carry the features from the client to the underlying stream as we carry the version of the client today . This enables us to enhance the logic where we make protocol decisions on the basis of the version on the stream to also make protocol decisions on the basis of the features on the stream . With such functionality , the client can communicate to the server if it is a transport client , or if it has , for example , X-Pack installed . This enables us to support rolling upgrades from the OSS distribution to the default distribution without breaking client connectivity as we can now elect to serialize customs in the cluster state depending on whether or not the client reports to us using the feature capabilities that it can under these customs . This means that we would avoid sending a client pieces of the cluster state that
Add TRACE , CONNECT , and PATCH http methods __EoT__ This is related to # 31017 . That issue identified that these three http methods were treated like GET requests . This commit adds them to RestRequest . This means that these methods will be handled properly and generate 405s .
[ DOCS ] Make geoshape docs less memory hungry __EoT__ Reduces shape size and precision in geo shape mapper examples to reduce amount of memory required to check docs . Fixes # 23836
Fix handling of percent-encoded spaces in Windows batch files __EoT__ If you invoke elasticsearch-plugin ( or any other CLI script on Windows ) with a path that has a percent-encoded space ( or any other percent-encoded character ) because the CLI scripts now shell into a common shell script ( elasticsearch-cli ) the percent-encoded space ends up being interpreted as a parameter . For example passing install -- batch file : /c : /encoded % 20 % space/analysis-icu-7.0.0.zip to elasticsearch-plugin leads to the % 20 being interpreted as % 2 followed by a zero . Here , the % 2 is interpreted as the second parameter ( -- batch ) and the InstallPluginCommand class ends up seeing file : /c/encoded -- batch0space/analysis-icu-7.0.0.zip as the path which will not exist . This commit addresses this by escaping the % * that is used to pass the parameters to the common CLI script so that the common script sees the correct parameters without the % 2 being substituted . Closes # 30915
Adds an explain API endpoint __EoT__ This endpoint can be used to explain the current lifecycle state of an index
Introduce client feature tracking __EoT__ This commit introduces the ability for a client to communicate to the server features that it can support and for these features to be used in influencing the decisions that the server makes when communicating with the client . To this end we carry the features from the client to the underlying stream as we carry the version of the client today . This enables us to enhance the logic where we make protocol decisions on the basis of the version on the stream to also make protocol decisions on the basis of the features on the stream . With such functionality , the client can communicate to the server if it is a transport client , or if it has , for example , X-Pack installed . This enables us to support rolling upgrades from the OSS distribution to the default distribution without breaking client connectivity as we can now elect to serialize customs in the cluster state depending on whether or not the client reports to us using the feature capabilities that it can under these customs . This means that we would avoid sending a client pieces of the cluster state that
Ensure that index_prefixes settings can not be changed __EoT__ The existing compatibility checks are at the PrefixFieldType level , but this is never actually called during merges . They should instead be in ` TextFieldMapper # checkCompatibility `
REST high-level client : add delete ingest pipeline API __EoT__ Relates to # 27205 - [ x ] Requires # 30847 to be merged first .
Allow rollup job creation only if cluster is x-pack ready __EoT__ Otherwise we could end up with persistent tasks metadata in the cluster that some of the nodes might not understand in case where the cluster is during rolling upgrade from the default 6.2 to the default 6.3 distribution . Follow-up to # 30743 @ nik9000 any ideas on how we can test this using ` XPackIT ` ? One idea I have is to create a rollup job when ` CLUSTER_TYPE = MIXED ` on the nodes that are upgraded , and then do a follow-up action to check if the cluster is still acknowledging cluster state updates .
Fix interoperability with < 6.3 transport clients __EoT__ With the default distribution changing in 6.3 , clusters might now contain custom metadata that a pure OSS transport client can not deserialize . As this can break transport clients when accessing the cluster state or reroute APIs , we 've decided to exclude any custom metadata that the transport client might not be able to deserialize . This will ensure compatibility between a < 6.3 transport client and a 6.3 default distribution cluster . Note that this PR only covers interoperability with older clients , another follow-up PR will cover full interoperability for > = 6.3 transport clients where we will make it possible again to get the custom metadata from the cluster state . Relates to # 30731
Add an option to split keyword field on whitespace at query time __EoT__ This change adds an option named ` split_queries_on_whitespace ` to the ` keyword ` field type . When set to true full text queries ( ` match ` , ` multi_match ` , ` query_string ` , ... ) that target the field will split the input on whitespace to build the query terms . Defaults to ` false ` . Closes # 30393
[ Tests ] Fix alias names in PutIndexTemplateRequestTests __EoT__ The randomized alias names can contain unicode controll charactes that don't survive an xContent rendering and parsing roundtrip when using the YAML xContent type . This fix filters the randomized unicode string for control characters to avoid this particular problem . Closes # 30911
REST high-level client : add get ingest pipeline API __EoT__ Relates to # 27205 - [ x ] Requires # 30793 to be merged first .
High-level client : list tasks failure to not lose nodeId __EoT__ This commit reworks testing for ` ListTasksResponse ` so that random fields insertion can be tested and xcontent equivalence can be checked too . Proper exclusions need to be configured , and failures need to be tested separately . This helped finding a little problem , whenever there is a node failure returned , the nodeId was lost as it was never printed out as part of the exception toXContent .
[ DOCS ] Fixes links in Stack Overview pages __EoT__ Related to https : //github.com/elastic/stack-docs/pull/51 These files are affected by the restructuring of the Stack Overview content .
Reuse expiration date of trial licenses __EoT__ While updating the license signature to the new license spec , keep the trial license expiration date to that of the existing license irrespective to whether this was a self generated or a registered one . Resolves # 30882
Remove unused query methods from MappedFieldType . __EoT__ * Remove ` MappedFieldType # nullValueQuery ` , as it is now unused . * Remove ` MappedFieldType # queryStringTermQuery ` , as it is never overridden .
CCR : Do not minimize requesting range on leader __EoT__ Today before reading operations on the leading shard , we apply minimization the requesting range with the global checkpoint . However , this might make the request invalid if the following shard generates a requesting range based on the global-checkpoint from a primary shard and sends that request to a replica whose global checkpoint is lagged . Another issue is that we are mutating the request when applying minimization . If the request becomes invalid on a replica , we will retry that mutated request on the primary instead of the original one . This commit removes the minimization and replaces it by a range check with the local checkpoint .
[ DOCS ] Clarify not all PKCS12 usable as truststores __EoT__ Note which *might* be useful for clients which blindly try to use the keystores as trustore .
HLRest : Allow caller to set per request options __EoT__ Updated description based on what I actually committed : This modifies the high level rest client to allow calling code to customize per request options for the bulk API . You do the actual customization by passing a ` RequestOptions ` object to the API call which is set on the ` Request ` that is generated by the high level client . It also makes the ` RequestOptions ` a thing in the low level rest client . For now that just means you use it to customize the headers and the ` httpAsyncResponseConsumerFactory ` and we 'll add node selectors and per request timeouts in a follow up . I only implemented this on the bulk API because it is the first one in the list alphabetically and I wanted to keep the change small enough to review . I 'll convert the remaining APIs in a followup . Original description : This modifies the high level rest client to allow calling code to customize per request options for the bulk API . You do the actual customization by passing a ` Consumer ` to the API call
Remove version read/write logic in Verify Response __EoT__ Since master will always communicate with a > =6.4 node , the logic for checking if the node is 6.4 and conditionally reading and writing based on that can be removed from master . This logic will stay in 6.x as it is the bridge to the cleaner response in master . This also unmutes the failing test due to this bwc change . Closes # 30807
Ensure intended key is selected in SamlAuthenticatorTests __EoT__ Uses a specific keypair for tests that require a purposefully wrong keypair instead of selecting one randomly from the same pull from which the correct one is selected . Entropy is low because of the small space and the same key can be randomly selected as both the correct one and the wrong one , causing the tests to fail . Resolves # 30970
Core : Remove RequestBuilder from Action __EoT__ This commit removes the RequestBuilder generic type from Action . It was needed to be used by the newRequest method , which in turn was used by client.prepareExecute . Both of these methods are now removed , along with the existing users of prepareExecute constructing the appropriate builder directly .
Deprecates indexing and querying a context completion field without context __EoT__ This change deprecates completion queries and documents without context that target a context enabled completion field . Querying without context degrades the search performance considerably ( even when the number of indexed contexts is low ) . This commit targets master but the deprecation will take place in 6.x and the functionality will be removed in 7 in a follow up . Closes # 29222
Refactor Sniffer and make it testable __EoT__ This PR reworks the ` Sniffer ` component to simplify it and make it possible to test it . In particular , it no longer takes out the host that failed when sniffing on failure , but rather relies on whatever the cluster returns . This is the result of some valid comments from # 27985 . Taking out one single host is too naive , hard to test and debug . A new ` Scheduler ` abstraction is introduced to abstract the tasks scheduling away and make it possible to plug in any test implementation and take out timing aspects when testing . Concurrency aspects have also been improved , synchronized methods are no longer required . At the same time , we were able to take # 27697 and # 25701 into account and fix them , especially now that we can more easily add tests . Last but not least , good news is that we now have unit tests for the ` Sniffer ` component , long overdue . Closes # 27697 Closes # 25701
[ Docs ] Fix typo in Min Aggregation reference __EoT__ Simple copy/paste typo .
Make AllocatedPersistentTask.isCompleted ( ) protected __EoT__ This commit changes the isCompleted ( ) method to be protected so that classes that extends AllocatedPersistentTask can use it . Related to # 30858
[ CCR ] Also copy routing_num_shards from leader to follow index . __EoT__ Bug was introduced when create and follow api was added in # 30602
Limit num hits when reading Lucene changes __EoT__ Today we do n't limit the number of hits when reading changes from Lucene index . If the index and the requesting seq # range both are large , the searcher may consume a huge amount of memory . This commit uses a fixed size batch with search_after to avoid the problem .
Fix license on AcitveDirectorySIDUtil __EoT__ This code is from an Apache 2.0 licensed codebase and when we imported it into our codebase it carried the Apache 2.0 license as well . However , during the migration of the X-Pack codebase from the internal private repository to the elastic/elasticsearch repository , the migration tool mistakently changed the license on this source file from the Apache 2.0 license to the Elastic license . This commit addresses this mistake by reapplying the Apache 2.0 license .
Prefer ArrayList over Vector __EoT__ I wanted to push this directly , but we said we should n't , so I did n't .
Add Verify Repository High Level REST API __EoT__ This commit adds Verify Repository , the associated docs and tests for the high level REST API client . A few small changes to the Verify Repository Response went into the commit as well . Relates # 27205
Change ScriptException status to 400 ( bad request ) __EoT__ Currently failures to compile a script usually lead to a ScriptException , which inherits the 500 INTERNAL_SERVER_ERROR from ElasticsearchException if it does not contain another root cause . Issue # 12315 suggests this should be a 400 instead for template compile errors , but I assume more generally for script compilation errors . This changes ScriptException to return 400 ( bad request ) as the status code and changes MustacheScriptEngine to convert any internal MustacheException to the more general ScriptException . Closes # 12315
REST high-level client : add synced flush API ( 2 ) __EoT__ Relates to # 27205 Continuation of # 29189
Cross Cluster Search : do not use dedicated masters as gateways __EoT__ When we are connecting to a remote cluster we should never select dedicated master nodes as gateway nodes , or we will end up loading them with requests that should rather go to other type of nodes e.g . data nodes or coord_only nodes . This commit adds the selection based on the node role , to the existing selection based on version and potential node attributes . Closes # 30687
Fix ` AliasMetaData # fromXContent ` parsing __EoT__ While working on # 28799 , it was detected that ` AliasMetaData ` is not correctly parsed . This PR fixes the issue and adds dedicated XContent tests as well .
Fsync state file before exposing it __EoT__ With multiple data paths , we write the state files for index metadata to all data paths . We only properly fsync on the first location , though . For other locations , we possibly expose the file before its contents is properly fsynced . This can lead to situations where , after a crash , and where the first data path is not available anymore , ES will see a partially-written state file , preventing the node to start up .
Add missing_bucket option in the composite agg __EoT__ This change adds a new option to the composite aggregation named ` missing_bucket ` . This option can be set by source and dictates whether documents without a value for the source should be ignored . When set to true , documents without a value for a field emits an explicit ` null ` value which is then added in the composite bucket . The ` missing ` option that allows to set an explicit value ( instead of ` null ` ) is deprecated in this change and will be removed in a follow up ( only in 7.x ) . This commit also changes how the big arrays are allocated , instead of reserving the provided ` size ` for all sources they are created with a small intial size and they grow depending on the number of buckets created by the aggregation : Closes # 29380
Rename index_prefix to index_prefixes __EoT__ To bring it into line with ` index_phrases ` . Also adds index-prefixes tests to TextFieldMapperTests
Rename methods in PersistentTasksService __EoT__ This pull request is a first step in removing the confusion between the _status_ of a task and the _state_ of a persistent task ( # 29608 ) It renames some methods in the PersistentTasksService as these methods are not about waiting for a task to reach a given status but instead just waiting for a predicate to be evaluated to true - ` waitForPersistentTaskStatus ` - > ` waitForPersistentTask ` - ` waitForPersistentTasksStatus ` - > ` waitForPersistentTasks ` It also renames some methods to make obvious that the methods send requests in order to change the state of the persistent tasks : - ` startPersistentTask ` - > ` sendStartRequest ` - ` sendTaskManagerCancellation ` - > ` sendCancelRequest ` - ` sendCompletionNotification ` - > ` sendCompletionRequest ` - ` updateStatus ` - > ` sendUpdateStateRequest ` It also adds a bit of documentation .
add _retry API to index lifecycle policies __EoT__ This API adds the ability to re-run a policy for an index that encountered an error ( moved to error step )
Use dedicated ML APIs in tests __EoT__ ML has dedicated APIs for datafeeds and jobs yet base test classes and some tests were relying on the cluster state for this state . This commit removes this usage in favor of using the dedicated endpoints . Relates # 30731 , relates # 30857
[ DOCS ] Remove reference to platinum Docker image __EoT__
Minor clean-up in InternalRange . __EoT__ * Make sure all instance variables are final . * Make generateKey a private static method , instead of protected . * Rename formatter - > format for consistency . * Pull the stream serialization logic for buckets into the Bucket class . * Serialize bucket keys as strings , as opposed to optional strings .
stable filemode for zip distributions __EoT__ Applies default file and directory permissions to zip distributions similar to how they 're set for the tar distributions . Previously zip distributions would retain permissions they had on the build host's working tree , which could vary depending on its umask For # 30799
[ DOCS ] Adds missing TLS settings for auditing __EoT__ Fixes https : //github.com/elastic/elasticsearch/issues/29692
[ test ] packaging : use shell when running commands __EoT__ When subprocesses are started with ProcessBuilder , they 're forked by the java process directly rather than from a shell , which can be surprising for our use case here in the packaging tests which is similar to scripting . This commit changes the tests to run their subprocess commands in a shell , using the bash -c < script > syntax for commands on linux and using the powershell.exe -Command < script > syntax for commands on windows . This syntax on windows is essentially what the tests were already doing . Once # 30825 is merged I 'll add a commit here to update the packaging test readme , but figured I might as well get this up first
Fix location of AbstractHttpServerTransport __EoT__ Currently AbstractHttpServerTransport is in a netty4 module . This is the incorrect location . This commit moves it out of netty4 module . Additionally , it moves unit tests that test AbstractHttpServerTransport logic to server .
Move keyword tokenizer to analysis-common module __EoT__ Relates to # 23658
Upgrade to Lucene-7.4-snapshot-1cbadda4d3 __EoT__ This snapshot includes LUCENE-8328 which is needed to stabilize CCR builds .
Limit the scope of BouncyCastle dependency __EoT__ The goal of this PR is to limit the scope of the runtime dependency on BouncyCastle so that it can be eventually removed . Users might need to run Elasticsearch in a JVM which is in a FIPS-140 approved mode offered by Bouncy Castle FIPS Security Provider and using BouncyCastle and BouncyCastleFIPS together will case JAR hell . BouncyCastle still needs to be used in CLI tools ( ` certutil ` ) since there 's no Java API for generating keys and certificates [ 1 ] * Splits functionality related to reading and generating certificates and keys in two utility classes so that reading certificates and keys does n't require BouncyCastle . * Implements a class for parsing PEM Encoded key material ( which also adds support for reading PKCS8 encoded encrypted private keys ) . * Removes BouncyCastle dependency for all of our test suites ( except for the tests that explicitly test certificate generation ) by using pre-generated keys/certificates/keystores . [ 1 ] https : //bugs.openjdk.java.net/browse/JDK-8058778
[ DOCS ] Reset edit links __EoT__ Fixes https : //github.com/elastic/elasticsearch/issues/30883
Fix IndexTemplateMetaData parsing from xContent __EoT__ We failed to register `` aliases '' and `` version '' into the list of keywords in the IndexTemplateMetaData ; then fail to parse the following index template . `` ` { `` aliases '' : { `` log '' : { } } , `` index_patterns '' : [ `` pattern-1 '' ] } `` ` This commit registers that missing keywords .
Fix AzureStorageServiceTests and remove log traces __EoT__ This commit removes some log traces in ` AzureStorageServiceImpl ` and also fixes the ` AzureStorageServiceTests ` so that is uses the real implementation to create Azure clients .
Deprecate accepting malformed requests in stored script API __EoT__ The stored scripts API today accepts malformed requests instead of throwing an exception . This PR deprecates accepting malformed put stored script requests ( requests not using the official script format ) . Relates to # 27612
Move list tasks API under tasks namespace __EoT__ Our API spec define the tasks API as e.g . tasks.list , meaning that they belong to their own namespace . This commit moves them from the cluster namespace to their own namespace . Relates to # 29546
Replace some try-finally statements __EoT__ This change replaces some existing try-finally statements that close resources in their finally block with the slightly more readable and safer try-with-resources .
Remove AllocatedPersistentTask.getState ( ) __EoT__ This commit removes the method ` AllocatedPersistentTask.getState ( ) ` and replaces it with a new ` isCompleted ( ) ` method . The ` getState ( ) ` method is related to the persistent task framework and exposes an internal state . In the current situation , classes that extend ` AllocatedPersistentTask ` could override it and this could lead to issues . By removing this method we also allow such classes to provide their own getState ( ) implementation that could expose their custom state . Related to # 29608
[ CCR ] Sync mappings between leader and follow index __EoT__ The shard changes api returns the minimum IndexMetadata version the leader index needs to have . If the leader side is behind on IndexMetadata version then follow shard task waits with processing write operations until the mapping has been fetched from leader index and applied in follower index in the background . The cluster state api is used to fetch the leader mapping and put mapping api to apply the mapping in the follower index . This works because put mapping api accepts fields that are already defined . Relates to # 30086
Limit user to single concurrent auth per realm __EoT__ This commit reworks the way our realms perform caching in order to limit each principal to a single ongoing authentication per realm . In other words , this means that multiple requests made by the same user will not trigger more that one authentication attempt at a time if no entry has been stored in the cache . If an entry is present in our cache , there is no restriction on the number of concurrent authentications performed for this user . This change enables us to limit the load we place on an external system like an LDAP server and also preserve resources such as CPU on expensive operations such as BCrypt authentication . Closes # 30355
Include size of snapshot in snapshot metadata __EoT__ < ! -- If you are filing a feature request , please remove the above bug report block and provide responses for all of the below items . -- > Feature : add snapshot size to snapshot metadata . While the snapshot size ( as a snapshot ) on disk may not have much relevance because of the additive nature of snapshots ( segments may already exist in the repository , so data transferred may be less than the total , and deleting a snapshot may not release all of the disk space because some segments may be retained for other snapshots ... ) , it should be easy to capture the total size of the snapshot as it will require disk space to be restored , and this is an information which can be very useful when trying to determine before executing a restore , whether there is enough disk space on the target cluster .
[ CCR ] Add create and follow api __EoT__ This PR adds a new api that creates the follow index and starts the follow changes from leader index into the newly created follow index . The api looks the same as the existing follow index api , with the big difference that it creates the follow index . The create and follow api , creates a follow index based on the IndexMetaData of the leader index , then waits for the shards to become available and the delegate to the existing follow index api . Relates to # 30102
Add public key header/footer __EoT__ A previous commit added the public key used for signing artifacts to the plugin CLI . This commit is an iteration on that to add the header and footer to the key so that it is clear what the key is . Instead , we strip the header/footer on read . With this change we simplify our test where keys already in this format are generated and we had to strip on the test side .
SQL : Remove the last remaining server dependencies from jdbc __EoT__ Removes the last remaining server dependencies from jdbc client . In order to do that it introduces the new project sql-shared-proto that contains only XContent-serializable classes . HTTP Client and JDBC now depend only on sql-shared-proto . I had to keep the original sql-proto project since it is used as a dependency by sql-cli and security integration tests . Relates # 29856
Do not serialize basic license exp in x-pack info __EoT__ This is a bug that was identified by the kibana team . Currently on a get-license call we do not serialize the hard-coded expiration for basic licenses . However , the kibana team calls the x-pack info route which still does serialize the expiration date . This commit removes that serialization in the rest response .
Change BWC version for VerifyRepositoryResponse __EoT__ The BWC version was previously at 7.0 , because the 6.x backport had not yet landed . Now that it has landed , this commit replaces the BWC compat with the real version , 6.4.0 . Relates # 30762
remove requirement for shards/replicas in allocation check steps __EoT__ As we are preparing to support policy updates/changes , we noticed that restricting allocation wait steps with pinned replicas/shard counts makes this difficult to continue from . For example , as user may update or switch a policy to increase replicas . If this is done , then the check will never pass and user intervention will be required . If we simply remove this restriction , we still check that the index is allocated correctly , but without depending on the newly configured replicas setting in the policy .
Document index name limitations __EoT__ We have a number of limitations on how indices can be named , but those limitations do n't appear to be documented anywhere . This PR adds those limitations as a callout at the top of the CreateIndex API docs . It also tidies the opening section a bit , removes reference to a yaml example that does n't exist , etc .
Verify signatures on official plugins __EoT__ We sign our official plugins yet this is not well-advertised and not at all consumed during plugin installation . For plugins that are installed over the intertubes , verifying that the downloaded artifact is signed by our signing key would establish both integrity and validity of the downloaded artifact . The chain of trust here is simple : our installable artifacts ( archive and package distributions ) are signed so that if a user trusts our packages via their signatures , and our plugin installer ( which would be executing trusted code ) verifies the downloaded plugin , then the user can trust the downloaded plugin too . This commit adds verification of official plugins downloaded during installation . We do not add verification for offline plugin installs ; a user can download our signatures and verify the artifacts themselves . This commit also needs to solve a few interesting challenges . One of these is that we want the bouncy castle JARs on the classpath only for the plugin installer , but not for the runtime Elasticsearch . Additionally , we want these JARs to not be present for the JAR hell checks
Correct yaml formatting fix __EoT__ Minor tweak to fix an example yaml config .
Move score script context from SearchScript to its own class __EoT__
Fix bad version check writing Repository nodes __EoT__ The writeTo method of VerifyRepositoryResponse incorrectly used its local version to determine what it was receiving , rather than the sender 's version . This fixes a bug that ocassionally happened when a 6.4 master node sent data to a 7.0 client , causing the number of bytes to be improperly read . This also unmutes the test . Closes # 30807
Remove Throwable usage from transport modules __EoT__ Currently nio and netty modules use the ` CompletableFuture ` class for managing listeners . This is unfortunate as that class accepts ` Throwable ` . This commit adds a class ` CompletableContext ` that wraps the ` CompletableFuture ` but does not accept ` Throwable ` . This allows the modification of netty and nio logic to no longer handle ` Throwable ` .
REST high-level client : add put ingest pipeline API __EoT__ Relates to # 27205
Use geohash cell instead of just a corner in geo_bounding_box __EoT__ Treats geohashes as grid cells instead of just points when the geohashes are used to specify the edges in the geo_bounding_box query . For example , if a geohash is used to specify the top_left corner , the top left corner of the geohash cell will be used as the corner of the bounding box . Closes # 25154
[ Tests ] Move templated ` _rank_eval ` tests __EoT__ This change moves the ranking evaluation tests that use templates to the existing yml rest tests instead of extending ESIntegTestCase . Closes # 30628
Security : fix dynamic mapping updates with aliases __EoT__ This commit fixes an issue with dynamic mapping updates when an index operation is performed against an alias and when the user only has permissions to the alias . Dynamic mapping updates resolve the concrete index early to prevent issues so the information about the alias that the triggering operation was being executed against is lost . When security is enabled and a user only has privileges to the alias , this dynamic mapping update would be rejected as it is executing against the concrete index and not the alias . In order to handle this situation , the security code needs to look at the concrete index and the authorized indices of the user ; if the concrete index is not authorized the code will attempt to find an alias that the user has permissions to update the mappings of . Closes # 30597
Ensure that ip_range aggregations always return bucket keys . __EoT__ Addresses # 21045 .
Move watcher-history version setting to _meta field __EoT__ The ` .watcher-history-* ` template is currently using a plugin-custom index setting ` xpack.watcher.template.version ` , which prevents this template from being installed in a mixed OSS / X-Pack cluster , ultimately leading to the situation where an X-Pack node is constantly spamming an OSS master with ( failed ) template updates . Other X-Pack templates ( e.g . ` security-index-template ` or ` security_audit_log ` ) achieve the same versioning functionality by using a custom ` _meta ` field in the mapping instead . This commit switches the ` .watcher-history-* ` template to use the ` _meta ` field instead . Relates to # 30731
Changes PhaseAfterStep to take the name of the previous phase __EoT__ This changes the way the phase after step is built so its key has the phase name of the phase that preceeds it rather than the phase that follows it . This is more intuitive to the user since the index is in the warm phase until the after condition for the cold phase is met .
[ Docs ] Explain incomplete dates in range queries __EoT__ The current documentation is n't very clear about how incomplete dates are treated when specifying custom formats in a ` range ` query . This change adds a note explaining how missing month or year coordinates translate to dates that have the missings slots filled with unix time start date ( 1970-01-01 ) Closes # 30634
The setAvoidFirstLastClipping of XAxis does n't work as expected __EoT__ Hi : I have issue on my phone , when I have setAvoidFirstLastClipping as true , the XAxis 's last label entry in the chart `` clip '' off the edge of the screen . Here is my code : lineChart.getXAxis ( ) .setAvoidFirstLastClipping ( true ) ; lineChart.getXAxis ( ) .setLabelCount ( 3 , true ) ; lineChart.setData ( new LineData ( dataSets ) ) ; xDataList.add ( `` 2018-01.01 '' ) ; xDataList.add ( `` 2018-01.02 '' ) ; xDataList.add ( `` 2018-01.03 '' ) ; xDataList.add ( `` 2018-01.04 '' ) ; xDataList.add ( `` 2018-01.05 '' ) ; xDataList.add ( `` 2018-01.06 '' ) ; xDataList.add ( `` 2018-01.07 '' ) ; xDataList.add ( `` 2018-01.08 '' ) ; xDataList.add ( `` 2018-01.09 '' ) ; xDataList.add ( `` 2018-01.10 '' ) ; xDataList.add ( `` 2018-01.11 '' ) ; xDataList.add ( `` 2018-01.12 '' ) ; xDataList.add ( `` 2018-01.13 '' ) ; xDataList.add ( `` 2018-01.14 '' ) ; xDataList.add ( `` 2018-01.15 '' ) ; xDataList.add ( `` 2018-01.16 '' ) ; xDataList.add ( `` 2018-01.17 '' ) ; xDataList.add ( `` 2018-01.18
LineDataSet circle color inherits alpha from other LineDataSet __EoT__ I just stepped from 3.0.0-beta1 to 3.0.1 and am experiencing a problem with the circle color of the LineDataSet . Currently I have two LineDataSets , one with a solid colored line + circles and one with a dashed line with 54 % black . My issue is that the alpha of the dashed line is applied to the circles , causing them to appear in a different color than the line , even tho the same color is used in the setters . int styleColor = 0xFFFF00FF ; dataSet1.setColor ( styleColor ) ; dataSet1.setCircleColor ( styleColor ) ; int dashedColor = 0x8A000000 ; dataSet2.setColor ( dashedColor ) ; dataSet2.enableDashedLine ( DASHED_LINE_LENGTH , DASHED_SPACE_LENGTH , DASHED_PHASE ) ; If I change the dashed color to a solid color instead , the problem goes away : int dashedColor = 0xFF000000 ; ! [ mpandroidchartbug ] ( https : //cloud.githubusercontent.com/assets/1384547/21451766/f00f18a8-c901-11e6-8420-4ac1836df756.png ) **EDIT : ** I just checked and the issue is also present in v3.0.0 ( non-beta )
Pie slice is NOT showing properly __EoT__ I am rendering a Pie chart with proper data into my Android application . The initial view of Pie is NOT showing few slices . But when I click on the slice it is shown properly . Before click : ! [ image ] ( https : //cloud.githubusercontent.com/assets/803713/19941942/0f1c7f64-a158-11e6-8355-b5cfb3589234.png ) After click : ! [ image ] ( https : //cloud.githubusercontent.com/assets/803713/19941962/1cee0af4-a158-11e6-91d3-c7622c68e950.png )
Suggestion : make chart description into a ComponentBase __EoT__ It seems to me that the API would be a bit cleaner if a Chart 's description were a ` ComponentBase ` subclass ( same as Legends and Axes ) instead of having separate methods in ` Chart ` to configure its visual properties . This would entail removing the following methods from ` Chart ` : - ` setDescription ( ) ` - ` setDescriptionPosition ( ) ` - ` setDescriptionTypeface ( ) ` - ` setDescriptionTextSize ( ) ` - ` setDescriptionColor ( ) ` And adding a new ` getDescription ( ) ` method there returning a subclass of ` ComponentBase ` with a single extra property , i.e . ` getText ( ) ` / ` setText ( ) ` . This would seem to be somewhat of a breaking change , of course . So I wanted your input before I try to make the changes and submit a pull request .
Legend not possible for dashed lines __EoT__ If a graph have a dashed line and a solid line , one can not specify the legend should have a dashed line , only solid lines . I would assume the solution would be to include a DASHED item to Legend.java ( in LegendForm ) , and the rendering hereof in LegendRender.java Line after the LINE case ) .
Different line widths , though set to the same width . __EoT__ I just started to implement your library and I have the issue at the bar and line chart , that the horizontal lines to the labels have different width . When I force to make 4 labels , it draws the 2 inside in 2.0f as I need it , but the highest and lowest line in another width , which I have n't specified . They should all have the same width . I checked for days the Wiki and tried around , but there was n't really regarding this . Also interesting is , that if I do n't specify a grid line width at all , it draws them in their default width - but even there are the highest and lowest line thinner than the lines between .
Use PieChart : When a slice is smaller than 0.1 % , the chart background changed it ` s color to this slice __EoT__ PieChartRenderer.drawDataSet ( ) : if ( sweepAngleOuter % 360f == 0.f ) { // Android is doing `` mod 360 '' mPathBuffer.addCircle ( center.x , center.y , innerRadius , Path.Direction.CCW ) ; } in this case sweepAngleOuter ==0
How to show the X-labels on the marker view in LineChart ? ? __EoT__ `` ` public class MymarkerView extends MarkerView { private TextView indices ; public MymarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; indices = ( TextView ) findViewById ( R.id.indices ) ; } // callbacks everytime the MarkerView is redrawn , can be used to update the // content ( user-interface ) @ Override public void refreshContent ( Entry e , Highlight highlight ) { indices.setText ( `` Indices : '' +e.getVal ( ) ) ; } @ Override public int getXOffset ( float xpos ) { // this will center the marker-view horizontally return - ( getWidth ( ) / 2 ) ; } @ Override public int getYOffset ( float ypos ) { // this will cause the marker-view to be above the selected value return -getHeight ( ) ; } @ Override public void draw ( Canvas canvas , float posx , float posy ) { // take offsets into consideration posx += getXOffset ( posx ) ; posy=0 ; // AVOID OFFSCREEN if ( posx < 60 ) posx=60 ; if ( posx > 360
setVisible ( false ) of dataset removes the line but not its label __EoT__ mChart.getData ( ) .getDataSetByIndex ( 0 ) .setVisible ( false ) removes the line but not its label . It should remove also the label .
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Canvas.clipPath ( ... ) crash when too many filled Entries __EoT__ In Line chart when i increase first seekBar and when it reaches to approx value 350 app restarts it self . I have attached zip file containing video of problem . I tested this thing on Nexus 6 . But not able to reproduc on nexus 4 . [ MPAndroidChart Problem.zip ] ( https : //github.com/PhilJay/MPAndroidChart/files/324989/MPAndroidChart.Problem.zip )
Canvas.clipPath ( ... ) crash when too many filled Entries __EoT__ In Line chart when i increase first seekBar and when it reaches to approx value 350 app restarts it self . I have attached zip file containing video of problem . I tested this thing on Nexus 6 . But not able to reproduc on nexus 4 . [ MPAndroidChart Problem.zip ] ( https : //github.com/PhilJay/MPAndroidChart/files/324989/MPAndroidChart.Problem.zip )
Canvas.clipPath ( ... ) crash when too many filled Entries __EoT__ In Line chart when i increase first seekBar and when it reaches to approx value 350 app restarts it self . I have attached zip file containing video of problem . I tested this thing on Nexus 6 . But not able to reproduc on nexus 4 . [ MPAndroidChart Problem.zip ] ( https : //github.com/PhilJay/MPAndroidChart/files/324989/MPAndroidChart.Problem.zip )
Programmatically deselect value on piechart __EoT__ Hi ! If I click a value on a piechart it gets selected , and when I then call highlightValues ( ... ) or highlightTouch ( ... ) with a null argument , it looks deselected . But the next click on the graphic is ignored . It 's as if the value is not highlighted but is still selected . Is there a way to really deselect a value ( just like a real click would ) ? Thanks !
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Eliminate GC-induced stuttering during animations by eliminating wasteful allocations __EoT__ I noticed that the Realtime chart demo can stutter due to many repeated and wasteful allocations in sections of code that are called in each update of the data , and it would be great to smooth out the animations and remove stuttering . I 've so far identified , verified , and tested ways to reduce the number of allocations by approximately 70 % and memory consumed by about 30 % , with an attendant improvement in animation quality through various means , such as : 1 . Eliminating the use of convenience iterations in favor of old fashioned iteration . for ( ; ; ) { } instead of for ( Object foo : inSet ) { } 2 . Caching the results of String Formatting and using those cached results when the value in the dataset has not changed 3 . Using field level references to store short-lived instances within methods and re-setting them instead of instantiating a new one eg 1 : instead of instantiating a float [ ] temp = new float [ 2 ] ; inside a method declare the float [ ] as
Fix/barchart dasheffect __EoT__ Hi @ PhilJay , First of all , I ca n't thank you enough for all the great job you 've done ! This PR is a minor fix from a previously merged feature allowing developers to add dash effect on grid lines . Unfortunately , this feature was not plugged for both ` BarChart ` and ` HorizontalBarChart ` renderers . I saw few open issues from the backlog that addresses this issue so I 'm confident that it will help other users that faced my issue while doing this . Cheers , Stephen
HorizontalBarChart setVisibleXRangeMaxmum not working . __EoT__ Also posted at : [ http : //stackoverflow.com/questions/37628270/mpandroidchart-horizontalbarchart-setvisiblexrangemaxmum-not-working ] ( http : //stackoverflow.com/questions/37628270/mpandroidchart-horizontalbarchart-setvisiblexrangemaxmum-not-working ) I asked this question at stackoverflow two days ago but no one answer . I just want let the chart show about 10 items in x direction of HorizontalBarChart . I setVisibleXRangeMinimum and setVisibleXRangeMaxmum but it not working . What should i do to make it work ? ? ?
MarkerView : diffrerent xVals and yVals lag __EoT__ I 've got problem with LineChart . At the moment I 'm using it to shome values in time . There is no time series in MPAndroidChart that 's why I 'm using simple indexing to do it ( after suggersion in other thread from @ PhilJay # 12 ) So : _It is not necessary that each possible index on the x-axis ( ranged from 0 to 365 ) is bound to a value._ That 's right . I 've got for example XAxis with 365 values and YAxis with 20 values . I 'm using MarkerView - if the number of values if diferent it 's hard to use them . We have something we can call `` lag '' . Trying to drag over values generates some `` lag '' . But it 's not connected with the size of data . I 'm calling it lag because it looks like a lag . I 've been trying to fix it - no luck . For example chart is super smooth if you 'll add dummy YAxis with the same number of values . I 've been trying to
NullPointerException in PieChart - drawHole __EoT__ Thanks for the library , it is a life saver . I have currently about 600k users using my app which uses MPAndroidChart . About 100 of these users are getting random NullPointerException in PieChart - drawHole . Granted 100 is n't that big of a number relative to 600k total users , but if possible I 'd like to get to the bottom of it . Since I am using the .aar file instead of importing the source code in my app , I am unable to fix it , or at least catch the exception on my end . Can you point me to the call that invokes onDraw for a PieChart so i can put a try-catch around it ? Is it invalidate ( ) ? Here 's the stack trace : Fatal Exception : java.lang.NullPointerException : Attempt to invoke virtual method 'void android.graphics.Canvas.drawCircle ( float , float , float , android.graphics.Paint ) ' on a null object reference at com.github.mikephil.charting.renderer.PieChartRenderer.drawHole ( SourceFile:277 ) at com.github.mikephil.charting.renderer.PieChartRenderer.drawExtras ( SourceFile:250 ) at com.github.mikephil.charting.charts.PieChart.onDraw ( SourceFile:122 ) at android.view.View.draw ( View.java:16068 ) at android.view.View.updateDisplayListIfDirty ( View.java:14999 ) at android.view.View.getDisplayList ( View.java:15022 ) at android.view.ViewGroup.recreateChildDisplayList
Fill color between two line charts __EoT__ It would be great if LineDataSet have methods which would allow to fill color the region between two lines . Thank you
ValueFormatter is overwritten by calculating default ValueFormatter __EoT__ The following code will not set the ValueFormatter for the chart because the chart overwrites the ValueFormatter during setData ( ) because it thinks it 's a default value formatter . `` ` jobStatusData = new PieData ( xVals , dataSet ) ; // this will be overwritten when setData ( ) is called . jobStatusData.setValueFormatter ( new DefaultValueFormatter ( 0 ) ) ; jobStatusData.setValueTextSize ( 11f ) ; jobStatusData.setValueTextColor ( Color.WHITE ) ; jobStatusChart.setData ( jobStatusData ) ; `` ` In the code to setData ( ) we find this block : `` ` calculateFormatter ( data.getYMin ( ) , data.getYMax ( ) ) ; for ( IDataSet set : mData.getDataSets ( ) ) { if ( Utils.needsDefaultFormatter ( set.getValueFormatter ( ) ) ) set.setValueFormatter ( mDefaultFormatter ) ; } `` ` In ` Utils.needsDefaultFormatter ( ) ` it simply looks for null and if the instance is a DefaultValueFormatter object . Now first null value ca n't happen the way the code is written in BaseDataSet where it always returns a new instance of DefaultValueFormatter when its null , and setValueFormatter ( ) always blocks setting a value formatter to
Scrolling when Y-Axis is Inverted without any Datapoint __EoT__ The Scrolling missbehaves ( wrong direction ) with an empty chart whithout any datapoint : Code for Reproduction : ` LineChart chart = ( LineChart ) getActivity ( ) .findViewById ( R.id.chart ) ; `` ` LineData data = new LineData ( ) ; List < String > values=new ArrayList < > ( ) ; for ( int x=0 ; x < =240 ; x++ ) { values.add ( `` '' +x ) ; } data.setXVals ( values ) ; chart.setData ( data ) ; chart.setVisibleXRange ( 0,30 ) ; chart.setDescription ( getResources ( ) .getString ( R.string.dive_profile ) ) ; chart.getAxisRight ( ) .setEnabled ( false ) ; YAxis depthAxis = chart.getAxisLeft ( ) ; depthAxis.setInverted ( true ) ; depthAxis.setAxisMaxValue ( 300 ) ; depthAxis.setAxisMinValue ( 0 ) ; XAxis timeAxis = chart.getXAxis ( ) ; timeAxis.setAxisMinValue ( 0 ) ; timeAxis.setAxisMaxValue ( 240 ) ; timeAxis.setEnabled ( true ) ; timeAxis.setDrawGridLines ( true ) ; timeAxis.setValues ( values ) ; chart.invalidate ( ) ; ` `` ` The following Fix worked for me : ! [ bugfix ] ( https : //cloud.githubusercontent.com/assets/1231069/15693114/055131d0-2793-11e6-94e4-0f73108ba86e.PNG ) Thank you anyway for your
Make mDragTriggerDist of ChartTouchListeners configurable __EoT__ Even though the latest release accounted for different display densities , having Graphs in Scroll/ListViews is still quite difficult . Android uses a default slop for scrolls of 8dp ( current MPAnroidChart code uses 3dp ) I do n't know for which usecase the 3dp are optimized , but I would really appreciate it if it would be possible to configure the scroll slop to have a natural feel in List/ScrollViews , where the slop in x and y direction is equal . Currently I use an ugly hack by subclassing BarLineChartTouchListener and calling the super ( ) implementation of onTouch and then reverting all the changes to chart.disableScroll ( ) and implement my own . But due to the visibility of some of the variables ( mTouchStartPoint especially ) it is not possible to solve this in a proper way . I would propose to add the slop ( in dp ) as a constructor parameter , and apply your default value during instantiation . So it is possible to instantiate and set your own version with adapted values whenever you like .
Unable to setGranularityEnabled to false __EoT__ Yaxis.java public void setGranularityEnabled ( boolean enabled ) { mGranularityEnabled = true ; } Since above method always uses true instead of `` enabled '' parameter which does not allow me to setGranularity to false
unable to invalidate combined chart after removing data set __EoT__ Hi Phil , when i 'm trying to remove one graph from the combined chart , i 'm unable to refresh the chart . I 've tried anything : invalidate ( ) , postinvalidate ( ) , removeValues ( ) , notifyDataSetChanged ( ) , notify ( ) , clear ( ) , etc ... this is my code : ! [ device-2016-06-08-173455 ] ( https : //cloud.githubusercontent.com/assets/12711000/15898062/769d6892-2d9f-11e6-8c18-b70b2738a59f.png ) public class MainActivity extends AppCompatActivity { CombinedData data ; boolean mIsCandleOn = false ; boolean mIsLineOn = false ; LineData mLineData ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; final CombinedChart combinedChart = ( CombinedChart ) findViewById ( R.id.chart ) ; data = new CombinedData ( getXAxisValues ( ) ) ; ImageView lineImage = ( ImageView ) findViewById ( R.id.line_graph ) ; ImageView candleImage = ( ImageView ) findViewById ( R.id.candle_graph ) ; `` ` lineImage.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { if ( ! mIsLineOn ) { data.setData ( lineData ( ) ) ; combinedChart.setData ( data
Value too small in PieChart bug __EoT__ The version I have is v2.2.5 Same as # 1807 however I choose not to have a hole in the center by ` pieChart.setDrawHoleEnabled ( false ) ; ` With this , the smallest value I have ( ie 2 ) compared to the largest ( ie 10000 ) . the smallest value 's color doesnt bleed into the background as said in # 1807 . It simply colors the entire pie chart with that color . ! [ screen shot 2016-06-09 at 8 58 27 am ] ( https : //cloud.githubusercontent.com/assets/5704065/15936561/5f60c256-2e20-11e6-8f31-50091f1c9626.png ) I did try to replicate the issue in # 1807 and set ` pieChart.setDrawHoleEnabled ( true ) ; ` And I did get that background bleed as seen below . ! [ screen shot 2016-06-09 at 9 00 09 am ] ( https : //cloud.githubusercontent.com/assets/5704065/15936609/970f6874-2e20-11e6-83c6-43ed33b99576.png ) @ PhilJay , I opened another issue for the first case with no hole in the center as I did not find any issue with this specific one . Cheers ,
[ Resolved ] X Axis Labels being cut off horizontally # 1657 __EoT__ hello , this is because the size of the letters are not the same . The return of getTextBounds method for String `` Mar 30 '' and `` 01 Apr '' are n't the same value . Before < img width= '' 840 '' alt= '' before '' src= '' https : //cloud.githubusercontent.com/assets/10009422/14578592/6d3cb756-0362-11e6-8d83-a75c521dbeb0.png '' > After < img width= '' 842 '' alt= '' after '' src= '' https : //cloud.githubusercontent.com/assets/10009422/14578594/80461f22-0362-11e6-8136-9fb59c91be11.png '' >
Legend is not offsetable when using any ABOVE position __EoT__ Would like to offset the Legend to display it a little more down , but yOffset does not work for LegendPosition.ABOVE_* . Probably should add this value in LegendRendered:246 ( MPAndroidChart 2.2.3 )
LegendPosition.ABOVE_CHART_CENTER does not align correctly . __EoT__ LegendPosition.ABOVE_CHART_CENTER aligns left of legend to the center of the screen . That is not expected beavior . Probably bug on line 259 of LegendRenderer where ABOVE_CHART_CENTER is missing .
ChartData.checkLegal irrelevant for CombinedChart __EoT__ This check should not be performed for a CombinedChart , since its xValues are specified independently of the contributing DataSets , whose xValues are thrown away .
Attempting to set member of null object in PieChart.calcMinMax ( ) __EoT__ In the PieChart , the method : `` ` protected void calcMinMax ( ) { super.calcMinMax ( ) ; calcAngles ( ) ; } `` ` Calls the parent 's method , which is in PieRadarChartBase : `` ` protected void calcMinMax ( ) { mXAxis.mAxisRange = mData.getXVals ( ) .size ( ) - 1 ; } `` ` This gives an error , because in the init section of the PieChart , ` mAxis ` is set to ` null ` . My proposed fix would be to remove the call to the parent 's calcMinMax method , but I am not deep enough into the framework to decide if that 's a good idea .
Pie chart breaks down after 100 entries __EoT__ Regretfully , I have some data sets with 100+ data entries that I need to plot on this specific chart . I know , it sounds stupid but those are the specifications ... Pretty much what it happens is this : ! [ device-2016-03-15-165614 ] ( https : //cloud.githubusercontent.com/assets/1101060/13796871/078536d2-eacf-11e5-8c77-6ffa82f9b125.png ) And of course I 'm setting a list of colors with the same size as my entries : `` ` for ( int i = 0 ; i < colEdge.getEx ( ) ; i++ ) { chartEntryExtraModel = createEntryExtraModelForChart ( data , 0 , i ) ; entries.add ( new BarEntry ( data.getBody ( ) .get ( 0 ) .get ( i ) .getRAsDouble ( ) .floatValue ( ) , i ) ) ; colors.add ( ALTA_DVT_PALETTE_COLOR [ i % ALTA_DVT_PALETTE_COLOR.length ] ) ; } `` ` Is this a limitation of the library , so I can stop poking on the source code in the meantime and concentrate in other stuff ?
CandleDataSet.setShadowWidth ( ) should probably be setShowCandleBar ( ) __EoT__ This method affects the mShowCandleBar member variable , so its name is probably incorrect here .
Keep position on rotation __EoT__ I ’ ve added a flag ( keepPositionOnRotation ) to BarLineChartBase indicating whether the chart should stay at its current position or not . This is the same feature as described in the PR on [ ios-charts ] ( https : //github.com/danielgindi/ios-charts/pull/824 ) In the examples this feature does n't work properly , because the Activities get reloaded on every rotation . This can be turned of be adding ` < activity android : name= '' BarChartActivity '' android : configChanges= '' keyboardHidden|orientation|screenSize '' > < /activity > ` in the AppManifest .
Stacked bar shadows __EoT__ When i set the bar shadows to true in a Stacked bar chart , some of the bars are hidden/not drawn . This happens even in the example application that came along . This is what I set to true ` mChart.setDrawBarShadow ( true ) ; ` And this happens only in a stacked scenario . Regular single bar chart works just fine . Any way to get around this issue ? I also posted this on Stackoverflow but did n't get any responses so far . [ http : //stackoverflow.com/questions/35212936/mpandroidchart-bar-shadows-hides-the-actual-bars ] ( url ) Would really appreciate an answer . Thanks !
Very difficult to highlight points on high density screens - make touch slop density dependent __EoT__ BarLineChartTouchListener uses hard-coded touch slop in pixels . This is value is too small on high density screens , resulting in drags where a tap was intended . Change `` ` } else if ( mTouchMode == NONE & & Math.abs ( distance ( event.getX ( ) , mTouchStartPoint.x , event.getY ( ) , mTouchStartPoint.y ) ) > 5f ) { `` ` to `` ` } else if ( mTouchMode == NONE & & Math.abs ( distance ( event.getX ( ) , mTouchStartPoint.x , event.getY ( ) , mTouchStartPoint.y ) ) > TOUCH_SLOP ) { `` ` where ` TOUCH_SLOP is 5dp rather than 5px .
PieChart not drawing correctly ( v2.2.3 ) __EoT__ I just upgraded to 2.2.3 and now my PieChartView is doing strange things : < img width= '' 88 '' alt= '' bildschirmfoto 2016-02-29 um 22 20 50 '' src= '' https : //cloud.githubusercontent.com/assets/17555906/13409501/946887fe-df33-11e5-8f9f-8c997b95424b.png '' > < img width= '' 90 '' alt= '' bildschirmfoto 2016-02-29 um 22 21 13 '' src= '' https : //cloud.githubusercontent.com/assets/17555906/13409502/9468fefa-df33-11e5-87e0-a57a27e36535.png '' > < img width= '' 89 '' alt= '' bildschirmfoto 2016-02-29 um 22 21 31 '' src= '' https : //cloud.githubusercontent.com/assets/17555906/13409500/94684f5a-df33-11e5-9316-e589c415aa92.png '' > Afaik this was n't happening in 2.2.2 or I have never recognized it . 2 Entrys , one set to 99 and the other set to 1 . This is my chart setup : ` percentageChart.usePercentValuesEnabled = true ` ` percentageChart.holeRadiusPercent = 0.9 ` ` percentageChart.transparentCircleRadiusPercent = 0.45 ` ` percentageChart.rotationWithTwoFingers = false ` ` percentageChart.drawCenterTextEnabled = true ` ` percentageChart.descriptionText = `` '' ` ` percentageChart.noDataText = `` '' ` ` percentageChart.noDataTextDescription = `` '' ` ` percentageChart.centerText = `` '' ` ` percentageChart.drawSliceTextEnabled = false ` ` percentageChart.rotationEnabled = false ` ` percentageChart.legend.enabled = false ` ` percentageChart.highlightPerTapEnabled = false ` Did I miss anything ?
Bubble and Scatter dataset are not displayed correctly __EoT__ This is my current issue , I have some data points that are far away from each other ( Y-Axis ) so the chart only shows the nearest one , ignoring the rest of the data points . It 's easy to replicate , just use the following data for the chart : `` ` java ArrayList < String > xVals = new ArrayList < String > ( ) ; for ( int i = 0 ; i < count ; i++ ) { xVals.add ( ( i ) + `` '' ) ; } ArrayList < BubbleEntry > yVals1 = new ArrayList < BubbleEntry > ( ) ; int [ ] valArray = { 1000 , 50000 , 500000 } ; int [ ] valSize = { 50000 , 25000 , 150000 } ; for ( int i = 0 ; i < 3 ; i++ ) { yVals1.add ( new BubbleEntry ( i , valArray [ i ] , valSize [ i ] ) ) ; } BubbleDataSet set1 = new BubbleDataSet ( yVals1 , `` DS 1 '' ) ; set1.setColor ( ColorTemplate.COLORFUL_COLORS [ 0 ] , 130
Horizontal Bar Chart - Value Color __EoT__ Hi , There appears to be a bug in the horizontal bar chart , relating to the text color of values drawn `` above the bar '' . I 'm using the following lines : ` barChart.setDrawValueAboveBar ( true ) ; barChart.getAxisLeft ( ) .setTextColor ( Color.RED ) ; dataSet.setValueTextColor ( Color.RED ) ; barData.setValueTextColor ( Color.RED ) ; ` Most of what this does works - it does draw the values to the right of the bars and does set most of the text red , but the values drawn to the right of the bars is a dark grey color . Since it 's being drawn on a black background , they 're basically unreadable in my application . I 've been unable to find out how to change the color of this text . Note that this does work in line charts and vertical bar charts . It 's only horizontal bar charts I 've noticed this problem for . I have n't been able to look into it too far yet , but the color of it seems to match the one defined in DataRenderer.java : ` mValuePaint.setColor (
Pie Chart : set equal slice space from center to end of the arc __EoT__ Hi Phil , How I can achieve equal slice space from center to end of the each arc on pie chart . if you see the sample the arc is drawn properly but the slice spaces from center are not equal as end . any possible solution ? Thanks ,
about BarChart Y axis value color __EoT__ color values along with bar color change ! [ 0106a ] ( https : //cloud.githubusercontent.com/assets/8554618/12469630/7020d0a6-c028-11e5-81ad-f6529b9c7ec9.png )
BaseDataSet.setColors ( ) does not clear the List __EoT__ Hi , I just found an issue with BaseDataSet.setColors ( ) in v2.2.0 : setColors ( int [ ] ) creates a new List , while setColors ( int [ ] , int alpha ) adds the colors to the existing List , which by default contains one color ( cyan ) . We need to call resetColors ( ) before , in order to get it work correctly .
BarChart : setDrawValuesForWholeStack ( ) is not available __EoT__ setDrawValuesForWholeStack ( boolean enabled ) : If set to true , all values of stacked bars are drawn individually , and not just their sum on top of all . Hello , i 'm using version 2.1.6 and i 'm using some stacked bars graphic and i wanted to put the total at the top of the stack bar . I assume this could be the method to enable that . But when i try to use this method it 's not available . It 's included in newer version ? and if so could you please build a jar file to import to the project . Thanks in advance , Miguel .
setSpaceBetweenLabels not working for rotated xValues __EoT__ Thanks for the great library . setSpaceBetweenLabels should apply horizontal margin between labels whether labels are rotated or not !
Different xValues for each zoom level __EoT__ Consider a Chart with years as xValues . I want to change the xValues to months when the user zoom in or double tap . And change the xValues to days for the next zooming level . Is it possible with great MPAndroidChart ?
Fill line chart with a Drawable __EoT__ This provides a generic way of filling the line charts with gradients ( https : //github.com/PhilJay/MPAndroidChart/issues/104 ) for example . In LineChartRenderer I changed the bitmap quality to Bitmap.Config.ARGB_8888 , because gradients look very choppy with ARGB_4444 . However it does put more pressure on the memory .
Fill line chart with a Drawable __EoT__ This provides a generic way of filling the line charts with gradients ( https : //github.com/PhilJay/MPAndroidChart/issues/104 ) for example . In LineChartRenderer I changed the bitmap quality to Bitmap.Config.ARGB_8888 , because gradients look very choppy with ARGB_4444 . However it does put more pressure on the memory .
DynamicRealmObject __EoT__ you used import , io.realm.dynamic.DynamicRealmObject but it has now changed to io.realm.DynamicRealmObject I am using Realm Java 0.87.2
java.lang.OutOfMemoryError : Failed to allocate a 8431340 byte allocation with 210496 free bytes and 205KB until OOM __EoT__ Version : ` compile 'com.github.PhilJay : MPAndroidChart : v2.1.6 ' ` I was running monkey on an app for 2+ hours and ran into a memory issue with the charting library : `` ` // CRASH : < package > ( pid 29580 ) // Short Msg : java.lang.OutOfMemoryError // Long Msg : java.lang.OutOfMemoryError : Failed to allocate a 8431340 byte allocation with 210496 free bytes and 205KB until OOM // Build Label : google/shamu/shamu:6.0.1/MMB29S/2489379 : user/release-keys // Build Changelist : 2489379 // Build Time : 1450217770000 // java.lang.OutOfMemoryError : Failed to allocate a 8431340 byte allocation with 210496 free bytes and 205KB until OOM // at dalvik.system.VMRuntime.newNonMovableArray ( Native Method ) // at android.graphics.Bitmap.nativeCreate ( Native Method ) // at android.graphics.Bitmap.createBitmap ( Bitmap.java:831 ) // at android.graphics.Bitmap.createBitmap ( Bitmap.java:808 ) // at android.graphics.Bitmap.createBitmap ( Bitmap.java:775 ) // at com.github.mikephil.charting.renderer.LineChartRenderer.drawData ( LineChartRenderer.java:88 ) // at com.github.mikephil.charting.charts.BarLineChartBase.onDraw ( BarLineChartBase.java:247 ) // at android.view.View.draw ( View.java:16184 ) // at android.view.View.updateDisplayListIfDirty ( View.java:15180 ) // at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) // at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3573 ) // at android.view.View.updateDisplayListIfDirty ( View.java:15140 ) // at android.view.View.draw
Scatter Chart - Set Custom Shape __EoT__ I 'm trying to customize the Scatter Chart with my custom shape : ScatterDataSet set = new ScatterDataSet ( entries , `` Scatter DataSet '' ) ; set.setCustomScatterShape ( path ) ; but nothing appears , only the SQUARE shape . From the wiki : /** \* Custom path object the user can provide that is drawn where the values \* are at . This is used when ScatterShape.CUSTOM is set for a DataSet . */ but there is no CUSTOM option in ScatterScape , only CIRCLE , CROSS , TRIANGLE and SQUARE .
Half Pie chart request __EoT__ Is there any way to achieve this chart with this library ? i have looked in the documentation and did n't find anything , but maybe i am missing something . Example : ! [ k8gkk ] ( https : //cloud.githubusercontent.com/assets/2273945/9562871/8fd4bf62-4e35-11e5-99b2-4f548aff3e23.jpg )
Touch on an empty space causes ArrayIndexOutOfBoundsException __EoT__ ! [ 2015-11-01 20 45 44 ] ( https : //cloud.githubusercontent.com/assets/3179252/10870778/b471c3d2-80db-11e5-9389-2809fc3f5354.png ) When I touch on the empty space ( highlighted in red ) I get the following stack trace `` ` java java.lang.ArrayIndexOutOfBoundsException : length=0 ; index=-1 at com.github.mikephil.charting.highlight.BarHighlighter.getClosestStackIndex ( BarHighlighter.java:136 ) at com.github.mikephil.charting.highlight.BarHighlighter.getStackedHighlight ( BarHighlighter.java:106 ) at com.github.mikephil.charting.highlight.BarHighlighter.getHighlight ( BarHighlighter.java:37 ) at com.github.mikephil.charting.charts.BarChart.getHighlightByTouchPoint ( BarChart.java:99 ) at com.github.mikephil.charting.charts.BarLineChartBase.getDataSetByTouchPoint ( BarLineChartBase.java:1231 ) at com.github.mikephil.charting.listener.BarLineChartTouchListener.saveTouchStart ( BarLineChartTouchListener.java:248 ) at com.github.mikephil.charting.listener.BarLineChartTouchListener.onTouch ( BarLineChartTouchListener.java:93 ) at com.github.mikephil.charting.charts.BarLineChartBase.onTouchEvent ( BarLineChartBase.java:661 ) at android.view.View.dispatchTouchEvent ( View.java:7149 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2178 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1911 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883
Touch on an empty space causes ArrayIndexOutOfBoundsException __EoT__ ! [ 2015-11-01 20 45 44 ] ( https : //cloud.githubusercontent.com/assets/3179252/10870778/b471c3d2-80db-11e5-9389-2809fc3f5354.png ) When I touch on the empty space ( highlighted in red ) I get the following stack trace `` ` java java.lang.ArrayIndexOutOfBoundsException : length=0 ; index=-1 at com.github.mikephil.charting.highlight.BarHighlighter.getClosestStackIndex ( BarHighlighter.java:136 ) at com.github.mikephil.charting.highlight.BarHighlighter.getStackedHighlight ( BarHighlighter.java:106 ) at com.github.mikephil.charting.highlight.BarHighlighter.getHighlight ( BarHighlighter.java:37 ) at com.github.mikephil.charting.charts.BarChart.getHighlightByTouchPoint ( BarChart.java:99 ) at com.github.mikephil.charting.charts.BarLineChartBase.getDataSetByTouchPoint ( BarLineChartBase.java:1231 ) at com.github.mikephil.charting.listener.BarLineChartTouchListener.saveTouchStart ( BarLineChartTouchListener.java:248 ) at com.github.mikephil.charting.listener.BarLineChartTouchListener.onTouch ( BarLineChartTouchListener.java:93 ) at com.github.mikephil.charting.charts.BarLineChartBase.onTouchEvent ( BarLineChartBase.java:661 ) at android.view.View.dispatchTouchEvent ( View.java:7149 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2178 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1911 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2184 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1883
MarkView at the edges of the screen will be out of range __EoT__ How to control the complete show at the edge I hope someone can help me with this problem thanks ! ! [ screenshot_2015-10-22-14-18-26_cn suncloud kopak ] ( https : //cloud.githubusercontent.com/assets/10005665/10658307/27d24660-78c8-11e5-91a1-9466f5d0766f.png ) ! [ screenshot_2015-10-22-14-18-51_cn suncloud kopak ] ( https : //cloud.githubusercontent.com/assets/10005665/10658308/27d2df6c-78c8-11e5-850b-4dd2d65f9d60.png )
PieChart and highlightValues ( Highlight [ ] highs ) __EoT__ Hi ! First - thanks a lot for greate library ! But i found some bug . To reproduce : 1 ) Do `` onClick '' programmatically using one of methods - highlightValues ( Highlight [ ] highs ) , highlightValue ( int xIndex , int dataSetIndex ) or void highlightTouch ( Highlight high ) ( here everythings seems ok ) 2 ) Next try to click manually on highlighted sector - and here you will find an issue - the click would n't work correct ( sector not recognized as highlighted ) I found a solution : `` ` @ Override public void highlightValues ( Highlight [ ] highs ) { // set the indices to highlight mIndicesToHightlight = highs ; if ( highs == null || highs.length == 0 ) { mChartTouchListener.setLastHighlighted ( null ) ; } else { mChartTouchListener.setLastHighlighted ( highs [ 0 ] ) ; < -- - you forget to notify your touch listener } // redraw the chart invalidate ( ) ; } `` ` And this why when you click on highlighted sector he not recognized - Your ChartTouchListener have know idea about
setHightlightEnabled function not working for barchart . __EoT__ On setting argument as false have no effect .
Feature request : for supporting SpannableString __EoT__ I am working on a PieChart , and i needed to pass a SpannableString for , ` objPieChart.setCenterText ( String ) ; ` which is not available . Is it possible to support such strings too ? Thanks !
Feature request : for supporting SpannableString __EoT__ I am working on a PieChart , and i needed to pass a SpannableString for , ` objPieChart.setCenterText ( String ) ; ` which is not available . Is it possible to support such strings too ? Thanks !
Unwanted padding on PieChart __EoT__ Hey there ! I 'm trying to get a PieChart aligned to the left in a grid-like structure , but the chart displayed is very small , because of extra padding around it taking up the space . I 've tried all sorts of different ways of getting rid of the padding , to no avail . Latest try was health.getViewPortHandler ( ) .restrainViewPort ( 0 , 0 , 0 , 0 ) ; but again , nothing . Any ideas ?
How to dynamic change markerview when scroll chart but not only click markerview show __EoT__
Make the ChartXAxisRenderer more flexible : now possible to overwrite drawing the line or label of the ChartLimitLine __EoT__ Hi Philipp I have done a few refactorings of the ChartXAxisRenderer that allow the following : It is now possible to extend the renderer and overwrite selectively the label or line drawing method for a ChartLimitLine ( in my project I needed e.g . to draw a triangle as arrow at the top in one case or a short line at the bottom as well as change the label offset , now easily possible ) When not overriding these new methods it will do the same as before . A corresponding pull-request for ios-charts has already been submitted by my colleague . https : //github.com/danielgindi/ios-charts/pull/432 Thank you very much ! Best Regards Ben
Limit lines labels custom font __EoT__ In my project I need to set custom font on limit line label . I thought it need to set custom typeface for axis on which limit line would be draw , so axis labels and label for limit line would be the same style . But it did n't work . Axis labels were customized but limit line label did n't change . I followed the source code and found that ie . : labels in YAxisRenderer in renderAxisLabels ( Canvas c ) method are set by line : mAxisLabelPaint.setTypeface ( mYAxis.getTypeface ( ) ) ; but in renderLimitLines ( Canvas c ) method few lines later label for limit line is not set with Typeface . It would be nice if LimitLine class would implement settable parameter of Typeface type , so the labels in Limit lines would be fully customizable .
Remove redundant modifiers from interfaces __EoT__
LineChart bug in setFillFormatter __EoT__ `` ` public void setFillFormatter ( FillFormatter formatter ) { if ( formatter == null ) formatter = new DefaultFillFormatter ( ) ; else mFillFormatter = formatter ; } `` ` Need : if ( formatter == null ) mFillFormatter = new DefaultFillFormatter ( ) ; else mFillFormatter = formatter ;
Allow highlight lines to be dashed __EoT__ iOS Charts has had this since `` Initial Commit '' danielgindi/ios-charts @ 19165ddacb2bbac9db0a541fd92f86b294147c11 . I had planned on using that , but found it was n't an option in Android . I might get around to adding this myself in the near future , but thought I should put it out there that the feature is missing .
CombinedChart after dynamic data set add/remove not redrawing chart yaxis __EoT__ < pre > mCombinedChart.getData ( ) .getLineData ( ) .removeDataSet ( data ) ; mCombinedChart.notifyDataSetChanged ( ) ; mCombinedChart.invalidate ( ) ; < /pre > and < pre > mCombinedChart.getData ( ) .getLineData ( ) .addDataSet ( mBodyMassData ) ; mCombinedChart.notifyDataSetChanged ( ) ; mCombinedChart.invalidate ( ) ; < /pre > is not refreshing to new Y values , causing problems when new values are bigger than max current values Any clue ?
ArrayIndexOutOfBoundsException ( @ LegendRenderer : renderLegend:239 ) __EoT__ I 'm getting this exception from some user ArrayIndexOutOfBoundsException ( @ LegendRenderer : renderLegend:239 ) Sorry i do n't have the full stack trace or other infos Could you check getCalculatedLineSizes size in that line to avoid to throw exceptions ?
How to set pie chart hole color with a thin slices ? __EoT__ Hi , I 'm trying to make a pie chart like this ! [ pie hole ] ( https : //cloud.githubusercontent.com/assets/5939798/8954932/8c35afbc-35f1-11e5-9e75-a778bc7a1487.PNG ) but how do I get a small thin slice with a hole color that does n't fill to the slices like this ! [ pie hole mine ] ( https : //cloud.githubusercontent.com/assets/5939798/8954971/d57fa452-35f1-11e5-9987-9df92ff0b476.PNG )
BUG : Unable to re-set CombinedChart data __EoT__ When you call setData on a combinedChart that already have a dataSet , and the new dataset does n't contain all of the dataset types of the previous dataset , the CombinedChartRenderer tries to work with it 's old configuration ( the old dataset types ) and thus a nullpointer is thrown . Version is v2.1.0 Stacktrace : .charting.data.BarData.getDataSetCount ( ) ' on a null object reference .BarChartRenderer.initBuffers ( BarChartRenderer.java:54 ) .CombinedChartRenderer.initBuffers ( CombinedChartRenderer.java:79 ) .BarLineChartBase.notifyDataSetChanged ( BarLineChartBase.java:294 ) .Chart.setData ( Chart.java:280 ) .CombinedChart.setData ( CombinedChart.java:117 ) Steps to reproduce this stacktrace : 1 : add combinedData which includes LineData and BarData 2 : display chart 3 : add new combinedData which only include LineData
Exception on removeEntry : Invalid index 49 , size is 49 __EoT__ This issue was already reported [ here ] ( https : //github.com/PhilJay/MPAndroidChart/issues/771 ) but the issue was closed without a comment . I 've managed it to reproduce the error in the example LineChartActivity1 . But first here is the exception that is thrown : Caused by : java.lang.IndexOutOfBoundsException : Invalid index 49 , size is 49 at java.util.ArrayList.throwIndexOutOfBoundsException ( ArrayList.java:255 ) at java.util.ArrayList.get ( ArrayList.java:308 ) at com.github.mikephil.charting.data.DataSet.calcMinMax ( DataSet.java:132 ) at com.github.mikephil.charting.data.DataSet.removeEntry ( DataSet.java:565 ) at com.github.mikephil.charting.data.DataSet.removeEntry ( DataSet.java:580 ) To reproduce this error just add the following lines just after the line Chart.setData ( data ) ; try { mChart.getData ( ) .getDataSetByIndex ( 0 ) .removeEntry ( 0 ) ; } catch ( Exception e ) { Log.i ( `` Test '' , e.toString ( ) ) ; } Can you please fix this error ? I will also donate some money for fixing this error .
Change Highlight indicator on Line charts __EoT__ Hi Phil , I 've looked in the documentation , and could n't find anything to change the highlight indicator on line charts . I 'm looking at changing the color , width , and removing the horizontal line . I 've only found a way to change the width so far ( chart.setHighlightLineWidth ( ) ) Thank you
HighLigh in multiple dataSet chart __EoT__ Hi phil , I think i found an issue in the highlighting process when the chart contains more than one dataSet . In the getHighlightByTouchPoint method ( BarLineChartBase class ) , we get the SelInfo List containing all the DataSets having an Entry close to the touched x value . Then , we get the touched dataSetIndex by calling Utils.getClosestDataSetIndex . The problem is that the SelInfo list given to this method contains all the dataSets , even if the mHihlightEnabled is set to false . So , in some cases , the getHighlightByTouchPoint will return the index of a not Hightlightable dataSet , and it 's a problem if an otherDataset with an Entry close to the touched point is hightlightable . To fix this issue , i suggest to remove the not hightlightable datasets from the SelInfo List before calling the getClosestDataSetIndex method . I hope i am clear enougth . Thanks
Graph viewport not changed after call to movieViewToX __EoT__ In my code I do a call to `` ` java mChart.moveViewToX ( data.getXValCount ( ) - 11 ) ; mChart.invalidate ( ) ; `` ` I keep on adding data dynamically to the chart the above code is executed after each data addition . Sometimes the chart does not change the viewport and after the next data , it changes . I looked in the issue and I noted that if I call ` invalidate ( ) ` once again after a second or so of adding the data then the chart moves . Upon further examining the issue , the found that the issue was due to not refreshing the chart upon completion of the ` post ( ) ` job . In the _ViewPortHandler.java_ class , if I change the ` refresh ( save , view , false ) ; ` to ` refresh ( save , view , true ) ; ` , then my chart renders as desired . Is there any reason why you are n't refreshing after changing the viewport ?
Text size in bubble __EoT__ Hi ! I would like to change the size of the text in bubbles . I tried using the setValueTextSize on BubbleDataSet object but it has no effect . It seems that the text size is not setted to the Paint object while iterating over data sets int the bubbleChartRenderer ( drawValues method ) . Am i doing it wrong ? thanks .
Programmatically deselect value on piechart __EoT__ Hi ! If I click a value on a piechart it gets selected , and when I then call highlightValues ( ... ) or highlightTouch ( ... ) with a null argument , it looks deselected . But the next click on the graphic is ignored . It 's as if the value is not highlighted but is still selected . Is there a way to really deselect a value ( just like a real click would ) ? Thanks !
set all line of grid background are dashed line __EoT__ ! [ qq 20150611110434 ] ( https : //cloud.githubusercontent.com/assets/6296547/8099010/d3195c3c-1029-11e5-97d5-f41c4edba571.png ) my case like `` A '' at picture , how can i set it like `` B '' at picture ? ( all line of grid background are dashed line ) rightAxis.enableGridDashedLine ( ... ) leftAxis.enableGridDashedLine ( ... ) xAxis.enableGridDashedLine ( ... ) i had use this code , but it ca n't show me the dashed line of vertical direction , is there something forget to add ?
How to extend XAxisRenderer __EoT__ Hi , I 'm trying to extend XAxisRenderer class , but I 'm not sure how to force the chart to use the extended class . The reason why I want to do it because I want to override the renderAxisLabels method to add a custom label below each XLabel for xAxis . @ Override public void renderAxisLabels ( Canvas c ) { ... ... ... ... . drawLabels ( c , mViewPortHandler.contentBottom ( ) + mXAxis.mLabelHeight + yoffset \* 1.5f ) ; ... ... ... ... .. } Thanks for your help .
setDoubleTapToZoomEnabled ( ) should be aware of setScaleXEnabled ( ) and setScaleYEnabled ( ) __EoT__ If you enable double tap to zoom ( which is the default ) , and disable one of ( or both ) scale X or scale Y , the chart is still zoomed on both axis . In my opinion , it should only zoom on the enabled axis : - Zoom on X only if scale Y is disabled - Zoom on Y only if scale X is disabled - Do n't zoom if both scale on X and Y are disabled Because it is not possible to zoom out if one of the scale is disabled .
Chart does not appear inside a ScrollView . __EoT__ I 'm trying to use your library to generate a chart inside a ScrollView , but it never appear . The only way I get it work is inside a LinearLayout and with fixed height : -ScrollView ( width : match_parent , height : match_parent ) -- LinearLayout ( width : match_parent , height : wrap_content ) -- -BarChart ( width : match_parent , height : 300dp ie ) There is another way ?
LineChart.fitScreen ( ) not working as expected after calling setVisibleXRange __EoT__ Hi , I use one graph to render different datasets with different intervals . The first time i render a dataset with only 3 points , so i let the graph fill the screen , now i render a new set witch has 12 points , i set setVisibleXRange to 6 and now i can scroll , now i set the previous dataset back , and call fitScreen ( ) , this now does not work as expected , cause it will take the 3 datapoints and uses not the screen with as i would expect , but the previous width of the graph . i call clear ( ) and invalidate ( ) when needed . Any idea how to reset the graph so it will take screen with when i ask it to ?
Label out of canvas __EoT__ Hi ! Let 's take this radar graph ! [ screen shot 2015-05-24 at 17 33 55 ] ( https : //cloud.githubusercontent.com/assets/1245059/7788448/5d1adfde-023b-11e5-9dff-440c7c331b77.png ) We are not interested into the legend , then I remove it using thoses 2 lines : `` ` java Legend l = radarChart.getLegend ( ) ; l.setEnabled ( false ) ; `` ` Then I got this view : ! [ screen shot 2015-05-24 at 17 34 49 ] ( https : //cloud.githubusercontent.com/assets/1245059/7788453/952ecf70-023b-11e5-8964-c64e742dcd6d.png ) As you may see , the `` AAAA '' Label just disappear . When I rotate the diagram I does appear , It seems that the bound of the view are to short . I tried to add some padding without any success ... How should I deal with this ?
Slide on chart to move the highlighted value __EoT__ Would it be possible to enable a slide gesture to be able to move the highlighted values ? Unless the chart is zoomed , of course .
How to change chart 's description color and position ? __EoT__ ` barChart.setDescription ( `` desc '' ) ; ` Is there any way to change the description color from the default black ? Also , is there a way to reposition the description in a similar way as with the ` XAxis ` class ? - ` xAxis.setPosition ( XAxis.XAxisPosition.BOTTOM ) ` . Currently it 's in the bottom right corner by default .
Pie Chart Colors becoming transparent upon selection of one slice __EoT__ ! [ screenshot_2015-04-06-17-39-59 ] ( https : //cloud.githubusercontent.com/assets/7241631/7002942/216486f6-dc85-11e4-95f5-c7b70d3b1fd6.png ) ! [ screenshot_2015-04-06-17-40-01 ] ( https : //cloud.githubusercontent.com/assets/7241631/7002946/2933b096-dc85-11e4-96d4-596a8bd065c1.png ) Sometimes , clicking on a slice of a pie chart seems to be making its adjacent slices transparent . After several tries , I still have not been able to pinpoint when this happens . I set the colors with : ArrayList < Integer > colors = new ArrayList < Integer > ( ) ; // for loop colors.add ( Color.parseColor ( `` # 00ff00 '' ) ) ; pieDataSet.setColors ( colors ) ; See images for reference .
LineChartRenderer drawCircles bug __EoT__ int circleColor = dataSet.getCircleColor ( j / 2 ) ; instead of int circleColor = dataSet.getCircleColor ( j / 2+minx ) ;
BarChart with only one entry __EoT__ BarChart with only one BarDataSet which contains only one BarEntry , does n't draw the bar of that single entry . The other elements are drawn ( axis etc. ) . Just to be clear , here is a screenshot : the 2 lines are the left and right axes ; ! [ screenshot 04_apr_2015 10_57_21 ] ( https : //cloud.githubusercontent.com/assets/11795213/6992094/2184c258-daba-11e4-8e4e-311d95db8bdb.jpg ) Debug shows that all the objects are correct : barData contains the list of BarDataSet , whose first and only element contains a list of BarEntry with a single entry , which has the correct label and value . The chart data is not really empty , otherwise the noDataText would be shown . If another entry is added , the 2 bars are correctly shown as intended . In any other case the chart works well . This is how I edited the barChart , may it be relevant : `` ` barChart.setDrawValueAboveBar ( true ) ; barChart.setTouchEnabled ( false ) ; barChart.setDescription ( `` '' ) ; barChart.setDrawBarShadow ( false ) ; barChart.setDrawGridBackground ( false ) ; barData.setValueTextSize ( 11f ) ; barData.setValueTextColor ( mColor ) ; XAxis xAxis1 =
Color customization for the CandleEntry __EoT__ I looked at the codes and did n't found coloring options for the ` CandleEntry ` class , like this ! [ candlechart ] ( https : //cloud.githubusercontent.com/assets/8722637/6980956/22d7ac06-da0b-11e4-93ce-d5aa26bedce7.png ) Are there any plans to implement it soon ? if no , I can implement it
LimitLine enableDashedLine not working __EoT__ Code from [ example ] ( https : //github.com/PhilJay/MPAndroidChart/blob/c42b88082d80ce4b02d37501eb0e2a0b1be0bf7b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java # L332 ) : `` ` java LimitLine ll1 = new LimitLine ( 130f , `` Upper Limit '' ) ; ll1.setLineWidth ( 4f ) ; ll1.enableDashedLine ( 10f , 10f , 0f ) ; // < -- ll1.setLabelPosition ( LimitLabelPosition.POS_RIGHT ) ; ll1.setTextSize ( 10f ) ; LimitLine ll2 = new LimitLine ( -30f , `` Lower Limit '' ) ; ll2.setLineWidth ( 4f ) ; ll2.enableDashedLine ( 10f , 10f , 0f ) ; // < -- ll2.setLabelPosition ( LimitLabelPosition.POS_RIGHT ) ; ll2.setTextSize ( 10f ) ; `` ` ! [ screenshot_2015-03-31-18-01-55 ] ( https : //cloud.githubusercontent.com/assets/3179252/6921911/573aea40-d7d0-11e4-8f71-00b01cf88ada.png )
Draw LimitLine behind the data ? __EoT__ I 'm using the ` LimitLine ` to draw a line for the average value in Y-axis . However , the line is drawn on top of the data , as the drawing order hard-coded in ` BarLineChartBase.onDraw ( ) ` . So , am I supposed to use it this way ? If so , can you provide some interface to tweak the drawing order ?
Improvement suggestions - no data text color + handle zero sized data as no data __EoT__ In the Chart.java class , the mInfoPaint should be configurable . At least for example like following : setNoDataTextColor ( customColor ) ; The second thing is , if the data is set by chart.setData ( ... ) there should be a validation if it 's not a zero size data set and if so , the no data available text should be drawn as well Btw , your library is awesome and works like a charm . Thanks
ScatterDataSet is picking wrong color ? __EoT__ I 'm using a ScatterDataSet and a BarDataSet from the CombinedData . When I 'm trying to add color to them , it seems ScatterDataSet is picking the color from a wrong index ( BarDataSet works as expected ) ? I have : `` ` ArrayList < Integer > colors = new ArrayList < > ( ) ; colors.add ( color1 ) ; // used by the 1st entry colors.add ( color2 ) ; // never used colors.add ( color3 ) ; // used by the 2nd entry colors.add ( color4 ) ; // never used colors.add ( color5 ) ; // used by the 3rd entry colors.add ( color6 ) ; // never used ... scatterDataSet.setColors ( colors ) ; `` ` Then I checked a bit of the source code : In ScatterChartRenderer.drawDataSet ( ) , it 's picking the color with : `` ` mRenderPaint.setColor ( dataSet.getColor ( i ) ) ; `` ` Compared to BarChartRenderer.drawDataSet ( ) , it 's picking the color with : `` ` mRenderPaint.setColor ( dataSet.getColor ( j / 4 ) ) ; `` ` Is this a bug , or I 'm doing
How to show barChart even if data is = 0 ? ? __EoT__ Hi , Since i update from version 1.7 to 2.1 i 've to review things . Before even if my data were equal to 0.0 the bar was there . Now i 've only an empty chart . Now ... when i add a number in the data bigger than 0 every bar of the Barchart are visible even if only one is set to ( for exemple ) 10 and the other are still to 0.0 . Do you know why ? Why can i have all my bar displayed even if all data are equals to 0 ? And an other small question . If i do n't want the right Axis the only solution is to set this as a new axis an setEnabled to false ? or is there an other way ? Thanks
Graph drawing incorrectly when visibility changed __EoT__ I have a graph with Visibility.GONE - when I change to VISIBLE and build the chart it draws incorrectly : ! [ screenshot_2015-03-04-10-21-06 ] ( https : //cloud.githubusercontent.com/assets/5167046/6481852/ba6a226c-c258-11e4-97ed-33b795b45c19.png ) I suspect this may be related to my using ` graph.setViewPortOffsets ( 0 , 0 , 0 , 0 ) ; ` but even when the view is always visible the first render always draw incorrectly : ! [ screenshot_2015-03-04-10-23-23 ] ( https : //cloud.githubusercontent.com/assets/5167046/6481874/ed9106b0-c258-11e4-9c79-a1c14e500e6e.png ) all subsequent calls updating the graph draw as expected : ! [ screenshot_2015-03-04-10-21-20 ] ( https : //cloud.githubusercontent.com/assets/5167046/6481885/06da4f3c-c259-11e4-8ab9-943164d0165d.png ) I 've put in place a horrendous hack ( in my Activity ) to force a redraw the first time the view is displayed as invalidate does n't work , this is obviously not ideal : `` ` if ( redraw ) { Timber.d ( `` First graph viewing - redrawing '' ) ; TimerTask task = new TimerTask ( ) { public void run ( ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { setData ( elevations , false ) ; } } ) ; } } ; Timer timer
ChartData.addDataSet ( ) min/max error __EoT__ If you create a ` ChartData ` with no datasets and then use ` addDataSet ( d ) ` , the ` mYMin ` will be at most 0 , when it should be ` d.getYMin ( ) ` . Current source : `` ` if ( mYMax < d.getYMax ( ) ) mYMax = d.getYMax ( ) ; if ( mYMin > d.getYMin ( ) ) mYMin = d.getYMin ( ) ; `` ` Could become : `` ` boolean first = mDataSets.size ( ) == 1 ; if ( mYMax < d.getYMax ( ) || first ) mYMax = d.getYMax ( ) ; if ( mYMin > d.getYMin ( ) || first ) mYMin = d.getYMin ( ) ; `` ` Not sure , but I 'm guessing the ` mLeftAxisMin ` etc . variables may also need similar treatment .
Limit lines are n't drawn in HorizontalBarChart __EoT__ Expected behavior ( at least by me ) was a **vertical** line at the proper value - but no limit lines are drawn . Can they be supported ?
Issue with setFillAlpha when used with cubic-lines __EoT__ I am developing an app that is utilising the line chart . I am adding data to my chart and to the LineDataSet I have the following code snippet . `` ` Java LineDataSet set1 = new LineDataSet ( yVals , `` Total crashes during the week '' ) ; set1.disableDashedLine ( ) ; set1.setColor ( Color.BLUE ) ; set1.setDrawFilled ( true ) ; set1.setLineWidth ( 2f ) ; set1.setDrawCubic ( true ) ; set1.setFillColor ( Color.BLUE ) ; set1.setFillAlpha ( 65 ) ; `` ` I am setting the fill alpha to be 65 so the fill of the line chart is slightly transparent , this does work until I then also use ` setDrawCubic ( true ) ` , the fill alpha then seems to get ignored and instead the fill colour is completely opaque . I get the same result when togging the cubic mode from the MPAndroidChart example app as well .
Value Disappear in Stacked Bar Chart when zoomed . __EoT__ Hi Phil , When you zoom the Stacked Bar chart the values in the stacks Disappears . but the top most value doesn't. ! Sorry for troubling you Phil again and again .
App Crash on Stacked Bar Chart . __EoT__ Hi Phil , I am using v2.0.1 of the library and found that app is crashing if you touch the Right Y-Axis . first I thought that this issue is in my app but Demo app is also crashing .
Set text size based on style attribute __EoT__ I would like to set the text-size of a chart ( e.g . the center text of a pie chart ) based on a style attribute . In my app , users can choose between different themes that differ with respect to text size , and this preference should also apply to the text used in the chart . I am able to retrieve the value with the following code `` ` TypedValue typedValue = new TypedValue ( ) ; getActivity ( ) .getTheme ( ) .resolveAttribute ( android.R.attr.textAppearanceMedium , typedValue , true ) ; int [ ] textSizeAttr = new int [ ] { android.R.attr.textSize } ; int indexOfAttrTextSize = 0 ; TypedArray a = getActivity ( ) .obtainStyledAttributes ( typedValue.data , textSizeAttr ) ; int textSize = a.getDimensionPixelSize ( indexOfAttrTextSize , -1 ) ; a.recycle ( ) ; `` ` But this gives me a pixel size that can not be used in PieChart 's setCenterTextsize method , since it expects a dp value that it transforms to pixels . Thus I suggest to provide a method that accepts the pixel value directly as in `` ` public void setCenterTextPixel
remove nineoldandroids support ? __EoT__ FACT1 = nineoldandroids is deprecated . FACT2 = android 2.x are at 7.8 % I propose to remove the animations on Android 2 and remove nineoldandroids
LineChart Fill Issue __EoT__ I have two LineDataSets on a LineChart . The one DataSet has only positive values and other has only negative values . The zero line is therefore in the center of the chart ( positive chart above the line and negative chart below the line ) . When I fill the positive ( top ) DataSet with a color , the color extends to the bottom of the chart , instead of to the zero line only . The bottom chart works correctly ( fills only up to the zero line ) Is there a way to fix this ?
Crash when XLabel.setSpaceBetweenLabels ( 0 ) and xvalue is `` '' __EoT__ when there are xVals in BarData of `` '' ( empty string ) , setting XLabel.setSpaceBetweenLabels ( 0 ) will cause the application to hang and eventually crash .
How to implement fling result ? __EoT__ Hi , PhiJay , Thanks for this great chart ! It 's beautiful ! Users can drag the chart ( e.g . barchart , after zoom in ) as they wish . If they make a fling gesture , however , the chart does n't response as it should be ( fling ) , it just scolls a little and stops immediately . `` ` The question is : How to make the chart fling ? `` ` Thanks again !
PieChart overlap with Legend __EoT__ Hi Phil , Using version 1-7 , Can I arrange the Chart/Legend to solve this ? ! [ image ] ( https : //cloud.githubusercontent.com/assets/8475836/4657701/28d4dc38-54ef-11e4-8eb0-ff45e080533e.png )
PieChart __EoT__ How to align the chart to the left and legend right . Like this : ! [ text png ] ( https : //cloud.githubusercontent.com/assets/9082868/4560697/f2e997ec-4ef6-11e4-942c-baaf2b321d99.png )
Chart error on orientation chagnes __EoT__ The chart is drawn in part when the orientation changes .
Memory Leaks Suspect __EoT__ I have been experiencing OOM exception in my app , which is using graph and pie charts , on multiple screen rotation . At first I suspected it was my fault but I have analyzed my app with DDMS heap dump and MAT tool and Leak Suspect report pointed to PieChart objects . I have then decided to check the MPAndroidChart sample app and the Leak Suspect report pointed a couple of problems . However I am not able to crash the sample app by rotating the screen ( although it does not consume any other memory apart from charts which might be the cause ) . Can you analyze the lib with MAT and check the Leak Suspect report ?
PieChart : extra padding at top __EoT__ Hi @ PhilJay , just wan na to say you many thanks for your great library . I 'm playing with PieChart and I found some extra padding above it when using Legend . Could you please help me to figure out how to fix it ? ! [ screenshot_2014-10-07-20-53-14 ] ( https : //cloud.githubusercontent.com/assets/1655573/4546504/28baf2f2-4e44-11e4-915b-1021ee5ab891.png )
mulitLineChart __EoT__ trying to add 1 point of 2 datasets and it did n't show on the chart . thanks
About PieChart problem __EoT__ In the PieChartActivity , yVals1 int the method named onProgressChanged do not contain 0 ; When some of yVals1 are zero and set1.setSliceSpace ( 3f ) , the pie cavaned has some problem . Some part of pie cover others . The following is my code : @ Override protected void drawData ( ) { `` ` float angle = mRotationAngle ; ArrayList < PieDataSet > dataSets = mCurrentData.getDataSets ( ) ; int cnt = 0 ; for ( int i = 0 ; i < mCurrentData.getDataSetCount ( ) ; i++ ) { PieDataSet dataSet = dataSets.get ( i ) ; ArrayList < Entry > entries = dataSet.getYVals ( ) ; for ( int j = 0 ; j < entries.size ( ) ; j++ ) { float newangle = mDrawAngles [ cnt ] ; float sliceSpace = dataSet.getSliceSpace ( ) ; if ( Math.round ( newangle ) == 0 ) { `` ` cnt++ ; continue ; } if ( ! needsHighlight ( entries.get ( j ) .getXIndex ( ) , i ) ) { `` ` mRenderPaint.setColor ( dataSet.getColor ( j ) ) ; mDrawCanvas.drawArc ( mCircleBox , angle + sliceSpace / 2f ,
Y values position bug __EoT__ Hello , Has you can see the values are out screen . The values are 0.0004 for example . Thank you ! [ bug ] ( https : //cloud.githubusercontent.com/assets/5589240/4421250/0de4d9ea-4582-11e4-9c2d-150d8b24dcbf.png )
Crash when zoom __EoT__ Hello , The problem is with a LineChart when i zoom ( exactly when I release with fingers ) the app crash with the error : java.lang.IllegalArgumentException : pointerIndex out of range at android.view.MotionEvent.nativeGetAxisValue ( Native Method ) at android.view.MotionEvent.getX ( MotionEvent.java:1979 ) com.github.mikephil.charting.listener.BarLineChartTouchListener.spacing ( BarLineChartTouchListener.java:323 ) Thank you
Pie chart , bug 100.0000000 % __EoT__ I'v found a bug when value is 100 % ! [ sans titre ] ( https : //cloud.githubusercontent.com/assets/5589240/4355781/dc868ae4-4250-11e4-980c-771a1b968de6.png )
Customized Y labels __EoT__ I want to show just only min-max values on Y-labels. ( ex . min:52 , max:168 ) But now , I ca n't find the way to do this . Hope this library can support this feature .
PieChart and RadarChart not displayed correctly ( Android 3.1 ) __EoT__ android 3.1 error Error conditions as shown in figure ! [ qq 20140918001042 ] ( https : //cloud.githubusercontent.com/assets/8265300/4307044/dd2b0368-3e85-11e4-84e7-7f24591e3fe0.jpg ) thanks very much
[ Enhancement ] Y Label Formatting __EoT__ Are you intending to implement a custom format for the y label ? The current solution is not very flexible ... I would prefer some setup with a custom ` Format ` object , that does the label calculation and returns the labels to the chart . And instead of the ` prepareYLabels ( ) ` function in for example ` BarLineChartBase ` the ` Format ` object is used and returns the labels . Of course , a default ` Format ` object with the current logic should be used as default . For myself , I need some format like `` no matter what scaling , only show whole numbers '' or `` only show numbers like 0 , 2.5 , 5 , 7.5 , 10 , 12.5 , ... '' I 'm thinking of implementing it myself , but before , I just wanted to make sure , that you are not already working on something similar ... Or you may have another/better solution ...
Please add option to disable tap-to-zoom in LineChart __EoT__ I prefer a simple graph that requires as little user interaction as possible . Unfortunately there is no way to disable tap-to-zoom , and there is no way to zoom back out if DragScale is disabled .
Support single Entry for LineChart __EoT__ Hello , I was in China android developer , your library is especially strong , very much , which encountered some problems , hope to get your help。 I used LineChart time , I modified your demo in LineChartActivity classes , 117 lines setData ( 45 , 100 ) ; modified setData ( 1 , 100 ) ; , is only one data , line graph interface is empty , there is no way to make him appear ， My mail is 120660021 @ qq.com，I hope to hear from you，Thank you！
Ability to position X & Y labels inside the chart __EoT__ First of all I would like to thank you for this awesome library . You did an excellent job . I have a suggestion for the Line and Bar chart . Since most of the apps want to make use of space , it would be great if the XLabelPosition & YLabelPosition would have the option ( TOP_INSIDE , BOTTOM_INSIDE and LEFT_INSIDE , RIGHT_INSIDE ) to display the X & Y text labels within the chart , and not beside / above / on top of it . This way you could use the view from edge to edge without having extra paddings . Let me know what do you think . Levi
How to extend MarkerView __EoT__ Hi Phil , thank you for really hard work and nice library . I 'm trying to have my own MarkerView and I 'm little confused with it . Could you please look into my code ( it 's the same as bundled examples ) : `` ` xml res/layout/marker.xml < RelativeLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' 65dp '' android : layout_height= '' 40dp '' android : background= '' @ drawable/ic_marker '' > < TextView android : id= '' @ +id/txtValue '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : layout_centerHorizontal= '' true '' android : layout_marginTop= '' 7dp '' android : textColor= '' @ android : color/white '' android : ellipsize= '' end '' android : singleLine= '' true '' android : textAppearance= '' ? android : attr/textAppearanceSmall '' / > < /RelativeLayout > `` ` `` ` Java MyMarkerView.java public class MyMarkerView extends MarkerView { private TextView txtValue ; public MyMarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; txtValue = ( TextView ) findViewById ( R.id.txtValue ) ; } @ Override public
Radar chart __EoT__ Hi , I 'm really enjoying experimenting with this library . Strongly considering using it for visualizations in an app I 'm working on . In the time I 've been using it I 've seen lots of awesome improvements and additions . For instance , I was happy to see support for API Level 8 added the other day . One chart type that I think I 'll need is the Radar chart , and I was wondering if you had any plans already to implement one . For example : http : //en.wikipedia.org/wiki/Radar_chart
Is it possible to drag the Chart over it 's bounds ? __EoT__ Hi ! Thank you for the awsome lib ! So my question is : how can i set the minimum distance between a LineChart borders so that the Markers of the first , last and maximum ( highest position ) values do n't get cut off by the borders ? Or , alternatively can i disable the drag limit at first last and highest points , so the user can just drag far enough to see the whole markerView ?
Y values are not displayed properly in grouped barchart __EoT__ This can be seen in the sample app in `` Multiple Bars Chart '' . Go to the options menu and click on `` Toggle Values '' .
Using setLineWidth/enableDashLine on LimitLine object results in Exception __EoT__ Following the example shown on LineChartActivity.java I 'm using the following statements to modify each line in my Line Chart : LineDataSet set1 = new LineDataSet ( yVals.get ( 0 ) , labels.get ( 0 ) ) ; set1.disableDashedLine ( ) ; set1.setColor ( context.getResources ( ) .getColor ( Color.RED ) ; `` ` LimitLine ll1 = new LimitLine ( 130f ) ; ll1.setLineWidth ( 8f ) ; ll1.enableDashedLine ( 10f , 10f , 0f ) ; `` ` When I start the app and the fragment that displays the graph is been created I get the following Exception : `` ` 08-28 08:51:20.870 2244-2244/com.app.alpha E/AndroidRuntime﹕ FATAL EXCEPTION : main java.lang.IllegalStateException : Utils NOT INITIALIZED . You need to call Utils.init ( ... ) at least once before calling Utils.convertDpToPixel ( ... ) . at com.github.mikephil.charting.utils.Utils.convertDpToPixel ( Utils.java:67 ) at com.github.mikephil.charting.utils.LimitLine.setLineWidth ( LimitLine.java:58 ) at com.app.widget.DataGraphFactory.buildLineChart ( DataGraphFactory.java:176 ) at com.app.fragment.DataDisplayFragment.getGraphFromFactory ( DataDisplayFragment.java:209 ) at com.app.fragment.DataDisplayFragment.onCreateView ( DataDisplayFragment.java:109 ) at android.support.v4.app.Fragment.performCreateView ( Fragment.java:1460 ) at android.support.v4.app.FragmentManagerImpl.moveToState ( FragmentManager.java:911 ) at android.support.v4.app.FragmentManagerImpl.moveToState ( FragmentManager.java:1088 ) at android.support.v4.app.BackStackRecord.run ( BackStackRecord.java:682 ) at android.support.v4.app.FragmentManagerImpl.execPendingActions ( FragmentManager.java:1444 ) at android.support.v4.app.FragmentManagerImpl $ 1.run ( FragmentManager.java:429 )
Bug in binary search DataSet line 155 __EoT__ Been getting an indexOutOfBounds error on the binary search in getEntryForXIndex when selecting the last value on a line chart : java.lang.IndexOutOfBoundsException : Invalid index 36 , size is 36 at java.util.ArrayList.throwIndexOutOfBoundsException ( ArrayList.java:255 ) at java.util.ArrayList.get ( ArrayList.java:308 ) at com.github.mikephil.charting.data.DataSet.getEntryForXIndex ( DataSet.java:160 ) at com.github.mikephil.charting.data.DataSet.getYValForXIndex ( DataSet.java:130 ) at com.github.mikephil.charting.charts.Chart.getYValsAtIndex ( Chart.java:1797 ) at com.github.mikephil.charting.charts.BarLineChartBase.getHighlightByTouchPoint ( BarLineChartBase.java:1625 ) at com.github.mikephil.charting.listener.BarLineChartTouchListener.onSingleTapUp ( BarLineChartTouchListener.java:417 ) at android.view.GestureDetector.onTouchEvent ( GestureDetector.java:595 ) at com.github.mikephil.charting.listener.BarLineChartTouchListener.onTouch ( BarLineChartTouchListener.java:72 ) at com.github.mikephil.charting.charts.BarLineChartBase.onTouchEvent ( BarLineChartBase.java:1010 ) I believe issue is @ line 155 , reads : `` ` java int high = mYVals.size ( ) ; `` ` Should be : `` ` java int high = mYVals.size ( ) -1 ; `` `
PieChart rotation and setTouchEnabled relations __EoT__ Hi Philipp , I noticed you fixed the bug related to the setTouchEnabled ( false ) method not having any effect on the PieChart . This is really awesome but is it possible to handle some logic to only disable the rotation and still have touch enabled ? Many thanks !
Circle colors order __EoT__ I 'm using the new feature to define the colors of the circles of my line chart , but the order of the colors in the graph is different of the defined in program . My code ( is a simple example ) : `` ` java ArrayList < Entry > valsComp2 = new ArrayList < Entry > ( ) ; Entry c2e1 = new Entry ( 20 , 0 ) ; valsComp2.add ( c2e1 ) ; Entry c2e2 = new Entry ( 30 , 1 ) ; valsComp2.add ( c2e2 ) ; Entry c2e3 = new Entry ( 0 , 2 ) ; valsComp2.add ( c2e3 ) ; Entry c2e4 = new Entry ( 30 , 3 ) ; valsComp2.add ( c2e4 ) ; Entry c2e5 = new Entry ( 20 , 4 ) ; valsComp2.add ( c2e5 ) ; LineDataSet setComp2 = new LineDataSet ( valsComp2 , `` 10.10.1.3 '' ) ; setComp2.setColor ( getResources ( ) .getColor ( R.color.verde ) ) ; int [ ] colors = new int [ ] { R.color.red , R.color.green , R.color.grey , R.color.blue , R.color.purple } ; setComp2.setCircleColors ( colors , getApplicationContext ( ) ) ; ``
BUG : PieChart .setTouchEnabled ( false ) do n't work __EoT__ Solve : PieChart.class @ Override public boolean onTouchEvent ( MotionEvent event ) { `` ` // use the piecharts own listener if ( mTouchEnabled ) { return mListener.onTouch ( this , event ) ; } return super.onTouchEvent ( event ) ; } `` `
application appTheme conflicts with apps that have custom themes __EoT__ Importing the project without modifying the Library 's Manifest results in a conflict in Themes . I would make the application tag in the manifest empty so individual developers do n't have to go in and remove it themselves
交叉打印奇偶数程序卡住 __EoT__ # # # Java版本：1.8.0_191 # # # 重现步骤 JCSprout/src/main/java/com/crossoverjie/actual/TwoThread.java 这个交叉打印奇偶数的程序，取消防止线程空转的Thread.sleep ( 10 ) ，为了加大重现概率，适当调大打印上限（while ( number.start < = 100 ) { 改成while ( number.start < = 100000 ) ） # # # 预期结果 正常交叉打印奇偶数 # # # 实际结果 打印途中卡住 # # # 其他相关信息 如果将判断条件（private boolean flag = false）加上volatile修饰，则无论是否加上线程休眠，都不会卡死。理论上锁应该也有可见性和顺序性的效果，为何加上volatile的效果会不同？
Kafka producer 源码分析 __EoT__
Kafka producer 源码分析 __EoT__
某大厂面试题 __EoT__ 题目： 一个 ` “ . ” ` 代表一个任意字母。 注意事项：可以假设所有的单词只包含小写字母 ` “ a-z ” ` 样例： `` ` java addWord ( “ bad ” ) ; addWord ( “ dad ” ) ; addWord ( “ mad ” ) ; search ( “ pad ” ) ; // return false ; search ( “ bad ” ) ; // return true ; search ( “ .ad ” ) ; // return true ; search ( “ b.. ” ) ; // return true ; `` ` 如果有并发的情况下， ` addWord ( ) ` 怎么处理？
Java 多线程三大核心 发现的问题 __EoT__ 位置：https : //github.com/crossoverJie/Java-Interview/blob/master/MD/Threadcore.md # 双重检查锁的单例模式 双重检查锁的单例模式这部分 文中写到：有可能第二步在第三步之前被执行就有可能某个线程拿到的单例对象是还没有初始化的，以致于报错。 应该是第三步在第二步之前执行，导致其他线程拿到单利对象还没有初始化
Shugeo image non max suppress __EoT__ non_max_suppression op was implemented by this . Issue # 6679 .
[ WIP ] SameDiff TF import : add graph scanning/ '' supported ops '' utility __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6682 This is actually good to go , though marked as WIP to avoid CI running ( it 's not used anywhere , so no point testing it : ) ) Ops it has flagged for the TF models I have currently on my machine : `` ` [ LogMatrixDeterminant , NthElement , SparseTensorDenseAdd , Size , IdentityN , NonMaxSuppressionV2 , TruncateMod , Cholesky , ApplyAdam ] `` `
Shugeo image resize bilinear __EoT__
[ WIP ] Fix SameDiff test failing on CI __EoT__ Reproduced locally , and I ran full test suite locally to confirm no other issues . So I 'll merge this without running CI
[ WIP ] Docs updates for 1.0.0-beta3 __EoT__
Remove nd4j-base64 __EoT__ nd4j-base64 is no longer required as the Nd4jBase64 class has been moved ( duplicated ) to nd4j-api .
Tensorflow output name resolution __EoT__ Improves graph runner output name resolution .
ADSI fix __EoT__ small pw/adsi fix
SDVariable javadoc __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6607
fix for keras failures __EoT__
Few fixes __EoT__ This PR fixes couple of tests related to ClassPathResource use
More small fixes __EoT__
[ WIP ] Minor fixes + tweaks __EoT__
Zoo : Fix U-Net disconnected vertex and output activation function , fix VGG16 , add test __EoT__ FYI @ AlexDBlack @ crockpotveggies When using UNet without the pretrained model e.g . ` ZooModel zooModel = UNet.builder ( ) .build ( ) .init ( ) ; ` , one receives the error : `` ` java.lang.IllegalStateException : Invalid configuration : disconnected vertices found - [ up9-1 ] . Disconnected vertices are those that do not connect to either another vertex , and are also not a network output . To disable this error ( i.e. , allow network configurations with disconnected vertices ) use GraphBuilder.allowDisconnected ( true ) at org.deeplearning4j.nn.conf.ComputationGraphConfiguration.validate ( ComputationGraphConfiguration.java:347 ) at org.deeplearning4j.nn.conf.ComputationGraphConfiguration $ GraphBuilder.build ( ComputationGraphConfiguration.java:1036 ) at org.deeplearning4j.zoo.model.UNet.init ( UNet.java:93 ) at org.deeplearning4j.zoo.model.UNet.init ( UNet.java:51 ) `` ` Fix by connecting disconnected ` up9-1 ` vertex . The current U-Net non-pretrained model has one Truncate convolutional layer - replace this with Same , as it seems the existing solver is n't equipped to handle the truncated pixels on the label side . If you input both labels and input as 128x128 , you end up with : `` ` java.lang.IllegalArgumentException : Labels and preOutput must have equal
Few fixes __EoT__ Few CUDA-related fixes
Keras import should get 'scheduled_decay ' instead of nonexistant 'decay ' for Nadam __EoT__ DL4J has : `` ` case `` Nadam '' : { double lr = ( double ) optimizerParameters.get ( `` lr '' ) ; double beta1 = ( double ) optimizerParameters.get ( `` beta_1 '' ) ; double beta2 = ( double ) optimizerParameters.get ( `` beta_2 '' ) ; double epsilon = ( double ) optimizerParameters.get ( `` epsilon '' ) ; -- > double decay = ( double ) optimizerParameters.get ( `` decay '' ) ; `` ` But Keras Nadam has : `` ` def __init__ ( self , lr=0.002 , beta_1=0.9 , beta_2=0.999 , epsilon=None , -- > schedule_decay=0.004 , **kwargs ) : `` ` This causes an exception in DL4J
MessageSplitter fix __EoT__ MessageSplitter fix + test
SameDiff training __EoT__ Implements training and evaluation for SameDiff . This PR also moves evaluation classes to ND4J , and takes steps to maintain backward compatibility in DL4J . Moving some of the JSON deserialization code ( nd4j-jackson , nd4j-base64 ) to nd4j-api was also necessary to avoid circular dependencies . The classes in the original modules have been deprecated as a result .
[ WIP ] PW & Spark changes __EoT__ ***WIP ; DO NOT MERGE*** This PR changes internal PW & gradients sharing mechanics
DL4J Spark : Use Hadoop Configuration from SparkContext to inherit config __EoT__
Mitigating ZipSlip vulnerability __EoT__ patched org/nd4j/util/ArchiveUtils.java to mitigate ZipSlip vulnerability ( https : //nakedsecurity.sophos.com/2018/06/06/the-zip-slip-vulnerability-what-you-need-to-know/ )
Memory doc clarifications __EoT__
Batch norm distributed fix __EoT__
Add Spark threshold encoding debug mode __EoT__
Fix assert value for DummyTransportTest.testUpdatesPropagation_1 __EoT__
Variable ports for Spark __EoT__ This PR adds an option to use different ports for out-of-spark comms .
Spark training fixes + polish __EoT__
Handle SQLite REAL type correctly __EoT__ JDBCRecordReader is throwing a java.lang.ClassCastException when reading REAL columns on a sqlite database See issue # 6615
SparkDataUtils fix + minor logging __EoT__
Fix bug in CacheableExtractableDataSetFetcher + make more robust __EoT__
Re-add parameter-server page under scaleout __EoT__
[ WIP ] Spark docs polishing __EoT__
[ WIP ] Spark docs polishing __EoT__
upgrade metrics version from 3.1.2 to 3.2.6 __EoT__ This is currently used by ` deeplearning4j/deeplearning4j-modelexport-solr ` and ` nd4j/nd4j-instrumentation/pom.xml ` and running their tests locally seems to work fine for me at least . A ( long ) list of release notes is here : https : //metrics.dropwizard.io/4.0.0/about/release-notes.html # v3-2-6-dec-24-2017
Update dependencies to just released JavaCPP and JavaCV 1.4.3 __EoT__ Also switch to CUDA 10.0 by default .
Misc DL4J/Nd4J fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6565 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6562 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6512 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6493
javadoc + minor doc fixes __EoT__
Fix for Keras 2.2.3+ Sequential serialization changes __EoT__
Shyrma grutests __EoT__ merge gruCell_bp to master
Jumpy : add keras import __EoT__
Delete duplicates __EoT__
Misc fixes __EoT__
R119 v100 again __EoT__
Spark docs __EoT__
Pydatavec : fixes + Tests ( reducer ) __EoT__
pydatavec : Tests ( schema , tp ) __EoT__
Spark javadoc polishing __EoT__ In preparation for an auto-generated docs page
Make layerConf ( ) public __EoT__ In order to get layer configuration parameters like kernelSize , stride , etc for ` SubsamplingLayer ` and any others that directly extend ` AbstractLayer ` , this method should be public . For cases like ` ConvolutionLayer ` that extend ` BaseLayer ` ` layerConf ( ) ` is already public .
DL4J/ND4J Fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6539 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6521 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6543 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6542 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6545 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6520 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6490 Pulls in and fixes PR : https : //github.com/deeplearning4j/deeplearning4j/pull/6436
jumpy : fix tf model import __EoT__
To avoid double free , call Pointer.setNull ( ) after freeing memory in MemoryManager __EoT__
SameDiff loss functions __EoT__
jumpy tests final __EoT__
Jumpy : misc tests + fixes __EoT__
Jumpy : shape op tests __EoT__
Jumpy : reduction ops fixes + tests __EoT__
Jumpy : braodcast fixes + tests __EoT__
ND4J Tests Cleanup/Fixes __EoT__ Cleans up some old code . Fixes some issues we 've seen on CI . Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6396 ( hopefully )
Update version of all JavaCPP Presets to 1.4.3-SNAPSHOT __EoT__ Including change-cuda-versions.sh to support CUDA 10.0 and cuDNN 7.3 Also add missing linux-armhf to pom.xml file for nd4j-native-platform It seems to be working fine for me on Linux ( CPU and CUDA ) and on Windows ( tested CPU only ) , but let 's let CI run , and I will leave @ AlexDBlack decide .
SameDiff : Add FlatBuffers loading __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5759
Misc fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6500 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6501 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6497 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6502 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6489
DL4J/ND4J Misc fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6431 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6457 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6451 Also fixes some SameDiff op mappings , fixes some SameDiff tests , maps some new ops , etc .
Why comment out the full connection layer for VGG16 __EoT__ Full connection layers are commented out , is this a bug ? `` ` // .layer ( 18 , new DenseLayer.Builder ( ) .nOut ( 4096 ) .dropOut ( 0.5 ) // .build ( ) ) // .layer ( 19 , new DenseLayer.Builder ( ) .nOut ( 4096 ) .dropOut ( 0.5 ) // .build ( ) ) `` `
More TF import tests and fixes __EoT__ This PR focuses on loading `` real world '' models available from the TF model zoo . Also adds some extra methods to ArchiveUtils for .tar.gz files .
Shugeo segment bp2 __EoT__ Fixed # 6414 .
SameDiff : Temporarily disable new tests __EoT__ Must be merged before this : https : //github.com/deeplearning4j/dl4j-test-resources/pull/160 Due to way CI works , we need to merge test resources before we can run tests on them . However , we want to avoid introducing new failures before the DL4J PR with fixes can be merged . Hence we temporarily disable the new tests , merge resources , and re-enable in the PR that has the fixes .
Shugeo determinant fix2 __EoT__ Fixed # 6441 .
Fix deserializing of heap ByteBuffer to Array . __EoT__ /cc @ koncha99
Add overloads to NativeImageLoader taking org.opencv.core.Mat and String as filename __EoT__ Fixes # 6150 , unit tests pass .
Fix TestGeoTransforms.testIPAddressToLocationTransform failing test __EoT__
rewrite/profile mmulNxN helper __EoT__ it turns out there was bug in mmulNxN helper when dealing with permuted/reshaped C ( resulting ) array . Previous version of mmulNxN was based on old TAD stuff which is buggy for unusual shapes like { ... ,1 } / { 1 , ... } that is with trailing/leading unity . Now mmulNxN does n't use TADs and is based on new NDArray stuff which however works on the same principle as TAD .
Various fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6401 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6378 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6442 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6403 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6389
correct ambiguous comments regarding data format in conv/pool ops __EoT__
Shyrma pad __EoT__ - rewrite pad op - provide multi-axes args in new batch norm op ( batchnorm_new )
libnd4j : Add MKL-DNN stride support and nd4j : :Environment : :useMKLDNN setting __EoT__ Fixes # 6419 and fixes # 6384 Incidentally , it looks like MKL-DNN 's natural layout for input and output is NCHW and for weights is OIHW as being set for the `` descriptor '' here : https : //github.com/deeplearning4j/deeplearning4j/blob/sa_mkldnn/libnd4j/include/ops/declarable/generic/helpers/impl/convolutions.cpp # L868-L869
Pydatavec updates __EoT__
Deconv2d_tf : fix weights format __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6421
reintroduce jumpy pom __EoT__ sorry , got a little overzealous here ... ` pydl4j ` takes care of jumpy dependencies , but we obviously still need the pom for the project structure .
jumpy/pydatavec setup fix __EoT__
jumpy travis __EoT__
Update Convolution layer/op weight layout to not depend on input format __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6393
bump jumpy version , use pydl4j __EoT__
Shugeo segment bp __EoT__ Implemented accordingly to # 6073 . Note : not full implemented for unsorted_X ops .
Shugeo multi lookup fix __EoT__ Fixed # 6311 .
Shugeo pad fix2 __EoT__ Fixed # 6172 .
Shyrma deconv3d __EoT__ - implementation and testing of deconv3d op - correct input validation in strided_slice
Converters between org.nd4j.linalg.primitives.Pair/Triple and scala Tuple __EoT__ Provides converters between nd4j 's tuples and scala tuples . Names to be decided - as proposed ( asScala - as in scala.collection.JavaConverters ) or maybe toScala or toTuple . Matter of taste .
DL4J/Arbiter test fixes __EoT__
DL4J Issues __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6358 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6368 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6326 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6352 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6366 Also does a clean-up pass on some scripts and various unnecessary files .
Shugeo segment refactor __EoT__ Implemented accordingly # 6290 .
pydatavec minor update __EoT__
Various fixes __EoT__ Switches back to spark 1 as default spark version . Fixes Elephas import issue Fixes Issue with Nd4j.where op
Update README.md __EoT__
Fix invalid output array __EoT__ Fix IllegalArgumentException when inputs and labels have different sizes .
pydatavec : use pydl4j __EoT__
Fix pyjnius jvm conflict __EoT__
libnd4j : Link with MKL-DNN and OpenBLAS when available from Maven __EoT__ I plan to add support for MKL-DNN to libnd4j by basically using Maven as our repository for native libraries as well . That 'll probably eventually include BLAS and LAPACK too , so I 've also added OpenBLAS here to test as a fallback for platforms that do n't have MKL . In the case of Windows , Intel does n't test MKL-DNN with GCC , not sure if it would be a good idea to build it with it , but if we 're stuck with MSVC , this means we might have to switch libnd4j to MSVC as well , without good OpenMP support , or switch to the Intel C++ Compiler ... Anyway , for now I 've just added a couple of ` # include ` in ` NativeOps.h ` to test that it works , and then it 's just about using them like any other native dependency .
Shugeo bds fix __EoT__ Fixed # 6322 .
Added a pair tests for Where op . __EoT__ only tests were added
Fixed order bug with top_k op for unsorted cases . __EoT__ Fixed # 6177 .
Temporary disable lint-maven-plugin for nd4j-uberjar __EoT__
Fix missing testresources profile for nd4j-grpc module __EoT__
Messaging update __EoT__ ***WIP ; DO NOT MERGE ; *** This PR adds new messaging system for distributed training
Shyrma broadcast to __EoT__ implementation of broadcast_to op
ND4J fixes , SameDiff import fixes ( + new op mapping ) __EoT__ More to come . Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6305
shyrma histogram_fixed_width __EoT__ histogram_fixed_width op has been implemented and tested
Shugeo matrix band __EoT__ Implemented matrix_band_part ( # 6188 )
Fixed 1D bug with in_top_k op . __EoT__ Fixed # 6179 .
Disable new TF import tests so resources can be merged to master before fixes __EoT__
C-LSTM with mask __EoT__ I 'm training a model to use time-serial images to predict new images , using convolutional LSTM , set RnnToCnnPreProcessor to the first layer ( ConvolutionLayer ) . In order to use n images to predict new n images , i 'm using the 'many-to-many ' , set feature and label both are of ( n x 2 ) size , and set featuresMask as [ 1,1..,1,0 , ... ,0 ] , set labelsMask as [ 0,0 , ... ,0,1 , ... ,1 ] . But it got error : 'Expected rank 4 mask array for 2D CNN layers . Mask arrays for 2D CNN layers must have shape [ batchSize , channels , X , Y ] ' . It seems the featuresMask is applied to input as CNN , how to apply it to input as RNN ? As my raw code is a bit confused , i re-organized the code at https : //gist.github.com/liweigu/f0dafd8045d766b39c23e1b52938b2ac ( Assuming minibatch = 1 , the code is simplied . I can add more code if needed . )
shyrma_sparse_softmax_cross_entropy_loss_with_logits __EoT__ implementation of sparse_softmax_cross_entropy_loss_with_logits
DL4J : Misc fixes __EoT__ More javadoc link formatting fixes . Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6299 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6128 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6101 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6280
Fix build errors occuring with JDK 9 __EoT__ With this , all modules build with Java 9 as well as Java 8 , and most unit tests pass with Java 9 as well .
Various Fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6283 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6279 Also fixes formatting for a bunch of URLs in javadoc ( not complete , however )
Quickstart template ( and more ) __EoT__ Adds a quickstart template after examples . Also restructures samediff files for future docs . Removes tutorials .
Move pydatavec to monorepo __EoT__
DataVec Uberjar __EoT__ Need this for pydatavec .
Deprecate Backprop and Pretrain options when configuring ComputationGraph and MultiLayer __EoT__ Suggestion for # 6292
SameDiff : Next round of import tests + fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6189 Working through this list : https : //github.com/deeplearning4j/deeplearning4j/issues/6231 With resources here : https : //github.com/deeplearning4j/dl4j-test-resources/pull/156
SameDiff : pre resources merge PR __EoT__ Need to merge this before merging other TF import PR : https : //github.com/deeplearning4j/dl4j-test-resources/pull/156 But , ca n't merge it to master otherwise I 'll introduce test failures before the PR that has these fixes can be merged .
Update word vectors link to azure __EoT__
Shyrma range __EoT__ range op has been repaired
Keras timeseries preprocessing module + import __EoT__
DL4J - various fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6237 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6228 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6159 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6184 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6282
Fix issue with VAE + weight noise __EoT__
VGG offset values are wrong ( listed in RGB order ) __EoT__
Shyrma scatter __EoT__ - implementation and testing scatter_nd , scatter_nd_add , scatter_nd_sub , scatter_nd_update ops - provide NDArray : :operators for convenient sub-array indexing
svd_test8 __EoT__ fix svd_test8 for windows_avx2
docs : keras masking support __EoT__
deconv and locally conn test fixes __EoT__
PReLULayer can not be cast to org.deeplearning4j.nn.conf.layers.FeedForwardLayer __EoT__ I believe this is associated with the issue # 6245 . Using the latest snapshot , I 'm getting the following exception : 08:26:16.418 [ main ] INFO org.deeplearning4j.nn.modelimport.keras.Hdf5Archive - Unexpected end-of-input : was expecting closing ' '' ' for name at [ Source : { `` class_name '' : `` Model '' , `` config '' : { `` layers '' : [ { `` class_name '' : `` InputLayer '' , `` config '' : { `` dtype '' : `` float32 '' , `` batch_input_shape '' : [ null , null , null , 3 ] , `` name '' : `` input_3 '' , `` sparse '' : false } , `` inbound_nodes '' : [ ] , `` name '' : `` input_3 '' } , { `` class_name '' : `` Conv2D '' , `` config '' : { `` kernel_constraint '' : null , `` kernel_initializer '' : { `` class_name '' : `` VarianceScaling '' , `` config '' : { `` distribution '' : `` uniform '' , `` scale '' : 1.0 , `` seed '' : null , `` mode ''
Shugeo where fix __EoT__ Fixed # 6226 .
Shugeo pad fix __EoT__ Fixed # 6172 .
autogen docs : support for multiple programming languages __EoT__ @ crockpotveggies you might want to have a look first . I refactored the code so that it 's easier to support other programming languages . right now we only have java , but at least providing a clean implementation for Scala ( i.e . the right regular expressions ) would be great . At some point we need Python support as well , for jumpy etc .
bump scalacheck version __EoT__
Shyrma svd shape __EoT__ provide possibility svd to work with new vector shapes of rank=1 implement scatter_nd op
Shugeo argmin fix __EoT__ Fixed # 6155 .
PI improvements __EoT__ ***WIP ; DO NOT MERGE ; *** This PR adds : - additional ParallelInference mode : INPLACE - OutputAdapter concept for workspace-based conversion of Model output to custom Java entities
move import test to designated place __EoT__
Invalid configuration of layer __EoT__ Sorry if this is not relevant , but I 'm getting the following exception when importing a keras model . `` ` [ main ] INFO org.nd4j.linalg.factory.Nd4jBackend - Loaded [ CpuBackend ] backend [ main ] INFO org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps : 2 [ main ] INFO org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS : 2 [ main ] INFO org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner - Backend used : [ CPU ] ; OS : [ Mac OS X ] [ main ] INFO org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner - Cores : [ 4 ] ; Memory : [ 1.8GB ] ; [ main ] INFO org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner - Blas vendor : [ MKL ] [ main ] WARN org.deeplearning4j.nn.modelimport.keras.KerasModel - If enforceTrainingConfig is true , a training configuration object has to be provided . Usually the only practical way to do this is to store your keras model with ` model.save ( 'model_path.h5 ' . If you store model config and weights separately no training configuration is attached . Exception in thread `` main '' org.deeplearning4j.exception.DL4JInvalidConfigException : Invalid configuration for layer ( idx=-1 , name=conv1 , type=ConvolutionLayer ) for height dimension : Invalid input configuration for kernel height
Enable new TF import tests __EoT__ See : https : //github.com/deeplearning4j/deeplearning4j/pull/6221
Disable new test resources before merging resources PR 146 __EoT__ Due to the way CI works with test resources , I need to merge the test resources first - but doing so might break tests ( causing new failures ) . https : //github.com/deeplearning4j/dl4j-test-resources/pull/146 The process : 1 . Disable new TF import tests on ND4J master 2 . Merge resources 3 . Open PR to remove `` disabling '' of new test cases ( fixing any issues that show up )
Argmax/Argmin fix __EoT__ Fix for negative axis for argmax/argmin
relax keras permute , fix prelu issue __EoT__
Fix issue with data buffer stride __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6133 Also fixes an issue I found with BaseNDArray.getScalar ( long ) - was n't taking stride into account for the vector case .
Import of main AlphaGo Zero architectures through Keras ( for tests / demos ) __EoT__
SameDiff : detect multiple outputs and throw exception __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6214
TF import fixes - round 2 __EoT__ I ended up losing commit history ( could n't merge/rebase ) . https : //github.com/deeplearning4j/dl4j-test-resources/pull/146 https : //github.com/deeplearning4j/TFOpTests/pull/20 - New ops : Pad , Unique , UniqueWithCounts , TopK , InTopK , Zeta , SVD , Angle - Fixes for : Mirror , Mmul ( batch case ) Plus a few imports/fixes for ops we already had ... Most of the work is in the test cases ...
minor keras reshape fix __EoT__
Shugeo unique fix __EoT__ Fixed # 6173 .
Elephas model import __EoT__
PI model update __EoT__ - ParallelInference now able to update model in runtime - fix for bad import in LSTMHelpers cc @ agibsonccc
Auxillary classifier GAN import __EoT__ @ eraly just for you ... and you know , apple maybe .
Another TestFileIterators tweak to avoid platform-specific file iteration order issues __EoT__ cc @ sshepel
Import test improvements + more import mapping __EoT__ Use with : https : //github.com/deeplearning4j/dl4j-test-resources/pull/145 https : //github.com/deeplearning4j/TFOpTests/pull/18 Fixes a bunch of input issues , and adds new imports .
Tweak file iterator test to avoid platform-specific iteration order issues __EoT__
Shugeo broadcast test __EoT__
bool ops __EoT__ Fix for # 6158
More doc fixes __EoT__ Adds more missing files and link fixes .
Shugeo reverse2 __EoT__ Bug # 6142 was fixed .
Failing tests for deeplearning4j-core module __EoT__ Platform : linux-x86_64 Backend : CPU Error snippet : `` ` Failed tests : TestFileIterators.testFileDataSetIterator:70 expected : < [ ===========INPUT=================== [ 1.0000 , 2.0000 , 3.0000 , 4.0000 , 5.0000 , 6.0000 , 7.0000 , 8.0000 , 9.0000 , 10.0000 ] =================OUTPUT================== [ 101.0000 , 102.0000 , 103.0000 , 104.0000 , 105.0000 , 106.0000 , 107.0000 , 108.0000 , 109.0000 , 110.0000 ] , ===========INPUT=================== [ 21.0000 , 22.0000 , 23.0000 , 24.0000 , 25.0000 , 26.0000 , 27.0000 , 28.0000 , 29.0000 , 30.0000 ] =================OUTPUT================== [ 121.0000 , 122.0000 , 123.0000 , 124.0000 , 125.0000 , 126.0000 , 127.0000 , 128.0000 , 129.0000 , 130.0000 ] , ===========INPUT=================== [ 11.0000 , 12.0000 , 13.0000 , 14.0000 , 15.0000 , 16.0000 , 17.0000 , 18.0000 , 19.0000 , 20.0000 ] =================OUTPUT================== [ 111.0000 , 112.0000 , 113.0000 , 114.0000 , 115.0000 , 116.0000 , 117.0000 , 118.0000 , 119.0000 , 120.0000 ] ] > but was : < [ ===========INPUT=================== [ 21.0000 , 22.0000 , 23.0000 , 24.0000 , 25.0000 , 26.0000 , 27.0000 , 28.0000 , 29.0000 , 30.0000 ] =================OUTPUT================== [ 121.0000 , 122.0000 , 123.0000 , 124.0000 , 125.0000 ,
fix zero padding test __EoT__
Fix DataVec test ( dependent on file iteration order ) __EoT__
Fixes for docs migration __EoT__
DL4J : Another javadoc pass __EoT__
Doc fixes __EoT__ Adds iterators , listeners , cudnn , and more .
SameDiff tests : Track and log TF import coverage __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5488 This PR adds collection and logging of coverage for TF ops . Note now that TFGraphTestAll [ Libnd4j/SameDiff ] are now run by OpValidationSuite . See following gist : https : //gist.github.com/AlexDBlack/de1f44ca72d4b5f35c5ccdf123693ef0
Shugeo determinant fix __EoT__ Fixed bug # 6072 .
Jumpy minor updates __EoT__ Changes to fit some incoming examples and benchmarks .
Autogen docs __EoT__ Includes new autogenerated documentation and ensures docs live close to source code .
Shugeo dot bp __EoT__ Fixed bug # 6069 .
Shugeo dynamic bp __EoT__ a first working revision .
Test fixes , dependency fixes __EoT__ Fix logging dependencies in deeplearning4j-nearestneighbors-server + name ( to no longer include scala version ) Otherwise : Small fixes for some test issues . No impact on underlying code , just tests .
Fix SameDiff rank 0 issue for BaseOp n arg calculation __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6102
Adjust limit and capacity when getting addressPointer from DataBuffer __EoT__ Dear Maintainers , please accept this PR that fixes a bug that could cause a segfault . if a databuffer has offset > 0 , then ` DataBuffer.addressPointer ( ) ` will return a new pointer where the address has been shifted to account for the offset . But currently , the pointer capacity and limit is **not** adjusted , which can lead to segfault if the new pointer is used to directly read from memory . e.g . `` ` java DataBuffer myBufferWithOffset = ... . ; FloatPointer pointer = ( FloatPointer ) myBufferWithOffset.addressPointer ( ) ; pointer.get ( pointer.limit ( ) ) ; // this will access data outside the original pointer ! `` `
ND4J : Move nd4j-native test dependencies into profiles __EoT__ To fix build issues when building for the CUDA backend only . ` mvn -nsu dependency : tree -Dmaven.test.skip ` and ` mvn -nsu dependency : tree -Ptestresources ` relieves the changes to be effective .
DL4J : TestSameDiffOutput issues on CUDA __EoT__ No JVM crash log - just this on TestOutputMSELossLayer : `` ` Process finished with exit code -1073740940 ( 0xC0000374 ) `` ` TestMSEOutputLayer gives the following : `` ` Mismatched shape : [ 1 , 2 , 1 , 0 , 1 , 99 ] Shape requested : : { 1 , 5 } java.lang.RuntimeException : Bad shape ! at org.nd4j.nativeblas.Nd4jCuda $ NativeOps.execCustomOpDouble ( Native Method ) at org.nd4j.linalg.jcublas.ops.executioner.CudaExecutioner.exec ( CudaExecutioner.java:2869 ) at org.nd4j.autodiff.samediff.SameDiff.exec ( SameDiff.java:10484 ) at org.nd4j.autodiff.samediff.SameDiff.exec ( SameDiff.java:9374 ) at org.nd4j.autodiff.samediff.SameDiff.execBackwards ( SameDiff.java:9413 ) `` ` https : //github.com/deeplearning4j/deeplearning4j/blob/master/deeplearning4j/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/layers/samediff/TestSameDiffOutput.java
One more last minute fix __EoT__ This PR adds fix for # 5955
Fix version conflicts in dependencies __EoT__ Probably also fixes # 6047 . I 've corrected the dependencies highlighted by this Bash command : `` ` bash $ mvn -nsu dependency : list | grep `` \ [ INFO\ ] `` | sort | grep : compile | uniq > /tmp/deps `` ` followed by this Python script : `` ` python with open ( `` /tmp/deps '' ) as f : content = f.read ( ) .splitlines ( ) newcols = None lastcols = content [ 0 ] .split ( `` : '' ) ; for i in range ( 1 , len ( content ) ) : cols = content [ i ] .split ( `` : '' ) ; if lastcols [ 0 ] == cols [ 0 ] and lastcols [ 1 ] == cols [ 1 ] : newcols = cols else : if newcols ! = None : print ( newcols ) newcols = None lastcols = cols `` ` The build passes , but I have n't started testing anything . I 'm sure we 'll encounter something though ... Two remaining issues are 3 set of incompatible Jackson versions , and Maven not
argmax fix __EoT__ This PR fixes argmax naming . however , we still to add proper tests tomorrow .
deeplearning4j-dataimport-solrj module to import data via Apache Solr 's SolrJ API __EoT__ # # What changes were proposed in this pull request ? Addition of a new deeplearning4j-dataimport-solrj module to import data via Apache Solr 's [ SolrJ API ] ( https : //lucene.apache.org/solr/guide/7_4/using-solrj.html ) A ` DataSetIterator ` implementation ( tentatively named ` TupleStreamDataSetIterator ` ) which uses a [ streaming expression ] ( https : //lucene.apache.org/solr/guide/7_4/streaming-expressions.html ) to fetch data from Apache Solr and/or one of the sources ( e.g . ` jdbc ` ) supported as a [ stream source ] ( https : //lucene.apache.org/solr/guide/7_4/stream-source-reference.html ) . # # How was this patch tested ? ` cd deeplearning4j-dataimport-solrj ; mvn test ` # # Quick checklist The following checklist helps ensure your PR is complete : - [ x ] Reviewed the [ Contributing Guidelines ] ( https : //github.com/deeplearning4j/deeplearning4j/blob/master/CONTRIBUTING.md ) and followed the steps within . - [ x ] Created tests for any significant new code additions . - [ x ] Relevant tests for your changes are passing . - [ x ] Ran mvn formatter : format ( see [ formatter instructions ] ( http : //code.revelc.net/formatter-maven-plugin/examples.html # Setting_Source_Files ) for targeting your
SameDiff ops fixes , tests and implementations __EoT__ Various fixes and new ops for SameDiff
VersionCheck error reading property files __EoT__ Any program I run on my windows 10 machine has org.nd4j.versioncheck.VersionCheck printing a bunch or `` error reading property files '' . This has been going on since 1.0.0 beta ( now using snapshots ) . From what I can tell everything still works as normal so there does not seem to be any missing files . Example POM file : https : //github.com/DrChainsaw/AmpControl/blob/dl4j-snapshot/pom.xml Example program and output : public static void main ( String [ ] args ) { System.out.println ( Nd4j.create ( 1 ) ) ; } 14:58:11.409 [ main ] INFO org.nd4j.linalg.factory.Nd4jBackend - Loaded [ JCublasBackend ] backend 14:58:11.528 [ main ] DEBUG org.nd4j.versioncheck.VersionCheck - Error reading property files for jar : file : ///E : /Software % 2520projects/java/maven_repo/org/datavec/datavec-api/1.0.0-SNAPSHOT/datavec-api-1.0.0-20180802.081646-870.jar ! /ai/skymind/org.datavec-datavec-api-git.properties 14:58:11.528 [ main ] DEBUG org.nd4j.versioncheck.VersionCheck - Error reading property files for jar : file : ///E : /Software % 2520projects/java/maven_repo/org/datavec/datavec-data-audio/1.0.0-SNAPSHOT/datavec-data-audio-1.0.0-20180802.081408-864.jar ! /ai/skymind/org.datavec-datavec-data-audio-git.properties 14:58:11.528 [ main ] DEBUG org.nd4j.versioncheck.VersionCheck - Error reading property files for jar : file : ///E : /Software % 2520projects/java/maven_repo/org/datavec/datavec-data-image/1.0.0-SNAPSHOT/datavec-data-image-1.0.0-20180802.081649-872.jar ! /ai/skymind/org.datavec-datavec-data-image-git.properties 14:58:11.528 [ main ] DEBUG org.nd4j.versioncheck.VersionCheck - Error reading property files for jar : file : ///E : /Software % 2520projects/java/maven_repo/org/deeplearning4j/deeplearning4j-common/1.0.0-SNAPSHOT/deeplearning4j-common-1.0.0-20180802.081438-622.jar ! /ai/skymind/org.deeplearning4j-deeplearning4j-common-git.properties 14:58:11.529
Q __EoT__ This PR add : - quantization prototype - fixes for few issues
Shugeo floormod bp __EoT__ floormod_bp op and tests .
Shyrma batchnorm bp __EoT__ implementation of batchnorm bp
Broadcastable shapes __EoT__ This PR changes broadcastables shape behavior in case of 0D- > 1D- > 2D rank shifts , to address # 6071
Scatter ops __EoT__ This PR updates/fixes scatter ops , and provides 2 new ops : scatter_max and scatter_min . Also provide input - max translation in softmax function
For issue # 6050 __EoT__ Make use of ThreadLocalRandom.current ( ) .ints ( 0 , storageSize ) .distinct ( ) .limit ( actualBatchSize ) Do n't know if it 's OK as it V1.8+ API
DL4J : MLPMnistSingleLayerExample does n't work with EMNIST iterator __EoT__ Starts learning - then divergens . Could be a tuning issue , but EMNIST and MNIST are pretty close that I would n't have expected this ... ! [ image ] ( https : //user-images.githubusercontent.com/2360237/43620100-7b5eb4d6-9714-11e8-9e71-d6caa309505c.png )
Shugeo normalize moments test __EoT__ normalize_moments test to accomplish with java one .
Shugeo lrn bp __EoT__ Added tests for lrn_bp . Refactored lrn implementation .
Few fixes __EoT__ This PR addresses few issues : - # 4486 - # 4658
Dropped waste tests for cumprod op . __EoT__ Dropped unwanted tests for cumprod op .
DL4J Fixes , SameDiff fixes __EoT__ Cane be merged if CI is happy with this . Fix some failing tests in DL4J . Also fixes some samediff ops .
Fix formatting , add explicit version for surefire plugin , commented out failing test for libnd4j __EoT__
Keras text preprocessing __EoT__
DL4J/ND4J Fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/4502 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5320 Also some minor other fixes .
Few other fixes __EoT__ This PR addresses : - # 2020 - # 5038
Remove complex number classes/methods __EoT__ Code compiles , so this should be good to go .
Clean up ND4J environment variables and system properties __EoT__ Moves primary ND4J system properties and environment variables to dedicated classes ( in nd4j-common , so it 's available to all modules ) .
rewrite concatCpuGeneric __EoT__ rewrite concatCpuGeneric
More DL4J/ND4J fixes and integration tests __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5897 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/2507 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6015 Also fixes some issues with conv3d layers . Adds more integration tests . Adds Nd4jTestUtils class .
Jumpy : Add TFModel __EoT__
Jumpy : Reduction ops __EoT__
jumpy : import tf graph mapper __EoT__
Few more fixes __EoT__ This PR addresses few issues : - fixes # 5677 - replaces System.getenv ( ) added recently
Thread safety __EoT__ This PR addresses issue # 5862
env vars __EoT__ This PR adds centralized/unified environment variables processing
Fixed up cumprod_bp op . __EoT__ Fixed bug # 5871 .
BigDecimalMath causes ArithmeticException with zero square root __EoT__ When calling the following code : ~~~~ BigDecimalMath.sqrt ( BigDecimal.valueOf ( 0 ) ) ; ~~~~ An ArithmeticException with description Division undefined is thrown . The description of the square root method states that x is a non-negative argument . That means it should support 0 for square roots .
Few fixes & improvements __EoT__ This PR addresses following issues : - # 5996 - # 5098 - # 5980
ND4J/DL4J Various Fixes __EoT__ Requires additional testing before merging . Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5998 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6002
DL4J Fixes , Integration Test Improvements __EoT__ Fixes MLN serialization issue for workspace configuration , causing spark-ml test failure . Reduces PW module test runtime . Adds a number of new integration tests .
ND4J : Subtraction INDArray.sub ( INDArrayScalar ) throws error __EoT__ Hello . I wanted to use a normalizer ` class ` from a colleague , which worked before April/May 2018 . Now calling the ` sub ` method of an ` INDArray ` with an ` INDArray ` - containing a scalar - as parameter in this ` class ` and anywhere else throws the error below . I tried to check the called lines in ` BaseNDArray ` etc . and to me it looks like the methods for subtracting a scalar are called , but I did not get , why it falls apart . This only happened with ` sub ` . ` add ` , ` mul ` and ` div ` do not throw errors . I replaced the ` INDArray ` - containing a scalar - with an actual ` double ` scalar and it works fine now , but I thought , ` sub ` should work with a scalar ` INDArray ` nonetheless . Best regards Daniel `` ` java.lang.IllegalStateException : Failed to execute CommandLineRunner ... Caused by : org.nd4j.linalg.exception.ND4JIllegalStateException : op.X length should be equal to op.Z length : [ [
Bufferless RNG for graph __EoT__ This PR adds prototype of bufferless RNG for use in Graph . Highlights : - Nested seeds : graph-level seed and node-level seed . Both optional . - Suitable for independent consumption at node level . - Relies on xoroshiro64 ( most of dtypes ) and xoroshiro128 ( edge case ) - Still cross-backend reproducible results
Handle DataSource/DataProvider in Arbiter UI __EoT__ UI was throwing NPE with getDataProvider . Added a test that I manually ran and verified .
[ WIP ] Autogenerated docs overhaul __EoT__ Working branch for the docs overhaul/migration . Includes updates to autogen docs originally written by @ maxpumperla . Please commit new modules for docs to this branch .
Nd4jTestsC.testTadReduce3_0 failing on master __EoT__ From the build log : `` ` Results : Failed tests : Nd4jTestsC.testTadReduce3_0:4572 expected : < [ [ 0.5775 , 0 , 1.8018 ] ] > but was : < [ 0.5775 , 1.1102e-16 , ? ] > Nd4jTestsC.testTadReduce3_1:4598 Failed at 2 expected : < 6.336337740847691E265 > but was : < 0.8447855813770195 > Nd4jTestsC.testTadReduce3_2:4616 Failed at 0 expected : < 7.130456600630294E247 > but was : < 0.0 > Nd4jTestsC.testTadReduce3_4:4710 Failed at 0 expected : < 1.479429115847291E22 > but was : < 0.0 > Tests run : 2066 , Failures : 4 , Errors : 0 , Skipped : 83 `` ` Build details : http : //master-jenkins.skymind.io:8080/blue/organizations/jenkins/deeplearning4j % 2Fdeeplearning4j/detail/PR-5971/3/pipeline/267
nd4j : facilitate deallocator thread identification ( for test purposes ) __EoT__ An assumption : * Sometimes tests have no control over the cleanup of certain private deallocator threads e.g . [ BasicWorkspaceManager.WorkspaceDeallocatorThread ] ( https : //github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/memory/provider/BasicWorkspaceManager.java ) and [ NativeRandomDeallocator.DeallocatorThread ] ( https : //github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-api-parent/nd4j-native-api/src/main/java/org/nd4j/rng/deallocator/NativeRandomDeallocator.java ) in [ nd4j/nd4j-backends ] ( https : //github.com/deeplearning4j/deeplearning4j/tree/master/nd4j/nd4j-backends ) . A problem : * Some tests may wish to use something like [ randomizedtesting ] ( https : //github.com/randomizedtesting/randomizedtesting ) 's [ ThreadLeakControl.checkThreadLeaks ] ( https : //github.com/randomizedtesting/randomizedtesting/blob/master/randomized-runner/src/main/java/com/carrotsearch/randomizedtesting/ThreadLeakControl.java ) to test for leaked threads in the code under test . * But how to distinguish genuinely leaked threads from threads known-to-be-lingering ? A proposed solution : * Provide a way to identify the known-to-be-lingering threads . * Use the ` ThreadLeakFilters ` annotation to filter out such threads . An example : * ` TupleStreamDataSetIteratorTest ` in https : //github.com/deeplearning4j/deeplearning4j/pull/4876
Various ND4J Fixes __EoT__ Can be merged if CI is happy with this . Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5800 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5977 Fixes some failing DL4J unit tests/bugs . Also fixes a bunch of SameDiff ops and tests .
DL4J Keras - issue with bidirectional + sequence embedding layers __EoT__ > alrutten @ alrutten 00:36 i still have a shape error when my data gets transferred from my EmbeddingSequenceLayer to the BidirectionalLayer ( i think ? ) . @ AlexDBlack said he did n't have issues with a model with the same configuration so i assume there is either something wrong with how i load my data , or with how the model is re-instantiated . I have added the keras configuration and some dummydata . https : //gist.github.com/alrutten/1ae60b985f2be4ffa66dcc6b44a5265e
Fix issue with CG output with result in specified workspace __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5981
Fixes for copyright headers __EoT__
Datavec : Add FloatColumnCondition __EoT__
RL4J : Allow settings stepCounter , epochCounter , and historyProcessor __EoT__ Fixes # 5267 , fixes # 5270 , fixes # 5534
Accumulations tweak __EoT__ From early days , Accumulations execution code contains assignment for op.Z ( ) . despite native code is n't relying on these values , and just overwrites them . This code can be removed now .
Add copyright headers __EoT__
SequenceRecordReaderDataSetIterator handles negative labelIndex incorrectly __EoT__ in this if statement ( line 197-216 in SequenceRecordReaderDataSetIterator.java ) the ` if ( labelIndex < 0 ) ` will never be evaluated : `` ` if ( labelIndex == 0 || labelIndex == totalSizeF - 1 ) { //Labels are first or last - > one input in underlying int inputFrom ; int inputTo ; **if ( labelIndex < 0 ) { ** //No label inputFrom = 0 ; inputTo = totalSizeF - 1 ; } else if ( labelIndex == 0 ) { inputFrom = 1 ; inputTo = totalSizeF - 1 ; } else { inputFrom = 0 ; inputTo = labelIndex - 1 ; } builder.addInput ( READER_KEY , inputFrom , inputTo ) ; underlyingIsDisjoint = false ; } `` ` which i think means that the builder will ` .addInput ( readername,0 , -2 ) ` , which seems to lead to a shape error ( ` reader ` is the same ` CSVSequenceRecordReader ` in both code snippets ) : `` ` val iterator = new SequenceRecordReaderDataSetIterator ( reader,1,13 , -1 ) iterator.next ( 1 ) `` ` `` ` Exception in thread `` main '' org.nd4j.linalg.exception.ND4JIllegalStateException :
DL4J/ND4J Various Fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5913 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5960 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5205 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/4866 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5056 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/4557
Shyrma prelu __EoT__ prelu and thresholdedrelu ff/bp ops have been implemented and tested
DL4J : MLN/CG output overloads with output arrays in specified workspaces __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5932
DataVec : add a univariate CSV sequence record reader __EoT__ For some use cases , it can make sense to have each sequence represented as a single line in a CSV . Examples : - Sentences/tweets etc ( that have already been cleaned ) - Integer indices ( for sequence embedding layer ) - Univariate real-valued sequences
Cleanup tests and deprecated methods ; fix ComputationGraph pretrainLayer __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5538 Also cleans up some old/bad tests that were ignored ( un-ignores some , deletes some old ones ) . Removes some long-deprecated methods ( Model methods , hessian free , Layer methods etc )
Improve Arbiter data usability __EoT__ Users can now provide a DataSource - which ( unlike DataProvider ) does n't require JSON serializability , Jackson annotations , etc . Existing DataProvider functionality still works , but has been deprecated . Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5164
More Misc . Fixes __EoT__ DL4J : Fixes a number of failing DL4J unit tests . Also fixes some aditional issues related to the CNN mask array changes implemented recently .
Fix bad import __EoT__
More misc fixes __EoT__ Fixes some failing tests ( DL4J ) . Also updates ( Multi ) DataSet merging for new 4d CNN mask arrays . Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5255 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5238 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5789 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5519 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5894 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5765 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5835
Shyrma ops bp __EoT__ - numerical gradient check has been implemented - back prop for clip_by_norm has been fixed
DL4J Fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5907 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5624 Note : This PR makes significant changes to mask arrays for CNN layers . - Previously : masks were always 2d , [ minibatch , H ] or [ minibatch , W ] . And global pooling layer could work only if exactly one of H or W of input was 1 - Now : Masks for CNNs are 4d , in a broadcastable format : `` ` [ mb , d/1 , h/1 , w/1 ] `` ` - Required to fix # 5624 - This also allows us to support more sophisticated masking situations : for example , different image sizes in same minibatch for fully convolutional networks ( using either Pool+outputLayer , or CnnLossLayer ) - CnnSentenceDataSetIterator now supports Cnn1d/RNN format also ( plus has been updated to new 2d CNN mask format )
add logging exclusions to play __EoT__ Adds some logging exclusions to play to get rid of slf4j warnings .
Fix copyright headers formatting for new files __EoT__
ND4J/SameDiff Fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5934 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5648
Add graph runner constructor for configuration __EoT__ We were missing an over load for the session configuration . This fixes that .
DL4J Spark : Fix gradient sharing state on network changes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5924
Fix missing dependencies __EoT__ Somehow a commit was missed in this PR : https : //github.com/deeplearning4j/deeplearning4j/pull/5910
DL4J : Add loader API ( mainly for Spark ) __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5898 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5919
DL4J - CuDNN Fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5836
Unused dependency pass __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5908 Removes some dependencies that are unused according to `` ` mvn dependency : analyze `` `
Squeeze test __EoT__
fix formatting of copyright headers __EoT__
Simple spelling correction __EoT__
Nd4j squeeze __EoT__
Proper Keras optimizer support __EoT__
Update dependencies to just released JavaCPP and JavaCV 1.4.2 __EoT__
Update copyright headers __EoT__ Please , check thoroughly , there could be a chance that smth is missing , or added unintentionally . List of files that were not changed because of it controversial content : 1. deeplearning4j/datavec/datavec-api/src/main/java/org/datavec/api/records/reader/impl/csv/SerializableCSVParser.java 2. deeplearning4j/deeplearning4j/deeplearning4j-nlp-parent/deeplearning4j-nlp-japanese/src/main/java/com/atilika/kuromoji 3. deeplearning4j/nd4j/nd4j-common/src/main/java/org/nd4j/util/FingerPrintKeyer.java 4. deeplearning4j/libnd4j/include/ops/declarable/generic/parity_ops/space_to_batch.cpp 5. deeplearning4j/libnd4j/include/ops/declarable/generic/parity_ops/strided_slice.cpp
Few fixes __EoT__ Few dl4j-nlp issues fixed
Keras docs : getting started section , index __EoT__
Update versions of OpenBLAS , MKL-DNN , OpenCV , and TensorFlow __EoT__ Note : Here we are reverting to OpenBLAS 0.3.0 as it 's the last known working version for now .
DL4J : Various fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5867 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5808 Also fixes an issue with 1D convolution layers and masking , when the convolution layers downsample the data .
Keras integration for locally connected 1d layer __EoT__
Locally connected 1d layer __EoT__
Update logic for libnd4j tests __EoT__ - Remove sudo ; - Remove source /opt/rh/devtoolset-7/enable , because of new logic for tests .
[ WIP ] keras locally connected 2D import __EoT__
Jumpy fixes __EoT__
Locally connected 2D __EoT__
DL4J : Spark training deadlock ( with OMP_NUM_THREAD=1 only ? ) __EoT__ Part of recent spark benchmarks/testing : On a 16 core machine , if I configure 8 workers with OMP 1 , 1344 minibatches of size 8 , openblas , we end up completing 119 batches , then nothing ... `` ` 2018-07-11 05:31:21 INFO TaskSetManager:54 - Finished task 123.0 in stage 7.0 ( TID 792 ) in 7836 ms on 10.0.2.7 ( executor 3 ) ( 113/168 ) 2018-07-11 05:31:21 INFO TaskSetManager:54 - Finished task 116.0 in stage 7.0 ( TID 790 ) in 8051 ms on 10.0.2.11 ( executor 4 ) ( 114/168 ) 2018-07-11 05:31:21 INFO TaskSetManager:54 - Finished task 107.0 in stage 7.0 ( TID 796 ) in 7653 ms on 10.0.2.5 ( executor 5 ) ( 115/168 ) 2018-07-11 05:31:21 INFO TaskSetManager:54 - Finished task 120.0 in stage 7.0 ( TID 799 ) in 7542 ms on 10.0.2.10 ( executor 2 ) ( 116/168 ) 2018-07-11 05:31:21 INFO TaskSetManager:54 - Finished task 125.0 in stage 7.0 ( TID 801 ) in 7634 ms on 10.0.2.9 ( executor 0 ) ( 117/168 ) 2018-07-11 05:31:21 INFO TaskSetManager:54 - Finished task 122.0 in stage 7.0 (
Few tests __EoT__ This PR adds few tests related to gemm problem found recently .
fix validation for setOrder __EoT__
Remade a correction to allow longer strings in Arrow vectors __EoT__ Remade the correction of commit https : //github.com/deeplearning4j/deeplearning4j/commit/d62c4238432f62ffbc3fce7d35e2fd2c434776e9 that was probably overwritten
Fixed reverse behavior with full range axis . __EoT__ Fixed bug # 5795 .
[ Keras import ] Fully support Lambda layers . __EoT__ # # # # Issue Description We have have an OKish workaround for supporting Lambda layers in individual cases , see here : https : //github.com/deeplearning4j/deeplearning4j/blob/4a25300f1452d656b15686cbb224f28c28aa70c1/deeplearning4j-modelimport/src/test/java/org/deeplearning4j/nn/modelimport/keras/configurations/Keras2ModelConfigurationTest.java # L44-L46 In general , a Keras Lambda layer accepts any lambda function ( any expression over backend operations ) as forward pass . To support this , we need to understand these functions upon import . One way to go may be to _dump out these lambda functions as tensorflow graphs_ that we import into a layer/cell/module/whatever . Still a long way to go , just putting this out here .
Keras import test failures on master __EoT__ Not sure what happened , but the following tests fail currently on master : `` ` Results : Failed tests : KerasModelEndToEndTest.importCnnNoBiasTfKeras2:279- > importEndModelTest:596- > checkGradients:743 Gradient check failed KerasModelEndToEndTest.importMnistCnnTfKeras2:155- > importEndModelTest:555- > compareINDArrays:662 KerasModelEndToEndTest.importMnistCnnThKeras1:148- > importEndModelTest:555- > compareINDArrays:662 KerasModelEndToEndTest.importMnistMlpReshapeTfKeras1:131- > importEndModelTest:555- > compareINDArrays:662 KerasModelEndToEndTest.importMnistMlpTfKeras1:110- > importEndModelTest:555- > compareINDArrays:662 KerasModelEndToEndTest.importMnistMlpTfKeras2:124- > importEndModelTest:555- > compareINDArrays:662 KerasModelEndToEndTest.importMnistMlpThKeras1:117- > importEndModelTest:555- > compareINDArrays:662 Tests run : 140 , Failures : 7 , Errors : 0 , Skipped : 6 `` ` Those tests are output differences between DL4J and Keras on simple MLPs and CNNs . Afaict nothing has changed in Keras import that would cause this , but I need to further investigate this issue .
Fix nd4j-cuda maven surefire plugin arguments __EoT__
Import keras model with disconnected layers __EoT__ Importing keras model with disconnected layers fails with an error message regarding the existence of disconnected layers . I used the following model . ! [ model ] ( https : //user-images.githubusercontent.com/1430594/42446063-f181a896-836c-11e8-99b1-c64f9b2465dd.png ) https : //we.tl/OSNGdhfsSy The exception is the following : Exception in thread `` main '' java.lang.IllegalStateException : Invalid configuration : disconnected vertices found - [ conv2d_59 , conv2d_67 ] . Disconnected vertices are those that do not connect to either another vertex , and are also not a network output . To disable this error ( i.e. , allow network configurations with disconnected vertices ) use GraphBuilder.allowDisconnected ( true ) at org.deeplearning4j.nn.conf.ComputationGraphConfiguration.validate ( ComputationGraphConfiguration.java:346 ) at org.deeplearning4j.nn.conf.ComputationGraphConfiguration $ GraphBuilder.build ( ComputationGraphConfiguration.java:1033 ) at org.deeplearning4j.nn.transferlearning.TransferLearning $ GraphBuilder.build ( TransferLearning.java:753 ) at pt.ipb.yolo.YoloConverter.main ( YoloConverter.java:57 ) -- -- -- - $ java -version java version `` 1.8.0_151 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_151-b12 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.151-b12 , mixed mode ) -- -- -- Running DL4J 1.0.0-beta on macOS 10.13.5
allow manual setting of dim ordering in keras import __EoT__ For older versions ( pre 1.2 ) it 's sometimes impossible to infer this correctly . This should n't be used in general .
DL4J Spark fixes ( Gradient Sharing ) __EoT__ Fixes/improvements for gradinet sharing . Specifically : * Bug fix in repartitioning for gradient sharing * Makes repartitioning more configurable ( adds Repartitioner interface ) * Improves repartitioning ( new default algorithm allows spark scheduler to do proper load balancing ) * Post training , logs number of minibatches fit for each JVM
Allow long shapes in SameDiff reshape ( currently only int ) __EoT__
Update version of OpenBLAS to 0.3.1 __EoT__ Fixes # 5853
Few tweaks __EoT__ Few compilation-related tweaks & few tests fixes
Changed a typo in Readme.md __EoT__
Implement Cycle Schedule __EoT__ This schedule can be used for 1cycle based learning rate scheduling , or if annealingLength is set to 0 , it can also be just a simple saw tooth learning rate schedule .
Add consolidated perform-release.sh script __EoT__ Tested on Linux and works fine . Versions get changed properly and tags are added . I 've also changed SKIP_BUILD to default to 1 because we 're now using the CI servers to perform the builds themselves . Also , I have n't polished all the Maven commands needed to get it working well with builds for Android and iOS , for example , again because we 're relying on the CI servers .
Shyrma factory remove __EoT__ - get rid of NDArrayFactory class , move it 's methods to NDArray and MmulHelper classes - add concat tests for different orders of input arrays
Use locationsIterator instead of locations array __EoT__ This allows randomization over files in LineRecordReader
Fix lack of testresources profile for nd4j-tensorflow __EoT__
Spark empty RDD fix __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5810
Remove @ AllArgsContructor from TransformProcessRecordReader __EoT__ It already has a proper constructor , and there is no reason why someone should be setting a cached record when creating that object .
One more fix __EoT__ One more CUDA fix
More DL4J SameDiff Functionality __EoT__ Should be good to go . Adds : - DL4J SameDiff lambda layer - DL4J SameDiff lambda vertex - DL4J SameDiff vertices - DL4J SameDiff output layer - GraphVertex instances may have trainable parameters ( previously : only layers could have trainable parameters , and LayerVertex indirectly ) Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5431
Shyrma mmul t __EoT__ - refine/optimize/add trans_result option to matmul op - move mmul/dot methods from NDArrayFactory class to MmulClass
Consolidate build profiles between libnd4j and nd4j modules __EoT__ Reverts to always using the same build directories for libnd4j to do without symbolic links , which are no longer useful now that we use the Maven Assembly Plugin for that purpose . Works fine for Linux with CUDA and Android , should work fine for all other platforms ...
Get rid of tensor format for arrow converter __EoT__ The arrow serialization for tensors is not consistent with large arrays . This PR replaces the serde used in datavec with the BinarySerde format from nd4j .
Make Aeron term buffer a power of 2 __EoT__ Fails with exception currently as property is not a power of 2
Keras and DL4J model give different predictions and corresponding probabilities __EoT__ def baseline_model ( ) : model = Sequential ( ) # 1 - Convolution model.add ( Conv2D ( 64 , ( 3,3 ) , border_mode='same ' , input_shape= ( 48 , 48,1 ) ) ) model.add ( BatchNormalization ( ) ) model.add ( Activation ( 'relu ' ) ) model.add ( MaxPooling2D ( pool_size= ( 2 , 2 ) ) ) model.add ( Dropout ( 0.25 ) ) # 2nd Convolution layer model.add ( Conv2D ( 128 , ( 5,5 ) , border_mode='same ' ) ) model.add ( BatchNormalization ( ) ) model.add ( Activation ( 'relu ' ) ) model.add ( MaxPooling2D ( pool_size= ( 2 , 2 ) ) ) model.add ( Dropout ( 0.25 ) ) # 3rd Convolution layer model.add ( Conv2D ( 512 , ( 3,3 ) , border_mode='same ' ) ) model.add ( BatchNormalization ( ) ) model.add ( Activation ( 'relu ' ) ) model.add ( MaxPooling2D ( pool_size= ( 2 , 2 ) ) ) model.add ( Dropout ( 0.25 ) ) # 4th Convolution layer model.add ( Conv2D ( 512 , ( 3,3 ) , border_mode='same ' ) ) model.add
[ WIP ] multilang support for autogen docs __EoT__ @ crockpotveggies jfyi : adding an additional template folder like ` template_de ` will allow you to output other target languages . of course someone has to write these templates . However , the advantage of doing this programmatic is that we can check if templates diverge etc . Note that this does not answer the question of _how to integrate multiple languages_ into one or multiple websites . That 's a separate concern . jekyll / github pages do not have really good answers out of the box , afaict . But I 'm sure there 's a way to do this properly .
WordVectorSerializer.readParagraphVectors ( file ) did n't init the SourceLabel __EoT__ The paragraph vector loaded using WordVectorSerializer.readParagraphVectors ( file ) has null label source . Cause : During reading paragraph vector , the list of label is read ( and extracted by the ParagraphVectors.extractLabels ( ) ) , but not pass to source label . Effect : [ 1 ] ParagraphVectors.getLabelSource ( ) is always null if the model is load from file . [ 2 ] ParagraphVectors.predict ( String text ) will get error since for ( String s : labelsSource.getLabels ( ) ) { will cause the NullPointerException error .
Threshold improvements __EoT__ This PR adds minor improvements for threshold encoding
Empty dtype __EoT__ This PR adds following : - Empty NDArrays now provide dtype information ( stored in shapeInfo ) - Long.hashCode removed
Samediff docs init __EoT__
libnd4j : Build tests as part of the main build __EoT__ Fixes # 5365 , prevents building the source multiple times when running tests . Tested manually on some architectures of Linux , Mac , Android , iOS , and Windows , and works fine .
Import Errors and Incorrect Output from Imported Xception Model made in Keras __EoT__ When importing several xception models made in keras ( by a collaborator ) I get this set of warnings/errors and the model outputs incorrect values . In the most recent case the outputs hover around some 0.36 for all images fed into it . > 17:56:23.293 [ JavaFX Application Thread ] [ INFO ] o.d.nn.modelimport.keras.Hdf5Archive - Unexpected end-of-input : was expecting closing quote for a string value > at [ Source : java.io.StringReader @ 343e841e ; line : 1 , column : 36001 ] > 17:56:23.298 [ JavaFX Application Thread ] [ INFO ] o.d.nn.modelimport.keras.Hdf5Archive - Unexpected end-of-input : was expecting closing ' '' ' for name > at [ Source : java.io.StringReader @ 2d835a41 ; line : 1 , column : 40001 ] > 17:56:23.309 [ JavaFX Application Thread ] [ INFO ] o.d.nn.modelimport.keras.Hdf5Archive - Unexpected end-of-input : was expecting closing ' '' ' for name > at [ Source : java.io.StringReader @ 41a13d1c ; line : 1 , column : 44001 ] > 17:56:23.314 [ JavaFX Application Thread ] [ INFO ] o.d.nn.modelimport.keras.Hdf5Archive - Unexpected end-of-input within/between ARRAY entries > at [ Source : java.io.StringReader
Nd4j tensorflow interop __EoT__ Adds zero copy conversion between nd4j arrays and tensorflow arrays .
Support for HTML formatted string __EoT__ - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - # # # # # # Include the following : - Material Dialogs version : ` 2.0.0-beta4 ` -- - # # # # # # Description : On previous versions of MaterialDialogs one could send a ` StringRes ` that was actually an HTML string , and the dialog would be shown properly and even links would work . Do you think you could bring back said functionality ? Or maybe making the content clickable ? ( I 'm sending the formatted ` CharSequence ` but the links clicks do not work ) . Thanks
Allow to disable overscroll effect __EoT__ - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - # # # # # # Include the following : - Material Dialogs version : ` 2.0.0-beta4 ` -- - # # # # # # Description : This issue is probably related to # 1163 and your answer was `` That 's android behavior '' Do you think you could try using ` android : overScrollMode= '' ifContentScrolls '' ` to see if it gets disabled ? ! [ img_20181108_211933_796_1 ] ( https : //user-images.githubusercontent.com/10360816/48239706-f08dde00-e39d-11e8-8af3-f56d984f3ba4.jpg )
Increase end margin of last button __EoT__ - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - # # # # # # Include the following : - Material Dialogs version : ` 2.0.0-beta4 ` -- - # # # # # # Description : Can you please increase the end margin of the last button to look the same as the bottom margin ? It looks a bit too close to the right side ( I know they are the same right now , but the button text padding make them look different ) . Thanks in advance . ! [ screenshot_20181108-211237_1 ] ( https : //user-images.githubusercontent.com/10360816/48239550-4746e800-e39d-11e8-951d-643fc1d1b57b.png )
Documentation should use correct Kotlin operator 'or ' in InputType section __EoT__ Readme has the following code example under the `` InputTypes '' header : `` ` val type = InputType.TYPE_CLASS_TEXT and InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS `` ` Whereas Java used single pipe '| ' when setting flags , should n't the Kotlin equivalent be to use the 'or ' operator ? So readme would read as follows : `` ` val type = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS `` ` I was not able to use the type `` InputType.TYPE_CLASS_TEXT and InputType.TYPE_TEXT_VARIATION_PASSWORD '' in my code , but '' InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD '' worked fine .
Add ability to remove/replace positive listeners __EoT__ - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . - Material Dialogs version : ` 2.0.0.beta4 ` I 'm creating a dialog with custom view . This dialog is used often , i need it to be quick , but the view itself is pretty heavy . So , in version 1 of material dialog i created a builder and then every time when i needed to display popup i could just replace some values on view , setup positive button callback and show dialog again . But now i ca n't do that right now since ` positiveButton ` adds new callback to listeners list . Can we have
WIP Color chooser custom ARGB selection __EoT__ I added a simple argb color selector and fixed this bug : https : //github.com/afollestad/material-dialogs/issues/1627 I kept it quite simple , let me know what you think of it
Color chooser crashes if preselected color is a color of the secondary colors __EoT__ - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - # # # # # # Include the following : - Material Dialogs version : ` 2.0.0-beta3 ` - Affected device : All Color dialogs will crash if you provide a selection color that is part of the secondary colors array because you forgot to set the selectedTopIndex here in init I think : https : //github.com/afollestad/material-dialogs/blob/54bcaa9197a8d1364c8458d76a0d588d1cbee5cd/color/src/main/java/com/afollestad/materialdialogs/color/ColorGridAdapter.kt # L110-L116 If a sub color is found ` selectedTopIndex ` keeps the value -1 and following exception occurs : java.lang.ArrayIndexOutOfBoundsException : length=19 ; index=-1 at com.afollestad.materialdialogs.color.ColorGridAdapter.getItemCount ( ColorGridAdapter.kt:140 ) at androidx.recyclerview.widget.RecyclerView.dispatchLayoutStep1 ( RecyclerView.java:3834 )
Dark theme 's divider does n't look right __EoT__ - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - # # # # # # Include the following : - Material Dialogs version : ` 2.0.0-beta3 ` - Affected device : Moto G5 Plus ! [ photo_2018-09-26_20-17-50 ] ( https : //user-images.githubusercontent.com/6831873/46118205-015a0a00-c1cb-11e8-88ca-14c1bbe97cdb.jpg ) ! [ photo_2018-09-26_20-18-02 ] ( https : //user-images.githubusercontent.com/6831873/46118206-015a0a00-c1cb-11e8-8018-c0f019018a2b.jpg ) -- - # # # # # # Reproduction Steps 1 . Create single choise dialog with dark/light theme -- - # # # # # # Expected Result Top and bottom lines shows expected colors -- - # # # # # # Actual Result The colors are inverted
Color chooser dialog should support displaying a transparent color option __EoT__ Right now having a transparent color makes the circle in the grid show the dialog background . We should instead make it obvious it represents transparent , like with a grid .
Support for AndroidX __EoT__ ( ` [ x ] ` becomes a filled in checkbox , ` [ ] ` is an empty one ) - [ x ] *I understand that dialogs which require a combination of different dialog types provided by this library ( e.g . list + progress , input + checkbox ) require a **custom view** . * - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - # # # # # # Include the following : - Material Dialogs version : ` 0.9.6.0 ` -- - What about support for the androidx-packages ( e.g . ` androidx.recyclerview.widget.RecyclerView ` to be used for ` MaterialDialog.customAdapter ( ) ` ) . Is
Add the ability to remove default root layout margin __EoT__ I am using Material Dialogs with RecyclerView and it got super weird on top and bottom . Check below comparison between before and now . Most of the code is really standard and [ my app is open source ] ( https : //github.com/bernaferrari/ChangeDetection ) ( but I still have n't pushed the changes ) . `` ` xml < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < android.support.v7.widget.RecyclerView xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : app= '' http : //schemas.android.com/apk/res-auto '' android : id= '' @ +id/defaultRecycler '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : background= '' @ color/windowBackground '' app : layoutManager= '' android.support.v7.widget.LinearLayoutManager '' / > `` ` `` ` kotlin val materialDialog = MaterialDialog ( activity ) .customView ( R.layout.recyclerview ) .noAutoDismiss ( ) .negativeButton ( R.string.cancel ) { it.dismiss ( ) } .positiveButton ( R.string.save ) { dialog - > ... } materialDialog.getCustomView ( ) ? .findViewById < RecyclerView > ( R.id.defaultRecycler ) ? .apply { this.overScrollMode = View.OVER_SCROLL_NEVER this.layoutManager = LinearLayoutManager ( this.context ) this.adapter = GroupAdapter < ViewHolder
Illegal character in compiler Kotlin module names __EoT__ I got error '' Illegal char < : > at index 41 : \META-INF\com.afollestad.material-dialogs : core.kotlin_module '' How can i fix that ? thanks
Extension functions are n't resolving __EoT__ ( ` [ x ] ` becomes a filled in checkbox , ` [ ] ` is an empty one ) - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - # # # # # # Include the following : - Material Dialogs version : ` 2.0.0-alpha10 ` Also , please wrap your code with correct syntax highlighting ( not just indents ) . `` ` kotlin val dialog = MaterialDialog ( this ) .customView ( view = dialogTrainerChange , false ) .show ( ) `` ` -- - Thanks for your fully convenient library : ) Recently I try to migrate from ` 0.9.6.0 ` to ` 2.00-alpha
Styles attributes for title and text color __EoT__ ( ` [ x ] ` becomes a filled in checkbox , ` [ ] ` is an empty one ) - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - # # # # # # Include the following : - Material Dialogs version : ` 2.0.0-alpha09 ` - Affected device : All Also , please wrap your code with correct syntax highlighting ( not just indents ) . `` ` kotlin MaterialDialog ( this ) .title ( R.string.attention ) .message ( R.string.choose_screen ) .positiveButton ( android.R.string.ok ) .show ( ) `` ` `` ` xml < item name= '' android : textColorPrimary '' > @ color/black
Positive action button not disabled correctly with input dialogs __EoT__ The positive button is enable at the beginning . When a letter is written and deleted , it is disabled . I have solved it with ` dialog.getInputField ( ) ! ! . setText ( `` '' ) ` but should do it by default See attached video [ button ok.mp4.zip ] ( https : //github.com/afollestad/material-dialogs/files/2367238/button.ok.mp4.zip )
Input dialog pre-fill should place cursor at the end __EoT__ Can you please add the input option , to set the cursor at the end of the prefilled text ? So when the user opens a dialog , which has a prefilled text , the cursor is at the end of the text , not at the beginning . Like `` ` kotlin .input ( prefilledCursorAtEnd = true ) { dialog , text - > // Text changed } `` ` or something similar Function for normal input fields would be : `` ` kotlin field.setSelection ( field.text.length ) `` `
Ability to programatically modify checked list items after dialog is created __EoT__ I have used multiplechoice list ( checkboxes ) . I have a case when user selected 1st checkbox , the rest of checkboxes should get checked too , and vice versa . How to perform this ? Do I have to make custom recyclerview to do this ?
Input dialog pre-fill should place cursor at the end __EoT__ Can you please add the input option , to set the cursor at the end of the prefilled text ? So when the user opens a dialog , which has a prefilled text , the cursor is at the end of the text , not at the beginning . Like `` ` kotlin .input ( prefilledCursorAtEnd = true ) { dialog , text - > // Text changed } `` ` or something similar Function for normal input fields would be : `` ` kotlin field.setSelection ( field.text.length ) `` `
Ability to set dialog background color __EoT__ In previous version there was an opportunity to set dialogs background by parameter md_background_color . But now how to set global material dialogs background in res/styles for dark theme ?
Add fluent ` cancelable ` method __EoT__ ( ` [ x ] ` becomes a filled in checkbox , ` [ ] ` is an empty one ) - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . I would like a feature where we can prevent dismissal of dialog if a tap occurs anywhere outside the dialog . This will be useful if we need some input from the dialog and it ca n't be ignored . - Material Dialogs version : ` 2.0.0-alpha6 `
Crash in FileChooserDialog when navigating up __EoT__ ( ` [ x ] ` becomes a filled in checkbox , ` [ ] ` is an empty one ) - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : ` 2.0.0-alpha05 ` - Affected device : emulator ( API 28 ) Crash in FileChooserDialog when keep on navigating up : `` ` java.lang.IllegalStateException : parentFile must not be null at com.afollestad.materialdialogs.files.utilext.FilesUtilExtKt.betterParent ( FilesUtilExt.kt:28 ) at com.afollestad.materialdialogs.files.utilext.FilesUtilExtKt.hasParent ( FilesUtilExt.kt:16 ) `` ` # # # # # # Expected Result No 'folder back ' icon in case further back navigation is impossible . P.s .
File chooser sorting issue __EoT__ ( ` [ x ] ` becomes a filled in checkbox , ` [ ] ` is an empty one ) - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - - Material Dialogs version : ` 2.0.0-alpha05 ` - Affected device : OnePlus 5T with Android 8.1 This is what I get via fileChooser on the device : ! [ screenshot_flasher_20180828-222351 ] ( https : //user-images.githubusercontent.com/8329104/44745917-b2f51500-ab11-11e8-8753-ceb9f4f87d54.png ) As you can see , something is wrong with sorting in FileChooserAdapter . This is the calling code ( callback is omitted ) : `` ` kotlin val initialPath = Const.FALLBACK_FOLDER val filter : FileFilter = { it.isDirectory || it.name.endsWith ( `` .zip
Unable to scroll all the way down when keyboard is open __EoT__ - Material Dialogs version : ` 0.9.4.5 ` - Device OS version : ` 7.1.1 ` - Device Manufacturer : ` Motorola ` - Device Name : ` Nexus 6 ` I have a dialog with a custom view and it is pretty long . It is wrapped on a scrollview . When I select one of the ` EditText ` fields , I 'm unable to scroll all the way down to the other fields that I need to edit . I 'm pasting my code below : `` ` MaterialDialog.Builder builder = new MaterialDialog.Builder ( MainActivity.this ) .title ( `` test '' ) .customView ( R.layout.long_layout , true ) ; builder.show ( ) ; `` ` And my layout is : `` ` < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' > < TextView android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : text= '' START '' /
2.0.0-alpha : RTL support __EoT__ Right to left support needs to be re-implemented .
Support library 27 font support __EoT__ Since support library v27 there is a new way of using custom fonts in our apps ( without Calligraphy ) . Currently for dialogs you can specify the typeface every time with the builder pattern or by using ` md_medium_font ` and ` md_regular_font ` tags in styles but the issue is that it takes fonts only from assets folder . Can we have an option to get it from the res/font folder ? I 'm asking this because I 'll need duplicate font files or add typefaces to every dialog builder in the app and I would like to keep it short and simple .
Use List instead of Array __EoT__ Hi , I have a weird question . I am using Lists a lot on Kotlin , like 100 % of my time , and I know I can just call toTypedArray to convert them . However , as far as I 've seen , most devs and libraries use list instead of array . This is not a scientific evidence ; it was just a surprise when I tested 2.0 and suddenly got a lot of errors on this - like , I never used Array on the last year and all libraries I tested and used worked just fine ( which probably means they are using it too ) , except yours . So , if this is n't personal or there is n't any reason at all you chose it , I would suggest converting them to lists . Else , just ignore this . BTW , I am really loving 2.0 alpha . Simplified a loooot of things ! Great start !
Version 2 , alpha 1 __EoT__ 1 . **This library will be more opinionated . Not every feature request will be implemented . ** 2 . Completely rebuilt everything . There is no longer any Java code in the project , just Kotlin . 3 . There is no longer a separate ` Builder ` class , it 's all-in-one . 4 . All main classes exist in the ` core ` module , the extension modules take advantage of Kotlin extensions to append functionality to it ( such as input dialogs , color dialogs , etc. ) . This way , you can include only what your app needs . 5 . The use of the neutral button is deprecated to discourage use , see the [ newer Material guidelines ] ( https : //material.io/design/components/dialogs.html # actions ) . 6 . There is no longer a progress dialog included in library , since they are discouraged by Google , and discouraged by me . You should prefer a non-blocking inline progress indicator . 7 . No dynamic color support , your dialogs will match your app theme . *I will be making sure [ Aesthetic ] ( https :
Build fail when opening project in Android Studio __EoT__ Hi , I got this message when opening the project in Android Studio : > Error : Could not read 'https : //raw.githubusercontent.com/afollestad/aidanfollestad.com/master/android-lib-release.gradle ' as it does not exist . It happened for either the cloned or zipped download .
MaterialDialog Builder context is leaked __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . - Material Dialogs version : ` 0.9.4.7 ` - Device OS version : ` 8.0.0 ` - Device Manufacturer : ` Google ` - Device Name : ` Pixel ` LeakCanary is showing me that ` MaterialDialog $ Builder.context ` is leaking because a reference to it is held by a ` Message.obj ` which is held by a ` HandlerThread ` . I 'm correctly dismissing my dialog , and releasing any references to it , so the leak is not on my side . [ I believe this is where the issue is occurring ] ( https : //github.com/afollestad/material-dialogs/blob/539e9e7b4fbb0354775804759e700d7dbce9639d/core/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java # L737 ) . I 'm not sure how that message gets stuck in the handler though .
Action button visibility is VISIBLE even when not showing __EoT__ Material Dialogs version : ` 0.9.4.5 ` The visibility of the action buttons is set [ here ] ( https : //github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/DialogInit.java # L164 ) based on the text being null or not ( although I think it should use ` TextUtils.isEmpty ( ) ` instead ) . Then later , the visibility of the action buttons is set to ` View.VISIBLE ` [ here ] ( https : //github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/DialogInit.java # L298 ) . The result of this is that if you try to check the visibility of an action button to determine if it is showing , you have to check both the visibility **and** whether it has text : `` ` java MDButton btn = dialog.getActionButton ( DialogAction.POSITIVE ) ; if ( btn.getVisibility ( ) == View.VISIBLE & & ! TextUtils.isEmpty ( btn.getText ( ) ) ) { // Do something } `` ` rather than simply : `` ` java if ( dialog.getActionButton ( DialogAction.POSITIVE ) .getVisibility ( ) == View.VISIBLE ) { // Do something } `` ` This is how AlertDialog works ( only need to check visibility ) . I also noticed that [
NPE android.os.IBinder android.view.View.getWindowToken ( ) __EoT__ `` ` java.lang.NullPointerException : Attempt to invoke virtual method 'android.os.IBinder android.view.View.getWindowToken ( ) ' on a null object reference FATAL EXCEPTION : main Process : com.instructure.parentapp , PID : 7385 java.lang.NullPointerException : Attempt to invoke virtual method 'android.os.IBinder android.view.View.getWindowToken ( ) ' on a null object reference at com.afollestad.materialdialogs.util.DialogUtils.hideKeyboard ( DialogUtils.java:226 ) at com.afollestad.materialdialogs.MaterialDialog.dismiss ( MaterialDialog.java:1810 ) at com.afollestad.materialdialogs.MaterialDialog.onClick ( MaterialDialog.java:363 ) at android.view.View.performClick ( View.java:5637 ) at android.view.View $ PerformClick.run ( View.java:22429 ) at android.os.Handler.handleCallback ( Handler.java:751 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:154 ) at android.app.ActivityThread.main ( ActivityThread.java:6119 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:886 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:776 ) `` ` I 'm seeing this NPE on ` Low-resolution MDPI phone , Virtual , API Level 25 ` . [ DialogUtils ] ( https : //github.com/afollestad/material-dialogs/blob/1ce3af634402f61fc0afb4d026c9480cf8302a35/core/src/main/java/com/afollestad/materialdialogs/util/DialogUtils.java # L259 ) is calling ` getWindowToken ( ) ` without checking ` getView ` is non-null . > currentFocus ! = null ? currentFocus.getWindowToken ( ) : dialog.getView ( ) .getWindowToken ( ) ; Version : ` com.github.afollestad.material-dialogs : core:0.8.5.2 @ aar ` In version 0.8.5.2 the above is : > imm.hideSoftInputFromWindow ( dialog.getCurrentFocus
Exception when reusing Builder with list dialog __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have given my issue a non-generic title . - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : ` 0.9.4.5 ` - Device OS version : ` O ` - Device Manufacturer : ` Google ` - Device Name : ` Pixel ` Also , please wrap Java with correct syntax highlighting . `` ` java public class ResultDialog extends Observable implements Showable { private static ResultDialog dialog ; private MaterialDialog.Builder builder ; private MaterialDialog materialDialog ; private Resource r ; public static ResultDialog getInstance ( Resource r , TableName type ) { if ( dialog == null ) throw new RuntimeException ( `` No Result dialog before '' ) ; return dialog.setResource ( r , type ) ; } public static ResultDialog
Duplicate alpha seekbar setter in ColorChooserDialog __EoT__ The seekbar value is set twice [ here ] ( https : //github.com/afollestad/material-dialogs/blob/17d0345bcf80c60b1189043402afc36b5f799ad9/commons/src/main/java/com/afollestad/materialdialogs/color/ColorChooserDialog.java # L467 ) `` ` Java if ( customSeekA.getVisibility ( ) == View.VISIBLE ) { int alpha = Color.alpha ( selectedCustomColor ) ; customSeekA.setProgress ( alpha ) ; customSeekAValue.setText ( String.format ( Locale.US , `` % d '' , alpha ) ) ; } if ( customSeekA.getVisibility ( ) == View.VISIBLE ) { int alpha = Color.alpha ( selectedCustomColor ) ; customSeekA.setProgress ( alpha ) ; } `` `
set typeface for ColorChooserDialog __EoT__ hi , how to set typeface for title and positive and negative buttons of ColorChooserDialog ?
java.lang.NoSuchFieldException : No field mCursorDrawable on Huawei Android skin __EoT__ # # # # # # Include the following : - Device OS version : ` 7.0 ` - Device Manufacturer : ` huawei ` - Device Name : ` P9 ` Also , please wrap Java with correct syntax highlighting . `` ` java 04-10 11:24:58.697 21161-21161 W/System.err : java.lang.NoSuchFieldException : No field mCursorDrawable in class Lhuawei/com/android/internal/widget/HwEditor ; ( declaration of 'huawei.com.android.internal.widget.HwEditor ' appears in /system/framework/hwEmui.jar ) 04-10 11:24:58.717 21161-21161 W/System.err : at java.lang.Class.getDeclaredField ( Native Method ) 04-10 11:24:58.717 21161-21161 W/System.err : at com.afollestad.materialdialogs.internal.MDTintHelper.setCursorTint ( MDTintHelper.java:176 ) 04-10 11:24:58.717 21161-21161 W/System.err : at com.afollestad.materialdialogs.internal.MDTintHelper.setTint ( MDTintHelper.java:164 ) 04-10 11:24:58.717 21161-21161 W/System.err : at com.afollestad.materialdialogs.DialogInit.setupInputDialog ( DialogInit.java:463 ) 04-10 11:24:58.717 21161-21161 W/System.err : at com.afollestad.materialdialogs.DialogInit.init ( DialogInit.java:301 ) 04-10 11:24:58.718 21161-21161 W/System.err : at com.afollestad.materialdialogs.MaterialDialog. < init > ( MaterialDialog.java:100 ) 04-10 11:24:58.718 21161-21161 W/System.err : at com.afollestad.materialdialogs.MaterialDialog $ Builder.build ( MaterialDialog.java:1461 ) 04-10 11:24:58.718 21161-21161 W/System.err : at com.afollestad.materialdialogs.MaterialDialog $ Builder.show ( MaterialDialog.java:1466 ) `` `
Dismiss callback for ColorChooserDialog is n't working ? __EoT__ I try debug mode and when click cancel from dialog of colorchoose the dismiss callback not is called ... how work this ? thank you very much
Crash because Objects class was introduced in API 19 , affecting all previously APIs __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : ` 0.9.3.0 ` - Device OS version : ` 4.x ` - Device Manufacturer : ` Unknown ` - Device Name : ` Unknown ` # # # # # # Reproduction Steps 1 . Create a ` FolderChooserDialog ` . 2 . Show the ` FolderChooserDialog ` on API < 19 . # # # # # # Expected Result 1 . The dialog is shown . # # # # # # Actual Result 1 . It crashes . # # # # # # Log `` ` Fatal Exception : java.lang.NoClassDefFoundError : java.util.Objects at com.afollestad.materialdialogs.folderselector.FolderChooserDialog.onCreateDialog
goUpLabel is not always applied on FolderChooserDialog if user defined __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : ` 0.9.2.3 ` - Device OS version : various , mostly marshmallow , lollipop - Device Manufacturer : Various # # # # # # Expected Result Dialog should display the user designated text intended to indication `` go to previous folder '' such as a ⤴ character . # # # # # # Actual Result goUpLabel is always `` ... '' Noted the likely issue in method getContentsArray of FolderChooserDialog which reads as shown below . ( Note emphasis on Line 60 ) : `` ` java String [ ] getContentsArray ( ) { if ( parentContents == null )
Dialog with dark background has corners with white pixels __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : ` 0.9.1.0 ` - Android Emulator Nexus 5 API 25 - Android Emulator Nexus One API 19 # # # # # # Reproduction Steps To reproduce this bug you can use the [ sample ] ( https : //github.com/afollestad/material-dialogs/tree/master/sample ) project . 1 . Change the background colour from the default white to dark grey or something like that . For example , you can add below [ this ] ( https : //github.com/afollestad/material-dialogs/blob/master/sample/src/main/java/com/afollestad/materialdialogssample/AboutDialog.java # L25 ) the following : `` ` java .backgroundColorRes ( R.color.dark_colour ) `` ` 2 . ( Optionally ) Change the main activity layout background colour to
Prevent an unselection action in Multi Choice List Dialogs __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Device Info : - Material Dialogs version : ` 0.9.1.0 ` - Device OS version : ` 6.0.1 ` - Device Manufacturer : ` LG ` - Device Name : ` Nexus 5 ` I was trying to obtain something similar to the ` showMultiChoiceLimited ` preventing an unchecking action instead of a checking one . The ` onSelection ` method from the ` ListCallbackMultiChoice ` it 's called both when I check and uncheck the checkbox so I supposed that returning false would have prevented both the actions , but it does not . Have I missed something ? This is the tested code . `` ` java /** * I
Add possibility to set a unique ID for dialogs when using MaterialDialogs.Builder __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : ` 0.9.1.0 ` - Device OS version : ` 7.0 ` - Device Manufacturer : ` Google ` - Device Name : ` Nexus 5X ` # # # # # # Issue Description : This is more a feature request than a bug report . It would be nice to have the possibility to set a unique id for a dialog when using the ` MaterialDialog.Builder ` . This allows encapsulating multiple dialogs in a separate class with a single ` SingleButtonCallback ` implementation to handle all different kind of callback invocations depending on the Dialog 's id .
Radio buttons tinted with textColorSecondary instead of colorControlNormal __EoT__ - [ X ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ X ] I have verified that I am using the latest version of Material Dialogs . - [ X ] I have given my issue a non-generic title . - [ X ] I have read over the documentation ( before asking questions on how to do something ) . - Material Dialogs version : ` 0.9.1.0 ` - Device OS version : ` 7.0 ` - Device Manufacturer : ` Huawei ` - Device Name : ` Nexus 6P ` The dialog radio buttons are being tinted using textColorSecondary instead of colorControlNormal . This has been reported by a few people in # 1153 . There seems to be some kind of issue with Android 's RadioButtons as the first answer in this [ StackOverflow thread ] ( http : //stackoverflow.com/questions/26843098/android-appcompat-v721-0-0-change-material-checkbox-colors ) also confirms this issue . My MaterialDialog 's radio buttons are having this issue but my Android SDK RadioButtons are not and are correctly tinted using colorControlNormal . Since you can already set the colors for
Do n't throw exceptions when calling setProgress ( ) for an indeterminate dialog ( just be silent ) __EoT__ I have an image scaling application that uses indeterminate progress for 1 and 2 images and determinate progress for 3 and more images . It would be nice if I could use setProgress no matter if my Dialog decided to be indeterminate or determinate . Right now I get the Exception > java.lang.IllegalStateException : Can not use setProgress ( ) on this dialog . in [ com.afollestad.materialdialogs.MaterialDialog.setProgress ( MaterialDialog.java:1663 ) ] ( https : //github.com/afollestad/material-dialogs/blob/0.9.1.0/core/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java # L1663 ) . I think it makes sense to implement the behavior of [ android.widget.ProgressBar ] ( https : //developer.android.com/reference/android/widget/ProgressBar.html # setProgress ( int ) ) : > Does not do anything if the progress bar is in indeterminate mode .
Ignore progressIndeterminateStyle ( true ) for determinate dialogs __EoT__ When I call ` .progressIndeterminateStyle ( true ) ` on a determinate dialog , I get some strange effects : 1. percentages in the bottom left do not work anymore 2. progress count in the bottom right does not increase 3. the bar layout changes to a smooth animation that does not reflect the progress My understanding of the term `` progressIndeterminateStyle '' would be that : if there the dialog is indeterminate , use this style . So it would be good if the call would be ignored for determinate dialogs . Sample code : `` ` mScalingDialog = new MaterialDialog.Builder ( ComposeActivity.this ) .title ( `` Scaling '' ) .content ( `` Scaling down images '' ) .progress ( imagesCount < 3 , imagesCount , true ) .progressIndeterminateStyle ( true ) .cancelable ( false ) .build ( ) ; mScalingDialog.show ( ) ; `` `
extensionFilter does not work as expected in FileChooserDialog __EoT__ - Material Dialogs version : ` 0.9.1.0 ` As we know , file extension is a suffix for the file name . For example , android application installer has ` .apk ` extension . We can filter it by using ` endsWith ( ) ` function . But , in this library I saw ` contains ( ) ` function which returns true to the file name started with ` apk ` , even though the file has ` .exe ` extension . If you filter a file named ` my apk collections.exe ` , this will returns true because the filename contains ` apk ` , although the file is a Windows Executable application . Changing ` contains ` to ` endsWith ` is a simple work : `` ` java for ( String ext : extensions ) { if ( fi.getName ( ) .toLowerCase ( ) .endsWith ( ext.toLowerCase ( ) ) ) { found = true ; break ; } } `` `
`` \n '' not working anymore due to Html.fromHtml ( ) __EoT__ Since version 0.9.1.0 , if I use `` \n '' in a resource string , and use this string as content of a material-dialog , it does n't work anymore , there 's no line break inserted . Thank you for looking into it .
itemsCallbackSingleChoice in MaterialDialog not scrolling correctly to preselected index __EoT__ Hi Aidan , I 've made a jump from Material Dialogs 0,8.5.5 to 0.9.0.1 and I 've noticed that now the single choice dialogs do n't scroll correctly to the preselected index . Here are other things that I 've updated in my app : - Target skd from 23 to 24 - Support libraries from 23.4.0 to 24.2.0 The issue happens in all versions from Android 4.0 to 7.0 . # # # # # # More info : - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : 0.9.0.1 - Device OS version : all versions from 4.0 to 7.0 - Device Name : Nexus 5 , Nexus 5x and several
Spannable to content strings ( < i > and < b > in text ) __EoT__ # # # # # # Include the following : - Material Dialogs version : ` 0.9.0.2 ' ` - Device OS version : ` any ` - Device Manufacturer : ` any ` - Device Name : ` any ` It would be nice , when this could be possible . # # # # # # Reproduction Steps `` ` xml < string name= '' crazy_string '' > My % 1 $ s < b > bold < /b > text could be view as % 2 $ s < i > italic < /i > . < /string > `` ` `` ` java new MaterialDialog.Builder ( this ) .content ( R.string.crazy_string , `` happy '' , `` angry '' ) .show ( ) ; `` ` Want to create dialog with Text like : > My happy **bold** text could be view as angry _italic_ . # # # # # # Expected Result Dialog with formated text : My happy **bold** text could be view as angry _italic_ . # # # # # # Actual Result My happy
inputRangeRes issue __EoT__ I was trying to use inputRangeRes but the second parameter is not allowing -1 for no max length ( like inputRange ) . It looks like inputRange allows -1 and inputRangeRes does not ? Could it be this ? ` public Builder inputRangeRes ( @ IntRange ( from = 0 , to = Integer.MAX_VALUE ) int minLength , @ IntRange ( from = 1 , to = Integer.MAX_VALUE ) int maxLength , @ ColorRes int errorColor ) ` the input range is from 1 instead of -1 ? Thanks !
Issue with Limiting Input Length in Input Dialog __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : ` 0.8.6.2 ` - Device OS version : ` Android 5.1 ` - Device Manufacturer : ` Motorola ` - Device Name : ` Moto E- XT1044 ` Also , please wrap Java with correct syntax highlighting . `` ` java inputRangeRes ( 2 , 20 , R.color.material_red_500 ) `` ` # # # # # # Reproduction Steps 1 . Enter some text in input dialog with inputRangeRes defined . 2 . Erase the text in input dialog 3 . Now the positive text button is enabled even if we have defined input range . # # # # # # Expected Result
checkBoxPrompt not showing when using a List __EoT__ Code : `` ` new MaterialDialog.Builder ( MainActivity.this ) .checkBoxPrompt ( `` I wo n't show '' , true , null ) .title ( `` Change Language '' ) .items ( new String [ ] { `` Chinese '' , `` Martian '' } ) .positiveText ( `` Change '' ) .onPositive ( new MaterialDialog.SingleButtonCallback ( ) { @ Override public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { return ; } } ) .itemsCallbackSingleChoice ( -1 , new MaterialDialog.ListCallbackSingleChoice ( ) { @ Override public boolean onSelection ( MaterialDialog dialog , View itemView , int which , CharSequence text ) { return false ; } } ) .negativeText ( `` Dismiss '' ) .icon ( ContextCompat.getDrawable ( MainActivity.this , R.drawable.ic_locale ) ) .show ( ) ; `` ` Just wrote this out quickly , I was expecting the checkbox to appear below the list but it did n't . Anything wrong with my code ?
Improvement - allow FolderChooserDialog to create a new folder __EoT__ Would be nice to be able to have an option to create folders via the ` FolderChooserDialog ` . Maybe a simple plus in the title toolbar would be perfect for this functionality ...
Option to add checkbox as in system permission dialog __EoT__ Would be useful if we can have the option to add a checkbox like the one in the system permission dialog . This can be used to have options like `` Never ask again '' or `` Save this preference '' .
Single choice list dialog last item does n't animate . __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - Material Dialogs version : ` 0.8.6.2 ` - Device OS version : ` 6.0.1 ` - Device Manufacturer : ` Motorola ` - Device Name : ` Moto G4 ` - Device nº2 : ` Genymotion Emulator ` - Device nº2 OS version : ` 5.1.0 ` In a Single choice list dialog , the last radio button of the list does n't animate when checked or unchecked . `` ` java String [ ] choices = { `` First '' , '' Second '' , '' Third '' } ; new MaterialDialog.Builder ( this ) .title ( `` Excluir '' ) .items ( choices ) .itemsCallbackSingleChoice ( -1 , new MaterialDialog.ListCallbackSingleChoice ( ) { @ Override public boolean onSelection ( MaterialDialog dialog , View itemView , int which , CharSequence text ) { return false ; } } ) .positiveText ( `` Ok '' ) .negativeText ( `` Cancel
Some trouble with MIME type JSON __EoT__ Hello ! I use `` .mimeType '' for fileChooserDialog . But my files are invisible . Without `` .mimeType '' all files are visible . Thanks .
Add prefixes for library ids __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . - Material Dialogs version : ` 0.8.6.2 ` Hi ! First of all thank you for this great library , I 'm really enjoy using it , but today I had 2 hours trying to find out why my dialogs content not showing in my new project . It turns out thats because R.id.content id defined both in my project and in your library . Project resources have priority over library resources , so when dilog tries to find content TextView , nothing found and no content shown as result . I 'll suggest you to either to use default android ids ( android.R.id.content ) , or to use prefix for your ids ( R.id.md_content ) to prevent such problems on others
Circular indeterminate progress bar not working on Android 4.x __EoT__ When showing a default indeterminate progress dialog ( with the circular indeterminate progress bar ) , the progress bar is not shown . Steps to reproduce : 1 . Checkout commit 5d6179b from your project 2 . Compile & run the sample app on one of the devices listed below ( e.g. , a Samsung Galaxy S4 Mini with Android 4.4.2 ) 3 . Click on the button labeled `` Progress dialog ( indeterminate ) '' See below for a list of devices on which the bug occurs and on which it does n't occur . The screenshot below is taken on the Galaxy S4 Mini . ! [ screenshot_2016-06-30-21-43-18 ] ( https : //cloud.githubusercontent.com/assets/445369/16502124/158248d2-3f0d-11e6-868b-ebbc6c7584b3.png ) - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # #
Soft input keyboard stays open ? __EoT__ I think that even after # 971 fix , this is still broken in 0.8.5.6 . Or at least the behavior changed and in my opinion the SHOW_IMPLICIT worked better : - when you have an dialog with input text , the keyboard opens automatically , which is alright - but when you tap an button to open another dialog over this one that does NOT have an input text , the keyboard now stays open ( which in my opinion is wrong ) , in version 0.8.5.4 this worked correctly
List Dialogbox crashing __EoT__ The following code is resulting in a crash in my application . The normal dialog box is working fine . `` ` java new MaterialDialog.Builder ( this ) .title ( `` Select Account '' ) .items ( R.array.socialNetworks ) .itemsCallbackSingleChoice ( -1 , new MaterialDialog.ListCallbackSingleChoice ( ) { @ Override public boolean onSelection ( MaterialDialog dialog , View view , int which , CharSequence text ) { /** * If you use alwaysCallSingleChoiceCallback ( ) , which is discussed below , * returning false here wo n't allow the newly selected radio button to actually be selected . **/ accountNumber = AppContext.getInstance ( ) .getUserProfile ( ) .get ( ) .AccountIds [ which ] ; makeComplaint ( accountNumber ) ; return true ; } } ) .alwaysCallSingleChoiceCallback ( ) .show ( ) ; `` ` **Log File : ** [ MaterialDialogBox.zip ] ( https : //github.com/afollestad/material-dialogs/files/211128/MaterialDialogBox.zip )
InputType TYPE_TEXT_VARIATION_VISIBLE_PASSWORD triggers password transformation __EoT__ When setting the InputType of an dialog to ` TYPE_TEXT_VARIATION_VISIBLE_PASSWORD ` it will not display visible text . This is due to `` ` if ( ( builder.inputType & InputType.TYPE_TEXT_VARIATION_PASSWORD ) == InputType.TYPE_TEXT_VARIATION_PASSWORD ) { // If the flags contain TYPE_TEXT_VARIATION_PASSWORD , apply the password transformation method automatically dialog.input.setTransformationMethod ( PasswordTransformationMethod.getInstance ( ) ) ; } `` `
Android 4 + support 23.2 : `` Error inflating class android.widget.RadioButton '' __EoT__ I 'm getting these crash reports : ` Fatal Exception : android.view.InflateException : Binary XML file line # 14 : Error inflating class android.widget.RadioButton ` ` Caused by android.content.res.Resources $ NotFoundException : File res/drawable/abc_btn_radio_material.xml from drawable resource ID # 0x7f020008 ` ` Caused by android.content.res.Resources $ NotFoundException : File res/drawable/abc_btn_radio_on_mtrl.xml from drawable resource ID # 0x7f02000a ` ` Caused by org.xmlpull.v1.XmlPullParserException : Binary XML file line # 17 : invalid drawable tag vector ` ` at com.afollestad.materialdialogs.DefaultAdapter.getView ( DefaultAdapter.java:59 ) ` ` at com.afollestad.materialdialogs.internal.MDRootLayout.onMeasure ( MDRootLayout.java:199 ) ` ( Full crash report [ here on Pastebin ] ( http : //pastebin.com/W0MBw5QA ) ) . I 'm using the latest support library ( 23.2 ) and Material Dialogs ( 0.8.5.6 ) and the crash reports seem to only origin from Android 4 ( 34 crashes over 9 users so far ) . I found this answer on StackOverflow : http : //stackoverflow.com/a/35644236/425213 . The RadioButton-part might be the cause of this problem .
Exception `` unresolved theme attributes '' __EoT__ Hi . I 'm getting an exception with every character I type on a material dialog : `` ` Gradle Drawable android : drawable/text_cursor_material has unresolved theme attributes ! Consider using Resources.getDrawable ( int , Theme ) or Context.getDrawable ( int ) . java.lang.RuntimeException `` ` This is the code I 'm using : `` ` java new MaterialDialog.Builder ( getActivity ( ) ) .title ( `` Add '' ) .content ( `` Insert X : `` ) .inputRangeRes ( 6 , 11 , R.color.BurlyWood ) .inputType ( InputType.TYPE_CLASS_TEXT ) .input ( `` AAAA '' , `` '' , new MaterialDialog.InputCallback ( ) { @ Override public void onInput ( MaterialDialog dialog , CharSequence input ) { View coordinatorLayout = getActivity ( ) .findViewById ( R.id.listViewParent ) ; Snackbar snackbar = Snackbar .make ( coordinatorLayout , input + `` added '' , Snackbar.LENGTH_LONG ) ; snackbar.show ( ) ; } } ) .show ( ) ; `` ` So I 'm getting thousands of exceptions using this library . Happens in Android 6.0.0 and 5.0
InputDialog does not open soft keyboard on 6.0 in certain cases __EoT__ If you start an activity when the device is locked with keyguard where user should input something in a dialog then soft keyboard wo n't open ( not even when you focus and tap on the edittext field ) . Steps to reproduce 1 . OS : 6.0 ( all other seem to work fine ) 2 . Create an Activity which shows an InputDialog ( do n't forget to use dismiss keyguard , show on lockscreen etc flags ) . 3 . Use AlarmManager to trigger the start of this Activity . 4 . Set your device to use some kind of lock mechanism ( such as patter or PIN lock ) . 5 . Press the power button on the device to make sure it goes to sleep . 6 . When activity start , dialog will be shown but there is no way to type in anything as the keyboard is hidden . Can someone confirm this please ? I start to think that this issue is related to the Android system itself , but maybe there is a workaround .
How to show first folders and then files in FileChooserDialog __EoT__ Could you add this option to FileChooserDialog ? Thanks
FolderChooserDialog.Builder does not work from within a PreferenceActivity __EoT__ FolderChooserDialog.Builder requires an AppCompatActivity descendent . PreferenceActivity extends Activity , but not AppCompatActivity = > I can not use the file chooser in my preference fragments ... Ca n't you make the FileChooserDialog based on the more generic type `` Activity '' ? I quickly looked at the code and it does not seem to actually require anything specific to AppCompatActivity . Thanks , Vincent .
Handle multiple FolderChooserDialog in same Activity __EoT__ Hi , Is there any way I can know which FolderChooserDialog called the callback onFolderSelection if there are more than one FolderChooserDialog builders in same activity ? PS : I can do it by creating static member in my activity and changing it before creating any FolderChooserDialog but still I would like to confirm if there exists something in API which I am not aware of .
Error : ( 3 , 5 ) No resource found that matches the given name ( at 'android : actionModeCloseDrawable ' with value ' @ drawable/abc_ic_ab_back_mtrl_am_alpha ' ) . __EoT__ Looks like that icon was removed in appcompat 23.2.0 , likely in favor of a vector icon
Single Choice List Dialogs suggestion __EoT__ First of all , thank you for this great library . I have one suggestion which sounds more correct to me but maybe I do n't see something . I think that ` onSelection ` callback should n't be called on ` onPositive ` action if ` alwaysCallSingleChoiceCallback ` is enabled and ` onPositive ` callback is set . Look at this example : `` ` java new MaterialDialog.Builder ( mContext ) .title ( R.string.pref_ringtone_title ) .items ( R.array.ringtones ) .itemsCallbackSingleChoice ( 0 , new MaterialDialog.ListCallbackSingleChoice ( ) { @ Override public boolean onSelection ( MaterialDialog dialog , View view , int which , CharSequence text ) { playRingtone ( which ) ; return true ; } } ) .alwaysCallSingleChoiceCallback ( ) .positiveText ( mContext.getString ( R.string.dialog_button_choose ) .toUpperCase ( ) ) .negativeText ( mContext.getString ( R.string.dialog_button_cancel ) .toUpperCase ( ) ) .onPositive ( new MaterialDialog.SingleButtonCallback ( ) { @ Override public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { saveRingtone ( dialog.getSelectedIndex ( ) ) ; } } ) .build ( ) ; `` ` When I press choose button I just want to save selection ,
ColorChooserDialog : Crash when pressing recents button __EoT__ Whenever you click the recents button when a ColorChooserDialog is open , you get the following crash . EDIT : Actually , it seems like it only happened when I did n't pre-select a color . `` ` java.lang.NullPointerException : Attempt to invoke virtual method 'int android.view.View.getVisibility ( ) ' on a null object reference at com.afollestad.materialdialogs.color.ColorChooserDialog.onSaveInstanceState ( ColorChooserDialog.java:109 ) at android.support.v4.app.Fragment.performSaveInstanceState ( Fragment.java:2109 ) at android.support.v4.app.FragmentManagerImpl.saveFragmentBasicState ( FragmentManager.java:1767 ) at android.support.v4.app.FragmentManagerImpl.saveAllState ( FragmentManager.java:1835 ) at android.support.v4.app.FragmentController.saveAllState ( FragmentController.java:125 ) at android.support.v4.app.FragmentActivity.onSaveInstanceState ( FragmentActivity.java:523 ) at android.app.Activity.performSaveInstanceState ( Activity.java:1302 ) at android.app.Instrumentation.callActivityOnSaveInstanceState ( Instrumentation.java:1289 ) at android.app.ActivityThread.callCallActivityOnSaveInstanceState ( ActivityThread.java:4088 ) at android.app.ActivityThread.performStopActivityInner ( ActivityThread.java:3490 ) at android.app.ActivityThread.handleStopActivity ( ActivityThread.java:3550 ) at android.app.ActivityThread.-wrap20 ( ActivityThread.java ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1373 ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:148 ) at android.app.ActivityThread.main ( ActivityThread.java:5417 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:726 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:616 ) `` `
Add Tag / Id support to MaterialSimpleListItem __EoT__ I have an abstract activity that adds some MaterialSimpleListItem entries and then asks the activity on top to add its own , by doing this i have a sort of extendable list dialog but its then complex / dirty for the implementing class to know which button has been clicked only by using the integer index so it would be great to be able to assign an object tag to MaterialSimpleListItem or ( even better ) to assign methods directly to them instead of using the generic adapter on click method .
MaterialEditTextPreference can not set Icon . __EoT__ hi I 'm using MaterialEditTextPreference . I try to programatically set Icon and set Dialog Icon . then , Preference Screen was not shown Icon . however , Opened Dialog shown Icon . I lookup compared android-sdk/res/layout/preference.xml and res/layout/md_preference_custom.xml . has not view ImageView # android : id/icon It is cause this to occur ?
Creating preferences programmatically causes NullPointerException __EoT__ Creating Preferences from code always causes a NullPointException in ` PrefUtil.setLayoutResource ` because the standard constructor does n't add an initialized ` AttributeSet ` : `` ` java MaterialEditTextPreference myPreference = new MaterialEditTextPreference ( getActivity ( ) ) ; `` ` this calls `` ` java init ( context , null ) ; `` ` which calls `` ` java PrefUtil.setLayoutResource ( this , null ) ; `` ` which will crash when it tries to call ` getAttributeCount ` on the null variable `` ` java for ( int i = 0 ; i < attrs.getAttributeCount ( ) ; i++ ) { `` ` Please add a null check for attrs in order to prevent these crashes for programmatically created preferences .
PreferenceDialog onDismiss issue __EoT__ Ran into an issue when dismissing a MaterialListPreference by clicking outside the dialog window . If the preference has not been changed previously via clicking a list option , it works fine but if the preference has been changed and then the user opens the preference again and dismisses it by clicking outside the window , the onPreferenceChange listener is then called . From looking at the callstack , it appears the issue comes from calling super.onDismiss ( dialog ) in the overriden onDismiss method in MaterialListPreference class . This creates a situation where the app thinks the positive button has been pressed , thereby triggering a call to onPreferenceChange . To reproduce , create a MaterialListPreference , give it an onChange listener and some list items , run the app , open the dialog , choose an item , reopen the dialog , and dismiss it by clicking outside the dialog .
Set palette view as default ColorChooserDialog __EoT__ Hi Aidan , I 'm implementing a ColorChooserDialog in my App . By the way the default view is always the custom one . How can I set as default the palette view ? Thanks
ID for colorChooserDialog to use multiple dialogs in one activity __EoT__ Currently it is only possible to determine if the ` ColorChooseDialog ` is in accent color mode or not . It would be helpful if you could define an ID to distinguish between the dialogs .
ColorChooserDialog additions __EoT__ Hi , It would be nice having also a `` CANCEL '' button in ColorChooser dialog , in order to be able to close the dialog without confirming the choosed color . Also is there a way to localize/customize buttons ' text ? My phone localization is Italian , but I see buttons with English text . What do you think about this ? Thanks in advance
Indeterminate horizontal seekbar progress dialog __EoT__ Sorry for creating a new issue for that , but the previous issue I 've reported as been marked as invalid , I ca n't reopen it , and as it has been closed , I 'm not sure you read my comments after you 've closed it . Can you read my last comments and look at it again please ? https : //github.com/afollestad/material-dialogs/issues/572 I 'm pretty sure it 's not invalid . Maybe it 's a feature you do n't want to implement , but if it 's the case , can you tell me ? Because that 's the missing feature preventing me to migrate to this library : for a file download , if network is unavailable , we should be able to put an horizontal seekbar dialog in indeterminate state ( not with a spinner ! ) , as we can with default Android APIs . Thank you .
Can not override button color if attribute already set __EoT__ If you have colors set in your theme for things like the Positive Button ( md_positive_color ) , then you are not able to override these settings for one dialog . `` ` java mBuilder.positiveColor = DialogUtils.resolveColor ( mBuilder.context , R.attr.md_positive_color , mBuilder.positiveColor ) ; `` ` Should probably have the last two arguments reversed in order to allow dialogs to override the set style if needed .
Base method for button callbacks __EoT__ Hi . I have a code that looks like : `` ` java .callback ( new MaterialDialog.ButtonCallback ( ) { @ Override public void onPositive ( MaterialDialog dialog ) { doSomeStuff ( ) ; ... } @ Override public void onNegative ( MaterialDialog dialog ) { doSomeStuff ( ) ; ... } @ Override public void onNeutral ( MaterialDialog dialog ) { doSomeStuff ( ) ; ... } } `` ` And it 's tedious to add the call to ` doSomeStuff ( ) ` to each of this callbacks . Is there any way to do something as default ? Something like : `` ` java .callback ( new MaterialDialog.ButtonCallback ( ) { @ Override public void defaultCallback ( MaterialDialog dialog ) { doSomeStuff ( ) ; ... } @ Override public void onPositive ( MaterialDialog dialog ) { ... } @ Override public void onNegative ( MaterialDialog dialog ) { ... } @ Override public void onNeutral ( MaterialDialog dialog ) { ... } } `` `
java.lang.IllegalAccessError : setContentView ( ) is not supported in MaterialDialog . Specify a custom view in the Builder instead . __EoT__ Hey Aidan , I 'm getting that error since I 've uploaded to 0.7.5.0 when creating an indeterminate progress dialog like this : `` ` pd = new MaterialDialog.Builder ( context ) .cancelable ( false ) .content ( R.string.action_signin ) .progress ( true , 0 ) .show ( ) ; `` ` I understand what it says , but I do n't know if this is the intended behavior or is just a bug of the new version . Thanks in advance .
Indeterminate Progress stops after a while in KitKat __EoT__ As title says . The indeterminate progress bar will stop rotating after a while ( about 1 minute ) on API 19 .
MaterialDialogPreference is missing __EoT__ This is more like enhancement . Other than the 3 Material preferences , we should have ` MaterialDialogPreference ` , for users to override in place of ` DialogPreference ` . A simple example I tried that seems to work fine is https : //gist.github.com/yukuku/99faed8f8bf48bb33294
MaterialDialogBuilder.input allowEmptyInput parameter does not work __EoT__ Just check the sample application and you can see that I am able to press submit when the text field is empty and allowEmptyInput is set to false . As far as I remember this started happening when the inputMaxLength function was added .
Single Choice List Dialogs on API > = 21 is not animating __EoT__ When using Single Choice List Dialogs , the last Item of the radio button on API > = 21 is not animating : D
Workaround framework memory leak __EoT__ Square released LeakCanary today which is awesome https : //github.com/square/leakcanary One leak it reports is related to Handlers and Dialogs , which we should consider working around but maybe that 's beyond the scope of this library . https : //github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java # L126 // Prior to ART , a thread waiting on a blocking queue will leak the last dequeued object // as a stack local reference . // So when a HandlerThread becomes idle , it keeps a local reference to the last message it // received . That message then gets recycled and can be used again . // As long as all messages are recycled after being used , this wo n't be a problem , because // there references are cleared when being recycled . // However , dialogs create template Message instances to be copied when a message needs to be // sent . These Message templates holds references to the dialog listeners , which most likely // leads to holding a reference onto the activity in some way . Dialogs never recycle their // template Message , assuming these Message instances will get GCed when the dialog is GCed
EditText in the MaterialEditTextPreference not tinted . __EoT__ ! [ image ] ( https : //cloud.githubusercontent.com/assets/5864045/7536422/a4baa394-f587-11e4-84e0-ab6a4334b581.png ) ! [ image ] ( https : //cloud.githubusercontent.com/assets/5864045/7536457/ea24b23a-f587-11e4-82f2-157a5f6eb9b0.png ) Tested with 0.7.3.1 & 0.7.3.3 I Think it is since the usage of AppComaptActivity instead of ActionBarActivity
Issue with simpleListItems __EoT__ I 've set my title color and item color to two different colors but when I run my app both are the same . The title color is the showing on both . Using build '0.7.3.2 ' . I experienced this while using the simpleItemList ( ) . As per my code you can see I 've set the colors of the itemColorRes ( ) to white but it 's taking the color of the titleColorRes ( ) . I tried using just a Basic Dialog and that worked okay . I 've attached that image too . @ afollestad Could you take a look at this ? ! [ screen shot 2015-05-07 at 3 27 29 pm ] ( https : //cloud.githubusercontent.com/assets/6160366/7524072/9a000332-f4cd-11e4-8a7d-7683ec45ac2d.png ) ! [ screen shot 2015-05-07 at 3 24 17 pm ] ( https : //cloud.githubusercontent.com/assets/6160366/7524031/622d663e-f4cd-11e4-9d8a-9ee1ca00f619.png ) ! [ screen shot 2015-05-07 at 3 23 56 pm ] ( https : //cloud.githubusercontent.com/assets/6160366/7524032/623eb07e-f4cd-11e4-8c14-8bfdf2a949f1.png )
Input dialog – support for max length , and display current/max indicator __EoT__ Hi , Very impressed with your work here , I 'm looking for the ability to set maxLength for the text and/or tell the user how many characters left have to enter . PD : I 've used a custom UI to do that , but it would be much better to implement using your library . Best Regards , Walter
Missing Progress Bar on Progress Dialog __EoT__ MaterialDialogs 0.7.2.6 install from Play Store Android 4.4.4 On the Progress Dialog , the status bar shows the accent color only and does not progress from left to right .
Library should run fine with font assets missing __EoT__ Is it possible to remove fonts from aar ? If for example I want to use default or my own font , it would be nice to save 300kb apk size . Maybe separate font and library in different aar 's ?
Input dialog – move cursor to end initially __EoT__ Please , move the cursor in the edit text if edit text is prefilled
Input dialog – move cursor to end initially __EoT__ Please , move the cursor in the edit text if edit text is prefilled
Input Dialog allow empty input __EoT__ First of all , nice work ! I created an input dialog but the onInput callback is only called when the EditText is not empty . I had a look through the code and I found that it is supposed to be like that . For now , I just added another callback for onPositive and just ignore the onInput callback . Is there some option I missed that allows empty input and still fires the onInput callback ? Regards
MaterialListPreference is not recreated and leaks __EoT__ If I change the device orientation when a MaterialListPreference is on screen , it is not recreated and the logcat shows a leaked window error . Should I do anything in particular to prevent this ? Note : I 'm not using the other preference material dialogs , so I do n't know if they have the same problem . A million thanks again for this library and your commitment .
On a non intermediate ProgressDialog move the progress numbers below the ProgressBar __EoT__ Using the ProgressDialog on Android Lollipop with material design puts the percentage and the counter below the ProgressBar [ 1 ] . Using your excellent library puts them next to the ProgressBar [ 2 ] . I like the percentage being on the right , but would like the values to be below the progress bar ( closer to `` stock '' material design ) . [ 1 ] ! [ 1 ] ( https : //cloud.githubusercontent.com/assets/3263955/7134162/8ad2bf66-e29a-11e4-89ea-615c6710fff8.png ) [ 2 ] ! [ 2 ] ( https : //cloud.githubusercontent.com/assets/3263955/7134161/8ad28eba-e29a-11e4-98d5-1f41969458a6.png )
Application crash with custom View __EoT__ Hi , I use customView layout with listview and edittext with filterable ability like this : `` ` java MaterialDialog dialog = new MaterialDialog.Builder ( mActivity ) .title ( R.string.selecting_by_name ) .customView ( R.layout.manual_selection_dialog , false ) .callback ( new MaterialDialog.ButtonCallback ( ) { @ Override public void onPositive ( MaterialDialog dialog ) { new manualSelectionBackgroundTask ( ) .execute ( ) ; } } ) .positiveText ( R.string.import_selected ) .build ( ) ; `` ` When the list is blank , then app crash with this errors in log : `` ` gradle java.lang.NullPointerException : Attempt to invoke virtual method 'int android.view.View.getBottom ( ) ' on a null object reference at com.afollestad.materialdialogs.internal.MDRootLayout.invalidateDividersForScrollingView ( MDRootLayout.java:439 ) at com.afollestad.materialdialogs.internal.MDRootLayout.access $ 000 ( MDRootLayout.java:34 ) at com.afollestad.materialdialogs.internal.MDRootLayout $ 1.onScrollChanged ( MDRootLayout.java:411 ) ... .. `` ` It is bug or not ?
Buttons in ProgressDialogs after progress finishes __EoT__ When creating a ProgressDialog , and setting a button to close it after the progress finishes , the button appears just as text , and if I press it nothing happens . Here is my code : `` ` javascript public void showDownloadDialog ( boolean indeterminate ) { if ( indeterminate ) { new MaterialDialog.Builder ( this ) .title ( R.string.progress_dialog_title ) .content ( R.string.please_wait ) .progress ( true , 0 ) .show ( ) ; } else { new MaterialDialog.Builder ( this ) .title ( R.string.progress_dialog_title ) .content ( R.string.please_wait ) .progress ( false , 120 ) .showListener ( new DialogInterface.OnShowListener ( ) { @ Override public void onShow ( DialogInterface dialogInterface ) { final MaterialDialog dialog = ( MaterialDialog ) dialogInterface ; new Thread ( new Runnable ( ) { @ Override public void run ( ) { while ( dialog.getCurrentProgress ( ) ! = dialog.getMaxProgress ( ) ) { if ( dialog.isCancelled ( ) ) break ; try { Thread.sleep ( 50 ) ; } catch ( InterruptedException e ) { break ; } runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { dialog.incrementProgress
Application crash with custom View __EoT__ Hi , I use customView layout with listview and edittext with filterable ability like this : `` ` java MaterialDialog dialog = new MaterialDialog.Builder ( mActivity ) .title ( R.string.selecting_by_name ) .customView ( R.layout.manual_selection_dialog , false ) .callback ( new MaterialDialog.ButtonCallback ( ) { @ Override public void onPositive ( MaterialDialog dialog ) { new manualSelectionBackgroundTask ( ) .execute ( ) ; } } ) .positiveText ( R.string.import_selected ) .build ( ) ; `` ` When the list is blank , then app crash with this errors in log : `` ` gradle java.lang.NullPointerException : Attempt to invoke virtual method 'int android.view.View.getBottom ( ) ' on a null object reference at com.afollestad.materialdialogs.internal.MDRootLayout.invalidateDividersForScrollingView ( MDRootLayout.java:439 ) at com.afollestad.materialdialogs.internal.MDRootLayout.access $ 000 ( MDRootLayout.java:34 ) at com.afollestad.materialdialogs.internal.MDRootLayout $ 1.onScrollChanged ( MDRootLayout.java:411 ) ... .. `` ` It is bug or not ?
MaterialEditTextPreference getDialog returns null __EoT__ It would be nice to have a reference to the dialog , for example could do similar thing that the first answer does in this thread : http : //stackoverflow.com/questions/4762027/edittextpreference-disable-buttons I have it working as expected with EditTextPreference , but when I switch to MaterialEditTextPreference it will crash due to getDialog returning null .
No dividers in long Multi Choice Dialog __EoT__ If you use a Multi Choice Dialog with a long content , there is no divider above the action buttons .
ProgressDialog without title __EoT__ I think the ProgressDialog without a title is to small compared to the standard ProgressDialog ! [ 2015-04-07 23 17 05 ] ( https : //cloud.githubusercontent.com/assets/5994414/7035935/7e379a4e-dd8e-11e4-90a6-7bb566a0f8c3.png ) ! [ 2015-04-07 23 21 17 ] ( https : //cloud.githubusercontent.com/assets/5994414/7035916/4a733baa-dd8e-11e4-8a11-d60721539414.png )
Dialog Theme on Android API Level 10 ( 2.3 ) __EoT__ Hi , Any idea what 's the right way to apply the theme to older versions of Android ? Everything seems to work fine from 4.0 and above using : < item name= '' md_dark_theme '' > false < /item > But it gets ignore on 2.3 Thanks in advance . R .
Title and content text colors always get overridden by textColorPrimaryInverse and textColorSecondaryInverse __EoT__ If you see the code below the md_title_color and md_content_color theme attributes always get ignored because the builder will always have a Dark or Light theme , therefore always overriding the builder colors with textColorPrimaryInverse and textColorSecondaryInverse . I had to revert back to 0.6.7.2 for now . `` ` if ( ! builder.titleColorSet ) { final int titleColorFallback = DialogUtils.resolveColor ( builder.context , android.R.attr.textColorPrimary ) ; builder.titleColor = DialogUtils.resolveColor ( builder.context , R.attr.md_title_color , titleColorFallback ) ; if ( DialogUtils.isColorDark ( builder.titleColor ) ) { if ( builder.theme == Theme.DARK ) builder.titleColor = DialogUtils.resolveColor ( builder.context , android.R.attr.textColorPrimaryInverse ) ; } else if ( builder.theme == Theme.LIGHT ) builder.titleColor = DialogUtils.resolveColor ( builder.context , android.R.attr.textColorPrimaryInverse ) ; } if ( ! builder.contentColorSet ) { final int contentColorFallback = DialogUtils.resolveColor ( builder.context , android.R.attr.textColorSecondary ) ; builder.contentColor = DialogUtils.resolveColor ( builder.context , R.attr.md_content_color , contentColorFallback ) ; if ( DialogUtils.isColorDark ( builder.contentColor ) ) { if ( builder.theme == Theme.DARK ) builder.contentColor = DialogUtils.resolveColor ( builder.context , android.R.attr.textColorSecondaryInverse ) ; } else if ( builder.theme == Theme.LIGHT ) builder.contentColor = DialogUtils.resolveColor ( builder.context , android.R.attr.textColorSecondaryInverse ) ;
Hide top/bottom divider when scrolled to top/bottom __EoT__ Like design guidelines and 5.1 dialogs ( though they did n't add enough padding so it looks weird ) .
From Version 0.6.7.0 stacking seems to be broken __EoT__ This happens from version 0.6.7.0 : ! [ unbenannt ] ( https : //cloud.githubusercontent.com/assets/8021265/6982306/48f9c5f4-da10-11e4-95c9-d7c4f7f3f113.png ) I think the stacking is not working correctly . `` ` java builder.title ( getContext ( ) .getString ( R.string.dialog_play_games_title ) ) .content ( isSignedIn ? getContext ( ) .getString ( R.string.dialog_play_games_content_sign_out ) : getContext ( ) .getString ( R.string.dialog_play_games_content_sign_in ) ) .positiveText ( isSignedIn ? getContext ( ) .getString ( R.string.dialog_play_games_ok_sign_out ) : getContext ( ) .getString ( R.string.dialog_play_games_ok_sign_in ) ) .negativeText ( getContext ( ) .getString ( android.R.string.cancel ) ) ; if ( isSignedIn ) { builder.neutralText ( getContext ( ) .getString ( R.string.dialog_play_games_show_achievements ) ) ; } builder.iconRes ( R.drawable.ic_play_games ) ; `` ` This is part of my code to create the dialog .
Default text size for the text-only dialog should be 16sp not 18sp __EoT__ The original Android 5.0/5.1 text content style is ` TextAppearance.Material.Subhead ` , which resolves to `` ` < item name= '' textSize '' > @ dimen/text_size_subhead_material < /item > < item name= '' fontFamily '' > @ string/font_family_subhead_material < /item > < item name= '' textColor '' > ? attr/textColorPrimary < /item > `` ` and the value of ` text_size_subhead_material ` is ` 16sp ` . The MaterialDialogs look really huge on 320dp screen because it 's using 18sp as the default text size . It should be 16sp if you want to follow the original dialogs .
java.lang.NullPointerException at MaterialEditTextPreference.onBindDialogView when Preference is null __EoT__ Preference is not initialized yet and it has no default value . EditText/TextView.append called with null . `` ` FATAL EXCEPTION : main java.lang.NullPointerException at android.widget.TextView.append ( TextView.java:3118 ) at com.afollestad.materialdialogs.prefs.MaterialEditTextPreference.onBindDialogView ( MaterialEditTextPreference.java:56 ) at com.afollestad.materialdialogs.prefs.MaterialEditTextPreference.showDialog ( MaterialEditTextPreference.java:77 ) at android.preference.DialogPreference.onClick ( DialogPreference.java:266 ) at android.preference.Preference.performClick ( Preference.java:942 ) at android.preference.PreferenceScreen.onItemClick ( PreferenceScreen.java:208 ) `` `
When button text is updated , other button visibility test is reset -- execution path dependency __EoT__ - make neutral button gone - set different text for negative button the neutral button re-appears current workaround - move the code that manages the visibility of the button **after** any update to the text should be an easy fix
Sample app crash with API 10 : Preference Fragment __EoT__ `` ` java.lang.NoSuchMethodError : com.afollestad.materialdialogssample.PreferenceActivity.getFragmentManager at com.afollestad.materialdialogssample.PreferenceActivity.onCreate ( PreferenceActivity.java:23 ) at android.app.Instrumentation.callActivityOnCreate ( Instrumentation.java:1047 ) at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:1660 ) at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:1716 ) at android.app.ActivityThread.access $ 1500 ( ActivityThread.java:124 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:968 ) at android.os.Handler.dispatchMessage ( Handler.java:99 ) at android.os.Looper.loop ( Looper.java:130 ) at android.app.ActivityThread.main ( ActivityThread.java:3806 ) at java.lang.reflect.Method.invokeNative ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:507 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:839 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:597 ) at dalvik.system.NativeStart.main ( Native Method ) `` `
NullPointerException on orientation change with ColorChooserDialog __EoT__ Stack trace : `` ` com.afollestad.materialdialogssample E/AndroidRuntime﹕ FATAL EXCEPTION : main Process : com.afollestad.materialdialogssample , PID : 20391 java.lang.NullPointerException : Attempt to invoke interface method 'void com.afollestad.materialdialogssample.ColorChooserDialog $ Callback.onColorSelection ( int , int , int ) ' on a null object reference at com.afollestad.materialdialogssample.ColorChooserDialog.onClick ( ColorChooserDialog.java:34 ) at android.view.View.performClick ( View.java:4780 ) at android.view.View $ PerformClick.run ( View.java:19866 ) at android.os.Handler.handleCallback ( Handler.java:739 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:135 ) at android.app.ActivityThread.main ( ActivityThread.java:5254 ) at java.lang.reflect.Method.invoke ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:372 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:903 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:698 ) `` ` I prepare pull request to fix this error . YT : https : //www.youtube.com/watch ? v=mIUvEejpmJE Edit : no pull request permission : (
Sample app crash with API 10 : Custom View No Scroll # 2 __EoT__ `` ` java.lang.NoClassDefFoundError : com.afollestad.materialdialogssample.ColorChooserDialog at com.afollestad.materialdialogssample.MainActivity.showCustomColorChooser ( MainActivity.java:477 ) at com.afollestad.materialdialogssample.MainActivity.access $ 1600 ( MainActivity.java:36 ) at com.afollestad.materialdialogssample.MainActivity $ 17.onClick ( MainActivity.java:173 ) at android.view.View.performClick ( View.java:2494 ) at android.view.View $ PerformClick.run ( View.java:9122 ) at android.os.Handler.handleCallback ( Handler.java:587 ) at android.os.Handler.dispatchMessage ( Handler.java:92 ) at android.os.Looper.loop ( Looper.java:130 ) at android.app.ActivityThread.main ( ActivityThread.java:3806 ) at java.lang.reflect.Method.invokeNative ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:507 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:839 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:597 ) at dalvik.system.NativeStart.main ( Native Method ) `` `
OnMultiChoiceClickListener.OnClick is not called when unchecking items __EoT__ When using ` AlertDialogWrapper.Builder ` and calling ` alwaysCallMultiChoiceCallback ` , ` OnMultiChoiceClickListener.OnClick ` will be only called the first time an item is checked . It wo n't be called on unchecking or re-checking items . Using ` AlertDialog.Builder ` it is called every time an item is checked or unchecked .
The layout is inefficent __EoT__ You have put all the stuffs in one layout , thus make the inflation time too long
ListPreference summary does n't update __EoT__ When you set the ` ListPreference ` 's field ` android : summary= '' % s '' ` it does n't automatically update when you select different option . I have solved it with [ this solution ] ( http : //stackoverflow.com/a/21642401/4584675 ) and it seems to work just fine . I am not sure whether this is the best solution .
MaterialMultiSelectListPreference should inherit from MultiSelectListPreference __EoT__ Now it inherit from ` ListPreference ` , But ` ListPreference ` read persisted value as String in ` onSetInitialValue ` . so ` onSetInitialValue ` will throw exception . `` ` Bash Caused by : java.lang.ClassCastException : java.util.HashSet can not be cast to java.lang.String at android.app.SharedPreferencesImpl.getString ( SharedPreferencesImpl.java:223 ) at android.preference.Preference.getPersistedString ( Preference.java:1460 ) at android.preference.ListPreference.onSetInitialValue ( ListPreference.java:294 ) at android.preference.Preference.dispatchSetInitialValue ( Preference.java:1376 ) at android.preference.Preference.onAttachedToHierarchy ( Preference.java:1171 ) at android.preference.PreferenceGroup.addPreference ( PreferenceGroup.java:167 ) at android.preference.PreferenceGroup.addItemFromInflater ( PreferenceGroup.java:108 ) at android.preference.PreferenceGroup.addItemFromInflater ( PreferenceGroup.java:45 ) at android.preference.GenericInflater.rInflate ( GenericInflater.java:488 ) `` ` And ` MaterialMultiSelectListPreference ` missing ` getValues ` too .
MaterialMultiSelectListPreference should inherit from MultiSelectListPreference __EoT__ Now it inherit from ` ListPreference ` , But ` ListPreference ` read persisted value as String in ` onSetInitialValue ` . so ` onSetInitialValue ` will throw exception . `` ` Bash Caused by : java.lang.ClassCastException : java.util.HashSet can not be cast to java.lang.String at android.app.SharedPreferencesImpl.getString ( SharedPreferencesImpl.java:223 ) at android.preference.Preference.getPersistedString ( Preference.java:1460 ) at android.preference.ListPreference.onSetInitialValue ( ListPreference.java:294 ) at android.preference.Preference.dispatchSetInitialValue ( Preference.java:1376 ) at android.preference.Preference.onAttachedToHierarchy ( Preference.java:1171 ) at android.preference.PreferenceGroup.addPreference ( PreferenceGroup.java:167 ) at android.preference.PreferenceGroup.addItemFromInflater ( PreferenceGroup.java:108 ) at android.preference.PreferenceGroup.addItemFromInflater ( PreferenceGroup.java:45 ) at android.preference.GenericInflater.rInflate ( GenericInflater.java:488 ) `` ` And ` MaterialMultiSelectListPreference ` missing ` getValues ` too .
MaterialMultiSelectListPreference should inherit from MultiSelectListPreference __EoT__ Now it inherit from ` ListPreference ` , But ` ListPreference ` read persisted value as String in ` onSetInitialValue ` . so ` onSetInitialValue ` will throw exception . `` ` Bash Caused by : java.lang.ClassCastException : java.util.HashSet can not be cast to java.lang.String at android.app.SharedPreferencesImpl.getString ( SharedPreferencesImpl.java:223 ) at android.preference.Preference.getPersistedString ( Preference.java:1460 ) at android.preference.ListPreference.onSetInitialValue ( ListPreference.java:294 ) at android.preference.Preference.dispatchSetInitialValue ( Preference.java:1376 ) at android.preference.Preference.onAttachedToHierarchy ( Preference.java:1171 ) at android.preference.PreferenceGroup.addPreference ( PreferenceGroup.java:167 ) at android.preference.PreferenceGroup.addItemFromInflater ( PreferenceGroup.java:108 ) at android.preference.PreferenceGroup.addItemFromInflater ( PreferenceGroup.java:45 ) at android.preference.GenericInflater.rInflate ( GenericInflater.java:488 ) `` ` And ` MaterialMultiSelectListPreference ` missing ` getValues ` too .
ListPreference should throw IllegalStateException on wrong initalization __EoT__ MaterialListPreference should check ( like android does ) if values are initialized correctly . I.e android ListPreference throws this exception : < code > java.lang.IllegalStateException : ListPreference requires an entries array and an entryValues array. < /code > Which is helpful . I didnt specify values , so your ListPreference just showed me the entries , but didnt save which one was chosen . So immediately failing fast seems to be a good solution .
MaterialEditTextPreference missing getText method __EoT__ Stock EditTextPreference has a getText method which is missing in MaterialEditTextPreference
Display current and max progress on left side of determinate progressbar __EoT__ As is in subject . I think it could be configurable .
Unable to open MaterialEditTextPreference twice __EoT__ When the MaterialEditTextPreference is opened twice , ` mEditText ` still seems to be attached to the old dialog and the following exception is thrown . `` ` Process : org.owntracks.android , PID : 1190 java.lang.IllegalStateException : The specified child already has a parent . You must call removeView ( ) on the child 's parent first . at android.view.ViewGroup.addViewInner ( ViewGroup.java:3882 ) at android.view.ViewGroup.addView ( ViewGroup.java:3735 ) at android.view.ViewGroup.addView ( ViewGroup.java:3711 ) at com.afollestad.materialdialogs.prefs.MaterialEditTextPreference.showDialog ( MaterialEditTextPreference.java:80 ) `` ` I 'm seeing this with version 0.6.4.2 . Any idea why the old dialog is still around ?
Add substitution for MultiSelectListPreference __EoT__ Now we have MaterialListPreference for ListPreference . But no substitution for MultiSelectListPreference .
MaterialEditTextPreference not compliance with android : inputType __EoT__ The stock EditTextPreference create EditText like this : mEditText = new EditText ( context , attrs ) ; So android : inputType is working . But MaterialEditTextPreference did n't use those attributes .
Consider adding setWidgetLayoutResource ( 0 ) to MaterialListPreference on Android 2.x __EoT__ Gingerbread shows an ugly sort of checkmark on ListPreferences , newer android version removed this image at all , you can get rid of it by adding this code in the MaterialListPreference constructors `` ` if ( Build.VERSION.SDK_INT < = Build.VERSION_CODES.GINGERBREAD_MR1 ) setWidgetLayoutResource ( 0 ) ; `` `
The ListCallback of AlertDialogWrapper # setAdapter ( ) has position , but no ID __EoT__ Hi , Since the new version 0.6.4.0 , the listview callback obtained with dialogZonas.getListView ( ) does n't work . It was useful since I could use the Id of the cursor to perform updates . It 's possible add this parameter in the adapter 's callback ? Thanks .
AlertDialogWrapper.Builder # setAdapter is not the same with AlertDialog.Builder counterpart __EoT__ In AlertDialog.Builder , setAdapter has 2 params , the adapter and the item click listener . However , in AlertDialogWrapper.Builder , the setAdapter method only specifies the adapter . This makes migrating from AlertDialog to MaterialDialog is not simple as replacing AlertDialog.Builder with AlertDialogWrapper.Builder .
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Support alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder __EoT__ Now we ca n't call alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder
Support alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder __EoT__ Now we ca n't call alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
setIcon drawable size dynamic scaling ? __EoT__ Is there anyway to modify the size of the icon in the dialog so that it scales regardless of the actual dimensions of the drawable ( ie : 48x48 vs 96x96 vs 129x128 ) ?
setIcon drawable size dynamic scaling ? __EoT__ Is there anyway to modify the size of the icon in the dialog so that it scales regardless of the actual dimensions of the drawable ( ie : 48x48 vs 96x96 vs 129x128 ) ?
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Support alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder __EoT__ Now we ca n't call alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder
Support alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder __EoT__ Now we ca n't call alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder
Support alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder __EoT__ Now we ca n't call alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder
Support alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder __EoT__ Now we ca n't call alwaysCallMultiChoiceCallback when using AlertDialogWrapper.Builder
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Weird glitches when dialog changes size ( redraws/remeasures ) __EoT__
Title loses formatting when using custom adapter ( with no content ) __EoT__ Due to 6a38309d , a title + adapter , without content , causes the title to show as grey text and a smaller font , instead of the normal title formatting . This can be fixed either by adding a check for the adapter in build , or reversing 6a38309d ( as does n't the title lose formatting for dialogs without content now ? What is the purpose of moving the title to content if there is no content ? )
setIcon drawable size dynamic scaling ? __EoT__ Is there anyway to modify the size of the icon in the dialog so that it scales regardless of the actual dimensions of the drawable ( ie : 48x48 vs 96x96 vs 129x128 ) ?
button color bug __EoT__ maybe you wrong write code ; `` ` mBuilder.neutralColor = DialogUtils.resolveColor ( mBuilder.context , R.attr.md_negative_color , mBuilder.neutralColor ) ; mBuilder.negativeColor = DialogUtils.resolveColor ( mBuilder.context , R.attr.md_neutral_color , mBuilder.negativeColor ) ; `` ` R.attr.md_neutral_color and R.attr.md_negative_color ,
Medium font for action button __EoT__ Due to bc3b3b3 ( removal of hard-coded Roboto fonts ) , the action buttons no longer have the medium font . Fix : use `` sans-serif-medium '' fontFamily on 5.0+ by default and bold style on < 5.0 by default . See ` fonts.xml ` in ` values ` and ` values-v21 ` folders in Cabinet ( which I implemented ) : https : //github.com/afollestad/cabinet/tree/master/app/src/main/res
gradle dependency snippet in README __EoT__ Should be ` compile 'com.afollestad : material-dialogs:0.3.0 ' ` instead of ` compile 'com.afollestad : material-dialogs:0.3 ' ` .
HttpServerResponseImpl.isChunked fails to validate existence of Transfer-Enconding header __EoT__ In ` io/vertx/core/http/impl/HttpServerResponseImpl.java:145 ` version 3.5.4 , the methods tries to compare CharSequence with a String and always returns ` false ` even when the header is present . `` `` @ Override public boolean isChunked ( ) { synchronized ( conn ) { return HttpHeaders.CHUNKED.equals ( headers.get ( HttpHeaders.TRANSFER_ENCODING ) ) ; } } `` `
SSL handshake improvements __EoT__ Currently the SSL handshake leaks handshake failures to the ChannelPipeline during the handshake because we are using the HandshakeFuture to progress during the handshake . Improve the SSL handshake handling to use a channel handlers ( client / server ) that will not propagate uncaught failures in the pipeline . The handlers are implemented using events emitted by the SslHandler/SniHandler when the handshake completes .
MultiMap should get should return entries added in order __EoT__ `` ` java MultiMap mm = ... mm.add ( `` h '' , `` v1 '' ) ; mm.add ( `` h '' , `` v2 '' ) ; mm.add ( `` h '' , `` v3 '' ) ; // Returns v3 but should return v1 String s = mm.get ( `` h '' ) ; `` `
executeBlocking callback run on the wrong thread for asynchronous future resolution __EoT__ Currently the ` executeBlocking ( Handler < Future < T > > , Handler < AsyncResult < T > > ) ` might execute the callback on the wrong thread when the ` runOnContext ( ... ) ` execution loses the race against the thread that completes the future . This never happens when the worker thread completes the future , but it can happen when the worker thread hands off the future to another thread that completes it . This happen in the Mongo client and fails with a stack-trace like : `` ` at io.vertx.ext.mongo.impl.MongoIterableStream.lambda $ doRead $ 5 ( MongoIterableStream.java:120 ) at io.vertx.core.impl.FutureImpl.tryComplete ( FutureImpl.java:125 ) at io.vertx.core.impl.FutureImpl.complete ( FutureImpl.java:86 ) at io.vertx.ext.mongo.impl.MongoIterableStream.lambda $ null $ 3 ( MongoIterableStream.java:112 ) at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult ( ErrorHandlingResultCallback.java:49 ) at com.mongodb.operation.AsyncQueryBatchCursor.handleGetMoreQueryResult ( AsyncQueryBatchCursor.java:271 ) at com.mongodb.operation.AsyncQueryBatchCursor.access $ 300 ( AsyncQueryBatchCursor.java:55 ) at com.mongodb.operation.AsyncQueryBatchCursor $ CommandResultSingleResultCallback.onResult ( AsyncQueryBatchCursor.java:301 ) at com.mongodb.operation.AsyncQueryBatchCursor $ CommandResultSingleResultCallback.onResult ( AsyncQueryBatchCursor.java:276 ) at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult ( ErrorHandlingResultCallback.java:49 ) at com.mongodb.connection.DefaultServer $ DefaultServerProtocolExecutor $ 2.onResult ( DefaultServer.java:207 ) at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult ( ErrorHandlingResultCallback.java:49 ) at com.mongodb.connection.CommandProtocolImpl $ 1.onResult ( CommandProtocolImpl.java:102 ) at com.mongodb.connection.DefaultConnectionPool $ PooledConnection $ 1.onResult ( DefaultConnectionPool.java:458
Support retrieving X509 certificates CN since javax.naming package is unavailable in Android __EoT__ …Support retrieving X509 certificates CN if javax.naming package is unavailable . Android does not contain this package . Signed-off-by : Hayden James < hayden.james @ gmail.com >
Add new CLI arg to support external JSON VertxOptions __EoT__ When starting Vert.x applications with the CLI , you ca n't point to a JSON file for ` VertxOptions ` . This would be useful for users who need to set nested options ( e.g , setting custom HTTP headers in Hawkular metrics options ) . The launchers classes support a few nested objects , but not deeply nested ones . As a workaround , Java/Groovy developers packaging apps in fat jars may extend the ` Launcher ` class and implement ` io.vertx.core.impl.launcher.VertxLifecycleHooks # beforeStartingVertx ` .
Client connections on GlobalEventExecutor thread that are not propagated to the application __EoT__ Sometimes the Netty 's bootstrap may notify client connections on the ` GlobalEventExecutor ` thread when it happens early in the boostrap when an event-loop has not been yet determined . Vertx expects notifications to happen on the event loop thread and this results in a ` Uh oh ! Event loop context executing with wrong thread ! ` failure .
fix wrong TimeUnit __EoT__
Incorrect metrics SPI callbacks for H2C upgrade __EoT__ io.vertx.core.spi.metrics.HttpClientMetrics # endpointConnected is not invoked for Http2 client is it a bug or requirement ?
FileResolver fails when path contains ` + ` character __EoT__ # # # Version * vert.x core : 3.5.3 # # # Context ` io.vertx.core.impl.FileResolver ` fails to extract content from JARs containing ` + ` in a file name ( e.g . ` vertx-static-content-0.0.1+test-fat.jar ` ) . Most likely ` java.net.URLDecoder.decode ( String , String ) ` replaces ` + ` with ` ` ( space ) `` ` java -jar vertx-static-content-0.0.1+test-fat.jar io.vertx.core.Starter INFO : Succeeded in deploying verticle io.vertx.ext.web.impl.RoutingContextImplBase SEVERE : Unexpected exception in route io.vertx.core.VertxException : java.io.FileNotFoundException : /home/user/workspace/vertx-static-content/target/vertx-static-content-0.0.1 test-fat.jar at io.vertx.core.impl.FileResolver.unpackFromJarURL ( FileResolver.java:249 ) at io.vertx.core.impl.FileResolver.unpackUrlResource ( FileResolver.java:153 ) at io.vertx.core.impl.FileResolver.resolveFile ( FileResolver.java:134 ) at io.vertx.core.impl.VertxImpl.resolveFile ( VertxImpl.java:776 ) at io.vertx.core.http.impl.HttpServerResponseImpl.doSendFile ( HttpServerResponseImpl.java:432 ) at io.vertx.core.http.impl.HttpServerResponseImpl.sendFile ( HttpServerResponseImpl.java:352 ) at io.vertx.core.http.HttpServerResponse.sendFile ( HttpServerResponse.java:327 ) at io.vertx.core.http.HttpServerResponse.sendFile ( HttpServerResponse.java:313 ) at test.Web.lambda $ start $ 1 ( Web.java:15 ) `` ` # # # Do you have a reproducer ? https : //github.com/zaytsev/vertx-static-content
Rework FileSystemOptions data object __EoT__ Signed-off-by : Julien Viet < julien @ julienviet.com >
HttpClient connection handler __EoT__ The ` HttpClient ` does have a per request connection handler which requires to modify each request to be aware of connection life cycle . This can be quite intrusive in client code to set a the connection handler on each request , specially when one wants to be aware of life cycle without being intrusive . This features adds a new ` HttpClient # connectionHandler ( Handler < HttpConnection > ) ` that is called when the client connects to an host .
EventBus interceptors should be able to intercept on both send and receipt __EoT__ Currently , the eventbus interceptor can only inspect and transform messages on send . The interceptor does not have the ability to perform complementary operations on message delivery . A use-case would be for distributed tracing technologies where tracing of intra-cluster communication is the goal . One would want to `` start '' a trace on message send and `` close '' the trace on delivery ( or , perform further trace-state management if a response is expected ) . PR forthcoming .
RecordParser : Limit the record size __EoT__ A simple implementation of # 2560 .
HttpServerResponse content headers improvements __EoT__ Currently the ` HttpServerResponse ` incorrectly sets the ` content-length ` and ` transfer-encoding ` headers in a few cases . It should use the following rules : - on RESET_CONTENT ( 205 ) status - either send ` transfer-encoding : chunked ` with an empty chunk or ` content-length : 0 ` - on HEAD method or NOT_MODIFIED ( 304 ) status - ` content-Length ` should not be set automatically to ` 0 ` or this header can be set to what the body size would have been - ` transfer-encoding ` should not be present - on INFORMATIONAL ( 1xx ) or NO_CONTENT ( 204 ) - none of these headers should be present Currently a few cases are not supported for HTTP/1.x and HTTP/2 . This issues fixes them , in addition the ` chunked ` flag on the response implementations is removed to check the ` transfer-encoding ` directly on the response to avoid the edge case where a user would set such headers instead of the response object .
Upgrade Netty to 4.1.27.Final __EoT__
Incorrect javadoc for MessageProducer # send __EoT__ I 'm not sure whether this behavior is correct or not , but when you try to create a message producer via ` EventBus.publisher ` method , it creates instance of ` MessageProducerImpl ` class with private ` send ` field equal to ` false ` -- which is designed to distinguish senders and publishers I guess ; but actual implementation of methods ` send ` and ` write ` of the producer class differs : **Send method : ** `` ` java public MessageProducer < T > send ( T message ) { doSend ( message , null ) ; return this ; } `` ` **Write method : ** `` ` java public synchronized MessageProducer < T > write ( T data ) { if ( send ) { doSend ( data , null ) ; } else { bus.publish ( address , data , options ) ; } return this ; } `` ` Which subsequently leads to strange behavior : ` send ` method actually **sends** messages , but ` write ` method **publishes** them , even if it was a _publisher_ created . In JavaDoc for the `
WebSocket client does not report server protocol violations on the WebSocket exception handler __EoT__ As the title says , basically . When a websocket client receives a payload larger than the configured max size , it seems that it just immediately closes the socket without warning - no logs , no exception , no close frame . I may have misunderstood something , but nothing I did short of changing the max sizes in the options gave any indication of the problem being displayed or fixed .
HTTP/2 settings update can miss acknowledgement __EoT__ Currently the HTTP/2 settings upgrade sets the acknowledgement handler after the successful write of the settings frame , sometimes the acknowledgement can be received before this callback happens and therefore we miss the acknowledgement . We should instead update the acknowledgement handler queue before writing the settings frame and remove this handler from the queue on a write failure .
Support temporary files and directories __EoT__ It would be nice if ` io.vertx.core.file.FileSystem ` supported the creation of temporary files and directories ( using ` java.nio.files.Files.createTempFile ` and ` java.nio.files.Files.createTempDirectory ` respectively )
Remove generic connection message encoding/decoding and instead let each connection handle it when necessary __EoT__ Currently the ` VertxHandler ` / ` ConnectionBase ` handle conversion of Netty / Vertx messages . Such conversion can be handled by the receiver of the emitter of the message instead of being applied to each message . This removes unnecessary message inspection ( if/else switches ) when it 's not needed ( i.e an plain HTTP request with not entity ) .
HTTP client upgrade to socket might lose buffers immediately sent by the server __EoT__ Currently the HTTP client upgrade to socket might lose buffers when these buffers are received in the same chunk than the HTTP response .
ReadStream fetch mode __EoT__ A Vert.x stream is n't trivial to implement and actual adapters using request flow control ( RxJava , Reactive-Streams ) have to maintain an extra queue for buffering unrequested items until they are requested . The ReadStream interface should be augmented with a fetch operation that allows to provide request based control . The stream interface continues to operate with pause/resume control that is easier to use ( and also more realistic with actual transports such as TCP , as request based flow control has to prefetch for efficiency in practice ) . The state changes from two states ( paused / flowing ) to ( fetching [ n ] / flowing ) , fetching [ 0 ] is equivalent to pause . A fetch method is added to ReadStream : `` ` java public interface ReadStream < T > { // Set the stream into flowing mode @ Fluent ReadStream < T > resume ( ) ; // Set the stream into fetch mode with no fetched items @ Fluent ReadStream < T > pause ( ) ; // Set the stream into fetch mode with the specified amount of fetched items // or increase
NullPointerException when reporting a deployment failure without a completion handler __EoT__ In 3.5.3 , when deploying a verticle using ` deployVerticle ( Class < ? extends Verticle , DeployOptions ) ` , it throws a NPE if the class is not public ( default : package-private ) . e.g . In ` Main.java ` : `` ` vertx.deployVerticle ( MessageReceiverVerticle.class , new DeploymentOptions ( ) .setInstances ( 10 ) ) ; `` ` In ` MessageReceiverVerticle.java ` : `` ` class MessageReceiverVerticle extends AbstractVerticle { } `` ` NPE : `` ` Exception in thread `` main '' java.lang.NullPointerException at io.vertx.core.impl.DeploymentManager.deployVerticle ( DeploymentManager.java:105 ) at io.vertx.core.impl.VertxImpl.deployVerticle ( VertxImpl.java:646 ) at io.vertx.core.impl.VertxImpl.deployVerticle ( VertxImpl.java:613 ) at io.vertx.core.impl.VertxImpl.deployVerticle ( VertxImpl.java:602 ) at com.groupon.api.test.Main.main ( Main.java:13 ) `` ` Reproducible example is provided : [ vertx-test.zip ] ( https : //github.com/eclipse/vert.x/files/2288609/vertx-test.zip )
Provide default methods for metrics SPI __EoT__ we do have now , base ( dummy ) implementation of these but we should better provide default methods instead
HttpServerRequest # netSocket ( ) improvements __EoT__ Currently the HttpServerRequest # netSocket ( ) has a few problems : - when used with a ` CONNECT ` requests , the code is different for HTTP/1 and HTTP/2 , HTTP/2 will send an header frame and HTTP/1 will not - the request/response lifecycle is not properly handled in all cases , when using a ` NetSocket ` the response should be marked as ended so it can not be used anymore - the net socket should be obtained before the response is sent , assuming the handler has the still the ownership of the stream
DnsException improvements __EoT__ - shall not capture stack trace - provide a meaningful to string
Add FileSystemOptions and use in FileResolver __EoT__ Addresses : # 2550 Signed-off-by : Mark Arbogast < mark.t.arbogast @ gmail.com >
HttpClient response chunk handling rework __EoT__ Rework the ` HttpClient ` request chunk handling that is split between ` HttpClientResponse ` and ` HttpClientStream ` so it is fully managed by the stream . The logic is now encapsulated in the stream and it simplifies the logic of the client response that does not care anymore of paused trailers and paused end chunk ( that was only used by HTTP/1 ) .
Update to netty 4.1.25.Final and netty-tcnative 2.0.8.Final __EoT__
HttpClient must use the http scheme for non SSL connections __EoT__ Currently when the ` HttpClient ` sends an HTTP/2 request , it uses the _https_ scheme unconditionally . The scheme decision should look whether the connection uses TLS or not .
HttpClient idle state handler should be added first when the connection is borrowed from the pool __EoT__ Currently the ` HttpClient ` adds the ` IdleStateHandler ` before the ` handler ` , relying on the ` handler ` presence . With HTTP/2 clear text upgrade the ` handler ` name can not be preserved and therefore adding the idle state handler fails .
HttpServer does not clean the channel pipeline after HTTP/1 upgrade to H2C __EoT__ Currently after an HTTP/1 to H2C upgrade the HTTP server does not actually remove the codecs from the channel pipeline leading the HTTP decoder to decode H2 .
Disable HttpClient TCP idle timeout when connection is in the pool __EoT__ I noticed that in a corner case , we have a lot of test failure where the connection is not used very often . For example , I make a timeout to be of 10 seconds and I make a call every 10 seconds exactly . Every once in while , my request fails with VertxException ( Connection is closed ) since the checkout connection is closed right after the connection is polled from the connection pool . I only noticed this in 3.5.2 but not in 3.4.2
HttpServer connection lifecycle rework __EoT__ Currently the ` Http1xServerConnection ` class handles all HTTP messages in a single queue . This refactoring removes the global queue and instead uses a buffer queue in each ` HttpServerRequest ` implementation . Pipelined requests are now handled in the connection as a linked queue of ` HttpServerRequest ` where the head is the request sending a response and the tail is the request receiving the HTTP content buffers . In normal case the _head_ and _tail_ are the same request , in pipelined case a request may have been fully received but the response not yet sent and thus _head_ → _tail_ . This refactor is required by https : //github.com/vert-x3/wiki/wiki/Vert.x-Roadmap # stream-improvements .
HttpClient should behave according to the HTTP version returned by the server and not sent by the client __EoT__ Full discussion with Gists is available [ here ] ( https : //groups.google.com/forum/ # ! topic/vertx/uc8XZEEnx0w ) . The problem goes as follows : vert.x http client submits 2 sequential requests to a http1.0 server . First requests receives a response as expected , second one fails with VertxException . The issue seems to be introduced in 3.5.2 and did n't exist in 3.5.1 . Fixing _When the response does not contain Connection : Keep-alive in HTTP/1.0 , the client has to assume Connection : close._
net client idle in ms __EoT__ Hello , I am using vertx redis and I need to idle timeout in less than a seconds . I am using Redis vertx and I have checked that NetClientImpl always call IdleStateHandler in a way that it will idle in seconds . Do you support only TimeUnit.SECONDS for a specific reason ?
Internal references to local Locks taken using SharedData.getLock ( ) are not cleaned up __EoT__ Every time a unique lock name is taken via ` SharedData.getLock ( ... ) ` , it gets added to a Map inside of ` SharedDataImpl ` . Currently , entries added to this Map are never removed , even if all references to the lock have been released , and there are no pending waiters . This means the Map can grow infinitely if an application takes locks using generated names , rather than hard-coded ones . To avoid this , entries could be removed from the internal map at the point the lock is released , as long as there are no pending waiters .
NetServer bootstrap should set SO_LINGER option on the child channel instead of the server channel __EoT__ Hello . If we use setSoLinger we only get : ` WARN i.n.b.ServerBootstrap [ vert.x-eventloop-thread-7 ] Unknown channel option 'SO_LINGER ' for channel ` Code right now is : https : //github.com/eclipse/vert.x/blob/357af84886367ef31dc61f00a646e6455f1ac8c8/src/main/java/io/vertx/core/net/impl/transport/Transport.java # L214-L216 According to [ https : //github.com/mrniko/netty-socketio/issues/481 ] ( url ) it looks like that it should be like this : `` ` Java if ( options.getSoLinger ( ) ! = -1 ) { bootstrap.childOption ( ChannelOption.SO_LINGER , options.getSoLinger ( ) ) ; } `` ` Hope somebody can help on this .
Websocket client and server do n't send back close frame in closing handshake __EoT__ # # # Issue While using vertx to implement a websocket server , certain websocket client library ( okhttp ) got failure callback when closing the websocket from its side . # # # Finding After doing a package capture , I found vertx did n't respond a __CLOSE__ frame after receiving one . This behavior does n't follow the RFC . https : //github.com/eclipse/vert.x/blob/e69a81a039400af76b256a55b38d8b65c3b07ca1/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java # L695-L703 I checked vertx source code , and did some debug . I believe there is a __bug__ at Line __699__ . From the comment , these lines of code intend to ` Echo back close frame ` . Actually the Line 699 would always fail . `` ` ch.writeAndFlush ( wsFrame ) .addListener ( ChannelFutureListener.CLOSE ) ; `` ` After adding some debug code there , it actually throws the following exception . The ` wrFrame ` can not be passed to ` writeAndFlush ` directly . `` ` java.lang.UnsupportedOperationException : unsupported message type : WebSocketFrameImpl ( expected : ByteBuf , FileRegion ) at io.netty.channel.nio.AbstractNioByteChannel.filterOutboundMessage ( AbstractNioByteChannel.java:266 ) at io.netty.channel.AbstractChannel $ AbstractUnsafe.write ( AbstractChannel.java:877 ) at io.netty.channel.DefaultChannelPipeline $ HeadContext.write
FutureImpl shall release the handler after completion __EoT__ Currently ` FutureImpl ` keeps a reference on the handler after it has been completed . As side effect it can promote objects to survivor spaces . Since the future is completed there is no need to keep the reference onto the handler .
Http header CR / LF validation __EoT__ # # motivation Currently ` HttpClientRequest ` and ` HttpServerResponse ` do n't check wether header name or value contain ` \r ` or ` \n ` chars . Of course developers are fully responsible for http headers set and such incorrect value is likely unintended . Forbidding it prevents HTTP header injection for application that omit to check headers . # # change throw an ` IllegalArgumentException ` when a header name or value contains ` \r ` or ` \n ` char
OSGi support for issue 2126 __EoT__
WorkExecutorImpls are not removed from closeHooks when they are closed __EoT__ When a ` WorkExecutor ` is created via a ` vertx.createSharedWorkerExecutor ( ... ) ` call , a reference to the ` WorkExecutor ` is added to the ` closeHooks ` for the current ` Context ` : `` ` ContextImpl context = getOrCreateContext ( ) ; WorkerExecutorImpl namedExec = new WorkerExecutorImpl ( this , sharedWorkerPool , true ) ; context.addCloseHook ( namedExec ) ; return namedExec ; `` ` However , when the ` WorkerExecutor ` is closed , the reference is not removed from ` closeHooks ` , resulting in a leak : `` ` public void close ( ) { synchronized ( this ) { if ( ! closed ) { closed = true ; } else { return ; } } if ( releaseOnClose & & pool instanceof VertxImpl.SharedWorkerPool ) { ( ( VertxImpl.SharedWorkerPool ) pool ) .release ( ) ; } } `` `
Time values can be specified with a time unit __EoT__ https : //github.com/eclipse/vert.x/blob/ed75286d4e6a206244829fdbd01775d9516f6a70/src/main/java/io/vertx/core/Vertx.java # L557-L562 https : //github.com/eclipse/vert.x/blob/ed75286d4e6a206244829fdbd01775d9516f6a70/src/main/java/examples/CoreExamples.java # L95-L104
Incorrect VertxHttp2Stream checkNextTick implementation __EoT__ I 'm building a HTTP2 proxy with Vert.x 3.5.1 , when I try to migrate to 3.5.2.CR1 , NullPointerException may happen when requests come `` ` May 16 , 2018 2:40:21 PM io.vertx.core.impl.ContextImpl SEVERE : Unhandled exception java.lang.NullPointerException at io.vertx.core.http.impl.VertxHttp2Stream.checkNextTick ( VertxHttp2Stream.java:104 ) at io.vertx.core.impl.ContextImpl.lambda $ wrapTask $ 2 ( ContextImpl.java:339 ) at io.netty.util.concurrent.AbstractEventExecutor.safeExecute ( AbstractEventExecutor.java:163 ) at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks ( SingleThreadEventExecutor.java:404 ) at io.netty.channel.epoll.EpollEventLoop.run ( EpollEventLoop.java:309 ) at io.netty.util.concurrent.SingleThreadEventExecutor $ 5.run ( SingleThreadEventExecutor.java:886 ) at io.netty.util.concurrent.FastThreadLocalRunnable.run ( FastThreadLocalRunnable.java:30 ) at java.lang.Thread.run ( Thread.java:748 ) `` ` I guess this might be caused when ` pending ` deque is empty , see https : //github.com/eclipse/vert.x/blob/47d15d66dcd56381ee07754545258d3c48537784/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java # L103
DnsClient throws an exception when calling a Dns server over IpV6 __EoT__ fixes # 2456 @ vietj could you please review
Return null for JsonObject.mapFrom ( null ) __EoT__
Vertx http headers refactor __EoT__ Refactor to remove duplicate methods and use the optimal implementation that can possibly uses ` AsciiString ` optimised headers .
VertxHttpHeaders # add ( CharSequence , CharSequence ) does not used AsciiString cached hashcode value __EoT__ # # # motivation It prevents AsciiString based headers to be used efficiently ( using the cached # # # change Replace the method body by the body of VertxHttpHeaders # add ( CharSequence , Object ) and have ` VertxHttpHeaders # add ( CharSequence , Object ) ` delegate to ` VertxHttpHeaders # add ( CharSequence , CharSequence ) ` Microbenchmarks shows a significant improvement when optimised headers are used ( hint before the optimization was only partially used ) . Note the benchmark is not used to justify the change , the change itself is very obvious . This was reported also with Java Flight Recorder hot methods showing a unusual call to ` AsciiString # hashCode ( CharSequence ) ` that calls ` PlatformDependent.hashCodeAscii ( CharSequence ) ` instead of casting to ` AsciiString ` and using the cached value since the ` AsciiString ` was converted to ` String ` . * Before `` ` Benchmark Mode Cnt Score Error Units HttpServerHandlerBenchmark.vertx thrpt 10 666.131 ± 14.881 ops/ms HttpServerHandlerBenchmark.vertxOpt thrpt 10 734.061 ± 19.262 ops/ms `` ` * After ``
Netty upgrade to 4.1.22.Final __EoT__ Hello , Im using JDK 10 and have encountered an issue with the version of netty being used ( https : //github.com/netty/netty/issues/7768 , where the owner said on the 4th of may , `` Upgrade to latest Netty version as it was fixed there '' ) Language : Kotlin JDK : 10 OS : Windows 10 IDE : Intellij Idea ultimate Stack trace `` ` 13:15:33.467 [ main ] DEBUG io.netty.util.internal.PlatformDependent0 - direct buffer constructor : available 13:15:33.467 [ main ] DEBUG io.netty.util.internal.PlatformDependent0 - java.nio.Bits.unaligned : available , true 13:15:33.468 [ main ] DEBUG io.netty.util.internal.PlatformDependent0 - jdk.internal.misc.Unsafe.allocateUninitializedArray ( int ) : unavailable java.lang.IllegalAccessException : class io.netty.util.internal.PlatformDependent0 $ 6 can not access class jdk.internal.misc.Unsafe ( in module java.base ) because module java.base does not export jdk.internal.misc to unnamed module @ 59d016c9 at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException ( Reflection.java:360 ) at java.base/java.lang.reflect.AccessibleObject.checkAccess ( AccessibleObject.java:589 ) at java.base/java.lang.reflect.Method.invoke ( Method.java:556 ) at io.netty.util.internal.PlatformDependent0 $ 6.run ( PlatformDependent0.java:312 ) at java.base/java.security.AccessController.doPrivileged ( Native Method ) at io.netty.util.internal.PlatformDependent0. < clinit > ( PlatformDependent0.java:303 ) at io.netty.util.internal.PlatformDependent.isAndroid ( PlatformDependent.java:208 ) at io.netty.util.internal.PlatformDependent. < clinit > ( PlatformDependent.java:79 ) at io.netty.util.ConstantPool. < init > ( ConstantPool.java:32 ) at io.netty.util.Signal $ 1. < init > (
Move the data object converter generator to codegen __EoT__
Metrics SPI should not be exposed measured instances __EoT__ Motivation : currently the Metrics SPI expose the measured instances to the SPI implementation when at creation of the corresponding metrics instance . This instance is actually not really used by the implementations ( Vertx instance was used by micrometer metrics instance to create an HTTP server but in practice it can start its own embedded instance as there is no much gain to create a new one ) . One issue providing the Vertx instance is that the provided instance was a racy publication of the Vertx instance complicated to solve ( because the MetricsFactory needs to be called early for creating the pool metrics ) . The metrics event bus initialised callback is also not used in practice ( it used to be by hawkular implementation ) , only by micrometer metrics as a signal to initialise the backend which can be replaced by a simple initialisation in the micrometer metrics factory . Change : do not provide measured instances when calling the SPI for creating a metrics implementation . Callback methods have also been renamed to contain the type of the metrics created ( i.e ` createMetrics `
Decouple the FileResolver from a Vertx instance __EoT__ Motiviation : currently the ` FileResolver ` is in the ` io.vertx.core.impl ` package and owns a ` Vertx ` instance . The only reason it needs this instance is to delete the cache dir when it is closed , because it actually needs to schedule a blocking file deletion ( via the filesystem instance ) . Change : decouple the ` FileResolver ` from the ` Vertx ` instance and the ` FileSystem ` implementation so it can be used without ` Vertx ` or ` FileResolver ` . The close operation is now blocking and the callers run it in an execute internal blocking operation ( Vert.x close ) or a thread ( at JVM shutdown ) .
Possible concurrency issue in Event Bus __EoT__ It looks like , there is possible concurrency issue in Event Bus , when we 're adding and removing local registrations . **addLocalRegistration** : https : //github.com/eclipse/vert.x/blob/5338f6353a49a4e7e9a6350e4878bcc5f11028a0/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java # L232 **removeLocalRegistration** : https : //github.com/eclipse/vert.x/blob/5338f6353a49a4e7e9a6350e4878bcc5f11028a0/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java # L277 There is very very little possibility ( but non 0 ) , that when we 're removing last handler in one thread and adding the new one for the same address in another , we can lost handlers list for that address . Is this real issue or not , because of it 's very little possibility , or I 'm missing some additional synchronization ? Topic in user group : https : //groups.google.com/forum/ # ! topic/vertx/T3F3CuG1n3w
There is no proper way to store mutable objects in a local map __EoT__ It is possible only for JsonObject , byte array and some other copyable objects known to vert.x . It would be usefull to have mechanism to store mutable user objects in a local map if they can be copied .
Cleanup expired HTTP client connection every second instead of milliseconds __EoT__ https : //github.com/eclipse/vert.x/blob/5945cd3aabbfad8ef8b79fab3fd0feca98f5ee35/src/main/java/io/vertx/core/http/impl/ConnectionManager.java # L62 starts a Timer with 1 _milli_-second delay to search for closeable/evictable connections . Is it really required to do this so often ? - Especially as we can define the keep-alive time only as whole seconds .
Remove HttpClientImpl # close method synchronization __EoT__
public interface VertxInternal exposes package private classes WorkerPool and WorkerExecutorImpl __EoT__ I 'm trying to implement a wrapper for Vertx instance that would do some custom stuff before delegating to actual instance . Implementing only Vertx interface would not work ( in some cases Vertx instance is casted to VertxInternal inside vertx libs ) .
calling HttpClientResponse.netSocket ( ) .close ( ) does not remove the connection from the pool __EoT__ When I want to terminate the request early , I made a call to HttpClientResponse.netSocket ( ) .close ( ) . It seems to close the connection properly but it never seems to remove the connection from the pool . It eventually cause the connection pool to exhaust . I will try to find whether it 's easy to create a repro . It looks like createNetSocket ( ) does not hook closeHandler ( ) . Therefore , when a connection is closed , the connection manager never removes it from the connection queue and thus the connection leak without having a connection lying around . @ vietj What do you think ?
App Id in the start command doc is wrong __EoT__ the doc mentions -Dvertx-id instead of —vertx-id
The HTTP server should always resume the request when the last chunk is processed __EoT__ Version 3.5.1 `` ` Kotlin fun main ( args : Array < String > ) { val vertx = Vertx.vertx ( ) val router = Router.router ( vertx ) router.route ( ) .handler { context - > context.request ( ) .isExpectMultipart = true context.request ( ) .uploadHandler { upload - > val uploadedFileName = File.createTempFile ( `` test '' , `` .txt '' ) .path upload.streamToFileSystem ( uploadedFileName ) upload.exceptionHandler { t - > context.fail ( t ) } upload.endHandler { context.response ( ) .end ( ) } } } vertx.createHttpServer ( ) .requestHandler ( router : :accept ) .listen ( 8080 ) } `` ` The code was taken from the BodyHandler . Using the following code and a small file ( 2 byte ) causes the problem `` ` [ xxx @ smu ~ ] $ cat empty.txt x [ xxx @ smu ~ ] $ curl -v 'http : //localhost:8080/ [ 1-2 ] ' -H 'Expect : ' -F `` file= @ empty.txt '' [ 1/2 ] : http : //localhost:8080/1 -- > < stdout > -- _curl_ -- http : //localhost:8080/1
Typo prevents configuration of EpollTransport __EoT__ Inside of ` Transport.java ` , the configure method has the following : `` ` setOption ( `` TCK_CORK '' , options.isTcpCork ( ) , setter ) ; setOption ( `` TCK_QUICKACK '' , options.isTcpQuickAck ( ) , setter ) ; setOption ( `` TCK_FASTOPEN '' , options.isTcpFastOpen ( ) , setter ) ; `` ` But inside ` EpollTransport.java ` it is looking for : `` ` case `` TCP_QUICKACK '' : return EpollChannelOption.TCP_QUICKACK ; case `` TCP_CORK '' : return EpollChannelOption.TCP_CORK ; case `` TCP_FASTOPEN '' : return EpollChannelOption.TCP_FASTOPEN ; `` `
HTTP client keep alive timeout __EoT__ It looks like Vert.x does not have a way to specify the keep alive strategy like what Apache HttpClient has ( https : //hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html ) . Would it be difficult to get it implemented ?
Do n't route connection write promise failures in the pipeline __EoT__ Currently the ` ConnectionBase # writeToChannel ( Object ) ` method uses the channel void promise for the channel write . When an error occurs , the channel void promise will invoke the pipeline exception handling . This can create undesired loop where an API exception handling performs a write operations that fails and invoke the same exception handler again for its own failure . Instead we create our own void promise that wo n't fire the exception .
HttpClient pool gets inconsistent on a synchronous connection failure __EoT__ The HttpClient pool assumes that the underlying ` ConnectionProvider ` will make an asynchronous callback , which is the case with the asynchronous DNS resolver but not with the JVM synchronous resolver when the host can not be resolved .
HTTP server connection keeps processing pending pipelined requests when connection closed __EoT__ Currently the HTTP server keeps processing pipelined HTTP messages when the connection is closed during the processing of a request and there are pending HTTP request in the server pipeline ( i.e the response has not been sent ) . This is due to a bug that when a message has not been processed during a check , the connection redo the check and it must not do it . Changes : we only trigger an message processing check from the message check itself when a message has been effectively processed .
Json # decodeValue can not deserialize a JSON null/number/boolean from a Buffer __EoT__ # # # Version * vert.x core : 3.5.1 # # # Context An EOFException is unexpectedly thrown when deserializing a JSON primitive ( null , Integer , String ) from a vert.x ` Buffer ` . Unrolling the buffer into a String prior to deserialization works as expected . # # # Do you have a reproducer ? * https : //github.com/GeorgeMH/vertx-json-eof-bug # # # Steps to reproduce 1 . Call ` Json.encodeToBuffer ( 42 ) ` 2 . Call ` Json.decodeValue ( buffer , Integer.class ) ` on the buffer created in step 1 . # # # Extra * N/A
Clustering tests : let cluster managers decide how to tear down clustered nodes __EoT__ Currently , the base test class stops all nodes at the same time .
Documentation for `` Asynchronous Verticle start and stop '' unclear __EoT__ The documentation for the `` Asynchronous Verticle start and stop '' section in the core documentation does not clearly explain what is necessary to make the verticle deloyment work asynchronously making initial use of vertx more frustrating than need be , especially because it uses verticle deployment in the example making it self referencing . I would suggest adding some vertx.executeBlocking ( ) code to the start method in the example code and referencing the `` Running blocking code '' section to show how it is done to make it clearer to first time users .
HTTP client connections should be pools per host and per virtual host __EoT__ When using an ` HttpClient ` for requests to different IPs with the same host header set , the connection pool only establishes one connection to one IP because the ` ConnectionKey ` for pooling only includes the host header ( as ` peerHost ` ) . Also see this [ mailing list conversation ] ( https : //groups.google.com/forum/ # ! topic/vertx/bGDQjjZ0mqM ) . To allow for connections to multiple IPs using the same host header , the ` peerHost ` could be e.g . IP + hostname .
ServerHandler throws NPE when shutdown is in progress __EoT__ While HTTP requests are fired against a vertx based HTTP server and a shutdown is initiated the following exceptions start appearing in the logs : ~~~ 14:10:05.743 [ vert.x-eventloop-thread-0 ] WARN i.n.c.AbstractChannelHandlerContext - An exception ' { } ' [ enable DEBUG level for full stacktrace ] was thrown by a user handler 's exceptionCaught ( ) method while handling the following exception : io.netty.channel.ChannelPipelineException : io.vertx.core.http.impl.HttpServerImpl $ ServerHandlerWithWebSockets.handlerAdded ( ) has thrown an exception ; removed . at io.netty.channel.DefaultChannelPipeline.callHandlerAdded0 ( DefaultChannelPipeline.java:626 ) at io.netty.channel.DefaultChannelPipeline.addLast ( DefaultChannelPipeline.java:235 ) at io.netty.channel.DefaultChannelPipeline.addLast ( DefaultChannelPipeline.java:201 ) at io.vertx.core.http.impl.HttpServerImpl.configureHttp1 ( HttpServerImpl.java:461 ) at io.vertx.core.http.impl.HttpServerImpl.access $ 700 ( HttpServerImpl.java:109 ) at io.vertx.core.http.impl.HttpServerImpl $ 1 $ 1.configure ( HttpServerImpl.java:319 ) at io.vertx.core.http.impl.Http1xOrH2CHandler.end ( Http1xOrH2CHandler.java:48 ) at io.vertx.core.http.impl.Http1xOrH2CHandler.channelRead ( Http1xOrH2CHandler.java:27 ) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:362 ) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:348 ) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead ( AbstractChannelHandlerContext.java:340 ) at io.netty.channel.DefaultChannelPipeline $ HeadContext.channelRead ( DefaultChannelPipeline.java:1359 ) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:362 ) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:348 ) at io.netty.channel.DefaultChannelPipeline.fireChannelRead ( DefaultChannelPipeline.java:935 ) at io.netty.channel.nio.AbstractNioByteChannel $ NioByteUnsafe.read ( AbstractNioByteChannel.java:134 ) at io.netty.channel.nio.NioEventLoop.processSelectedKey ( NioEventLoop.java:645 ) at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized ( NioEventLoop.java:580 ) at io.netty.channel.nio.NioEventLoop.processSelectedKeys ( NioEventLoop.java:497 ) at io.netty.channel.nio.NioEventLoop.run ( NioEventLoop.java:459 ) at io.netty.util.concurrent.SingleThreadEventExecutor $
Upgrade Jetty ALPN agent to 2.0.7 __EoT__ so the tests can run with the latest Oracle JDK .
Use LinkedHashSet in json to data object conversion __EoT__
The data object converter should prefer to use the setter over the adder when a data object declares both __EoT__
Remove SSLv2Hello from the default list of enabled protocols __EoT__ SSLv2Hello was already removed by the JDK7 enabled algorithms filtering applied , the patch https : //github.com/eclipse/vert.x/pull/2279 makes it enabled by default - it should be disabled by default as this is what Java does since JDK7
Name resolver always fallback to original name or search domain __EoT__ Until in some situation , either the original name or the search domain resolved name was used in a resolution . Now both are always used , the only difference is in the resolution order according to the ndots value . This behavior change comes with Netty 4.1.19.Final version , Vert.x integration tests are updated accordingly to the new behavior .
Dependencies upgrade __EoT__ to - Netty 4.1.19.Final : https : //dev.eclipse.org/ipzilla/show_bug.cgi ? id=15280 - Jackson Core 2.9.3 : https : //dev.eclipse.org/ipzilla/show_bug.cgi ? id=15282 - Jackson Databind 2.9.3 : https : //dev.eclipse.org/ipzilla/show_bug.cgi ? id=15283 - Jackson Annotations 2.9.3 : https : //dev.eclipse.org/ipzilla/show_bug.cgi ? id=15284 - Works-with : https : //dev.eclipse.org/ipzilla/show_bug.cgi ? id=15285
NetServer # close completion handler is not called when the actual server failed __EoT__ The method ` io.vertx.core.net.NetServer.close ( Handler < AsyncResult < Void > > ) ` is supposed to call back to the completion handler , however this is not always the case : My expectation on the code below would be that the ` completionHandler ` of ` deployVerticle ` gets called in any case . However it does n't get called at all . This is due to the fact that the ` DeploymentManager ` does run code using ` context.runCloseHooks ` , but as the ` NetServer.close ` method does n't call its ` completionHandler ` the ` deployVerticle ` method does n't report back as well . This is a regression in vertx 3.5.0 as this seems to have introduced the call on the ` runCloseHooks ` methods . But I guess ( I have n't checked ) the issue with the ` NetServer.close ` was there before 3.5.0 , but now it manifests in the issue with the ` deployVerticle ` . ~~~java public class Application { private static final class AbstractVerticleExtension extends AbstractVerticle { @ Override public void start ( Future <
Only automatically set content-length header on HTTP/2 HttpServerResponse when headers have n't been sent __EoT__ currently doing : `` ` resp.write ( `` foo '' ) .end ( `` bar '' ) `` ` sets the ` content-length=3 ` header on the response ( which is not sent ) but that 's incorrect
Writing on HttpServerResponse does not throw when closed __EoT__ When the client closes the connection , I can keep on calling HttpServerResponse.write forever without any indication of an error , I do n't even get an exception in my exception handler . It would be better to throw something .
DNSClient should send datagram requests with recursion desired flag set __EoT__ Currently the ` DNSClient ` send datagram requests with the flag ` recursionDesired ` set to false , which fails to provide a correct response when the DNS server could make a recursive query .
HttpClient connection leaks when exceptions thrown when receiving inbound messages __EoT__ We are observing HttpClient connection leaks due to exceptions in receiving inbound messages in certain conditions . The leak we are seeing is caused by io.netty.handler.codec.compression.DecompressionException , but there could be other cases that trigger the similar leaking situation . Some details about the case we are seeing : when a client has ` tryUseCompression ` set to ` true ` , and a server returns ` Content-Encoding : gzip ` in a response header , BUT then returns an invalid gzip response ( could simply be some plain texts ) for some reasons , DecompressionException is thrown , but the connection is not properly cleaned up . So far we suspect the direct cause of the issue is that ` VertxHandler.channelInactive ` is not fired after a channel is closed by ` exceptionCaught ` . But we are not sure the problem is in netty or vertx . Here is a unit test to reproduce the issue : https : //github.com/brian65535/connection_leak
HttpServer no-body responses with Transfer-Encoding : chunked __EoT__ When we are trying to respond to HEAD request using ` HttpServer ` and specify ` Transfer-Encoding : chunked ` then single zero chunk is written . While [ RFC ] ( https : //tools.ietf.org/html/rfc7231 # section-4.3.2 ) says : > The HEAD method is identical to GET except that the server MUST NOT send a message body in the response ( i.e. , the response terminates at the end of the header section ) . The server SHOULD send the same header fields in response to a HEAD request as it would have sent if the request had been a GET , except that the payload header fields ( Section 3.3 ) MAY be omitted . This method can be used for obtaining metadata about the selected representation without transferring the representation data and is often used for testing hypertext links for validity , accessibility , and recent modification . I tried following : `` ` request.response ( ) .setChunked ( true ) .end ( ) ; HTTP/1.1 200 OK Transfer-Encoding : chunked 0 `` ` And : `` ` request.response ( ) .putHeader ( `` Transfer-Encoding '' , `` chunked
Non keep-alive HTTP/1.x requests close the connection immediately with compressed responses __EoT__ Hi all , First of all , Thank you for the amazing work with vertx . I am testing the Version 3.5.0 with an nginx reverse proxy . If I turn off the keep-alive functionality , the HttpServerResponseImpl is not answering anything . You can test using the following HTTP requests : # Not working `` ` GET / HTTP/1.0 . Host : my-server.com X-Real-IP : 127.0.0.1 . X-Forwarded-For : 127.0.0.1 . Connection : close . Cache-Control : max-age=0 . Upgrade-Insecure-Requests : 1 . User-Agent : Mozilla/5.0 ( X11 ; Linux x86_64 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome/61.0.3163.79 Safari/537.36 . Accept : text/html , application/xhtml+xml , application/xml ; q=0.9 , image/webp , image/apng , */* ; q=0.8 . Accept-Encoding : gzip , deflate . Accept-Language : pt-BR , pt ; q=0.8 , en-US ; q=0.6 , en ; q=0.4 . . `` ` # Working `` ` GET / HTTP/1.1 . Host : my-server.com X-Real-IP : 127.0.0.1 . X-Forwarded-For : 127.0.0.1 . Cache-Control : max-age=0 . Upgrade-Insecure-Requests : 1 . User-Agent : Mozilla/5.0 ( X11 ; Linux x86_64 ) AppleWebKit/537.36 ( KHTML , like Gecko
Share the same DNS cache between event loop __EoT__ Currently , each event loop has its own DNS cache when using the DNS address resolver , the current DNS cache implementation is concurrent and can be easily shared between event loop to reduce memory consumption .
Setting a drain handler on a drained MessageProducer should call it __EoT__ Currently the ` MessageProducer # drainHandler ` only set the drain handler on the producer . It can happen that an application using the producer outside of the event loop sets a drain handler because ` MessageProducer # writeQueueFull ( ) ` returned true and concurrently the producer has been fully refund from all its credits before the drain handler is set : `` ` if ( producer.writeQueueFull ( ) ) { // Fully refund in the mean time , drain handler wo n't be called at all producer.drainHandler ( v - > { ... } ) ; } `` ` When setting a drain handler on a producer we should call it when the queue is in drained state .
Serialize messages sent to the connection in the order of the synchronization monitor __EoT__ motivation : currently the ` ConnectionBase ` class does not serialize the messages written with ` writeToChannel ` to the underlying channel when a message is written outside of the event loop followed by a message written from the event loop thread . This can cause out of order issues when ordering is assumed by the Vert.x code using ` ConnectionBase ` , for instance calling ` HttpClientRequest # end ( ) ` outside of the event loop sends an last ` HttpContent ` message to the channel then release the connection to the pool ( with pipelining ) , this connection might be provided then to a waiter that uses it and send pipelined messages , e.g an ` HttpRequest ` message . changes : change the implementation of ` writeToChannel ` and write the message to the channel when the current thread is the event loop or there are no asynchronous message _write in progress_ otherwise a write task is scheduled causing further messages to be scheduled as well . Two sequential calls to ` writeToChannel ` ( the method is synchronized ) will
Options generated converter should be package private __EoT__ There is no value to have the currently generated converter to be public classes as they are meant to be used by data objects .
KeyStoreHelper just support PKCS8 , Not support RSA private key __EoT__ ` public PrivateKey loadPrivateKey ( ) throws Exception { if ( keyValue == null ) { throw new RuntimeException ( `` Missing private key path '' ) ; } byte [ ] value = loadPems ( keyValue.get ( ) , `` **PRIVATE KEY** '' ) .get ( 0 ) ; KeyFactory rsaKeyFactory = KeyFactory.getInstance ( `` RSA '' ) ; return rsaKeyFactory.generatePrivate ( new PKCS8EncodedKeySpec ( value ) ) ; } `
Server Idle timeout does not apply to connection that are HTTP/1.x / H2C ambiguous __EoT__ motivation : currently when a client connects and has not sent enough data to distinguish between an HTTP/1.x or H2C protocol , the server idle timeout does not apply . change : configure the idle timeout handler to support this case
Log4j2 varargs parameters not logged anymore as list __EoT__
Provide an exception handler on HttpServer and NetServer to process uncaught connection errors __EoT__ motivation : currently the ` HttpServer ` forwards connection errors to the ` HttpConnection ` associated with the channel . It happens that the channel can fail before an ` HttpConnection ` is created , e.g SSL handshake failure . Application can have an interest to handle such failures for auditing purposes . In addition an existing internal handler already exists for testing purposes . The same can be done for ` NetServer ` . changes : add an exception handler on ` HttpServer ` to process channel errors before an ` HttpConnection ` is created . Make sure also that ` HttpConnection ` is created after the SSL handshake for HTTP/1 as it was for HTTP/2 due to ALPN ( the ALPN negotiation defers the creation of ` HtppConnection ` after the SSL handshake when the negotiated protocol is determined ) , which implements a consistent behavior . The same for ` NetServer ` .
Expose AsyncMap keys , values and entries __EoT__ Currently , AsyncMap lets you get/put/remove/replace entries asynchronously . In some cases , you also need the ability to get the keys , values or entries ( see @ cescoffier 's comment in https : //github.com/vert-x3/vertx-infinispan/issues/35 # issuecomment-308135648 )
overriding clusterHost and clusterPort on start __EoT__ allow overriding cluster host and post in launcher by beforeStartingVertx ( )
RecordParser implement ReadStream < Buffer > __EoT__ That way we can trivially pump files or other ReadStream sources through it . pump ( asyncFile , recordParser )
Allow to set null handlers on Http ( Client/Server ) ( Request/Response ) objects after completion __EoT__ motivation : setting an handler on these objects after they are ended will throw an exception to signal an error , however it can be desirable to set a null handler after completion ( for instance stopping a pump will set null handlers ) and in this situation we should be more tolerant and accept setting null handlers . changes : update various handler setter method to accept null values after completion .
Vertx deploys a Verticle class __EoT__ It would be nice to have a ` Vertx # deployVerticle ( C < ? extends Verticle , ... ) ` so one can deploy a class without using classloading
Vertx deploys a Verticle instances __EoT__ It would be nice to have a ` Vertx # deployVerticle ( Supplier < Verticle > , ... ) ` pretty much like ` Vertx # deployVerticle ( Verticle , ... ) ` but that is able to handle multiple instances
Deploy verticles with a supplier or a class __EoT__ Fixes # 1953 , fixes # 1952
WebSocket request options not honored __EoT__ `` ` java HttpClient client = vertx.createHttpClient ( new HttpClientOptions ( ) ) ; RequestOptions options = new RequestOptions ( ) .setHost ( `` ws.cex.io '' ) .setPort ( 443 ) .setSsl ( true ) .setURI ( `` /ws '' ) ; client.websocket ( options , ws - > { } ) ; `` ` Connection fails with because HTTP upgrade request is sent as clear text .
Vertx deploys a Verticle instances __EoT__ It would be nice to have a ` Vertx # deployVerticle ( Supplier < Verticle > , ... ) ` pretty much like ` Vertx # deployVerticle ( Verticle , ... ) ` but that is able to handle multiple instances
JSON message codecs creates unnecessary intermediate String __EoT__ ` JsonObjectMessageCodec ` and ` JsonArrayMessageCodec ` use intermediate ` String ` for encoding and decoding . They should directly encode to and decode from ` Buffer ` .
remove hazelcast workaround ( or at least the comment , that indicate it as a workaround ) __EoT__ Hi ! Issue https : //github.com/hazelcast/hazelcast/issues/5220 had been closed in October , we should upgrade to the latest stable build 3.5.4 ( http : //hazelcast.org/download/ ) . see https : //github.com/vert-x3/vertx-hazelcast/blame/master/pom.xml # L44 and then we can remove the workaround here : https : //github.com/eclipse/vert.x/blob/master/src/main/java/io/vertx/core/impl/VertxImpl.java # L431 kind regards Gabriel
Missmatch between documentation and implementation for LocalMap __EoT__ The documentation of LocalMap states : The map only allows immutable keys and values in the map , OR certain mutable objects such as { @ link io.vertx.core.buffer.Buffer } https : //github.com/eclipse/vert.x/blob/master/src/main/java/io/vertx/core/shareddata/LocalMap.java However the implementation in : https : //github.com/eclipse/vert.x/blob/master/src/main/java/io/vertx/core/shareddata/impl/Checker.java Has only a whitelist of allowed Types . Immutable objects are refused . Not sure whether this is an implementation or documentation problem .
HttpClientResponseImpl doesnt log when no handler is set __EoT__ When HttpClientResponseImpl # handleException is called while treating a http response , if an handler was not set , the exception is completely hidden from the user . Please compare ` io.vertx.core.http.impl.HttpClientRequestBase # handleException ` `` ` public void handleException ( Throwable t ) { synchronized ( getLock ( ) ) { cancelOutstandingTimeoutTimer ( ) ; exceptionOccurred = t ; if ( exceptionHandler ! = null ) { exceptionHandler.handle ( t ) ; } else { log.error ( t ) ; } } } `` ` with ` io.vertx.core.http.impl.HttpClientResponseImpl # handleException ` `` ` void handleException ( Throwable e ) { synchronized ( conn ) { if ( exceptionHandler ! = null ) { exceptionHandler.handle ( e ) ; } } } `` ` please see this repo for a test case : https : //github.com/j040p3d20/vertx-response-handler-test In our case , after the body handler has completed we continue with another future to do more work but there is a nullpointer exception and we dont reach that code and couldnt understand why because there was no trace of the exception anywhere . Other than this , thank you for the great work
Vertx.clusteredVertx ( ) handler not called if can not bind to address __EoT__ When starting clustered vetx instance : `` ` java Vertx.clusteredVertx ( new VertxOptions ( ) .setClustered ( true ) .setClusterHost ( `` 127.0.0.1 '' ) .setClusterPort ( 9999 ) , result - > { System.out.println ( `` Cluster started '' ) ; } ) ; `` ` if it can not bind to the address it prints the exception : `` ` io.vertx.core.impl.VertxImpl SEVERE : Failed to start event bus java.net.BindException : Address already in use at sun.nio.ch.Net.bind0 ( Native Method ) at sun.nio.ch.Net.bind ( Net.java:433 ) at sun.nio.ch.Net.bind ( Net.java:425 ) at sun.nio.ch.ServerSocketChannelImpl.bind ( ServerSocketChannelImpl.java:223 ) at sun.nio.ch.ServerSocketAdaptor.bind ( ServerSocketAdaptor.java:74 ) at io.netty.channel.socket.nio.NioServerSocketChannel.doBind ( NioServerSocketChannel.java:125 ) at io.netty.channel.AbstractChannel $ AbstractUnsafe.bind ( AbstractChannel.java:485 ) at io.netty.channel.DefaultChannelPipeline $ HeadContext.bind ( DefaultChannelPipeline.java:1089 ) at io.netty.channel.AbstractChannelHandlerContext.invokeBind ( AbstractChannelHandlerContext.java:440 ) at io.netty.channel.AbstractChannelHandlerContext.bind ( AbstractChannelHandlerContext.java:425 ) at io.netty.channel.DefaultChannelPipeline.bind ( DefaultChannelPipeline.java:903 ) at io.netty.channel.AbstractChannel.bind ( AbstractChannel.java:198 ) at io.netty.bootstrap.AbstractBootstrap $ 2.run ( AbstractBootstrap.java:348 ) at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks ( SingleThreadEventExecutor.java:358 ) at io.netty.channel.nio.NioEventLoop.run ( NioEventLoop.java:357 ) at io.netty.util.concurrent.SingleThreadEventExecutor $ 2.run ( SingleThreadEventExecutor.java:112 ) at java.lang.Thread.run ( Thread.java:745 ) `` ` and the result handler is never called . The problem seems to be in `
DeliveryOptions should have a toJson ( ) method __EoT__ While the ` toJson ( ) ` method on a data object is optional IMHO the 'vertx-provided ' data objects should be feature-complete by default and contain this method . Also when referring to the service-proxies documentation ( section on Proxy creation ) : > Generally , service interface contains a createProxy static method to create the proxy . But this is not required But then this code leads to an error in code generation : `` ` java static MyService createProxy ( Vertx vertx , String address , DeliveryOptions options ) { return ProxyHelper.createProxy ( MyService.class , vertx , address , options ) ; } `` ` Error : `` ` error : Could not generate model for createProxy ( io.vertx.core.Vertx , java.lang.String , io.vertx.core.eventbus.DeliveryOptions ) : type io.vertx.core.eventbus.DeliveryOptions does not have a valid 'public JsonObject toJson ( ) ' method . static MyService createProxy ( Vertx vertx , String address , DeliveryOptions options ) { ^ `` ` If agreeing with this change , I 'll create a PR .
A couple of fixes on http exception handler called on close __EoT__ Make the ` HttpServerResponse # exceptionHandler ` is called when the response is closed before the end of the stream . Avoid the ` HttpClientRequest # exceptionHandler ` to be notified twice when connection is closed .
Calling ServerWebSocket reject is documented to return a 404 , but returns 502 instead __EoT__ ` ServerWebSocket.reject ( ) ` is [ documented ] ( http : //vertx.io/docs/apidocs/io/vertx/core/http/ServerWebSocket.html # reject -- ) to return a HTTP 404 , but we observe that it returns a 502 instead , and [ the source code ] ( https : //github.com/eclipse/vert.x/blob/master/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java # L829 ) indicates 502 as well : if ( ! ws.isRejected ( ) ) { // ... . } else { ch.writeAndFlush ( new DefaultFullHttpResponse ( HTTP_1_1 , BAD_GATEWAY ) ) ; } 404 seems better than 502 to me , but certainly the docs and code should agree , and I think ideally the ` reject ( ) ` should provide an obvious means of setting the status code .
HttpServerRequest exception handler is not called when the connection is closed __EoT__ ` HttpServerRequest ` extends ` ReadStream < Buffer > ` . When there is an ongoing file upload and the connection closes abruptly , the exception handler on the ` HttpServerRequest ` should be called to signal that the stream an error occured
FileSystem methods do not accept options __EoT__ I want to place an uploaded file at a certain location , replacing any file that may be present there . Unfortunately , ` FileSystem : :copy ` only accepts a ` from ` , ` to ` and ` handler ` , it does not allow me to pass Java 's ` CopyOptions ` . This means I have to perform 3 asynch calls ( check existence , remove and copy ) rather than a single one for my use case . Suggestion : add a way to specify additional file system options , or provide a ` replace ` and ` deleteIfExists ` method .
Http2Settings.hashCode ( ) does not conform to contract . __EoT__ Vertx Version -- 3.4.2 The implementation of ` Http2Settings.hashCode ( ) ` does not conform to the contract where if 2 instances return ` true ` from ` equals ` they must have the same hash code value . The primary issue is that it uses ` Object.hashCode ( ) ` as its base value . It also does not include a hash of ` headerTableSize ` in its value ( this property is checked by ` equals ` ) , though strictly speaking the contract does not require this . The following groovy script shows the issue ( the second assert fails ) : `` ` groovy import io.vertx.core.http.Http2Settings def settings1 = new Http2Settings ( ) def settings2 = new Http2Settings ( ) assert settings1.equals ( settings2 ) assert settings1.hashCode ( ) == settings2.hashCode ( ) `` `
Missing Test for AsyncMap < X , Buffer > in ClusterWideMapTest.java __EoT__ ClusterWideMapTest.java do n't have test method for ` AsyncMap < X , Buffer > `
Race condition in AsyncFileImpl writesOutstanding __EoT__ If an AsyncFileImpl is written to from a thread different to the context that created then the long counter writesOutstanding can get into an invalid state . This is because the counter is updated from both the caller 's thread and also on the context when a write is complete . Fix is to use an AtomicLong for writesOutstanding : https : //gist.github.com/purplefox/723fa69a1330fb4f4f74d4a5dd5e6658
H2C upgrade failure HTTP/1.x response should not be processed by the server handler __EoT__
Packet lost in Http1xOrHttp2Handler __EoT__ If we send an http request beginning with `` P '' ( i.e . a POST , PATCH or PUT ) split across two packets where the first packet has data length of 1 byte and the second packet contains the rest of the request , then the Http1xOrHttp2Handler reads the 1 byte packet , and then throws it away . When the second packet comes in it does not aggregate the 1 byte that it previously read with the second packet , resulting in the method being received as `` OST '' , `` ATCH '' , or `` UT '' . A workaround is to disable the Http1xOrHttp2Handler with : ` System.setProperty ( `` vertx.disableH2c '' , `` true '' ) ; ` Reproducer : ~~~~ @ Test public void test1BytePost ( ) throws Exception { // The test will pass if we disable the http2 decoder : // System.setProperty ( `` vertx.disableH2c '' , `` true '' ) ; CountDownLatch latch1 = new CountDownLatch ( 1 ) ; server.requestHandler ( req - > { assertEquals ( `` POST '' , req.rawMethod ( ) ) ; latch1.countDown ( ) ; } ) ;
Configure file resolver caching per Vertx instance __EoT__ motivation : Currently Vertx file resolver caching is configured globally . It is desirable to have a finer grained configuration per Vertx instance instead of a global static initialization that is defined for all Vertx instances of the JVM at the JVM initialization time . changes : Provide a new VertxOption that configures the file resolver caching . The default value is ` true ` unless the system property ` vertx.disableFileCaching ` is set .
Fix the CompletionHandler in AsyncFileImpl # writeInternal __EoT__ `` ` public void failed ( Throwable exc , Object attachment ) { if ( exc instanceof Exception ) { context.runOnContext ( ( v ) - > handler.handle ( Future.succeededFuture ( ) ) ) ; } else { log.error ( `` Error occurred '' , exc ) ; } } `` ` should be a failed future , a test should be added
use generics to construct cluster manager __EoT__ A small modification that uses generics and the vararg param
Faster json parsing __EoT__ Motivation : We can speed up json parsing provide in Buffer . In fact , Jackson is a bit more efficient when the parsing is based on byte [ ] or InputStream ( [ Jackson-Performance ] ( https : //github.com/FasterXML/jackson-docs/wiki/Presentation : -Jackson-Performance ) ) . In addition , this will reduce intermediate String allocation . We can use the underlying netty ByteBuf to achieve this . Modification : We need to add a method in Json to be able to decodeValue from Buffer . And then we can modify toJsonObject and toJsonArray implementation in Buffer . Result : Better performance for json parsing based on Buffer .
Faster json parsing __EoT__ Motivation : We can speed up json parsing provide in Buffer . In fact , Jackson is a bit more efficient when the parsing is based on byte [ ] or InputStream ( [ Jackson-Performance ] ( https : //github.com/FasterXML/jackson-docs/wiki/Presentation : -Jackson-Performance ) ) . In addition , this will reduce intermediate String allocation . We can use the underlying netty ByteBuf to achieve this . Modification : We need to add a method in Json to be able to decodeValue from Buffer . And then we can modify toJsonObject and toJsonArray implementation in Buffer . Result : Better performance for json parsing based on Buffer .
Faster json parsing __EoT__ Motivation : We can speed up json parsing provide in Buffer . In fact , Jackson is a bit more efficient when the parsing is based on byte [ ] or InputStream ( [ Jackson-Performance ] ( https : //github.com/FasterXML/jackson-docs/wiki/Presentation : -Jackson-Performance ) ) . In addition , this will reduce intermediate String allocation . We can use the underlying netty ByteBuf to achieve this . Modification : We need to add a method in Json to be able to decodeValue from Buffer . And then we can modify toJsonObject and toJsonArray implementation in Buffer . Result : Better performance for json parsing based on Buffer .
Faster json parsing __EoT__ Motivation : We can speed up json parsing provide in Buffer . In fact , Jackson is a bit more efficient when the parsing is based on byte [ ] or InputStream ( [ Jackson-Performance ] ( https : //github.com/FasterXML/jackson-docs/wiki/Presentation : -Jackson-Performance ) ) . In addition , this will reduce intermediate String allocation . We can use the underlying netty ByteBuf to achieve this . Modification : We need to add a method in Json to be able to decodeValue from Buffer . And then we can modify toJsonObject and toJsonArray implementation in Buffer . Result : Better performance for json parsing based on Buffer .
Extend VertxLifecycleHooks to support shutdown __EoT__ The VertxLifecycleHooks class does not notify the ` Launcher ` when the ` vertx ` instance is shutdown . We should add ( ideas ) : * ` beforeStoppingVertx ` - called during the ` close ` method of vert.x ( CloseHook ) * ` afterStoppingVertx ` - called once vert.x has been closed
HttpClientRequest handle correctly Buffers with a readerIndex > 0 __EoT__ We are using code similar to [ example ] ( https : //github.com/vert-x3/vertx-examples/blob/master/core-examples/src/main/java/io/vertx/example/core/http/proxy/Proxy.java ) . And IndexOutOfBoundsException was observed . After debugging for a while I found a reason of the problem . In proxy code we have something like : `` ` java public void processRequest ( HttpServerRequest request ) { HttpClientRequest destRequest = ... request.handler ( destRequest : :write ) ; ... } `` ` In file ` HttpClientRequestImpl ` there is a code : `` ` java void write ( ByteBuf buf , boolean end ) { ... CompositeByteBuf pending ; ... pending.addComponent ( buff ) .writerIndex ( pending.writerIndex ( ) + buff.writerIndex ( ) ) ; ... } `` ` And if ` buff ` has ` readerIndex ` not equal to 0 then call to ` writerIndex ` fails with reasonable IndexOutOfBoundsException . Current workaround is using ` Buffer.slice ( ) ` before passing buffer read by http server to http client . But I think that buffers with non 0 ` readerIndex ` should be handled properly by ` HttpClientRequestImpl ` .
HttpClient does not use HTTP proxy when client options ssl=true overridden by request options ssl=false __EoT__ Hello , I am trying to use the http client in order to access several restful apis through my proxy . Some of the api providers use https and some http , therefore I configured the http client to use ssl . When doing so , the proxy settings is completely ignored when attempting to connect to a non https api . The following is a simple reproducer : `` ` java import io.vertx.core.Vertx ; import io.vertx.core.http.HttpClient ; import io.vertx.core.http.HttpClientOptions ; import io.vertx.core.http.HttpMethod ; import io.vertx.core.net.ProxyOptions ; public class Reproducor { public static void main ( String [ ] args ) { Vertx v = Vertx.vertx ( ) ; HttpClient c = v.createHttpClient ( new HttpClientOptions ( ) .setProxyOptions ( new ProxyOptions ( ) .setHost ( `` aaaaa '' ) .setPort ( 5555 ) ) .setSsl ( true ) ) ; c.requestAbs ( HttpMethod.GET , `` http : //ifconfig.co/ip '' , response - > { response.bodyHandler ( body - > { String str = body.getString ( 0 , body.length ( ) ) ; System.out.println ( str ) ; } ) ; } ) .end
HttpClient does not remove established HTTP/2 connection when the channel becomes inactive __EoT__ Hi , I 'm working on a project , where I have two Vert.x applications which communicate with each other using REST . In one application I 'm running an HttpServer and in the other an HttpClient , which connects directly using HTTP/2 . When the server crashes , there is an unhandled `` an existing connection was closed by the remote host '' exception in the client , but the connection does not seem to get removed from the Http2Pool . Thus when the client application tries to make another request , the request.end ( ) method succeeds without any exception and the client application never gets a response or an exception . I 'm using Vert.x 3.4.1 and JDK 8 Update 121 . I have created two demo Maven projects that can be used to reproduce the problem : [ VertxHttpClientProblem.zip ] ( https : //github.com/eclipse/vert.x/files/895890/VertxHttpClientProblem.zip ) Here is the procedure : 1 . Run the server using : java -jar http-server-0.1-SNAPSHOT-combined.jar 2 . Run the client using : java -jar http-client-0.1-SNAPSHOT-combined.jar 3 . Press enter in the client to make the first request .
EventBus interceptor does not get message body when clustered __EoT__ From [ David Klotz ] ( https : //groups.google.com/d/msg/vertx/7otR0fsI6_8/E4ZdC0usCQAJ ) on the forum `` ` Hi , I 'm currently a bit confused by the differing behavior of event bus interceptors in a non-clustered and a clustered vert.x environment ( currently on 3.2.1 , can test again in 3.4.x if something in that area has changed since then ) . When run in a non-clustered environment , the interceptor has access to both the message body and the message headers , but when run in a clustered environment , the message body is always null . Is this behavior by design or a bug ? Cheers , David `` `
Calling resume in an AsyncFile endHandler will cause a new call to the endHandler __EoT__
FailedFuture should always have a cause even when the provided cause is null __EoT__ Since https : //vertx.ci.cloudbees.com/job/vert.x3-core/5477/ `` ` java.lang.NullPointerException : null at io.vertx.test.core.FutureTest.testCreateFailedWithNullFailure ( FutureTest.java:242 ) `` `
Can not process buffer in worker NetClient on channel inactive __EoT__ In the new version 3.4.1 , I get the following exception when I send an email through an non-shared client and a AWS SES server : `` ` java.lang.NullPointerException io.vertx.core.net.impl.NetClientImpl $ 1.handleMsgReceived ( NetClientImpl.java:197 ) io.vertx.core.net.impl.VertxNetHandler.lambda $ channelRead $ 0 ( VertxNetHandler.java:64 ) io.vertx.core.impl.ContextImpl.lambda $ wrapTask $ 2 ( ContextImpl.java:335 ) io.vertx.core.impl.TaskQueue.lambda $ new $ 0 ( TaskQueue.java:60 ) java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) java.lang.Thread.run ( Thread.java:745 ) `` ` I think the problem is this : in the line 197 of NetClientImpl , the attribute _conn_ can be null because of the method _removeConnection_ has been called in the VertxNetHandler , so it causes a null pointer exception .
Race condition in Future setHandler/completion between threads __EoT__ In one of our projects we have encountered a problem with CompositeFuture.all ( ) when running `` outside '' of a verticle ( in junit tests ) . Here is a sample program : `` ` java import io.vertx.core.CompositeFuture ; import io.vertx.core.Future ; import io.vertx.core.Vertx ; import java.util.concurrent.CountDownLatch ; import java.util.concurrent.ExecutionException ; import java.util.concurrent.TimeUnit ; import java.util.concurrent.atomic.AtomicInteger ; public class CompositeFutureTest { private static final int NUMBER_OF_LOOPS = 10_000 ; private static final Vertx vertx = Vertx.vertx ( ) ; private static boolean testCompositeFuture ( ) throws InterruptedException , ExecutionException { CountDownLatch finished = new CountDownLatch ( 1 ) ; AtomicInteger atomicCounter = new AtomicInteger ( 0 ) ; for ( int i = 0 ; i < NUMBER_OF_LOOPS ; i++ ) { Future < Void > future1 = Future.future ( ) ; Future < Void > future2 = Future.future ( ) ; vertx.runOnContext ( future1 : :complete ) ; vertx.runOnContext ( future2 : :complete ) ; CompositeFuture.all ( future1 , future2 ) .setHandler ( ar - > { if ( ar.succeeded ( ) ) { if ( atomicCounter.incrementAndGet ( ) == NUMBER_OF_LOOPS ) { finished.countDown ( ) ; } } }
Timers should be cancellable until they are fired __EoT__ motivation : timers are scheduled by the event loop and executed on its context , during the time between a timer callback is scheduled and its actual execution , the timer can not be cancelled although it could still be . Such situation can happen easily with worker contexts where timer tasks can be delayed due to blocking . change : uses an atomic boolean ` cancelled ` to allow a timer to be cancelled when it has been scheduled for execution on the context . The atomic boolean guarantees the visibility across threads and also the timer can be marked as cancelled once .
Better failure logging when handleMessage failes __EoT__ In ` eclipse/vert.x/src/main/java/io/vertx/core/eventbus/impl/HandlerRegistration.java ` in method ` deliver ` there is a catch block which could be improved slightly . It has been advantageous to me to see the address of the message handler which has failed ( for whatever reason ) `` ` } catch ( Exception e ) { log.error ( `` Failed to handleMessage `` , e ) ; metrics.endHandleMessage ( metric , e ) ; throw e ; `` ` `` ` if ( message ! = null ) { log.error ( `` Failed to handleMessage ' '' + message.address ( ) + `` ' '' , e ) ; } else { log.error ( `` Failed to handleMessage `` , e ) ; } `` ` So now if my event handler `` service.releaseaccount '' has a failure I am told so by name , which could be quite useful
Add `` computeIf* '' methods to LocalMap interface __EoT__ These are very useful additions to the Java Map interface which it would be nice to see added to LocalMap ( they greatly simplify concurrent population of the map ) .
Add `` computeIf* '' methods to LocalMap interface __EoT__ These are very useful additions to the Java Map interface which it would be nice to see added to LocalMap ( they greatly simplify concurrent population of the map ) .
Coffeescript __EoT__ I have added Coffeescript to the RhinoVerticle . Added a couple of examples using Rhino load method and the commonjs require method . Unit tests pass after the change
Shared worker executor serializes taks even if ordered = false __EoT__
Customization of Netty `` initialBufferSize '' __EoT__ Would it be possible to add a new configuration options in both HttpClient and HttpServer to allow to customize the initial size ( 128b default ) of the parsing buffer of Netty HttpObjectDecoder . I see that when handling an high load on my application with requests or responses with multiple headers , the CPU is mostly consumed by netty `` AppendableCharSequence.append '' , which has to always grow and so has to copy char arrays . `` ` Stack Trace Sample Count Percentage ( % ) io.netty.util.internal.AppendableCharSequence.append ( char ) 2 160 6,472 io.netty.handler.codec.http.HttpObjectDecoder $ HeaderParser.process ( byte ) 2 160 6,472 io.netty.buffer.AbstractByteBuf.forEachByteAsc0 ( int , int , ByteBufProcessor ) 2 160 6,472 io.netty.buffer.AbstractByteBuf.forEachByte ( ByteBufProcessor ) 2 160 6,472 io.netty.handler.codec.http.HttpObjectDecoder $ HeaderParser.parse ( ByteBuf ) 2 160 6,472 io.netty.handler.codec.http.HttpObjectDecoder.readHeaders ( ByteBuf ) 2 141 6,415 io.netty.handler.codec.http.HttpObjectDecoder.decode ( ChannelHandlerContext , ByteBuf , List ) 2 141 6,415 `` ` Methods involved in vertx : `` ` HttpServerImpl.configureHttp1 - > HttpRequestDecoder `` ` `` ` ConnectionManager $ ChannelConnector.applyHttp1xConnectionOptions - > HttpClientCodec `` `
WorkerExecutor must order tasks on the current Context and not on itself __EoT__
WorkerExecutor callback should run on caller context __EoT__ Currently it runs on the context which created the WorkerExecutor
Load the rotate option from /etc/resolv.conf on Linux __EoT__
New HttpServerResponse endHandler to be notified when the HttpServerResponse is disposed __EoT__ Motivation : currently the ` HttpServerResponse # closeHandler ` is called only if the response is closed abruptly for HTTP/1 and is called whenever the corresponding stream closes for HTTP/2 . The behavior is not consistent and also it seems that a new ` endHandler ` that will be always called to allow cleanup after the response is disposed in a consistent manner . Changes : A new response end handler is added and it is called whenever the current ` HttpServerResponse ` becomes unused , wether it is on purpose ( i.e calling response ` end ( ) ` method ) or because the transport ( connection for HTTP/1.x and stream for HTTP/2 ) is closed .
Round robin dns server selection for hostname resolution __EoT__ Motivation : currently the dns resolver is configured to use the first server from the list and the others for failover . By using instead a rotational server list we can provide round robin . Changes : provide configuration to configure the dns server list to be rotational for dns server selection
Remove unnecessary WriteStream sub types __EoT__ Motivation : A few _synthetic_ type extending ` WriteStream ` have been introduced because code generation only supported type variables as type argument declarations . Since 3.4 we removed that limitation and now we can remove these useless types : ` PacketWriteStream ` so far . Change : Removal of ` io.vertx.core.datagram.PacketWriteStream `
Remove Netty 's DNS codec fork and reuse Netty 's DNS codec in DnsClient __EoT__
New HttpServerResponse endHandler to be notified when the HttpServerResponse is disposed __EoT__ Motivation : currently the ` HttpServerResponse # closeHandler ` is called only if the response is closed abruptly for HTTP/1 and is called whenever the corresponding stream closes for HTTP/2 . The behavior is not consistent and also it seems that a new ` endHandler ` that will be always called to allow cleanup after the response is disposed in a consistent manner . Changes : A new response end handler is added and it is called whenever the current ` HttpServerResponse ` becomes unused , wether it is on purpose ( i.e calling response ` end ( ) ` method ) or because the transport ( connection for HTTP/1.x and stream for HTTP/2 ) is closed .
Add a Future # orElse and AsyncResult # orElse __EoT__ Motivation : a recent contribution added ` Future # recover ( Function < Throwable , Future < T > ) ` method , similar to the ` Future # compose ( Function < T , Future < U > > ) ` . ` compose ` has a synchronous version : ` Future # map ( Function < T , U > ) ` . ` Future # map ( U ) ` , ` recover ` currently does not have one . Changes : added an ` orElse ` method that is the synchronous version of ` recover ` : ` orElse ( Function < Throwable , T > ` / ` orElse ( T ) ` . This method is added to ` AsyncResult ` and ` Future ` like ` map ` is .
Future # future ( Handler < Future < T > handler ) method to future creation in an expression __EoT__ Allows to write an expression : `` ` return Future.future ( f - > server.listen ( 8080 , f ) ) ; `` ` instead of the three statements : `` ` Future < Void > fut = Future.future ( ) ; server.listen ( 8080 , fut ) ; return fut ; `` `
Future < T > extends Handler < AsyncResult < T > > __EoT__ Motivation : It is actually possible to turn a ` Future < T > ` into an ` Handler < AsyncResult < T > > ` using ` Future # completer ( ) ` method . This is actually the polyglot method to achieve it as ` AsyncResult < T > ` might not be mapped correctly sometimes ( like in JS or Ruby ) . The implementations of ` Future ` actually implements ` Handler < AsyncResult < T > > ` and return ` this ` in the ` completer ( ) ` method . When using java-ish languages like Java , Kotlin or Groovy , it should be possible to use directly the represented ` Future ` type directly as an ` Handler < AsyncResult > ` . Resolution : This patch makes ` Future < T > ` extend ` Handler < AsyncResult < T > > ` ( in addition of ` AsyncResult < T > ` ) and the ` handle ( AsyncResult < T > ) ` is annotated with ` @ GenIgnore ` .
Future fail/complete returns boolean instead of throwing an IllegalStateException __EoT__ # # Motivation Future completion methods throw an ` IllegalStateException ` when the future is already completed . Vert.x itself does not rely on this behavior . When a future might be completed several times ( for instance a close or a timeout ) , Vert.x takes the necessary steps with the idiom , in order to propagate the event correctly . `` ` if ( ! f.isComplete ( ) ) { f.complete ( ) ; } `` ` This change allows to simplify the existing code and use complete the future directly and keep the ability to remain aware of whether the Future was actually completed by the method call or not . # # Changes Future completion returns a boolean indicating whether the Future was completed or not by the method call instead of throwing an exception .
BlockedThreadChecker treats max execution time as if it is in nanos , though Java API docs claim it to be in millis __EoT__ Looking at the JavaDocs for [ ` Vertx.createSharedWorkerExecutor ` ] ( http : //vertx.io/docs/apidocs/io/vertx/rxjava/core/Vertx.html # createSharedWorkerExecutor-java.lang.String-int-long- ) , it appears that the max execution time for a task is measured in milliseconds , but [ ` BlockedThreadChecker ` ] ( https : //github.com/eclipse/vert.x/blob/master/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java # L50 ) compares this value to ` VertxThread.startTime ( ) ` that returns a value in nanoseconds , and indeed , ` BlockedThreadChecker ` divides that value by ` 1000000 ` to get at a milliseconds value . All the other entities in the chain from ` Vertx.createSharedWorkerExecutor ` to ` BlockedThreadChecker ` do n't document the meaning of the max execution time value , so I 'm not sure which is correct , and I 've also failed to locate where that value is being acted upon other than to issue warnings to the logs .
NullPointer in sendToSubs __EoT__ Cloned from vert-x3/vertx-hazelcast # 52
NullPointer in sendToSubs __EoT__ Cloned from vert-x3/vertx-hazelcast # 52
Remove unecessary ReadStream sub types __EoT__ - ServerWebSocketStream - WebSocketStream - HttpServerRequestStream - NetSocketStream
Add JsonObject POJO mapping convenience methods __EoT__ Signed-off-by : Luke Hutchison < luke.hutch @ gmail.com >
HttpClient can use SSL/TLS per request __EoT__
HttpClient leaves connection open on websocket request failure ( resource leak ) __EoT__ When running this code : `` ` java Vertx vertx = Vertx.vertx ( ) ; vertx.createHttpServer ( ) .requestHandler ( req - > { req.response ( ) .setStatusCode ( 200 ) ; req.response ( ) .headers ( ) .set ( `` Connection '' , `` close '' ) ; req.response ( ) .end ( ) ; } ) .listen ( 44444 ) ; vertx.createHttpClient ( ) .websocket ( 44444 , `` localhost '' , `` / '' , ws - > { System.out.println ( `` WS Unexpectedly connected '' ) ; } , t - > { System.err.println ( `` WS Connection failed '' ) ; t.printStackTrace ( ) ; } ) ; `` ` Then end result is ` WS Connection failed ` ( as expected ) but ` netstat -natp|grep :44444 ` ( in Linux ) shows the connection is still ESTABLISHED . Only closing the java process ( naturally ) gets rid of the connection . For a regular GET request : `` ` java Vertx vertx = Vertx.vertx ( ) ; vertx.createHttpServer ( ) .requestHandler ( req - > { req.response ( )
Unable to start vert.x with exploded mode __EoT__ When running vert.x from CLI using command like : ` java -cp $ MY_CP start -id e8b0342b-7a65-495a-a58f-88071421e07c org.vertx.demo.SimpleVerticle -- launcher-class io.vertx.core.Launcher ` The application is refusing to start saying no command by name ` org.vertx.demo.SimpleVerticle ` .. but when I do start with same set of options via Launcher.main ( args ) form a custom main program from an IDE things run well . Using **vert.x v3.3.3** where $ MY_CP is custom classpath which has jars/classes directory etc. ,
NullPointer in sendToSubs __EoT__ Cloned from vert-x3/vertx-hazelcast # 52
Unable to start vert.x with exploded mode __EoT__ When running vert.x from CLI using command like : ` java -cp $ MY_CP start -id e8b0342b-7a65-495a-a58f-88071421e07c org.vertx.demo.SimpleVerticle -- launcher-class io.vertx.core.Launcher ` The application is refusing to start saying no command by name ` org.vertx.demo.SimpleVerticle ` .. but when I do start with same set of options via Launcher.main ( args ) form a custom main program from an IDE things run well . Using **vert.x v3.3.3** where $ MY_CP is custom classpath which has jars/classes directory etc. ,
Unable to start vert.x with exploded mode __EoT__ When running vert.x from CLI using command like : ` java -cp $ MY_CP start -id e8b0342b-7a65-495a-a58f-88071421e07c org.vertx.demo.SimpleVerticle -- launcher-class io.vertx.core.Launcher ` The application is refusing to start saying no command by name ` org.vertx.demo.SimpleVerticle ` .. but when I do start with same set of options via Launcher.main ( args ) form a custom main program from an IDE things run well . Using **vert.x v3.3.3** where $ MY_CP is custom classpath which has jars/classes directory etc. ,
NullPointer in sendToSubs __EoT__ Cloned from vert-x3/vertx-hazelcast # 52
AsyncFile drain handler should not be called after the file is closed __EoT__
HttpClient leaves connection open on websocket request failure ( resource leak ) __EoT__ When running this code : `` ` java Vertx vertx = Vertx.vertx ( ) ; vertx.createHttpServer ( ) .requestHandler ( req - > { req.response ( ) .setStatusCode ( 200 ) ; req.response ( ) .headers ( ) .set ( `` Connection '' , `` close '' ) ; req.response ( ) .end ( ) ; } ) .listen ( 44444 ) ; vertx.createHttpClient ( ) .websocket ( 44444 , `` localhost '' , `` / '' , ws - > { System.out.println ( `` WS Unexpectedly connected '' ) ; } , t - > { System.err.println ( `` WS Connection failed '' ) ; t.printStackTrace ( ) ; } ) ; `` ` Then end result is ` WS Connection failed ` ( as expected ) but ` netstat -natp|grep :44444 ` ( in Linux ) shows the connection is still ESTABLISHED . Only closing the java process ( naturally ) gets rid of the connection . For a regular GET request : `` ` java Vertx vertx = Vertx.vertx ( ) ; vertx.createHttpServer ( ) .requestHandler ( req - > { req.response ( )
HttpClient leaves connection open on websocket request failure ( resource leak ) __EoT__ When running this code : `` ` java Vertx vertx = Vertx.vertx ( ) ; vertx.createHttpServer ( ) .requestHandler ( req - > { req.response ( ) .setStatusCode ( 200 ) ; req.response ( ) .headers ( ) .set ( `` Connection '' , `` close '' ) ; req.response ( ) .end ( ) ; } ) .listen ( 44444 ) ; vertx.createHttpClient ( ) .websocket ( 44444 , `` localhost '' , `` / '' , ws - > { System.out.println ( `` WS Unexpectedly connected '' ) ; } , t - > { System.err.println ( `` WS Connection failed '' ) ; t.printStackTrace ( ) ; } ) ; `` ` Then end result is ` WS Connection failed ` ( as expected ) but ` netstat -natp|grep :44444 ` ( in Linux ) shows the connection is still ESTABLISHED . Only closing the java process ( naturally ) gets rid of the connection . For a regular GET request : `` ` java Vertx vertx = Vertx.vertx ( ) ; vertx.createHttpServer ( ) .requestHandler ( req - > { req.response ( )
Support map entry adder in data object converters __EoT__
Upgrade to Netty 4.1.6.Final __EoT__
Too long max headers results in empty reply instead of 400 response __EoT__
Allow to configure maxInitialLineLength and maxHeaderSize in the HttpClient __EoT__ like we do have on HttpServer
Incorrect HTTP-Version should be reported to the HttpClientRequest exceptionHandler __EoT__
Vert.x core library __EoT__ Produce a vert.x core library as part of the distribution . This can be used embedded in any Java application .
HTTP module __EoT__ Complete this . Remaining to do : 1 ) HTTPS 2 ) Cookies 3 ) Pipelining test currently commented out 4 ) Some missing tests , including : chaining methods , multiple connections , pause/resume 5 ) Write some examples including : Websockets , sendfile , POST/PUT example
A composite future join should fail with the cause of one of its components __EoT__
Improve HttpClientRequest reset support __EoT__ Currently we support ` HttpClientRequest # reset ( ) ` for HTTP/2 connections . The support could be extended to : - HTTP/1.x with keep-alive : close the current connection - HTTP/1.x with pipe-lining : wait until all pending responses have been received and then close connection - request not yet connected : the request has been queued waiting for a connection or perhaps it is triggered the creation of the connection , however the request should not be made anymore : simply put the connection back in the pool and let the pool find another request for this connection It is useful for supporting reverse proxies implementations with Vert.x : when the client of the proxy sends an entity and something wrong happens ( like an exception signed by the ` HttpServerRequest # exceptionHandler ` ) the corresponding ` HttpClientRequest ` can be reset . For HTTP/2 it is natively supported , for HTTP/1.x this means closing the connection ( and waiting for responses in case of pipelining ) . Having this behavior built-in the reset method for HTTP/1.1 makes easy to implement this for the proxy implementation .
JsonObject copy ( ) preserves LinkedHashMap __EoT__ JsonObject.copy ( ) method , create a new instance of JsonObject with HashMap and not with LinkedHashMap , changing the order of keys . If a verticle send a JsonObject throught EventBus , now others receive the same JsonObject with the same order of keys that was sent .
Remove @ Deprecated CompositeFuture # result ( int ) __EoT__
Http2Headers result of entries ( ) should not be cached __EoT__ If adding this test to Http2HeadersTest , it will fail `` ` Http2HeadersTest.java @ Test public void testAddAfterEntries ( ) { map.set ( `` foo '' , `` bar '' ) ; assertEquals ( map.entries ( ) .size ( ) , 1 ) ; map.set ( `` foo2 '' , `` bar2 '' ) ; assertEquals ( map.entries ( ) .size ( ) , 2 ) ; } `` `
Context # executeBlocking does not log blocked threads __EoT__
MessageConsumer close hook reports an IllegalStateException on the Context exception handler __EoT__ Since version 3.3.3 undeploying a Verticle which registered an event-bus handler throws the following exception : `` ` java.lang.IllegalStateException : Result is already complete : succeeded at io.vertx.core.impl.FutureImpl.checkComplete ( FutureImpl.java:164 ) at io.vertx.core.impl.FutureImpl.complete ( FutureImpl.java:108 ) at io.vertx.core.impl.FutureImpl.handle ( FutureImpl.java:135 ) at io.vertx.core.impl.FutureImpl.handle ( FutureImpl.java:23 ) at io.vertx.core.eventbus.impl.EventBusImpl.lambda $ callCompletionHandlerAsync $ 2 ( EventBusImpl.java:340 ) at io.vertx.core.eventbus.impl.EventBusImpl $ $ Lambda $ 24/431454548.handle ( Unknown Source ) at io.vertx.core.impl.ContextImpl.lambda $ wrapTask $ 2 ( ContextImpl.java:316 ) at io.vertx.core.impl.ContextImpl $ $ Lambda $ 13/1360657223.run ( Unknown Source ) at io.netty.util.concurrent.AbstractEventExecutor.safeExecute ( AbstractEventExecutor.java:163 ) at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks ( SingleThreadEventExecutor.java:418 ) at io.netty.channel.nio.NioEventLoop.run ( NioEventLoop.java:440 ) at io.netty.util.concurrent.SingleThreadEventExecutor $ 5.run ( SingleThreadEventExecutor.java:873 ) at java.lang.Thread.run ( Thread.java:745 ) `` ` The problem seems to occur on applying the close-hook on an ` EventBusImpl.HandlerEntry ` . Here ` HandlerEntry.close ( ) ` is invoked with a completionHandler , which is handled successfully twice . The first time it is handled directly in ` HandlerEntry.close ( ) ` . The second time it is handled through the chain : `` ` HandlerEntry.close ( ) HandlerRegistration.unregister ( ) HandlerRegistration.doUnregister ( ) EventBus.removeRegistration ( ) EventBus.callCompletionHandlerAsync (
Too many log generation - LoadBalancer Heartbeat __EoT__ See [ [ vertx:36914 ] Too many log generation - LoadBalancer Heartbeat ] ( https : //groups.google.com/forum/ # ! topic/vertx/CF1qTX3Ak1E ) Connection is reset by client before we could determine if it 's HTTP 1 or 2 .
Unable to load multiple client certificates into PEM trust store __EoT__ If I try to load multiple client certificates for client authentication , only one of the certificates gets loaded . `` ` java PemTrustOptions trustStore = new PemTrustOptions ( ) ; File certDir = new File ( `` cert '' ) ; File clientCertsDir = new File ( certDir , '' clients '' ) ; Files.find ( clientCertsDir.toPath ( ) , 1 , ( Path path , BasicFileAttributes attrs ) - > { return path.getFileName ( ) .toString ( ) .endsWith ( `` .pem '' ) ; } ) .forEach ( certPath - > { log.info ( `` Adding cert `` +certPath ) ; trustStore.addCertPath ( certPath.toString ( ) ) ; } ) ; `` ` I have created pull request # 1612 that _should_ fix this issue . The certificates were all being loaded with the same name/alias into the keystore .
NetClient with SOCKS Proxy checks wrong hostname on upgradeToSsl ( ) __EoT__ When using a NetClient with SOCKS Proxy , the upgradeToSsl ( ) checks the ssl cert against the name of the proxy , not the name of the target server . I created a unit test that shows the issue by setting the proxy hostname to 127.0.0.1 and connecting to a server at localhost , this way it fails with `` No subject alternative names matching IP address 127.0.0.1 found '' . A unlikely usecase , however I got the error when trying to send a mail via smtp with starttls over TOR , which uses SOCKS5 to connect .
NetClient with SOCKS Proxy checks wrong hostname on upgradeToSsl ( ) __EoT__ When using a NetClient with SOCKS Proxy , the upgradeToSsl ( ) checks the ssl cert against the name of the proxy , not the name of the target server . I created a unit test that shows the issue by setting the proxy hostname to 127.0.0.1 and connecting to a server at localhost , this way it fails with `` No subject alternative names matching IP address 127.0.0.1 found '' . A unlikely usecase , however I got the error when trying to send a mail via smtp with starttls over TOR , which uses SOCKS5 to connect .
NetSocket implementation can redeliver the same buffer when paused __EoT__ The current NetSocket implementation accumulates received data when it is paused and does not clear the pending data when it is resumed . The pendingData field should be set to null when it is delivered to the application .
Using random port with HttpServer only works for first server . __EoT__ I am trying to setup multiple HttpServer instances listening on different random ports in my application using the port 0 method . The first one works , however subsequent ones do not and the actualPort ( ) method reports 0 . The same technique used with NetServer works as expected with each instance reporting a random port in actualPort ( ) ; Using Clement 's excellent starter app to reproduce . Change the start method to `` ` @ Override public void start ( ) { vertx.createHttpServer ( ) .requestHandler ( req - > req.response ( ) .end ( `` Hello Vert.x ! '' ) ) .listen ( 0 , res - > System.out.println ( `` Http Port `` + res.result ( ) .actualPort ( ) ) ) ; vertx.createHttpServer ( ) .requestHandler ( req - > req.response ( ) .end ( `` Hello Vert.x ! '' ) ) .listen ( 0 , res - > System.out.println ( `` Http Port `` + res.result ( ) .actualPort ( ) ) ) ; vertx.createNetServer ( ) .connectHandler ( req - > { } ) .listen ( 0 , res
Close the shared worker pools when closing Vertx __EoT__
Rethrow the RejectedExecutionException when a worker task is rejected __EoT__ so the caller of executeBlocking is notified
WriteStream javadoc improvements __EoT__ Looking at the API of WriteStream # drainHandler it says : > If the write queue is full , then the handler will be called when the write queue has been reduced to maxSize / 2 Implementations differ in the sense that they call it either **only once** the queue has been reduced or **every time** the queue has been reduced . This looks suspicious to me and I wonder what is correct . NetSocketImpl is calling the handler **every time** : `` ` private synchronized void callDrainHandler ( ) { if ( drainHandler ! = null ) { if ( ! writeQueueFull ( ) ) { drainHandler.handle ( null ) ; } } } `` ` MessageProducerImpl is calling the handler **only once** ( by setting it to null ) : `` ` private synchronized void doReceiveCredit ( int credit ) { /* ... . */ final Handler < Void > theDrainHandler = drainHandler ; if ( theDrainHandler ! = null & & credits > = maxSize / 2 ) { this.drainHandler = null ; vertx.runOnContext ( v - > theDrainHandler.handle ( null ) ) ; } } `` `
Remove KeyCertOptions limitation for OpenSSL __EoT__ The previous version of OpenSSL engine was restricted to use ` pem ` file format . Now the engine can use a generic ` KeyManagerFactory ` : https : //github.com/netty/netty/pull/5439 We can so support it .
Documentation example on 'Async coordination ' is incorrect __EoT__ The code sample in the paragraph [ ` Async coordination ` ] ( http : //vertx.io/docs/vertx-core/java/ # _async_coordination ) in the Vert.x Core java manual seems to be incorrect : `` ` java FileSystem fs = vertx.fileSystem ( ) ; Future < Void > fut1 = Future.future ( ) ; fs.createFile ( `` /foo '' , fut1.completer ( ) ) ; fut1.compose ( v - > { // When the file is created ( fut1 ) , execute this : Future < Void > fut2 = Future.future ( ) ; fs.writeFile ( `` /foo '' , Buffer.buffer ( ) , fut2.completer ( ) ) ; return fut2 ; } ) .compose ( v - > { // When the file is written ( fut2 ) , execute this : fs.move ( `` /foo '' , `` /bar '' , startFuture.completer ( ) ) ; } , // mark the start future as completed when all the chain has been completed , // or mark it as failed if any step fails . startFuture ) ; `` ` The text below is referring to a different code structure . I have n't
Documentation example on 'Async coordination ' is incorrect __EoT__ The code sample in the paragraph [ ` Async coordination ` ] ( http : //vertx.io/docs/vertx-core/java/ # _async_coordination ) in the Vert.x Core java manual seems to be incorrect : `` ` java FileSystem fs = vertx.fileSystem ( ) ; Future < Void > fut1 = Future.future ( ) ; fs.createFile ( `` /foo '' , fut1.completer ( ) ) ; fut1.compose ( v - > { // When the file is created ( fut1 ) , execute this : Future < Void > fut2 = Future.future ( ) ; fs.writeFile ( `` /foo '' , Buffer.buffer ( ) , fut2.completer ( ) ) ; return fut2 ; } ) .compose ( v - > { // When the file is written ( fut2 ) , execute this : fs.move ( `` /foo '' , `` /bar '' , startFuture.completer ( ) ) ; } , // mark the start future as completed when all the chain has been completed , // or mark it as failed if any step fails . startFuture ) ; `` ` The text below is referring to a different code structure . I have n't
Implement HTTP Proxy for non SSL HttpClient __EoT__ At the moment the HttpClient proxy configuration uses CONNECT for non SSL HttpClient and instead it should do a straight connection with a target requestURI , i.e `` ` client.get ( 80 , `` www.google.com '' , resp - > { } ) ; `` ` should be equivalent to : `` ` client.get ( 80 , `` the-proxy '' , `` http : //www.google.com '' , resp - > { } ) .host ( `` www.google.com:80 '' ) ; `` ` so we do have request like : `` ` GET http : //www.google.com HTTP/1.1 Host : www.google.com `` ` while the client connects to ` the-proxy ` host . Note : this does not affect ` NetClient ` that will always continue to create a tunnel using CONNECT
Proxying - Host header not formed properly __EoT__ While proxying though the Vertx HTTP client , the Host header that goes as a part of CONNECT request ( as only https targets are supported by Vert.x right now ) is not appropriate as defined in the spec . Host header should contain the host : port of the target server , but currently it is populated with that of proxy server . Thus , some proxy servers / web applications might dishonor the request due to this discrepancy . Reproducer is hard to implement , but below should explain the problem . Target url : https : //www.google.com Proxy server : proxyhost.com:8888 **Expected request at the proxy : ** CONNECT www.google.com:443 Host : www.google.com **Actual request at the proxy : ** CONNECT www.google.com:443 Host : proxyhost.com:8888 Spec : https : //www.w3.org/Protocols/rfc2616/rfc2616-sec14.html # sec14.23
Load the ndots value on linux from /etc/resolv.conf and allow a value of 0 __EoT__ I have issues to run a webserver connected to a redis server with Vert.x 3.3.2 in a docker environment . I get the following error : `` ` webserver | java.net.UnknownHostException : failed to resolve 'my-redis.home ' . Exceeded max queries per resolve 3 webserver | at io.vertx.core.dns.impl.fix.DnsNameResolverContext.finishResolve ( DnsNameResolverContext.java:435 ) webserver | at io.vertx.core.dns.impl.fix.DnsNameResolverContext.tryToFinishResolve ( DnsNameResolverContext.java:362 ) webserver | at io.vertx.core.dns.impl.fix.DnsNameResolverContext $ 2.operationComplete ( DnsNameResolverContext.java:160 ) webserver | at io.netty.util.concurrent.DefaultPromise.notifyListener0 ( DefaultPromise.java:518 ) webserver | at io.netty.util.concurrent.DefaultPromise.notifyListenersNow ( DefaultPromise.java:492 ) webserver | at io.netty.util.concurrent.DefaultPromise.notifyListenersWithStackOverFlowProtection ( DefaultPromise.java:431 ) webserver | at io.netty.util.concurrent.DefaultPromise.notifyListeners ( DefaultPromise.java:420 ) webserver | at io.netty.util.concurrent.DefaultPromise.setSuccess ( DefaultPromise.java:99 ) webserver | at io.vertx.core.dns.impl.fix.DnsQueryContext.setSuccess ( DnsQueryContext.java:197 ) webserver | at io.vertx.core.dns.impl.fix.DnsQueryContext.finish ( DnsQueryContext.java:180 ) webserver | at io.vertx.core.dns.impl.fix.DnsNameResolver $ DnsResponseHandler.channelRead ( DnsNameResolver.java:680 ) webserver | at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:348 ) webserver | at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:334 ) webserver | at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead ( AbstractChannelHandlerContext.java:326 ) webserver | at io.netty.handler.codec.MessageToMessageDecoder.channelRead ( MessageToMessageDecoder.java:102 ) webserver | at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:348 ) webserver | at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead ( AbstractChannelHandlerContext.java:334 ) webserver | at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead ( AbstractChannelHandlerContext.java:326 ) webserver | at io.netty.channel.DefaultChannelPipeline $ HeadContext.channelRead ( DefaultChannelPipeline.java:1320 ) webserver |
ns.upgradeToSsl fails hostname cert check __EoT__ When connecting with NetClient using upgradeToSsl ( which is for example used in mail STARTTLS ) , the cert name is matched against the resolved ip address , which fails . https : //gist.github.com/alexlehm/8b609f70c848453ab7da5b360b740db0
HTTP/1.x keepalive connections do n't clear the paused buffers at end __EoT__ Hello , In the latest releases of Vertx , 3.3.1 and 3.3.0 , the pausedChunk is now stored in ClientConnection . We see an issue with this when re-using an HttpClient and pausing to read the response . The pausedChunk will continue to get appended to with each new response body once the client hits its maxPoolSize and starts re-using connections . Before this did n't happen when it was stored on the HttpClientResponse . Is this intentional , meaning that an HttpClient is not meant to be re-used for pausing and reading multiple response bodies ? We created a simple runnable fat jar that demonstrates this here . `` ` https : //github.com/ef-labs/vertx-client-connection-test `` ` Thanks !
H2C direct duplicate IdleStateHandler when using idle timeout __EoT__
Let the user access the logger delegate and logger implementation __EoT__ This has been discussed on the mailing list . A user wants to be able to reconfigure some loggers programatically after the logging SPI has been initialized .
Proxy based http connections do not throw Proxy errors __EoT__ Http Client requesting via web proxy does not throw errors from the proxy server . Discussion : https : //groups.google.com/forum/ # ! topic/vertx/LialiWptlLQ Reproducer : `` ` public static void main ( String [ ] args ) { Vertx vertx = Vertx.vertx ( ) ; HttpClientOptions options = new HttpClientOptions ( ) ; ProxyOptions proxyOptions = new ProxyOptions ( ) ; proxyOptions.setHost ( `` www.google.com '' ) ; proxyOptions.setPort ( 80 ) ; options.setProxyOptions ( proxyOptions ) ; HttpClient client = vertx.createHttpClient ( options ) ; client.getAbs ( `` http : //vertx.io/ '' , resp - > System.out.println ( resp.getHeader ( `` Content-Length '' ) ) ) .exceptionHandler ( e - > System.out.println ( `` Got error : `` +e.getMessage ( ) ) ) .end ( ) ; try { new CountDownLatch ( 2 ) .await ( ) ; } catch ( InterruptedException e ) { } } `` `
Preserve order of enabled cipher suites and protocols for TCPSSLOptions __EoT__ Currently we use HashSet for storing the suites and protocols . Ordering set when building the options should be respected in the options and when creating the ssl engine .
AddressResolver should not bind locally __EoT__ The current ` AddressResolver ` binds locally a ` DatagramChannel ` which is not necessary ( and not always permitted ) via the ` DnsNameResolver ` implementation . The bind is used to obtain a channel and it is possible to create a ` DatagramChannel ` directly without the need to bind . The method ` newChannel ` in ` DnsNameResolver ` can be changed from : `` ` private ChannelFuture newChannel ( ChannelFactory < ? extends DatagramChannel > channelFactory , InetSocketAddress localAddress ) { Bootstrap b = new Bootstrap ( ) ; b.group ( executor ( ) ) ; b.channelFactory ( channelFactory ) ; final DnsResponseHandler responseHandler = new DnsResponseHandler ( ) ; b.handler ( new ChannelInitializer < DatagramChannel > ( ) { @ Override protected void initChannel ( DatagramChannel ch ) throws Exception { ch.pipeline ( ) .addLast ( DECODER , ENCODER , responseHandler ) ; } } ) ; ChannelFuture bindFuture = b.bind ( localAddress ) ; bindFuture.channel ( ) .closeFuture ( ) .addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { resolveCache.clear ( ) ; } } ) ; return
DNS search domains resolution __EoT__ Implements DNS search domains for the AddressResolver
Websocket deadlock during handshake __EoT__ Affects 3.2.1 `` ` '' test-akka.actor.default-dispatcher-1854 '' - Thread t @ 1934 java.lang.Thread.State : WAITING at java.lang.Object.wait ( Native Method ) - waiting on < 101efae > ( a io.netty.util.concurrent.PromiseTask ) at java.lang.Object.wait ( Object.java:502 ) at io.netty.util.concurrent.DefaultPromise.await ( DefaultPromise.java:255 ) at io.netty.util.concurrent.DefaultPromise.await ( DefaultPromise.java:33 ) at io.netty.util.concurrent.AbstractFuture.get ( AbstractFuture.java:32 ) at io.netty.channel.DefaultChannelPipeline.waitForFuture ( DefaultChannelPipeline.java:546 ) at io.netty.channel.DefaultChannelPipeline.remove ( DefaultChannelPipeline.java:333 ) at io.netty.channel.DefaultChannelPipeline.remove ( DefaultChannelPipeline.java:304 ) at io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker.handshake ( WebSocketServerHandshaker.java:176 ) at io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker.handshake ( WebSocketServerHandshaker.java:145 ) at io.vertx.core.http.impl.HttpServerImpl $ ServerHandler.lambda $ null $ 26 ( HttpServerImpl.java:570 ) at io.vertx.core.http.impl.HttpServerImpl $ ServerHandler $ $ Lambda $ 47/6681436.run ( Unknown Source ) at io.vertx.core.http.impl.ServerWebSocketImpl.connect ( ServerWebSocketImpl.java:257 ) at io.vertx.core.http.impl.ServerWebSocketImpl.writeFrame ( ServerWebSocketImpl.java:229 ) - locked < 150f83c > ( a io.vertx.core.http.impl.ServerConnection ) at io.vertx.core.http.impl.ServerWebSocketImpl.writeFinalTextFrame ( ServerWebSocketImpl.java:239 ) at com.tomas.test.actor.ConnectionHandlerActor.com $ tomas $ test $ actor $ ConnectionHandlerActor $ $ sendToClient ( ConnectionHandlerActor.scala:118 ) at com.tomas.test.actor.ConnectionHandlerActor.sendToClient ( ConnectionHandlerActor.scala:127 ) at com.tomas.test.actor.ConnectionHandlerActor.handleUnknownUser ( ConnectionHandlerActor.scala:131 ) at com.tomas.test.actor.ConnectionHandlerActor.preStart ( ConnectionHandlerActor.scala:70 ) at akka.actor.Actor $ class.aroundPreStart ( Actor.scala:470 ) at com.tomas.test.actor.ConnectionHandlerActor.aroundPreStart ( ConnectionHandlerActor.scala:40 ) at akka.actor.ActorCell.create ( ActorCell.scala:580 ) at akka.actor.ActorCell.invokeAll $ 1 ( ActorCell.scala:456 ) at akka.actor.ActorCell.systemInvoke ( ActorCell.scala:478 ) at akka.dispatch.Mailbox.processAllSystemMessages ( Mailbox.scala:279 ) at akka.dispatch.Mailbox.run ( Mailbox.scala:220 ) at
Add trace logging code __EoT__ So it 's easier for users to diagnose issues when running .
Websocket frame decoding fails for frames over 32kB __EoT__
Allow to set the metrics factory programmatically on MetricsOptions __EoT__ like the ClusterManager on VertxOptions
redeploy= '' ant_pattern '' incorrectly checks path in Windows __EoT__ As it is right now , passing something like ` -- redeploy= '' src/**/*.java '' ` has no effect on Windows machines , i.e . no file is ever matched against this pattern since the pattern tokenizer fails to break the pattern into tokens due to the fact that ` / ` is not a file separator on Windows . Rather than modifying either the tokenizer or the matching algorithm , a possible solution would be to store the patterns ( called includes , see ` io/vertx/core/impl/launcher/commands/Watcher.java ` line ` 77 ` ) after converting between *nix and Windows file separator char , if needed . I believe a better solution would be to enforce a file separator char on the pattern , i.e . refuse to accept something like ` -- redeploy= '' src\**\*.java '' ` , only accept path patterns separated by ` / ` and then replace this with the correct OS file separator , if needed . Ant has ` / ` as its default file separator character but allows you to change it . I do n't think this is necessary . An `` enforce
Future.failedFuture returns successful future if cause is null __EoT__ A question from our team : Should [ ` Future.failedFuture ` ] ( https : //github.com/eclipse/vert.x/blob/master/src/main/java/io/vertx/core/impl/FutureImpl.java # L40 ) always return a failed future ? At present ` failedFuture ( null ) ` returns a succeeded future . Agree that we should never call failedFuture with null , but it can happen by accident ... and depending on the complexity of the system , finding the root cause can take some time . Also perhaps , calling [ ` Future.fail ( null ) ` ] ( https : //github.com/eclipse/vert.x/blob/master/src/main/java/io/vertx/core/impl/FutureImpl.java # L144 ) should really set the cause to ` NoStackTraceThrowable ` .
redeploy= '' ant_pattern '' incorrectly checks path in Windows __EoT__ As it is right now , passing something like ` -- redeploy= '' src/**/*.java '' ` has no effect on Windows machines , i.e . no file is ever matched against this pattern since the pattern tokenizer fails to break the pattern into tokens due to the fact that ` / ` is not a file separator on Windows . Rather than modifying either the tokenizer or the matching algorithm , a possible solution would be to store the patterns ( called includes , see ` io/vertx/core/impl/launcher/commands/Watcher.java ` line ` 77 ` ) after converting between *nix and Windows file separator char , if needed . I believe a better solution would be to enforce a file separator char on the pattern , i.e . refuse to accept something like ` -- redeploy= '' src\**\*.java '' ` , only accept path patterns separated by ` / ` and then replace this with the correct OS file separator , if needed . Ant has ` / ` as its default file separator character but allows you to change it . I do n't think this is necessary . An `` enforce
Possible NPE in VertxImpl : :deployVerticle __EoT__ `` ` @ Override public void deployVerticle ( Verticle verticle , DeploymentOptions options , Handler < AsyncResult < String > > completionHandler ) { boolean closed ; synchronized ( this ) { closed = this.closed ; } if ( closed ) { completionHandler.handle ( Future.failedFuture ( `` Vert.x closed '' ) ) ; } else { deploymentManager.deployVerticle ( verticle , options , completionHandler ) ; } } `` ` This method is called with null argument for ` completionHandler ` by at least 2 other VertxImpl methods . However , there is no check for null when calling completionHandler when Vertx is closed .
redeploy= '' ant_pattern '' incorrectly checks path in Windows __EoT__ As it is right now , passing something like ` -- redeploy= '' src/**/*.java '' ` has no effect on Windows machines , i.e . no file is ever matched against this pattern since the pattern tokenizer fails to break the pattern into tokens due to the fact that ` / ` is not a file separator on Windows . Rather than modifying either the tokenizer or the matching algorithm , a possible solution would be to store the patterns ( called includes , see ` io/vertx/core/impl/launcher/commands/Watcher.java ` line ` 77 ` ) after converting between *nix and Windows file separator char , if needed . I believe a better solution would be to enforce a file separator char on the pattern , i.e . refuse to accept something like ` -- redeploy= '' src\**\*.java '' ` , only accept path patterns separated by ` / ` and then replace this with the correct OS file separator , if needed . Ant has ` / ` as its default file separator character but allows you to change it . I do n't think this is necessary . An `` enforce
Vert.x command line tools/launcher should return an error code when a failure occurs __EoT__ All Vert.x command line operations currently always return a `` 0 '' exit value , even if it is known the command did not run successful . For automated deployment tooling ( e.g . puppet scripts ) it is very useful to return a non-zero exit value . This will allow tooling to check the exit value , stop executing when one command fails , and provide better feedback on which step a failure occurs .
redeploy= '' ant_pattern '' incorrectly checks path in Windows __EoT__ As it is right now , passing something like ` -- redeploy= '' src/**/*.java '' ` has no effect on Windows machines , i.e . no file is ever matched against this pattern since the pattern tokenizer fails to break the pattern into tokens due to the fact that ` / ` is not a file separator on Windows . Rather than modifying either the tokenizer or the matching algorithm , a possible solution would be to store the patterns ( called includes , see ` io/vertx/core/impl/launcher/commands/Watcher.java ` line ` 77 ` ) after converting between *nix and Windows file separator char , if needed . I believe a better solution would be to enforce a file separator char on the pattern , i.e . refuse to accept something like ` -- redeploy= '' src\**\*.java '' ` , only accept path patterns separated by ` / ` and then replace this with the correct OS file separator , if needed . Ant has ` / ` as its default file separator character but allows you to change it . I do n't think this is necessary . An `` enforce
HttpClient metrics aggregation __EoT__ Using an option defined in the http client client for this purpose . See https : //github.com/vert-x3/vertx-dropwizard-metrics/issues/20 # issuecomment-188227246
Small error on website . __EoT__ On this page : http : //vertx.io/wsver-0002/ruby_web_tutorial.html in step 4 ( `` Get the persistor up and running '' ) there is the following line which is n't grammatically correct and a bit confusing . `` ` Vert.x ships with an out of the box bus module ( busmod ) called MongoPersistor . This is a busmod is component which communicates with other components on the vert.x event bus by exchanging JSON messages . `` ` I think it should be more like the following ? `` ` Vert.x ships with an out-of-the-box bus module ( busmod ) called MongoPersistor . A busmod is a component which communicates with other components on the vert.x event bus by exchanging JSON messages . `` `
Vertx instances are not garbaged in LauncherTest __EoT__ The various tests in LauncherTest create Vertx instances ( in commands ) which are not garbaged . The Vert.x instances should be cleaned up as the underlying file descriptors needs to be garbaged .
CompositeFutureImpl 's all and any methods silently fail when composing > 32 Futures __EoT__ Because a primitive int value is used as the flag to compute the composite status of all the component futures , and because an arbitrary number of futures can be passed using the variants that accept an arbitrarily-sized List , if a List with more than 32 Futures is passed in , the implementations will not function correctly and issue no errors .
Additional HTTP methods support __EoT__ Vert.x 2 had support for any extended HTTP method as methods are accepted as String . Vert.x has now limited itself to work only with standard HTTP methods and this has been a limitation for our application to migrate to Vert.x 3 . As per the [ discussion ] ( https : //groups.google.com/forum/ # ! msg/vertx/PoJMC_wEsNo/-k3hE1N_AwAJ ) with @ vietj , it is expected in 3.3 . Adding this issue for tracking convenience .
CompositeFuture.any handler not called on success __EoT__ `` ` CompositeFuture.any ( f1 , f2 ) .setHandler ( handler ) `` ` The handler is not called when f2 or f2 succeeds .
Default command specified in Main-Command MANIFEST entry not run if no Main-Verticle entry __EoT__ Vext.x version 3.2.1 In VerxCommandLauncher line 378 there is check for verticle ! = null only then getDefaultCommand ( ) executed . But may be we not needed any vehicles in manifest at all .
Config should not be printed to log when JSON can not be parsed __EoT__ Currently the entire config file ( passed to -conf ) will be printed to the log if it can not be correctly parsed as a JSON object on vertx startup . Since the config potentially can contain sensitive information that you do n't want printed in a log this is not a good default . I suggest vertx do n't print the content of the config , rather just an error message telling that the config can not be parsed .
Nested zip tests fails on Windows __EoT__ `` ` Failed tests : NestedZipFileResolverTest > AsyncTestBase.lambda $ onSuccess $ 1:622- > FileResolverTestBase.lambda $ testCacheDirDeletedOnVertxClose $ 3:197- > AsyncTestBase.assertFalse:208 null NestedZipFileResolverTest > AsyncTestBase.lambda $ onSuccess $ 1:620- > AsyncTestBase.fail:262 java.nio.file.FileSystemException : C : \Users\FTM\Documents\NetBeansProjects\vert.x\.vertx\file-cache-bd9e09f4-0e7a-4400-b8cf-a97a8735ea7c\lib\nested.zip : The process can not access the file because it is being used by another process . NestedZipFileResolverTest.after:60- > AsyncTestBase.after:81- > FileResolverTestBase.tearDown:52- > AsyncTestBase.awaitLatch:592- > AsyncTestBase.assertTrue:372 null NestedZipFileResolverTest.after:60- > AsyncTestBase.after:81- > FileResolverTestBase.tearDown:52- > AsyncTestBase.awaitLatch:592- > AsyncTestBase.assertTrue:372 null NestedZipFileResolverTest.after:60- > AsyncTestBase.after:81- > FileResolverTestBase.tearDown:52- > AsyncTestBase.awaitLatch:592- > AsyncTestBase.assertTrue:372 null NestedZipFileResolverTest.after:60- > AsyncTestBase.after:81- > FileResolverTestBase.tearDown:52- > AsyncTestBase.awaitLatch:592- > AsyncTestBase.assertTrue:372 null NestedZipFileResolverTest.after:60- > AsyncTestBase.after:81- > FileResolverTestBase.tearDown:52- > AsyncTestBase.awaitLatch:592- > AsyncTestBase.assertTrue:372 null NestedZipFileResolverTest.after:60- > AsyncTestBase.after:81- > FileResolverTestBase.tearDown:52- > AsyncTestBase.awaitLatch:592- > AsyncTestBase.assertTrue:372 null Tests run : 17 , Failures : 8 , Errors : 0 , Skipped : 0 `` ` reported by @ FainTMako on Window 7
Http server actual port __EoT__ NetServer has an ` actualPort ( ) ` that returns the current actual port , there could be the same for HttpServer
Default command specified in Main-Command MANIFEST entry not run if no Main-Verticle entry __EoT__ Vext.x version 3.2.1 In VerxCommandLauncher line 378 there is check for verticle ! = null only then getDefaultCommand ( ) executed . But may be we not needed any vehicles in manifest at all .
Default command specified in Main-Command MANIFEST entry not run if no Main-Verticle entry __EoT__ Vext.x version 3.2.1 In VerxCommandLauncher line 378 there is check for verticle ! = null only then getDefaultCommand ( ) executed . But may be we not needed any vehicles in manifest at all .
Allow to plug a Context exception handler __EoT__ that would allow to trace the flow propagation ( i.e when a context schedules the execution of a context and its later execution , etc ... ) Vert.x Unit could use that to be aware of failures and somehow get rid of ` TestContext ` , for instance : `` ` @ Test public void testSomething ( TestContext ctx ) { long now = System.currentMillis ( ) ; vertx.setTimer ( 50 , v - > { ctx.assertTrue ( System.currentMillis ( ) - now < = 50 ) ; } ) ; } `` ` could be pretty much like : `` ` @ Test public void testSomething ( ) { long now = System.currentMillis ( ) ; vertx.setTimer ( 50 , v - > { assertTrue ( System.currentMillis ( ) - now < = 50 ) ; } ) ; } `` ` the AssertionError would be caught by Vert.x Unit and make the test fail .
Peer certificate chain can not be retrieved after NetSocket TLS upgrade __EoT__
Error loading from classpath within .zip files __EoT__ # # # Issue description I have found an issue with the ` vertx.fileSystem ( ) .readFile ( ) ` function . The function will fail if you try to load a file from the classpath and that file is stored inside a .zip file . The problem is in the class ` io.vertx.core.impl.FileResolver ` . The method ` unpackFromJarURL ( ) ` is assuming that the file will be always stored inside a .jar file : `` ` private synchronized File unpackFromJarURL ( URL url , String fileName , ClassLoader cl ) { try { ZipFile zip ; String path = url.getPath ( ) ; int idx1 = path.lastIndexOf ( `` .jar ! `` ) ; ... `` ` The method will throw an ` ArrayIndexOutOfBoundsException ` if the file is stored inside a .zip file . # # # How to reproduce it I have attached two files : - ** [ test.zip ] ( https : //github.com/eclipse/vert.x/files/147962/test.zip ) ** : Compressed file that implements a Vert.x service . It contains two files : - mainVerticle.js : Main Service Verticle , written in JavaScript , that try to load a
Error loading from classpath within .zip files __EoT__ # # # Issue description I have found an issue with the ` vertx.fileSystem ( ) .readFile ( ) ` function . The function will fail if you try to load a file from the classpath and that file is stored inside a .zip file . The problem is in the class ` io.vertx.core.impl.FileResolver ` . The method ` unpackFromJarURL ( ) ` is assuming that the file will be always stored inside a .jar file : `` ` private synchronized File unpackFromJarURL ( URL url , String fileName , ClassLoader cl ) { try { ZipFile zip ; String path = url.getPath ( ) ; int idx1 = path.lastIndexOf ( `` .jar ! `` ) ; ... `` ` The method will throw an ` ArrayIndexOutOfBoundsException ` if the file is stored inside a .zip file . # # # How to reproduce it I have attached two files : - ** [ test.zip ] ( https : //github.com/eclipse/vert.x/files/147962/test.zip ) ** : Compressed file that implements a Vert.x service . It contains two files : - mainVerticle.js : Main Service Verticle , written in JavaScript , that try to load a
FileResolver performance issue __EoT__ Fatjar it creates perf issues when unpacking resources because it went from ZipFile # entries ( ) ( that is basically a lookup in the Zip dir structure ) to ZipFileInputStream that performs a scan of the Zip file . See this commit : https : //github.com/eclipse/vert.x/commit/29000c63a56d5a9410498e39f6ab63567ad7ed91 # diff-4f1620acdced3de97ebe522db0fd106a
JsonArray.remove ( int pos ) should return JsonArray or JsonObject instead of their underlying implementations __EoT__ The current implementation returns / leaks a ` java.util.ArrayList < ? > ` in case of a ` JsonArray ` or a Map in case of a ` JsonObject ` . It should check for these implementations and return a JsonArray or JsonObject wrapper . See https : //github.com/eclipse/vert.x/blob/master/src/main/java/io/vertx/core/json/JsonArray.java # L482
SLF4j logging arguments ignored __EoT__ Logging with SLF4J enabled ( vertx.logger-delegate-factory-class-name = io.vertx.core.logging.SLF4JLogDelegateFactory ) does not use all the log arguments . for example : `` ` java LoggerFactory.getLogger ( Foo.class ) .info ( `` test { } '' , `` param '' ) `` ` outputs : `` ` '' test { } '' `` ` instead of expected output : `` ` '' test param '' `` ` This is easily fixable in io.vertx.core.logging.SLF4jLogDelegate.java # log : `` ` - l.log ( null , FQCN , level , msg , null , t ) ; + l.log ( null , FQCN , level , msg , params , t ) ; `` `
Deadlock if the connection is still being used while HttpClient is closing __EoT__ This happens in Vert.x 3.2 . In thread 5717 , we hold the lock on HttpClientImpl.close ( lock # 1 ) and then we try to acquire a lock on ClientConnection.close ( lock # 2 ) . In thread 7035 , we hold a lock # 2 in ClientConnection.handleClosed and try to hold a lock # 1 at HttpClientImpl.checkClosed . And boom , we get a deadlock . I do n't have a good repro now since it 's quite hard to reproduce consistently . But I can demonstrate from the stack trace : `` ` Thread 5717 : ( state = BLOCKED ) - io.vertx.core.http.impl.ClientConnection.close ( ) @ bci=0 , line=352 ( Interpreted frame ) - io.vertx.core.http.impl.HttpClientImpl.close ( ) @ bci=46 , line=642 ( Interpreted frame ) Thread 7035 : ( state = BLOCKED ) - io.vertx.core.http.impl.HttpClientImpl.checkClosed ( ) @ bci=0 , line=791 ( Interpreted frame ) - io.vertx.core.http.impl.HttpClientImpl.doRequest ( io.vertx.core.http.HttpMethod , java.lang.String , int , java.lang.String , io.vertx.core.MultiMap ) @ bci=23 , line=782 ( Interpreted frame ) - io.vertx.core.http.impl.HttpClientImpl.request ( io.vertx.core.http.HttpMethod , int , java.lang.String , java.lang.String ) @ bci=7 , line=338 ( Interpreted frame
HttpClient connection should not be reused for a request when there is an on-going request __EoT__
HttpClient sharing clarifications and warns __EoT__ An HttpClient should not be shared between different Verticles or Context . It should be documented and when the client detects a different context , it should print a warn on the console to make the user aware of this situation .
Fat-JAR-Error : on unpackFromJarURL with whitespaces in the path of windows filepath __EoT__ This happens in Vert.x 3.2 . On start-up a vertx-web-fat-JAR on a path with whitespace i get a internall server error . Example - > ok : Working dir : C : \Users\**Max**\git\Project\target\ Start-CMD : java -jar webapp.jar Example - > failed : Working dir : C : \Users\**Max Mustermann**\git\Project\target\ Start-CMD : java -jar webapp.jar `` ` 500 C : \Users\Max % 20Mustermann\git\Project\target\webapp.jar ( Das System kann den angegebenen Pfad nicht finden ) java.io.FileInputStream.open0 ( Native Method ) java.io.FileInputStream.open ( Unknown Source ) java.io.FileInputStream . ( Unknown Source ) java.io.FileInputStream . ( Unknown Source ) io.vertx.core.impl.FileResolver.toZipInputStream ( FileResolver.java:171 ) io.vertx.core.impl.FileResolver.unpackFromJarURL ( FileResolver.java:180 ) io.vertx.core.impl.FileResolver.resolveFile ( FileResolver.java:121 ) io.vertx.core.impl.VertxImpl.resolveFile ( VertxImpl.java:657 ) io.vertx.core.file.impl.FileSystemImpl $ 6.perform ( FileSystemImpl.java:517 ) io.vertx.core.file.impl.FileSystemImpl $ 6.perform ( FileSystemImpl.java:514 ) io.vertx.core.file.impl.FileSystemImpl.propsBlocking ( FileSystemImpl.java:150 ) io.vertx.ext.web.handler.impl.StaticHandlerImpl.lambda $ getFileProps $ 4 ( StaticHandlerImpl.java:264 ) `` `
Fat-JAR-Error : on unpackFromJarURL with whitespaces in the path of windows filepath __EoT__ This happens in Vert.x 3.2 . On start-up a vertx-web-fat-JAR on a path with whitespace i get a internall server error . Example - > ok : Working dir : C : \Users\**Max**\git\Project\target\ Start-CMD : java -jar webapp.jar Example - > failed : Working dir : C : \Users\**Max Mustermann**\git\Project\target\ Start-CMD : java -jar webapp.jar `` ` 500 C : \Users\Max % 20Mustermann\git\Project\target\webapp.jar ( Das System kann den angegebenen Pfad nicht finden ) java.io.FileInputStream.open0 ( Native Method ) java.io.FileInputStream.open ( Unknown Source ) java.io.FileInputStream . ( Unknown Source ) java.io.FileInputStream . ( Unknown Source ) io.vertx.core.impl.FileResolver.toZipInputStream ( FileResolver.java:171 ) io.vertx.core.impl.FileResolver.unpackFromJarURL ( FileResolver.java:180 ) io.vertx.core.impl.FileResolver.resolveFile ( FileResolver.java:121 ) io.vertx.core.impl.VertxImpl.resolveFile ( VertxImpl.java:657 ) io.vertx.core.file.impl.FileSystemImpl $ 6.perform ( FileSystemImpl.java:517 ) io.vertx.core.file.impl.FileSystemImpl $ 6.perform ( FileSystemImpl.java:514 ) io.vertx.core.file.impl.FileSystemImpl.propsBlocking ( FileSystemImpl.java:150 ) io.vertx.ext.web.handler.impl.StaticHandlerImpl.lambda $ getFileProps $ 4 ( StaticHandlerImpl.java:264 ) `` `
buffer.duplicate ( ) is invoked twice __EoT__ HttpServerRequestImpl.java , line no . 360 : `` ` decoder.offer ( new DefaultHttpContent ( data.getByteBuf ( ) .duplicate ( ) ) ) ; `` ` but data.getByteBuf ( ) itself invokes buf.duplicate ( ) This is in the latest released version 3.1.0
Add Buffer # toString ( ) / Buffer # toJsonObject ( ) / Buffer # toJsonArray ( ) __EoT__
Release 1.0.0.beta3 __EoT__
Introduce pingers on cluster connections __EoT__ Pingers so cluster connections are properly closed when nodes disappear from network
Introduce pingers on cluster connections __EoT__ Pingers so cluster connections are properly closed when nodes disappear from network
Introduce pingers on cluster connections __EoT__ Pingers so cluster connections are properly closed when nodes disappear from network
White color in between border and background __EoT__ Have a look at the following screenshot : ! [ device-2016-05-13-123903 ] ( https : //cloud.githubusercontent.com/assets/244947/15253734/f973efe8-1909-11e6-9616-352b1580d668.png ) For some colors , there 's a very small white border . This is there whether I use ` setImageDrawable ( ) ` with a ` ColorDrawable ` or use ` setFillColor ( ) ` on a transparent background .
Request : ability to temporary disable rounding the images __EoT__ In some cases , instead of a circular image , I wish to show a normal image in the same area that the CircleImageView takes . It would be nice to be able to have a `` setOval ( boolean ) '' function , which will enable & disable making the content of the CircleImageView to be rounded . This is better than having a container of it together with a normal ImageView . Not only that , but for drawables that exist as XML files ( even those that are already round ) , it would be better to disable the rounding of them , instead of creating new bitmaps using getBitmapFromDrawable .
Suggestion : Make another CircleImageView extending AppCompatImageView __EoT__ ` android : tint ` is n't working in xml , crashes the app . I suppose this is achievable using AppCompatImageView
CircleImageView.setColorFilter ( ) , cant work well . __EoT__ circleImageView.setColorFilter ( Color.parseColor ( `` # 77000000 '' ) ) ; It cant work ;
Added som detailes to Limitations section __EoT__ ` adjustViewBounds ` can not be set to true , as it affects ` scaleType ` , even if ` scaleType ` is explicitly set to ` centerCrop `
Setting a color drawable as the imageDrawable does not work in Android 5.0 __EoT__ In my use case , the circle should sometimes display an image ( which I load through Glide ) and sometimes should have a solid color ( which I set .setImageDrawable ( new clorDrawable ( Color.parseColor ( ... . ) ) ) . The latter works fine in < Android 5.0 , but only displays a gray color in Android 5.0 Any ideas ?
Allow CircleImageView to work with ColorDrawables __EoT__ I use ColorDrawables as placeholders while profile pictures are being loaded from the network . However , ColorDrawables have an intrinsic height and width of -1 , causing Bitmap.createBitmap to fail in CircleImageView.getBitmapFromDrawable .
Update library/src/com/handmark/pulltorefresh/library/PullToRefreshBase ... . __EoT__ ... java to prevent a blank view cause by overscroll
Hi , I want to contribute to the development of the project __EoT__ Hello , my name is Anton . I use your library in one of my projects , it is the best of its kind . But as for me , arrow 's behaviour is not perfect . I tried to fix it , and I hope you 'll like it . # # Best Regards , Anton Menyaylo anton.menyaylo @ gmail.com
Exposed internal API 's for subclassing __EoT__ I found I needed to expose these API 's during development , it may help future customization efforts .
Exposed internal API 's for subclassing __EoT__ I found I needed to expose these API 's during development , it may help future customization efforts .
Three little fixes __EoT__ - dc289e3e94 gives LoadingLayout the correct background when headerBackground is set . - 06a6027a93 fixes a warning about pull_to_refresh_tap_label . - 0381f4ac7f makes the text values use XML entities consistently .
Last-Updated label in footer and Last-Updated text color __EoT__ Hi Chris ! This pull request contains the following : - Last-updated is now shown in the footer as well - A separate text color can now be set on the last-update label - Proper Maven versioning has been applied Regarding Maven versioning , I strongly suggest that you update the version in the POMs after each release you make ! I 've set it to 2.7.1-SNAPSHOT in this pull request . This version should be updated on each ( public ) release of the project . Since the last release was 2.7.0 , it used 2.7.1 here . SNAPSHOT means that it 's a ongoing version ( read more about SNAPSHOT versions in chapter 3.5 of `` Better Builds with Maven '' - http : //www.maestrodev.com/wp-content/uploads/2012/03/betterbuildswithmaven-2008.pdf . Notice that you do n't have to use 2.7.0 , you could for example go for 2.8.0 as well ! If you do n't start to use/update the Maven version , then I would probably not be able to use your excellent pull-to-refresh lib in my app . I need to be able to know which version ( i.e . which code )
Add string translations in Japanese __EoT__ japanese translations for you
PhotoView zoom resets when system UI visibility changes __EoT__ It seems to be because setFrame ( ) is called when the system UI visibility changes and that calls update ( ) regardless of whether the frame actually changed . ( In my case , the system UI is stable so it does n't . ) Possible fixes : - Make setFrame ( ) not call update ( ) if the bounds do n't change . This would only work if the system UI was stable . Or : - Make update ( ) retain the same relative scale when possible . If needed , I could submit a pull-request to implement the first option , however I do n't know enough about the internals to do the second . Thanks .
fixed typo in readme sample usage __EoT__
PhotoViewAttacher created twice for each PhotoView __EoT__ Two PhotoViewAttachers are instantiated for each PhotoView , the second one replacing the first . This is because PhotoView # init ( ) is called from two places . 1 ) The PhotoView constructor 2 ) PhotoView # onAttachedToWindow This can cause problems when , for example , a OnViewTapListener is set after the PhotoView is constructed . When the view is then attached , a new PhotoViewAttacher is created and the tap listener is lost .
Scale changed listener does not respond to animation events __EoT__ onScaleChange is not called when an animation scales the view , for example on a double tap . This makes it impossible for listeners of the callback to tell exactly how much the view is zoomed . I have a fix ready and will submit a pull request shortly .
java.lang.ArrayIndexOutOfBoundsException : length=1 ; index=1 __EoT__ hi , I try to use your library but i have the exception bellow when zoom in . `` ` 08-30 22:44:43.437 20210-20210/com . ******E/AndroidRuntime : FATAL EXCEPTION : main java.lang.ArrayIndexOutOfBoundsException : length=1 ; index=1 at android.support.v4.widget.ViewDragHelper.shouldInterceptTouchEvent ( ViewDragHelper.java:1004 ) at android.support.v4.widget.DrawerLayout.onInterceptTouchEvent ( DrawerLayout.java:855 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1852 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2209 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1952 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2209 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1952 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2209 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1952 ) at com.android.internal.policy.impl.PhoneWindow $ DecorView.superDispatchTouchEvent ( PhoneWindow.java:1966 ) at com.android.internal.policy.impl.PhoneWindow.superDispatchTouchEvent ( PhoneWindow.java:1418 ) at android.app.Activity.dispatchTouchEvent ( Activity.java:2424 ) at android.support.v7.app.ActionBarActivityDelegateICS $ WindowCallbackWrapper.dispatchTouchEvent ( ActionBarActivityDelegateICS.java:255 ) at com.android.internal.policy.impl.PhoneWindow $ DecorView.dispatchTouchEvent ( PhoneWindow.java:1914 ) at android.view.View.dispatchPointerEvent ( View.java:7564 ) at android.view.ViewRootImpl $ ViewPostImeInputStage.processPointerEvent ( ViewRootImpl.java:3883 ) at android.view.ViewRootImpl $ ViewPostImeInputStage.onProcess ( ViewRootImpl.java:3778 ) at android.view.ViewRootImpl $ InputStage.deliver ( ViewRootImpl.java:3379 ) at android.view.ViewRootImpl $ InputStage.onDeliverToNext ( ViewRootImpl.java:3429 ) at android.view.ViewRootImpl $ InputStage.forward ( ViewRootImpl.java:3398 ) at android.view.ViewRootImpl $ AsyncInputStage.forward ( ViewRootImpl.java:3483 ) at android.view.ViewRootImpl $ InputStage.apply ( ViewRootImpl.java:3406 ) at android.view.ViewRootImpl $ AsyncInputStage.apply ( ViewRootImpl.java:3540 ) at android.view.ViewRootImpl $ InputStage.deliver ( ViewRootImpl.java:3379 ) at android.view.ViewRootImpl $ InputStage.onDeliverToNext ( ViewRootImpl.java:3429 ) at android.view.ViewRootImpl $ InputStage.forward ( ViewRootImpl.java:3398 ) at
Remove android : allowBackup= '' true '' __EoT__ Allow apps using the library to select their own backup option without needing to override it .
How do I disable zoom ( causing crash ) ? __EoT__ Hello , I am using your Library for the images but I do n't want to use the zoom in-out functionality as it is causing crash for my application . Please help me to sort out this , any help would be appreciable . Thanks .
Personal advice : add onAttachedToWindow method of PhotoView __EoT__ `` ` @ Override protected void onDetachedFromWindow ( ) { mAttacher.cleanup ( ) ; super.onDetachedFromWindow ( ) ; } `` ` when resume of the view is not on touch , I feel we can do : ` new PhotoViewAttacher ( this ) ` or resume ` PhotoViewAttacher ` in method of the onAttachedToWindow ( )
PhotoView.java getDisplayMatrix ( ) __EoT__ `` ` @ Override public Matrix getDisplayMatrix ( ) { return mAttacher.getDrawMatrix ( ) ; } `` ` Should be **mAttacher.getDisplayMatrix ( ) ** ?
android : allowBackup= '' true '' causes error with android gradle 0.11.1 when applications has android : allowBackup= '' false '' __EoT__ With the upgrade to 'com.android.tools.build : gradle:0.11.1 ' the application can no longer be built when the application has android : allowBackup= '' false '' because the library has android : allowBackup= '' true '' . is also present at com.github.chrisbanes.photoview : library:1.2.3:4:18 value= ( true ) Suggestion : add 'tools : replace= '' allowBackup '' ' to < application > element at AndroidManifest.xml:32:5 to override /Users/hoeve/Workspaces/Project/App/src/main/AndroidManifest.xml Error : ( 33 , 9 ) Attribute application @ allowBackup value= ( false ) from AndroidManifest.xml:33:9 Error : ( 33 , 9 ) Execution failed for task ' : App : processDebugManifest ' . > Manifest merger failed : Attribute application @ allowBackup value= ( false ) from AndroidManifest.xml:33:9 > is also present at com.github.chrisbanes.photoview : library:1.2.3:4:18 value= ( true ) > Suggestion : add 'tools : replace= '' allowBackup '' ' to < application > element at AndroidManifest.xml:32:5 to override
ViewPager not allowing to scroll the image __EoT__ It seems like the ViewPager is not allowing to scroll the image anymore in the latest release ( v1.2.2 ) . The version that was published in Google Play ( November ) seems to still work . Is this a feature or a bug ? ; - )
Ca n't overload DefaultOnDoubleTapListener class __EoT__ My understanding is on my code I should n't have a PhotoViewAttacher reference ( All action on PhotoViewAttacher should be done through PhotoView class ) . I would like to change DoubleTap behavior by keeping the DefaultOnDoubleTapListener one . But : - I Ca n't overload DefaultOnDoubleTapListener because it needs a PhotoViewAttacher argument . - There is no interface to setOnDoubleTapListener in PhotoView yet . My workaround getPhotoViewAttacher ( ) interface in PhotoView but I do n't think you want this .
Why so many final methods ? __EoT__ As the title states , why are so many methods of PhotoViewAttache final ? Impossible to extend some of the functionality without creating a separate version of the library .
How to change the transition effect animation speed ? __EoT__ How to change the transition effect animation speed ? It 's so fast for my application . I need to retard a little bit to load the next image ...
NaN Error __EoT__ FroyoGestureDetector `` ` public boolean onScale ( ScaleGestureDetector detector ) { float scaleFactor = detector.getScaleFactor ( ) ; if ( Float.isNaN ( scaleFactor ) || Float.isInfinite ( scaleFactor ) ) return false ; mListener.onScale ( detector.getScaleFactor ( ) , detector.getFocusX ( ) , detector.getFocusY ( ) ) ; return true ; } `` `
Return the draw matrix instead of the supplemental matrix on getDisplayMatrix __EoT__ For the display matrix returned from the attacher 's getDisplayMatrix , return the composition of local changes with the changes based on the scaling type of the base imageView . I do n't know enough about the original intention of getDisplayMatrix to know what the intent was here , but : 1 ) returning the drawing matrix seems way more useful in the common case , where you just want a matrix to replicate the changes you see onscreen in the PhotoView 2 ) This means that the getDisplayMatrix behavior is the same between PhotoView and PhotoViewAttacher Both of those together , along with there not being a great way to get at # 1 otherwise , made me think this might be a useful change to make . If not , adding a similar function seems required , unless I 'm missing another way clients should be getting at this .
Zoom enabled false fix and fix for allowing flexibility for new IPhotoView classes __EoT__ **Fixes for two bugs I ran into : ** 1 ) One prevented me from implementing my own PhotoView class ( _as I could not extend PhotoView directly due to needing a pre-existing base class_ ) . 2 ) When you set Zoomable to false , it was not properly scaling as FIT_CENTER . Instead it was just displaying actual size . No scaling . ( _Identity base matrix_ )
ViewPager not allowing to scroll the image __EoT__ It seems like the ViewPager is not allowing to scroll the image anymore in the latest release ( v1.2.2 ) . The version that was published in Google Play ( November ) seems to still work . Is this a feature or a bug ? ; - )
ImageView in ViewPager __EoT__ After zooming image in ViewPager and trying drag it round pager intercepts events and starts scrolling to next page . It seems ImageView disallows it 's parent to intercept events , but if ImageView is in a container it will not pan around . I think the situation like this : ViewPager - > RelativeLayout - > ImageView is really common
Example of extraction of selected bitmap __EoT__ It is not clear how to extract the 'selected ' bitmap . We have attacher.getDisplayRect ( ) , but its values are not defined well . Why are they floats ? Why are they sometimes negative ? It seems like top and right are relative to the original image , scaled by attacher.getScale ( ) . bottom and right are the scaled width and height of the selection . Seems like with the current code , we need to do something like ( and this is probably wrong ) : `` ` java RectF rect = attacher.getVisibleRect ( ) ; float scale = attacher.getScale ( ) ; Bitmap.createBitmap ( source , -rect.left / scale , -rect.top / scale , rect.right / scale , rect.bottom / scale ) `` ` Can we get a clear example ? I 'd also love for the library to either provide a Rect in source coordinates of what is visible , or to output a bitmap of the same . Lastly , if all that is a bad idea , then perhaps you should just recommend a fix like this to extract the image : http : //stackoverflow.com/a/4858154/719763
the problem of `` java.lang.IllegalArgumentException : pointerIndex out of range '' come back in 1.2.3-snapshot __EoT__ @ smarek
Can not move around a zoomed image in 1.2.2 when it is placed inside ViewPager __EoT__ In the latest version 1.2.2 the PhotoView behavior when it is placed inside a ViewPager is different from 1.2.1 . In the previous version you can easily perform an image zoom and move around the image . In this new version , it is hard to move to the image bounds as the ViewPager is intercepting touch events and tries to switch page instead of moving inside zoomed image .
Is there any way to rotate the image ? __EoT__ I want to rotate the image by 90* , is that possible ?
java.lang.ArrayIndexOutOfBoundsException : length=1 ; index=1 __EoT__ hi , I try to use your library but i have the exception bellow when zoom in . `` ` 08-30 22:44:43.437 20210-20210/com . ******E/AndroidRuntime : FATAL EXCEPTION : main java.lang.ArrayIndexOutOfBoundsException : length=1 ; index=1 at android.support.v4.widget.ViewDragHelper.shouldInterceptTouchEvent ( ViewDragHelper.java:1004 ) at android.support.v4.widget.DrawerLayout.onInterceptTouchEvent ( DrawerLayout.java:855 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1852 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2209 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1952 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2209 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1952 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2209 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:1952 ) at com.android.internal.policy.impl.PhoneWindow $ DecorView.superDispatchTouchEvent ( PhoneWindow.java:1966 ) at com.android.internal.policy.impl.PhoneWindow.superDispatchTouchEvent ( PhoneWindow.java:1418 ) at android.app.Activity.dispatchTouchEvent ( Activity.java:2424 ) at android.support.v7.app.ActionBarActivityDelegateICS $ WindowCallbackWrapper.dispatchTouchEvent ( ActionBarActivityDelegateICS.java:255 ) at com.android.internal.policy.impl.PhoneWindow $ DecorView.dispatchTouchEvent ( PhoneWindow.java:1914 ) at android.view.View.dispatchPointerEvent ( View.java:7564 ) at android.view.ViewRootImpl $ ViewPostImeInputStage.processPointerEvent ( ViewRootImpl.java:3883 ) at android.view.ViewRootImpl $ ViewPostImeInputStage.onProcess ( ViewRootImpl.java:3778 ) at android.view.ViewRootImpl $ InputStage.deliver ( ViewRootImpl.java:3379 ) at android.view.ViewRootImpl $ InputStage.onDeliverToNext ( ViewRootImpl.java:3429 ) at android.view.ViewRootImpl $ InputStage.forward ( ViewRootImpl.java:3398 ) at android.view.ViewRootImpl $ AsyncInputStage.forward ( ViewRootImpl.java:3483 ) at android.view.ViewRootImpl $ InputStage.apply ( ViewRootImpl.java:3406 ) at android.view.ViewRootImpl $ AsyncInputStage.apply ( ViewRootImpl.java:3540 ) at android.view.ViewRootImpl $ InputStage.deliver ( ViewRootImpl.java:3379 ) at android.view.ViewRootImpl $ InputStage.onDeliverToNext ( ViewRootImpl.java:3429 ) at android.view.ViewRootImpl $ InputStage.forward ( ViewRootImpl.java:3398 ) at
Is there any way to rotate the image ? __EoT__ I want to rotate the image by 90* , is that possible ?
setDisplayRect ( ) __EoT__ I would like to request the addition of a ` setDisplayRect ( .. ) ` to be able to save and restore the state of PhotoView
setDisplayRect ( ) __EoT__ I would like to request the addition of a ` setDisplayRect ( .. ) ` to be able to save and restore the state of PhotoView
Current dev-branch HEAD version is incompatible for API levels below 11 __EoT__ The incompatible call to View.getX ( ) and View.getY ( ) is on line https : //github.com/chrisbanes/PhotoView/blob/dev/library/src/uk/co/senab/photoview/PhotoViewAttacher.java # L500 on current HEAD of dev with latest commit being 27e8d378b29469353c9ecc613778c2783ae18ae3 I will try to fix this and submit a pull request as soon as I can , but if you already have a fix for this on backstage let me know . As far as I know , the current master-version does n't have this problem . Maybe it is possible to adapt the solution from there ?
NullPointerException during setScale on commit 68464c72e6b6a58d90b9213206209367e6e0c05a __EoT__ dev branch of PhotoView on commit 68464c72e6b6a58d90b9213206209367e6e0c05a This is reproducable in our app if you use a viewpager and swipe to another page very quickly . After that the callback from the asynchronous network loading-mechanism tries to update the PhotoView and set its scale . My diagnosis : It seems that the pagefragment that is gone cleans up the PhotoView and its PhotoViewAttacher by calling mAttacher.cleanup ( ) in PhotoView . onDetachedFromWindow ( ) . cleanup ( ) nullifies the mImageView reference which is not checked in PhotoViewAttacher.setScale ( float , boolean ) . Stacktrace : `` ` java.lang.NullPointerException at uk.co.senab.photoview.PhotoViewAttacher.setScale ( PhotoViewAttacher.java:486 ) at uk.co.senab.photoview.PhotoViewAttacher.setScale ( PhotoViewAttacher.java:481 ) at uk.co.senab.photoview.PhotoView.setScale ( PhotoView.java:155 ) at de.billiger.android.products.gallery.ProductGalleryViewPagerActivity $ ProductImageRequestListener.onRequestSuccess ( ProductGalleryViewPagerActivity.java:191 ) at de.billiger.android.products.gallery.ProductGalleryViewPagerActivity $ ProductImageRequestListener.onRequestSuccess ( ProductGalleryViewPagerActivity.java:1 ) at com.octo.android.robospice.request.RequestProcessor $ ResultRunnable.run ( RequestProcessor.java:469 ) at android.os.Handler.handleCallback ( Handler.java:615 ) at android.os.Handler.dispatchMessage ( Handler.java:92 ) at android.os.Looper.loop ( Looper.java:137 ) at android.app.ActivityThread.main ( ActivityThread.java:4898 ) at java.lang.reflect.Method.invokeNative ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:511 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:1008 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:775 ) at dalvik.system.NativeStart.main ( Native Method ) `` ` My fix would be to check mImageView
Distortion during fling on right and bottom edges on Gingerbread devices __EoT__ There is a subtle flicker/distortion on many Gingerbread phones when the user scrolls right into the right or bottom edge and lifts their finger causing the fling animation . This can be observed in the demo app . If you enable the logging in the run ( ) method of FlingRunnable and watch the new x and y values returned by the Scroller you will see something like this when scrolling into the bottom edge : `` ` 06-24 09:12:04.589 : D/PhotoViewAttacher ( 1260 ) : fling run ( ) . CurrentX:252 CurrentY:151 NewX:252 NewY:151 06-24 09:12:04.609 : D/PhotoViewAttacher ( 1260 ) : fling run ( ) . CurrentX:252 CurrentY:151 NewX:251 NewY:151 06-24 09:12:05.319 : D/PhotoViewAttacher ( 1260 ) : fling run ( ) . CurrentX:259 CurrentY:151 NewX:259 NewY:0 06-24 09:12:05.349 : D/PhotoViewAttacher ( 1260 ) : fling run ( ) . CurrentX:259 CurrentY:0 NewX:261 NewY:151 06-24 09:12:05.369 : D/PhotoViewAttacher ( 1260 ) : fling run ( ) . CurrentX:261 CurrentY:151 NewX:262 NewY:151 06-24 09:12:05.399 : D/PhotoViewAttacher ( 1260 ) : fling run ( ) . CurrentX:262 CurrentY:151 NewX:263 NewY:151 `` ` See how those values jump to
Eclipse ADT support missing on dev branch , how to build PhotoView ? __EoT__ On current version 68464c72e6b6a58d90b9213206209367e6e0c05a of the dev branch support for using PhotoView as an android library in e.g . Eclipse ADT is gone . Support for this was deleted in commit 8f96de586cd8d99d3d004b61860bb1ca8b94d1da . I tried to include PhotoView as a simple Java dependency but had problems . So I reverted that commit to re-enable the library project support . What would be the proper way to build PhotoView in combination with our app ?
Is it possible to disable the ViewPage while in zoom ? __EoT__ Hi , I would like to know if you can help me . I have a ViewPager working with the PhotoView , but I would like to disable the ViewPager Scroll while the PhotoView is in the zoom mode . Could you please show me the path ? Thanks in advance .
Set min and max zoom/scale level __EoT__ First : great library ! Is there a possibility to set the min and max zoom level ? Currently it reverts to a min zoom level defined by the views bounds .
Possibility to make OnPhotoTapListener to work even if image not loaded or outside image bounds __EoT__ If PhotoView fits the screen ( match_parent ) but image takes only part of it when OnPhotoTapListener does n't work if to click outside the picture . Can it be fixed in some way ?
PhotoView + Viewpager memory leak __EoT__ When PhotoView is used inside ViewPager and page changes allocated memory is n't released even if System.gc ( ) is called . This does n't happen with standard ImageView .
dev branch : NPE in VersionedGestureDetector __EoT__ This code causes NPE on android version above froyo `` ` java if ( sdkVersion < 5 ) { detector = new CupcakeDetector ( context ) ; } else if ( sdkVersion < Build.VERSION_CODES.ECLAIR ) { detector = new CupcakeDetector ( context ) ; } else if ( sdkVersion < Build.VERSION_CODES.FROYO ) { detector = new FroyoDetector ( context ) ; } detector.mListener = listener ; `` `
Lower minSDKVersion __EoT__ Why it is 8 if the project can be compilled and run on below versions ?
Screen flicker on Android 2.3 __EoT__ Nice component ! One issue I have noticed is when flinging horizontally ( especially if the image does not fill the screen vertically ) you see a brief flash of the screen shifted vertically and overlaid on the image , looks a bit disconcerting . Does n't happen on Android 4.1
crash occured in sample app __EoT__ Steps to reproduce : 1. open pager sample . 2. zomm out 3. keep one finger on screen 4. move 5 . ? ! ! ! 6 . PROFIT device : Desire HD , os - 4.1
关于Bean序列化与反序列化Map < String , String > 中属性Date类型值为1970年前的问题能否优化？ __EoT__ ` Map < String , String > hash = JSONObject.parseObject ( JSON.toJSONString ( bean ) , new TypeReference < Map < String , String > > ( ) { } ) ; ` 方法可以将Bean序列化成Map < String , String > 。 ` JSONObject.toJavaObject ( ( JSONObject ) JSON.toJSON ( hash ) , clazz ) ; ` 方法反序列化成Bean时，如果属性类型为Date值为1970年以前时间时，会报序列化失败。看了下是com.alibaba.fastjson.util.TypeUils类中castToDate方法第307行代码针对format的处理有些问题，不支持 “ -- 355132800000 ” 字符串的处理。 建议307行判断条件改为： if ( strVal.indexOf ( '-',1 ) ! = -1 ) {
Caused by : com.alibaba.fastjson.JSONException : can not cast to Timestamp , value : 2006-8-9 __EoT__ Use Fastjson 1.2.47 Caused by : com.alibaba.fastjson.JSONException : can not cast to Timestamp , value : 2006-8-9 at com.alibaba.fastjson.util.TypeUtils.castToSqlDate ( TypeUtils.java:412 ) at com.alibaba.fastjson.util.TypeUtils.cast ( TypeUtils.java:750 ) at com.bcss.poi.excel.utils.ExcelUtils.setProperty ( ExcelUtils.java:1414 ) at com.bcss.poi.excel.utils.ExcelUtils.readRow ( ExcelUtils.java:424 )
fastjson解析json字符串到java对象，当存在通配符继承Comparable时报堆栈溢出。 __EoT__ fastjson 版本，从1.2.35到最新1.2.46均试过均存在一下问题； jdk版本：和jdk版本无关 问题描述： `` ` java public class FastJsonTest { public static void main ( String [ ] args ) { IndexQuery_Number query_number = new IndexQuery_Number ( ) ; IndexQuery_Comparable query_comparable = new IndexQuery_Comparable ( ) ; List < Integer > keys = Arrays.asList ( 1234 ) ; query_number.setKeys ( keys ) ; query_comparable.setKeys ( keys ) ; try { System.out.println ( `` ======= query with number ======= '' ) ; String json1 = JSON.toJSONString ( query_number ) ; System.out.println ( json1 ) ; IndexQuery_Number queryNumber = JSON.parseObject ( json1 , new TypeReference < IndexQuery_Number > ( ) { } ) ; System.out.println ( queryNumber ) ; System.out.println ( `` \n======= query with comparable ======= '' ) ; String json2 = JSON.toJSONString ( query_comparable ) ; System.out.println ( json2 ) ; IndexQuery_Comparable queryComparable = JSON.parseObject ( json2 , new TypeReference < IndexQuery_Comparable > ( ) { } ) ; System.out.println ( queryComparable ) ; } catch ( Throwable e ) { e.printStackTrace ( ) ; } } static class IndexQuery_Comparable { List < ? extends Comparable > keys ; public List < ? extends Comparable > getKeys ( ) { return keys ; } public void setKeys
JsonPath支持Map条件筛选对象 __EoT__ jsonpath直接支持Map条件筛选 如有以下对象，希望筛选出score > 0.7的的对象列表，用jsonPath编写时发现不能支持，目前只支持List模式，是否可直接支持Map？ `` ` sql import com.alibaba.fastjson.JSON ; import com.alibaba.fastjson.JSONPath ; def jsonStr = '' '' '' { '' risk_sexy_trade_stream_plus '' : { '' score '' : 0 } , '' chemical_medicine_stream_plus '' : { '' score '' : 0 } , '' gambling_trade_stream_plus '' : { '' score '' : 0 } , '' politics_stream_plus '' : { '' score '' : 0.89513221556685012 } , '' risk_tool_gun_stream_plus '' : { '' score '' : 0 } , '' sex_model_stream_plus '' : { '' score '' : 0.7237896928683851 } , '' risk_tool_cheat_stream_plus '' : { '' score '' : 0 } , '' risk_tool_certif_stream_plus '' : { '' score '' : 0 } , '' gamble_model_stream_plus '' : { '' score '' : 0.3453003960431523 } , '' risk_tool_vpn_stream_plus '' : { '' score '' : 0 } , '' vpndetect_stream_plus '' : { '' score '' : 0.3467174233072834 } } '' '' '' ; `` `
日期解析问题 __EoT__ 我想要解析带有 “ Thu Mar 22 08:58:37 +0000 2018 ” 这种Date输出格式的日期属性的类，但是解析异常，我配置的属性注解如下： @ JSONField ( format = `` EEE MMM dd HH : mm : ss zzz yyyy '' ) private Date time ; 这么做不能解析成功，但我试着用这种格式生成日期json，结果是： “ 星期二 六月 12 13:04:10 +0000 2018 ” 为什么会是这样，fastjson现在支持这种格式的解析吗
LocalDateTime包含纳秒 , 反序列化失败 __EoT__ `` ` java public class JsonExample { private LocalDateTime testLocalDateTime ; public LocalDateTime getTestLocalDateTime ( ) { return testLocalDateTime ; } public void setTestLocalDateTime ( LocalDateTime testLocalDateTime ) { this.testLocalDateTime = testLocalDateTime ; } } public static void main ( String [ ] args ) { // JSON.DEFFAULT_DATE_FORMAT = `` yyyy-MM-dd HH : mm : ss : SSS '' ; JsonExample example = new JsonExample ( ) ; //test1 正确执行 , test2 , test3 执行出错 com.alibaba.fastjson.JSONException : can not cast to : java.time.LocalDateTime example.setTestLocalDateTime ( LocalDateTime.now ( ) ) ; //纳秒数设置为0 , test1 , test2 , test3 全部正确执行 //example.setTestLocalDateTime ( LocalDateTime.now ( ) .withNano ( 0 ) ) ; String text = JSON.toJSONString ( example , SerializerFeature.PrettyFormat ) ; System.out.println ( text ) ; //test1 , 全部可以正常执行 JsonExample example1 = JSON.parseObject ( text , JsonExample.class ) ; System.out.println ( JSON.toJSONString ( example1 ) ) ; //test2 纳秒数为0 , 可以正常执行 , 不为0则报错 JsonExample example2 = JSONObject.parseObject ( text ) .toJavaObject ( JsonExample.class ) ; System.out.println ( JSON.toJSONString ( example2 ) ) ; //test3 纳秒数为0 , 可以正常执行 , 不为0则报错 JsonExample example3 = JSON.parseObject ( text ) .toJavaObject ( JsonExample.class ) ; System.out.println ( JSON.toJSONString ( example3 ) )
反序列化float精度超出会出现问题 __EoT__ 在反序列化的时候，如果数据类型是一个float类型，而对应的值超过了float类型很多的话，反序列化会出现很奇怪的数字。 代码如下： `` ` public static void main ( String [ ] args ) { String json= '' { \ '' num\ '' :90.82195113 } '' ; Num num= JSONObject.parseObject ( json , Num.class ) ; System.out.println ( num.getNum ( ) ) ; } public static class Num { private float num ; public float getNum ( ) { return num ; } public void setNum ( float num ) { this.num = num ; } } `` ` 输出结果如下： `` ` 4.922605 `` `
Labels.excludes预期效果不对 __EoT__ `` ` org.junit.ComparisonFailure : Expected : { `` id '' :123 , '' info '' : '' fofo '' , '' name '' : '' wenshao '' } Actual : { `` info '' : '' fofo '' } `` ` 想排除掉 “ AuditIdEntity ” 的字段，但是直接吧 “ LogicDeleteEntity ” 的字段也排除掉了，我的用法不对吗？测试代码如下 `` ` java @ Test public void test_excludes ( ) throws Exception { VO vo = new VO ( ) ; vo.setId ( 123 ) ; vo.setName ( `` wenshao '' ) ; vo.setPassword ( `` ooxxx '' ) ; vo.setInfo ( `` fofo '' ) ; String text = JSON.toJSONString ( vo , Labels.excludes ( `` AuditIdEntity '' ) ) ; Assert.assertEquals ( `` { \ '' id\ '' :123 , \ '' info\ '' : \ '' fofo\ '' , \ '' name\ '' : \ '' wenshao\ '' } '' , text ) ; } public static class VO { private int id ; private String name ; private String password ; private String info ; @ JSONField ( label = `` LogicDeleteEntity '' ) public int getId ( ) { return id ; } public void setId ( int id ) { this.id =
Labels.excludes预期效果不对 __EoT__ `` ` org.junit.ComparisonFailure : Expected : { `` id '' :123 , '' info '' : '' fofo '' , '' name '' : '' wenshao '' } Actual : { `` info '' : '' fofo '' } `` ` 想排除掉 “ AuditIdEntity ” 的字段，但是直接吧 “ LogicDeleteEntity ” 的字段也排除掉了，我的用法不对吗？测试代码如下 `` ` java @ Test public void test_excludes ( ) throws Exception { VO vo = new VO ( ) ; vo.setId ( 123 ) ; vo.setName ( `` wenshao '' ) ; vo.setPassword ( `` ooxxx '' ) ; vo.setInfo ( `` fofo '' ) ; String text = JSON.toJSONString ( vo , Labels.excludes ( `` AuditIdEntity '' ) ) ; Assert.assertEquals ( `` { \ '' id\ '' :123 , \ '' info\ '' : \ '' fofo\ '' , \ '' name\ '' : \ '' wenshao\ '' } '' , text ) ; } public static class VO { private int id ; private String name ; private String password ; private String info ; @ JSONField ( label = `` LogicDeleteEntity '' ) public int getId ( ) { return id ; } public void setId ( int id ) { this.id =
JSONPath后模糊匹配bug __EoT__ ` JSONPath.read ( `` { \ '' table\ '' : \ '' _order_base\ '' } '' , `` [ table LIKE 'order_base % ' ] '' ) ; ` table字段前面有_，LIKE表达式值前面没有_，期望结果不匹配，实际匹配。 看源码觉得JSONPath 1079行逻辑有问题。
多级泛型的里层无法正常解析 __EoT__ class：BaseResult `` ` public class BaseResult < T > `` ` class：InteractiveOrderMaterielQueryResult `` ` java public class InteractiveOrderMaterielQueryResult < T extends InteractiveOrderMaterielModel > extends BasePageQueryResult < T > `` ` method： queryProcurementOrderList `` ` java BaseResult < InteractiveProcurementOrderList > queryProcurementOrderList ( InteractiveOrderBatchQueryCloudParam param ) ; `` ` 调用queryProcurementOrderList的返回结果调用JSON.parseObject ( ) ，里层的InteractiveOrderMaterielModel无法正常解析，测试代码如下： `` ` java String s = `` { \ '' result\ '' : { \ '' modelList\ '' : [ { \ '' sourceId\ '' : \ '' 81900002\ '' , \ '' categoryNames\ '' : [ \ '' 一级类目A\ '' , \ '' 二级类目A1\ '' , \ '' 三级类目a2\ '' ] , \ '' materielCode\ '' : \ '' wanhuacaigou095\ '' , \ '' categoryIds\ '' : [ 10001158,10001159,10001161 ] , \ '' systemName\ '' : \ '' framework\ '' , \ '' unitName\ '' : \ '' 个\ '' , \ '' materielName\ '' : \ '' wanhuacaigou095\ '' , \ '' class\ '' : \ '' com.alibaba.procurement.api.interactive.model.InteractiveOrderMaterielModel\ '' , \ '' materielItemId\ '' : \ '' 10172\ '' } , { \ '' sourceId\ '' : \ '' 81900002\ '' , \ '' categoryNames\ '' : [ \ '' 一级类目A\ '' , \ ''
多级泛型的里层无法正常解析 __EoT__ class：BaseResult `` ` public class BaseResult < T > `` ` class：InteractiveOrderMaterielQueryResult `` ` java public class InteractiveOrderMaterielQueryResult < T extends InteractiveOrderMaterielModel > extends BasePageQueryResult < T > `` ` method： queryProcurementOrderList `` ` java BaseResult < InteractiveProcurementOrderList > queryProcurementOrderList ( InteractiveOrderBatchQueryCloudParam param ) ; `` ` 调用queryProcurementOrderList的返回结果调用JSON.parseObject ( ) ，里层的InteractiveOrderMaterielModel无法正常解析，测试代码如下： `` ` java String s = `` { \ '' result\ '' : { \ '' modelList\ '' : [ { \ '' sourceId\ '' : \ '' 81900002\ '' , \ '' categoryNames\ '' : [ \ '' 一级类目A\ '' , \ '' 二级类目A1\ '' , \ '' 三级类目a2\ '' ] , \ '' materielCode\ '' : \ '' wanhuacaigou095\ '' , \ '' categoryIds\ '' : [ 10001158,10001159,10001161 ] , \ '' systemName\ '' : \ '' framework\ '' , \ '' unitName\ '' : \ '' 个\ '' , \ '' materielName\ '' : \ '' wanhuacaigou095\ '' , \ '' class\ '' : \ '' com.alibaba.procurement.api.interactive.model.InteractiveOrderMaterielModel\ '' , \ '' materielItemId\ '' : \ '' 10172\ '' } , { \ '' sourceId\ '' : \ '' 81900002\ '' , \ '' categoryNames\ '' : [ \ '' 一级类目A\ '' , \ ''
fastjon_1.2.46 多次调用结果不一样 open-jdk-1.8.0_112.jdk __EoT__ 实体类是如下（kotlin） `` ` kotlin class ProcessBO ( ) { lateinit var masterId : String lateinit var processId : String lateinit var taskId : String lateinit var taskName : String constructor ( masterId : String , processId : String , taskId : String , taskName : String ) : this ( ) { this.masterId = masterId this.processId = processId this.taskId = taskId this.taskName = taskName } override fun toString ( ) : String { return JSON.toJSONString ( this ) } } `` ` 调用方法如下： `` ` kotlin fun main ( args : Array < String > ) { val data = `` '' '' { '' masterId '' : `` 1111111111111 '' , '' processId '' : `` 222222222222222 '' , '' taskId '' : `` 33333333333333 '' , '' taskName '' : `` 44444444444444 '' } `` '' '' val result = JSON.parseObject ( data , ProcessBO : :class.javaObjectType ) println ( result ) } 执行结果（十次以内一定异常）： { `` masterId '' : '' 1111111111111 '' , '' processId '' : '' 222222222222222 '' , '' taskId '' : '' 33333333333333 '' , '' taskName '' : '' 44444444444444 '' } { `` masterId '' : '' 33333333333333
fastJson annotation support SerializerFeature.BrowserCompatible __EoT__ @ JSONField ( serialzeFeatures= { SerializerFeature.BrowserCompatible } ) 不起作用 version 1.2.26 thx
fastJson annotation support SerializerFeature.BrowserCompatible __EoT__ @ JSONField ( serialzeFeatures= { SerializerFeature.BrowserCompatible } ) 不起作用 version 1.2.26 thx
v1.2.40 反序列化float field，当field精度超过float的精度范围，结果出现负数 __EoT__ `` ` java // Bean 对象 public class User { private float age ; public float getAge ( ) { return age ; } public void setAge ( float age ) { this.age = age ; } @ Override public String toString ( ) { return `` User { `` + `` age= '' + age + ' } ' ; } } `` ` `` ` java // 反序列化代码 User user = JSON.parseObject ( `` { \ '' age\ '' : \ '' 0.9390308260917664\ '' } '' , User.class ) ; System.out.println ( user ) ; `` ` 结果： 期望结果是：**User { age=0.9390308 } ** 实际结果是：**User { age=-1.1075817 } **
JSONPath能不能支持一下 & & 操作符 , 支持多条件筛选 __EoT__ 比如 $ .books [ price > 20 & & category = '科幻 ' ]
PropertyFilter 和 SerializerFeature.BeanToArray 联合使用有错 __EoT__ 需要jsonToString 一个 java bean , 使用了PropertyFilter 和 SerializerFeature.BeanToArray , 想要筛选几个需要的属性，然后去掉key , array输出 , code 类似： SimplePropertyPreFilter classAFilter = new SimplePropertyPreFilter ( ClassA.class , `` code '' ) ; SerializeFilter [ ] filters =new SerializeFilter [ ] { classAFilter } ; JSON.toJSONString ( classA , filters , SerializerFeature.BeanToArray ) ; 但是结果，显示只有SerializerFeature.BeanToArray 起了作用，filter 没有 如果去掉feature , 则可以使filter 起作用 问，如何同时起作用？
@ JSONField ( format = `` yyyy-MM-dd '' ) 无效 __EoT__ @ JSONField ( format = `` yyyy-MM-dd '' ) private Date startTime ; @ JSONField ( format = `` yyyy-MM-dd '' ) private Date endTime ; 版本 1.2.38
@ JSONField 的 deserializeUsing 不起作用？ __EoT__ 用下面的代码测试，发现并没有调用 @ JSONField 注解上 deserializeUsing 指定的 ModelValueDeserializer 类？ 版本 1.2.25 , 1.2.32 以及最新的 1.2.43 都有问题 `` ` public class Main2 { public static void main ( String [ ] args ) { //ParserConfig.getGlobalInstance ( ) .putDeserializer ( Model.class , new ModelValueDeserializer ( ) ) ; String json = `` { \ '' value\ '' :123 } '' ; Model model = JSON.parseObject ( json , Model.class ) ; System.out.println ( JSON.toJSONString ( model ) ) ; } public static class Model { @ JSONField ( serializeUsing = ModelValueSerializer.class , deserializeUsing = ModelValueDeserializer.class ) public int value ; } public static class ModelValueSerializer implements ObjectSerializer { @ Override public void write ( JSONSerializer serializer , Object object , Object fieldName , Type fieldType , int features ) throws IOException { Integer value = ( Integer ) object ; String text = value + `` 元 '' ; serializer.write ( text ) ; } } public static class ModelValueDeserializer implements ObjectDeserializer { @ Override public Integer deserialze ( DefaultJSONParser parser , Type type , Object fieldName ) { return parser.getLexer ( ) .intValue ( ) * 100 ; } @ Override public int getFastMatchToken ( )
FastJson升级到1.2.44报错 __EoT__ 原使用FastJson 1.2.7版本，使用上没有问题，但升级到1.2.44版本报错。 com.alibaba.fastjson.JSONException : syntax error , expect , , actual string at com.alibaba.fastjson.parser.DefaultJSONParser.accept ( DefaultJSONParser.java:1451 ) at com.alibaba.fastjson.serializer.MiscCodec.deserialze ( MiscCodec.java:224 ) at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_17_RatingDetailATO.deserialze ( Unknown Source ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:267 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:378 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parse ( DefaultJSONParser.java:1349 ) at com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.deserialze ( JavaObjectDeserializer.java:45 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:654 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:365 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:269 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:488 ) 升级到1.2.7.sec01，并通过脚本方式开启autoType白名单运行正常。
使用spring集成fastjson后，在发送post请求，里面包括byte [ ] 数组，会将byte [ ] 数组做一下base64， __EoT__ 使用spring集成fastjson后，在发送post请求，里面包括byte [ ] 数组，会将byte [ ] 数组做一下base64，请问该如何反序列化得到正确的byte [ ] 数组
PropertyFilter 和 SerializerFeature.BeanToArray 联合使用有错 __EoT__ 需要jsonToString 一个 java bean , 使用了PropertyFilter 和 SerializerFeature.BeanToArray , 想要筛选几个需要的属性，然后去掉key , array输出 , code 类似： SimplePropertyPreFilter classAFilter = new SimplePropertyPreFilter ( ClassA.class , `` code '' ) ; SerializeFilter [ ] filters =new SerializeFilter [ ] { classAFilter } ; JSON.toJSONString ( classA , filters , SerializerFeature.BeanToArray ) ; 但是结果，显示只有SerializerFeature.BeanToArray 起了作用，filter 没有 如果去掉feature , 则可以使filter 起作用 问，如何同时起作用？
String解析为JSONObject，特别是含嵌套结构时，字段名如何大小写不敏感？ __EoT__ 我知道这很操蛋，但某运营商研究院的规范就是这么脑残，非得支持不敏感。 仅一层json结构时好处理，如下代码，利用commons-collections中的CaseInsensitiveMap可实现。 `` ` final TypeReference < CaseInsensitiveMap < String , Object > > typeReference = new TypeReference < CaseInsensitiveMap < String , Object > > ( ) { } ; CaseInsensitiveMap < String , Object > test = JSON.parseObject ( `` '' , typeReference ) ; `` ` 但涉及多层json结构时，嵌套对象又都解析为JSONObject里默认的HashMap或LinkedHashMap，它们是大小写敏感的。 想问fastjson有没相关api，可以自定义JSONObject中Map的类型为CaseInsensitiveMap？
@ JSONField 的 deserializeUsing 不起作用？ __EoT__ 用下面的代码测试，发现并没有调用 @ JSONField 注解上 deserializeUsing 指定的 ModelValueDeserializer 类？ 版本 1.2.25 , 1.2.32 以及最新的 1.2.43 都有问题 `` ` public class Main2 { public static void main ( String [ ] args ) { //ParserConfig.getGlobalInstance ( ) .putDeserializer ( Model.class , new ModelValueDeserializer ( ) ) ; String json = `` { \ '' value\ '' :123 } '' ; Model model = JSON.parseObject ( json , Model.class ) ; System.out.println ( JSON.toJSONString ( model ) ) ; } public static class Model { @ JSONField ( serializeUsing = ModelValueSerializer.class , deserializeUsing = ModelValueDeserializer.class ) public int value ; } public static class ModelValueSerializer implements ObjectSerializer { @ Override public void write ( JSONSerializer serializer , Object object , Object fieldName , Type fieldType , int features ) throws IOException { Integer value = ( Integer ) object ; String text = value + `` 元 '' ; serializer.write ( text ) ; } } public static class ModelValueDeserializer implements ObjectDeserializer { @ Override public Integer deserialze ( DefaultJSONParser parser , Type type , Object fieldName ) { return parser.getLexer ( ) .intValue ( ) * 100 ; } @ Override public int getFastMatchToken ( )
期望JSONField的日期格式配置能作用到Date的集合对象中 __EoT__ ! [ image ] ( https : //user-images.githubusercontent.com/1128385/34145935-1784af4a-e4d3-11e7-969f-ca114f327fc1.png ) 如图
反序列化不支持java.sql.Time类型 __EoT__ 对象内有 ` java.sql.Time ` 类型字段时 反序列化会报错 , 跟踪代码发现是 ` com/alibaba/fastjson/util/TypeUtils.java ` 类中没有对 ` java.sql.Time ` 的反序列进行支持 .
Failed to deserialize list property if property name is snake case __EoT__ fastjson version : 1.2.42 POJO `` ` @ Setter @ Getter @ Accessors ( chain = true ) @ JSONType ( naming = PropertyNamingStrategy.SnakeCase ) public class Params { private boolean withFields ; private List < String > verificationIds ; } `` ` Test Case `` ` @ org.junit.Test public void test ( ) { Params params = new Params ( ) .setVerificationIds ( Arrays.asList ( new String [ ] { `` a '' , `` b '' } ) ) .setWithFields ( true ) ; String json = JSON.toJSONString ( params ) ; log.debug ( json ) ; params = JSON.parseObject ( json , Params.class ) ; log.debug ( JSON.toJSONString ( params ) ) ; } `` ` log output `` ` - { `` verification_ids '' : [ `` a '' , '' b '' ] , '' with_fields '' : true } - { `` with_fields '' : true } `` ` As the log shows , the property **verification_ids** is lost . I 've figured out that if I change **verification_ids** to **verifications** ( no camel ) or annotate the property with ` @
建议ASMDeserializerFactory中一段代码 ASMDeserializerFactory.class.getPackage ( ) .getName ( ) ; 修改为ASMDeserializerFactory.class.getName ( ) , 因为在一些情况下会出现null __EoT__ 例如：使用Mockito mock数据单元测试时，如果我们使用mockClassLoader类加载器时，mockClassLoader不会definePackages，导致getPackAge为null
在Kotlin对JSONObject对象使用 “ toJavaObject ” 方法转为Pojo类时，当字段首字母为大写时报错 __EoT__ Pojo `` ` kotlin data class Test ( @ JSONField ( name = `` Name '' ) var name : String = `` '' ) `` ` 当运行以下代码时报错 `` ` kotlin fun main ( args : Array < String > ) { val pristineJson = `` { \ '' data\ '' : { \ '' lists\ '' : [ { \ '' Name\ '' : \ '' Mark\ '' } ] } } '' val list = JSONObject.parseObject ( pristineJson ) .getJSONObject ( `` data '' ) .getJSONArray ( `` lists '' ) for ( i in list.indices ) { var sss = list.getJSONObject ( i ) val single : Test = sss.toJavaObject ( Test : :class.java ) } } `` ` 当转换为字符串时就不会报错 `` ` kotlin fun main ( args : Array < String > ) { val pristineJson = `` { \ '' data\ '' : { \ '' lists\ '' : [ { \ '' Name\ '' : \ '' Mark\ '' } ] } } '' val list = JSONObject.parseObject ( pristineJson ) .getJSONObject ( `` data '' ) .getJSONArray ( `` lists '' ) for ( i in list.indices )
请支持集合类型反序列化报错， java.lang.UnsupportedOperationException , 谢谢。 __EoT__ 在应用 GenericFastJsonRedisSerializer 实现shiro 的 session 序列化，在反序化过程中报异常， fastjson 版本： １.２.４１ 反序列化内容： `` ` json { `` @ type '' : `` org.apache.shiro.session.mgt.SimpleSession '' , `` attributeKeys '' : [ `` shiroSavedRequest '' ] , `` attributes '' : { `` @ type '' : `` java.util.HashMap '' , `` shiroSavedRequest '' : { `` @ type '' : `` org.apache.shiro.web.util.SavedRequest '' , `` method '' : `` GET '' , `` requestURI '' : `` / '' , `` requestUrl '' : `` / '' } } , `` expired '' : false , `` host '' : `` 0:0:0:0:0:0:0:1 '' , `` id '' : `` 04471851-7b22-4539-9d4b-ecc4e8423ce8 '' , `` lastAccessTime '' : 1511430200586 , `` startTimestamp '' : 1511430200586 , `` timeout '' : 1800000 , `` valid '' : true } `` ` 异常： java.lang.UnsupportedOperationException : null at java.util.AbstractCollection.add ( AbstractCollection.java:262 ) at java.util.AbstractCollection.addAll ( AbstractCollection.java:344 ) at com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue ( FieldDeserializer.java:92 ) at com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField ( DefaultFieldDeserializer.java:118 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:728 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:271 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:267 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:370 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parse ( DefaultJSONParser.java:1335 ) at com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.deserialze ( JavaObjectDeserializer.java:45 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:640 ) at
fastjson1.1.46.sec01和1.2.41版本在key为integer等数字类型时不兼容 __EoT__ 1.1.46.sec01，key为数字类型时会作toString处理。所以 parse出来的对象要用字符串类型为key才能获取。但在1.2.41版本，key还是会保持数字类型，所以parse出来的对象要用Integer类型才能取得。 下面是DefaultJSONParser.java的源码贴图： ! [ 1 ] ( https : //user-images.githubusercontent.com/12045446/33643489-05afbac2-da05-11e7-9af3-444fc55d850e.png ) ! [ 2 ] ( https : //user-images.githubusercontent.com/12045446/33643490-05dfa48a-da05-11e7-85f5-3906e7972eef.png ) 下面是测试用例： ` public class FastjsonTest { public static void main ( String [ ] args ) { String text = `` { 123 : \ '' abc\ '' } '' ; JSONObject obj = JSON.parseObject ( text ) ; int intKey = 123 ; String strKey = `` 123 '' ; String intValue = ( String ) obj.get ( intKey ) ; String strValue = ( String ) obj.get ( strKey ) ; System.out.println ( `` intKey : `` + intKey + `` , intValue : `` + intValue ) ; System.out.println ( `` strKey : `` + strKey + `` , strValue : `` + strValue ) ; } } `
fastjson1.1.46.sec01和1.2.41版本在key为integer等数字类型时不兼容 __EoT__ 1.1.46.sec01，key为数字类型时会作toString处理。所以 parse出来的对象要用字符串类型为key才能获取。但在1.2.41版本，key还是会保持数字类型，所以parse出来的对象要用Integer类型才能取得。 下面是DefaultJSONParser.java的源码贴图： ! [ 1 ] ( https : //user-images.githubusercontent.com/12045446/33643489-05afbac2-da05-11e7-9af3-444fc55d850e.png ) ! [ 2 ] ( https : //user-images.githubusercontent.com/12045446/33643490-05dfa48a-da05-11e7-85f5-3906e7972eef.png ) 下面是测试用例： ` public class FastjsonTest { public static void main ( String [ ] args ) { String text = `` { 123 : \ '' abc\ '' } '' ; JSONObject obj = JSON.parseObject ( text ) ; int intKey = 123 ; String strKey = `` 123 '' ; String intValue = ( String ) obj.get ( intKey ) ; String strValue = ( String ) obj.get ( strKey ) ; System.out.println ( `` intKey : `` + intKey + `` , intValue : `` + intValue ) ; System.out.println ( `` strKey : `` + strKey + `` , strValue : `` + strValue ) ; } } `
JSONCreator BUG __EoT__ 如果使用 @ JSONField对一个字段设置了别名，调用标记 @ JSONCreator的构造函数时，无法初始化字段，只有**案三**是能正常反序列化的。 出错版本：version:1.2.41 之前使用：1.2.15，案一正常，只是不能使用其它的setter。 案一： `` ` java public class Item { @ JSONField ( name= '' m '' ) private int modelId ; @ JSONCreator public Item ( @ JSONField ( name= '' m '' ) int modelId ) { // 这里为零 this.modelId=modelId } } `` ` 案二： `` ` java public class Item { @ JSONField private int modelId ; @ JSONCreator public Item ( @ JSONField int modelId ) { // 这里为零 this.modelId=modelId } } `` ` 案三： `` ` java public class Item { @ JSONField private int modelId ; @ JSONCreator public Item ( @ JSONField ( modelId= '' modelId '' ) int modelId ) { // 这里终于正确了 this.modelId=modelId } } `` ` 案四： `` ` java public class Item { @ JSONField ( modelId= '' m '' ) private int modelId ; @ JSONCreator public Item ( @ JSONField ( modelId= '' modelId '' ) int modelId ) { // 这里还是为零 this.modelId=modelId } } `` `
JSONCreator BUG __EoT__ 如果使用 @ JSONField对一个字段设置了别名，调用标记 @ JSONCreator的构造函数时，无法初始化字段，只有**案三**是能正常反序列化的。 出错版本：version:1.2.41 之前使用：1.2.15，案一正常，只是不能使用其它的setter。 案一： `` ` java public class Item { @ JSONField ( name= '' m '' ) private int modelId ; @ JSONCreator public Item ( @ JSONField ( name= '' m '' ) int modelId ) { // 这里为零 this.modelId=modelId } } `` ` 案二： `` ` java public class Item { @ JSONField private int modelId ; @ JSONCreator public Item ( @ JSONField int modelId ) { // 这里为零 this.modelId=modelId } } `` ` 案三： `` ` java public class Item { @ JSONField private int modelId ; @ JSONCreator public Item ( @ JSONField ( modelId= '' modelId '' ) int modelId ) { // 这里终于正确了 this.modelId=modelId } } `` ` 案四： `` ` java public class Item { @ JSONField ( modelId= '' m '' ) private int modelId ; @ JSONCreator public Item ( @ JSONField ( modelId= '' modelId '' ) int modelId ) { // 这里还是为零 this.modelId=modelId } } `` `
` SerializerFeature.WriteNullBooleanAsFalse ` does not work when asm is disabled and ` PascalNameFilter ` is applied __EoT__ Java source `` ` java public class GH426 extends GithubIssueBase { public static class Foo { public String name ; public int BarCount ; public Boolean flag ; public Foo ( String name , int barCount ) { this.name = name ; BarCount = barCount ; } } public static void main ( String [ ] args ) { SerializeConfig.getGlobalInstance ( ) .setAsmEnable ( false ) ; Foo foo = new Foo ( `` Name '' , 5 ) ; String json = JSON.toJSONString ( foo , new PascalNameFilter ( ) , SerializerFeature.WriteNullBooleanAsFalse ) ; System.out.println ( json ) ; } } `` ` Running the above code got the following output : ! [ image ] ( https : //user-images.githubusercontent.com/216930/33712434-917d692c-db9b-11e7-82a4-7f7c6d2dc61f.png ) Note it works when asm is enabled or ` PascalNameFilter ` is removed .
JSONPath判断key值存在报错 __EoT__ `` ` java String a = `` { \ '' 101a0.test-b\ '' : \ '' tt\ '' } '' ; Object o = JSON.parse ( a ) ; String s = `` 101a0.test-b '' ; System.out.println ( JSONPath.contains ( o , `` $ . '' + JsonUtil.escapeString ( s ) ) ) ; `` ` 上端代码应该打印出true，但是打印的是false，JsonUtil.escapeString ( ) 方法代码如下 : `` ` java public static String escapeString ( String s ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; ++i ) { char c = s.charAt ( i ) ; if ( ( c < 48 || c > 57 ) & & ( c < 65 || c > 90 ) & & ( c < 97 || c > 122 ) ) { buf.append ( `` \\ '' + c ) ; } else { buf.append ( c ) ; } } return buf.toString ( ) ; } `` `
util/FieldInfo.java 里 getInheritGenericType ( ) 可疑的空指针解引用 __EoT__ Hi , 我们的代码检查器 Pinpoint 报告了一处可疑的空指针解引用， https : //github.com/alibaba/fastjson/blob/fcd2ae7723ddc84191cc9b90b453d58b30c02e2c/src/main/java/com/alibaba/fastjson/util/FieldInfo.java # L349-L378 349 行是否可能返回 false，导致 377 行使用 ` class_gd ` 时触发空指针解引用？ 祝好， Sourcebrella Inc .
fastjson 泛型反序列化出错 __EoT__ fastjson 版本1.2.41，运行以下类的test方法可以重现bug 提示 ` java.lang.ClassCastException : com.alibaba.fastjson.JSONObject can not be cast to User ` `` ` java import com.alibaba.fastjson.JSON ; import com.alibaba.fastjson.TypeReference ; import org.junit.Test ; public class TestV { @ Test public void test ( ) { RegResponse < User > userRegResponse = testFastJson ( ) ; User user = userRegResponse.getResult ( ) ; System.out.println ( user ) ; } public static < T > RegResponse < T > testFastJson ( ) { //把body解析成一个对象 String body = `` { \ '' retCode\ '' : \ '' 200\ '' , \ '' result\ '' : { \ '' name\ '' : \ '' Zhangsan\ '' , \ '' password\ '' : \ '' 123\ '' } } '' ; return JSON.parseObject ( body , new TypeReference < RegResponse < T > > ( ) { } ) ; } } class RegResponse < T > { private String retCode ; private String retDesc ; private T result ; public String getRetCode ( ) { return retCode ; } public void setRetCode ( String retCode ) { this.retCode = retCode ; } public String getRetDesc ( ) { return retDesc ; } public void setRetDesc ( String retDesc
JSONPath.paths的结果感觉有点问题 __EoT__ 你好！ 在使用fastjson的JSONPath时，发现如下问题 : 1、有一个类Person， `` ` java static class Person { private String name ; private String id ; //get set ... } `` ` 2、实例化该类后将id和name的值设置为同一个值，假设值都设置为 “ id ” ，而后用JSONPath.paths ( Object obj ) 解析该实例，如下。得到的path只有 '' / '' 和 '' /id '' ，没有 '' /name '' 。个人觉得得到的path不应该是 '' / '' 、 '' /id '' 、 '' /name '' 吗？ `` ` java Person person = new Person ( ) ; person.setId ( `` id '' ) ; person.setName ( `` id '' ) ; Map < String , Object > pathValues = JSONPath.paths ( person ) ; Set < String > paths = pathValues.keySet ( ) ; for ( String path : paths ) { LOG.info ( path ) ; } `` ` debug下了源码，里面用于用到的是一个Map < Object , String > ，根据该map是否含有key来判断是否属于结果集。而对于上面的情况，由于id和name的值都是 '' id '' ，所以处理了id属性之后，处理name属性时，由于map中已存在key相同的值，所以 '' /name '' 这个path就没有放入该map中了。不知道是我用的不对还是逻辑上有问题？ Hope to hear from you , sincerely . 使用的fastjson版本是1.2.40，如下 : `` ` xml < dependency > < groupId > com.alibaba < /groupId > < artifactId > fastjson < /artifactId > < version > 1.2.40 < /version > < /dependency > `` `
新版本JSON.toJSONString ( testingOrder , SerializerFeature.WriteNullBooleanAsFalse ) , 随便加一个类似的feauture , 就会把模型类的null值给打印出来 __EoT__ 新版本JSON.toJSONString ( testingOrder , SerializerFeature.WriteNullBooleanAsFalse ) , 随便加一个类似的feauture , 就会把模型类的null值给打印出来 System.out.println ( com.alibaba.fastjson.JSON.toJSONString ( testingOrder ) ) ; System.out.println ( com.alibaba.fastjson.JSON.toJSONString ( testingOrder , SerializerFeature.WriteNullBooleanAsFalse ) ) ; 下面是对比。 { `` delFlag '' : '' 0 '' , '' new '' : true } { `` age '' : null , '' approvePoints '' : null , '' bloodFigures '' : null '' } 求指教
1.2.37版本开始出现：default constructor not found 异常 __EoT__ 1.2.40版本，kotlin代码如下： `` ` class User ( ) { constructor ( userId : Long , loginName : String ) : this ( ) { this.userId = userId this.loginName = loginName } var userId : Long = Long.MIN_VALUE private set var loginName : String = `` '' private set } fun main ( args : Array < String > ) { val json = `` { \ '' loginName\ '' : \ '' san\ '' , \ '' userId\ '' :1 } '' JSON.parseObject ( json , User : :class.java ) } `` ` 异常： `` ` Exception in thread `` main '' com.alibaba.fastjson.JSONException : default constructor not found . class com.juxia.mpcrm.application.model.User at com.alibaba.fastjson.util.JavaBeanInfo.build ( JavaBeanInfo.java:450 ) at com.alibaba.fastjson.util.JavaBeanInfo.build ( JavaBeanInfo.java:211 ) at com.alibaba.fastjson.parser.ParserConfig.createJavaBeanDeserializer ( ParserConfig.java:611 ) at com.alibaba.fastjson.parser.ParserConfig.getDeserializer ( ParserConfig.java:528 ) at com.alibaba.fastjson.parser.ParserConfig.getDeserializer ( ParserConfig.java:341 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:637 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:365 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:269 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:488 ) at com.juxia.mpcrm.application.model.SessionUserKt.main ( SessionUser.kt:23 ) `` ` 已经提供无参默认构造函数为什么还说找不到？
fastjson有没有类似于jackson的类级别的JsonNaming注解，实现下划线驼峰（json property）和大小写驼峰（java jean property）转换？ __EoT__ fastjson有没有类似于jackson的JsonNaming注解？ jackson用法： `` ` java @ JsonNaming ( PropertyNamingStrategy.SnakeCaseStrategy.class ) public class Test { private String studentName ; } `` ` 可以在类级别实现下划线驼峰（json property）和大小写驼峰转换（java jean property）？ eg : java property：studentName < -- - > json property : student_name PropertyNamingStrategy.SnakeCase目前看只有全局config可以设定，并没有类级别的注解。
kOTLIN __EoT__ kotlin在Android7.0模拟器上会出现default constructor not found
1.2.29版本可以解析，1.2.36版本解析报错 __EoT__ `` ` java public class TestIncSelector { public static class PublishDoc implements Serializable { public static final String LSN_META_NAME = `` LSN '' ; public static final String DOCTYPE_META_NAME = `` TYPE '' ; public static final String AREA_META_NAME = `` AREA '' ; public static final String PRIMARY_KEY_META_NAME = `` PRIMARY_KEY '' ; public static final String SECONDARY_KEY_META_NAME = `` SECONDARY_KEY '' ; private JSONObject meta ; private JSONObject doc ; public PublishDoc ( ) { this.meta = new JSONObject ( ) ; this.doc = new JSONObject ( ) ; } public JSONObject getMeta ( ) { return meta ; } public void setMeta ( JSONObject meta ) { this.meta = meta ; } public JSONObject getDoc ( ) { return doc ; } public void setDoc ( JSONObject doc ) { this.doc = doc ; } @ JSONField ( serialize = false ) public void addMeta ( String name , Object value ) { this.meta.put ( name , value ) ; } @ JSONField ( serialize = false ) public Object getMeta ( String name ) { return this.meta.get ( name ) ; } @ JSONField ( serialize = false ) public Long getLSN ( )
Kotlin反序列化异常 __EoT__ kotlin 1.1.51 jdk8_92 fastjson 1.2.39 复现测试样例： `` ` kotlin fun main ( args : Array < String > ) { println ( JSON.VERSION ) try { val user = mapOf ( `` id '' to 1 , `` name '' to `` test1 '' ) //直接报错 println ( JSON.parseObject ( JSON.toJSONString ( user ) , User : :class.javaObjectType ) ) } catch ( e : Exception ) { e.printStackTrace ( ) } val cluster = mapOf ( `` cluster_enabled '' to 1 ) //内容为空 println ( JSON.parseObject ( JSON.toJSONString ( cluster ) , Cluster : :class.javaObjectType ) ) } data class User ( var id : Int ? = null , var name : String ? = null ) data class Cluster ( @ JSONField ( name = `` cluster_enabled '' ) var clusterEnabled : Int ? = null ) `` `
Kotlin反序列化异常 __EoT__ kotlin 1.1.51 jdk8_92 fastjson 1.2.39 复现测试样例： `` ` kotlin fun main ( args : Array < String > ) { println ( JSON.VERSION ) try { val user = mapOf ( `` id '' to 1 , `` name '' to `` test1 '' ) //直接报错 println ( JSON.parseObject ( JSON.toJSONString ( user ) , User : :class.javaObjectType ) ) } catch ( e : Exception ) { e.printStackTrace ( ) } val cluster = mapOf ( `` cluster_enabled '' to 1 ) //内容为空 println ( JSON.parseObject ( JSON.toJSONString ( cluster ) , Cluster : :class.javaObjectType ) ) } data class User ( var id : Int ? = null , var name : String ? = null ) data class Cluster ( @ JSONField ( name = `` cluster_enabled '' ) var clusterEnabled : Int ? = null ) `` `
关于使用FastJsonpResponseBodyAdvice , 无论callback传与不传 , 返回格式都是application/javascript __EoT__ FastJsonHttpMessageConverter.writeInternal判断obj为MappingFastJsonValue时 , 没有对obj.jsonpFunction非空判断 , 又不想使用ResponseJSONP注解 , 好像ResponseJSONP是方法上生效
fastjson-android parse crash __EoT__ 问题版本 ： > = 1.1.60 复现Case： public static class Person { public int Id ; public String name ; public double height ; } jsonStr ： '' [ { \ '' isId\ '' : false , \ '' Id\ '' :138042533 , \ '' name\ '' : \ '' example\ '' , \ '' height\ '' :172 } ] '' List < Person > list = JSON.parseArray ( jsonStr , Person.class ) ; 结果： com.alibaba.fastjson.JSONException : cast error , field : Id , value false
kotlin在多线程下反序列化会报错 __EoT__ kotlin 1.1.4-3 jdk 1.8-112 fastjson 1.2.38 场景是开多线程，反序列化同一个data class , 使用的方法是JSON.parseObject ( String , Class ) 线程数在1-3的时候正常，从4个线程开始，出现报错： com.alibaba.fastjson.JSONException : default constructor not found . class com.haiziwang.platform.krediskt.common.pojo.info.Server at com.alibaba.fastjson.util.JavaBeanInfo.build ( JavaBeanInfo.java:409 ) at com.alibaba.fastjson.util.JavaBeanInfo.build ( JavaBeanInfo.java:175 ) at com.alibaba.fastjson.parser.ParserConfig.createJavaBeanDeserializer ( ParserConfig.java:602 ) at com.alibaba.fastjson.parser.ParserConfig.getDeserializer ( ParserConfig.java:519 ) at com.alibaba.fastjson.parser.ParserConfig.getDeserializer ( ParserConfig.java:341 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:623 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:348 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:252 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:471 ) 跟了下代码，发现应该是TypeUtils.getKoltinConstructorParameters ( Class ) 这个方法的问题 刚进入这个方法，TypeUtils类中kotlin_kclass_constructor属性就不为空，但是kotlin_kclass_getConstructors为空，导致在TypeUtils.java的2091行报错空指针，导致这个方法返回null，然后出现上述问题
lazy加载异常的BUG __EoT__ @ wenshao 之前提过一个 [ issue ] ( https : //github.com/alibaba/fastjson/issues/1190 ) 是关于序列化lazy数据的，因为后来那个项目废弃了，就一直没有验证，今天重新用到了这个功能，发现还是不行。 经过检查发现FieldSerializer.getPropertyValueDirect方法似乎有些问题： ` if ( persistenceOneToMany & & TypeUtils.isHibernateInitialized ( fieldValue ) ) { return null ; } ` TypeUtils.isHibernateInitialized返回的是这个value是否已被初始化，如果未被初始化，进行json转换会出lazy异常，这里应该少了个！号。 还有一点，这里只判断了oneToMany的情况，manyToOne情况下还是会抛异常。
修复处理范型的问题。若第一次范型数组类型，第二次空值期望null却返回第一次缓存的数组类型。 __EoT__ ! [ image ] ( https : //user-images.githubusercontent.com/18508587/31304910-0ce550b8-aaf3-11e7-9f67-0c36edcdd268.png )
@ JSONField ( format = `` yyyy-MM-dd '' ) 无效 __EoT__ @ JSONField ( format = `` yyyy-MM-dd '' ) private Date startTime ; @ JSONField ( format = `` yyyy-MM-dd '' ) private Date endTime ; 版本 1.2.38
当对象中存在LocalDateTime 类型时，序列化后的json会出现不同DateFormat结果 __EoT__ 问题复现代码如下 ： // 这个配置好像并不生效 `` ` java JSON.DEFFAULT_DATE_FORMAT = `` yyyy-MM-dd HH : mm : ss '' ; TestBean test = new TestBean ( ) ; LocalDateTime time1 = LocalDateTime.now ( ) ; LocalDateTime time2 = LocalDateTime.parse ( `` 2017-09-22 15:08:56 '' , DateTimeFormatter.ofPattern ( `` yyyy-MM-dd HH : mm : ss '' ) ) ; test.setTime1 ( time1 ) ; test.setTime2 ( time2 ) ; String json = JSON.toJSONString ( test , SerializerFeature.WriteDateUseDateFormat ) ; System.out.println ( json ) ; `` ` output : { `` time1 '' : '' 2017-09-22T15:19:53.359 '' , '' time2 '' : '' 2017-09-22 15:08:56 '' } 输出的jsonString 会出现不同的格式。 这使的我在反序列化时出现困扰，需要为不同的格式制定不同的DateTimeFormatter . 目前只知道 jsonString 直接反序列化为对象时，是没有问题的，LocalDateTime 类型的字段会被正确赋值。 但是很多时候只是想取出jsonString 中的某个String 进行解析处理。我想知道这是否是一个BUG。 下面是我使用的版本 < groupId > com.alibaba < /groupId > < artifactId > fastjson < /artifactId > < version > 1.2.17 < /version >
自定义Exception的class作为其他类成员时候反序列化属性丢失 __EoT__ `` ` public class Aa extends Exception { public Aa ( ) { } private String name ; public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } } `` ` `` ` public class C { private Exception e ; public Exception getE ( ) { return e ; } public void setE ( Exception e ) { this.e = e ; } } `` ` `` ` Aa aa = new Aa ( ) ; aa.setName ( `` aa '' ) ; C c = new C ( ) ; c.setE ( aa ) ; String jsonC = JSON.toJSONString ( c , SerializerFeature.WriteClassName ) ; C c2 = JSON.parseObject ( jsonC , C.class ) ; System.out.println ( c2.getE ( ) .getClass ( ) .getSimpleName ( ) ) ; System.out.println ( ( ( Aa ) c2.getE ( ) ) .getName ( ) ) ; `` ` 结果为 ` Aa null `
JSONField 注解的 unwrap 特性有 bug __EoT__ 当 JSONField 注解的参数 ` unwrapped ` 设为 true 时，若 该对象的字段值全为 null，序列化之后 会多一个逗号， fastjson版本为最新版 1.2.38 java 代码 `` ` import java.util.HashMap ; import java.util.Map ; import com.alibaba.fastjson.JSON ; import com.alibaba.fastjson.annotation.JSONField ; public class FastjsonBugTest { public static void main ( String [ ] args ) { Map < String , Object > extraData = new HashMap < String , Object > ( ) ; extraData.put ( `` ext_1 '' , null ) ; extraData.put ( `` ext_2 '' , null ) ; People p = new People ( ) ; p.setId ( `` 001 '' ) ; p.setName ( `` 顾客 '' ) ; p.setExtraData ( extraData ) ; System.out.println ( JSON.toJSONString ( p ) ) ; } static class People { private String name ; private String id ; @ JSONField ( unwrapped=true ) private Object extraData ; public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } public String getId ( ) { return id ; } public void setId ( String id ) { this.id = id ; } public Object getExtraData ( ) { return extraData ; }
枚举类的枚举变量实现接口以后， @ JSONType ( serializeEnumAsJavaBean = true ) 注解或者configEnumAsJavaBean失效 __EoT__ `` ` xml < dependency > < groupId > com.alibaba < /groupId > < artifactId > fastjson < /artifactId > < version > 1.2.38 < /version > < /dependency > `` ` 接口 `` ` java public interface ISetupStatusInfo { List < SetupStatus > nextList ( ) ; Boolean isFirst ( ) ; Boolean isLast ( ) ; } `` `` `` ` java public interface ISetupStatusProcess { /** * * @ return */ SetupStatus refuse ( ) ; /** * 状态转移失败返回null * * @ param name * @ return */ SetupStatus next ( String name ) ; } `` `` 枚举实现 `` ` java @ JSONType ( serializeEnumAsJavaBean = true ) public enum SetupStatus implements ISetupStatusInfo , ISetupStatusProcess { EDIT ( 0 , `` EDIT '' , `` 编辑中 '' ) { @ Override public List < SetupStatus > nextList ( ) { return Arrays.asList ( FIRST_TRAIL ) ; } @ Override public Boolean isFirst ( ) { return true ; } @ Override public SetupStatus refuse ( ) { return EDIT ; } } , FIRST_TRAIL ( 1 , `` FIRST_TRAIL '' , `` 初审 '' ) {
SupportNonPublicField不支持parse基类的private成员 __EoT__ 加SupportNonPublicField特性parse到类中普通的private成员没有问题 , 但这个类如果有基类 , 那么基类的private成员应该也能支持parse吧 ? 目前的1.2.38版貌似不支持 .
kotlin在多线程下反序列化会报错 __EoT__ kotlin 1.1.4-3 jdk 1.8-112 fastjson 1.2.38 场景是开多线程，反序列化同一个data class , 使用的方法是JSON.parseObject ( String , Class ) 线程数在1-3的时候正常，从4个线程开始，出现报错： com.alibaba.fastjson.JSONException : default constructor not found . class com.haiziwang.platform.krediskt.common.pojo.info.Server at com.alibaba.fastjson.util.JavaBeanInfo.build ( JavaBeanInfo.java:409 ) at com.alibaba.fastjson.util.JavaBeanInfo.build ( JavaBeanInfo.java:175 ) at com.alibaba.fastjson.parser.ParserConfig.createJavaBeanDeserializer ( ParserConfig.java:602 ) at com.alibaba.fastjson.parser.ParserConfig.getDeserializer ( ParserConfig.java:519 ) at com.alibaba.fastjson.parser.ParserConfig.getDeserializer ( ParserConfig.java:341 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:623 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:348 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:252 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:471 ) 跟了下代码，发现应该是TypeUtils.getKoltinConstructorParameters ( Class ) 这个方法的问题 刚进入这个方法，TypeUtils类中kotlin_kclass_constructor属性就不为空，但是kotlin_kclass_getConstructors为空，导致在TypeUtils.java的2091行报错空指针，导致这个方法返回null，然后出现上述问题
Map null key值序例化空指针 __EoT__ 版本1.2.38 `` ` static { ParserConfig.getGlobalInstance ( ) .setAutoTypeSupport ( true ) ; } public static class Bean { } @ Test public void test ( ) { Map < Long , Bean > map = new HashMap < > ( ) ; map.put ( null , new Bean ( ) ) ; Map < Long , Bean > rmap = ( Map < Long , Bean > ) JSON.parse ( JSON.toJSONString ( map , SerializerFeature.WriteClassName ) ) ; System.out.println ( rmap ) ; } `` ` `` ` java.lang.NullPointerException at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:518 ) at com.alibaba.fastjson.parser.deserializer.MapDeserializer.deserialze ( MapDeserializer.java:64 ) at com.alibaba.fastjson.parser.deserializer.MapDeserializer.deserialze ( MapDeserializer.java:41 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:358 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parse ( DefaultJSONParser.java:1321 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parse ( DefaultJSONParser.java:1287 ) at com.alibaba.fastjson.JSON.parse ( JSON.java:139 ) at com.alibaba.fastjson.JSON.parse ( JSON.java:130 ) at com.yhtframework.utils.third.FastjsonUtilsTest.test ( FastjsonUtilsTest.java:63 ) `` `
kotlin，反序列化时，没有属性字段的set方法，不执行。求解决 __EoT__ 序列化操作时，想隐藏字段。所以data class里属性设置为serialize =false。 `` ` data class ObjectA ( @ JSONField ( serialize = false ) var a : String ? = '' '' ) { fun getB ( ) : String ? = this.a fun setB ( v : String ) { this.a = `` b '' } } fun testjson3 ( ) { var a : ObjectA = ObjectA ( ) a.a = `` c '' val json : String = JSON.toJSONString ( a ) println ( json ) val obj : ObjectA = JSON.parseObject ( json , ObjectA : :class.java ) println ( obj ) } `` ` 输出结果： `` ` { `` b '' : '' c '' } ObjectA ( a=null ) `` ` toJSONString ( ) 的时候，执行了getB ( ) 方法。 parseObject ( ) 的时候，没有执行setB ( ) 这个方法。 使用的fastjson 版本是 1.2.37 kotlin版本是1.1.4-2 在java版本里这样子操作是正常的。kotlin不执行set方法。求解决！
两边枚举类不相同，反序列化时报错的问题 __EoT__ 序列化方定义的枚举类型为： `` ` java public enum BuFlag { IS_NEED_CHECK_IDENTITY ( 1L , `` a '' ) , HAS_CHECK_IDENTITY ( 2L , `` b '' ) , QUALITY_GRADUATE ( 3L , `` c '' ) ; private long bit ; private String desc ; private BuFlag ( long bit , String desc ) { this.bit = bit ; this.desc = desc ; } public long getBit ( ) { return this.bit ; } } `` ` 反序列化定义的枚举类型为： `` ` java public enum BuFlag { IS_NEED_CHECK_IDENTITY ( 1L , `` a '' ) , HAS_CHECK_IDENTITY ( 2L , `` b '' ) ; private long bit ; private String desc ; private BuFlag ( long bit , String desc ) { this.bit = bit ; this.desc = desc ; } public long getBit ( ) { return this.bit ; } } `` ` 反序列方定义的类没有定义QUALITY_GRADUATE ( 3L , `` c '' ) 。 使用场景为序列方返回Set < BuFlag > set，set里面的元素为IS_NEED_CHECK_IDENTITY，QUALITY_GRADUATE。在反序列方解析时报 Caused by : java.lang.IllegalArgumentException : No enum constant test.BuFlag.QUALITY_GRADUATE at java.lang.Enum.valueOf ( Enum.java:236 ) at com.alibaba.fastjson.parser.deserializer.EnumDeserializer.deserialze ( EnumDeserializer.java:61 ) fastjson版本为1.2.5，试了最新版也是一样报错，请问这个有办法解决吗？可以让反序列化方在反序列时，如果没有定义QUALITY_GRADUATE，就丢弃QUALITY_GRADUATE这个值吗？
序列化 `` 2017-06-28T07:20:05.000+05:30 '' 报错 __EoT__ https : //github.com/alibaba/fastjson/blob/0818ecf14649b2893b486441f685ed8eb2ffd510/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java # L583
使用JSONCreator初始化实例后，反序列化不调用Setter。 __EoT__ 见代码： `` ` java public class HostPoint implements Serializable { // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- private final static long serialVersionUID = 1L ; private final HostAddress address ; @ JSONField ( name = `` fingerprint '' ) private Fingerprint fingerprint ; @ JSONField ( name = `` unkown '' ) private boolean unkown ; // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- @ JSONCreator public HostPoint ( @ JSONField ( name = `` address '' ) HostAddress addr ) { this.address = addr ; } // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- public boolean isChanged ( ) { return false ; } public boolean isMatched ( )
@ JSONField ( name = `` MD5 '' ) ，失败，用的最新版 __EoT__ @ JSONField ( name = `` MD5 '' ) private String md5 ; 转化之后是 “ mD5 ” 。用的是最新版 “ 1.1.63.android ”
@ JSONField ( name = `` MD5 '' ) ，失败，用的最新版 __EoT__ @ JSONField ( name = `` MD5 '' ) private String md5 ; 转化之后是 “ mD5 ” 。用的是最新版 “ 1.1.63.android ”
发现一个循环引用反序列化时的Bug __EoT__ 在使用fastjson时 ( 版本1.2.16 ) ，发现循环引用一旦涉及到继承时，反序列化会出现问题 ( 正向序列化没问题 ) ： 循环引用部分将无法反序列化回子类对象。 下面列出我的测试类： 一共有三个类，Node，Area，Room；其中Area与Room直接继承自Node。 `` ` public class Node { protected String name ; protected Node parent ; protected List < Node > children = new ArrayList < > ( ) ; public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } public Node getParent ( ) { return parent ; } public void setParent ( Node parent ) { this.parent = parent ; } public List < Node > getChildren ( ) { return children ; } public void setChildren ( List < Node > children ) { this.children = children ; } } public class Area extends Node { } public class Room extends Node { } `` ` 1.不涉及继承的测试 ( 结果正确 ) 我建立一个三层节点，结构如下 `` ` Node0 | Node1 -- -- -- -- -- -- - | | Node2_1 Node2_2 `` ` Node2_1 的Json序列化的结果为： `` ` { `` @ type '' : '' com.Ace.Example.JsonRefExample.Node '' , `` children '' : [ ] , `` name '' : '' Node2_1 '' , `` parent '' : { `` children '' : [ { `` $ ref
对enum对象的序列化与反序列化 __EoT__ 在对enum序列化时 , 实现JSONSerializable接口后 , 只有toJSONString方法有效 , toJSON无效 . 看了下代码 , 原因应该在于toJSON方法中的 if ( clazz.isEnum ( ) ) { return ( ( Enum ) javaObject ) .name ( ) ; } . 反序列化时 , 只能根据enum的name和ordinal去反序列化 . fastjson version:1.2.37 test case : `` ` java public enum Sex implements JSONSerializable { NONE ( `` 0 '' , '' NONE '' ) , MAN ( `` 1 '' , '' 男 '' ) , WOMAN ( `` 2 '' , '' 女 '' ) ; private final String code ; private final String des ; private Sex ( String code , String des ) { this.code = code ; this.des = des ; } public String getCode ( ) { return code ; } public String getDes ( ) { return des ; } @ Override public void write ( JSONSerializer serializer , Object fieldName , Type fieldType , int features ) throws IOException { JSONObject object = new JSONObject ( ) ; object.put ( `` code '' , code ) ; object.put ( `` des '' , des ) ; serializer.write ( object ) ; } } public class Student implements Serializable { /** * */ private static final long
@ type 放在json body最后一个属性的位置时，JSON.parse ( jsonString ) 反序列出来的类属性没有赋值 __EoT__ `` ` json { `` args '' : [ [ { `` @ type '' : `` com.taobao.Student '' , `` age '' : 22 , `` id '' : 1 , `` name '' : `` hello '' } , { `` age '' : 22 , `` id '' : 1 , `` name '' : `` hhh '' , `` @ type '' : `` com.taobao.Student '' } ] ] } `` ` 第一个Student字段有赋值，后面的没有赋值。 ! [ image ] ( https : //user-images.githubusercontent.com/5318474/29550923-faa3adec-8742-11e7-8344-689597eddf65.png ) 版本：1.2.31
使用features 组合 出现 java.lang.NullPointerException __EoT__ 测试版本：1.2.28， 1.2.37 测试代码 public class DicDomain { private String code ; private String name ; public String getCode ( ) { return code ; } public void setCode ( String code ) { this.code = code ; } public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } } public static void main ( String [ ] args ) { DicDomain dicDomain = new DicDomain ( ) ; dicDomain.setCode ( `` A001 '' ) ; dicDomain.setName ( `` 测试 '' ) ; SerializerFeature [ ] features = new SerializerFeature [ ] { SerializerFeature.NotWriteRootClassName , SerializerFeature.WriteClassName , SerializerFeature.DisableCircularReferenceDetect } ; System.out.println ( JSON.toJSONString ( dicDomain , features ) ) ; } 错误原因： 只有当这个三个features 搭配使用会出现错误，是这三个不能搭配使用么？。去掉其中任何一个都不会错误。 错误信息 ; Exception in thread `` main '' java.lang.NullPointerException at com.alibaba.fastjson.serializer.JSONSerializer.isWriteClassName ( JSONSerializer.java:140 ) at com.alibaba.fastjson.serializer.ASMSerializer_1_DicDomain.writeNormal ( Unknown Source ) at com.alibaba.fastjson.serializer.ASMSerializer_1_DicDomain.write ( Unknown Source ) at com.alibaba.fastjson.serializer.JSONSerializer.write ( JSONSerializer.java:278 ) at com.alibaba.fastjson.JSON.toJSONString ( JSON.java:587 ) at com.alibaba.fastjson.JSON.toJSONString ( JSON.java:576 ) at com.zcareze.json.DicTest.main ( DicTest.java:35 )
FastJson 1.2.37 `` unclosed.str '' issue with valid input __EoT__ Note the issue only captured on [ v1.2.37 ] ( https : //github.com/alibaba/fastjson/releases/tag/1.2.37 ) . Given two strings below : `` ` java String strOk = `` { \ '' v\ '' : 111 } '' ; String strBad = `` { \ '' v\ '' :111 } '' ; `` ` Note the only difference is there is a whitespace behind ` : ` in ` strOk ` . parsing ` strOk ` is fine : `` ` Foo ok = JSON.parseObject ( strOk , Foo.class ) ; `` ` This will cause the ` unclosed.str ` issue : `` ` Foo bad = JSON.parseObject ( strBad , Foo.class ) ; `` ` Screenshot : ! [ image ] ( https : //user-images.githubusercontent.com/216930/29490423-74f36cb6-857e-11e7-8fa5-d603b557eb64.png ) The full code to reproduce the issue : https : //gist.github.com/greenlaw110/3d0fc68a569565bdf1c9056ef25ab1fb
FastJson 1.2.37 parsing overlow long value issue __EoT__ Give class : `` ` java public static class LongVal { private long v ; public void setV ( long v ) { this.v = v ; } @ Override public String toString ( ) { return String.valueOf ( v ) ; } } `` ` Give the following code to call fastjson : `` ` java BigInteger n = new BigInteger ( String.valueOf ( Long.MAX_VALUE ) ) .add ( new BigInteger ( `` 1 '' ) ) ; Map < String , BigInteger > map = new HashMap < > ( ) ; map.put ( `` v '' , n ) ; String strBad = JSON.toJSONString ( map ) ; System.out.println ( JSON.parseObject ( strBad , LongVal.class ) ) ; `` ` Expected behavior : raise ` NumberFormatException ` found it print out ` -9223372036854775808 ` Screenshot : ! [ image ] ( https : //user-images.githubusercontent.com/216930/29490663-4e5b35cc-8586-11e7-9979-2f74b27987f9.png ) The full source code the reproduce this issue : https : //gist.github.com/greenlaw110/e906970a13921fc30adada704468c63f
更新到1.2.37版本后，原本正常的kotlin类无法被正确解析 __EoT__ `` ` kotlin import com.alibaba.fastjson.JSON import org.junit.Assert import org.junit.Test class A { var id : Long = 0 var name : String = `` '' } class Test { @ Test fun test ( ) { val s = `` { \ '' id\ '' :1 , \ '' name\ '' : \ '' a\ '' } '' val o = JSON.parseObject ( s , A : :class.java ) Assert.assertEquals ( 1 , o.id ) // 失败 Assert.assertEquals ( `` a '' , o.name ) // 失败 } } `` ` 1.2.36版本正常，kotlin 1.1.4
可否全局定义反序列化自动识多种日期格式，如：yyyy-MM-dd HH : mm __EoT__ 现有，反序列化能够自动识别如下日期格式： ISO-8601日期格式 yyyy-MM-dd yyyy-MM-dd HH : mm : ss yyyy-MM-dd HH : mm : ss.SSS 可否自定义多种日期格式
fastjson的IdentityHashMap并发时会出错 __EoT__ 并发的往IdentityHashMap中put数据时，可能会没有put进去。 可以用下面这段groovy脚本验证。 两个线程同时往map中put字符串，立刻又get这个字符串，key是同一个对象，但有时会返回null。 如果uncomment掉synchronize语句就不会有这个问题。 `` ` java import com.alibaba.fastjson.util.IdentityHashMap ; String key = `` kkkkkkkkkkkkkkkk '' IdentityHashMap map = new IdentityHashMap ( 2 ) Random ran = new Random ( ) new Thread ( ) { public void run ( ) { while ( true ) { String kk = key + ran.nextInt ( 2 ) // synchronized ( map ) { map.put ( kk , kk ) ; // } Object val = map.get ( kk ) if ( val == null ) { println `` found '' } } } } .start ( ) ; new Thread ( ) { public void run ( ) { while ( true ) { String kk = key + ran.nextInt ( 2 ) // synchronized ( map ) { map.put ( kk , kk ) ; // } Object val = map.get ( kk ) if ( val == null ) { println `` found '' } } } } .start ( ) ; `` `
fastjson的IdentityHashMap并发时会出错 __EoT__ 并发的往IdentityHashMap中put数据时，可能会没有put进去。 可以用下面这段groovy脚本验证。 两个线程同时往map中put字符串，立刻又get这个字符串，key是同一个对象，但有时会返回null。 如果uncomment掉synchronize语句就不会有这个问题。 `` ` java import com.alibaba.fastjson.util.IdentityHashMap ; String key = `` kkkkkkkkkkkkkkkk '' IdentityHashMap map = new IdentityHashMap ( 2 ) Random ran = new Random ( ) new Thread ( ) { public void run ( ) { while ( true ) { String kk = key + ran.nextInt ( 2 ) // synchronized ( map ) { map.put ( kk , kk ) ; // } Object val = map.get ( kk ) if ( val == null ) { println `` found '' } } } } .start ( ) ; new Thread ( ) { public void run ( ) { while ( true ) { String kk = key + ran.nextInt ( 2 ) // synchronized ( map ) { map.put ( kk , kk ) ; // } Object val = map.get ( kk ) if ( val == null ) { println `` found '' } } } } .start ( ) ; `` `
fastjson的IdentityHashMap并发时会出错 __EoT__ 并发的往IdentityHashMap中put数据时，可能会没有put进去。 可以用下面这段groovy脚本验证。 两个线程同时往map中put字符串，立刻又get这个字符串，key是同一个对象，但有时会返回null。 如果uncomment掉synchronize语句就不会有这个问题。 `` ` java import com.alibaba.fastjson.util.IdentityHashMap ; String key = `` kkkkkkkkkkkkkkkk '' IdentityHashMap map = new IdentityHashMap ( 2 ) Random ran = new Random ( ) new Thread ( ) { public void run ( ) { while ( true ) { String kk = key + ran.nextInt ( 2 ) // synchronized ( map ) { map.put ( kk , kk ) ; // } Object val = map.get ( kk ) if ( val == null ) { println `` found '' } } } } .start ( ) ; new Thread ( ) { public void run ( ) { while ( true ) { String kk = key + ran.nextInt ( 2 ) // synchronized ( map ) { map.put ( kk , kk ) ; // } Object val = map.get ( kk ) if ( val == null ) { println `` found '' } } } } .start ( ) ; `` `
求助，在Springmvc 里面调用带有fastjson转换的接口报错。 __EoT__ 详情见：https : //stackoverflow.com/questions/45657936/javaalibaba-fastjson-decodeutf8-returnindex-out-of-range-1-from-springmvc @ wenshao
Pojo conversion plugin __EoT__ Hello , i added to [ this ] ( https : //plugins.jetbrains.com/plugin/8634-robopojogenerator ) plugin fastjson library support . Can you add this information to description , if you want . I think , that it can helpfull to some one ; ) And can you give me some information about fastjson kotlin support if it exists - i cant find it . Thanks .
kotlin该如何正确使用fastjson？ __EoT__ kotlin中的data class，fastjson无法解析
LinkedList序列化的性能bug __EoT__ 测试代码如下： import com.alibaba.fastjson.JSON ; import java.util.ArrayList ; import java.util.LinkedList ; import java.util.List ; /*** * @ auth yfeng * @ create 2017-08-06 9:53 */ public class FastJSONTest { public static void main ( String [ ] args ) { List < Integer > arraylist = new ArrayList < > ( ) ; List < Integer > linkedlist = new LinkedList < > ( ) ; fillData ( arraylist ) ; fillData ( linkedlist ) ; toJSONTest ( arraylist ) ; toJSONTest ( linkedlist ) ; } private static void fillData ( List < Integer > list ) { for ( int i = 0 ; i < 50000 ; i++ ) { list.add ( i + 1 ) ; } } private static void toJSONTest ( List < Integer > list ) { long start = System.currentTimeMillis ( ) ; String data = JSON.toJSONString ( list , false ) ; long end = System.currentTimeMillis ( ) ; System.out.println ( String.format ( `` spend time % s ms '' , end - start ) ) ; } } 我的本机笔记本输出： spend time 143 ms spend time 5293 ms 性能bug的代码原因在JSONSerializer这个类中，对于prettyFormat = true的情况使用java 5增强for循环，即遍历器进行元素遍历序列化。但是对于prettyFormat = false的逻辑分支则统一使用了Object item = list.get ( i )
反序列化时对map对象的处理的问题 __EoT__ 版本1.2.35，根据网友的http : //blog.csdn.net/kkgbn/article/details/76349803 这个博客，问题仍旧在，问题出在DefaultJSONParser.handleResovleTask这个方法里，对于 $ ref这种，跟踪代码的时候都是扔ResovleTask交给DefaultJSONParser.handleResovleTask处理，问题原因就是对于 $ ref 指向前面map中的value时没有处理好，结果反序列化为null
SerializerFeature.WriteNonStringKeyAsString时，Enum双引号加了两次 __EoT__ `` ` java import static org.assertj.core.api.Assertions.assertThat ; import java.util.Map ; import java.util.TreeMap ; import org.junit.Assert ; import org.junit.Test ; import com.alibaba.fastjson.JSON ; import com.alibaba.fastjson.parser.Feature ; import com.alibaba.fastjson.serializer.SerializerFeature ; import com.google.gson.Gson ; public class FastJsonTest { private enum Rooms { A , B , C , D , E ; } @ Test public void testFastjsonEnum ( ) { Map < Rooms , Rooms > enumMap = new TreeMap < Rooms , Rooms > ( ) ; enumMap.put ( Rooms.C , Rooms.D ) ; enumMap.put ( Rooms.E , Rooms.A ) ; Assert.assertEquals ( JSON.toJSONString ( enumMap , SerializerFeature.WriteNonStringKeyAsString ) , '' { \ '' C\ '' : \ '' D\ '' , \ '' E\ '' : \ '' A\ '' } '' ) ; } @ Test public void testParsed ( ) { String oldStyleJson = `` { 1 : 'abc ' , 2 : 'cde ' } '' ; Gson gson = new Gson ( ) ; Map fromJson = gson.fromJson ( oldStyleJson , Map.class ) ; Assert.assertNull ( fromJson.get ( 1 ) ) ; Assert.assertEquals ( fromJson.get ( `` 1 '' ) , `` abc '' ) ; Map parsed = JSON.parseObject ( oldStyleJson , Map.class
getXXXValue ( ) 有可能报空引用的问题 __EoT__ JSONObject的getDoubleValue ( ) 有可能报空引用，因为调用了可能会返回空对象的方法，如下假设key为空字符串的话： `` ` public double getDoubleValue ( String key ) { Object value = get ( key ) ; if ( value == null ) { return 0D ; } return castToDouble ( value ) ; } public static Double castToDouble ( Object value ) { if ( value == null ) { return null ; } if ( value instanceof Number ) { return ( ( Number ) value ) .doubleValue ( ) ; } if ( value instanceof String ) { String strVal = value.toString ( ) ; if ( strVal.length ( ) == 0 // || `` null '' .equals ( strVal ) // || `` NULL '' .equals ( strVal ) ) { return null ; } if ( strVal.indexOf ( ' , ' ) ! = 0 ) { strVal = strVal.replaceAll ( `` , '' , `` '' ) ; } return Double.parseDouble ( strVal ) ; } throw new JSONException ( `` can not cast to double , value : `` + value ) ; } `` `
不知道fastjson能不能在反序列化出现异常时定位到某一个类属性 __EoT__ 比如一个属性是数字，json传入的是一个字母或者其他的东西，这时抛出的都是运行时异常，堆栈信息也无法精确定位到某一个属性，都是数字格式化异常或者其他什么的转换异常。 用了hibernate的验证这样可以统一的处理参数的问题，让报错更加的友好
反序列化时，字符串能不能自动去除两端空白呢（Trim ) __EoT__
fastjson do n't work with jersey jsonp __EoT__ 1 , 代码demo : @ GET @ Path ( `` { id } '' ) @ Produces ( { `` application/javascript '' , '' application/json '' } ) @ JSONP ( queryParam= '' callback '' ) public Book getBookById ( @ PathParam ( `` id '' ) Long id ) { return idBookMaps.get ( id ) ; } 2 , 使用到jersey拦截器 , fastjson扩展器 JsonWithPaddingInterceptor 默认框架注册，代码如下图： @ Override public void aroundWriteTo ( final WriterInterceptorContext context ) throws IOException , WebApplicationException { final boolean isJavascript = isJavascript ( context.getMediaType ( ) ) ; final JSONP jsonp = getJsonpAnnotation ( context ) ; final boolean wrapIntoCallback = isJavascript & & jsonp ! = null ; if ( wrapIntoCallback ) { context.setMediaType ( MediaType.APPLICATION_JSON_TYPE ) ; context.getOutputStream ( ) .write ( getCallbackName ( jsonp ) .getBytes ( MessageUtils.getCharset ( context.getMediaType ( ) ) ) ) ; context.getOutputStream ( ) .write ( ' ( ' ) ; } context.proceed ( ) ; if ( wrapIntoCallback ) { context.getOutputStream ( ) .write ( ' ) ' ) ; } } FastJsonProvider，显示注册 register ( FastJsonFeature.class ) ，其中FastJsonFeature代码如下： public class FastJsonFeature implements Feature { private final static String JSON_FEATURE =
序列化object时候报错，老版本没有这个问题 __EoT__ ! [ image ] ( https : //user-images.githubusercontent.com/16620268/28147961-7fb7351e-67b6-11e7-9bae-5fdd280db776.png ) ! [ image ] ( https : //user-images.githubusercontent.com/16620268/28147963-827362c8-67b6-11e7-95d3-9ec8787547b6.png )
SerializeConfig中tableSize参数无效 __EoT__ ! [ 115432_1616685d_1463 ] ( https : //user-images.githubusercontent.com/1432613/28258325-423576d8-6b03-11e7-8991-9ace3f421fc0.png )
ClassCastException : java.lang.Integer can not be cast to com.alibaba.fastjson.JSONObject __EoT__ code : JSON.parseObject ( `` 1 '' ) ; then throw Exception : ! [ image ] ( https : //user-images.githubusercontent.com/5474723/27627047-f66853a0-5c1c-11e7-925d-70d68d56c6c6.png ) 原因：fastJson解析的时候 判断入参是原始类型，就直接返回原始类型数据，这样在JSON类 parseObject处理直接报错 ! [ image ] ( https : //user-images.githubusercontent.com/5474723/27627186-6eabda12-5c1d-11e7-8232-de757e8b4e82.png ) 能不能统一封装一下所有的Exception，对外抛出JSONException
无法反序列化带Class数组字段的对象 __EoT__ 实现远程过程调用时，无法正确的反序列化Spring的RemoteInvocation对象，fastjson版本是1.2.5，JDK1.7，错误信息： Exception in thread `` main '' com.alibaba.fastjson.JSONException : sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl can not be cast to java.lang.Class at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:555 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:250 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:226 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:185 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:303 ) at cc.xstyle.framework.data.Jsons.main ( Jsons.java:49 ) Caused by : java.lang.ClassCastException : sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl can not be cast to java.lang.Class at com.alibaba.fastjson.parser.deserializer.ArrayDeserializer.deserialze ( ArrayDeserializer.java:62 ) at Fastjson_ASM_RemoteInvocation_1.deserialze ( Unknown Source ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:551 ) ... 5 more 测试样例参考代码： `` ` java RemoteInvocation remoteInvocation = new RemoteInvocation ( ) ; remoteInvocation.setMethodName ( `` test '' ) ; remoteInvocation.setParameterTypes ( new Class [ ] { int.class , Date.class , String.class } ) ; remoteInvocation.setArguments ( new Object [ ] { 1 , new Date ( ) , `` this is a test '' } ) ; String json = JSON.toJSONString ( remoteInvocation ) ; remoteInvocation = JSON.parseObject ( json , RemoteInvocation.class ) ; System.out.println ( remoteInvocation ) ; `` `
使用 @ JSONCreator注解，当JSON字段与构造方法参数不匹配时报错 __EoT__ `` ` java public class City implements Parcelable { public final int code ; public final String name ; public final String pinyin ; @ JSONCreator public City ( @ JSONField ( name = `` code '' ) int code , @ JSONField ( name = `` name '' ) String name , @ JSONField ( name = `` pinyin '' ) String pinyin ) { this.code = code ; this.name = name ; this.pinyin = pinyin ; } } `` ` `` ` java @ Test public void testFullJSON ( ) { JSONObject data = new JSONObject ( ) ; data.put ( `` name '' , `` string '' ) ; data.put ( `` code '' , 1 ) ; data.put ( `` pinyin '' , `` pinyin '' ) ; City object = TypeUtils.castToJavaBean ( data , City.class ) ; Assert.assertEquals ( `` string '' , object.name ) ; Assert.assertEquals ( 1 , object.code ) ; Assert.assertEquals ( `` pinyin '' , object.pinyin ) ; } @ Test public void testEmptyJSON ( ) { City object = TypeUtils.castToJavaBean ( new JSONObject ( ) , City.class ) ; Assert.assertEquals ( null , object.name ) ;
使用TypeReference导致我的应用内存泄露 __EoT__ 写了段测试代码，放在Activity的onCreate执行，代码如下： while ( true ) { String responseStr2 = `` json数据 '' ; Result < Map < String , Object > > responseObject = JSON.parseObject ( responseStr2 , new TypeReference < Result < Map < String , Object > > > ( ) { } ) ; } 在运行过程中可以看到内存一直在稳定增长，请问为什么没有释放掉？ 如果循环里面没有使用TypeReference，内存稳定在一定区域。 我使用的是 compile 'com.alibaba : fastjson:1.1.58.android' 如果使用方式有问题，请帮我指出，谢谢！
在xml设置全局时间格式后，实体类中设置时间格式无效，始终使用全局格式 __EoT__ SpringMVC配置 `` ` < bean id= '' fastJsonHttpMessageConverter '' class= '' com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter '' > < property name= '' supportedMediaTypes '' > < list > < value > text/html ; charset=UTF-8 < /value > < value > application/json ; charset=UTF-8 < /value > < /list > < /property > < property name= '' fastJsonConfig '' > < bean class= '' com.alibaba.fastjson.support.config.FastJsonConfig '' > < property name= '' features '' > < list > < value > AllowArbitraryCommas < /value > < value > AllowUnQuotedFieldNames < /value > < value > DisableCircularReferenceDetect < /value > < /list > < /property > < property name= '' dateFormat '' value= '' yyyy-MM-dd '' > < /property > < property name= '' serializerFeatures '' > < list > < value > QuoteFieldNames < /value > < value > WriteMapNullValue < /value > < value > WriteNullListAsEmpty < /value > < value > WriteDateUseDateFormat < /value > < /list > < /property > < /bean > < /property > < /bean > `` ` 实体： `` ` public class AccountExt { @ JSONField ( format= '' yyyy-MM-dd HH : mm : ss '' ) private Date createDate ; public Date getCreateDate ( ) {
alternateNames在DefaultJSONParser格式化时结果不正确 __EoT__ compile 'com.alibaba : fastjson:1.2.33' compile 'com.alibaba : fastjson:1.1.58.android' 使用alternateNames定义类如下 `` ` java /** * { `` name '' : '' name '' , '' id '' :1 } * { `` user '' : '' user '' , '' id '' :2 } */ public static class AlternateNames { @ JSONField ( alternateNames = { `` name '' , `` user '' } ) public String name ; public int id ; } `` ` 测试代码如下 `` ` java void testAlternateNames ( ) { String json1 = `` { \ '' name\ '' : \ '' name\ '' , \ '' id\ '' :1 } '' ; String json2 = `` { \ '' user\ '' : \ '' user\ '' , \ '' id\ '' :2 } '' ; AlternateNames c1 = JSON.parseObject ( json1 , AlternateNames.class ) ; //OK AlternateNames c2 = JSON.parseObject ( json2 , AlternateNames.class ) ; //OK DefaultJSONParser parser = new DefaultJSONParser ( json1 ) ; c1 = new AlternateNames ( ) ; parser.parseObject ( c1 ) ; //OK c2 = new AlternateNames ( ) ; parser = new DefaultJSONParser ( json2 ) ; parser.parse ( c2 ) ; //ERROR , c2.name==null com.alibaba.fastjson.JSONObject
alternateNames在DefaultJSONParser格式化时结果不正确 __EoT__ compile 'com.alibaba : fastjson:1.2.33' compile 'com.alibaba : fastjson:1.1.58.android' 使用alternateNames定义类如下 `` ` java /** * { `` name '' : '' name '' , '' id '' :1 } * { `` user '' : '' user '' , '' id '' :2 } */ public static class AlternateNames { @ JSONField ( alternateNames = { `` name '' , `` user '' } ) public String name ; public int id ; } `` ` 测试代码如下 `` ` java void testAlternateNames ( ) { String json1 = `` { \ '' name\ '' : \ '' name\ '' , \ '' id\ '' :1 } '' ; String json2 = `` { \ '' user\ '' : \ '' user\ '' , \ '' id\ '' :2 } '' ; AlternateNames c1 = JSON.parseObject ( json1 , AlternateNames.class ) ; //OK AlternateNames c2 = JSON.parseObject ( json2 , AlternateNames.class ) ; //OK DefaultJSONParser parser = new DefaultJSONParser ( json1 ) ; c1 = new AlternateNames ( ) ; parser.parseObject ( c1 ) ; //OK c2 = new AlternateNames ( ) ; parser = new DefaultJSONParser ( json2 ) ; parser.parse ( c2 ) ; //ERROR , c2.name==null com.alibaba.fastjson.JSONObject
fastjson反序列化异常类时丢失信息 __EoT__ 自定义的一些字段并没有被反序列化： 我定义的类内容如下： `` ` java public class MyException extends RuntimeException { private static final long serialVersionUID = 7815426752583648734L ; private long code ; public MyException ( ) { super ( ) ; } public MyException ( String message , Throwable cause ) { super ( message , cause ) ; } public MyException ( String message ) { super ( message ) ; } public MyException ( Throwable cause ) { super ( cause ) ; } public MyException ( long code ) { super ( ) ; this.code = code ; } public MyException ( long code , String message , Throwable cause ) { super ( message , cause ) ; this.code = code ; } public MyException ( long code , String message ) { super ( message ) ; this.code = code ; } public MyException ( long code , Throwable cause ) { super ( cause ) ; this.code = code ; } public void setCode ( long code ) { this.code = code ; } public long getCode ( ) { return code ; } @ Override public String toString ( ) { return `` MyException { `` + `` code= ''
LinkedMultiValueMap在JavaBean中无法反序列化 __EoT__ `` ` Java import org.springframework.util.LinkedMultiValueMap ; @ Data public class PushHttpMessage { private LinkedMultiValueMap < String , String > message ; private String url ; } String json = `` { \ '' message\ '' : { \ '' refund_fee\ '' : [ \ '' 0.01\ '' ] , \ '' pay_fee\ '' : [ \ '' 0.01\ '' ] } , \ '' url\ '' : \ '' http : //localhost:8080\ '' } '' ; LinkedMultiValueMap message = JSON.parseObject ( JSON.parseObject ( json ) .getString ( `` message '' ) , LinkedMultiValueMap.class ) ; // 这是可以反序列化通过的 PushHttpMessage pushHttpMessage = JSON.parseObject ( json , PushHttpMessage.class ) ; // 这里反序列化失败里 `` `
class泄漏问题 __EoT__ 在jetty容器中用fastjson序列化HttpServletRequest对象或导致class泄漏，严重时会导致meta区溢出，导致无限FGC。详见 : [ 分析文档 ] ( http : //13009206.blog.51cto.com/12999206/1934624 )
android 1.1.57版本 @ SeeAlso功能在分层json解析的时候会有问题 __EoT__ `` ` { `` isTest '' : true , `` mockResult '' : { `` body '' : { `` areas '' : [ { `` type '' : `` floorV2 '' , `` templateId '' : `` base '' } , { `` type '' : `` floorV2 '' , `` templateId '' : `` base '' } ] } , `` head '' : { `` code '' : `` 200 '' } } } `` ` JSON 数据如上所示： Area： `` ` @ JSONType ( seeAlso = { FloorV1.class , FloorV2.class , Section.class } ) public interface Area { public static final String TYPE_SECTION = `` section '' ; public static final String TYPE_FLOORV1 = `` floorV1 '' ; public static final String TYPE_FLOORV2 = `` floorV2 '' ; String getName ( ) ; } `` ` FloorV2： `` ` @ JSONType ( typeName = `` floorV2 '' ) public class FloorV2 implements Area { public String type ; public String templateId ; @ Override public String getName ( ) { return templateId ; } } `` ` 网络返回数据NetResponse `` ` public class NetResponse { public Head head ; public static class Head
JSONField 反序列化iso-8601日期格式 “ 0001-01-01T00:00:00 ” 失败 __EoT__ @ wenshao JSONField 反序列化iso-8601日期格式 “ 0001-01-01T00:00:00 ” 异常，试了一下小于 “ 1000-01-01T00:00:00 ” 这个时间就异常，否则可以成功。 小于 “ 1000-01-01T00:00:00 ” 的结果： ` Exception in thread `` main '' com.alibaba.fastjson.JSONException : For input string : `` 0001-01-01T00:00:00 '' at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:646 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:350 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:254 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:467 ) at com.credfin.test0.main ( test0.java:16 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:39 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:25 ) at java.lang.reflect.Method.invoke ( Method.java:597 ) at com.intellij.rt.execution.application.AppMain.main ( AppMain.java:147 ) Caused by : java.lang.NumberFormatException : For input string : `` 0001-01-01T00:00:00 '' at java.lang.NumberFormatException.forInputString ( NumberFormatException.java:48 ) at java.lang.Long.parseLong ( Long.java:419 ) at java.lang.Long.parseLong ( Long.java:468 ) at com.alibaba.fastjson.serializer.DateCodec.cast ( DateCodec.java:202 ) at com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze ( AbstractDateDeserializer.java:142 ) at com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze ( AbstractDateDeserializer.java:19 ) at com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField ( DefaultFieldDeserializer.java:71 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField ( JavaBeanDeserializer.java:828 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:630 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest ( JavaBeanDeserializer.java:1010 ) at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_TestBean.deserialze ( Unknown Source ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:208 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:642 ) ... 9 more ` 大于等于 “ 1000-01-01T00:00:00 ” 的结果： ` 1000-01-01 00:00:00 ` 目前通过自定义反序列化deserializeUsing解决，但是不知道以上情况算不算bug . 测试代码： `` ` java public class TestBean { private Date shijian ; public Date getShijian (
toJavaObject 增加泛型支持 __EoT__ 参考 # 969 需求，将一个json字符串中的某个key转换成JavaBean。 `` ` java jsonobj.getJSONObject ( `` key '' ) .toJavaObject ( new TypeReference < List < vo > > ( ) { } .getType ( ) ) ; `` ` 报错， ` The method getObject ( String , Class < T > ) in the type JSONObject is not applicable for the arguments ( String , Type ) `
JSONField 反序列化iso-8601日期格式 “ 0001-01-01T00:00:00 ” 失败 __EoT__ @ wenshao JSONField 反序列化iso-8601日期格式 “ 0001-01-01T00:00:00 ” 异常，试了一下小于 “ 1000-01-01T00:00:00 ” 这个时间就异常，否则可以成功。 小于 “ 1000-01-01T00:00:00 ” 的结果： ` Exception in thread `` main '' com.alibaba.fastjson.JSONException : For input string : `` 0001-01-01T00:00:00 '' at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:646 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:350 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:254 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:467 ) at com.credfin.test0.main ( test0.java:16 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:39 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:25 ) at java.lang.reflect.Method.invoke ( Method.java:597 ) at com.intellij.rt.execution.application.AppMain.main ( AppMain.java:147 ) Caused by : java.lang.NumberFormatException : For input string : `` 0001-01-01T00:00:00 '' at java.lang.NumberFormatException.forInputString ( NumberFormatException.java:48 ) at java.lang.Long.parseLong ( Long.java:419 ) at java.lang.Long.parseLong ( Long.java:468 ) at com.alibaba.fastjson.serializer.DateCodec.cast ( DateCodec.java:202 ) at com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze ( AbstractDateDeserializer.java:142 ) at com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze ( AbstractDateDeserializer.java:19 ) at com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField ( DefaultFieldDeserializer.java:71 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField ( JavaBeanDeserializer.java:828 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:630 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest ( JavaBeanDeserializer.java:1010 ) at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_TestBean.deserialze ( Unknown Source ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:208 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:642 ) ... 9 more ` 大于等于 “ 1000-01-01T00:00:00 ” 的结果： ` 1000-01-01 00:00:00 ` 目前通过自定义反序列化deserializeUsing解决，但是不知道以上情况算不算bug . 测试代码： `` ` java public class TestBean { private Date shijian ; public Date getShijian (
1.2.29WriteNonStringValueAsString依旧不好用 __EoT__ test case : Map map = new HashMap ( ) ; map.put ( `` userId '' , 456 ) ; JSON.toJSONString ( map , SerializerFeature.WriteNonStringValueAsString ) ; 结果： { `` userId '' :456 }
springMVC中使用带下划线开头的变量 下划线丢失 __EoT__ springMVC4.3.8 fastjson版本1.2.32 < bean id= '' fastJsonHttpMessageConverter4 '' class= '' com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4 '' > 有一个实体中变量为_parentId 返回后前面的_就没有了 , 换成springMVC默认的转换器jackson2.8.2就没有问题
org.springframework.util.LinkedMultiValueMap反序列化失败 __EoT__ fastjson版本：1.2.32 LinkedMultiValueMap数据无法反序列化 testcase： `` ` ParserConfig.getGlobalInstance ( ) .setAutoTypeSupport ( true ) ; LinkedMultiValueMap < String , String > result = new LinkedMultiValueMap ( ) ; result.add ( `` test '' , `` 11111 '' ) ; String test = JSON.toJSONString ( result , SerializerFeature.WriteClassName ) ; JSON.parseObject ( test ) ; `` ` 报错信息： `` ` Exception in thread `` main '' com.alibaba.fastjson.JSONException : autoType is not support . org.springframework.util.LinkedMultiValueMap at com.alibaba.fastjson.parser.ParserConfig.checkAutoType ( ParserConfig.java:830 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:325 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parse ( DefaultJSONParser.java:1335 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parse ( DefaultJSONParser.java:1301 ) at com.alibaba.fastjson.JSON.parse ( JSON.java:152 ) at com.alibaba.fastjson.JSON.parse ( JSON.java:143 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:216 ) `` `
1.1.57.android 带泛型的多层继承类的解析bug __EoT__ 类似testcase [ Bug_for_generic_huansi.java ] ( https : //github.com/alibaba/fastjson/blob/android/src/test/java/com/alibaba/json/bvt/bug/Bug_for_generic_huansi.java ) 但在第二层继承的时候嵌套了List `` ` java @ RunWith ( JUnit4.class ) public class GenericObjectJsonParseTest { @ Test public void parseObject ( ) { assertEquals ( `` 2 '' , JSON.parseObject ( `` { \ '' data\ '' : [ \ '' 1\ '' , \ '' 2\ '' , \ '' 3\ '' ] } '' , new TypeReference < BaseGenericType < List < String > > > ( ) { } ) .data.get ( 1 ) ) ; assertEquals ( `` 2 '' , JSON.parseObject ( `` { \ '' data\ '' : [ \ '' 1\ '' , \ '' 2\ '' , \ '' 3\ '' ] } '' , new TypeReference < ExtendGenericType < String > > ( ) { } ) .data.get ( 1 ) ) ; assertEquals ( `` 2 '' , JSON.parseObject ( `` { \ '' data\ '' : [ \ '' 1\ '' , \ '' 2\ '' , \ '' 3\ '' ] , \ '' a\ '' : \ '' a\ '' } '' , SimpleGenericObject.class ) .data.get ( 1 ) ) ; } static class BaseGenericType < T
1.1.57.android DefaultFieldDeserializer 没有处理 parser.context 为 null 的情况，导致解析出错 __EoT__ 粗略看了下 [ DefaultJSONParser.java ] ( https : //github.com/alibaba/fastjson/blob/android/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java ) 代码，这个 [ context ] ( https : //github.com/alibaba/fastjson/blob/android/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java # L1320 ) 在 ` lexer.disableCircularReferenceDetect ` 为 true 的时候不会被赋值。即指定了 ` Feature.DisableCircularReferenceDetect ` 之后。 而 master 分支上的 [ DefaultFieldDeserializer.java ] ( https : //github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/parser/deserializer/DefaultFieldDeserializer.java # L51 ) 代码其实处理了。
1.2.29WriteNonStringValueAsString依旧不好用 __EoT__ test case : Map map = new HashMap ( ) ; map.put ( `` userId '' , 456 ) ; JSON.toJSONString ( map , SerializerFeature.WriteNonStringValueAsString ) ; 结果： { `` userId '' :456 }
fastjson能否设置不序列化lazy的数据？ __EoT__ springboot1.4.2 fastjson1.2.31 `` ` @ OneToMany ( mappedBy = `` department '' , fetch = FetchType.LAZY ) private List < Employee > employees ; `` ` 在entity中已经设置为fetch为lazy了 但是在序列化的时候 还是会去将这个lazy的数据加载出来 有没有类似于jackson中FORCE LAZY LOADING这样的设置？
fastjson 怎么这么不稳定啊？表示很伤心 __EoT__ 1.2.29版本 @ JSONField ( serialzeFeatures = SerializerFeature.WriteEnumUsingToString ) 无效，已经复写了toString方法，然后切换到1.2.32版本又好了，表示很伤心啊，温少 @ wenshao 这样怎么用到生产中啊？！求稳定，一直很看好fastjson的
fastjson转换对象时失败，对象中有两个map集合 __EoT__ `` ` java //这是javabean package com.potevio.sp.util.root ; import java.util.List ; import java.util.Map ; public class JsonBean { private Map < String , String > body ; private int headertemplateno ; private Map < String , String > headerdestination ; private String headernotificationtype ; private String notificationType ; public Map < String , String > getBody ( ) { return body ; } public void setBody ( Map < String , String > body ) { this.body = body ; } public int getHeadertemplateno ( ) { return headertemplateno ; } public void setHeadertemplateno ( int headertemplateno ) { this.headertemplateno = headertemplateno ; } public Map < String , String > getHeaderdestination ( ) { return headerdestination ; } public void setHeaderdestination ( Map < String , String > headerdestination ) { this.headerdestination = headerdestination ; } public String getHeadernotificationtype ( ) { return headernotificationtype ; } public void setHeadernotificationtype ( String headernotificationtype ) { this.headernotificationtype = headernotificationtype ; } public String getNotificationType ( ) { return notificationType ; } public void setNotificationType ( String notificationType ) { this.notificationType = notificationType ; } public JsonBean ( Map < String , String > body , int headertemplateno , Map <
注解 @ JSONField ( deserialize = false ) ，反系列化出错 __EoT__ 对象是这样的 `` ` public class Info { @ JSONField ( deserialize=false ) private List < Integer > ids ; private String name ; public List < Integer > getIds ( ) { return ids ; } public void setIds ( List < Integer > ids ) { this.ids = ids ; } public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } } `` ` json是 ` { `` ids '' : '' 1,2 '' , '' name '' : '' abc '' } ` 反系列化是正常的 , ids 也是 null 当json是 ` { `` ids '' : '' a1 , a2 '' , '' name '' : '' abc '' } ` 就出错了 `` ` Exception in thread `` main '' com.alibaba.fastjson.JSONException : For input string : `` a1a2 '' at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:646 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:350 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:254 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:467 ) at com.huateng.weixin.Test.main ( Test.java:54 ) Caused by : java.lang.NumberFormatException : For input string : `` a1a2 '' at java.lang.NumberFormatException.forInputString ( NumberFormatException.java:65 ) at java.lang.Integer.parseInt ( Integer.java:492 )
JSONPath `` deepScan属性访问，例如 $ ..name '' 抛出异常 __EoT__ 使用1.2.8版本，main方法中执行以下代码： ` String text = `` { \ '' a\ '' : { \ '' b\ '' : \ '' c\ '' , \ '' g\ '' : { \ '' e\ '' : \ '' f\ '' } } , \ '' d\ '' : { \ '' a\ '' : \ '' f\ '' , \ '' h\ '' : [ \ '' s1\ '' ] } } `` ; JSONObject jsonObject = JSONObject.parseObject ( text ) ; Object eval = JSONPath.eval ( jsonObject , `` $ ..a '' ) ; ` 抛出异常 Exception in thread `` main '' com.alibaba.fastjson.JSONPathException : illeal jsonpath syntax . $ ..a at com.alibaba.fastjson.JSONPath $ JSONPathParser.readName ( JSONPath.java:826 ) at com.alibaba.fastjson.JSONPath $ JSONPathParser.readSegement ( JSONPath.java:356 ) at com.alibaba.fastjson.JSONPath $ JSONPathParser.explain ( JSONPath.java:889 ) at com.alibaba.fastjson.JSONPath.init ( JSONPath.java:66 ) at com.alibaba.fastjson.JSONPath.eval ( JSONPath.java:75 ) at com.alibaba.fastjson.JSONPath.eval ( JSONPath.java:251 ) at com.apidocs.test.test.main ( test.java:65 )
JSONPath `` deepScan属性访问，例如 $ ..name '' 抛出异常 __EoT__ 使用1.2.8版本，main方法中执行以下代码： ` String text = `` { \ '' a\ '' : { \ '' b\ '' : \ '' c\ '' , \ '' g\ '' : { \ '' e\ '' : \ '' f\ '' } } , \ '' d\ '' : { \ '' a\ '' : \ '' f\ '' , \ '' h\ '' : [ \ '' s1\ '' ] } } `` ; JSONObject jsonObject = JSONObject.parseObject ( text ) ; Object eval = JSONPath.eval ( jsonObject , `` $ ..a '' ) ; ` 抛出异常 Exception in thread `` main '' com.alibaba.fastjson.JSONPathException : illeal jsonpath syntax . $ ..a at com.alibaba.fastjson.JSONPath $ JSONPathParser.readName ( JSONPath.java:826 ) at com.alibaba.fastjson.JSONPath $ JSONPathParser.readSegement ( JSONPath.java:356 ) at com.alibaba.fastjson.JSONPath $ JSONPathParser.explain ( JSONPath.java:889 ) at com.alibaba.fastjson.JSONPath.init ( JSONPath.java:66 ) at com.alibaba.fastjson.JSONPath.eval ( JSONPath.java:75 ) at com.alibaba.fastjson.JSONPath.eval ( JSONPath.java:251 ) at com.apidocs.test.test.main ( test.java:65 )
JSON.toJavaObject ca n't be compatible __EoT__ `` ` public class TestModel implements Serializable { public String info ; } `` ` `` ` String json = `` { \n '' + `` \ '' info\ '' : { \n '' + `` \ '' test\ '' : \ '' \ '' , \n '' + `` } \n '' + `` } '' ; JSONObject jsonObject = JSON.parseObject ( json ) ; TestModel loginResponse = JSON.toJavaObject ( jsonObject , TestModel.class ) ; `` ` If I use the version < = 1.1.46.android , there is no problem.But if I use the version > 1.1.46.android , it will throw a JSONException ( can not get javaBeanDeseriallizer ) I must write the modle like this when the version > 1.1.46.android `` ` public class TestModel implements Serializable { public JSONObject info ; } `` ` Is there any solution？
1.2.31版JSONField的問題 __EoT__ 我的class裡使用如下 : @ JSONField ( ordinal = 1 , name= '' Dimension '' ) private int dimension ; @ JSONField ( ordinal = 2 , name= '' PassCode '' ) private String passCode ; @ JSONField ( ordinal = 3 , name= '' BlockPos '' ) private BlockPos blockpos ; 但輸出純文字資料後的內容卻沒有照著排列 , 而且blockpos字母也沒有依照大小寫去更動 . 如下 : [ [ { `` PassCode '' : '' 010 '' , '' blockPos '' : { `` x '' :526 , '' y '' :65 , '' z '' :554 } , '' Dimension '' :0 } ] ]
JSONField在某些场景下不起作用 __EoT__ 1 . 不是is/set开头的setter方法 2 . 方法名称长度小于4的方法
支持PrivateField的序列化和反序列化 __EoT__
如果字段字母大写 @ JSONField不起作用 __EoT__ @ JSONField ( name= '' REQ_NO '' ) private String ReqNo ; 字段字母大写 输出结果为 '' reqNo ''
支持PrivateField的序列化和反序列化 __EoT__
支持限制输出的json串长度 __EoT__
解析属性第一位是数字时异常 NumberFormatException __EoT__ # # 当属性的第一位是数字时（如：345_xiu），JsonPath尝试将属性转换为Integer类型，出现java.lang.NumberFormatException。 我的解决方案是在传入表达式时添加 '' \\ '' 进行转义，伪代码： String path = `` $ .xiu.\\345_xiu '' ; JsonPath.eval ( jsonOgject , path ) ; 希望有更好的解决方法。
关于时间格式化的问题 __EoT__ 请问一下， { `` Grade '' : 1 , `` UpdateTime '' : `` 2017-03-22 11:41:17 '' } 类似于这种json， 使用JSON.parse ( str ) 得到一个Map后，是否支持UpdateTime字段默认格式化成一个Date，而不是字符串
当json中有下划线和无下划线的相似属性名时解析结果有可能错误 __EoT__ json串中有两个属性，名称为ab和a_b，差别是一个有下划线而另一个没有，当解析对象时，如果对象的定义中只有ab一个属性，则解析出来的对象中ab的值可能会是json串中a_b属性的值，解析成哪个值跟json串中ab和a_b的顺序有关： `` ` java @ Test public void parseTest ( ) { String json = `` { \ '' ab\ '' :123 , \ '' a_b\ '' :456 } '' ; TestBean tb = JSON.parseObject ( json , TestBean.class ) ; Assert.assertEquals ( 123 , tb.getAb ( ) ) ; } private static class TestBean { private int ab ; public int getAb ( ) { return ab ; } public void setAb ( int ab ) { this.ab = ab ; } } `` ` 结果 java.lang.AssertionError : expected : < 123 > but was : < 456 > 测试在1.2.28，1.2.29中有此问题。
可否开放抽象类的工厂方法构造 __EoT__ 在1.1.56.android版本里确认到，在生成JavaBeanInfo的时候检测标记有 @ JSONCreator工厂方法的条件是该类必须是非抽象的类。 我可以理解对构造函数必须限制是非抽象的实体类，但是就个人经验来说，工厂方法应该没有必要限制必须是实体类。 如果是出于考量特别作的限制，还请科普一下限制的原因。 如果没有必需的原因，还请开放限制，让（.android版本的）抽象类也可以通过标注了 @ JSONCreator的工厂方法来实例化，这样就方便和Google的Auto Value库一起用了。 谢谢
在反序列化非静态内部类，异常信息优化 __EoT__ 亲 提交一个建议哈： fastjson在反序列化非静态内部类的时候，能不能直接写异常说不支持非静态内部类：）
1.1.33fastjason升级到1.2.28转换报错 __EoT__ 严重 : Servlet.service ( ) for servlet springservlet threw exception java.lang.NumberFormatException : For input string : `` 2017-3-17 00:00:01 '' at java.lang.NumberFormatException.forInputString ( Unknown Source ) at java.lang.Long.parseLong ( Unknown Source ) at java.lang.Long.parseLong ( Unknown Source ) at com.alibaba.fastjson.serializer.DateCodec.cast ( DateCodec.java:202 ) at com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze ( AbstractDateDeserializer.java:142 ) at com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze ( AbstractDateDeserializer.java:19 ) at com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField ( DefaultFieldDeserializer.java:71 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField ( JavaBeanDeserializer.java:790 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:595 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest ( JavaBeanDeserializer.java:948 ) at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_2_OnlinePayOrWithdrawOrderQueryUp.deserialze ( Unknown Source ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:184 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:642 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:350 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:318 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:281 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:381 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:463 ) at com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.read ( FastJsonHttpMessageConverter.java:192 ) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters ( AbstractMessageConverterMethodArgumentResolver.java:138 ) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters ( RequestResponseBodyMethodProcessor.java:184 ) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument ( RequestResponseBodyMethodProcessor.java:105 ) at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument ( HandlerMethodArgumentResolverComposite.java:77 ) at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues ( InvocableHandlerMethod.java:162 ) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest ( InvocableHandlerMethod.java:129 ) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle ( ServletInvocableHandlerMethod.java:110 ) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod ( RequestMappingHandlerAdapter.java:777 ) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal ( RequestMappingHandlerAdapter.java:706 ) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle ( AbstractHandlerMethodAdapter.java:85 ) at org.springframework.web.servlet.DispatcherServlet.doDispatch ( DispatcherServlet.java:943 ) at org.springframework.web.servlet.DispatcherServlet.doService ( DispatcherServlet.java:877 ) at org.springframework.web.servlet.FrameworkServlet.processRequest ( FrameworkServlet.java:966 ) at org.springframework.web.servlet.FrameworkServlet.doPost ( FrameworkServlet.java:868 ) at javax.servlet.http.HttpServlet.service ( HttpServlet.java:643 ) at org.springframework.web.servlet.FrameworkServlet.service ( FrameworkServlet.java:842
fastjson 1.2.28的一个反序列化bug __EoT__ 如题，原因还没定，先简单把复现的case贴上，请过目。 `` ` java //================= BaseDTO ============ public class BaseDTO implements Serializable { /** * serialVersionUID */ private static final long serialVersionUID = -1 ; /** * version */ private String version ; /** * is online test */ private Boolean onlineTest = Boolean.FALSE ; /** * http referer */ private String referer ; public String getVersion ( ) { return version ; } public void setVersion ( String version ) { this.version = version ; } public Boolean isOnlineTest ( ) { return onlineTest ; } public void setOnlineTest ( Boolean onlineTest ) { this.onlineTest = onlineTest ; } public String getReferer ( ) { return referer ; } public void setReferer ( String referer ) { this.referer = referer ; } @ Override public String toString ( ) { return `` BaseDTO [ version= '' + version + `` , onlineTest= '' + onlineTest + `` , referer= '' + referer + `` ] '' ; } } //============ BankCard ============= public class BankCard implements Serializable { private static final long serialVersionUID = -8043292491053382301L ; public static final Integer CARD_TYPE_DEBIT = 1 ; //借记卡 public static final Integer CARD_TYPE_CREDIT = 2 ; //贷记卡 private Long
通过Fastjson的jsonpath得到的数据与jayway官方JsonPath得到数据不一样 __EoT__ 场景是这样，有一个多层array结构的文档，现在需要获取最底层的array的元素。代码如下 `` ` public static void main ( String [ ] args ) { String DOC = `` { \ '' books\ '' : [ { \ '' pageWords\ '' : [ { \ '' num\ '' :10 } , { \ '' num\ '' :15 } ] } , { \ '' pageWords\ '' : [ { \ '' num\ '' :20 } ] } ] } '' ; //fastjson包 JSONObject result = JSONObject.parseObject ( DOC ) ; Object eval = JSONPath.eval ( result , `` $ .books [ 0 : ] .pageWords [ 0 : ] '' ) ; System.out.println ( JSONObject.toJSONString ( eval ) ) ; //jayway包 DocumentContext parse = JsonPath.parse ( DOC ) ; Object read = parse.read ( `` $ .books [ 0 : ] .pageWords [ 0 : ] '' ) ; System.out.println ( read.toString ( ) ) ; } `` ` 结果： `` ` [ [ { `` num '' :10 } , { `` num '' :15 } ] , [ { `` num '' :20 } ] ] [ { `` num '' :10 } , { `` num '' :15 } , { `` num '' :20 }
productJson.toJavaObject ( Product.class ) 不能反序列化XMLGregorianCalendar类型，但是JSON.parseObject ( productJson ( ) .toJSONString ( ) , Product.class ) 可以 __EoT__ 1.2.24版本 productJson 是mybatis从数据库jsonb字段的数据，JSONObject类型，通过productJson.toJSONString ( ) 后的字符串根平常json字符串一样。 本来想有了productJson之后可以直接调用productJson .toJavaObject ( Product.class ) 反序列化成Product对象的，但是报错： `` ` com.alibaba.fastjson.JSONException : can not cast to : javax.xml.datatype.XMLGregorianCalendar `` ` 而通过JSON.parseObject ( productJson ( ) .toJSONString ( ) , Product.class ) 切可以反序列化成功。 虽然可以做到，但是用法上不如前者。
Timestamp/sql.Date类型在JSON.parseObject和JSONObject.getObject转换成Bean的结果不同 __EoT__ 测试Case： `` ` java public static class TimestampBean { private Timestamp timestamp = null ; public Timestamp getTimestamp ( ) { return timestamp ; } public void setTimestamp ( Timestamp timestamp ) { this.timestamp = timestamp ; } } public static void main ( String [ ] args ) throws Exception { JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.DisableCircularReferenceDetect.getMask ( ) ; JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteDateUseDateFormat.getMask ( ) ; TimestampBean bean = new TimestampBean ( ) ; bean.setTimestamp ( new Timestamp ( System.currentTimeMillis ( ) ) ) ; String timestampJson = JSON.toJSONString ( bean ) ; System.out.println ( timestampJson ) ; // 这里能转换成功 TimestampBean beanOfJSON = JSON.parseObject ( timestampJson , TimestampBean.class ) ; System.out.println ( beanOfJSON.toString ( ) ) ; // 这里抛异常 java.lang.NumberFormatException JSONObject jsonObject = JSON.parseObject ( timestampJson ) ; Timestamp beanOfJsonObject = jsonObject.getObject ( `` timestamp '' , Timestamp.class ) ; System.out.println ( beanOfJsonObject.toString ( ) ) ; } `` `
Unexpected behaviour on deserializing ` char [ ] ` type __EoT__ This issue is to resume the closed # 776 `` ` java public static void main ( String [ ] args ) throws Exception { //Act.start ( `` Hello World '' ) ; jackson ( ) ; fastjson ( ) ; } private static final String INPUT = `` [ \ '' \ '' , \ '' b\ '' , \ '' c\ '' ] '' ; public static void jackson ( ) throws Exception { ObjectMapper om = new ObjectMapper ( ) ; char [ ] ca = om.readValue ( INPUT , new TypeReference < char [ ] > ( ) { } ) ; System.out.println ( `` === Jackson === '' ) ; System.out.println ( $ .toString2 ( ca ) ) ; } public static void fastjson ( ) throws Exception { char [ ] ca = JSON.parseObject ( INPUT , new com.alibaba.fastjson.TypeReference < char [ ] > ( ) { } ) ; System.out.println ( `` === FastJson === '' ) ; System.out.println ( $ .toString2 ( ca ) ) ; } `` ` Execute above program I got the following output : ! [ image
It shall raise exception when double type value is out of the scope __EoT__ This is a sub issue of # 868 which fixed the value overflow issue on Float , but not on Double
bug fixed for issue 1036 ( DefaultFieldDeserializer ) . __EoT__ fixed # 1036 。 在 `` ` DefaultFieldDeserializer . parseField `` ` 处理的时候，如果 `` ` fieldValueDeserilizer `` ` 为 `` ` JavaBeanDeserializer `` ` 的子类时，直接调用 `` ` deserialze ( DefaultJSONParser parser , Type type , Object fieldName , int features ) `` ` 方法不会走子类的反序列化实现。 问题在1.2.12版本引入，似乎是BeanToArray特性引起 .
v1.2.7：JSON.toJSONString ( ) 方法在参数为net.sf.JSONObject并且其中包含null值的时候会抛空指针异常 __EoT__ `` ` code public static void main ( String [ ] args ) { net.sf.JSONObject map = JSONObject.fromObject ( `` { \ '' test\ '' : null } '' ) ; System.out.println ( JSON.toJSONString ( map ) ) ; } `` ` `` ` output Exception in thread `` main '' net.sf.json.JSONException : Object is null at net.sf.json.JSONNull.isEmpty ( JSONNull.java:69 ) at Serializer_1.write1 ( Unknown Source ) at Serializer_1.write ( Unknown Source ) at com.alibaba.fastjson.serializer.MapSerializer.write ( MapSerializer.java:189 ) at com.alibaba.fastjson.serializer.JSONSerializer.write ( JSONSerializer.java:374 ) at com.alibaba.fastjson.JSON.toJSONString ( JSON.java:394 ) at com.alibaba.fastjson.JSON.toJSONString ( JSON.java:382 ) at com.huawei.cloudsop.decomp.core.common.InputAssignment.main ( InputAssignment.java:57 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:497 ) at com.intellij.rt.execution.application.AppMain.main ( AppMain.java:147 ) `` `
序列化对象时与预期不符 __EoT__ 对于一个类Student , 有以下属性 : `` ` @ JSONField ( name= '' student_name '' , ordinal = 0 ) private String name ; @ JSONField ( name= '' student_age '' , ordinal = 1 ) private int age ; @ JSONField ( name= '' student_grade '' , ordinal = 2 ) private String grade ; `` ` 序列化时 : `` ` Student student=new Student ( ) ; student.setName ( `` 小刚 '' ) ; `` ` 如果使用这种方法 : `` ` JSON.toJSONString ( student , SerializerFeature.WRITE_MAP_NULL_FEATURES ) `` ` 输出结果为 : `` ` { student_name : '' 小刚 '' , student_age:0 , student_grade : '' '' } `` ` 如果使用这种方法 : `` ` JSON.toJSONString ( student , SerializerFeature.WRITE_MAP_NULL_FEATURES , SerializerFeature.QuoteFieldNames ) `` ` 才得到预期结果 , `` ` SerializerFeature.QuoteFieldNames `` ` 这个属性设计的时候不是默认开启的么 , 为什么在这里需要开启
JSONPOJOBuilder does not work when using JSONObject / JSONArray.getObject __EoT__ > 测试用例 `` ` java private Art makeOrigin ( ) { final long unixTime = System.currentTimeMillis ( ) / 1000 ; final Art origin = new Art ( ) ; origin.id = `` 12 '' ; origin.date = new SimpleDateFormat ( `` yyyy-MM-dd '' , Locale.getDefault ( ) ) .format ( new Date ( unixTime * 1000 ) ) ; origin.isSupported = true ; return origin ; } @ Test public void checkObject ( ) { Art origin = makeOrigin ( ) ; JSONObject articleObj = ( JSONObject ) JSON.toJSON ( origin ) ; JSONObject dataObj = new JSONObject ( ) ; dataObj.put ( `` art '' , articleObj ) ; Art other = dataObj.getObject ( `` art '' , Art.class ) ; // return null ; assertSame ( origin , other ) ; // test failed } @ Test public void checkArray ( ) throws Exception { Art origin = makeOrigin ( ) ; JSONObject object = ( JSONObject ) JSON.toJSON ( origin ) ; JSONArray jsonArray = new JSONArray ( ) ; jsonArray.add ( object ) ; Art other = JSON.parseObject ( jsonArray.getString ( 0 ) , Art.class
com.alibaba.fastjson.JSONException : Invalid long : `` 2016-11-10T11:40:42.4Z '' __EoT__ 在retrofit使用.addConverterFactory ( FastJsonConverterFactory.create ( ) ) 出现的问题 解析字段 `` createdAt '' : `` 2016-11-09T09:57:20.445Z '' ，当Z前为三位时可以解析，如果为一位则解析失败报异常。 即使在字段上加上注解也没用 @ JSONField ( format = `` yyyy-MM-dd'T'HH : mm : ss.SSS'Z ' '' )
能够针对Entry增加新特性 __EoT__ 能否增加对Entry的默认序列化和反序列化，默认序列化为 { key : value } , 反序列化默认用AbstractMap的SimpleEntry
能够针对Entry增加新特性 __EoT__ 能否增加对Entry的默认序列化和反序列化，默认序列化为 { key : value } , 反序列化默认用AbstractMap的SimpleEntry
serializeUsing在接口类型的字段上的问题 __EoT__ 下面getMyObject方法获取的是同样内容个对象，区别是一个用HashMap一个用TreeMap。但第二次序列化的时候将不会用serializeUsing中指定的类去序列化 public class Mock { @ Test public void test ( ) { Assert.assertEquals ( JSON.toJSONString ( getMyObject ( new HashMap < String , Name > ( ) ) ) , JSON.toJSONString ( getMyObject ( new TreeMap < String , Name > ( ) ) ) ) ; } private static MyObject getMyObject ( Map < String , Name > names ) { MyObject mapObj = new MyObject ( ) ; mapObj.setNames ( names ) ; Name name = new Name ( ) ; name.setFirst ( `` foo '' ) ; name.setSecond ( `` boo '' ) ; names.put ( `` mock '' , name ) ; return mapObj ; } public static class NameMapCodec implements ObjectSerializer { @ Override public void write ( JSONSerializer serializer , Object object , Object fieldName , Type fieldType , int features ) throws IOException { JSONObject names = new JSONObject ( ) ; for ( Map.Entry < String , Name > entry : ( ( Map < String , Name > ) object ) .entrySet ( ) ) { Name name = entry.getValue ( ) ; names.put ( entry.getKey ( ) , name.getFirst ( ) + `` : '' + name.getSecond
retrofit2 support __EoT__ Does anyone would like to make supports to the converter for retrofit 2 [ this library ] ( https : //github.com/ligboy/retrofit-converter-fastjson ) ?
ZonedDateTime反序列化报错 __EoT__ 我清楚如果不涉及到跨时区，用LocalDateTime会更容易，但是现有系统设计时就用了ZonedDateTime `` ` java public class VO { @ JSONField ( format= '' yyyy-MM-dd HH : mm : ss '' ) private ZonedDateTime modifyTime=ZonedDateTime .now ( ) ; // ... getter/setter } System.err.println ( JSON.toJSONString ( new VO ( ) ) ) ; // { `` modifyTime '' : `` 2017-01-04 13:21:39 '' } 输出的是东八区，也就是按照 @ JSONField输出本地时区的日期时间 `` ` 但是反序列化就不行了 `` ` java JSON.parseObject ( `` { 'modifyTime ' : '2017-01-04 13:21:39 ' } '' , VO.class ) ; Exception in thread `` main '' com.alibaba.fastjson.JSONException : Text '2017-01-04 13:21:39 ' could not be parsed at index 10 at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:643 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:339 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:243 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:456 ) at demo.main ( demo.java:179 ) Caused by : java.time.format.DateTimeParseException : Text '2017-01-04 13:21:39 ' could not be parsed at index 10 at java.time.format.DateTimeFormatter.parseResolved0 ( DateTimeFormatter.java:1949 ) at java.time.format.DateTimeFormatter.parse ( DateTimeFormatter.java:1851 ) at java.time.ZonedDateTime.parse ( ZonedDateTime.java:597 ) at java.time.ZonedDateTime.parse ( ZonedDateTime.java:582 ) at com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.deserialze ( Jdk8DateCodec.java:95 ) at com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField ( DefaultFieldDeserializer.java:66 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField ( JavaBeanDeserializer.java:722 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:568 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:187 ) at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:183 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:639 ) ... 4 more ``
Have any method with JSONArray like JSONObject.toJavaObject ( Clazz < T > T ) ？ __EoT__ such as JSONArray.toJavaArray ( Clazz < T > T ) , like this : `` ` java @ Override public void onNext ( JSONObject json ) { List < Example > examples = json.getJSONObject ( `` examples '' ) .toJavaArray ( Example.class ) ; } `` `
带注释的json反序列化失败 __EoT__ `` ` java { '' isDebug '' : true/*调试状态*/ } `` ` github星号显示不出来
fastjson在序列化JDK8的LocalDateTime是 , 无法设置日期格式 . __EoT__ 使用的是 1.2.21 这个版本 . 不管我设不设置 ` SerializerFeature.WriteDateUseDateFormat ` 或者调用 ` JSON.toJSONStringWithDateFormat ` 都没有其效果 . 最后生成的JSON还是 LocalDateTime.toString 的样式 . 翻了一下源码 . 发现 `` ` Jdk8DateCodec # write ( JSONSerializer serializer , Object object , Object fieldName , Type fieldType , int features ) `` ` 这个类 . 在直接调用 ` JSON.toJSONStringWithDateFormat ( LocalDateTime.now ( ) ) ` 的时候 , 传入的 ` fieldType ` 为null , 导致走到 ` out.writeString ( object.toString ( ) ) ; ` 去了 . 从而生成的json为LocalDateTime.toString的格式 . 而如果是在一个JAVABean中有LocalDateTime字段 , 进行序列化的时候 . 传入的fieldType是正常的 ` LocalDateTime.class ` . 但是 ` if ( dateTime.getNano ( ) == 0 ) ` 这句过不到 , 导致还是走到 ` out.writeString ( object.toString ( ) ) ; ` 中去了.从而生成的json为LocalDateTime.toString的格式 . 不大理解 ` if ( dateTime.getNano ( ) == 0 ) ` 这句话在这的目的是什么~ 只要我实例化LocalDateTime的时候使用 ` LocalDateTime.now ( ) .withNano ( 0 ) ` 就可以格式化时间了 . 谢谢 !
使用1.2.21 的SkipTransientField不起作用 __EoT__ transient的属性依然被序列化，应该是要忽略掉transient的属性
fastjson在序列化JDK8的LocalDateTime是 , 无法设置日期格式 . __EoT__ 使用的是 1.2.21 这个版本 . 不管我设不设置 ` SerializerFeature.WriteDateUseDateFormat ` 或者调用 ` JSON.toJSONStringWithDateFormat ` 都没有其效果 . 最后生成的JSON还是 LocalDateTime.toString 的样式 . 翻了一下源码 . 发现 `` ` Jdk8DateCodec # write ( JSONSerializer serializer , Object object , Object fieldName , Type fieldType , int features ) `` ` 这个类 . 在直接调用 ` JSON.toJSONStringWithDateFormat ( LocalDateTime.now ( ) ) ` 的时候 , 传入的 ` fieldType ` 为null , 导致走到 ` out.writeString ( object.toString ( ) ) ; ` 去了 . 从而生成的json为LocalDateTime.toString的格式 . 而如果是在一个JAVABean中有LocalDateTime字段 , 进行序列化的时候 . 传入的fieldType是正常的 ` LocalDateTime.class ` . 但是 ` if ( dateTime.getNano ( ) == 0 ) ` 这句过不到 , 导致还是走到 ` out.writeString ( object.toString ( ) ) ; ` 中去了.从而生成的json为LocalDateTime.toString的格式 . 不大理解 ` if ( dateTime.getNano ( ) == 0 ) ` 这句话在这的目的是什么~ 只要我实例化LocalDateTime的时候使用 ` LocalDateTime.now ( ) .withNano ( 0 ) ` 就可以格式化时间了 . 谢谢 !
JDK8的LocalDateTime字段序列化不支持UseISO8601DateFormat __EoT__ 使用版本：1.2.22 序列化VO对象中包含LocalDateTime，设置参数UseISO8601DateFormat 输出结果为：yyyy-MM-dd HH : mm : ss 期望结果为：yyyy-MM-dd'T'HH : mm : ss
对象列表的反序列化时最后一个对象的json如果没有逗号就会缺少属性 __EoT__ 用如下json反序列化这样一个属性private List < Symbol > symbols ; ，如果 { `` id '' :13 , '' type '' : '' BONUS '' } 这行最后不带逗号，序列化后再输出，则type属性就丢失了 ( 如果带逗号则好使 ) ，type是个枚举类型。 `` symbols '' : [ { `` id '' :1 , '' type '' : '' NORMAL '' } , { `` id '' :2 , '' type '' : '' NORMAL '' } , { `` id '' :3 , '' type '' : '' NORMAL '' } , { `` id '' :4 , '' type '' : '' NORMAL '' } , { `` id '' :5 , '' type '' : '' NORMAL '' } , { `` id '' :6 , '' type '' : '' NORMAL '' } , { `` id '' :7 , '' type '' : '' NORMAL '' } , { `` id '' :8 , '' type '' : '' NORMAL '' } , { `` id '' :9 , '' type '' : '' NORMAL '' } , { `` id '' :10 , '' type '' : '' NORMAL '' } , { `` id '' :11 , '' type '' : '' WILD '' } , {
Error : jdk1.8下asm系列化有缺省方法的接口 __EoT__ jdk1.8支持接口缺省方法，JavaBeanSerializer系列化正常，使用ASMJavaBeanSerializer则报错。 - 最简单的方法，不用asm： - ParserConfig.getGlobalInstance ( ) .setAsmEnable ( false ) ; - SerializeConfig.getGlobalInstance ( ) .setAsmEnable ( false ) ; - **用asm，如何解决？** _**测试代码 ( 每个类作单独文件 ) **_ `` ` java package xx ; public interface Mixinable { default long getCompanyId ( ) { return 0 ; } default void setCompanyId ( long companyId ) { } } public class A implements Mixinable { } public class TestAsm { public static void main ( String [ ] args ) { A a = new A ( ) ; //toJSONString报错 String json = JSON.toJSONString ( a ) ; //parse也将报错 a = ( A ) JSON.parse ( json ) ; } } `` ` _**错误信息**_ `` ` java Exception in thread `` main '' java.lang.IncompatibleClassChangeError : Found interface xx.Mixinable , but class was expected at Serializer_1.write1 ( Unknown Source ) at Serializer_1.write ( Unknown Source ) at com.alibaba.fastjson.serializer.JSONSerializer.write ( JSONSerializer.java:361 ) at com.alibaba.fastjson.JSON.toJSONString ( JSON.java:393 ) at com.alibaba.fastjson.JSON.toJSONString ( JSON.java:381 ) `` ` > 原因分析：A中未实现Mixinable的get/setCompanyId方法，导致asm writer的method属于接口 ( 本应属于A ) ，调用错误。 > > A不想再实现Mixinable中的缺省方法，因为想要A实现多继承，不论Mixinable缺省接口怎么增减，A不变。
IdentityHashMap占用内存大 __EoT__ 线上代码运行2天后，com.alibaba.fastjson.util.IdentityHashMap内存占用特别大，如果持续运行十几天，会导致内存用完，频繁fullgc。 ! [ image ] ( https : //cloud.githubusercontent.com/assets/15976489/19219942/08c04a04-8e54-11e6-8af0-2d51283da978.png ) 看了一下identityhashmap的内容，相同的key值有很多份，正常情况应该只有一份吧。 ! [ image ] ( https : //cloud.githubusercontent.com/assets/15976489/19220009/930a35c0-8e55-11e6-9404-218ade6dd7ba.png )
多层嵌套基本类型数组反序列化时报空指针异常 __EoT__ 数据结构如下： JsonBean下面有一个List < SCFMethod > , SCFMethod对象中又有一个List < SCFParameter > 对象 SCFParameter中有一个Class < ? > clazz clazz为一个基本类型数组，如int [ ] , float [ ] , short [ ] , double [ ] , long [ ] , byte [ ] , char [ ] 反序列化时报错： java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:57 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:606 ) at com.wf.mvc.invoke.ActionInvoker.invoke ( ActionInvoker.java:76 ) at com.wf.mvc.MvcDispatcher.service ( MvcDispatcher.java:121 ) at com.wf.mvc.MvcFilter.doFilter ( MvcFilter.java:67 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at org.jasig.cas.client.util.AssertionThreadLocalFilter.doFilter ( AssertionThreadLocalFilter.java:50 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at org.jasig.cas.client.util.HttpServletRequestWrapperFilter.doFilter ( HttpServletRequestWrapperFilter.java:71 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.client.AbstractTicketValidationFilter.doFilter ( AbstractTicketValidationFilter.java:258 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.client.AuthenticationFilter.doFilter ( AuthenticationFilter.java:161 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.client.SingleSignOutFilter.doFilter ( SingleSignOutFilter.java:89 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.client.CharacterEncodingFilter.doFilter ( CharacterEncodingFilter.java:37 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.session.servlet.filter.session.CacheSessionFilter.doFilter ( CacheSessionFilter.java:94 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1474 ) at org.eclipse.jetty.servlet.ServletHandler.doHandle ( ServletHandler.java:499 ) at org.eclipse.jetty.server.handler.ScopedHandler.handle ( ScopedHandler.java:137 ) at org.eclipse.jetty.security.SecurityHandler.handle ( SecurityHandler.java:557 ) at org.eclipse.jetty.server.session.SessionHandler.doHandle ( SessionHandler.java:231 ) at org.eclipse.jetty.server.handler.ContextHandler.doHandle ( ContextHandler.java:1086 ) at
使用fastjson1.2.21时，在反序列化泛型对象类型时会报NullPointerException的错误 __EoT__ 环境说明： jdk：1.8 fastjson：1.2.21 能够重现的case程序如下： # # # 序列化执行类 `` ` java public class JsonSerializer { private static final String NAMESPACE = `` teslaSpace '' ; private static final Charset CHARSET = Charset.forName ( `` UTF-8 '' ) ; public static < T > void serialize ( T obj , OutputStream out ) { setTeslaJson ( ) ; JSONWriter writer = null ; try { writer = new JSONWriter ( new OutputStreamWriter ( out , CHARSET.newEncoder ( ) .onMalformedInput ( CodingErrorAction.IGNORE ) ) ) ; writer.config ( SerializerFeature.QuoteFieldNames , true ) ; writer.config ( SerializerFeature.SkipTransientField , true ) ; writer.config ( SerializerFeature.SortField , true ) ; writer.config ( SerializerFeature.WriteEnumUsingToString , false ) ; writer.config ( SerializerFeature.WriteClassName , true ) ; writer.config ( SerializerFeature.DisableCircularReferenceDetect , true ) ; writer.writeObject ( obj ) ; writer.flush ( ) ; } catch ( Exception e ) { e.printStackTrace ( ) ; } finally { if ( writer ! = null ) { try { writer.close ( ) ; } catch ( Exception e ) { } } } } public static < T > T deserialize ( byte [ ] in ) { setTeslaJson ( ) ; return ( T ) JSON.parse (
多层嵌套基本类型数组反序列化时报空指针异常 __EoT__ 数据结构如下： JsonBean下面有一个List < SCFMethod > , SCFMethod对象中又有一个List < SCFParameter > 对象 SCFParameter中有一个Class < ? > clazz clazz为一个基本类型数组，如int [ ] , float [ ] , short [ ] , double [ ] , long [ ] , byte [ ] , char [ ] 反序列化时报错： java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:57 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:606 ) at com.wf.mvc.invoke.ActionInvoker.invoke ( ActionInvoker.java:76 ) at com.wf.mvc.MvcDispatcher.service ( MvcDispatcher.java:121 ) at com.wf.mvc.MvcFilter.doFilter ( MvcFilter.java:67 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at org.jasig.cas.client.util.AssertionThreadLocalFilter.doFilter ( AssertionThreadLocalFilter.java:50 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at org.jasig.cas.client.util.HttpServletRequestWrapperFilter.doFilter ( HttpServletRequestWrapperFilter.java:71 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.client.AbstractTicketValidationFilter.doFilter ( AbstractTicketValidationFilter.java:258 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.client.AuthenticationFilter.doFilter ( AuthenticationFilter.java:161 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.client.SingleSignOutFilter.doFilter ( SingleSignOutFilter.java:89 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.client.CharacterEncodingFilter.doFilter ( CharacterEncodingFilter.java:37 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1482 ) at com.sso.session.servlet.filter.session.CacheSessionFilter.doFilter ( CacheSessionFilter.java:94 ) at org.eclipse.jetty.servlet.ServletHandler $ CachedChain.doFilter ( ServletHandler.java:1474 ) at org.eclipse.jetty.servlet.ServletHandler.doHandle ( ServletHandler.java:499 ) at org.eclipse.jetty.server.handler.ScopedHandler.handle ( ScopedHandler.java:137 ) at org.eclipse.jetty.security.SecurityHandler.handle ( SecurityHandler.java:557 ) at org.eclipse.jetty.server.session.SessionHandler.doHandle ( SessionHandler.java:231 ) at org.eclipse.jetty.server.handler.ContextHandler.doHandle ( ContextHandler.java:1086 ) at
json2Obj，无set方法的private属性支持！ __EoT__ json2Obj，如Obj属性是private，没有set方法，不能完成转换，希望修复支持，这样能更好支持其它json解析切换至fastjson
JSONField 定义在抽象类中，对子类不起作用。 __EoT__ `` ` java abstract class B { private String id ; public String getId ( ) { return id ; } public void setId ( String id ) { this.id = id ; } @ JSONField ( serialize = false , deserialize = false ) public abstract String getName ( ) ; } class C extends B { private String c ; private String name ; public String getC ( ) { return c ; } public void setC ( String c ) { this.c = c ; } @ Override public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } } public void test ( ) { LoanContractVO loanContractVO = new LoanContractVO ( ) ; C c = new C ( ) ; c.setId ( `` 22222222222 '' ) ; c.setName ( `` name '' ) ; c.setC ( `` dddddddddddddddddd '' ) ; String json = JSON.toJSONString ( c ) ; JSONObject obj = JSON.parseObject ( json ) ; System.out.println ( json ) ; } `` ` 结果： { `` c '' : '' dddddddddddddddddd '' , '' id '' : ''
对象在Map中即做为key , 又作为value，序列化后为value的位置为null ? __EoT__ ! [ image ] ( https : //cloud.githubusercontent.com/assets/12810164/16289979/75ab45f6-392c-11e6-97b1-1094858916bd.png )
$ ref反序列化出现bug __EoT__ **版本1.2.13** `` ` class DoublePoint { public Point startPoint ; public Point endPoint ; } `` ` 生成的Json文件 `` ` [ { `` endPoint '' : { `` x '' : 22 , `` y '' : 35 } , `` startPoint '' : { `` $ ref '' : `` $ .startPoint '' } } , { `` endPoint '' : { `` $ ref '' : `` $ .startPoint '' } , `` startPoint '' : { `` x '' : 16 , `` y '' : 18 } } ] `` ` **反序列化时，解析出含有 $ ref的endPoint和startPoint对象为null** `` ` //解析出的List第0个DoublePoint对象的startPoint是null //解析出的List第1个DoublePoint对象的endPoint是null `` `
被代理的ENTITY序列化时，WriteClassName 所序列化的classname不是真实classname __EoT__ 被代理的ENTITY序列化时，WriteClassName 所序列化的classname不是真实classname； 当下次被反序列化时会报 type not match的错误！ 建议在WriteClassName 添加Object的检查，确认是否为被代理的对象。
JSONFeild没有像gson的SerializedName那样的alternate字段 __EoT__ /** * An annotation that indicates this member should be serialized to JSON with * the provided name value as its field name . * * < p > This annotation will override any { @ link com.google.gson.FieldNamingPolicy } , including * the default field naming policy , that may have been set on the { @ link com.google.gson.Gson } * instance . A different naming policy can set using the { @ code GsonBuilder } class . See * { @ link com.google.gson.GsonBuilder # setFieldNamingPolicy ( com.google.gson.FieldNamingPolicy ) } * for more information. < /p > * * < p > Here is an example of how this annotation is meant to be used : < /p > * < pre > * public class MyClass { * & # 64SerializedName ( `` name '' ) String a ; * & # 64SerializedName ( value= '' name1 '' , alternate= { `` name2 '' , `` name3 '' } ) String b ; * String c ; * * public MyClass ( String a , String b , String c ) { * this.a = a ; * this.b = b ; * this.c = c ;
JSONField 反序列化Class校验出错 __EoT__ public class FooTest { public static void main ( String [ ] args ) { Foo excepted = new Foo ( ) ; excepted.setName ( `` mock '' ) ; String json ; System.out.println ( json = JSON.toJSONString ( excepted , true ) ) ; Foo actually = JSON.parseObject ( json , Foo.class ) ; Assert.assertEquals ( excepted.getName ( ) , actually.getName ( ) ) ; } public static class Foo { @ JSONField ( name = `` foo.name '' ) private String name ; public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } } } 执行报错，生成反序列化类的时候Class校验出错
It shall raise exception when value is out of scope __EoT__ Given the following program : `` ` java public static void foo ( ) throws Exception { String str = String.valueOf ( Integer.MAX_VALUE ) ; short sh = JSON.parseObject ( str , short.class ) ; System.out.println ( sh ) ; } `` ` FastJson will return ` -1 ` when the value is out of the scope of ` short ` type . Suppose it shall raise an exception in such case .
It shall raise exception when value is out of scope __EoT__ Given the following program : `` ` java public static void foo ( ) throws Exception { String str = String.valueOf ( Integer.MAX_VALUE ) ; short sh = JSON.parseObject ( str , short.class ) ; System.out.println ( sh ) ; } `` ` FastJson will return ` -1 ` when the value is out of the scope of ` short ` type . Suppose it shall raise an exception in such case .
$ ref反序列化出现bug __EoT__ **版本1.2.13** `` ` class DoublePoint { public Point startPoint ; public Point endPoint ; } `` ` 生成的Json文件 `` ` [ { `` endPoint '' : { `` x '' : 22 , `` y '' : 35 } , `` startPoint '' : { `` $ ref '' : `` $ .startPoint '' } } , { `` endPoint '' : { `` $ ref '' : `` $ .startPoint '' } , `` startPoint '' : { `` x '' : 16 , `` y '' : 18 } } ] `` ` **反序列化时，解析出含有 $ ref的endPoint和startPoint对象为null** `` ` //解析出的List第0个DoublePoint对象的startPoint是null //解析出的List第1个DoublePoint对象的endPoint是null `` `
关于提高序列化SerializerFeature.WriteNullXXXX的用户体验 __EoT__ 你好，今天我在序列化一个Bean的时候，使用了 ` SerializerFeature.WriteNullStringAsEmpty ` 这个feature，然后发现没有生效。 最终通过搜索issue，自己解决了，方法就是同时使用SerializerFeature.WriteNullStringAsEmpty , SerializerFeature.WriteMapNullValue两个feature。 `` ` public class DemoTest { @ Test public void testIt ( ) { Bean bean = new Bean ( ) ; System.out.println ( `` bean.getName ( ) = `` + bean.getName ( ) ) ; System.out.println ( JSON.toJSONString ( bean , SerializerFeature.WriteNullStringAsEmpty ) ) ; } private static class Bean { private String name ; public String getName ( ) { return name ; } public void setName ( String name ) { this.name = name ; } } } `` ` 所以现在的问题是，大家都潜意识都以为，只要指定了这个 ` SerializerFeature.WriteNullStringAsEmpty ` 这个feature，nullstring就会被序列化，结果却出乎意料。 因此我想说的是，这块的用户体验是不是可以提升一点。 给用户他们期望的结果，OK？ 相关issue列表 - https : //github.com/alibaba/fastjson/issues/712 - https : //github.com/alibaba/fastjson/issues/474 - https : //github.com/alibaba/fastjson/issues/398 - https : //github.com/alibaba/fastjson/issues/398 还有很多。。。
parse解析超长字符串卡住 但gson不会 __EoT__ 【字符串太长 无法粘贴 请联系lw89491 @ alibab.inc.com获取】
IdentityHashMap占用内存大 __EoT__ 线上代码运行2天后，com.alibaba.fastjson.util.IdentityHashMap内存占用特别大，如果持续运行十几天，会导致内存用完，频繁fullgc。 ! [ image ] ( https : //cloud.githubusercontent.com/assets/15976489/19219942/08c04a04-8e54-11e6-8af0-2d51283da978.png ) 看了一下identityhashmap的内容，相同的key值有很多份，正常情况应该只有一份吧。 ! [ image ] ( https : //cloud.githubusercontent.com/assets/15976489/19220009/930a35c0-8e55-11e6-9404-218ade6dd7ba.png )
@ JSONField的deserializeUsing在当属性为泛型时不起作用 __EoT__ `` ` java public class SubjectListDeserializer implements ObjectDeserializer { @ SuppressWarnings ( `` unchecked '' ) @ Override public < T > T deserialze ( DefaultJSONParser parser , Type type , Object fieldName ) { List < String > parseObjectList = parser.parseArray ( String.class ) ; if ( parseObjectList ! = null ) { List < Integer > resultVoList = new ArrayList < > ( ) ; for ( String parseObject : parseObjectList ) { resultVoList.add ( SubjectEnum.getValueByCode ( parseObject ) ) ; } return ( T ) resultVoList ; } throw new IllegalStateException ( ) ; } @ Override public int getFastMatchToken ( ) { return 0 ; } } `` ` `` ` java public class TestTeacher { @ JSONField ( deserializeUsing = SubjectListDeserializer.class ) private List < Integer > subjectList ; public List < Integer > getSubjectList ( ) { return subjectList ; } public void setSubjectList ( List < Integer > subjectList ) { this.subjectList = subjectList ; } public static void main ( String [ ] args ) { String jsonStr = `` { 'subjectList ' : [ 'CHINESE ' , 'MATH ' ] } '' ; System.out.println ( JSON.parseObject ( jsonStr
JSONArray转string时小数点为0的浮点数会丢失精度问题 __EoT__ 一些价格类数据 如22.0 10.0 作为json的value 用fastjson转换时会省略后面的.0 在一些应用场景会出现问题。
为什么用getObject方法某些个字段解析结果为null __EoT__ example：jsonobj.getObject ( `` userInfo '' , WechatUserInfo.class ) ; 中例如名字，头像地址，性别都能正常获取到，但是id类的字符串解析均为null，例如： '' unionid '' : '' oq9QRtyW-kb6R_7289hIycrOfnyc '' ， '' openid '' : '' oEH-vt-7mGHOQets-XbE1c3DKpVc '' ， 但是用parseObject（jsonStr，xx.class）；这种又能正常解析，不知道为啥，求大牛解答~ 完整json： { `` ckid '' : '' 81a5953835310708e414057adb45e826 '' , '' rcToken '' : '' E+jkQCWSwop+JICPBHc+fxMYeExTx2NTDGZCJ8gIPg7NbMLNvfmZBPU2dR5uxpRRe+zPnOIaCATpHcSa6q+k39HGjNFFDRt9PNlEJokpxhTw9gYJ/WKoSlVR/4ibjIgjvVHxS2lNLS4= '' , '' userInfo '' : { `` openid '' : '' oEH-vt-7mGHOQets-XbE1c3DKpVc '' , '' nickname '' : '' Pietro '' , '' sex '' :1 , '' language '' : '' zh_CN '' , '' city '' : '' '' , '' province '' : '' Beijing '' , '' country '' : '' CN '' , '' headimgurl '' : '' http : //wx.qlogo.cn/mmopen/kox8ma2sryApONj7kInbic4iaCZD8tXL4sqe7k3wROLpb2uCZhOiceAbL69ANeXSMu9zf7hibmt3Y0Ed4A6zIt9ibnPaiciauLZn57c/0 '' , '' privilege '' : [ ] , '' unionid '' : '' oq9QRtyW-kb6R_7289hIycrOfnyc '' } , '' isNewUser '' : false }
JSONCreator 参数不匹配导致反序列化失败 __EoT__ 服务端返回的JSON当中，有些字段没有返回，导致反序列化失败。以下是构造方法： `` ` java public CommodityObject ( @ JSONField ( name = `` id '' ) int id , @ JSONField ( name = `` description '' ) String description , @ JSONField ( name = `` location '' ) String location , @ JSONField ( name = `` location_id '' ) int locationId , @ JSONField ( name = `` park '' ) String park , @ JSONField ( name = `` park_code '' ) int parkCode , @ JSONField ( name = `` face_value '' ) int faceValue , @ JSONField ( name = `` ctime '' ) long createTime , @ JSONField ( name = `` valid_period '' ) String validPeriod , @ JSONField ( name = `` title '' ) String title , @ JSONField ( name = `` type '' ) int type , @ JSONField ( name = `` ex_type '' ) int exType , @ JSONField ( name = `` price '' ) int price , @ JSONField ( name = `` status '' ) int status ) { `` ` 其中 ` location_id ` 和 ` park_code ` 没有传时会报异常： `` ` Caused by : com.alibaba.fastjson.JSONException : create instance error
`` { \ '' v\ '' : [ \ '' \ '' , \ '' abc\ '' , \ '' x\ '' , \ '' abc\ '' ] } '' with generic Map < String , char [ ] > still through parse ? __EoT__ `` ` java String str1= '' { \ '' v\ '' : [ \ '' \ '' , \ '' abc\ '' , \ '' x\ '' , \ '' abc\ '' ] } '' ; Map < String , char [ ] > map = JSON.parseObject ( str1 , new com.alibaba.fastjson.TypeReference < Map < String , char [ ] > > ( ) { } ) ; System.out.println ( new String ( map.get ( `` v '' ) ) ) ; `` ` and then , it outpputs- > [ `` `` , '' abc '' , '' x '' , '' abc '' ] Is it right ? Actually If the generic is Map < String , String [ ] > or Map < String , char [ ] [ ] > , it will correct .
jsonpath 数组解析 抛出IllegalArgumentException异常 __EoT__ jsonpath定义： '' $ .array [ 0 : -1 ] .bizData '' 当array不存在时，抛出如下异常： java.lang.IllegalArgumentException : Illegal Capacity : -1 at java.util.ArrayList. < init > ( ArrayList.java:156 ) at com.alibaba.fastjson.JSONPath $ RangeSegement.eval ( JSONPath.java:1120 ) at com.alibaba.fastjson.JSONPath.eval ( JSONPath.java:79 ) 更好的方式，不是应该直接返回null吗？ fastjson版本：1.2.7
fastjson序列化是没处理特殊字符，转义后为\u007F __EoT__ 该非法字符反序列化后为\�，导致json结构错误： 范例： String str = `` < p > 主要学校：密歇根大学 安娜堡分校、东密西根大学、 克莱利学院、康考迪亚学院 、瓦什特洛社区学院 < /p > '' ; System.out.println ( JSON.toJSONString ( str ) ) ;
android gradle 2.1.2环境下，解析匿名内部类的时候，会卡死 __EoT__ 2.1.2 编译出来的内部类的 ` this $ 0 ` 是 ` public final ` ，所以使用 ` getFields ` 会返回。 这样会导致 ` JSON.toJSONBytes ( obj ) ` 的时候，去解析了 ` this $ 0 ` 我测试项目中的 ` this $ 0 ` 是一个 ` MainActivity ` ，里面有个 ` getAction ` 的方法，但是没有相应 ` action ` , ` _action ` , 'm_action'的成员变量。 这样 ` ParseConfig ` 去计算 ` getField ` 的时候会遍历所有的父类， ` MainActivty ` 有11层父类，每一层都会去找 fieldName，_fieldName , m_fieldName这三个属性值，所以找到最后一层 ` Context ` 的时候会有 ` 100*3^12 ` 的计算量，在这边就卡死了。 我认为对于 ` getAction ( ) ` ，计算所有的组合是没必要的，方便起见计算 ` action ` , ` _action ` , 'm_action'就可以了，如果 ` _m_action ` , ` m__m_action ` , ` _m_m_action ` ... 等所有的情况都计算的话，层数一多很耗时。
Json 解析错误 __EoT__ syntax error , expect { , actual [ , pos 54 , fieldName game_data ` { `` code '' : 1000 , `` data '' : `` success '' , `` game_data '' : [ ] , `` member_list '' : [ ] , `` message '' : `` \u6210\u529f '' } ` 解析这样的数据时会报错
为什么字符串json在getJSONObject的时候不能转成JsonObject __EoT__ JSONObject json = new JSONObject ( ) ; json.put ( `` robj '' , `` { abc : 123 } '' ) ; System.out.println ( json.getJSONObject ( `` robj '' ) ) ; 处于什么考虑的 老版本的项目 一直木有问题 最近更新了 就抛出异常了
为什么字符串json在getJSONObject的时候不能转成JsonObject __EoT__ JSONObject json = new JSONObject ( ) ; json.put ( `` robj '' , `` { abc : 123 } '' ) ; System.out.println ( json.getJSONObject ( `` robj '' ) ) ; 处于什么考虑的 老版本的项目 一直木有问题 最近更新了 就抛出异常了
XMLGregorianCalendar 灵活度问题 __EoT__ ObjectSerializer 都是按照类型自动匹配的，这样会在一定程度上不够灵活。比如要匹配javax.xml.datatype.XMLGregorianCalendar的所有实现类型，就有点困难。是否可以考虑增加一个 ObjectSerializer 的子接口，并定义一个返回boolean的方法，可以让用户自己去判断是否匹配。而不是只能根据类型判断。
fastjson1.1.52 JSON.parse Exception __EoT__ JSON.parse ( `` [ { \ '' args\ '' : [ \ '' 150\ '' , \ '' change\ '' , { \ '' timeStamp\ '' :1471595047319 , \ '' value\ '' : \ '' \ '' } , { \ '' attrs\ '' : { \ '' value\ '' : \ '' \ '' } } ] , \ '' method\ '' : \ '' fireEvent\ '' } ] '' ) ; 上面这行代码在fastjson1.1.52 抛异常～在第73个字符
$ ..name deepScan功能问题 __EoT__ ! [ image ] ( https : //cloud.githubusercontent.com/assets/11980080/17617941/6d7d1ba2-60af-11e6-8907-a2f0716888db.png ) @ wenshao JSONPATH中 我看到已经支持deepScan，我觉得很好用，发现一些疑惑：就是如果JSON串中递归到深层，执行到下列代码 for ( Object val : map.values ( ) ) { deepScan ( val , propertyName , results ) ; } 此时map内容为 { `` subjectName '' : '' 总分 '' , '' subjectId '' : '' ALL '' } ，会尽继续进入deepScan进行递归，但是进入下一层递归中，没有任何逻辑可以执行，直到最后 throw new JSONPathException ( `` jsonpath error , path `` + path + `` , segement `` + propertyName ) ; 就这样抛出了异常，这是正确的处理方式吗？没有匹配的方法执行应该可以return，回到上一级递归啊，怎么这个地方需要抛出一个异常？
能否添加注解指定序列化类的功能 ? 例如注解model某个long属性序列化除与100 ( 金额 '' 分 '' 单位转成 '' 元 '' ) __EoT__ 场景用例 : 注解model某个long属性序列化时除与100 ( 金额 '' 分 '' 单位转成 '' 元 '' ) 使用方法 : 只需添加一行注解指定序列化方法 ( 将long除与100转成double ) 优势 : 直接指定某个属性转化而不是指定类型或所有相同的属性名称 , 不需要修改原有接口 , 只需要在model中对指定属性添加注解 PS : ` FasterXML/jackson-databind ` 有类似的注解 : ` @ JsonSerialize ( using = ToStringSerializer.class ) `
SerializeConfig 增加filter在map上失效 __EoT__ 在配置SerializeConfig全局属性忽略时，如果是map对像时，无法传递filter，属性不生效
能否添加注解指定序列化类的功能 ? 例如注解model某个long属性序列化除与100 ( 金额 '' 分 '' 单位转成 '' 元 '' ) __EoT__ 场景用例 : 注解model某个long属性序列化时除与100 ( 金额 '' 分 '' 单位转成 '' 元 '' ) 使用方法 : 只需添加一行注解指定序列化方法 ( 将long除与100转成double ) 优势 : 直接指定某个属性转化而不是指定类型或所有相同的属性名称 , 不需要修改原有接口 , 只需要在model中对指定属性添加注解 PS : ` FasterXML/jackson-databind ` 有类似的注解 : ` @ JsonSerialize ( using = ToStringSerializer.class ) `
@ JSONField配置getter/setter方法上有效，配置在Field上无效 __EoT__ fastjson版本：1.2.13和1.1.52android版本
fastjson 能否计划支持spring websocket？ __EoT__ < websocket : sockjs message-codec= '' message-codec '' / >
两个反斜杠的问题 __EoT__ fastjson 版本：1.2.14 测试代码 `` ` public class CodeTest { public static void main ( String [ ] argv ) { String temp = `` { \ '' option_1\ '' : \ '' \\u4e0d\\u5403\\u6216\\u5c11\\u4e8e1\\u6b21\ '' } '' ; System.out.println ( temp ) ; JSONObject object = JSON.parseObject ( temp ) ; System.out.println ( object ) ; } } `` ` 输出： `` ` { `` option_1 '' : `` \u4e0d\u5403\u6216\u5c11\u4e8e1\u6b21 '' } { `` option_1 '' : '' 不吃或少于1次 '' } `` ` 问题： 参照上面的结果，很显然，两个反斜杠变成一个，然后与后面的匹配。
对于某些特殊字符串，使用fastjson序列后的字符串无法使用 __EoT__ 比如 String s= `` { \ '' a\ '' : \ '' 安徽省滁州市南谯区 I \ '' } '' ; System.out.println ( JSONObject.parse ( s ) .toString ( ) ) ; 结果为 { `` a '' : '' 安徽省滁州市南谯区test tomorrow I\u00A0\u00A0 `` } 其实我们不想特殊字符被处理，我想要的结果是 : { `` a '' : '' 安徽省滁州市南谯区 I `` } 请问这个问题fastjson怎么处理的？？
fastjson1.2.7序列化时指定SerializerFeature.WriteClassName，在反序列JSONObject时直接为空 __EoT__ 如题，使用fastjson版本1.2.7时，如果在序列化时候指定了SerializerFeature.WriteClassName属性，且序列化的对象中包含com.alibaba.fastjson.JSONObject类型的对象属性时，在反序列化时候，则会丢失该属性值。代码如下： `` ` java public class DataObject { private JSONObject value ; public DataObject ( ) { } public JSONObject getValue ( ) { return value ; } public void setValue ( JSONObject value ) { this.value = value ; } @ Override public String toString ( ) { return `` DataObject { `` + `` value= '' + value + ' } ' ; } } @ Test public void testJsonObjectWithClassName ( ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject.put ( `` key1 '' , `` value1 '' ) ; jsonObject.put ( `` key2 '' , `` value2 '' ) ; DataObject dataObject = new DataObject ( ) ; dataObject.setValue ( jsonObject ) ; String jsonStr = JSON.toJSONString ( dataObject , SerializerFeature.QuoteFieldNames , SerializerFeature.SkipTransientField , SerializerFeature.WriteClassName ) ; System.out.println ( `` parse之前 : '' + jsonStr ) ; Object obj = JSON.parse ( jsonStr , Feature.IgnoreNotMatch ) ; System.out.println ( `` parse之后 : '' + obj ) ; } `` ` 程序的输出结果如下： parse之前 : { `` @ type '' : '' com.mogujie.tesla.serialization.DataObject '' , '' value '' : { `` @ type '' : '' com.alibaba.fastjson.JSONObject '' , '' key2 '' : '' value2
Snake Case Serialization __EoT__ Hi , Is it possible to serialize all the camel case fields to snake case automatically ? Thanks
json的key值为字符串类型，但是当只含有数字和.的时候处理有问题 __EoT__ `` ` java String a = `` { \ '' key\ '' : \ '' value\ '' , \ '' 10.0.1.1\ '' : \ '' haha\ '' } '' ; Object x = JSON.parse ( a ) ; JSONPath.set ( x , `` $ .test '' , `` abc '' ) ; Object o = JSONPath.eval ( x , `` $ .10\\.0\\.1\\.1 '' ) ; `` ` 异常 : Exception in thread `` main '' java.lang.NumberFormatException : For input string : `` 10.0.1.1 ''
json的key值为字符串类型，但是当只含有数字和.的时候处理有问题 __EoT__ `` ` java String a = `` { \ '' key\ '' : \ '' value\ '' , \ '' 10.0.1.1\ '' : \ '' haha\ '' } '' ; Object x = JSON.parse ( a ) ; JSONPath.set ( x , `` $ .test '' , `` abc '' ) ; Object o = JSONPath.eval ( x , `` $ .10\\.0\\.1\\.1 '' ) ; `` ` 异常 : Exception in thread `` main '' java.lang.NumberFormatException : For input string : `` 10.0.1.1 ''
字符串 '' yyyy-MM-dd HH : mm '' 发序列化成Date类型出错 __EoT__ 日期字符串如 “ 2016-07-15 15:53 ” , 在反序列化的成Date类型的时候，报错如下。 字段上配置如下 @ JSONField ( format = `` yyyy-MM-dd HH : mm '' ) public Date startTime ; 版本：fastjson-1.1.52.android.jar Exception in thread `` main '' com.alibaba.fastjson.JSONException : For input string : `` 2016-07-18 14:01 '' at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:686 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:655 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:216 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:188 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:147 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:252 ) at SerializeTest.main ( SerializeTest.java:21 ) Caused by : java.lang.NumberFormatException : For input string : `` 2016-07-18 14:01 '' at java.lang.NumberFormatException.forInputString ( Unknown Source ) at java.lang.Long.parseLong ( Unknown Source ) at java.lang.Long.parseLong ( Unknown Source ) at com.alibaba.fastjson.serializer.DateCodec.cast ( DateCodec.java:298 ) at com.alibaba.fastjson.serializer.DateCodec.deserialze ( DateCodec.java:240 ) at com.alibaba.fastjson.parser.DefaultFieldDeserializer.parseField ( DefaultFieldDeserializer.java:39 ) at com.alibaba.fastjson.parser.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:595 ) at com.alibaba.fastjson.parser.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:97 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:682 附上简单测试： `` ` java import java.io.Serializable ; import java.util.Date ; import com.alibaba.fastjson.annotation.JSONField ; public class Person implements Serializable { public String name ; @ JSONField ( format = `` yyyy-MM-dd HH : mm '' ) public Date startTime ; public String getName ( ) { return name ; } public void setName ( String name
fastjson 1.2.8版本及以后，对于序列化时候写入的 @ type信息，在反序列化的时候已经不会默认转换为type对应的类型了 __EoT__ 反馈一个问题，fastjson从1.2.8及以后的版本，对于在使用JSONWriter序列化时候指定的 @ type信息（开启WriteClassName属性），在使用JSONReader和JSON.parse做反序列化时，只会反序列化成JSONObject，而不是type值指定的类型 # # **（我的场景比较特殊，我自定义了fastjson的 @ type关键字）**； 经过测试1.2.7及以前的版本没有这个问题，能够反序列化成type对应的类型，满足要求。 TestCase： `` ` java package com.xxx.xxx.xxx ; public class Result { private int status ; private Object value ; private Map < String , Object > attachments = new HashMap < > ( 2 ) ; public int getStatus ( ) { return status ; } public void setStatus ( int status ) { this.status = status ; } public Object getValue ( ) { return value ; } public void setValue ( Object value ) { this.value = value ; } public Map < String , Object > getAttachments ( ) { return attachments ; } public setAttachments ( Map < String , Object > attachments ) { this.attachments=attachments ; } } @ Test public void testJsonStr ( ) { if ( ! JSON.DEFAULT_TYPE_KEY.equals ( `` mySpace '' ) ) { JSON.DEFAULT_TYPE_KEY = `` mySpace '' ; } String cc = `` { \ '' mySpace\ '' : \ '' com.xxx.xxx.xxx.Result\ '' , \ '' attachments\ '' : { \ '' mySpace\ '' : \ '' java.util.HashMap\ '' , \ '' timeout\ '' :5000 , \ '' consumeApp\ '' : \ '' multiGroupTestServer\ '' }
json path支持获取指定节点名称的所有值 __EoT__ 如 $ ..pkg获取json中所有名称为pkg的节点的值，然后以List形式返回。这避免我们手工不断翻层的烦恼 : )
JSONPath.contains ( obj , searchPath ) 深度超过8后报数组越界 __EoT__ `` ` java String a = `` { \ '' a\ '' : { \ '' b\ '' : { \ '' c\ '' : { \ '' d\ '' : { \ '' e\ '' : { \ '' f\ '' : { \ '' g\ '' : { \ '' h\ '' : { \ '' i\ '' : { \ '' j\ '' : { \ '' k\ '' : { \ '' l\ '' : \ '' \ '' } } } } } } } } } } } } '' ; Object x = JSON.parse ( a ) ; System.out.println ( JSONPath.contains ( x , `` $ .a.b.c.d.e.f.g.h.i '' ) ) ; `` ` 会报数组越界错误
JSONpath无法过滤数组中double以及boolean类型的数据。 __EoT__ `` ` String json = '' { \ '' user\ '' : [ { \ '' amount\ '' :0.11 , \ '' isadmin\ '' : true , \ '' age\ '' :18 } , { \ '' amount\ '' :0.22 , \ '' isadmin\ '' : false , \ '' age\ '' :28 } ] } '' ; System.out.println ( JSONPath.read ( json , `` $ .user '' ) ) ; System.out.println ( JSONPath.read ( json , `` $ .user [ age = 18 ] '' ) ) ; //可以取到 System.out.println ( JSONPath.read ( json , `` $ .user [ isadmin = true ] '' ) ) ; //boolean类型的无法过滤，报错 System.out.println ( JSONPath.read ( json , `` $ .user [ amount = 0.11 ] '' ) ) ; //float类型无法过滤，报错 `` `
final字段反系列化出错 __EoT__ ` Caused by : com.alibaba.fastjson.JSONException : set property error , TAG at com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue ( FieldDeserializer.java:89 ) at com.alibaba.fastjson.parser.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:641 ) at com.alibaba.fastjson.parser.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:97 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:682 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:655 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:216 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:188 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:147 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:252 ) ` > public static final String TAG = UserInfo.class.getSimpleName ( ) ; > 版本：compile 'com.alibaba : fastjson:1.1.52.android '
对于enum 类型，ASMDeserializer 的 parse 部分问题 __EoT__ 问题复现： 代码： `` ` String jsonStr = `` { \ '' modelType\ '' : \ '' \ '' } '' ; MenuExpend menuExpend = JSON.parseObject ( jsonStr , MenuExpend.class ) ; System.out.println ( menuExpend ) ; `` ` 中modelType 为 MenuExpend 的field，一个customer 的enum。 这样立即报错。 exception is ：java.lang.IllegalArgumentException : No enum constant 解决思路： 本以为是 EnumDeserializer 的deserialze 方法，经过追踪，却是使用的ASMDeserializer。 ` MenuExpend menuExpend = JSON.parseObject ( jsonStr , MenuExpend.class , Feature.DisableASM ) ; ` 使用如上的代码，并没有禁用掉ASM。 最后在debug 的时候，尝试把ParseConfig 的asmEnable 改为false，使用EnumDeserializer 进行反序列化。反序列话后的 modelType 为null，无异常。 `` ` if ( token == JSONToken.LITERAL_INT ) { int intValue = lexer.intValue ( ) ; lexer.nextToken ( JSONToken.COMMA ) ; if ( intValue < 0 || intValue > values.length ) { throw new JSONException ( `` parse enum `` + enumClass.getName ( ) + `` error , value : `` + intValue ) ; } return ( T ) values [ intValue ] ; } else if ( token == JSONToken.LITERAL_STRING ) { String strVal = lexer.stringVal ( ) ; lexer.nextToken ( JSONToken.COMMA ) ; if ( strVal.length ( ) == 0 ) { return ( T ) null ; } return ( T ) Enum.valueOf ( ( Class < Enum > ) enumClass ,
数据长度大，序列化不了 __EoT__ [ 2016-06-18 15:54:26 ERROR ] [ ServerHeartTimer ] com.alibaba.fastjson.JSONException : create asm serializer error , class class com.game.player.structs.Player com.alibaba.fastjson.JSONException : create asm serializer error , class class com.game.player.structs.Player at com.alibaba.fastjson.serializer.SerializeConfig.createJavaBeanSerializer ( SerializeConfig.java:170 ) at com.alibaba.fastjson.serializer.SerializeConfig.createJavaBeanSerializer ( SerializeConfig.java:117 ) at com.alibaba.fastjson.serializer.SerializeConfig.getObjectWriter ( SerializeConfig.java:504 ) at com.alibaba.fastjson.serializer.SerializeConfig.getObjectWriter ( SerializeConfig.java:320 ) at com.alibaba.fastjson.serializer.JSONSerializer.getObjectWriter ( JSONSerializer.java:318 ) at com.alibaba.fastjson.serializer.JSONSerializer.write ( JSONSerializer.java:261 ) at com.alibaba.fastjson.JSON.toJSONString ( JSON.java:547 ) at com.alibaba.fastjson.JSON.toJSONString ( JSON.java:536 ) at com.game.player.Manager.PlayerManager.makeRoleBeanByPlayer ( PlayerManager.java:335 ) at com.game.player.Manager.PlayerManager.timingSavePlayer ( PlayerManager.java:1013 ) at com.game.Server.Timer.ServerHeartTimer.action ( ServerHeartTimer.java:38 ) at game.core.net.thread.ServerThread.run ( ServerThread.java:110 ) Caused by : java.lang.ClassFormatError : Invalid method Code length 68840 in class file com/alibaba/fastjson/serializer/ASMSerializer_57_Player at java.lang.ClassLoader.defineClass1 ( Native Method ) at java.lang.ClassLoader.defineClass ( ClassLoader.java:760 ) at com.alibaba.fastjson.util.ASMClassLoader.defineClassPublic ( ASMClassLoader.java:174 ) at com.alibaba.fastjson.serializer.ASMSerializerFactory.createJavaBeanSerializer ( ASMSerializerFactory.java:396 ) at com.alibaba.fastjson.serializer.SerializeConfig.createASMSerializer ( SerializeConfig.java:95 ) at com.alibaba.fastjson.serializer.SerializeConfig.createJavaBeanSerializer ( SerializeConfig.java:163 ) 用最新1.2.12 序列化出错， 用1.2.5序列化OK的， 做游戏的， 这个类数据很大
Spring Data JPA 创建的Page < T > 对象无法转换成 JsonObject __EoT__ `` ` Page < Post > postList = postService.getPostList ( pageable ) ; JSONObject obj = ( JSONObject ) JSON.toJSON ( postList ) ; `` ` 使用这样的方法 获得的obj为null，但是postList 却是一个非null对象
解决1.2.11版writeInternal setContentLength无效 __EoT__
解决1.2.11版writeInternal setContentLength无效 __EoT__
1.2.10 NOT compatible with Spring MVC 4.2+ __EoT__ See [ commitcomment-17226726 ] ( https : //github.com/alibaba/fastjson/commit/fe32c149ebfb83e3fbbe7c5c55e918c96937d064 # commitcomment-17226726 ) .
TypeUtils.castToJavaBean ( ) 方法在Android Lollipop ( ART ) 设备下耗时非常 __EoT__ 上图为证 < img width= '' 800 '' alt= '' qq20150731-1 2x '' src= '' https : //cloud.githubusercontent.com/assets/2888674/8999775/af019cfa-3771-11e5-828b-8aad28ea704c.png '' > 如图，关键点在于方法中的 ` Type paramType = field.getGenericType ( ) ; ` 这一行 改成直接从 ` FieldDeserializer ` 拿之后 ` Type paramType = fieldDeser.getFieldType ( ) ; ` < img width= '' 597 '' alt= '' qq20150731-3 2x '' src= '' https : //cloud.githubusercontent.com/assets/2888674/8999845/5af84f9a-3772-11e5-94e3-d4bf06509a9c.png '' > 效果惊人！
add badges in read me __EoT__ - add maven center version badge convenient for check whether lib version is updated - License badge - java dependency version badge ( optional )
字段排序 -- Feature.OrderedField，只对第一层的key进行排序 __EoT__ 排序会很影响性能吗？ 当我尝试对第一层排序后的key遍历时，每个key下的对象的key是无序的了，而我需要第二层的key依然有序..希望提供支持啊
ClassCastException when serialize/deserialize object implements interface __EoT__ // when an object implements an interface , if add method not get/set will get Exception . //copy and run the code below , and you can get the exception . // fastjson version 1.2.3 , jdk 1.8 import java.io.Serializable ; import java.util.Map ; import com.alibaba.fastjson.JSON ; import com.alibaba.fastjson.annotation.JSONField ; public class Test { public static void main ( String [ ] args ) { `` ` Customer cus = new Customer ( ) ; cus.setId ( 1L ) ; cus.setName ( `` name '' ) ; Object json = JSON.toJSON ( cus ) ; System.out.println ( json ) ; String cusJson = json.toString ( ) ; Customer customer = JSON.parseObject ( cusJson , Customer.class ) ; System.out.println ( customer ) ; } public interface Indexable < ID extends Serializable > { public ID getId ( ) ; public void setId ( ID id ) ; } public static class Customer implements Indexable < Long > { private Long id ; private String name ; @ Override public Long getId ( ) { return id ; } @ Override public void setId ( Long id ) { this.id = id ; } public
ISO8601日期反序列出错 __EoT__ 前几天从1.1.41升级到了1.2.3后出现了该错误，不能反序列化ISO8601格式的UTC时间， 如：2014-10-09T03:07:07.000Z， 换了多个版本测试，发现只有1.1.41可以正确反序列。
Optimize ThreadLocalCache while perusal the code . __EoT__ I knew the library from an article in CSDN , then I began to perusal the implementation . Besides learning some good techniques I also found some segment could be optimizing . Hope this pull can be merged . If so , I can keep an eye on this repo and try to contributing some snippets in my spare time . ( I like elegant code but I hate alibaba , lol ) Best Regards ! Zhangbohong GAO git : ttoommbb gaozone-talend mail : ttoommbb # 126.com gaozone217 # gmail.com
ASM反序列化bean里的泛型属性结果不正确 __EoT__ 当前版本的ASMDeserializerFactory里的_deserialze方法有个严重bug：一个正常的bean里，如果有个属性ClassA < ClassB > ，往后面的ParserConfig传递时只剩下ClassA了。同样的类的Type instanceof ParameterizedType为true，开启ASM时为false。 现象就是如果禁掉ASM，导致反序列化出来的出来的类型是JSONObject，转型就会失败。 1 . 修改代码，强制禁掉ASM，结果就正常。 2 . 同样的代码、改成内部类也没有问题，看了下代码，非Public的类会禁用ASM。
ArrayIndexOutOfBoundException on bad input __EoT__ Parsing this string throws ArrayIndexOutOfBoundException : `` { \ '' a\ '' : з」∠ ) _ , \ '' } '' ;
格式 map < String , List < Bean > > , 其中某些Bean被多个list引用，反序列化后部分list的bean值为null。 __EoT__ 测试代码： # # fastjson序列化代码 `` ` @ Test public void testSerialAndUnSerial ( ) throws Exception { Map < String , List < JSONTestBean > > map = new HashMap < String , List < JSONTestBean > > ( ) ; JSONTestBean bean1 = new JSONTestBean ( ) ; bean1.setId ( `` 1 '' ) ; bean1.setName ( `` name1 '' ) ; JSONTestBean bean2 = new JSONTestBean ( ) ; bean2.setId ( `` 2 '' ) ; bean2.setName ( `` name2 '' ) ; JSONTestBean bean3 = new JSONTestBean ( ) ; bean3.setId ( `` 3 '' ) ; bean3.setName ( `` name3 '' ) ; List < JSONTestBean > beans1 = new ArrayList < JSONTestBean > ( ) ; beans1.add ( bean1 ) ; beans1.add ( bean2 ) ; List < JSONTestBean > beans2 = new ArrayList < JSONTestBean > ( ) ; beans2.add ( bean1 ) ; beans2.add ( bean3 ) ; map.put ( `` beans1 '' , beans1 ) ; map.put ( `` beans2 '' , beans2 ) ; String expectedStr = JSONObject.toJSONString ( map , SerializerFeature.WriteClassName , SerializerFeature.PrettyFormat ) ; Map < String
StickyLayoutHelper设置背景颜色失效 __EoT__ 如标题所说，在使用吸顶布局的时候想设置背景颜色 if ( STICKY_LAYOUT ) { StickyLayoutHelper layoutHelper = new StickyLayoutHelper ( ) ; layoutHelper.setBgColor ( 0xffed7612 ) ; layoutHelper.setAspectRatio ( 4 ) ; adapters.add ( new SubAdapter ( this , layoutHelper , 1 , new LayoutParams ( ViewGroup.LayoutParams.MATCH_PARENT , 100 ) ) ) ; } 背景色没有改变
升级后出现onBindViewHolder未分发的问题 __EoT__ 升级到1.2.7及以后的版本出现了数据都设置的问题，场景是这样的： 为了扩展RecyclerView加载更多，对DelegateAdapter.Adapter进行了包装， public class LoadMoreWrapper extends RecyclerView.Adapter < RecyclerView.ViewHolder > { ... ... private RecyclerView.Adapter mRealAdapter ; ... ... public LoadMoreWrapper ( Context context , RecyclerView.Adapter adapter ) { this.mContext = context ; this.mRealAdapter = adapter ; } ... ... @ Override public void onBindViewHolder ( RecyclerView.ViewHolder holder , int position ) { ... ... if ( ! isFooterType ( holder.getItemViewType ( ) ) ) { mRealAdapter.onBindViewHolder ( holder , position ) ; } } ... ... } 发现调用DelegateAdapter的 ` onBindViewHolder ( holder , position ) ` 后就没有向各个Adapter分发onBindViewHolder ( holder , position ) ，经过查看源码发现在1.2.7及以后的版本这个方法变为空的了： @ SuppressWarnings ( `` unchecked '' ) @ Override public void onBindViewHolder ( RecyclerView.ViewHolder holder , int position ) { } 经研究是解决另一位使用者的子Adapter重写 ` onBindViewHolder ( RecyclerView.ViewHolder holder , int position , List < Object > payloads ) ` 不执行问题时引入的。 向作者提个建议，这种问题的解决以及迭代应该是要认真code review的，毕竟很多人在线上使用，而且不了解具体实现的人还不好排查问题。
升级后出现onBindViewHolder未分发的问题 __EoT__ 升级到1.2.7及以后的版本出现了数据都设置的问题，场景是这样的： 为了扩展RecyclerView加载更多，对DelegateAdapter.Adapter进行了包装， public class LoadMoreWrapper extends RecyclerView.Adapter < RecyclerView.ViewHolder > { ... ... private RecyclerView.Adapter mRealAdapter ; ... ... public LoadMoreWrapper ( Context context , RecyclerView.Adapter adapter ) { this.mContext = context ; this.mRealAdapter = adapter ; } ... ... @ Override public void onBindViewHolder ( RecyclerView.ViewHolder holder , int position ) { ... ... if ( ! isFooterType ( holder.getItemViewType ( ) ) ) { mRealAdapter.onBindViewHolder ( holder , position ) ; } } ... ... } 发现调用DelegateAdapter的 ` onBindViewHolder ( holder , position ) ` 后就没有向各个Adapter分发onBindViewHolder ( holder , position ) ，经过查看源码发现在1.2.7及以后的版本这个方法变为空的了： @ SuppressWarnings ( `` unchecked '' ) @ Override public void onBindViewHolder ( RecyclerView.ViewHolder holder , int position ) { } 经研究是解决另一位使用者的子Adapter重写 ` onBindViewHolder ( RecyclerView.ViewHolder holder , int position , List < Object > payloads ) ` 不执行问题时引入的。 向作者提个建议，这种问题的解决以及迭代应该是要认真code review的，毕竟很多人在线上使用，而且不了解具体实现的人还不好排查问题。
LinearLayoutHelper.dividerHeight 导致界面滑动 __EoT__ v-layout : 1.2.2 phone : 红米 note 3 android : 6.0 layout 大致如下 `` ` xml < LoadMoreFrame > < RecyclerView/ > < LoadView/ > < /LoadMoreFrame > `` ` LoadMoreFrame 的大致原理通过，改变 layout 的 top 和 bottom 的值，来使 RecyclerView 上移和移动还原。 而当有 dividerHeight 的时候，则会出现 item 滑动 ! [ 2017-10-19 16_50_43 ] ( https : //user-images.githubusercontent.com/7205121/31762437-cf9914b4-b480-11e7-9a4a-5b8636444707.gif ) 清晰地址- > https : //pan.baidu.com/s/1jInCMto
原本GridLayoutHelper的spanCount=2可以显示两行 , 我发现升级到1.2.0之后 , ,变得一行只有一个了 . __EoT__ 升级到1.2.0之后 , GridLayoutHelper的布局都发生了错乱 , 不知道是什么原因 ? 现象描述 > 1.1.0正常的布局下,1.2.0的GridLayoutHelper似乎SpanCount无效 , LinearLayoutHelper的高度也特别的高了
有多个adapter时，点击时如何获取某个adapter中的数据集的下标 __EoT__ 每个Adapter中都有单独的一个list存放数据 private static class HolderGoods extends RecyclerView.ViewHolder implements View.OnClickListener { ImageView ivImg ; TextView tvName ; ImageView ivShare ; TextView tvShareCount ; PriceTextView pricetvItem ; private ItemClickListener mListener ; HolderGoods ( View itemView , ItemClickListener itemClickListener ) { super ( itemView ) ; ivImg = ( ImageView ) itemView.findViewById ( R.id.item_img ) ; tvName = ( TextView ) itemView.findViewById ( R.id.item_name ) ; ivShare = ( ImageView ) itemView.findViewById ( R.id.iv_share_item ) ; tvShareCount = ( TextView ) itemView.findViewById ( R.id.tv_share_count ) ; pricetvItem = ( PriceTextView ) itemView.findViewById ( R.id.pricetv_item ) ; mListener = itemClickListener ; itemView.setOnClickListener ( this ) ; } @ Override public void onClick ( View v ) { if ( mListener ! = null ) { mListener.onItemClick ( v , getAdapterPosition ( ) ) ; // getAdapterPosition ( ) 获取到的是相对于整个RecycleView的位置，而不是相对于该adapter的位置，这里应该如何处理？？？？？？？？？？ } } } public interface ItemClickListener { void onItemClick ( View view , int postion ) ; }
demo中的vlayoutActivity滑到瀑布流然后跳转再滑到瀑布流头部 , 第一个item上面会空出一块部分 __EoT__ 每jump一次头部就会空出来多一点 例如 : 155 156 157 158 159 160 当我jump到177的时候再返回去看就变成 155 157 156 158 159 我在使用vlayoutActivity过程中也遇到这个问题了 , 特意看了下你们的demo也有这个问题
GridLayoutHelper在setAutoExpand ( true ) 的时候，如果数据不足，首次显示正常 __EoT__ GridLayoutHelper在setAutoExpand ( true ) 的时候， 如果数据不足，首次显示正常，可以自适应的拉伸铺满空间 ************ | | | ************ 但是一滑动下去，再拉回来的时候，就变成autoExpand=false的效果了， ************ | | | ************
怎样能够知道StickyLayoutHelper已经停靠在界面中了？ __EoT__
用DelegateAdapter来添加adapter出现的bug __EoT__ delegateAdapter.addAdapter ( new MyTestAdapter ( 4 , new ColumnLayoutHelper ( ) ) ) ; delegateAdapter.addAdapter ( new MyTestAdapter ( 1 , new ColumnLayoutHelper ( ) ) ) ; delegateAdapter.addAdapter ( 0 , new MyTestAdapter ( 2 , new ColumnLayoutHelper ( ) ) ) ; 通过这种形式添加adapter之后，会出现崩溃问题，应该是AdapterDataObserver的mStartPosition和index错乱导致的
用DelegateAdapter来添加adapter出现的bug __EoT__ delegateAdapter.addAdapter ( new MyTestAdapter ( 4 , new ColumnLayoutHelper ( ) ) ) ; delegateAdapter.addAdapter ( new MyTestAdapter ( 1 , new ColumnLayoutHelper ( ) ) ) ; delegateAdapter.addAdapter ( 0 , new MyTestAdapter ( 2 , new ColumnLayoutHelper ( ) ) ) ; 通过这种形式添加adapter之后，会出现崩溃问题，应该是AdapterDataObserver的mStartPosition和index错乱导致的
给adapter 设置一个背景图片 ，来回滑动图片总跳，这个怎么处理啊 __EoT__ public LayoutHelper onCreateLayoutHelper ( ) { LinearLayoutHelper linearLayoutHelper = new LinearLayoutHelper ( ) ; linearLayoutHelper.setLayoutViewBindListener ( new BaseLayoutHelper.LayoutViewBindListener ( ) { @ Override public void onBind ( View layoutView , BaseLayoutHelper baseLayoutHelper ) { layoutView.setBackgroundResource ( R.drawable.shadow_device_home_bg ) ; Log.e ( `` linearLayoutHelper '' , '' onBind '' + layoutView.getHeight ( ) ) ; } } ) ; 在recyclerview中，动态改变item大小后，背景就开始抖动 当item滑出屏幕，这个设置背景会给当前的item自己再次设置一个背景，不知道是我这样设置背景有问题还是这个现在不能设置背景图片呢？有没有遇到过得给指点下啊
STICKY_LAYOUT在例子中遇到的问题 __EoT__ 打开vlayout的example中的VLayoutActivity，发现position为30的布局是一个吸附在底部的STICKY_LAYOUT , 滑动整个视图至这个position为30的布局在屏幕中央位置附近，此时点击Jump Position的输入框，弹出系统键盘，输入比较前的位置下标（比如1），点击jump视图滑动到指定的位置，这个时候按返回键系统键盘隐藏，但是position为30的STICKY布局没有回到底部位置，仍然停留在屏幕中央的位置。截图如下： # # # position为30的布局滑动至屏幕中央 ! [ screenshot_2017-04-13-15-44-27 ] ( https : //cloud.githubusercontent.com/assets/2813239/24995168/59277fe6-2060-11e7-9547-69b046ad8aa8.png ) # # # 跳转至比较前的位置，按下返回键，position为30的布局没有变化 ! [ screenshot_2017-04-13-15-44-36 ] ( https : //cloud.githubusercontent.com/assets/2813239/24995253/c8e2cda4-2060-11e7-8c75-2d1792320463.png ) ! [ screenshot_2017-04-13-15-44-40 ] ( https : //cloud.githubusercontent.com/assets/2813239/24995223/a08f8392-2060-11e7-85b2-e663eaad7020.png )
GridLayoutHelper的setSpanSizeLookup ( ) 与AutoExpand属性的冲突 __EoT__ GridLayoutHelper gridLayoutHelper = new GridLayoutHelper ( 4 ) ; gridLayoutHelper.setAutoExpand ( true ) ; gridLayoutHelper.setSpanSizeLookup ( new GridLayoutHelper.SpanSizeLookup ( ) { @ Override public int getSpanSize ( int position ) { if ( position > 13 ) { return 2 ; } else { return 1 ; } } } ) ; 这样会导致最后一个Item的大小扩展之后再乘2， ! [ 图 ] ( http : //i.imgur.com/6BvDvGR.png )
一个方法三四百行，IDE都看不下去了 __EoT__ ! [ image ] ( https : //cloud.githubusercontent.com/assets/5166848/25601504/34bd7340-2f1f-11e7-9c74-ec30aa5d372c.png ) ! [ image ] ( https : //cloud.githubusercontent.com/assets/5166848/25601676/6857830c-2f20-11e7-969c-6b0e30886be6.png )
Demo中MainActivity界面有bug __EoT__ MainActivity的界面Position为34时，第一次滑过来宽是屏幕的四分之一，再滑来滑去，重复几次就会发现这个item的宽度变成了整个屏幕的宽度
addAdapters 的问题 __EoT__ 假设目前有这样的需求： 列表和头部的数据分开，头部数据请求优先于列表回来，为了不阻碍展示，先创建了头部相关的 adapters 并且 setAdapters，等列表数据回来以后再 addAdapters。 把 examples 里面 VLayoutActivity 的 StaggeredGridLayoutHelper adapter 通过 addAdapters 加入，会出现下面的问题： `` ` java.lang.IllegalStateException : Can not change whether this adapter has stable IDs while the adapter has registered observers . at android.support.v7.widget.RecyclerView $ Adapter.setHasStableIds ( RecyclerView.java:5281 ) at com.alibaba.android.vlayout.DelegateAdapter.addAdapters ( DelegateAdapter.java:313 ) at com.alibaba.android.vlayout.DelegateAdapter.addAdapters ( DelegateAdapter.java:323 ) at com.alibaba.android.vlayout.example.VLayoutActivity $ 13.run ( VLayoutActivity.java:500 ) `` ` 求这种场景的使用姿势，谢谢～
FloatLayoutHelper拖动不了 __EoT__ FloatLayoutHelper拖动不了，ontouch只响应down事件，后续事件都不触发。还是我使用的姿势不对。。。望解答，谢谢。
关于 StickyLayoutHelper __EoT__ ! [ 1 ] ( https : //cloud.githubusercontent.com/assets/7521943/23640436/a8fd2228-0328-11e7-9c41-5539dceae733.gif ) 这个算bug吗 ? 下拉的时候，9有抖动，没有考虑到8里面设置的margin padding ?
Provide javadoc for ` TimeoutBlockingWaitStrategy ` __EoT__ All ` WaitStrategy ` implementations has very useful javadoc except ` TimeoutBlockingWaitStrategy ` . It would be nice to have it : )
Disruptor allocates many AbstractQueuedSynchronizer $ Node objects in idle mode __EoT__ Hello . I 'm using lmax disruptor ( version 3.4.2 ) with log4j2 ( 2.11.0 ) logger in my project . Recently , during profiling , I found the abnormal number of ` AbstractQueuedSynchronizer $ Node ` objects in my heap . I did simple test and found that disruptor spams ~5kb of such objects per seconds in idle mode when server does nothing . ! [ screenshot from 2018-04-22 01-14-12 ] ( https : //user-images.githubusercontent.com/1536494/39089225-7d626778-45ca-11e8-96c5-7c4ebf89a50d.png ) Allocation tree : ! [ screenshot from 2018-04-22 01-07-29 ] ( https : //user-images.githubusercontent.com/1536494/39089215-384b0528-45ca-11e8-84dc-b85266acfff9.png ) Is that expected allocations ? Or bug ? `` ` java version `` 9.0.4 '' Java ( TM ) SE Runtime Environment ( build 9.0.4+11 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 9.0.4+11 , mixed mode ) `` `
capacity question __EoT__ I have a simple disruptor appliction working . So far so good . A question about intended domain . Is the package suitable for hundreds of event handlers ? My application will have a single event producer , but I expect to have hundreds of event subscribers . Does the disruptor code have any obvious bottlenecks that would make it unsuitable ? Some suggestions for the documentation . - The description of Disruptor.handleEventsWith ( ) does not specifically say new calls add the handler without removing previously registered handlers . - The notion of 'batch ' as exposed through EventHandler.onEvent is unexplained . - The distinction between EventHandler and EventProcessor is unclear .
capacity question __EoT__ I have a simple disruptor appliction working . So far so good . A question about intended domain . Is the package suitable for hundreds of event handlers ? My application will have a single event producer , but I expect to have hundreds of event subscribers . Does the disruptor code have any obvious bottlenecks that would make it unsuitable ? Some suggestions for the documentation . - The description of Disruptor.handleEventsWith ( ) does not specifically say new calls add the handler without removing previously registered handlers . - The notion of 'batch ' as exposed through EventHandler.onEvent is unexplained . - The distinction between EventHandler and EventProcessor is unclear .
onShutdown not invoked if EventProcessor is not started __EoT__ I have a situation where I have to flush my data ( [ described here ] ( https : //github.com/LMAX-Exchange/disruptor/issues/110 ) ) after the last event is processed by my EventHandler . My ` EventHandler ` now implements the ` LifecycleAware ` interface , and I do my flushing in its ` onShutdown ( ) ` method as suggested . However , in my tests I ran into the situation that occasionally , the shutdown callback is not invoked because I shut down my disruptor before the ` EventHandler ` thread is started . The documentation of the ` Disruptor.shutdown ( ) ` method suggests that I have to make sure that all my events are published before invoking it . That is ensured in my case . The problem is that even though the events are all published , my ` EventHandler ` sometimes does n't get started in time and it does n't get a shutdown callback because of this . Looking at the source , it seems that the reason is that the ` hasBackLog ( ) ` method in the ` shutdown ( timeout , timeUnit )
SleepingWaitStrategy causing 100 % CPU with one consumer __EoT__ I am using [ opencensus ] ( https : //github.com/census-instrumentation/opencensus-java ) , a metrics and tracing library that uses the disruptor internally . When my application is idle I experience 100 % CPU which I have traced to the single disruptor consumer thread . I am experiencing this on both my Ubuntu box and in the cloud . Ubuntu box : Ubuntu 17.10 Linux version 4.13.0-17-generic ( buildd @ lcy01-amd64-011 ) ( gcc version 7.2.0 ( Ubuntu 7.2.0-8ubuntu3 ) ) # 20-Ubuntu SMP Mon Nov 6 10:04:08 UTC 2017 java version `` 1.8.0_161 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_161-b12 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.161-b12 , mixed mode ) Cloud os : https : //cloud.google.com/container-optimized-os/docs/ I have created a minimal project that reproduces the issue : https : //github.com/matthewrj/opencensus-bug/tree/master Forcing the Opencensus library to use BlockingWaitStrategy by class path patching makes the CPU usage go to 0 % .
SleepingWaitStrategy causing 100 % CPU with one consumer __EoT__ I am using [ opencensus ] ( https : //github.com/census-instrumentation/opencensus-java ) , a metrics and tracing library that uses the disruptor internally . When my application is idle I experience 100 % CPU which I have traced to the single disruptor consumer thread . I am experiencing this on both my Ubuntu box and in the cloud . Ubuntu box : Ubuntu 17.10 Linux version 4.13.0-17-generic ( buildd @ lcy01-amd64-011 ) ( gcc version 7.2.0 ( Ubuntu 7.2.0-8ubuntu3 ) ) # 20-Ubuntu SMP Mon Nov 6 10:04:08 UTC 2017 java version `` 1.8.0_161 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_161-b12 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.161-b12 , mixed mode ) Cloud os : https : //cloud.google.com/container-optimized-os/docs/ I have created a minimal project that reproduces the issue : https : //github.com/matthewrj/opencensus-bug/tree/master Forcing the Opencensus library to use BlockingWaitStrategy by class path patching makes the CPU usage go to 0 % .
Threads stuck in TIMED_WAIT state when calling MultiProducerSequencer : :next __EoT__ Hi , I 'm reposting this as an issue , which originated from a comment associated to # 164 . I do n't believe that there 's a bug in the code , but I hope this issue helps in finding specific patterns/configurations to reproduce the aforementioned behavior in the title . Essentially 1 out of 7 servers in my production environment , started to have troubles with **MultiProducerSequencer** ( disruptor-version 3.3.4 ) . The only difference between the servers is the JVM version , which is @ 1.7.0_60 on the OK ones and 1.7.0_76 , everything else is the same ( 16-core Xeon E7440 , 32GB RAM , RHEL 5.5 ) . I 'm using RingBuffer with WorkHandler , essentially in a Many ( producer ) to One ( consumer ) . The number of consumers is configured to be the same as the number of CPUs . `` ` java public EventProcessor ( ) { //this implements EventFactory , ThreadFactory , ExceptionHandler , WorkHandler disruptor = new Disruptor < > ( this , cap , this , ProducerType.MULTI , new SleepingWaitStrategy ( ) ) ; // disruptor.setDefaultExceptionHandler
Fix build Issues __EoT__ Source Code compatibility should be set to 1.7 and also some CheckStyle issues need to be fixed
Null Pointer exception while using TimeoutBlockingWaitStrategy __EoT__ http : //stackoverflow.com/q/34973768/226758 ? sem=2
MutableLong and PaddedLong can safely be moved into the testing source folders __EoT__ Classes are no longer in use in the main code base AFAICT
Gradle eclipse dependency problem __EoT__ Hi , I have gradle 2.6 and I imported the disruptor project to my eclipse by using eclipse Gradle STS plugin line 47 causes problem , now commented but it works if it is changed with eclipse.classpath.plusConfigurations += [ configurations.perfCompile ] instead of eclipse.classpath.plusConfigurations += configurations.perfCompile
Disruptor silently fails to consume events in case of threadsNumber < handlersCount __EoT__ If we initialize disruptor with 2-threads executor and setup workflow of 2 parallel handlers and 1 more handler after them - disruptor will not throw any exceptions or at least warning logs , but will fail to consume all published events . Actually , we can execute this flow with 2 threads . In example below only handlers 0 and 1 executing , handler 2 will never execute , event never get consumed state , which leads to overflow . `` ` Executor executor = Executors.newFixedThreadPool ( 2 ) ; Disruptor < AtomicLong > disruptor = new Disruptor < AtomicLong > ( new AtomicLongEventFactory ( ) , 8 , executor , ProducerType.SINGLE , new BlockingWaitStrategy ( ) ) ; disruptor.handleExceptionsWith ( new FatalExceptionHandler ( ) ) ; disruptor .handleEventsWith ( new AtomicLongWorkHandler ( 0 ) , new AtomicLongWorkHandler ( 1 ) ) .then ( new AtomicLongWorkHandler ( 2 ) ) ; disruptor.start ( ) ; disruptor.publishEvent ( ... ) ; `` ` You can find failing unit test [ here ] ( https : //github.com/Spikhalskiy/disruptor/blob/little-executor/src/test/java/com/lmax/disruptor/RemainingCapacityAndActuallyHandlingTest.java ) I can pay some time , investigate and prepare pull request
Fixed checkstyle errors and javadoc warnings in Disruptor.java __EoT__ To fix the first issue in issue # 101 and also to address the javadoc warnings that java 8 spews out when building the disruptor , I updated the Disruptor.java file ( there are still lots of other files with javadoc warnings ) . No functionality was changed . Builds and all tests pass under both java 7 and java 8 ( tested on Linux only ) .
Small documentation corrections __EoT__ Documentation Changes : '' Worth not '' to `` Worth noting '' '' Racy '' to `` Risky ''
RingBuffer batching behavior __EoT__ I have a question regarding the batching behavior in the RingBuffer . I do not have an issue with how it is implemented , rather clarity of the implementation . On line 607 of RingBuffer.java , the following method is defined : `` ` public void publishEvents ( EventTranslator < E > [ ] translators , int batchStartsAt , int batchSize ) `` ` The behavior is that the caller requires ( batchStartsAt+batchSize ) elements in the EventTranslator < E > array . Each segment will only be processed by a single translator . The core logic is found on lines 1099-1103 , `` ` for ( int i = batchStartsAt ; i < batchEndsAt ; i++ ) { final EventTranslator < E > translator = translators [ i ] ; translator.translateTo ( get ( sequence ) , sequence++ ) ; } `` ` So , if the user want to use the batching functionality ( for example to batch 100 entries for writing to a file ) , they would have to create an array of 100 EventTranslator < E > entries of the same instance . This is what I found in RingBufferTests.java starting
Ca n't build from source . __EoT__ When I run 'gradle build ' in master branch using gradle 1.3 , I got error message like this : FAILURE : Build failed with an exception . - What went wrong : Execution failed for task ' : signArchives ' . > Can not perform signing task ' : signArchives ' because it has no configured signatory - Try : Run with -- stacktrace option to get the stack trace . Run with -- info or -- debug option to get more log output . BUILD FAILED
Outdated test javadoc and class name __EoT__ The class javadocs of ` com.lmax.disruptor.TwoPublisherToTwoProcessorWorkProcessorThroughputTest ` are identical to ` com.lmax.disruptor.ThreePublisherToOneProcessorSequencedThroughputTest ` - the diagrams should be updated to have two publishers and two processors to match the test name . Also the first diagram in them mentions `` P1 '' twice instead of `` P2 '' . Though ` com.lmax.disruptor.TwoPublisherToTwoProcessorWorkProcessorThroughputTest ` says `` TwoPublisher '' in its class name , the number of publishers is set to ` private static final int NUM_PUBLISHERS = 1 ; ` Either the number should be changed , or the class name changed to reflect the number of publishers . I tried changing the constant , but that seems to make the test never finish , so I 'll just report the issue here instead of making a pull request , so you can decide what the test should be like . : )
What is the correct way to add/remove handlers dynamically ? __EoT__ Hello , I have the situation when I need dynamically add and remove handlers . My code looks like the this : `` ` java addHandler ( EventHandler handler ) { SequenceBarrier barrier = ringBuffer.newBarrier ( ) ; BatchEventProcessor processor = new BatchEventProcessor ( ringBuffer , barrier , handler ) ; processor.getSequence ( ) .set ( barrier.getCursor ( ) ) ; sequenceGroup.add ( batchEventProcessor.getSequence ( ) ) ; processor.getSequence ( ) .set ( ringBuffer.getCursor ( ) ) ; processor.run ( ) ; } removeHandler ( BatchEventProcessor processor ) { processor.halt ( ) ; sequenceGroup.remove ( processor.getSequence ( ) ) ; } `` ` Is this a correct setup ? I 'm asking this because very rarely I 'm getting the following exception on handler removal : < code > java.lang.ArrayIndexOutOfBoundsException : 0 < /code > < code > at com.lmax.disruptor.SequenceGroup.remove ( SequenceGroup.java:116 ) < /code > < code > at removeHandler ( ) < /code > and I was not able to find the issue for now : ( Using disruptor 2.10.3 with java 1.7.3 on Windows 7 x64 . Thanks in advance !
Replace octocat loading icon with standard indeterminate progressbar __EoT__ At the moment most of the lists have 2 possible loading animations : 1. the octocat with the spinning circle around 2. the loading spinner supplied by ` SwipeRefreshLayout ` I think there should be only one loading animation . In # 872 its said , that the github logo should be removed from the app , so I ` d prefer using option 2 . What are your opinions about that ?
Add image to comment/issue __EoT__ Native way to add images from your phone . Some thing we should discuss . •Where should we upload them ? ( Have not found where GitHub uploads it ) •Should we redo the comment creator at the same time ( Make it inline so you can look at other comments ) Feedback would be great , but doing this should be after we get a release out .
Ca n't select the `` logged in user '' in follower and followed list __EoT__ Steps to reproduce : - Open Github app and visit the profil of a user following you - Klick in the this list on your ( logged in ) account/user - Nothing happens ... ... In my opionen this should n't happen , because it is a incosistence in the usage of the list . When clicking on an other user profile appears .
Wrong hourly timing in news feed . __EoT__ Hour based timings are incorrect in the ui . Eg. , an event which occurred 40 minutes ago is shown in the app as 6 hours ago . Building on current master .
Improve BugSnag implementation __EoT__ As discussed , api key should be hidden . Activated on release build .
Not able to press the post comments button ( minor bug ) __EoT__ It 's not possible sometimes to send a comment : How to reproduce Open issue Press the comment button Write nothing Leave the app ( homescreen ) Open fork hub again Write something Press send button - > nothing happens Workaround : Copy your comment Leave the page Reenter comment page Paste your comment Now the send button works
Multi language app android : supportsRtl= '' true '' __EoT__ I have a multi language app with has android : supportsRtl= '' true '' in the Manifest . This causes library to assume that app is in a RTL language . Although app 's language at first run is the default locale which may be RTL or LTR Culprit seems to be LayoutUtil class . Is there any way to override this ?
Add suffix or prefix to resource names __EoT__ ` fragment_intro ` is pretty common name for projects and now I have a conflicts . I think it 's a good practice to separate resources by its namespace .
Next and Done buttons need accessibility descriptions __EoT__ Google Play Console complains about this
Improve RTL checks __EoT__ Unfortunately I ca n't squash the request , if you 'll decide to accept the request , please squash it . The current implementation that checks whether it 's an RTL device has one specific flaw , it does not check if the developer defined specifically in AndroidManifest ` android : supportsRtl= '' false '' ` , a usecase might be that an app does not want to support RTL because it does not look good when this flag is toggled on . I made 2 main changes : * Removed from the manifest ` android : supportsRtl= '' true '' ` which is wrong for a library * Changed ` isRtl ` from ` LayoutUtils ` to read what is the configuration the manifest
Feature : replace fill_parent with match_parent __EoT__ This pull request closes # 481 by replacing all occurrences of `` fill_parent '' with `` match_parent '' . Since the specified minimum SDK version is 14 ( for both the example and the library module ) it 's safe to do that because it 's higher than SDK version 8 where `` match_parent '' was introduced .
Create string.xml for Farsi ( Persian ) __EoT__ String translation for Farsi
PagerIndicatorEnabled is updated only at start __EoT__ After latest commits , `` ` showPagerIndicator ( ) `` ` does n't work if called during the intro . The value of `` ` pagerIndicatorEnabled `` ` is only read `` ` onPostCreate ( ) `` ` . Thanks @ avluis for reporting this .
Transparent Status Bar Bug __EoT__ Hello , I just upgraded to version 4.2.2 from version 4.2.0 and possibly found a new bug . In the previous version , I was able to make the statusbar transparent using the following in the v21\styles.xml : ` < item name= '' android : statusBarColor '' > @ color/statusBarSemiTransparent < /item > < item name= '' android : windowIsTranslucent '' > true < /item > < item name= '' android : windowBackground '' > @ android : color/transparent < /item > ` And the following line of code in the onCreate of the activity : ` if ( android.os.Build.VERSION.SDK_INT > = 19 ) { getWindow ( ) .getDecorView ( ) .setSystemUiVisibility ( View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN ) ; } ` However , on the latest version the statusbar defaults to black . Version 4.2.0 : ! [ 4 2 0 ] ( https : //user-images.githubusercontent.com/17969689/29355314-64eaeada-8225-11e7-9ed2-55dc4538838b.png ) Version 4.2.2 : ! [ 4 2 2 ] ( https : //user-images.githubusercontent.com/17969689/29355317-66b375bc-8225-11e7-8ffe-49034abbac3a.png )
Permissions request behavior is broken in latest release __EoT__ From : https : //github.com/apl-devs/AppIntro/commit/a6ff46b487f7607aafa8ec621526f83aefb55ee8 # commitcomment-23369181 Before ( ` v4.2.0 ` ) : * When navigating to the slide with a permission request , you would first see said slide ( explaining what the permission was needed for ) then you tap next and the permission request would be triggered . After ( ` v4.2.1+ ` ) : * When navigating to the slide with the permission request , the permission request is immediately triggered ( as soon as you navigate to said slide ) .
Calling setFlowAnimation ( ) makes intro slides black with no content __EoT__ I 've switched from AppIntro version 4.2.0 to 4.2.1 . This introduced several API breaks . Where can I find how to handle these ? Before : ` implementation ( 'com.github.apl-devs : appintro : v4.2.0 ' ) ` Now using : ` implementation ( 'com.github.apl-devs : appintro : v4.2.1 ' ) ` Examples of API breaks in this update are : `` ` AppIntroFragment.newInstance ( `` title '' , `` description '' , R.drawable.tutorial1 , ContextCompat.getColor ( this , R.color.theme_accent ) ) ) ; `` ` With 4.2.1 the above call does no longer work , a ` SliderPage ` should be passed as argument in the ` newInstance ` method , but when doing so the app intro only shows a black tab without contents . I think it would be helpful to include some code examples that show how to convert to the new version easily .
Hide pager indicator __EoT__ Hi , please is there any way how to easy hide pager indicator ? setProgressButtonEnabled hide buttons but not pager indicator . I use setVisibility ( GONE ) to indicator_container . But is there any easy way to hide all on buttom ? Thank you . **AppIntro Version** : 4.1.0 **Device/Android Version** : All devices , all version of Android
NPE when no slides have been defined __EoT__ Problem on releases after 3.3.0 `` ` Intent intro = new Intent ( this , Intro.class ) ; startActivity ( intro ) ; ... . public class Intro extends AppIntro { private SharedPreferences app_preferences ; @ Override protected void onCreate ( @ Nullable Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; app_preferences = PreferenceManager.getDefaultSharedPreferences ( this ) ; if ( false ) { addSlide ( IntroFragment.newInstance ( R.layout.intro1 ) ) ; } if ( false ) { addSlide ( Intro2Fragment.newInstance ( R.layout.intro2 ) ) ; } showSkipButton ( false ) ; } @ Override public void onSkipPressed ( Fragment currentFragment ) { super.onSkipPressed ( currentFragment ) ; // Do something when users tap on Skip button. } @ Override public void onDonePressed ( Fragment currentFragment ) { super.onDonePressed ( currentFragment ) ; this.finish ( ) ; } } `` ` This code throw : `` ` java.lang.ArrayIndexOutOfBoundsException : length=0 ; index=0 at java.util.Vector.arrayIndexOutOfBoundsException ( Vector.java:907 ) at java.util.Vector.elementAt ( Vector.java:328 ) at java.util.Vector.get ( Vector.java:442 ) at com.github.paolorotolo.appintro.PagerAdapter.getItem ( PagerAdapter.java:32 ) at com.github.paolorotolo.appintro.AppIntroBase $ 4.run ( AppIntroBase.java:192 ) at android.os.Handler.handleCallback ( Handler.java:739 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop (
Ask Permisssion for last slide not working __EoT__
Asking for permission cause the intro not slide __EoT__ I do n't know why but whenever I add ask permissions in the activity , and I launch the application I ca n't go to the next slide by swiping the screen , but I have to press the arrow key and this is the only way I can get to the next slide
NPE on missing back button __EoT__ **AppIntro Version** : 4.1.0 < ! -- What devices you managed to get the issue to come up on ? For example : fails on Galaxy S4/GT-I9500 4.4.2 , works fine on Nexus 6P 5.1 and Genymotion Nexus 5 5.0.1 -- > **Device/Android Version** : ANY < ! -- Share the details of your issue in prose , detailing actual and expected behavior . It also helps if you give some info **why** you are trying to do something as opposed to **what** is not working . -- > **Issue details / Repro steps / Use case background** : - create a custom view without back button ` R.id.back ` < ! -- Please include code snippets or whole files as necessary including XML layouts if applicable . If no code is being used , please explain why . Failure to do so will result in your issue being closed . We should n't have to ask you for code snippets later on in the issue . -- > **Your Code** : `` ` java public class OnboardingActivity extends AppIntro { ... @ Override protected int getLayoutId ( ) { return R.layout.activity_onboarding ; }
Translation please ... .. __EoT__ Translation for SKIP and DONE ...
Proguard-project.txt included in lib is hinders obfuscation of final apk __EoT__ The ` proguard-project.txt ` configuration file used in this library addresses all classes in a project . It should only affect classes belonging to its own package . This is a problem as proguard configuration files are automatically merged when building . When using this library I thus can not obfuscate my own code . Link to Proguard file : https : //github.com/PaoloRotolo/AppIntro/blob/master/library/proguard-project.txt The following lines are an issue `` `` `` -keepparameternames -renamesourcefileattribute SourceFile -keepattributes Exceptions , InnerClasses , Signature , Deprecated , SourceFile , LineNumberTable , EnclosingMethod # Preserve all annotations . -keepattributes *Annotation* # Preserve all public classes , and their public and protected fields and # methods . -keep public class * { public protected * ; } # Preserve all .class method names . -keepclassmembernames class * { java.lang.Class class $ ( java.lang.String ) ; java.lang.Class class $ ( java.lang.String , boolean ) ; } # Preserve all native method names and the names of their classes . -keepclasseswithmembernames class * { native < methods > ; } # Preserve the special static methods that are required in all enumeration # classes . -keepclassmembers
Translation please ... .. __EoT__ Translation for SKIP and DONE ...
Adding custom typeface feature & wizard development mode __EoT__ **This is pull request to add two new features** 1 . Making a setup wizard . 2 . Adding support of custom typefaces to title , description , skip button text , done button text . **Changelog : -** 1 . Adding custom typeface feature in default AppIntro & AppIntro2 2 . Adding a static cache for Typefaces to prevent memory leaks due to Typefaces . The developers can just provide the URLs of font files in Assets folder . 3 . Adding Wizard Mode to create setup wizards instead of intros . **Adding new methods** `` ` //Set custom typeface to both title & description AppIntroFragment.newInstance ( `` Title 1 '' , '' OpenSans-Light.ttf '' , '' Description 1 '' , '' OpenSans-Light.ttf '' , R.mipmap.ic_launcher , Color.parseColor ( `` # 3498db '' ) ) ; //Setting custom typeface to either title or description //To title only AppIntroFragment.newInstance ( `` Title 1 '' , getResources ( ) .getString ( R.string.title_font ) , '' Description 1 '' , null , R.mipmap.ic_launcher , Color.parseColor ( `` # 3498db '' ) ) ; //To description AppIntroFragment.newInstance ( `` Title 1 '' , null
[ WIP ] Readme : Added documentation about the slide policy , restructuring __EoT__ # Changes - Restructured readme - Added section about the SlidePolicy feature - Added section about the fading color transitions
Update README.md __EoT__ Just a few minor README.md updates . It was still referring to ` init ( ) ` in a few places - which was replaced with ` onCreate ` in the latest version .
Added Spanish translations __EoT__ As I promised in # 164 , I 've added spanish translations for Done and Skip buttons .
Fixed crashing when passing XML vector drawable as image . __EoT__ Sets the image resource rather than the image drawable . Also updated to latest support libs and build tools
Address Proguard -- address log calls __EoT__ - Updated Proguard config # 272 , # 209 & # 180 . - Wrapped Log calls behind LogHelper class # 255 .
Adding custom typeface feature & wizard development mode __EoT__ **This is pull request to add two new features** 1 . Making a setup wizard . 2 . Adding support of custom typefaces to title , description , skip button text , done button text . **Changelog : -** 1 . Adding custom typeface feature in default AppIntro & AppIntro2 2 . Adding a static cache for Typefaces to prevent memory leaks due to Typefaces . The developers can just provide the URLs of font files in Assets folder . 3 . Adding Wizard Mode to create setup wizards instead of intros . **Adding new methods** `` ` //Set custom typeface to both title & description AppIntroFragment.newInstance ( `` Title 1 '' , '' OpenSans-Light.ttf '' , '' Description 1 '' , '' OpenSans-Light.ttf '' , R.mipmap.ic_launcher , Color.parseColor ( `` # 3498db '' ) ) ; //Setting custom typeface to either title or description //To title only AppIntroFragment.newInstance ( `` Title 1 '' , getResources ( ) .getString ( R.string.title_font ) , '' Description 1 '' , null , R.mipmap.ic_launcher , Color.parseColor ( `` # 3498db '' ) ) ; //To description AppIntroFragment.newInstance ( `` Title 1 '' , null
Request to add my app to `` Apps using AppIntro '' section __EoT__ Third Eye - https : //play.google.com/store/apps/details ? id=com.miragestacks.thirdeye
I 'm using AppIntro __EoT__ Hi , I 'd like my app to be listed as using appintro , it 's called HipCar and can be found here : https : //play.google.com/store/apps/details ? id=com.hipcar.android
This is to inform my that I have two applications that are using AppIntro __EoT__ https : //play.google.com/store/apps/details ? id=anaware.salarybarometer https : //play.google.com/store/apps/details ? id=anaware.bestidea
Service Notes __EoT__ Service Notes is using your library : https : //play.google.com/store/apps/details ? id=notes.service.com.servicenotes Thank you !
Add description spannable support __EoT__ This PR adds support to add a slide description with a spannable string . ! [ baconlmy48bsandromachado12312015005934 ] ( https : //cloud.githubusercontent.com/assets/631739/12059796/32d7d034-af5a-11e5-905a-6bd405add014.png )
Use ContextCompat instead of ResourceUtils __EoT__ This PR fix the build ( google moved the ` gradle 2.0.0-alpha1 ` from ` MavenCentral ` to ` JCenter ` so the project is not compiling ) and removes unnecessary utils method , since the ContextCompat already have a method for that . Congratulations for the great library !
onDotSelected not working __EoT__ @ Override public void onDotSelected ( int index ) { Log.d ( `` intro '' , `` index `` + index + `` is selected '' ) ; } I tried this and nothing happens .
Change properties to protected __EoT__ Hi Paolo , its an amazing job you are doing there . I have a suggestion , can you change all your properties to protected instead of private ? This way we can extend and customize any of your classes . Thanks in advance .
Done ImageButton is not selectable on Amazon Fire TV __EoT__ Amazon Fire TV is based on Android 4.2.2 . Done button is not selectable in intro_layout2 . FIX : /res/layout/intro_layout2.xml Instead of android : background= '' null '' for both ImageButtons use android : background= '' ? attr/selectableItemBackgroundBorderless ''
Support AboutLibraries __EoT__ Hi , Please add support for AboutLibraries by adding the following xml titled library_appintro_strings.xml to your values folder . `` ` < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < resources > < string name= '' define_appintro '' > < /string > < ! -- Author section -- > < string name= '' library_appintro_author '' > Paolo Rotolo < /string > < string name= '' library_appintro_authorWebsite '' > http : //paolorotolo.github.io/ < /string > < ! -- Library section -- > < string name= '' library_appintro_libraryName '' > AppIntro < /string > < string name= '' library_appintro_libraryDescription '' > Android Library to make a cool intro for your app < /string > < string name= '' library_appintro_libraryWebsite '' > https : //github.com/PaoloRotolo/AppIntro < /string > < string name= '' library_appintro_libraryVersion '' > 3.2.0 < /string > < ! -- OpenSource section -- > < string name= '' library_appintro_isOpenSource '' > true < /string > < string name= '' library_appintro_repositoryLink '' > https : //github.com/PaoloRotolo/AppIntro < /string > < ! -- ClassPath for autoDetect section -- > < string name= '' library_appintro_classPath '' > com.github.paolorotolo.appintro < /string > < ! -- License section
Why does this library depend on the deprecated NineOldAndroids library ? __EoT__ The library build.gradle brings in NineOldAndroids . Why ? That library is deprecated and adds a lot of bloat : https : //github.com/PaoloRotolo/AppIntro/blob/master/library/build.gradle
Buttons are white when pressed __EoT__ In AppIntro ( not AppIntro2 ) , when you use Appcompat theme , buttons are becoming white when pressed ( this bug is reproduced in your example app ) . I guess this is because new appcompat requires to extend AppCompatActivity for button color tinting to work . I think you should upgrade your library to support proper button theming .
Hide done button __EoT__ Hi there Thanks for the great library , I 'm trying to use it for my personal project and have a quick question regarding done button . Basically , I just want to hide the button at all times ( or only hide the button when it reaches to the final slide ) and present the user with options to register or login in the final slide ( will implement my own buttons for that ) . Any help would be greatly appreciated . Many Thanks
Issue for 1 slide only __EoT__ Hi , When I create a class with only 1 slide , the `` next '' button is shown in place of `` done '' button and it does nothing . Could you please fix it ? I also would really appreciate if you make the library compatible with API 8 . I made I locally ( using nineoldandroid ) and it 's very easy , but then is boring to merge code when you make updates . Let me know if you need help with this . P.S . I 'm Italian too : ) Regards , Marcello
Removed second fragment instantiation in addSlide ( ) to support instantiation with arguments __EoT__ Example for fragment instantiation with arguments : `` ` java public static class SlideFragment extends Fragment { private static final String ARG_LAYOUT_RES_ID = `` layoutResId '' ; public static SlideFragment newInstance ( int layoutResId ) { SlideFragment slideFragment = new SlideFragment ( ) ; Bundle args = new Bundle ( ) ; args.putInt ( ARG_LAYOUT_RES_ID , layoutResId ) ; slideFragment.setArguments ( args ) ; return slideFragment ; } private int layoutResId ; public SlideFragment ( ) { } @ Override public void onCreate ( Bundle savedInstanceState ) { super.onCreate ( savedInstanceState ) ; if ( getArguments ( ) ! = null & & getArguments ( ) .containsKey ( ARG_LAYOUT_RES_ID ) ) layoutResId = getArguments ( ) .getInt ( ARG_LAYOUT_RES_ID ) ; } @ Nullable @ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater.inflate ( layoutResId , container , false ) ; } } `` ` `` ` java addSlide ( SlideFragment.newInstance ( R.layout.fragment_slide_one ) ; `` `
Touch Events bleed through __EoT__ If you have a button on a view , touch events for subsequent slides bleed through to the button even though it is not on screen .
ViewPager.setOnPageChangeListener is deprecated __EoT__ ` ViewPager.setOnPageChangeListener ` is now deprecated . We have to use ` ViewPager.addOnPageChangeListener ` instead . `` ` .addOnPageChangeListener ( new ViewPager.OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { } @ Override public void onPageScrollStateChanged ( int state ) { } } ) ; `` `
ViewPager.setOnPageChangeListener is deprecated __EoT__ ` ViewPager.setOnPageChangeListener ` is now deprecated . We have to use ` ViewPager.addOnPageChangeListener ` instead . `` ` .addOnPageChangeListener ( new ViewPager.OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { } @ Override public void onPageScrollStateChanged ( int state ) { } } ) ; `` `
ViewPager.setOnPageChangeListener is deprecated __EoT__ ` ViewPager.setOnPageChangeListener ` is now deprecated . We have to use ` ViewPager.addOnPageChangeListener ` instead . `` ` .addOnPageChangeListener ( new ViewPager.OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { } @ Override public void onPageScrollStateChanged ( int state ) { } } ) ; `` `
Add badge for android-gems.com __EoT__
Disable Skip button __EoT__ Is there any way to hide Skip button ?
XSS and HTML Injection in title field and stream URL field __EoT__ ! [ imagen ] ( https : //cloud.githubusercontent.com/assets/16137380/21840815/c859115a-d7df-11e6-96b4-4a4c51a141ea.png ) When you click in Add Stream button the injection will be executed : ! [ imagen ] ( https : //cloud.githubusercontent.com/assets/16137380/21840830/e63e773c-d7df-11e6-9dc8-e9bf5516a3c9.png ) You have to click in the injected title or url field to view the JavaSript alert .
java.lang.RuntimeException : unsubscribed before executing run ( ) with request caching enabled __EoT__ After upgrading from Hystrix 1.4.x to 1.5.10 , we started seeing [ this exception ] ( https : //github.com/Netflix/Hystrix/blob/fdfb8f970cc42bf29ac8a7438bf40734911e45d5/hystrix-core/src/main/java/com/netflix/hystrix/AbstractCommand.java # L686 ) from AbstractCommand being logged to our service 's output . This happens when request caching is enabled and the value is retrieved from the cache . Seemingly it does n't affect the outcome of the command result and the correct value is returned by ` command.queue ` . This seems to be highly timing dependent . From the investigation I 've done so far , I 've narrowed it down to the following scenario : 1 . Two commands are created on 2 different threads ( both having the same Hystrix request context ) 2 . ` command.queue ( ) ` is called on them at approximately the same time . 3 . The cache key for both commands is the same . 4 . One of the commands ( ` command1 ` ) executes asynchronously . 5 . The given exception is thrown from something in ` command2 ` and logged to the console . 6 . ` command1 ` returns the result with
Clarify HystrixBadRequestException and ExceptionNotWrappedByHystrix __EoT__ This is related to # 1503 and # 1414 So my question . Right now exceptions that implement ExceptionNotWrappedByHystrix behave like exceptions wrapped in HystrixBadRequestException . E.g . they do not trigger fallback logic . For my understanding the goal of # 1503 was to unwrap exceptions wrapped in HystrixBadRequestException but not change the logic itself . Something like : * if it is an exception that implements ExceptionNotWrappedByHystrix and no fallback is awailable , throw it . Otherwise call fallback . * if it is an exception that implements ExceptionNotWrappedByHystrix wrapped in HystrixBadRequestException throw it without triggering fallback . Sample : `` ` java private static final class HystrixBadRequestExceptionFallback extends HystrixCommand < String > { HystrixBadRequestExceptionFallback ( ) { super ( asKey ( `` hystrix-bad-request-exception-fallback '' ) ) ; } @ Override protected String run ( ) throws Exception { throw new HystrixBadRequestException ( `` need to fallback '' , new RuntimeException ( ) ) ; } // NOTE : not executed as expected @ Override protected String getFallback ( ) { System.out.println ( `` [ HystrixBadRequestExceptionFallback.fallback ] should not happen '' ) ; throw new RuntimeException ( `` not expected '' ) ;
Incorrectly getting error `` Collapser method must have one argument '' from CollapserMetaHolderFactory __EoT__ I am having a strange issue . I have a method which is annotated with HystrixCommand ` @ Override @ HystrixCommand ( fallbackMethod = `` getDataFallback '' , commandProperties = { @ HystrixProperty ( name = `` execution.isolation.thread.timeoutInMilliseconds '' , value = `` 60000 '' ) , @ HystrixProperty ( name= '' execution.isolation.thread.interruptOnTimeout '' , value= '' TRUE '' ) , @ HystrixProperty ( name = `` circuitBreaker.requestVolumeThreshold '' , value = `` 20 '' ) , @ HystrixProperty ( name = `` circuitBreaker.sleepWindowInMilliseconds '' , value = `` 10000 '' ) , @ HystrixProperty ( name = `` circuitBreaker.errorThresholdPercentage '' , value = `` 50 '' ) } , threadPoolProperties = { @ HystrixProperty ( name = `` coreSize '' , value = `` 10 '' ) } ) public List < String > getData ( String id , Date date ) { return null ; } ` it works most of the times , but rarely without changing anything I get the following exception ` java.lang.IllegalStateException : Collapser method must have one argument : public java.util.List getData ( String , Date ) ` I
Metrics stream not closing connections __EoT__ Hi , Way back in the day an issue was raised whereby connections to the metric stream were being held open when no command data was available : https : //github.com/Netflix/Hystrix/issues/85 Since the rewrite of the ` HystrixMetricsStreamServlet ` it would appear that this behaviour has slipped back in . If no data is available the ` onNext ` of the subscriber in ` HystrixSampleSseServlet ` is never called , and hence the connection is never checked , thus connections are held forever . This can be replicated using the hystrix example webapp by just curling the metrics stream upon app start up . `` ` [ norvalp @ mbp ~ ] $ curl http : //localhost:8989/hystrix-examples-webapp/hystrix.stream ^C [ norvalp @ mbp ~ ] $ curl http : //localhost:8989/hystrix-examples-webapp/hystrix.stream ^C [ norvalp @ mbp ~ ] $ curl http : //localhost:8989/hystrix-examples-webapp/hystrix.stream ^C [ norvalp @ mbp ~ ] $ curl http : //localhost:8989/hystrix-examples-webapp/hystrix.stream ^C [ norvalp @ mbp ~ ] $ curl http : //localhost:8989/hystrix-examples-webapp/hystrix.stream ^C [ norvalp @ mbp ~ ] $ curl http : //localhost:8989/hystrix-examples-webapp/hystrix.stream < html > < head > < meta http-equiv= '' Content-Type '' content= '' text/html ; charset=ISO-8859-1
Make queue size of MetricJsonListener configurable __EoT__ Currently , the MetricJsonListener in the hystrix-metrics-event-stream collects metrics into a queue which is hard-coded to a size of 1000 . Our system has a very high request rate , hence this queue gets populated quite soon when pulling the metrics stream . While we 're using version 1.4.23 right now , the latest RC also has the same issue . Could this queue size be made configurable , perhaps with a default set to the current value of 1000 , in order to allow more flexibility for larger systems ? Also , if this is agreeable , and the change is included in the current/next release candidate , what would be an approximate ETA on the next release ?
Make queue size of MetricJsonListener configurable __EoT__ Currently , the MetricJsonListener in the hystrix-metrics-event-stream collects metrics into a queue which is hard-coded to a size of 1000 . Our system has a very high request rate , hence this queue gets populated quite soon when pulling the metrics stream . While we 're using version 1.4.23 right now , the latest RC also has the same issue . Could this queue size be made configurable , perhaps with a default set to the current value of 1000 , in order to allow more flexibility for larger systems ? Also , if this is agreeable , and the change is included in the current/next release candidate , what would be an approximate ETA on the next release ?
Make queue size of MetricJsonListener configurable __EoT__ Currently , the MetricJsonListener in the hystrix-metrics-event-stream collects metrics into a queue which is hard-coded to a size of 1000 . Our system has a very high request rate , hence this queue gets populated quite soon when pulling the metrics stream . While we 're using version 1.4.23 right now , the latest RC also has the same issue . Could this queue size be made configurable , perhaps with a default set to the current value of 1000 , in order to allow more flexibility for larger systems ? Also , if this is agreeable , and the change is included in the current/next release candidate , what would be an approximate ETA on the next release ?
Hystrix without Archaius __EoT__ I want to use hystrix ( 1.4.20 ) **without** the dependency to archaius . My goal is to not having to deploy the archaius-core.jar with my application as I dont want to deal with its depencies ( like commons-lang etc. ) . As documented in the wiki , this should be possible by implementing a custom ` HystrixPropertiesStrategy ` and registering it by calling ` HystrixPlugins.getInstance ( ) .registerPropertiesStrategy ( ) ` . Unfortunately , ` HystrixPlugins ` has a compile depency to archaius ( ` ConfigurationManager ` ) in the constructor : `` ` java private HystrixPlugins ( ) { try { // Load configuration from hystrix-plugins.properties , if that file exists ConfigurationManager.loadCascadedPropertiesFromResources ( `` hystrix-plugins '' ) ; } catch ( IOException e ) { // fail silently } } `` ` How I can use my custom ` HystrixPropertiesStrategy ` without having to deploy archaius-core.jar ?
Implementation for feature request # 1013 __EoT__ I implemented a simple way to configure the timeout thread pool core size via a system property . The default is still Runtime.getRuntime ( ) . availableProcessors ( ) . I also added test cases for this feature .
Many HystrixTimer-Threads __EoT__ I am using Hystrix on a heavy machine with many cores in a virtualized environment . My problem is that Hystrix creates 128 HystrixTimer-Threads , which I do not require . For my use case a couple of threads would be sufficient . The cause of this seems to be in **com.netflix.hystrix.util.HystrixTimer** , which uses **Runtime.getRuntime ( ) .availableProcessors ( ) ** . In my case , this returns 128 . I have not found an easy way to configure/override this . Could we configure this via system property and default to Runtime.getRuntime ( ) .availableProcessors ( ) ?
Add mechanism to get exception from executed command __EoT__ See comment in # 974 . Currently , this capability exists just for execution exceptions fired by the ` run ( ) ` method . This misses timeouts/short-circuits/rejections . It would be helpful to have a unified mechanism for getting exception instances out of command executions , regardless of why the exception arose .
Javanica : HystrixCommandAspect not able to get generic class type __EoT__ I 'm using hystrix command on a class which is implementing generic interface . HystrixCommandAspect is not able to retrieve the parameter types of the child class . `` ` public interface IHelloComponent < K , T > { public String getValue ( final K key , final T value ) ; public String defaultValue ( final K key , final T value ) ; } @ Service public class HelloComponent implements IHelloComponent < String , String > { @ Override @ HystrixCommand ( fallbackMethod = `` defaultValue '' ) public String getValue ( final String key , final String value ) { if ( true ) throw new RuntimeException ( ) ; return `` Hello '' ; } public String defaultValue ( final String key , final String value ) { return `` default '' ; } `` ` Inside ` HystrixCommandAspect ` Method value is coming as ` public java.lang.String HelloComponent.getValue ( java.lang.Object , java.lang.Object ) ` . Because of this it throws error ` hystrixCommand can not be null ` .
Push RequestContext tolerance into ConcurrencyStrategy __EoT__ Design change as mentioned in # 92
HystrixObservableCollapser does not properly handle streams per request arg __EoT__ Bug reported in https : //groups.google.com/forum/ # ! topic/hystrixoss/etlb_JE90CU . The root cause is that , upon receiving the first piece of a batch response which matches a request arg , that Collapser has onNext ( data ) and onCompleted ( ) invoked . This happens even if more data is available for that Collapser .
HystrixRequestLog shows [ Executed ] after all commands have delivered values __EoT__ crossposted from https : //groups.google.com/forum/ # ! topic/hystrixoss/tiJlm32RHTQ
If a hook throws an exception , onThreadStart called but onThreadComplete not __EoT__
Hystrix threads are not daemon ... cause hangs __EoT__ As pointed out in issue # 102 the JVM hangs waiting for thread pool and timer threads to complete . As proposed in that issue , those threads ought to be set as daemon threads to avoid having to call ` Hystrix.reset ( ) ` I 'd like to submit a pull request with these threads being set as daemon threads .
Hystrix threads are not daemon ... cause hangs __EoT__ As pointed out in issue # 102 the JVM hangs waiting for thread pool and timer threads to complete . As proposed in that issue , those threads ought to be set as daemon threads to avoid having to call ` Hystrix.reset ( ) ` I 'd like to submit a pull request with these threads being set as daemon threads .
BatchHystrixCommand has no sence and does n't collapse requests __EoT__ ` BatchHystrixCommand ` calls underlying action as many times as it 's requested and thus there is no benefit of collapse requests feature at all . Actual processing ` Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ` should be done only once for same set of request args . `` ` java @ Override protected List < Optional < Object > > run ( ) throws Exception { List < Optional < Object > > response = Lists.newArrayList ( ) ; for ( HystrixCollapser.CollapsedRequest < Object , Object > request : getCollapsedRequests ( ) ) { final Object [ ] args = ( Object [ ] ) request.getArgument ( ) ; try { response.add ( //this should be called only once for several equals args arrays , //otherwise underlying command action will be called as many times as many it was requested Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ) ; } catch ( Exception ex ) { request.setException ( ex ) ; response.add ( Optional.absent ( ) ) ; } } return response ; }
Javanica echo test failure __EoT__ Reported in Google Group : https : //groups.google.com/forum/ # ! topic/hystrixoss/0zw3ffAB3g4 /cc @ dmgcodevil I am getting a failure on the Javanica echo test , whihc should return an Integer but returns a HystrixExecutableBase instead . I noticed that Execution type for the test reurns ASYNCHRONOUS , and I am worndering if this is a java version issue ? `` ` @ HystrixCommand public < T > T echo ( T value ) { return value ; } `` ` basically type < T > type.isAssignableFrom ( Future.class ) is true I am about to extend the annotation for some cusotm code and want to make sure I get the tests setup correct first . Thoughts ?
BatchHystrixCommand has no sence and does n't collapse requests __EoT__ ` BatchHystrixCommand ` calls underlying action as many times as it 's requested and thus there is no benefit of collapse requests feature at all . Actual processing ` Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ` should be done only once for same set of request args . `` ` java @ Override protected List < Optional < Object > > run ( ) throws Exception { List < Optional < Object > > response = Lists.newArrayList ( ) ; for ( HystrixCollapser.CollapsedRequest < Object , Object > request : getCollapsedRequests ( ) ) { final Object [ ] args = ( Object [ ] ) request.getArgument ( ) ; try { response.add ( //this should be called only once for several equals args arrays , //otherwise underlying command action will be called as many times as many it was requested Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ) ; } catch ( Exception ex ) { request.setException ( ex ) ; response.add ( Optional.absent ( ) ) ; } } return response ; }
BatchHystrixCommand has no sence and does n't collapse requests __EoT__ ` BatchHystrixCommand ` calls underlying action as many times as it 's requested and thus there is no benefit of collapse requests feature at all . Actual processing ` Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ` should be done only once for same set of request args . `` ` java @ Override protected List < Optional < Object > > run ( ) throws Exception { List < Optional < Object > > response = Lists.newArrayList ( ) ; for ( HystrixCollapser.CollapsedRequest < Object , Object > request : getCollapsedRequests ( ) ) { final Object [ ] args = ( Object [ ] ) request.getArgument ( ) ; try { response.add ( //this should be called only once for several equals args arrays , //otherwise underlying command action will be called as many times as many it was requested Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ) ; } catch ( Exception ex ) { request.setException ( ex ) ; response.add ( Optional.absent ( ) ) ; } } return response ; }
BatchHystrixCommand has no sence and does n't collapse requests __EoT__ ` BatchHystrixCommand ` calls underlying action as many times as it 's requested and thus there is no benefit of collapse requests feature at all . Actual processing ` Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ` should be done only once for same set of request args . `` ` java @ Override protected List < Optional < Object > > run ( ) throws Exception { List < Optional < Object > > response = Lists.newArrayList ( ) ; for ( HystrixCollapser.CollapsedRequest < Object , Object > request : getCollapsedRequests ( ) ) { final Object [ ] args = ( Object [ ] ) request.getArgument ( ) ; try { response.add ( //this should be called only once for several equals args arrays , //otherwise underlying command action will be called as many times as many it was requested Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ) ; } catch ( Exception ex ) { request.setException ( ex ) ; response.add ( Optional.absent ( ) ) ; } } return response ; }
JavaScript error : `` isNan is not defined '' __EoT__ This commit causes a JavaScript error , because of casing on `` isNaN '' . https : //github.com/Netflix/Hystrix/commit/dc3bc3cac5ff349cb7cdca93c3bbf0b875f473f7
FALLBACK_REJECTION not really working due to Schedulers.immediate __EoT__ Because HystrixCommand.queue is using Schedulers.immediate when you schedule multiple threads with slow fallback the thread that queues commands gets blocked instead of rejecting them . HystrixCommandTest.testFallbackSemaphore does not cover real use case , write a better test .
HystrixMetricsStreamServlet.destroy ( ) not invoked until container timeout __EoT__ **Scenario : ** 1 . JEE App with hystrix + hystrix-metrix-event-stream ( v1.3.18 ) . 2 . Hystrix dashboard requesting data to the App . 3 . When we stop App in our server we see that the following loop does n't stop : `` ` HystrixMetricsStreamServlet.handleRequest ( ) { ... while ( poller.isRunning ( ) & & ! isDestroyed ) { `` ` The servlet 's destroy ( ) method is not called , thus **isDestroyed is not modified until timeout** . This makes sense since , according to the servlet spec : _void destroy ( ) - Called by [ ... ] This method is only called once all threads within the servlet 's service method have exited or after a timeout period has passed._ The problem is that since there is a running request , whenever we want to republish/stop our application , we have to wait 60 seconds until our container ( Websphere Application Server 8 ) forces the destruction of the servlet .
onRunSuccess/onThreadComplete hooks called in timeout flow __EoT__ In 1.3.x , under thread isolation , when a HystrixCommand times out , the ` onRunSuccess ` / ` onThreadComplete ` hooks are invoked by the Hystrix thread eventually , even if the calling thread has already moved through the fallback flow . In master/1.4 , only the ` onThreadComplete ` hook is invoked ( eventually ) . /cc @ benjchristensen , @ KoltonAndrus What should the semantics be ? I 'd like to decide that and then enforce it in both 1.3.x and master
Examine work performed on Hystrix-isolated thread __EoT__ From # 327 and # 378 , the Execution hook ` onThreadComplete ` is getting called earlier than in Hystrix 1.3 . This issue is intended to describe the differences between what work gets executed on the isolated thread in 1.3 and 1.4 and confirm this is being done properly
Caching feature for javanica . __EoT__ Recently I was looking around javanica in order to find what hystrix features are n't implemented yet . For now I see only one feature to implement : building cache keys using annotations and I have several approaches to implement it , so I would like to discuss it first . Initially I thought about adding an ability to annotate each method parameter using @ Cache annotation , for instance : `` ` java @ HystrixCommand User getUserByParams ( @ Cache String id , String name , @ Cache Integer age ) `` ` Each parameter annotated @ Cache annotation will be used to build cache key . Algorithm is pretty simple : for each parameter annotated with @ Cache annotation the toString ( ) method will be invoked Basically this approach looks fine , but is n't convenient if you deal with complex arguments , for example : `` ` java @ HystrixCommand User getUserByParams ( @ Cache Profile profile ) ; // ... class Profile { private String email ; private boolean active ; public String toString ( ) { // all properties are used here } `` ` Thus if you
Cleaner error propagation in hystrix javanica __EoT__ From : https : //github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica '' Based on this description , @ HystrixCommand has an ability to specify exceptions types which should be ignored and wrapped to throw in HystrixBadRequestException . `` ` @ HystrixCommand ( ignoreExceptions = { BadRequestException.class } ) public User getUserById ( String id ) { return userResource.getUserById ( id ) ; } `` ` If userResource.getUserById ( id ) ; throws an exception which type is BadRequestException then this exception will be wrapped in HystrixBadRequestException and will not affect metrics and will not trigger fallback logic . '' Would n't it be cleaner to unwrap the original exception and rethrow it , like I do in my prototype : https : //github.com/davidkarlsen/hystrix-aop/blob/master/src/main/java/com/davidkarlsen/hystrix/aop/HystrixAspect.java Because when adding hystrix as an AOP aspect I 'd like not to alter the service signature/exceptions thrown . I like the idea that you can tell hystrix which exceptions to ignore as errors , but would like to get them thrown unwrapped , so hystrix is not change how exceptions should be catched by a client . Ideally hystrix should be invisible when throwing `` business exceptions '' .
Dashboard : Hover for full name ( when shortened with ellipsis ) __EoT__ A recent change handles long names in the dashboard by putting an ellipsis in them . To allow someone to see the actual name let 's add the ability to hover and see a tooltip or something like that for the full name . ! [ Screen Shot 2012-12-21 at 1 25 41 PM ] ( https : //f.cloud.github.com/assets/813492/27938/00ed5168-4bb5-11e2-8ab6-97b1e1dc9eee.png )
TextRank算法的优化 __EoT__ TextRank算法采用多轮迭代收敛来获取结果，目前的实现中score没有赋初值。 实际测试中依据已有信息赋初值能有效的降低迭代轮次，以作者 http : //www.hankcs.com/nlp/textrank-algorithm-to-extract-the-keywords-java-implementation.html 的例子，采用了两种不同的初值方法 1、初值采用sigmoid函数来赋值，实测示例计算从37轮迭代降低为9轮。我是用scala测试的，Java实现参考 Map score = new HashMap ( ) ; for ( Map.Entry < String , Set > entry : words.entrySet ( ) ) { score.put ( entry.getKey ( ) , sigmoid ( entry.getValue ( ) .size ( ) ) ; } 2、把sigmoid函数更改为 1.0*entry.getValue ( ) .size ( ) /words.size ( ) ，可以从37轮次降低为34轮次 建议采用sigmoid函数提升效率，sigmoid函数scala实现就是一行 def sigmoid ( x : Double ) : Double = { 1d/ ( 1d+Math.exp ( -x ) ) }
while 方法可能少写break __EoT__ java新手第一次使用github , 如有缺失请见谅 使用 findbugs找到的，报以下错误 Value of Node.label from previous case is overwritten here due to switch statement fall through [ Scariest ( 1 ) , High confidence ] 在 com.hankcs.hanlp.dependency.common.Node的第182行 `` ` case wh : label = `` x '' ; case begin : label = `` root '' ; break ; `` ` case wh 没有break , 不确定这样是否会造成问题。
TypeToken.isSubTypeOf ( ) should consider declared bounds for type variables __EoT__ private interface Foo < T extends Number > { } public void testUnboundedAndBounded ( ) { TypeToken < Foo < ? > > a = new TypeToken < Foo < ? > > ( ) { } ; TypeToken < Foo < ? extends Number > > b = new TypeToken < Foo < ? extends Number > > ( ) { } ; assertTrue ( a.isSubtypeOf ( b ) ) ; // fails assertTrue ( b.isSubtypeOf ( a ) ) ; } I think that we want that to pass . In our ` isSubtypeOf ( ) ` docs , we claim to implement [ a section of the JLS ] ( http : //docs.oracle.com/javase/specs/jls/se8/html/jls-4.html # jls-4.5.1 ) . That section mentions `` capture conversion , '' which sounds like maybe something that ` isSubtypeOf ( ) ` should be doing but is n't ( or is n't doing completely ) ? But I 'm in over my head .
Maven repo __EoT__ _ [ Original issue ] ( https : //code.google.com/p/guava-libraries/issues/detail ? id=1 ) created by **b.k.oxley** on 2009-09-16 at 04:03 PM_ -- - Top issues for me -- when you begin releasing jar files , please provide some kind of maven support for them . Ideal would be to include the binary/source/javadoc triplet jars in the maven central repo .
make CycleDetectingLockFactory.lockStateChanged static __EoT__
make MultisetNavigationTester.totalSize in guava-testlib static __EoT__
make methods in CycleDetectingLockFactoryBenchmark static __EoT__
make some methods in guava-tests static __EoT__
Cache.stats usage should be documented better __EoT__ As a novice of using Cache I think its statistic activation should be documented in the API of stats ( ) . First : recordStats ( ) is to be isssued . Second : stats ( ) can not be instantiated because it is a factory for a final statistic .
ClassPath documentation should warn of limitations __EoT__ ClassPath only operates on URLClassLoaders . It quietly ignores all others . This limitation can be a pretty big surprise in environments ( OSGi , Servlet ) where those are not in use . A warning in the doc would seem appropriate .
TypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type __EoT__ The visitClass implementation in TypeResolver.populateTypeMappings has the following body : `` ` @ Override void visitClass ( Class < ? > fromClass ) { // Ca n't map from a raw class to anything other than itself . // You ca n't say `` assuming String is Integer '' . // And we do n't support `` assuming String is T '' ; user has to say `` assuming T is String '' . throw new IllegalArgumentException ( `` No type mapping from `` + fromClass ) ; } `` ` It would be great if the IllegalArgumentException message reported the type it 's trying to convert to , as well as the one its converting from , for easier debugging should this exception be thrown .
CountingOutputStream allegedly declares @ Nullable out ( wrapped ) , but will NPE __EoT__ _ [ Original issue ] ( https : //code.google.com/p/guava-libraries/issues/detail ? id=1869 ) created by **anth ... @ whitford.com** on 2014-10-22 at 01:01 AM_ -- - The constructor suggests that outputsteam may be null : public CountingOutputStream ( @ ﻿Nullable OutputStream out ) But then any write/close operation will NPE : @ ﻿Override public void write ( byte [ ] b , int off , int len ) throws IOException { & nbsp ; & nbsp ; & nbsp ; & nbsp ; out.write ( b , off , len ) ; & nbsp ; & nbsp ; & nbsp ; & nbsp ; count += len ; } Either the @ ﻿Nullable annotation should be removed , or the write/close methods should only pass-through when out is non-null .
CountingOutputStream allegedly declares @ Nullable out ( wrapped ) , but will NPE __EoT__ _ [ Original issue ] ( https : //code.google.com/p/guava-libraries/issues/detail ? id=1869 ) created by **anth ... @ whitford.com** on 2014-10-22 at 01:01 AM_ -- - The constructor suggests that outputsteam may be null : public CountingOutputStream ( @ ﻿Nullable OutputStream out ) But then any write/close operation will NPE : @ ﻿Override public void write ( byte [ ] b , int off , int len ) throws IOException { & nbsp ; & nbsp ; & nbsp ; & nbsp ; out.write ( b , off , len ) ; & nbsp ; & nbsp ; & nbsp ; & nbsp ; count += len ; } Either the @ ﻿Nullable annotation should be removed , or the write/close methods should only pass-through when out is non-null .
Fix Documentation of Stopwatch for Release 15 __EoT__ _ [ Original issue ] ( https : //code.google.com/p/guava-libraries/issues/detail ? id=1492 ) created by **sebastian.davids** on 2013-08-05 at 03:23 PM_ -- - Related to issue 1307 . `` This constructor is scheduled to be remove in Guava release 17.0 . '' remove = > removed '' When testing code that uses this class , use the alternate constructor to supply a fake or mock ticker . '' = > used different wording and link to factory method ( s )
List-like type between jagged multi-dimensional arrays and Tables __EoT__ _ [ Original issue ] ( https : //code.google.com/p/guava-libraries/issues/detail ? id=1276 ) created by **jamie.spencer.86** on 2013-02-01 at 10:15 AM_ -- - I would hope that I went about requesting this correctly . I looked up how to make suggestions before filing an issue , and I also looked to see if this was already addressed . I also was n't sure whether I needed any example code , as I do n't have any on hand . As for the topic , assume that a List & lt ; T > API enhances a T [ ] , but is constraining compared to a Map & lt ; Integer , T > . I was wondering if their would be any use for some class that is analogous to the previous assumption for guava 's Table collection type and a jagged array ? from T [ ] [ ] to some class analogous to List & lt ; List & lt ; T > > to Table & lt ; Integer , Integer , T > Thank you .
SimpleExoPlayer : Can not disable audio focus handling after enabling it __EoT__ I think there 's a problem with the way this returns without doing anything : https : //github.com/google/ExoPlayer/blob/release-v2/library/core/src/main/java/com/google/android/exoplayer2/audio/AudioFocusManager.java # L145 It probably needs to reset some state , and abandon audio focus if it was previously held . I actually wonder whether just deleting this ` if ( null ) { return } ` will result in the right thing happening ? @ nic0lette - Could you take a look ? Thanks !
Add option to show buffering view when setPlayWhenReady=false __EoT__ private void updateBuffering ( ) { if ( bufferingView ! = null ) { boolean showBufferingSpinner = showBuffering & & player ! = null & & player.getPlaybackState ( ) == Player.STATE_BUFFERING & & ` player.getPlayWhenReady ( ) ; ` bufferingView.setVisibility ( showBufferingSpinner ? View.VISIBLE : View.GONE ) ; } } I think PlayerView.getPlayWhenReady ( ) should not interfere with the visibility of the bufferingView , since the player keeps buffering even when paused ...
Add option to show buffering view when setPlayWhenReady=false __EoT__ private void updateBuffering ( ) { if ( bufferingView ! = null ) { boolean showBufferingSpinner = showBuffering & & player ! = null & & player.getPlaybackState ( ) == Player.STATE_BUFFERING & & ` player.getPlayWhenReady ( ) ; ` bufferingView.setVisibility ( showBufferingSpinner ? View.VISIBLE : View.GONE ) ; } } I think PlayerView.getPlayWhenReady ( ) should not interfere with the visibility of the bufferingView , since the player keeps buffering even when paused ...
Native crash on Asus Zenfone Go ( ZB500KL ) __EoT__ # # # Issue description Exoplayer crashes when playing any video from cache . # # # Reproduction steps * Clone demo repository ( https : //github.com/google/ExoPlayer/tree/release-v2/demos/main ) * In ` DemoApplication.java ` replace ` buildReadOnlyCacheDataSource ` method with following method : `` ` private static CacheDataSourceFactory buildCacheDataSource ( DefaultDataSourceFactory upstreamFactory , Cache cache ) { return new CacheDataSourceFactory ( cache , upstreamFactory ) ; } `` ` # # # Version of ExoPlayer being used 2.8.0 , 2.8.1 , 2.8.2 # # # Device ( s ) and version ( s ) of Android being used Asus Zenfone Go ( ZB500KL ) , Android 6.0.1 # # # A full bug report captured from the device [ bugreport.txt ] ( https : //github.com/google/ExoPlayer/files/2156168/bugreport.txt ) Native crash stacktrace from Logcat . `` ` 07-02 20:04:09.129 25936-26089/com.google.android.exoplayer2.demo A/GraphicBuffer : getNativeBuffer ( ) called on NULL GraphicBuffer 07-02 20:04:09.129 25936-26089/com.google.android.exoplayer2.demo A/libc : Fatal signal 6 ( SIGABRT ) , code -6 in tid 26089 ( CodecLooper ) 07-02 20:04:09.235 308-308/ ? A/DEBUG : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** Build fingerprint :
Support multiple TXXX ID3 tags __EoT__ This pull request change representation of ID3 data from Map < String , Object > to Id3Tag class . Id3Tag implements Map < String , Object > for backward compability . However for TXXX frames Id3Tag class have separate Set collection , and because of that Id3Parser was also changed to put all TXXX inside Set and not inside Map itself . According to ID3v2.3.0 documentation `` [ There may be more than one `` TXXX '' frame in each tag ] ( http : //id3.org/id3v2.3.0 # User_defined_text_information_frame ) '' , previous implementation was overriding TXXX key value and in the end only last TXXX was included in Map object .
java.io.EOFException : ExoPlayer does not play local short MP4 file __EoT__ Hi , we are moving from MediaPlayer to ExoPlayer but when we try to play the attached file ExoPlayer fails with the following exception . The same file is succesfully played with MediaPlayer . ExoPlayer plays all other files successfully , but there is a problem with this file . ExoPlayer version : 2.5.3 TEsted on : 1 . Android-26 ( X86 Emulator ) 2 . Samsung Galaxy J7 ( SM-J710FQ ) Android 7.0 ExoPlayer is created with default settings : `` ` m_BandwidthMeter = new DefaultBandwidthMeter ( ) ; m_VideoTrackSelectionFactory = new AdaptiveTrackSelection.Factory ( m_BandwidthMeter ) ; // Produces DataSource instances through which media data is loaded . String appName = getApplicationContext ( ) .getPackageName ( ) ; m_DataSourceFactory = new DefaultDataSourceFactory ( this , Util.getUserAgent ( this , appName ) , m_BandwidthMeter ) ; // Produces Extractor instances for parsing the media data . m_ExtractorsFactory = new DefaultExtractorsFactory ( ) ; m_TrackSelector = new DefaultTrackSelector ( m_VideoTrackSelectionFactory ) ; m_VideoPlayer = ExoPlayerFactory.newSimpleInstance ( this , m_TrackSelector ) ; `` ` `` ` I/ExoPlayerImpl : Init 7b1e44d [ ExoPlayerLib/2.5.3 ] [ generic_x86 , Android SDK built for x86
java.io.EOFException : ExoPlayer does not play local short MP4 file __EoT__ Hi , we are moving from MediaPlayer to ExoPlayer but when we try to play the attached file ExoPlayer fails with the following exception . The same file is succesfully played with MediaPlayer . ExoPlayer plays all other files successfully , but there is a problem with this file . ExoPlayer version : 2.5.3 TEsted on : 1 . Android-26 ( X86 Emulator ) 2 . Samsung Galaxy J7 ( SM-J710FQ ) Android 7.0 ExoPlayer is created with default settings : `` ` m_BandwidthMeter = new DefaultBandwidthMeter ( ) ; m_VideoTrackSelectionFactory = new AdaptiveTrackSelection.Factory ( m_BandwidthMeter ) ; // Produces DataSource instances through which media data is loaded . String appName = getApplicationContext ( ) .getPackageName ( ) ; m_DataSourceFactory = new DefaultDataSourceFactory ( this , Util.getUserAgent ( this , appName ) , m_BandwidthMeter ) ; // Produces Extractor instances for parsing the media data . m_ExtractorsFactory = new DefaultExtractorsFactory ( ) ; m_TrackSelector = new DefaultTrackSelector ( m_VideoTrackSelectionFactory ) ; m_VideoPlayer = ExoPlayerFactory.newSimpleInstance ( this , m_TrackSelector ) ; `` ` `` ` I/ExoPlayerImpl : Init 7b1e44d [ ExoPlayerLib/2.5.3 ] [ generic_x86 , Android SDK built for x86
libstagefright.so SIGSEGV on various Android 7/7.1 devices after upgrading to 2.5.1 __EoT__ # # # Issue description After upgrading ExoPlayer to 2.5.1 ( from 2.4.4 ) we are seeing a lot of user reports of a ` libstagefright.so ` SIGSEGV . Playback starts , but a crash occurs when the player is released . This may be specific to ` Widevine+DASH ` , as the demo app will not crash using the ` Youtube DASH ` demos , while it crashes the same as our application on ` Widevine+DASH ` demos . I have a feeling this may be related to the recent CENC support added : https : //github.com/google/ExoPlayer/issues/1989 But I also do n't know what I 'm talking about , so who knows ; ) I had a quick play at making ` DefaultDrmSessionManager ` return ` false ` for ` canAquireSession ` if the type was ` cenc ` etc . ( that whole conditional ) , but ExoPlayer never seemed to call that method at all . Will fiddle a bit more , but thought I 'd raise this ASAP . A remote colleague has a device that can reproduce the crash ( Motorola G5 Plus
libstagefright.so SIGSEGV on various Android 7/7.1 devices after upgrading to 2.5.1 __EoT__ # # # Issue description After upgrading ExoPlayer to 2.5.1 ( from 2.4.4 ) we are seeing a lot of user reports of a ` libstagefright.so ` SIGSEGV . Playback starts , but a crash occurs when the player is released . This may be specific to ` Widevine+DASH ` , as the demo app will not crash using the ` Youtube DASH ` demos , while it crashes the same as our application on ` Widevine+DASH ` demos . I have a feeling this may be related to the recent CENC support added : https : //github.com/google/ExoPlayer/issues/1989 But I also do n't know what I 'm talking about , so who knows ; ) I had a quick play at making ` DefaultDrmSessionManager ` return ` false ` for ` canAquireSession ` if the type was ` cenc ` etc . ( that whole conditional ) , but ExoPlayer never seemed to call that method at all . Will fiddle a bit more , but thought I 'd raise this ASAP . A remote colleague has a device that can reproduce the crash ( Motorola G5 Plus
RTMP extension 's buid.gradle does not use modulePrefix for dependency on : library-core __EoT__ ( Title should be explicit enough ) .
Add or remove playlist items ( MediaSources ) __EoT__ I use exoplayer dev-v2 , I need function to add or remove playlist items ( media sources ) without release player or initialize player . Can you make this function ? thanks !
Combining ClippingMediaSource with LoopingMediaSource causes gap in loop __EoT__ # # # Issue description I want to loop part of mp3 ( based on user selection ) without having any silence gap in between loops . Right now in between loops there is a noticeable gap of silence . I can probably go around that using seeking , timer and listening to player events for looping but that 's not an elegant solution . # # # Reproduction steps Issue can be reproduced with any mp3 and on all devices I have tested it on . It also does n't seem to depend on clipped length either . `` ` Uri uri = Uri.parse ( new File ( track.getPath ( ) ) .toString ( ) ) ; DataSource.Factory dataSourceFactory = new DefaultDataSourceFactory ( context , Util.getUserAgent ( context , ExoConst.APP_NAME ) ) ; ExtractorsFactory extractorsFactory = new DefaultExtractorsFactory ( ) ; ExtractorMediaSource baseMediaSource = new ExtractorMediaSource ( uri , dataSourceFactory , extractorsFactory , null , null ) ; ClippingMediaSource clippingMediaSource = new ClippingMediaSource ( baseMediaSource , startMS * 1000 , endMS * 1000 ) ; LoopingMediaSource loopingMediaSource = new LoopingMediaSource ( clippingMediaSource ) ; `` ` # # # Link
Do n't show playback controls automatically ( e.g . when playback starts/fails/ends ) __EoT__ # # # Issue description **observed behavior : ** when a video starts or ends , the media controllers ( play/pause/seekbar etc ) are automatically shown . **wanted behavior : ** when the video starts or ends , do **not** show the media controllers . i was able to prevent the controllers from showing on video **start** by calling ` mExoPlayerView.hideController ( ) ; ` as the very first line inside the method ` public void onPlayerStateChanged ( boolean playWhenReady , int playbackState ) ` . however this does not prevent the controllers from being shown on video **end** . instead what happens is the controllers are shown and imminently hidden again . this probably means that when a video ends , the controllers are first shown in the internal ExoPlayer code , and only **after** that , triggers ` public void onPlayerStateChanged ( boolean playWhenReady , int playbackState ) ` in my code . is it possible to **not** show the controllers on video end at all ? if so , how could i do that ? if not , please consider adding this feature
Add or remove playlist items ( MediaSources ) __EoT__ I use exoplayer dev-v2 , I need function to add or remove playlist items ( media sources ) without release player or initialize player . Can you make this function ? thanks !
`` Repeat '' toggle function ( Repeat All/Repeat One ) on playlist __EoT__ I have list of videos played using ExoPlayer and I want to add Repeat button . I am using ConcatenatingMediaSource so far and I do n't know how to handle if the user changed the toggle to `` Repeat One '' or changing it back to `` Repeat All '' Thanks
`` Repeat '' toggle function ( Repeat All/Repeat One ) on playlist __EoT__ I have list of videos played using ExoPlayer and I want to add Repeat button . I am using ConcatenatingMediaSource so far and I do n't know how to handle if the user changed the toggle to `` Repeat One '' or changing it back to `` Repeat All '' Thanks
`` Repeat '' toggle function ( Repeat All/Repeat One ) on playlist __EoT__ I have list of videos played using ExoPlayer and I want to add Repeat button . I am using ConcatenatingMediaSource so far and I do n't know how to handle if the user changed the toggle to `` Repeat One '' or changing it back to `` Repeat All '' Thanks
`` Repeat '' toggle function ( Repeat All/Repeat One ) on playlist __EoT__ I have list of videos played using ExoPlayer and I want to add Repeat button . I am using ConcatenatingMediaSource so far and I do n't know how to handle if the user changed the toggle to `` Repeat One '' or changing it back to `` Repeat All '' Thanks
Unable to buffer .m4a files __EoT__ I ’ m using ExoPlayer ` r2.0.2 ` and got a issue when playing .m4a file , e.g . http : //media.rawvoice.com/afrojack/media2-afrojack.podtree.com/media/podcast/Afrojack_-_JACKED_Radio_259.m4a . The audio stream loads fine and the playback starts , but after around 25 seconds the player get stucked in the ` ExoPlayer.STATE_BUFFERING ` state when the buffer is empty . Looks like the reason for this is that the lib fails to read more bytes from the audio stream . ` C.RESULT_NOTHING_READ ` is returned and the player keeps trying until the user close the player . No error is thrown , it just keeps trying to read from the audio stream but each time ` C.RESULT_NOTHING_READ ` is returned . The same code works fine for other audio formats/files . If the user seek in the stream the buffer are filled up and can be played for another 25 seconds . Got the same result in my app and in the ExoPlayer demo-app when playing the .m4a file . Tested on LG G3 ( 5.0 ) , Nexus 5X ( 7.0 ) and Samsung Galaxy S7 Edge ( 6.0.1 ) with same results . This is the setup I
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Bound nextIndex on seek to be 0 < = nextIndex < = numSegments __EoT__ This helps avoid issues when seeking very close to the start and end of the track , in particular if the seek is to t=0 but the start time of the first segment is very slightly greater than 0 . If this makes sense , bounding should be applied in the following places : https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/dash/DashMp4ChunkSource.java # L174 https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/dash/DashWebmChunkSource.java # L155 https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java # L200
Add support for parsing senc boxes . __EoT__ See : http : //www.uvvuwiki.com/images/c/cb/CFFMediaFormat-1.1r1.pdf https : //github.com/castlabs/ExoPlayer/commit/08fdfc0276d0339392e81279c0083d2b6ee4e24e
Investigate adding HLS support . __EoT__
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Add support for avc3 boxes in fragmented mp4 streams . __EoT__
Support wider range of DASH manifests __EoT__ Currently ExoPlayer only supports a narrow subset of possible DASH manifests . Support should be added for manifests containing segment lists and segment templates . Note : As a workaround , application developers can already support arbitrary DASH manifests through implementing their own parser and ChunkSource ( it 's probably useful to use DashMp4ChunkSource as a starting point ) .
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
SmoothStream audio track language metadata is not made available __EoT__ When we request the Audio tracks on a SmoothStream stream the language attribute on the manifest xml is not made available on the _MediaFormat_ language property return from the _getTrackFormat_ method : https : //github.com/google/ExoPlayer/blob/0c060f429f459f1bac2ffa0963cadc45ce35b73a/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java # L327 It seems the language attribute is parsed and passed down to the _StreamElement_ https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java # L580 But when the MediaFormat instance is created the language property is linked to the _TrackElement_ ( not to the StreamElement ) : https : //github.com/google/ExoPlayer/blob/c9caaad50c4148a8c369816c100c170436a3d4d6/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingChunkSource.java # L417 The _TrackElement_ does not contain the language flag : https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java # L134 As a result the _getTrackFormat_ will always return a _MediaFormat_ with a language set to _null_ , even if the metadata is available on the manifest .
SmoothStream audio track language metadata is not made available __EoT__ When we request the Audio tracks on a SmoothStream stream the language attribute on the manifest xml is not made available on the _MediaFormat_ language property return from the _getTrackFormat_ method : https : //github.com/google/ExoPlayer/blob/0c060f429f459f1bac2ffa0963cadc45ce35b73a/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java # L327 It seems the language attribute is parsed and passed down to the _StreamElement_ https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java # L580 But when the MediaFormat instance is created the language property is linked to the _TrackElement_ ( not to the StreamElement ) : https : //github.com/google/ExoPlayer/blob/c9caaad50c4148a8c369816c100c170436a3d4d6/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingChunkSource.java # L417 The _TrackElement_ does not contain the language flag : https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java # L134 As a result the _getTrackFormat_ will always return a _MediaFormat_ with a language set to _null_ , even if the metadata is available on the manifest .
Added id property to the MediaFormat class __EoT__ In our application we give people control of the `` selected '' track on the player for DASH streams however there was no way for people to identify the track , unless if you knew the bitrate or width/height properties . This change adds the ` id ` property to the MediaFormat class which is read from the DASH Media Presentation Description . This way it 's easier for users to identify tracks on the player . CLA should be signed : https : //groups.google.com/forum/ # ! forum/jwplayer-google-contributors Feedback is appreciated , feel free to ask questions . Thanks .
Added id property to the MediaFormat class __EoT__ In our application we give people control of the `` selected '' track on the player for DASH streams however there was no way for people to identify the track , unless if you knew the bitrate or width/height properties . This change adds the ` id ` property to the MediaFormat class which is read from the DASH Media Presentation Description . This way it 's easier for users to identify tracks on the player . CLA should be signed : https : //groups.google.com/forum/ # ! forum/jwplayer-google-contributors Feedback is appreciated , feel free to ask questions . Thanks .
Video duration not reported correctly if HLS video is played directly from Media Playlist __EoT__ If you play an HLS Video that does n't have a MasterPlaylist , that is you directly start with a media playlist ( for example the sample in the demo Apple TS media playlist ) it reports the duration 0 because setMediaPlaylist is never called in the HLSChunkSource , I tested a quick fix by adding ` durationUs = variantPlaylists [ 0 ] .durationUs ; ` to the ` if ( playlist.type == HlsPlaylist.TYPE_MEDIA ) { ` in the constructor .
Support direct loading of media stored as assets in the application apk __EoT__ Scenario : Providing the following Uri videoUri = Uri.parse ( `` android.resource : // '' + getActivity ( ) .getPackageName ( ) + `` / '' + R.raw.video_file ) ; to the ExtractorSampleSource . Result : ExtractorSampleSource will fail since then open ( ) method on the UriDataSource will mistakenly think the Uri is a remote uri since it does n't start with the protocol `` file : // '' resulting in an IOException : Unknown protocol android.resource ''
FrameworkSampleSource : Attached equaliser is not kept after calling seekTo ? __EoT__ Given a player is initialised like this : `` ` java mediaPlayer = ExoPlayer.Factory.newInstance ( 1 ) ; final FrameworkSampleSource sampleSource = new FrameworkSampleSource ( this , uri , null , 1 ) ; final MediaCodecAudioTrackRenderer audioTrackRenderer = new MediaCodecAudioTrackRenderer ( sampleSource ) { @ Override protected void onAudioSessionId ( int audioSessionId ) { equalizer = new Equalizer ( 1000 , audioSessionId ) ; } } ; mediaPlayer.addListener ( new ExoPlayer.Listener ( ) { @ Override public void onPlayerStateChanged ( boolean playWhenReady , int playbackState ) { log.log ( Level.FINEST , `` playWhenReady : { 0 } , state : { 1 } '' , new Object [ ] { playWhenReady , playbackState } ) ; playerState = playbackState ; switch ( playbackState ) { case ExoPlayer.STATE_IDLE : publishState ( State.IDLE ) ; break ; case ExoPlayer.STATE_PREPARING : publishState ( State.PREPARING ) ; break ; case ExoPlayer.STATE_BUFFERING : break ; case ExoPlayer.STATE_READY : setupEqualizer ( ) ; generateMediaStatus ( ) ; mediaPlayer.setPlayWhenReady ( true ) ; musicQueue.setCurrentPositionPlaying ( currentPosition , true ) ; publishState ( State.STARTED ) ; break ; case ExoPlayer.STATE_ENDED : playbackComplete ( ) ; break
Add support for avc3 boxes in fragmented mp4 streams . __EoT__
[ HLS ] Closed caption display error on certain streams __EoT__ Tested on ExoPlayer dev-hls HEAD ( faf196a581520f1f3164388bb25a68c90446c897 ) . The two streams mentioned below have an issue where closed captions are unreadable . Only two or three characters are displayed at a time , instead of the expected sentences . http : //now.video.nfl.com/i/captiontest/closedcaptiontest_,350k,550k , .mp4.csmil/master.m3u8 ( plays OK in Quicktime ) http : //playertest.longtailvideo.com/adaptive/captions/playlist.m3u8 ( no captions displayed by Quicktime )
FrameworkSampleSource with FileDescriptor __EoT__ Currently FrameworkSampleSource is designed to work with URIs . This makes it rather inconvenient to play media from other sources , like the APK ( Assets for example ) . It would be a [ one line change ] ( https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/FrameworkSampleSource.java # L68 ) to make it work with with a FileDescriptor , since MediaExtractor has a [ setDataSource overload ] ( http : //developer.android.com/reference/android/media/MediaExtractor.html # setDataSource % 28java.io.FileDescriptor , % 20long , % 20long % 29 ) for that . My questions are : Is there a way to play files from the Assets folder ? Are there any plans to add support for it ? Would it make sense to add a new SampleSource that is the same as FrameworkSampleSource just with that single line changed ?
Encrypted HLS throws NumberFormatException in HlsChunkSource $ EncryptionKeyChunk.consume __EoT__ When trying to parse the IV for an encrypted HLS chunk as a 32 bit Integer , an exception is thrown if the IV is too big to fit in 32 bit . This is quite common , so not many encrypted streams curently work . Fix : commit 864b7eadaec7494170cb377ea8c94143448fa583 Exception : ` E AndroidRuntime : FATAL EXCEPTION : ExoPlayerImplInternal : Handler E AndroidRuntime : java.lang.NumberFormatException : Invalid int : `` 8bebc5019dd7301db52130f579d42f8c '' E AndroidRuntime : at java.lang.Integer.invalidInt ( Integer.java:138 ) E AndroidRuntime : at java.lang.Integer.parse ( Integer.java:413 ) E AndroidRuntime : at java.lang.Integer.parseInt ( Integer.java:367 ) E AndroidRuntime : at com.google.android.exoplayer.hls.HlsChunkSource $ EncryptionKeyChunk.consume ( HlsChunkSource.java:395 ) E AndroidRuntime : at com.google.android.exoplayer.hls.BitArrayChunk.consume ( BitArrayChunk.java:51 ) E AndroidRuntime : at com.google.android.exoplayer.hls.HlsSampleSource.onLoadCompleted ( HlsSampleSource.java:268 ) E AndroidRuntime : at com.google.android.exoplayer.upstream.Loader $ LoadTask.handleMessage ( Loader.java:231 ) E AndroidRuntime : at android.os.Handler.dispatchMessage ( Handler.java:102 ) E AndroidRuntime : at android.os.Looper.loop ( Looper.java:135 ) E AndroidRuntime : at android.os.HandlerThread.run ( HandlerThread.java:61 ) E AndroidRuntime : at com.google.android.exoplayer.ExoPlayerImplInternal $ 1.run ( ExoPlayerImplInternal.java:110 ) `
Encrypted HLS throws NumberFormatException in HlsChunkSource $ EncryptionKeyChunk.consume __EoT__ When trying to parse the IV for an encrypted HLS chunk as a 32 bit Integer , an exception is thrown if the IV is too big to fit in 32 bit . This is quite common , so not many encrypted streams curently work . Fix : commit 864b7eadaec7494170cb377ea8c94143448fa583 Exception : ` E AndroidRuntime : FATAL EXCEPTION : ExoPlayerImplInternal : Handler E AndroidRuntime : java.lang.NumberFormatException : Invalid int : `` 8bebc5019dd7301db52130f579d42f8c '' E AndroidRuntime : at java.lang.Integer.invalidInt ( Integer.java:138 ) E AndroidRuntime : at java.lang.Integer.parse ( Integer.java:413 ) E AndroidRuntime : at java.lang.Integer.parseInt ( Integer.java:367 ) E AndroidRuntime : at com.google.android.exoplayer.hls.HlsChunkSource $ EncryptionKeyChunk.consume ( HlsChunkSource.java:395 ) E AndroidRuntime : at com.google.android.exoplayer.hls.BitArrayChunk.consume ( BitArrayChunk.java:51 ) E AndroidRuntime : at com.google.android.exoplayer.hls.HlsSampleSource.onLoadCompleted ( HlsSampleSource.java:268 ) E AndroidRuntime : at com.google.android.exoplayer.upstream.Loader $ LoadTask.handleMessage ( Loader.java:231 ) E AndroidRuntime : at android.os.Handler.dispatchMessage ( Handler.java:102 ) E AndroidRuntime : at android.os.Looper.loop ( Looper.java:135 ) E AndroidRuntime : at android.os.HandlerThread.run ( HandlerThread.java:61 ) E AndroidRuntime : at com.google.android.exoplayer.ExoPlayerImplInternal $ 1.run ( ExoPlayerImplInternal.java:110 ) `
Implement EXT-X-BYTERANGE support for HLS __EoT__ https : //tools.ietf.org/html/draft-pantos-http-live-streaming-13 # section-3.4.1
Implement ID3 Timed Metadata support for HLS __EoT__
Implement encryption support for HLS __EoT__ METHOD=AES-128
Implement ID3 Timed Metadata support for HLS __EoT__
Add support for avc3 boxes in fragmented mp4 streams . __EoT__
Support wider range of DASH manifests __EoT__ Currently ExoPlayer only supports a narrow subset of possible DASH manifests . Support should be added for manifests containing segment lists and segment templates . Note : As a workaround , application developers can already support arbitrary DASH manifests through implementing their own parser and ChunkSource ( it 's probably useful to use DashMp4ChunkSource as a starting point ) .
颜色问题 __EoT__ 为啥用indicatorColor这个属性设置颜色为黑色，但显示的照样是白色 代码如下： < com.wang.avi.AVLoadingIndicatorView android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' android : id= '' @ +id/indicator '' android : layout_gravity= '' center '' style= '' @ style/AVLoadingIndicatorView.Large '' app : indicatorName= '' BallPulseIndicator '' app : indicatorColor= '' # 000000 '' / >
AVLoadingIndicatorView无法在代码里动态构造问题 __EoT__ ` BallBeatIndicator ballBeatIndicator = new BallBeatIndicator ( ) ; AVLoadingIndicatorView avLoadingIndicatorView = new AVLoadingIndicatorView ( this ) ; avLoadingIndicatorView.setIndicator ( ballBeatIndicator ) ; avLoadingIndicatorView.setIndicatorColor ( 0xffffff ) ; ` 我这里动态构造抛出下面的异常 ` java.lang.NullPointerException : Attempt to invoke virtual method 'void com.wang.avi.Indicator.setColor ( int ) ' on a null object reference ` 是因为AVLoadingIndicatorView在构造函数里没给indicatorName一个默认值： ` String indicatorName=a.getString ( R.styleable.AVLoadingIndicatorView_indicatorName ) ; int indicatorColor=a.getColor ( R.styleable.AVLoadingIndicatorView_indicatorColor , Color.WHITE ) ; setIndicator ( indicatorName ) ; //这里没有默认值 setIndicatorColor ( indicatorColor ) ; //导致这里空指针异常 `
AVLoadingIndicatorView无法在代码里动态构造问题 __EoT__ ` BallBeatIndicator ballBeatIndicator = new BallBeatIndicator ( ) ; AVLoadingIndicatorView avLoadingIndicatorView = new AVLoadingIndicatorView ( this ) ; avLoadingIndicatorView.setIndicator ( ballBeatIndicator ) ; avLoadingIndicatorView.setIndicatorColor ( 0xffffff ) ; ` 我这里动态构造抛出下面的异常 ` java.lang.NullPointerException : Attempt to invoke virtual method 'void com.wang.avi.Indicator.setColor ( int ) ' on a null object reference ` 是因为AVLoadingIndicatorView在构造函数里没给indicatorName一个默认值： ` String indicatorName=a.getString ( R.styleable.AVLoadingIndicatorView_indicatorName ) ; int indicatorColor=a.getColor ( R.styleable.AVLoadingIndicatorView_indicatorColor , Color.WHITE ) ; setIndicator ( indicatorName ) ; //这里没有默认值 setIndicatorColor ( indicatorColor ) ; //导致这里空指针异常 `
Unable to change BadgeStyle selected text color with selector __EoT__ # # About this issue I want to change the badge background and text colors when the item is selected , both 'colors ' use ` selector ` , the background works fine but the text color does n't . Looking at [ BadgeStyle source code ] ( https : //github.com/mikepenz/MaterialDrawer/blob/d67f935e55a55c97d747b498f0ea82d0fde17fff/library/src/main/java/com/mikepenz/materialdrawer/holder/BadgeStyle.java # L208 ) it seems like the ` ColorStateList ` is not used when passed using ` .withTextColorRes ( ) ` I create the badge style with the kotlin code shown below `` ` java BadgeStyle ( ) .withTextColorRes ( R.color.drawer_counter_text_selector ) .withBadgeBackground ( context.getDrawable ( R.drawable.drawer_counter_bg_selector ) ) `` ` The ` selector ` used for badge text `` ` xml < ! -- **** drawer_counter_text_selector *** -- > < selector xmlns : android= '' http : //schemas.android.com/apk/res/android '' > < item android : state_selected= '' true '' android : color= '' # ff0000 '' / > < item android : state_selected= '' false '' android : color= '' # 00ff00 '' / > < /selector > `` ` The ` selector ` used for badge background ( as noted above this works fine but I included here
Expandable drawer item inside another expandable drawer item causes issues __EoT__ # # About this issue - Briefly describe the issue - If I add an expandable drawer item of level 3 inside one of the secondary items of the parent expandable item of level 2 , then when the parent item is collapsed , it causes some of the items to be displayed outside of the parent item list . This only happens when the second child list is not collapsed . If the second child list is collapsed before collapsing the parent list , then it works fine . I have also attached three images to showcase this . # # Details - [ 6.0.6/6.0.7 ] Used library version - [ 27.1.1 ] Used support library version - [ 3.0.1 ] Used gradle build tools version - [ 3.0.1 ] Used tooling / Android Studio version - [ none ] Other used libraries , potential conflicting libraries # # Checklist - [ yes ] Searched for [ similar issues ] ( https : //github.com/mikepenz/MaterialDrawer/issues ) - [ yes ] Checked out the [ sample application ] ( https : //github.com/mikepenz/MaterialDrawer/tree/develop/app ) - [ yes ] Read the [
Opportunity to customize text section padding in material_drawer_header __EoT__ I 've overridded material_drawer_header.xml to add custom views , I some changed layouts structure , and also I saw that in the AccountHeaderBuilder class in the method buildProfiles ( ) , if it 's not compact , the text header section of the account header changes the padding programmatically . Can you add the option to disable this ? `` ` ` < FrameLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : clickable= '' true '' android : focusable= '' true '' android : background= '' @ drawable/material_drawer_header_background '' > < android.support.v7.widget.AppCompatImageView android : id= '' @ +id/material_drawer_account_header_background '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : scaleType= '' centerCrop '' tools : ignore= '' ContentDescription '' / > < android.support.v7.widget.LinearLayoutCompat android : id= '' @ +id/material_drawer_account_header '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : orientation= '' vertical '' > < android.support.v7.widget.LinearLayoutCompat android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android :
MiniDrawer selected item background not showing sometimes __EoT__ # # About this issue After upgrade from 5.9.5 to 6.0.2 I have noticed a small issue . I have MiniDrawer and .withEnableSelectedMiniDrawerItemBackground ( true ) . When I click on MiniDrawer , background is shown , but when I click from opened drawer ( and it closes automatically ) background for MiniDrawer item is missing . The issue is present only after upgrade . # # Details - [ ] Library 6.0.2 - [ ] Support library 27.0.2 - [ ] Build Tools 27.0.3 - [ ] AS 3.0.1
picture at top of drawer __EoT__ Please make it adjustable to set a picture at the top of the drawer .
Clicking drawer item in mini drawer crashes if item identifier is not set manually . __EoT__ MiniDrawer:490 throws a NullPointerException if an item being clicked is not built with positive identifier with withIdentifier ( long ) ( getDrawerItem ( ) returns null obviously w/ negative identifiers but they are assigned negative values if not set manually ) . Are we required to set ids with withIdentifier ( ) ( not a problem actually as I 'm about to use them anyway ) or am I missing something ? This was not an issue in MaterialDrawer 5.9.3 .
[ v6 ] withIsExpanded ( true ) buggy __EoT__ Hi After updating to v6 I 'm having problems with .withIsExpanded ( true ) . It might just be a FastAdapter V3 issue . Tested it using demo app DrawerActivity.java . It will not expand subItems upon creation . The Expand arrow is misleading ( as if it 's expanded ) . In fact clicking on it will collapse Primary items sitting bellow . Thanks
SetSelection on MiniDrawer __EoT__ Hi , Thank you for your awesome work . Right now , I am using this 2 blocks of code to manually select an item : `` ` C # result.setSelection ( 1 , false ) ; result.getMiniDrawer ( ) .setSelection ( 1 ) ; `` ` How can I disable the selected item ? I tried this : `` ` C # //-1 does n't exist result.setSelection ( -1 , false ) ; result.getMiniDrawer ( ) .setSelection ( -1 ) ; `` ` However , only the expanded drawer loses the focus , but MiniDrawer keeps the focus . How can I handle this ? Thank you .
Selected wrong item with setStickyFooterSelection and withStickyFooterDivider ( true ) __EoT__ When I use ` setStickyFooterSelection ( identifier , false/true ) ` with ` withStickyFooterDivider ( true ) ` drawer settings then I have selected wrong item ( higher one ) on the bottom sticky items . Btw - it 's a little confused that ` setSelection ( identifier , false/true ) ` does n't try to select sticky item too 😉
Header layout is not rendering properly __EoT__ Hi Mike , first of all thanks a lot for your beatiful library ! Here is very simple layout for header : https : //gist.github.com/GoltsevEugene/b56894741572afa7e93acb34c7e5b5dc And I 'm using it via DrawerBuilder.withHeader ( ) . Here is a result : ! [ screenshot_2017-06-29-15-30-22-898_com ] ( https : //user-images.githubusercontent.com/12167642/27687913-574b8cb8-5ce1-11e7-99da-a559b1ef427f.png ) Drawer makes header wrap_content , not my pointed 200dp . What am I doing wrong with layout ?
Incorrect icon colors on API < 21 __EoT__ With the current version ` 5.9.2 ` , the icons of ` DrawerItems ` do not have the correct color on API < 21 : | API 21 | API 19 | | -- -- -- -- - | -- -- -- -- - | | ! [ api21 ] ( https : //user-images.githubusercontent.com/8021265/27014887-dcd71944-4f01-11e7-98bd-3fc3a46c4bf5.png ) | ! [ api19 ] ( https : //user-images.githubusercontent.com/8021265/27014879-c8c4875c-4f01-11e7-8133-0c3efc1f6eff.png ) | I do not know since which version this is a thing , I also tried ` 5.9.0 ` with the same results . This is one of my items : `` ` kotlin PrimaryDrawerItem ( ) .withName ( R.string.section_news ) .withIconTintingEnabled ( true ) .withIcon ( CommunityMaterial.Icon.cmd_newspaper ) .withSelectedTextColorRes ( R.color.colorAccent ) .withSelectedIconColorRes ( R.color.colorAccent ) .withIdentifier ( someId ) `` ` Strangely , ` ProfileSettingsDrawerItems ` work fine ( API 19 ) : ! [ login ] ( https : //user-images.githubusercontent.com/8021265/27014899-265c6c18-4f02-11e7-983f-94927860572b.png ) `` ` kotlin ProfileSettingDrawerItem ( ) .withName ( R.string.section_login ) .withIcon ( CommunityMaterial.Icon.cmd_account_key ) .withIconTinted ( true ) .withIdentifier ( someId ) `` ` **Edit : ** I just updated to Iconics ` 2.8.6 ` , which also introduces this problem on API
support CharSequence in StringHolder and BaseDescribeableDrawerItem __EoT__ This is what I 'm trying to achieve . This is not possible with current implementation . The bindViewHelper is applying a default statelist text color to the name view . We need to support charSequence so we can format it more flexibly < img width= '' 278 '' alt= '' screen shot 2017-05-16 at 2 05 35 pm '' src= '' https : //cloud.githubusercontent.com/assets/766623/26128317/e040385c-3a40-11e7-9ee9-3521ff891cd2.png '' >
Keep showing sticky items when account drawer is expanded __EoT__ In our app we 'd like to keep showing sticky drawer items ( added addStickyDrawerItems to drawerBuilder ) , even after user clicked on a account header and a list of Profiles is shown . How could it be done ? As far as i see in the code change to list of profiles is done in `` ` public void switchDrawerContent ( @ NonNull OnDrawerItemClickListener onDrawerItemClickListener , OnDrawerItemLongClickListener onDrawerItemLongClickListener , @ NonNull List < IDrawerItem > drawerItems , int drawerSelection ) { ... //hide stickyFooter and it 's shadow if ( getStickyFooter ( ) ! = null ) { getStickyFooter ( ) .setVisibility ( View.GONE ) ; } if ( getStickyFooterShadow ( ) ! = null ) { getStickyFooterShadow ( ) .setVisibility ( View.GONE ) ; } } `` ` I was trying to override the method in my project in a DrawerSticky ( which 'extends Drawer ' ) class , but has n't succeed , because original Drawer class is still used in AccountHeaderBuilder from which this switchDrawerContent method is called . I will still try to override it as well , but i was thinking that may
ExpandableDrawer NPE when used in StickyDrawerItems . __EoT__ Here is my code : `` ` java result = new DrawerBuilder ( ) .withActivity ( this ) .withTranslucentStatusBar ( true ) .withToolbar ( toolbar ) .withHasStableIds ( true ) .withAccountHeader ( headerResult ) .addStickyDrawerItems ( new ExpandableDrawerItem ( ) .withName ( `` Become a Supporter '' ) .withDescription ( `` Get Pro Features . '' ) .withIcon ( GoogleMaterial.Icon.gmd_mood ) .withIdentifier ( 19 ) .withSelectable ( false ) .withSubItems ( new SecondaryDrawerItem ( ) .withName ( `` Beer ( $ 1.99 ) '' ) .withLevel ( 2 ) .withIcon ( GoogleMaterial.Icon.gmd_local_drink ) .withIdentifier ( 2000 ) , new SecondaryDrawerItem ( ) .withName ( `` Lunch ( $ 5.99 ) '' ) .withLevel ( 2 ) .withIcon ( GoogleMaterial.Icon.gmd_local_cafe ) .withIdentifier ( 2001 ) , new SecondaryDrawerItem ( ) .withName ( `` Dinner ( $ 11.99 ) '' ) .withLevel ( 2 ) .withIcon ( GoogleMaterial.Icon.gmd_local_dining ) .withIdentifier ( 2001 ) ) ) .addDrawerItems ( new PrimaryDrawerItem ( ) .withName ( `` Next '' ) .withIcon ( GoogleMaterial.Icon.gmd_home ) .withIdentifier ( R.id.menu_next_launch ) .withSelectable ( true ) , new PrimaryDrawerItem ( ) .withName ( `` Launches '' ) .withIcon ( GoogleMaterial.Icon.gmd_assignment )
Dawer gravity change issue __EoT__ Hi , In my application I give the user the choice to change the drawer gravity of the drawer from left to right and vice-versa . When a gravity change is made then I notice that the drawer is now swipe-able from both left and right . In my case , to changing the gravity , I create a new drawer , I tried updating the old one but it does n't work . My first question is how can one remove the old drawer object ? Second , how can one update the drawer object with a new gravity value ? Thanks
ImageHolder 's Bitmap Does n't Seem to Count as an Icon __EoT__ Hello , I 'm trying to set a drawer item 's icon to a bitmap , but it fails . When trying to set the same drawer item 's icon to a Drawable , it succeeds . Is this intentional ? Further explanation : Upon creation of drawer items I am trying to add an icon with ` .withIcon ` One of the acceptable parameters is ` ImageHolder ` . So I go on to create a new ImageHolder . One of its constructor 's acceptable parameters is bitmap , which I supply . However , in effect , nothing displays on the screen , as if the view has been assigned as `` GONE '' . I have also tried to supply a URL instead of a Bitmap but the result is the same . I 'll add that upon further inspection , it seems that the functions responsible for assigning the icon - ` decideIcon ` and ` applyMultiIconTo ` simply ignore the bitmap . They both look at ImageHolder 's ` mIcon ` , regardless of whether ImageHolder contains a bitmap or not , **which
Back button with MiniDrawer __EoT__ Incorrect work of detecting drawer state when use drawer with mini drawer . This bug also reproduced in your sample app . Steps ( for sample app ) : 1 . Open navigation drawer and choose MiniDrawer 2 . Expand drawer 3 . Press `` Back '' ( hard button , for ex . ) Actual result : MiniDrawerActivity closed . Expected result : by first `` back '' only drawer should be closed .
Keep Mini drawer Hidden __EoT__ Hello Mike , I must say `` great work '' . I would like to keep Mini drawer hidden on start of an activity but when user slide on right or click on hamburger icon then Mini drawer should appear similarly what we have in normal Material Drawer . I wonder if its possible through your library ? Thank you in advance . Regards , Salman
CompatHeaderDrawer menu broken with RTL __EoT__ CompatHeader menu is broken with enabled RTL in sample app . - Missing email and username - Image is not in circle border ! [ device-2016-06-01-110748 ] ( https : //cloud.githubusercontent.com/assets/1458891/15704079/31bddb14-27e9-11e6-877d-e72ca5103b13.png ) ! [ device-2016-06-01-111210 ] ( https : //cloud.githubusercontent.com/assets/1458891/15704171/b64ac950-27e9-11e6-8f5e-d92f5220c5ca.png )
ProfileDrawerItem keep old behaviour ? __EoT__ I am updating my app 's materialdrawer library from 2.9.0 to 5.2.8 and i stumbled upon the following : version 2.9.0 : ! [ version 2 9 0 ] ( https : //cloud.githubusercontent.com/assets/9169358/15710311/d22da5a0-2809-11e6-80fb-2710c5031358.png ) version 5.2.8 ! [ version 5 2 8 ] ( https : //cloud.githubusercontent.com/assets/9169358/15710316/d4bd2944-2809-11e6-9444-4cdc06fbf32c.png ) The problem is that in version 5.2.8 the text in the header dissapears . This is caused by the fact that there is no ProfileDrawerItem added to the header if a user is not logged in . In version 2.9.0 it seemed that if this is the case , then a ProfileSettingDrawerItem would be used to fill in the text . However in version 5.2.8 this does not seem the case . When the users logs in a ProfileDrawerItem is added to the header so then old behaviour is kept . However I want to keep old behaviour when the user is not logged in ( so when no ProfileDrawerItem is added to the header , only ProfileSettingDrawerItem ) , is this possible to achieve ?
public DrawerBuilder withSelectedItem ( int selectedItemIdentifier ) should use Long __EoT__ ` AbstractDrawerItem ` has builder that uses long as identifier : `` ` java public T withIdentifier ( long identifier ) { this.mIdentifier = identifier ; return ( T ) this ; } `` ` but drawer builder uses int as identifier , so you can set id bigger that max Int ( less than max Long ) to item and would be not able to select it using the builder .
With MiniDrawer and profile item , main drawer item may goes into disabled state __EoT__ I have a mini drawer and profile item . The steps are : 1 . From mini drawer , click profile item 2 . Main drawer is shown with account selection 3 . Press arrow up to close account menu 4 . Main drawer is not showing PrimaryDrawerItem 5 . But they are not clickable After tracing with Android Monitor , i found that all the PrimaryDrawerItem LayoutManager are disabled . Quick fix right now is adding ` viewHolder.view.setEnabled ( true ) ; ` While it does work , I still wonder if i do the right thing . Let me know what you think .
Sometimes icons disappear __EoT__ I use CustomUrlPrimaryDrawerItem and there are some items that , when clicked , launch a new activity . Sometimes happens that the icons of some items ( seem randomly ) disappear and , after clicking some others items , are showed again .
Wrong coloring again __EoT__ So I just stumbled across another coloring issue . This happens in conjunction with programmatically setting the selection : `` ` java drawer.setSelection ( id ) ; //id points to an existing DrawerItem `` ` There are 2 cases : I currently view a normal section and select another : The new one becomes colored but lacks the gray background . A < - Now selected : No background B < - Previously selected : Correctly colored -- Sticky section -- C D I currently view a sticky footer section and select a normal one : The new becomes colored correctly but the coloring of the sticky one is not cleared . A < - Now selected : Correctly colored B -- Sticky section -- C D < - Previously selected : Not cleared My items look like this : `` ` java new PrimaryDrawerItem ( ) .withName ( R.string.drawer_item_news ) .withIcon ( CommunityMaterial.Icon.cmd_newspaper ) .withSelectedTextColorRes ( R.color.primary ) .withSelectedIconColorRes ( R.color.primary ) .withBadgeStyle ( new BadgeStyle ( ) .withColorRes ( R.color.primary ) .withTextColorRes ( android.R.color.white ) ) .withIdentifier ( DRAWER_ID_NEWS ) `` ` I tested that on my OnePlus 2 with 6.0.1 and an N
SecondaryDrawerItem vs PrimaryDrawerItem __EoT__ Hi Mike , I have a small question What is the purpose of SecondaryDrawerItem when we have PrimaryDrawerItem ? I check the code they are the same in both the classes . So can you tell me the difference in them ?
[ bug ] miniDrawer not update icon state on mini item clicked __EoT__ When I clicked on miniDrawer item ` onItemClick ` are called but miniDrawer item state are n't updated while normal drawer has correct item state . Bug is also reproducible in your demo . I also see a delay between big drawer item click and mini drawer icon update . Update is triggered at the end of cross fade animation . Little irritating : wink : - Android 4.4.2 - MaterialDrawer 5.1.9 - Crossfader 1.3.7
Wrong selected states __EoT__ I just updated to the latest MaterialDrawer version and the state of the selected items are totally messed up . My code worked fine previously , but I also set withSelectable to true for every Item now as said in the release notes of FastAdapter . What exactly happens is that a clicked icon does n't become selected or that the selection disappears completely .
Account header does not select the right profile __EoT__ Hey guys ! First of all , nice work with this library , really easy to use it ! But I 'm having an issue with the AccountHeader , when I select a profile in the dropdown list , it is n't chosen . See the gif right after . ! [ drawer_profile_change_bug ] ( https : //cloud.githubusercontent.com/assets/3897798/14059042/3e82891a-f334-11e5-9d65-987b76848977.gif ) I tried to force change the active profile , but it did n't work . `` ` java final AccountHeaderBuilder headerResultBuilder = new AccountHeaderBuilder ( ) .withActivity ( this ) .withTranslucentStatusBar ( true ) .withHeightPx ( UIUtils.getActionBarHeight ( this ) ) .withAccountHeader ( R.layout.drawable_header ) .withTextColor ( Color.BLACK ) .withTextColorRes ( android.R.color.white ) .withProfileImagesVisible ( true ) .withOnlyMainProfileImageVisible ( true ) .withOnlySmallProfileImagesVisible ( true ) .withThreeSmallProfileImages ( false ) ; int identifier = 100 ; for ( Item item : items ) { headerResultBuilder.addProfiles ( new ProfileDrawerItem ( ) .withIdentifier ( i++ ) .withName ( item.getName ( ) ) ) ; } headerResultBuilder.addProfiles ( new ProfileDrawerItem ( ) .withName ( getResources ( ) .getString ( R.string.add_account ) ) .withIdentifier ( 9000 ) .withIcon ( new IconicsDrawable ( this , GoogleMaterial.Icon.gmd_add ) .actionBar
Drawer Header and translucent Status Bar __EoT__ If I set a AccountHeader with `` ` java accountHeaderBuilder.withDrawer ( getDrawer ( ) ) ; `` ` I get the following Image : ! [ drawer ] ( https : //cloud.githubusercontent.com/assets/17988397/13926867/829f9d3a-ef8e-11e5-840e-eafba700814e.png ) I fixed the problem with : `` ` getDrawer ( ) .getRecyclerView ( ) .setPadding ( getDrawer ( ) .getRecyclerView ( ) .getPaddingLeft ( ) , 0 , getDrawer ( ) .getRecyclerView ( ) .getPaddingRight ( ) , getDrawer ( ) .getRecyclerView ( ) .getPaddingBottom ( ) ) ; `` ` ! [ drawer2 ] ( https : //cloud.githubusercontent.com/assets/17988397/13926954/eef8b804-ef8e-11e5-8f01-91107b62f83b.png )
Sticky Footer elevation __EoT__ Is there any way you can expose the sticky footer shadow size ? The default may not be suitable for all situations .
Account switcher arrow is still taking up space when disabled __EoT__ Hey First of all great library ! I noticed a small bug , is it possible to set the visibility of the account switcher arrow to ` gone ` instead of ` invisible ` ? Right now it is still taking up space when disabled . See this example : < img width= '' 289 '' alt= '' screen shot 2016-03-15 at 11 52 28 '' src= '' https : //cloud.githubusercontent.com/assets/2677077/13775437/c76c429a-eaa4-11e5-81c2-0a50694bce57.png '' > Thanks ! Jarno
Not firing a setSelection on 5.1.0 __EoT__ Hi Mike , I 've just updated my from 'com.mikepenz : materialdrawer:5.0.9 @ aar ' to 'com.mikepenz : materialdrawer:5.1.0 @ aar ' and my _setSelection_ stopped working . `` ` drawer.setOnDrawerItemClickListener ( this ) ; drawer.setSelection ( 1 , true ) ; `` ` On 5.0.9 works perfectly , on 5.1.0 does not works , it does not fire . I have checked your last commit and I guess that the checking should be `` position > 0 '' instead of `` position < 0 '' , is n't it ? [ https : //github.com/mikepenz/MaterialDrawer/commit/69ea27ef5267b5b0e3112e6fae71ce85cd0b4a98 ] ( url ) Thanks !
First profile does n't show selected status __EoT__ When you click the first profile and open the account switcher after that for a second time , it does n't show its selected status . [ Video ] ( https : //www.youtube.com/watch ? v=nbvkHKwpVsY )
Calling setSelection ( long , boolean ) with a non-existent identifier calls onItemClick with null item __EoT__ The same happens if calling ` setSelectionAtPosition ( int , boolean ) ` with an incorrect position . In 4.6.4 this does not happen as it is checked if the item is not null before calling the listener .
The item list is not properly invalidated when an item is added after the drawer has been built __EoT__ Hi , I 'm having an issue ( that is not happening in 4.6.4 ) when adding a new item , using ` addItem ( ) ` , after the drawer has been built . The item list is not properly invalidated and the views are not updated until I start clicking on the items . Calling ` drawer.getAdapter ( ) .notifyDataSetChanged ( ) ` after adding the item fixes the problem but , obviously , it is not a proper fix . ` drawer.getItemAdapter ( ) .notifyDataSetChanged ( ) ` does NOT fix the problem .
( MiniDrawer ) Selected item row_selector sometimes not shown __EoT__ Try to click on the same row several times quickly and the selector will hide . And of course , this is MiniDrawer related issue ) ) )
Custom Background for DrawerItems in the StickyFooter do not work __EoT__ I implemented a customer primary drawer item as mentioned in your example `` ` java package com.backdrops.wallpapers.util.ui ; import com.mikepenz.materialdrawer.holder.ColorHolder ; import com.mikepenz.materialdrawer.model.PrimaryDrawerItem ; public class CustomPrimaryDrawerItemPro extends PrimaryDrawerItem { private ColorHolder background ; public CustomPrimaryDrawerItemPro withBackgroundColor ( int backgroundColor ) { this.background = ColorHolder.fromColor ( backgroundColor ) ; return this ; } public CustomPrimaryDrawerItemPro withBackgroundRes ( int backgroundRes ) { this.background = ColorHolder.fromColorRes ( backgroundRes ) ; return this ; } @ Override public void bindView ( ViewHolder holder ) { super.bindView ( holder ) ; if ( background ! = null ) { background.applyToBackground ( holder.itemView ) ; } } } `` ` I then added it to my DrawerBuilder `` ` java .addStickyDrawerItems ( new CustomPrimaryDrawerItemPro ( ) .withBackgroundRes ( R.color.accent2 ) .withIcon ( R.drawable.ic_drawer_pro ) .withIconColorRes ( R.color.primary ) .withIconTintingEnabled ( true ) .withName ( `` Go Pro '' ) .withIdentifier ( 555 ) ) `` ` However the background will not change . It stays the same color as the rest of the drawer . The icon color changes like it should , but not the background for the drawer item .
Expanded items duplicates __EoT__ if drawer has expandable items , and they are expanded . And show/hide Accounts view in drawer , after that - all expanded item - duplicates https : //dl.dropboxusercontent.com/u/43856909/steps.jpg
Header not clickable , withHeaderClickable unused ? __EoT__ Hey guys , I want my normal header ( not account header ) to be clickable . However , although I set withHeader ( ressource ) and withHeaderClickable ( true ) , neither the onDrawerNavigationListener , nor the OnDrawerItemClickListener fire any kind of event . I then looked up the event and it seems mHeaderClickable is completely unused . Is this intended ?
Profile text color change in account header __EoT__ In my profile list , I 'm using a dark background and white text color . The selected profile item has a white selection background , resulting in the select profile item text to disappear . I can not seam to find how I change the selected profile item text color to something else . I looked at the custom color setup , but all that deals ( very well , I might add ) with the drawer items , not the profile items .
MiniDrawer padding without Navigationbar on bottom ( landscape ) __EoT__ Hello , i have noticed that the minidrawer has a padding bottom without a navigationbar below , so that there is to much space . in your drawerbuilder https : //github.com/mikepenz/MaterialDrawer/blob/develop/library/src/main/java/com/mikepenz/materialdrawer/DrawerBuilder.java createContent ( ) ; `` ` int paddingTop = 0 ; if ( ( mTranslucentStatusBar || mFullscreen ) & & ( mDisplayBelowStatusBar == null || ! mDisplayBelowStatusBar ) & & ! mSystemUIHidden ) { paddingTop = UIUtils.getStatusBarHeight ( mActivity ) ; } int paddingBottom = 0 ; if ( ( ( mTranslucentNavigationBar || mFullscreen ) & & Build.VERSION.SDK_INT > = 19 ) & & ! mSystemUIHidden ) { paddingBottom = UIUtils.getNavigationBarHeight ( mActivity ) ; } mRecyclerView.setPadding ( 0 , paddingTop , 0 , paddingBottom ) ; `` ` but in your minidrawer https : //github.com/mikepenz/MaterialDrawer/blob/develop/library/src/main/java/com/mikepenz/materialdrawer/MiniDrawer.java build ( ) `` ` //if the activity with the drawer should be fullscreen add the padding for the statusbar if ( mDrawer ! = null & & mDrawer.mDrawerBuilder ! = null & & ( mDrawer.mDrawerBuilder.mFullscreen || mDrawer.mDrawerBuilder.mTranslucentStatusBar ) ) { mRecyclerView.setPadding ( mRecyclerView.getPaddingLeft ( ) , UIUtils.getStatusBarHeight ( ctx ) , mRecyclerView.getPaddingRight ( ) , mRecyclerView.getPaddingBottom ( ) ) ; } //if
Should n't withPadding* be chainable ? __EoT__ I did a quick search but could n't find an answer , so apologies if this has been asked before . When adding a badge style , all of the padding methods return void but should n't they return the BadgeStyle object for chaining purposes ? I 'm having to do this : `` ` java BadgeStyle badgeStyle = new BadgeStyle ( ) .withColorRes ( R.color.badgeColor ) .withTextColor ( Color.WHITE ) .withCornersDp ( 999 ) ; badgeStyle.withPaddingLeftRightDp ( 3 ) ; badgeStyle.withPaddingTopBottomDp ( 3 ) ; `` ` But would prefer to do this : `` ` java BadgeStyle badgeStyle = new BadgeStyle ( ) .withColorRes ( R.color.badgeColor ) .withTextColor ( Color.WHITE ) .withCornersDp ( 999 ) .withPaddingLeftRightDp ( 3 ) .withPaddingTopBottomDp ( 3 ) ; `` `
Deactivate all account header profiles __EoT__ I tried doing ` accountHeader.setActiveProfile ( -1 ) ` , but that did n't work . Is there another way to do this ?
NullPointer Exception since 4.6.0 __EoT__ Hi , I updated to the new version and get a NullPointer when I click on a DrawerItem . Logcat says the following : `` ` java java.lang.NullPointerException : Attempt to invoke virtual method 'java.util.ArrayList com.mikepenz.materialdrawer.adapter.DrawerAdapter.getDrawerItems ( ) ' on a null object reference at com.mikepenz.materialdrawer.MiniDrawer.setSelection ( MiniDrawer.java:334 ) at com.mikepenz.materialdrawer.MiniDrawer.onItemClick ( MiniDrawer.java:320 ) at com.mikepenz.materialdrawer.DrawerBuilder $ 5.onClick ( DrawerBuilder.java:1727 ) at com.mikepenz.materialdrawer.adapter.BaseDrawerAdapter $ 1.onClick ( BaseDrawerAdapter.java:232 ) at android.view.View.performClick ( View.java:4786 ) at android.view.View $ PerformClick.run ( View.java:19902 ) at android.os.Handler.handleCallback ( Handler.java:739 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:135 ) at android.app.ActivityThread.main ( ActivityThread.java:5290 ) at java.lang.reflect.Method.invoke ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:372 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:904 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:699 ) `` ` Thank you for your help !
Minidrawer does n't work , when profile list is shown . __EoT__ **Prerequisites : ** 1 . Have a two primary items in sidebar . 2 . Have a two related items in minidrawer . 3 . Click on each of minidrawer item invokes click on sidebar item . **Steps to reproduce : ** 1 . Open sidebar . 2 . Open profiles list 3 . Close sidebar ( leave profiles list open , as is ) 4 . Try clicking on each minidrawer items . **Expected result : ** 1 . It should still invoke original sidebar 's primary items onClick handler . **Actual result : ** 1 . It fires profile change event .
NullPointerException on updateItem in minidrawer when profile list is shown __EoT__ Just invoke minidrawer.updateItem ( % identifier % ) when sidebar shows a profile list when sidebar replaces original content with profiles . In this case minidrawer is trying to find corresponding identifier in current items list But without success , because it shows profiles , at the moment . method in MiniDrawer `` ` java public void updateItem ( int identifier ) { `` ` There is a line : `` ` java IDrawerItem drawerItem = mDrawer.getDrawerItem ( identifier ) ; `` ` We should check there , if mDrawer is showing switched content or no . Something like : `` ` java final IDrawerItem drawerItem ; if ( mDrawer.isShownSwitchedContent ( ) ) { drawerItem = mDrawer.getOriginalItem ( identifier ) ; } else { drawerItem = mDrawer.getDrawerItem ( identifier ) ; } `` ` where getOriginalItem - new method to create
AccountHeader - update list while it is showing __EoT__ I 'm trying to add/remove profiles while the profiles list is showing ... The problem is , that the list is not updating ... To get the thing working I have to show/hide the selection list ... Following functions are working for me : `` ` java private void deleteProfile ( IProfile profile , boolean current ) { // ... preperation ... mAccountHeader.removeProfile ( profile ) ; // Hack to force header list to update ... mAccountHeader.toggleSelectionList ( this ) ; mAccountHeader.toggleSelectionList ( this ) ; // update if necessary ... if ( current ) mAccountHeader.setActiveProfile ( mLocalProfile , true ) ; } private void addProfile ( DataSource dataSoruce ) { IProfile newProfile = createProfileDrawerItem ( dataSource ) ; mAccountHeader.addProfile ( newProfile , DataManager.getIndex ( dataSource ) ) ; mAccountHeader.setActiveProfile ( newProfile , false ) ; // here I call the profile clicked function = > // first boolean indicates if current profile is selected // second boolean indi to not close the drawers , as I would do it normally when clicking a profile handleProfileChanged ( newProfile , false , false ) ; // to reshow selection list , otherwise
Bug for Listener __EoT__ `` ` java private void onProfileImageClick ( View v , boolean current ) { IProfile profile = ( IProfile ) v.getTag ( R.id.material_drawer_profile_header ) ; boolean consumed = false ; if ( mOnAccountHeaderProfileImageListener ! = null ) { consumed = mOnAccountHeaderProfileImageListener.onProfileImageClick ( v , profile , true ) ; } //if the event was already consumed by the click do n't continue . note that this will also stop the profile change event if ( ! consumed ) { onProfileClick ( v , current ) ; } } /** * onProfileLongClickListener to call the onProfileImageLongClick on the current profile image */ private View.OnLongClickListener onCurrentProfileLongClickListener = new View.OnLongClickListener ( ) { @ Override public boolean onLongClick ( View v ) { if ( mOnAccountHeaderProfileImageListener ! = null ) { IProfile profile = ( IProfile ) v.getTag ( R.id.material_drawer_profile_header ) ; return mOnAccountHeaderProfileImageListener.onProfileImageLongClick ( v , profile , true ) ; } return false ; } } ; `` ` ` onProfileImageClick ` and the ` onProfileImageLongClick ` always return true
big margin between profile image and name __EoT__ - \* improve header height calculation and make it more bullet proof for some emulators and some rare devices were the selected profile image was overlaping the selection text FIX # 836 the commit make the margin between profile image and name quit bigger than before and look not good
ProfileDrawerItem overlapping on small resolution __EoT__ First , thank you for developing this great drawer ! I found a strange behavior on our current project . If you add a profile withName and withIcon to an AccountHeader it is overlapping on a small resolution e.g . hdpi ( 480x800 ) . I tried it with your application and it got the same behavior . ! [ screen shot 2015-11-26 at 15 47 59 ] ( https : //cloud.githubusercontent.com/assets/15260035/11425632/80022180-9456-11e5-85a7-7de5173c42e3.png )
Selected bug after profile click in MiniDrawer __EoT__ Steps to reproduce : 1.Open MiniDrawer 2.Click 3-rd option ( it becomes selected ) 3.Then click profile photo ( drawer is opened with accounts ) 4.Close drawer using SWIPE 5.The previous selected item is now Not selected . Here is video attached . https : //youtu.be/WoAWCQTFRKc It seems to be a bug , because profile photo in Minidrawer is the first item in recyclerview and takes away the selection from previous item
Selected bug after profile click in MiniDrawer __EoT__ Steps to reproduce : 1.Open MiniDrawer 2.Click 3-rd option ( it becomes selected ) 3.Then click profile photo ( drawer is opened with accounts ) 4.Close drawer using SWIPE 5.The previous selected item is now Not selected . Here is video attached . https : //youtu.be/WoAWCQTFRKc It seems to be a bug , because profile photo in Minidrawer is the first item in recyclerview and takes away the selection from previous item
Preset a selected profile in the account drawer __EoT__ Here is my issue i 'm trying to set the account of a user upon adding on to the drawer the thing is i 'm getting the right account selected in the header but the drawer selected item stay the first one even though i used the setActiveProfile ( ) . Is their a way to select the right account in the menu and in the header at the same time without clicking ( Clicking on the item works perfectly ) ? ? Thank you ! [ genymotion - samsung galaxy s5 - 4 4 4 - api 19 - 1080x1920 1080x1920 480dpi - 169 254 38 101_2 ] ( https : //cloud.githubusercontent.com/assets/7561038/10614118/7ff901d8-7726-11e5-96cf-ec094020a1c5.jpg ) ! [ budgetpropane - hgit_3ejbudgetbudgetpropane - app - appsrcmainjavacombudgetpropanebudgetpropaneactivitiesdashboardactivity _2 ] ( https : //cloud.githubusercontent.com/assets/7561038/10614120/821c5eba-7726-11e5-886c-869642cd46c7.jpg )
Following the Google Material Design Guidelines __EoT__ I was using an old version of the library ( 2.7.0 ) for a long time and now decided to update . The first thing I 've noticed that current version is not following Google Guidelines . According to [ guidlines ] ( http : //www.google.com.ua/design/spec/patterns/navigation-drawer.html # navigation-drawer-specs ) space between the opened drawer and the right side has to be 56dp ( the height of the [ toolbar ] ( http : //www.google.com.ua/design/spec/layout/metrics-keylines.html # metrics-keylines-baseline-grids ) ) . But current version ( 4.3.7 ) has only 48dp . ! [ ] ( https : //dl.pushbulletusercontent.com/0Jkfe5oMTlkgQeHUln92IatKG8q33N76/Screenshot_2015-10-19-21-11-34.png ) ! [ ] ( http : //material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0Bzhp5Z4wHba3RFk3c3BjS1c1akE/patterns_navdrawer_metrics2.png )
Non-selectable items do n't fire OnDrawerItemClickListener ( ) in MiniDrawer __EoT__ The MiniDrawer only fires an ` onClick ` if the item being tapped is ` selectable ` ( via ` setSelected ( ) ` ) . Here 's a potential solution that allows the implementing developer to act on their non- ` selectable ` ` IDrawerItem ` taps : `` ` this.mDrawerAdapter.setOnClickListener ( new BaseDrawerAdapter.OnClickListener ( ) { public void onClick ( View v , int position , IDrawerItem item ) { int type = MiniDrawer.this.getMiniDrawerType ( item ) ; if ( type == ITEM ) { if ( MiniDrawer.this.mDrawerAdapter ! = null ) { if ( item.isSelectable ( ) ) { MiniDrawer.this.mDrawer.setSelection ( item , true ) ; } else if ( MiniDrawer.this.mDrawer.getOnDrawerItemClickListener ( ) ! = null ) { MiniDrawer.this.mDrawer.getOnDrawerItemClickListener ( ) .onItemClick ( v , position , item ) ; } } } else if ( type == PROFILE ) { if ( MiniDrawer.this.mAccountHeader ! = null & & ! MiniDrawer.this.mAccountHeader.isSelectionListShown ( ) ) { MiniDrawer.this.mAccountHeader.toggleSelectionList ( v.getContext ( ) ) ; } if ( MiniDrawer.this.mCrossFader ! = null ) { MiniDrawer.this.mCrossFader.crossfade ( ) ; } } } } ) ; `` `
Remove the current and only ProfileDrawerItem __EoT__ When i remove the current and only ProfileDrawerItem of a header , i `` can '' remove it ( the object ) , but in the header still the ProfileDrawerItem data ( the name and email ) . What can i do ?
Add padding around background in MiniDrawer __EoT__ Thanks for your work on the MiniDrawer in the latest version ! One bug I 've noticed is that the background of the selected item covers the shadow when I set ` .withInnerShadow ( true ) ` , whereas the gmail app seems to have a lot of padding around it so that does n't happen . ! [ minidrawer ] ( https : //cloud.githubusercontent.com/assets/2818274/10251440/a893c3da-696b-11e5-9e7b-764d270cbbaa.png )
Ability to remove the selection on MiniDrawer __EoT__ **Edit : ** Actually it was a different problem than below that was causing my issues , due to trying to remove the selection on the MiniDrawer , which appears to be currently unsupported . -- - My navigation drawer items start new Activities , and in those new Activities I call ` mDrawer.setSelection ( itemId , false ) ; ` . This works fine for the ordinary drawer , but with the ` MiniDrawer ` it leads to the wrong item being highlighted . Is this is a bug , or do I need to do something else to set the selected item in the MiniDrawer ?
Ability to remove the selection on MiniDrawer __EoT__ **Edit : ** Actually it was a different problem than below that was causing my issues , due to trying to remove the selection on the MiniDrawer , which appears to be currently unsupported . -- - My navigation drawer items start new Activities , and in those new Activities I call ` mDrawer.setSelection ( itemId , false ) ; ` . This works fine for the ordinary drawer , but with the ` MiniDrawer ` it leads to the wrong item being highlighted . Is this is a bug , or do I need to do something else to set the selected item in the MiniDrawer ?
Image URL in PrimaryDrawerItem __EoT__ I would like my menu icon was dynamic , coming from a url ... I tried that but it did not work : ( `` ` kotlin var image = DrawerImageLoader.init ( object : DrawerImageLoader.IDrawerImageLoader { override fun set ( imageView : ImageView ? , p1 : Uri ? , p2 : Drawable ? ) { Picasso.with ( imageView ? .getContext ( ) ) .load ( `` http : //image.com/img.png '' ) .into ( imageView ) ; } override fun cancel ( imageView : ImageView ? ) { Picasso.with ( imageView ? .getContext ( ) ) .cancelRequest ( imageView ) ; } override fun placeholder ( ctx : Context ? ) : Drawable ? { return null } } ) .getImageLoader ( ) ; listItens.add ( PrimaryDrawerItem ( ) .withName ( `` Try '' ) .withIcon ( image.placeholder ( ctx ) ) ) `` ` Obs : This language is Kotlin : P
Padding parametrizable de icono mdf_arrow_drop_down y mdf_arrow_drop_up __EoT__ `` ` java mAccountSwitcherArrow.setImageDrawable ( new IconicsDrawable ( mActivity , MaterialDrawerFont.Icon.mdf_arrow_drop_down ) .sizeDp ( 24 ) .paddingDp ( 6 ) .color ( mTextColor ) ) ; `` ` to In my app the value of 5 in paddingDp is correct and i can see the icon , with paddingDp 6 i can not see . `` ` java mAccountSwitcherArrow.setImageDrawable ( new IconicsDrawable ( mActivity , MaterialDrawerFont.Icon.mdf_arrow_drop_down ) .sizeDp ( 24 ) .paddingDp ( 5 ) .color ( mTextColor ) ) ; `` ` Proposal : put parameters in size to customize the settings in the application . Like ` @ dimen/material_drawer_padding_arrow_icon ` Thanks .
Drawer open lag __EoT__ In a Samsung Galaxy S6 with 5.1.1 the first time drawer opens up has a small lag.The second time its smoothly as perfect . Any idea ?
Drawer open lag __EoT__ In a Samsung Galaxy S6 with 5.1.1 the first time drawer opens up has a small lag.The second time its smoothly as perfect . Any idea ?
Method drawer.removeAllStickyFooterItems ( ) break footer . __EoT__ In my app I need to dynamically change drawer footer content . After call method ` removeAllStickyFooterItems ( ) ` all calls of ` drawer.addStickyFooterItem ( someItem ) ` do not add items to footer .
Account header toggle state not saved __EoT__ If I have toggled the account list , which shows a drop down list of various accounts , and then I change the device orientation , the account list toggle state would not be properly restored , in which case , the account list is not collapsed . ! [ device-2015-09-08-180605 ] ( https : //cloud.githubusercontent.com/assets/7411385/9732262/0d1784a6-5655-11e5-8038-f44d91e52c5a.png ) ! [ device-2015-09-08-180625 ] ( https : //cloud.githubusercontent.com/assets/7411385/9732263/0ef44a2a-5655-11e5-8eeb-0b5d21f89530.png )
NavigationBar and Full Screen in landscape mode __EoT__ I want to hide status bar and navigation bar in my activity . Also I want to have drawer there . Everything works fine in portrait mode . But after rotation to landscape this blue line appears ( see attached screenshot ) . I believe this is margin or padding . Do you have any ideas where it comes from ? And if I remove drawer everything works fine . Thank you for great library ! ! [ drawer_landscape ] ( https : //cloud.githubusercontent.com/assets/4201475/9698374/8dc36738-53bb-11e5-87c3-801dec99398b.png )
Drawer.setToolbar only works once __EoT__ Setting the drawer 's toolbar using the provided Drawer.setToolbar method does n't seem to work after being called more than once , i.e . if no toolbar is initially specified ( using DrawerBuilder.withToolbar ) when building the drawer , and subsequently Drawer.setToolbar is called , the first call will succeed , but all subsequent calls will result in the hamburger menu and whatnot not being rendered in the new toolbar and still being rendered in the old one . This is the workaround I came up with for now which seems to work , however I 'm limited to not being able to use the usual listeners you can pass into the drawer builder , as they are out of scope : `` ` getMainActivity ( ) .getNavigationDrawer ( ) .setToolbar ( getActivity ( ) , toolbar ) ; getMainActivity ( ) .getNavigationDrawer ( ) .setActionBarDrawerToggle ( new ActionBarDrawerToggle ( getActivity ( ) , getMainActivity ( ) .getNavigationDrawer ( ) .getDrawerLayout ( ) , toolbar , com.mikepenz.materialdrawer.R.string.material_drawer_open , com.mikepenz.materialdrawer.R.string.material_drawer_close ) { public void onDrawerOpened ( View drawerView ) { super.onDrawerOpened ( drawerView ) ; } public void onDrawerClosed ( View drawerView ) { super.onDrawerClosed (
PrimaryDrawerItem is not displayed correctly when using RTL __EoT__ Thank you for great work . I have an issue that PrimaryDrawerItem is not displayed correctly when using RTL I made a quick fix by editing material_drawer_item_primary.xml to be : in material_drawer_name , I changed paddingRight to paddingEnd also when there is no icon , it space should be maintained so you should set visibility to be invisible not GONE . As a work around for now , I wrapped image in framelayout and added invisible view with the same size . `` ` xml < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' xmlns : tools= '' http : //schemas.android.com/tools '' android : layout_width= '' match_parent '' android : layout_height= '' @ dimen/material_drawer_item_primary '' android : orientation= '' horizontal '' android : paddingEnd= '' @ dimen/material_drawer_vertical_padding '' android : paddingLeft= '' @ dimen/material_drawer_vertical_padding '' android : paddingRight= '' @ dimen/material_drawer_vertical_padding '' android : paddingStart= '' @ dimen/material_drawer_vertical_padding '' > < FrameLayout android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' > < ImageView android : id= '' @ +id/material_drawer_icon '' android : layout_width=
Margin on stickyFooterItem __EoT__ I found some different view on app demo on my android 5.0 ! [ screenshot_2015-08-27-21-05-23 ] ( https : //cloud.githubusercontent.com/assets/4651658/9522533/91a59b04-4cff-11e5-8083-9094ac1fb00a.png ) on my android 4.1.2 ! [ screenshot_2015-08-27-21-03-52 ] ( https : //cloud.githubusercontent.com/assets/4651658/9522552/a81aa8a2-4cff-11e5-8d52-f21fc6822ac4.png )
BadgeStyle that supports LayerDrawable __EoT__ What about add a BadgeStyle overload method that supports LayerDrawable also .
.withHeader ( int headerViewRes ) does not work __EoT__ i am trying the following `` ` java result = new DrawerBuilder ( ) .withActivity ( this ) .withHeader ( R.layout.header ) `` ` but it does not display the header at all . If i change it with ` .withStickyHeader ` it works fine Any idea ?
.withHeader ( int headerViewRes ) does not work __EoT__ i am trying the following `` ` java result = new DrawerBuilder ( ) .withActivity ( this ) .withHeader ( R.layout.header ) `` ` but it does not display the header at all . If i change it with ` .withStickyHeader ` it works fine Any idea ?
Badge size changes on DrawerItem click __EoT__ Hi , I 've noticed that if I click a few times on an Item with a Badge , its size will increase . The Badge will grow bigger and bigger if you keep on clicking . If I then click on an other Item and then again on the one with the increased Badge , it will return to normal size . But if I click on even an other Item , the really big size is back again . You can see it if you go to your Sample app and go to Embedded Drawer and then click on `` ActionBar Drawer '' a few times .
withSelectedItem does not behave as expected __EoT__ Calling with ` withSelectedItem ` in ` DrawerBuilder ` does not work as expected . It always defaults to 1 . Offending code is : `` ` java if ( this.mHeaderView ! = null & & this.mSelectedItem ! = -1 ) { this.mSelectedItem = 1 ; } `` ` in ` DrawerBuilder ` class . It always sets the selected item to 1 .
Use Support Annotations __EoT__ I see [ Android Support Annotations ] ( http : //tools.android.com/tech-docs/support-annotations ) is a really useful tools to help us avoid errors when coding . In your code , I think there are many places we can utilize support annotations , for example , in ` DrawerBuilder.java ` : - Method ` public DrawerBuilder ( Activity activity ) ` : can annotate with ` ( @ NonNull Activity activity ) ` - Method ` public DrawerBuilder withRootView ( int rootViewRes ) ` : can annotate with ` ( @ LayoutRes int rootViewRes ) ` - Method ` public DrawerBuilder withStatusBarColorRes ( int statusBarColorRes ) ` : can annotation ` ( @ ColorRes int statusBarColorRes ) ` - Method ` public DrawerBuilder withStatusBarColor ( int statusBarColor ) ` : can annotate with ` ( @ ColorInt int statusBarColor ) ` To sum up , there are many annotations can be utilized , such as : ` @ Nullable ` , ` @ NonNull ` , ` @ StringRes ` , ` @ IntRes ` , ` @ DrawableRes ` , ` @ ColorRes ` , ` @ LayoutRes ` . **EDIT** : I forget to mention that
Get DrawerItem from Id __EoT__ Inspire from # 485 , I wish you can provide a method to retrieve a ` DrawerItem ` from its identifier .
Bug : Name does not get updated __EoT__ Hey @ mikepenz , I 've encountered a bug : `` ` java public void onItemClick ( AdapterView < ? > parent , View view , int position , long id , IDrawerItem drawerItem ) { result.updateName ( `` FooBar '' , position ) ; // result is the actual Drawer Object } `` ` The name does not get updated this way . I have no problem doing the same thing with the badge . The basic project was just a modified version of your examples . Offtopic : Ebenfalls Hallo , hatte gesehen , dass du aus Österreich kommst , herzlichen Gruß zurück aus dem Nachbarland . ; - )
Typo in method : AccountHeaderBuilder.withSelectionFistLineShown ( boolean ) __EoT__ Should be withSelectionFi**r**stLineShown , no ?
DrawerBuilder . __EoT__ How can i cnange profile without close the drawer ?
android : supportsRtl= '' true '' layout issue __EoT__ enable android : supportsRtl= '' true '' and switch language to Arabic or any RTL language , drawer automatically switch to the right of the screen , but content in the list view does n't layout properly ( eg : icon is missing ) . also Account Header text overlap
MaterialDrawer slide from right __EoT__ first of all thanks for sharing the best Android navigation drawer . I need to change direction of sliding to be from right to left . i have changed the gravity if drawer so its sliding from right but the problem is that when is click ActionBarNavigationToggle it crash the app whit this error java.lang.IllegalArgumentException : No drawer view found with gravity LEFT . I dont what to changing the direction with application RTL support because I am developing app for api 11
No menu selection in Android 2.3 __EoT__ There is one problem with android 2.3 . When you select menu in navigation drawer it does n't make it selected in the navigation drawer . On 4+ works fine . I have n't tried to find the problem yet , but I think there some problems with themes .
Enable sticky drawer items to be updated __EoT__ ` Drawer.updateItem ( ) ` only allows ` IDrawerItem ` s added via ` DrawerBuilder.withDrawerItems ( ) ` etc . to be updated . It does n't allow ` IDrawerItem ` s added via ` DrawerBuilder.addStickyDrawerItems ( ) ` etc . to be updated . Either ` Drawer.updateItem ( ) ` should handle both , or a new ` Drawer.updateStickyItem ( ) ` should be added .
Error with OnAccountHeaderListener : iProfile = null __EoT__ Similar to # 370 I have an error IProfile profile = null with OnAccountHeaderListener : `` ` ... new AccountHeaderBuilder ( ) .withActivity ( this ) .withHeaderBackground ( R.drawable.background ) .addProfiles ( iProfile ) .withSavedInstance ( savedInstanceState ) .withSelectionListEnabledForSingleProfile ( false ) .withCompactStyle ( true ) .withOnAccountHeaderListener ( new AccountHeader.OnAccountHeaderListener ( ) { @ Override public boolean onProfileChanged ( View view , IProfile iProfile , boolean current ) { // iProfile == null Log.d ( `` iProfile '' , iProfile + `` '' ) ; return true ; } } ) `` `
Right drawer is being shown underneath the statusbar __EoT__ Firstly thanks for the great library , its very flexible ! I 've noticed an issue when adding a second drawer to the right hand side . If I set `` ` java .withTranslucentStatusBar ( false ) `` ` on the right hand drawer , it is displayed over the statusbar rather than below it . If I use a right drawer without a left drawer then it is drawn correctly below the statusbar . The code I have is : `` ` java drawer = new DrawerBuilder ( ) .withActivity ( this ) .withToolbar ( toolbar ) .withActionBarDrawerToggle ( true ) .withAccountHeader ( headerResult ) .addDrawerItems ( ... ) .build ( ) ; drawer2 = new DrawerBuilder ( ) .withActivity ( this ) .withToolbar ( toolbar ) .withDrawerGravity ( Gravity.RIGHT ) .withTranslucentStatusBar ( false ) .withStickyHeader ( R.layout.header ) .withStickyFooter ( footer ) .withFooterClickable ( true ) .withStickyFooterDivider ( true ) .withCloseOnClick ( false ) .append ( drawer ) ; `` `
Error with single OnAccountHeaderSelectionViewClickListener iProfile = null __EoT__ If I use a Materialdrawer version over 2.9.5 , I have a : `` iProfil=null '' when I click on the profile 's header of the drawer `` ` ... .withSelectionListEnabledForSingleProfile ( false ) .withProfileImagesClickable ( false ) ... .withOnAccountHeaderSelectionViewClickListener ( new AccountHeader.OnAccountHeaderSelectionViewClickListener ( ) { @ Override public boolean onClick ( View view , IProfile iProfile ) { Log.d ( `` APP '' , iProfile + `` '' ) ; return false ; } } ) ... `` ` However , if I use the 2.9.5 version , it 's working well
Selected Item Set back to default after Orientation Change __EoT__ This only happens in the Sticky Section . When I select my Item `` Help '' in the sticky section and rotate the device , the default item is selected . I think that happens because of an error in your savedInstanceState Handling .
Smaller profile icon not loading __EoT__ Hey . I seem to have an issue with the top profile icon loading . The smaller profile icon loads fine but the big one on top does n't load . What do you think is causing this problem ? FYI I am trying to load a local bitmap into the ImageView not a url . Thanks in advance .
SwitchDrawerItem and ToggleDrawerItem random change it state __EoT__ I have try with sample app and my own implementation . How to produce this bug : - Switch of `` Switch '' `` Switch2 '' and `` Toggle '' - Click `` Open Source '' all three item will revert back original state .
problem header height side menu __EoT__ in api 21 no problem but in api 19 or minor l'header become too hight , look screenshot below lollipop : http : //s27.postimg.org/u5h78dmxf/header_2.png api 18 : http : //s27.postimg.org/q7pc58aqb/header_1.png
Implement behavior as recommended by Google __EoT__ Taken from here : https : //developer.android.com/design/patterns/navigation-drawer.html at `` Interaction Details '' A Navigation Drawer should implement the Learning Pattern to show the Drawer on first use . ( Sure we could do it ourselves , but it would be really great if the Library could do that since it should be a part of a Navigation Drawer ) Another thing is a Peak if you touch on the very left of your screen . ( I do n't know if it is implemented , but I could n't produce that effect . )
Sticky Section gets diabled __EoT__ I have 2 Sections in my StickySection . One is checkable , the other is n't ( item.setCheckable ( false ) ; ) When I click on the Section which is checkable and then on the Section which is not Checkable , the first one is disabled . ( The Indicator that this Section is currently selected goes away ) This happens only in the StickySection .
Selected icon color doesnt work __EoT__ Does this library support tinting of the icon ( a .png file ) in selected state ? from what I gone thru , the code does so by tint the icon with ` material_drawer_selected_text ` color My icons are still white even in selected state . `` ` xml < style name= '' CustomStyle '' parent= '' MaterialDrawerTheme '' > < item name= '' colorPrimary '' > @ color/primary_color < /item > < item name= '' colorPrimaryDark '' > @ color/primary_dark_color < /item > < item name= '' colorAccent '' > @ color/accent_color < /item > < item name= '' material_drawer_selected_text '' > @ color/accent_color < /item > < /style > `` ` I have also tried setting it in Java , where i see it has higher priority . but it also doesnt tint with my color accent `` ` java new PrimaryDrawerItem ( ) .withName ( NAVDRAWER_TITLE_RES_ID [ i ] ) .withIcon ( NAVDRAWER_ICON_RES_ID [ i ] ) .withSelectedIconColorRes ( R.color.accent_color ) .withIdentifier ( NAV_ITEMS [ i ] ) ; `` `
SectionDrawerItem - setIdentifier __EoT__ setIdentifier for SectionDrawerItem is missing ( getIdentifier ( ) is implemented ) . Will it be added in the future ? Thanks in advance !
Drawer offset listner ? __EoT__
Method setHeader ( ) does n't remove previous header . __EoT__ Method setHeader does n't remove previously set header . It just makes header 's height bigger ( as for me ) Also method removeHeader ( ) do nothing . Explanation : ... result.setHeader ( customHeader ) ; result.removeHeader ( ) ; result.setHeader ( customHeader ) ; ... After this code header 's height became 2x of customHeader view .
Multiple selected Items __EoT__ I have set some Items with .withDrawerItems ( ) and with .withStickyDrawerItems ( ) . Now the following happens : ! [ example2 ] ( https : //cloud.githubusercontent.com/assets/8021265/7441155/c2359984-f0db-11e4-82fd-1200b4111030.png ) This happens only with the most top item of the Sticky section . Version : 2.9.1
Tap on item at n-th position , listener receives n+1 __EoT__ This is how I am using the drawer : When the activity starts I run this : `` ` java drawer = new Drawer ( ) .withActivity ( this ) .withToolbar ( toolbar ) .withOnDrawerItemClickListener ( this ) .build ( ) ; // add a few PrimaryDrawerItems if ( /* user is logged in */ ) { // profileDrawerItem = setup profile new AccountHeader ( ) .withActivity ( this ) .withDrawer ( drawer ) .addProfiles ( profileDrawerItem ) .build ( ) ; } `` ` When the user logs in or out , I set ` drawer = null ; ` and re-run the code above . After doing that , the ` OnDrawerItemClickListener ` starts responding incorrectly . When I click on one item , the listener receives the next item instead . I am not sure if that is the correct process to add and remove a profile header on demand , but I did n't find any method to remove it after adding it .
Inconsistent setter API in BaseDrawerItem __EoT__ Just spent some time trying to figure out why ` setName ( ) ` was not working to update a drawer item . Was calling ` withName ( int ) ` in the initial setup , then ` setName ( String ) ` to update it . It looks like the ` convertView ( ) ` treats the int ID as taking precedence , so unless I also call ` setName ( -1 ) ` , the string value will never be displayed . IMO this is inconsistent and confusing - the builder adopts the Android idiom of using overloads for setters ( e.g . there 's ` setName ( int ) ` and ` setName ( String ) ` , but the DrawerItem has ` setName ( String ) ` and ` setNameRes ( int ) ` . Looking at the ` Drawer ` API I see there are ` updateName ( ) ` utility functions that do this , but presumably they 're provided as a convenience because they also invalidate the list . For more complicated updates ( e.g . `` I want to manipulate the properties of various DrawerItems ,
colorPrimary is not reflected in task switcher when using MaterialDrawerTheme __EoT__ Specifically I noticed this using the no action bar variants . Also , when the app is starting that same blue color is visible in the status bar for a brief moment , before my chosen app colors are applied . MaterialDrawerTheme : The blue color is NOT my colorPrimary and not a color I have set anywhere for anything ! ! [ MaterialDrawerTheme ] ( http : //i.imgur.com/D8vZ4r7m.png ) AppCompat Theme : My colorPrimary is applied to the task switcher preview . ! [ AppCompat Theme ] ( http : //i.imgur.com/uaK5B3Lm.png ) The only functional difference between the two is the use of AppCompat theme in one image , and a minimal drawer with the MaterialDrawer equivalent theme .
NullPointerException when using android.R.id.content __EoT__ If the host activity does n't explicitly set a layout ( because it relies on ` android.R.id.content ` ) , the content view [ here ] ( https : //github.com/mikepenz/MaterialDrawer/blob/master/library/src/main/java/com/mikepenz/materialdrawer/Drawer.java # L985 ) is null . After giving it some thought , I do n't think it 's a good idea to use the root view , as it 's either going to be placed inside the root fragment 's view hierarchy ( if ` build ( ) ` is called after adding a fragment ) , or it 's going to be replaced the first time a fragment is added with ` FragmentTransaction.replace ( ) ` . Suggest explicitly disallowing use of the root view , and possibly null-checking and throwing a more explicit exception when the root view has no children . What do you think ?
Single profile click without feedback __EoT__ HI . with the following configuration : `` ` ProfileSettingDrawerItem itemAdd = new ProfileSettingDrawerItem ( ) .withName ( getString ( R.string.add_account ) ) .withDescription ( getString ( R.string.add_account_description ) ) .withIcon ( new IconicsDrawable ( this , GoogleMaterial.Icon.gmd_add ) .actionBarSize ( ) .paddingDp ( 5 ) .colorRes ( R.color.material_drawer_primary_text ) ) .withIdentifier ( -1 ) ; AccountHeader.Result accountHeaderResult = new AccountHeader ( ) .withActivity ( this ) .withHeaderBackground ( R.drawable.header ) .addProfiles ( itemAdd ) .withSelectionListEnabledForSingleProfile ( false ) .withOnAccountHeaderListener ( new AccountHeader.OnAccountHeaderListener ( ) { @ Override public boolean onProfileChanged ( View view , IProfile iProfile , boolean b ) { return false ; } } ) .withOnAccountHeaderSelectionViewClickListener ( new AccountHeader.OnAccountHeaderSelectionViewClickListener ( ) { @ Override public boolean onClick ( View view , IProfile iProfile ) { return false ; } } ) .build ( ) ; `` ` I see the following : ! [ device-2015-04-09-112329 ] ( https : //cloud.githubusercontent.com/assets/887462/7063896/e157d9d2-deaa-11e4-8937-a4628a6d55da.png ) The _Add acount_ section is clickable , but i do n't have any feedback at the click moment .
windowSoftInputMode not resizing properly __EoT__ First and foremost , I absolutely love your drawer library . It is the easiest drawer I 've had the pleasure of using ! However ... I 've discovered a bug when interacting with EditText and opening the soft keyboard . I 've uploaded a sample project here : https : //github.com/swolford/MaterialDrawerDemo I 've wrapped the section named `` Keyboard Demo '' in a ScrollView because my fragments will have many items so the user will need to scroll . The keyboard overlays the layout . The expected behaviour is the ScrollViewer scrolls to the current EditText . `` Keyboard Demo # 2 '' is the same layout as Keyboard Demo without the ScrollView . Users wo n't be able to scroll and the keyboard pushes the entire activity up . I have included in styles.xml two themes . DemoTheme01 inherits your theme and DemoTheme02 is a direct copy of yours ( from your library source ) with windowSoftInputMode set . DemoTheme02 works and has the scrolling functionality I expect , but the drawer header image does not extend behind the status bar ... I 'm not sure why directly copying your theme works ,
Real Transparent Status Bar & Navigation Bar __EoT__ I want to make the Translucent Navigation & Statusbar transparent so i can show Information of what is outside the screen like in the Picture below : ! [ map ] ( https : //cloud.githubusercontent.com/assets/2720282/7002224/9c26c356-dc47-11e4-9496-837c62ebd1b2.png ) This seems to be not possible with this library . Even if I set the translucent mode to true and define the color as @ android : color/transparent it just shows a `` transparent white '' Is there a possibility to get a real transparent status & navbar ( and still switch to color status/navbar at runtime , ie when User changes View to a non Mapview )
.withTag on SwitchDrawerItem not working __EoT__ Hey @ mikepenz , I 've been trying to use the withTag-Feature of the SwitchDrawerItem like this : `` ` java drawer.add ( SwitchDrawerItem ( ) .withName ( `` Name '' ) .withTag ( `` Tag '' ) ) ; `` ` And added this OnCheckedChangeListener : `` ` java CompoundButton.OnCheckedChangeListener switchListener = new CompoundButton.OnCheckedChangeListener ( ) { @ Override public void onCheckedChanged ( CompoundButton compoundButton , boolean b ) { Log.d ( `` SwitchListener '' , ( String ) compoundButton.getTag ( ) ) ; } } ; `` ` Unfortunately ` getTag ( ) ` always returns ` null ` .
Bug & Question - withStickyFooter __EoT__ TnQ for new update . But there is a few bugs here : ! [ device-2015-03-28-140430 ] ( https : //cloud.githubusercontent.com/assets/7152030/6880514/806b3cc8-d553-11e4-8f1e-c81482bf2aff.png ) Bugs : 1- bottom divider is lighter ( and thinner ) than the DividerItems in the above . 2- bottom divider has no marginBottom of 8dp like DividerItems . 3- The Icon of stickyfooter is small and has no marginLeft of 16dp ( also the name ) . Question : If i want to that stickyFooter Item be selectable like the primaryItems ( when i select it close drawer and the color changes to primaryColor and the other Items unselected ) how can i do that ?
Bug & Question - withStickyFooter __EoT__ TnQ for new update . But there is a few bugs here : ! [ device-2015-03-28-140430 ] ( https : //cloud.githubusercontent.com/assets/7152030/6880514/806b3cc8-d553-11e4-8f1e-c81482bf2aff.png ) Bugs : 1- bottom divider is lighter ( and thinner ) than the DividerItems in the above . 2- bottom divider has no marginBottom of 8dp like DividerItems . 3- The Icon of stickyfooter is small and has no marginLeft of 16dp ( also the name ) . Question : If i want to that stickyFooter Item be selectable like the primaryItems ( when i select it close drawer and the color changes to primaryColor and the other Items unselected ) how can i do that ?
Problem in Demo __EoT__ @ mikepenz you forgot to override OnBackPressed ( ) method in ActionBarDrawerActivity.java file . Thanks for amazing library .
Navbar and content position __EoT__ Without MaterialDrawer : ! [ 2015-03-26_125917 ] ( https : //cloud.githubusercontent.com/assets/9828409/6843922/4b9bf8bc-d3b8-11e4-8d91-fd533c52df22.png ) But with him : ! [ 2015-03-26_130106 ] ( https : //cloud.githubusercontent.com/assets/9828409/6843923/4ba0d85a-d3b8-11e4-800c-20eb8f327f92.png )
Request - RTL Support __EoT__ When i add a drawerItem with a Persian Name the items names go to right of the navigation drawer . can u guide me how can i fix that ? See below : ! [ device-2015-03-20-184640 ] ( https : //cloud.githubusercontent.com/assets/7152030/6754473/0602a9d4-cf32-11e4-84ff-f690495ab447.png ) you can see # 132 error of icons too in this pic . sometimes icons even be chineese instead of rectangle shapes : | BTW , TnQ for your amazing Lib . this is .NO1 navigation drawer lib .
I ca n't see the badge updates ( v 2.5.5 ) __EoT__ Hello Mike , I have also noticed the same issue inside your MaterialDrawer codebase which I modified to reproduce the issue . I know that you are insanely busy and I decided to take a look at the root cause . Inside MultiDrawerActivity , AdapterView passes a 1-indexed position to `` ` java withOnDrawerItemClickListener ( new Drawer.OnDrawerItemClickListener ( ) { @ Override public void onItemClick ( AdapterView < ? > parent , View view , int position , long id , IDrawerItem drawerItem ) { ... .. `` ` But Drawer 's updateBadge method assumes that position is 0-indexed . I ( temporarily ) solved my issue by subtracting 1 from position : result.updateBadge ( String.valueOf ( badge - 1 ) , position -1 ) ; To fix it globally , some methods need to be updated . `` ` java /** * Update the badge of a drawer item if its an instance of badgeable * * @ param badge * @ param position */ public void updateBadge ( String badge , int position ) { int index = position - 1 ; if ( mDrawer.checkDrawerItem (
Secondary Text as detailed info __EoT__ Hi , first of all thanks for the great work . It would be nice to have the chance to enable a secondary text in the DrawerItem . I 'm currently using another library and it allows this , even though i 'm trying your library which i prefer.. Here an example : ! [ drawerwithsecondarytext ] ( https : //cloud.githubusercontent.com/assets/4865385/6712012/b4b06c0e-cd8a-11e4-89e5-2ff3ba4c8621.png ) Is there some chance to have that in the future ? Thanks .
Request - Typeface __EoT__ can u add setTypeface method for sections ?
Material Drawer like gmail . __EoT__ In gmail when I select the current profile , expands the list of profiles , right ? This profile no longer listed . Is this possible ?
make changes into material_drawer_item_profile.xml __EoT__ can u add to future releases some changes into `` material_drawer_item_profile.xml '' < LinearLayout ... android : gravity= '' center_vertical '' > this will allow show name or email ( or booth ) at vertical center of layout : )
Material Drawer like gmail . __EoT__ In gmail when I select the current profile , expands the list of profiles , right ? This profile no longer listed . Is this possible ?
setNavigationOnClickListener avoids calling onOptionsItemSelect on drawers with toolbars __EoT__ Hello , On the last version the drawer handles the setNavigationOnclickListener by itself , the problem is that the `` drawer open or closed '' is called even if the setDrawerIndicatorEnabled is set to false . As the click on the navigation is `` catched '' then the onOptionsItemSelect on the activity is not called anymore . The use case is an Activity that has a first Fragment A on which you want to show the drawertoggle and use the drawer , but when you change the Fragment for Fragment B , you only want to show the `` back '' button and catch its click to go back . I 'm trying to `` know '' that the toggle is inactive using this code : `` ` Java this.mToolbar.setNavigationOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { //if the drawerToggle is disabled , fall off to the home button action if ( ! mActionBarDrawerToggle.isDrawerIndicatorEnabled ( ) ) { //WHAT TO PUT HERE ? } else { if ( mDrawerLayout.isDrawerOpen ( mSliderLayout ) ) { mDrawerLayout.closeDrawer ( mSliderLayout ) ; } else {
How change drawer item selector ? __EoT__ Hello , i 'm using this library in own project . It is very best navigation 's library . Thanks . my project using minSdk > 10 : ( 1 ) Several hours i tried to find approach on old android ( 2.3 version ) , how i can change navigation drawer item 's selector . ( orange color will appear , when pres item ) to be clear about what , added screenshot . ! [ old_android ] ( https : //cloud.githubusercontent.com/assets/6225633/6657130/8309c61a-cb4a-11e4-9a28-6a86266ee995.png ) 2 ) when navigation item is selected , is n't showing selected element in navigation drawer ( on Android 2.3 version , newest - ok )
Ever Expanding StatusBar ( 2.5.0-SNAPSHOT ) __EoT__ If I pause and resume my app over and over , causing the menu to be setup again and again , we continually push the app content down . The code I 'm using to setup the panel is here , and it 's called from onResume because some of the options can change between launches . The expected behavior , I think , is that since the side panel is totally being reset it does not continue to push the content down each time it 's launched . https : //gist.github.com/inktomi/4111d570baeef267eb4d I have a video uploaded here , which may explain this better . https : //drive.google.com/file/d/0B_mnp5s6MRbzUHVkcTM2ZFlESHM/view ? usp=sharing The same code does not reproduce this bug in version 2.0.8 .
setNavigationOnClickListener avoids calling onOptionsItemSelect on drawers with toolbars __EoT__ Hello , On the last version the drawer handles the setNavigationOnclickListener by itself , the problem is that the `` drawer open or closed '' is called even if the setDrawerIndicatorEnabled is set to false . As the click on the navigation is `` catched '' then the onOptionsItemSelect on the activity is not called anymore . The use case is an Activity that has a first Fragment A on which you want to show the drawertoggle and use the drawer , but when you change the Fragment for Fragment B , you only want to show the `` back '' button and catch its click to go back . I 'm trying to `` know '' that the toggle is inactive using this code : `` ` Java this.mToolbar.setNavigationOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { //if the drawerToggle is disabled , fall off to the home button action if ( ! mActionBarDrawerToggle.isDrawerIndicatorEnabled ( ) ) { //WHAT TO PUT HERE ? } else { if ( mDrawerLayout.isDrawerOpen ( mSliderLayout ) ) { mDrawerLayout.closeDrawer ( mSliderLayout ) ; } else {
bug __EoT__ In my tablet ( Nexus 9 ) , the email account header appears cut off ( vertical ) . ProfileDrawerItem view alson cut off ( horizontal ) .
bug __EoT__ In my tablet ( Nexus 9 ) , the email account header appears cut off ( vertical ) . ProfileDrawerItem view alson cut off ( horizontal ) .
AccountHeader w/ only 1 profile still has touch behavior __EoT__ It is currently not possible to totally disable the account switching behavior and include a single account using the app . In this use case , we would have a single Profile set in an AccountHeader . If a user sets withSelectionListEnabled ( false ) as well as withProfileImagesClickable ( false ) we would expect that the profile images and the text in the AccountHeader do not have any click behavior enabled . However , this is not the case . The mAccountHeaderTextSection in AccountHeader still has UI elements which react to touch because of the android.R.attr.selectableItemBackground which is added to their background . Furthermore , it appears that the the IconicsDrawable in setImageOrPlaceholder ( ) also adds touch states to the UI . Would it be possible to have a way to turn these off if people want the AccountHeader , but only want a single account without any touch interactivity ?
Set selection color for item icon ? __EoT__ How to set selection color for item icon ?
the AccountSwitcher-triangle is black __EoT__ The AccountSwitcher-triangle should be the same color like the text in the AccountHeader . But for now it stays black .
setNavigationOnClickListener avoids calling onOptionsItemSelect on drawers with toolbars __EoT__ Hello , On the last version the drawer handles the setNavigationOnclickListener by itself , the problem is that the `` drawer open or closed '' is called even if the setDrawerIndicatorEnabled is set to false . As the click on the navigation is `` catched '' then the onOptionsItemSelect on the activity is not called anymore . The use case is an Activity that has a first Fragment A on which you want to show the drawertoggle and use the drawer , but when you change the Fragment for Fragment B , you only want to show the `` back '' button and catch its click to go back . I 'm trying to `` know '' that the toggle is inactive using this code : `` ` Java this.mToolbar.setNavigationOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { //if the drawerToggle is disabled , fall off to the home button action if ( ! mActionBarDrawerToggle.isDrawerIndicatorEnabled ( ) ) { //WHAT TO PUT HERE ? } else { if ( mDrawerLayout.isDrawerOpen ( mSliderLayout ) ) { mDrawerLayout.closeDrawer ( mSliderLayout ) ; } else {
Are there any option to set a Profile selected by default ? __EoT__ Something like setSelectionByIdentifier ? ?
Use account header icons to represent most recent profiles __EoT__ I think it would be nice to use the account icons at the top of the account header to represent the most recent accounts that were used . For example if you have three account icons and you select the third one : | Accounts | Current result | New result | | -- - | -- - | -- - | | 1 2 3 | 3 2 1 | 3 1 2 | Or if you have a fourth item in the drawer and select that : | Accounts | Current result | New result | | -- - | -- - | -- - | | 1 2 3 | 4 2 3 | 4 1 2 |
methods to set colors __EoT__
disable header clickable __EoT__ this is the logcat ? Can we disable header clickable ? 02-26 14:17:21.657 9330-9330/com.mikepenz.materialdrawer.app E/AndroidRuntime﹕ FATAL EXCEPTION : main Process : com.mikepenz.materialdrawer.app , PID : 9330 java.lang.NullPointerException : Attempt to invoke interface method 'int com.mikepenz.materialdrawer.model.interfaces.IDrawerItem.getIdentifier ( ) ' on a null object reference at com.mikepenz.materialdrawer.app.SimpleDrawerActivity $ 1.onItemClick ( SimpleDrawerActivity.java:116 ) at com.mikepenz.materialdrawer.Drawer $ 3.onItemClick ( Drawer.java:803 ) at android.widget.AdapterView.performItemClick ( AdapterView.java:300 ) at android.widget.AbsListView.performItemClick ( AbsListView.java:1145 ) at android.widget.AbsListView $ PerformClick.run ( AbsListView.java:3046 ) at android.widget.AbsListView $ 3.run ( AbsListView.java:3835 ) at android.os.Handler.handleCallback ( Handler.java:739 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:135 ) at android.app.ActivityThread.main ( ActivityThread.java:5223 ) at java.lang.reflect.Method.invoke ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:372 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:899 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:694 ) at de.robv.android.xposed.XposedBridge.main ( XposedBridge.java:117 )
Non selectable items __EoT__ For example : Settings , help .
min sdk 10 __EoT__ Can you explain why the min sdk is not 10 . I would like to help to backport it .
Resources.NotFoundException __EoT__ When I run application on real device ( Prestigio PAP5451DUO , API 17 ) I get this exception : `` ` java java.lang.RuntimeException : Unable to start activity ComponentInfo { co.application/co.application.ui.activities.Activity } : android.content.res.Resources $ NotFoundException : Resource ID # 0x7f09008a `` ` It looks like the resource in question is `` ` java material_drawer_width `` ` I think this happens because this resource is n't defined in the _values_ folder , which is the default , but only in _values-sw384dp_ and _values-sw360dp_ .
Drawer Width should be handled automatically __EoT__ At the moment the drawer width is defined by the full width - 56dp margin by the drawerLayout . The width of the drawer should be automatically set for tablets too . MaxWidth on phones : 280dp ( 56x5 ) MaxWidth on tablets : 320dp ( 64x5 )
looks ugly on press __EoT__ shows blue color and oly after that shows the ripple : (
how to set pivot for animation __EoT__ this is very useful library but there is n't any method to set pivot and set the center point of animation and it is very big problem . please try to create this method . very tnX
Repeat animations __EoT__ A method should be included on `` YoYo '' class to allow repeat ! That would be very handy = ) Thankyou for great lib !
Custom Animations __EoT__ Greetings , I have been browsing the code for a few hours , and I could n't find a way to use the library with custom animations , meaning that we are limited by the animations provided in the Techniques enum . Is there any way I can extends BaseViewAnimator to provide custom ( programmer defined ) animations to be used within the library or do I need to roll old fashioned animations manually ? Thanks Robert
Custom Animations __EoT__ Greetings , I have been browsing the code for a few hours , and I could n't find a way to use the library with custom animations , meaning that we are limited by the animations provided in the Techniques enum . Is there any way I can extends BaseViewAnimator to provide custom ( programmer defined ) animations to be used within the library or do I need to roll old fashioned animations manually ? Thanks Robert
WobbleAnimator issue __EoT__ Rotation in the end of animation should be equal to zero , so instead of : ` ObjectAnimator.ofFloat ( target , `` rotation '' , 0 , -5 , 3 , -3 , 2 , -1 ) ` // line 39 should be : ` ObjectAnimator.ofFloat ( target , `` rotation '' , 0 , -5 , 3 , -3 , 2 , 0 ) ` or ` ObjectAnimator.ofFloat ( target , `` rotation '' , 0 , -5 , 3 , -3 , 2 , -1 , 0 ) ` PS : sorry for spamming with these small bugs , instead of fixing them and creating pull requests
反复执行同一个或同几个动画会卡顿 __EoT__ 反复执行同一个或同几个动画时，重复的次数越多就越来越卡顿。。
SwipeLayout 1327行语法错误？ __EoT__ ! [ image ] ( https : //cloud.githubusercontent.com/assets/14288168/20641870/754af648-b43c-11e6-97cd-61ccd5fdcd92.png )
Why does SimpleCursorSwipeAdapter not use support.v4 like CursorSwipeAdapter does ? __EoT__ I noticed that CursorSwipeAdapter is extending from the support.v4 CursorAdapter , but SimpleCursorSwipeAdapter extends from the non-support version . Is there a reason for this ?
No way to disable swipe gesture __EoT__ I want to disable swipe gesture in certain case . I try to set setDragEdge ( null ) but got NPE , try to swipeLayout.setEnabled ( false ) and it is not work . Please add this feature or tell me how do it .
ca n't disable item in list view __EoT__ First of all awesome library man.. But there is only one problem i am facing i cant disable any listview item.. i try using is enable override mathod of adpter but still item is enabled.. please answer asap ... .
Is it possible to add drawable selectors for internal views ? Looks like it does n't work . __EoT__
SeekBar inside the SurfaceView __EoT__ Hello , I would like to put a SeekBar inside the top view of a SwipeLayout but it does n't work well . I ca n't drag the cursor properly because the SwipeLayout is taking the touch event . It only work if i do tiny move ( not enough to trigger the swipe i suppose ) . [ Edit : i was just taping next to the cursor ] Is there a way to resolve this ? Thanks
ScrollView inside SwipeLayout __EoT__ Hi , I want to put a ScrollView inside a SwipeLayout . However , SwipeLayout does not work with ScrollView . It disables scrolling and when you get to bottom , it opens up the BottomView , instead of continuing to scroll . How can this be done ?
SeekBar inside the SurfaceView __EoT__ Hello , I would like to put a SeekBar inside the top view of a SwipeLayout but it does n't work well . I ca n't drag the cursor properly because the SwipeLayout is taking the touch event . It only work if i do tiny move ( not enough to trigger the swipe i suppose ) . [ Edit : i was just taping next to the cursor ] Is there a way to resolve this ? Thanks
Click to colse others __EoT__ I think you should just allow one view to be swiped at the same time . When I click other one , the one I swiped before may be closed . Or can you make this customizable ?
demo minSdkVersion 18 ? __EoT__ Hey : ) I find it really attractive ! we could definitely use your library in our project.But Maybe you write wrong minSdkVersion . [ here ] ( https : //github.com/daimajia/AndroidSwipeLayout/blob/master/demo/build.gradle # L9 )
？？？ __EoT__ what 's this ? v0.8.0 , only the jadx-dui.exe file . ! [ image ] ( https : //user-images.githubusercontent.com/7868514/46185400-33bf5080-c30c-11e8-8cf1-ca4f4e8c2edd.png )
make the import class name clickable __EoT__ Originally I wanted to make the complete class name including package name clickable . But I did not manage to do so as it seems like I can not specify the clickable text section manually . Now at least the class name is clickable
Windows : jadx-gui-0.8.0.exe ca n't be placed in the Open With context menu __EoT__ On Windows 10 I tried to add the ` jadx-gui-0.8.0.exe ` in the Open With list of APK files . However it does not matter what I do Jad-X never appears in this context menu even if it you do open an APK using ` jadx-gui-0.8.0.exe ` once . Other apps then appear in the open with context menu , but not JadX . Really strange . There must be something different/wrong with the ` jadx-gui-0.8.0.exe ` that prevents Windows from displaying it in the open with list .
make the import class name clickable __EoT__ Originally I wanted to make the complete class name including package name clickable . But I did not manage to do so as it seems like I can not specify the clickable text section manually . Now at least the class name is clickable
[ BUG ] do keyword __EoT__ ` public static final int dn = 2131755405 ; public static final int do = 2131755406 ; public static final int dp = 2131755407 ; ` in jadx-gui if a variable is named `` do '' it is highlighted as the java keyword `` do '' , bold and blue ! [ image ] ( https : //user-images.githubusercontent.com/32385661/46197319-c14d7100-c309-11e8-8643-644da606288e.png )
Saves all resources __EoT__ Saves all available resources # 360
Exports resources first __EoT__ # 374
Generates code of missing R class __EoT__ Hi , there are a few things : - generated code is n't getting saved by some reason - I believe it 's not an issue that I do n't create inner classes ? - I mentioned arrays in original R classes like `` ` public static final int [ ] ZoomOval = new int [ 0 ] ; `` ` , I will find out why they exist , and add it in a new commit in future This PR is for https : //github.com/skylot/jadx/issues/308
Decompilation never finishes __EoT__ Hi , please check this app , I run `` ` ./bin/jadx/bin/jadx -d TEST -- show-bad-code -- no-replace-consts app.apk `` ` it consumes a lot of memory , but in result I see only `` ` sources `` ` folder , but not `` ` resources `` ` APK : https : //drive.google.com/open ? id=1DiHzG75VimwDRGfE_X9Z6lU5_hXbz2Bb
Method types do n't match for a generic class ( AsyncTask ) __EoT__ Hi , APK : https : //www.apkmirror.com/apk/tumblr-inc/tumblr/tumblr-11-4-0-02-release/ Open `` ` com.tumblr.creation.receiver.ShareActivity `` ` and find an internal class : `` ` java /* renamed from : com.tumblr.creation.receiver.ShareActivity $ a */ class C7943a extends android.os.AsyncTask < android.net.Uri , android.net.Uri , java.util.List < android.net.Uri > > { // ... C7943a ( android.content.Context context , com.tumblr.creation.receiver.ShareActivity.C7944b c7944b ) { this.f62176b = new java.lang.ref.WeakReference ( context ) ; this.f62177c = context.getContentResolver ( ) ; this.f62178d = c7944b ; } // ... protected /* synthetic */ java.lang.Object doInBackground ( java.lang.Object [ ] objArr ) { // ... } protected /* synthetic */ void onPostExecute ( java.lang.Object obj ) { // ... } protected /* synthetic */ void onProgressUpdate ( java.lang.Object [ ] objArr ) { // ... } } `` ` Methods such as `` ` doInBackground `` ` should be overriden with declaration `` ` java protected java.util.List < android.net.Uri > doInBackground ( android.net.Uri [ ] objArr ) { `` `
Method types do n't match for a generic class ( AsyncTask ) __EoT__ Hi , APK : https : //www.apkmirror.com/apk/tumblr-inc/tumblr/tumblr-11-4-0-02-release/ Open `` ` com.tumblr.creation.receiver.ShareActivity `` ` and find an internal class : `` ` java /* renamed from : com.tumblr.creation.receiver.ShareActivity $ a */ class C7943a extends android.os.AsyncTask < android.net.Uri , android.net.Uri , java.util.List < android.net.Uri > > { // ... C7943a ( android.content.Context context , com.tumblr.creation.receiver.ShareActivity.C7944b c7944b ) { this.f62176b = new java.lang.ref.WeakReference ( context ) ; this.f62177c = context.getContentResolver ( ) ; this.f62178d = c7944b ; } // ... protected /* synthetic */ java.lang.Object doInBackground ( java.lang.Object [ ] objArr ) { // ... } protected /* synthetic */ void onPostExecute ( java.lang.Object obj ) { // ... } protected /* synthetic */ void onProgressUpdate ( java.lang.Object [ ] objArr ) { // ... } } `` ` Methods such as `` ` doInBackground `` ` should be overriden with declaration `` ` java protected java.util.List < android.net.Uri > doInBackground ( android.net.Uri [ ] objArr ) { `` `
Parameter ( this ) in method invocation is missed __EoT__ Hi , enable deobfuscation and open `` ` com.p184e.p185a.p186a.EncryptedPreferences `` ` , look at method `` ` java /* renamed from : a */ public com.p184e.p185a.p186a.EncryptedPreferences mo18133a ( ) { return new com.p184e.p185a.p186a.EncryptedPreferences ( ) ; } `` ` but there is only one constructor of `` ` EncryptedPreferences `` ` : `` ` java private EncryptedPreferences ( com.p184e.p185a.p186a.EncryptedPreferences.C2190a c2190a ) { `` ` So the first method should be decompiled as `` ` java public com.p184e.p185a.p186a.EncryptedPreferences mo18133a ( ) { return new com.p184e.p185a.p186a.EncryptedPreferences ( this ) ; } `` ` APK : https : //play.google.com/store/apps/details ? id=com.forexfs.platform
Regression at commit 37ed9cd __EoT__ 0.7.1 can decompile method public void handleMessage ( android.os.Message r108 ) in class com.android.server.dsp.common.CommonManagerService $ CommonManagerHandler with warning about inconsistent code , 0.7.2-unstable-b469-5d7f2c7 fails completely : `` ` /* Error : jadx.core.utils.exceptions.JadxRuntimeException : Unknown predecessor block by arg ( r46_3 'data ' android.dsp.bean.CInt3Pracel ) in PHI : PHI : ( r46_6 'data ' android.dsp.bean.CInt3Pracel ) = ( r46_3 'data ' android.dsp.bean.CInt3Pracel ) , ( r46_5 'data ' android.dsp.bean.CInt3Pracel ) binds : { ( r46_3 'data ' android.dsp.bean.CInt3Pracel ) =B:245:0x15b5 , ( r46_5 'data ' android.dsp.bean.CInt3Pracel ) =B:246:0x15b7 } at jadx.core.dex.instructions.PhiInsn.replaceArg ( PhiInsn.java:78 ) at jadx.core.dex.visitors.ModVisitor.processInvoke ( ModVisitor.java:222 ) at jadx.core.dex.visitors.ModVisitor.replaceStep ( ModVisitor.java:83 ) at jadx.core.dex.visitors.ModVisitor.visit ( ModVisitor.java:68 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:27 ) at jadx.core.dex.visitors.DepthTraversal.lambda $ visit $ 1 ( DepthTraversal.java:14 ) at java.util.ArrayList.forEach ( ArrayList.java:1257 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:14 ) at jadx.core.dex.visitors.DepthTraversal.lambda $ visit $ 0 ( DepthTraversal.java:13 ) at java.util.ArrayList.forEach ( ArrayList.java:1257 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:13 ) at jadx.core.ProcessClass.process ( ProcessClass.java:32 ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:286 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) */ `` ` JAR ( just rename .zip to .jar ) : [ services.zip ] ( https : //github.com/skylot/jadx/files/2229085/services.zip ) Thank You .
Deobfuscation Minimum String Length __EoT__ I recommend reverting the default deobfuscation minimum name length to 3 . A lot of classes/interfaces ( e.g. , ` Thread ` and ` Runnable ` ) have ` run ( ) ` methods . An alternative option could be to exclude certain words . Ref 6d984c0407cd6b252732869c504c997253dda13c ( [ here ] ( https : //github.com/skylot/jadx/blob/6d984c0407cd6b252732869c504c997253dda13c/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java # L67 ) )
Method not decompiled : SSA rename variables already executed __EoT__ Hi , the same app as in issue # 317 Stacktrace from `` ` finam/protobuf/marketdata/Quote.java `` ` : `` ` java private AdditionsOneofCase ( int r3 ) { /* JADX : method processing error */ /* Error : jadx.core.utils.exceptions.JadxRuntimeException : SSA rename variables already executed at jadx.core.dex.visitors.ssa.SSATransform.renameVariables ( SSATransform.java:120 ) at jadx.core.dex.visitors.ssa.SSATransform.process ( SSATransform.java:52 ) at jadx.core.dex.visitors.ssa.SSATransform.visit ( SSATransform.java:42 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:27 ) at jadx.core.dex.visitors.DepthTraversal.lambda $ visit $ 1 ( DepthTraversal.java:14 ) at java.util.ArrayList.forEach ( ArrayList.java:1249 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:14 ) at jadx.core.dex.visitors.DepthTraversal.lambda $ visit $ 0 ( DepthTraversal.java:13 ) at java.util.ArrayList.forEach ( ArrayList.java:1249 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:13 ) at jadx.core.ProcessClass.process ( ProcessClass.java:32 ) at jadx.core.ProcessClass.lambda $ processDependencies $ 0 ( ProcessClass.java:51 ) at java.lang.Iterable.forEach ( Iterable.java:75 ) at jadx.core.ProcessClass.processDependencies ( ProcessClass.java:51 ) at jadx.core.ProcessClass.process ( ProcessClass.java:37 ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:286 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) at jadx.api.JadxDecompiler.lambda $ appendSourcesSave $ 0 ( JadxDecompiler.java:201 ) */ /* r0 = this ; r0. < init > ( r1 , r2 ) ; r0.value = r3 ; return ; */ throw new UnsupportedOperationException ( `` Method not decompiled : finam.protobuf.marketdata.Quote.Additions.AdditionsOneofCase. < init > ( java.lang.String ,
Method not decompiled : IndexOutOfBoundsException : bitIndex < 0 : -1 __EoT__ Hi , I 've found an issue in class `` ` com.airbnb.android.utils.PasswordStrength `` ` : `` ` java private void init ( ) { /* JADX : method processing error */ /* Error : java.lang.IndexOutOfBoundsException : bitIndex < 0 : -1 at java.base/java.util.BitSet.get ( BitSet.java:624 ) at jadx.core.dex.visitors.CodeShrinker $ ArgsInfo.usedArgAssign ( CodeShrinker.java:138 ) at jadx.core.dex.visitors.CodeShrinker $ ArgsInfo.access $ 300 ( CodeShrinker.java:43 ) at jadx.core.dex.visitors.CodeShrinker.canMoveBetweenBlocks ( CodeShrinker.java:282 ) at jadx.core.dex.visitors.CodeShrinker.shrinkBlock ( CodeShrinker.java:232 ) at jadx.core.dex.visitors.CodeShrinker.shrinkMethod ( CodeShrinker.java:38 ) at jadx.core.dex.visitors.regions.LoopRegionVisitor.checkArrayForEach ( LoopRegionVisitor.java:196 ) at jadx.core.dex.visitors.regions.LoopRegionVisitor.checkForIndexedLoop ( LoopRegionVisitor.java:119 ) at jadx.core.dex.visitors.regions.LoopRegionVisitor.processLoopRegion ( LoopRegionVisitor.java:65 ) at jadx.core.dex.visitors.regions.LoopRegionVisitor.enterRegion ( LoopRegionVisitor.java:52 ) at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal ( DepthRegionTraversal.java:56 ) at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda $ traverseInternal $ 0 ( DepthRegionTraversal.java:57 ) at java.base/java.util.ArrayList.forEach ( ArrayList.java:1380 ) at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal ( DepthRegionTraversal.java:57 ) at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda $ traverseInternal $ 0 ( DepthRegionTraversal.java:57 ) at java.base/java.util.ArrayList.forEach ( ArrayList.java:1380 ) at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal ( DepthRegionTraversal.java:57 ) at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda $ traverseInternal $ 0 ( DepthRegionTraversal.java:57 ) at java.base/java.util.ArrayList.forEach ( ArrayList.java:1380 ) at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal ( DepthRegionTraversal.java:57 ) at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverse ( DepthRegionTraversal.java:18 ) at jadx.core.dex.visitors.regions.LoopRegionVisitor.visit ( LoopRegionVisitor.java:46 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:27 ) at jadx.core.dex.visitors.DepthTraversal.lambda $ visit $ 1 ( DepthTraversal.java:14 ) at java.base/java.util.ArrayList.forEach ( ArrayList.java:1380 )
Method not decompiled : SSA rename variables already executed __EoT__ Hi , the same app as in issue # 317 Stacktrace from `` ` finam/protobuf/marketdata/Quote.java `` ` : `` ` java private AdditionsOneofCase ( int r3 ) { /* JADX : method processing error */ /* Error : jadx.core.utils.exceptions.JadxRuntimeException : SSA rename variables already executed at jadx.core.dex.visitors.ssa.SSATransform.renameVariables ( SSATransform.java:120 ) at jadx.core.dex.visitors.ssa.SSATransform.process ( SSATransform.java:52 ) at jadx.core.dex.visitors.ssa.SSATransform.visit ( SSATransform.java:42 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:27 ) at jadx.core.dex.visitors.DepthTraversal.lambda $ visit $ 1 ( DepthTraversal.java:14 ) at java.util.ArrayList.forEach ( ArrayList.java:1249 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:14 ) at jadx.core.dex.visitors.DepthTraversal.lambda $ visit $ 0 ( DepthTraversal.java:13 ) at java.util.ArrayList.forEach ( ArrayList.java:1249 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:13 ) at jadx.core.ProcessClass.process ( ProcessClass.java:32 ) at jadx.core.ProcessClass.lambda $ processDependencies $ 0 ( ProcessClass.java:51 ) at java.lang.Iterable.forEach ( Iterable.java:75 ) at jadx.core.ProcessClass.processDependencies ( ProcessClass.java:51 ) at jadx.core.ProcessClass.process ( ProcessClass.java:37 ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:286 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) at jadx.api.JadxDecompiler.lambda $ appendSourcesSave $ 0 ( JadxDecompiler.java:201 ) */ /* r0 = this ; r0. < init > ( r1 , r2 ) ; r0.value = r3 ; return ; */ throw new UnsupportedOperationException ( `` Method not decompiled : finam.protobuf.marketdata.Quote.Additions.AdditionsOneofCase. < init > ( java.lang.String ,
Decompile result seems to be wrong for an apk __EoT__ Hi , The apk ( Live earth wallpapers ) file is from ` https : //drive.google.com/open ? id=0B29Dh2QdbmxXQWhLUEtBSFFSb2M ` . For function ` protected Integer doInBackground ( Void [ ] ) ` in class ` CloudUpdatingTask ` ( witch is a inner class of ` com.breel.geswallpapers.weather.CloudsProvider ` ) : 1. use ` dex2jar ` to convert it to jar file , and open the jar file with ` Jadx ` . We can get java src code as below : `` ` protected Integer doInBackground ( Void ... voidArr ) { IOException e ; ... ... ( ignored code ) if ( str.equals ( sharedPreferences.getString ( `` latest_url '' , null ) ) ) { Log.i ( CloudsProvider.TAG , `` Not downloading clouds since they are still the same '' ) ; return Integer.valueOf ( 2 ) ; } Log.i ( CloudsProvider.TAG , `` Downloading new clouds ... '' ) ; i = 0 ; while ( i < CloudsProvider.FACE_NAMES.length ) { arrayList = new ArrayList ( ) ; for ( i2 = 0 ; i2 < 4 ; i2++ ) { ... ... ( ignored code ) } ...
show app certificate __EoT__ show the certificate if the certificate file name is not standard eg https : //play.google.com/store/apps/details ? id=com.kms.free
Method not decompiled : BlockUtils.getNextBlock ( ) throws NullPointerException __EoT__ Hi , I see that a method was n't decompiled , file `` ` finam/protobuf/userinfo/UserInfoRequest.java `` ` `` ` java protected final java.lang.Object dynamicMethod ( com.google.protobuf.GeneratedMessageLite.MethodToInvoke r13 , java.lang.Object r14 , java.lang.Object r15 ) { /* JADX : method processing error */ /* Error : java.lang.NullPointerException at jadx.core.utils.BlockUtils.getNextBlock ( BlockUtils.java:289 ) at jadx.core.dex.visitors.regions.RegionMaker.traverse ( RegionMaker.java:131 ) at jadx.core.dex.visitors.regions.RegionMaker.makeRegion ( RegionMaker.java:74 ) at jadx.core.dex.visitors.regions.RegionMaker.processIf ( RegionMaker.java:642 ) at jadx.core.dex.visitors.regions.RegionMaker.traverse ( RegionMaker.java:111 ) at jadx.core.dex.visitors.regions.RegionMaker.makeRegion ( RegionMaker.java:74 ) at jadx.core.dex.visitors.regions.RegionMaker.processSwitch ( RegionMaker.java:818 ) at jadx.core.dex.visitors.regions.RegionMaker.traverse ( RegionMaker.java:116 ) at jadx.core.dex.visitors.regions.RegionMaker.makeRegion ( RegionMaker.java:74 ) at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit ( RegionMakerVisitor.java:49 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:27 ) at jadx.core.dex.visitors.DepthTraversal.lambda $ visit $ 1 ( DepthTraversal.java:14 ) at java.util.ArrayList.forEach ( ArrayList.java:1249 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:14 ) at jadx.core.ProcessClass.process ( ProcessClass.java:32 ) at jadx.core.ProcessClass.lambda $ processDependencies $ 0 ( ProcessClass.java:51 ) at java.lang.Iterable.forEach ( Iterable.java:75 ) at jadx.core.ProcessClass.processDependencies ( ProcessClass.java:51 ) at jadx.core.ProcessClass.process ( ProcessClass.java:37 ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:286 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) at jadx.api.JadxDecompiler.lambda $ appendSourcesSave $ 0 ( JadxDecompiler.java:201 ) */ `` ` APK : https : //drive.google.com/open ? id=1W3e0_QR8Nc9h0lx1OoscfY2cNBPPwG6I
show app certificate __EoT__
LogCollector cause memory leak by keep references of Nodes __EoT__ ! [ image ] ( https : //user-images.githubusercontent.com/1819074/42213337-0c8597dc-7eeb-11e8-853d-d9fb28bcac42.png ) ! [ image ] ( https : //user-images.githubusercontent.com/1819074/42213438-4cbe12b6-7eeb-11e8-9a7a-d9bc55b0bc8d.png ) LogCollector keep too many references of ` ClassNode/MethodNode/DexNode/Dex ` without ` toString ( ) ` , and then those references keep other node references alive and finally keep the whole old tree alive . It 's easy to test by open one normal file with many classes , and keep switch deobfuscation on and off . This also happen when switch between two files . Tested with dev ( 5b712e8 )
Elements of enum are not decompiled , but references to them exist __EoT__ Hi , Contents of the enum class : `` ` java package com.linecorp.linepay ; public enum l { } `` ` And contents of the file with references : `` ` java package com.linecorp.linepay ; public final /* synthetic */ class c { public static final /* synthetic */ int [ ] a ; static { int [ ] iArr = new int [ l.values ( ) .length ] ; a = iArr ; iArr [ l.USER_INFO_DIGEST.ordinal ( ) ] = 1 ; a [ l.TRACKING_TICKET.ordinal ( ) ] = 2 ; a [ l.COUNTRY_CONFIG.ordinal ( ) ] = 3 ; a [ l.CARD_BRANDS.ordinal ( ) ] = 4 ; a [ l.TRANSACTION_CONFIG.ordinal ( ) ] = 5 ; a [ l.CACHEABLE_CONFIG.ordinal ( ) ] = 6 ; a [ l.CARDS.ordinal ( ) ] = 7 ; a [ l.BANK_ACCOUNTS.ordinal ( ) ] = 8 ; a [ l.USER_INFO.ordinal ( ) ] = 9 ; a [ l.BALANCE.ordinal ( ) ] = 10 ; } } `` ` ( the same with deobf option enabled ) Seems that jadx did n't decompile enum elements APK : https
jadx-gui search results unable to be seen without selection when using dark cinnamon theme with Adwaita-dark controls __EoT__ ! [ unable to see search results ] ( https : //i.imgur.com/2btkomQ.jpg ) As the image above shows , search results can not be seen with the dark theme I am using . I am not sure if this is the theme 's fault or jadx-gui 's . Here is my theme selection : ! [ theme selection ] ( https : //i.imgur.com/KBzCTD9.png )
Decompiler freezes ( deadlock ) __EoT__ Hi , output from `` ` jstack `` ` : `` ` 2018-05-14 15:12:05 Full thread dump Java HotSpot ( TM ) 64-Bit Server VM ( 25.74-b02 mixed mode ) : '' pool-1-thread-4 '' # 13 prio=5 os_prio=0 tid=0x000000003d810800 nid=0xcac waiting for monitor entry [ 0x00000000449ae000 ] java.lang.Thread.State : BLOCKED ( on object monitor ) at jadx.core.ProcessClass.process ( ProcessClass.java:28 ) - waiting to lock < 0x000000040531edf8 > ( a jadx.core.dex.info.ClassInfo ) at jadx.core.ProcessClass.processDependencies ( ProcessClass.java:60 ) at jadx.core.ProcessClass.process ( ProcessClass.java:39 ) - locked < 0x0000000405304890 > ( a jadx.core.dex.info.ClassInfo ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:282 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) - locked < 0x000000040ffa0b20 > ( a jadx.api.JavaClass ) at jadx.api.JadxDecompiler.lambda $ appendSourcesSave $ 0 ( JadxDecompiler.java:200 ) at jadx.api.JadxDecompiler $ $ Lambda $ 8/1173346575.run ( Unknown Source ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) Locked ownable synchronizers : - < 0x0000000410070048 > ( a java.util.concurrent.ThreadPoolExecutor $ Worker ) '' pool-1-thread-3 '' # 12 prio=5 os_prio=0 tid=0x000000003d80f800 nid=0x1734 waiting for monitor entry [ 0x0000000043aae000 ] java.lang.Thread.State : BLOCKED ( on object monitor ) at jadx.core.ProcessClass.process ( ProcessClass.java:28 ) - waiting to lock <
OutOfMemoryException -- confirmed jadx issue __EoT__ Hi , stacktrace : `` ` Exception in thread `` pool-1-thread-2 '' java.lang.OutOfMemoryError : Java heap space at java.base/java.util.Arrays.copyOf ( Arrays.java:3688 ) at java.base/java.util.ArrayList.grow ( ArrayList.java:237 ) at java.base/java.util.ArrayList.grow ( ArrayList.java:242 ) at java.base/java.util.ArrayList.add ( ArrayList.java:467 ) at java.base/java.util.ArrayList.add ( ArrayList.java:480 ) at jadx.core.dex.visitors.regions.RegionMaker.traverse ( RegionMaker.java:146 ) at jadx.core.dex.visitors.regions.RegionMaker.makeRegion ( RegionMaker.java:94 ) at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit ( RegionMakerVisitor.java:49 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:31 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:17 ) at jadx.core.ProcessClass.process ( ProcessClass.java:34 ) at jadx.core.ProcessClass.processDependencies ( ProcessClass.java:60 ) at jadx.core.ProcessClass.process ( ProcessClass.java:39 ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:282 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) at jadx.api.JadxDecompiler.lambda $ appendSourcesSave $ 0 ( JadxDecompiler.java:200 ) at jadx.api.JadxDecompiler $ $ Lambda $ 42/369901249.run ( Unknown Source ) `` ` APK : [ Glassdoor Job Search Salaries Reviews_v6.3.2_apkpure.com.apk.zip ] ( https : //github.com/skylot/jadx/files/1969236/Glassdoor.Job.Search.Salaries.Reviews_v6.3.2_apkpure.com.apk.zip ) Confirmed because I hit a breakpoint and see endless loop , where a `` ` BlockNode `` ` refers to itself
Decompiler freezes ( endless loop ) __EoT__ Hi , output from `` ` jstack `` ` : `` ` 2018-05-14 15:24:52 Full thread dump Java HotSpot ( TM ) 64-Bit Server VM ( 25.74-b02 mixed mode ) : '' pool-1-thread-4 '' # 13 prio=5 os_prio=0 tid=0x000000003da7d000 nid=0x1214 runnable [ 0x000000004502e000 ] java.lang.Thread.State : RUNNABLE at java.util.Collections $ UnmodifiableCollection $ 1.next ( Collections.java:1042 ) at jadx.core.dex.visitors.regions.RegionMaker.processIf ( RegionMaker.java:657 ) at jadx.core.dex.visitors.regions.RegionMaker.traverse ( RegionMaker.java:127 ) at jadx.core.dex.visitors.regions.RegionMaker.makeRegion ( RegionMaker.java:94 ) at jadx.core.dex.visitors.regions.RegionMaker.makeEndlessLoop ( RegionMaker.java:324 ) at jadx.core.dex.visitors.regions.RegionMaker.processLoop ( RegionMaker.java:176 ) at jadx.core.dex.visitors.regions.RegionMaker.traverse ( RegionMaker.java:110 ) at jadx.core.dex.visitors.regions.RegionMaker.makeRegion ( RegionMaker.java:94 ) at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit ( RegionMakerVisitor.java:49 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:31 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:17 ) at jadx.core.ProcessClass.process ( ProcessClass.java:34 ) - locked < 0x0000000409d95550 > ( a jadx.core.dex.info.ClassInfo ) at jadx.core.ProcessClass.processDependencies ( ProcessClass.java:60 ) at jadx.core.ProcessClass.process ( ProcessClass.java:39 ) - locked < 0x0000000406a69d90 > ( a jadx.core.dex.info.ClassInfo ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:282 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) - locked < 0x00000004145b11d0 > ( a jadx.api.JavaClass ) at jadx.api.JadxDecompiler.lambda $ appendSourcesSave $ 0 ( JadxDecompiler.java:200 ) at jadx.api.JadxDecompiler $ $ Lambda $ 8/1896305732.run ( Unknown Source ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run (
Use of never declared variable __EoT__ Hi , `` ` url `` ` was never declared , but accessed in the fragment : `` ` java private void doIntent ( android.content.Intent intent ) { // ... . } else if ( resource.equals ( `` openurl '' ) ) { url = com.valvesoftware.android.steam.community.views.SteamWebView.extractUrlFromOpenUrlUri ( u ) ; if ( url ! = null ) { loadWebViewFragment ( url ) ; } } else if ( resource.equals ( `` opencategoryurl '' ) ) { url = u.getQueryParameter ( `` url '' ) ; if ( url ! = null ) { loadTabbedWebViewFragment ( url ) ; } } `` ` APK : https : //drive.google.com/file/d/1731iVIu0J048v_e6Us30vUOxvtxkLNDN/view ? usp=sharing File : `` ` com/valvesoftware/android/steam/community/activity/MainActivity.java `` `
Searching __EoT__ After the 0.7.1 release , there is no code preview in the text search : ! [ image ] ( https : //user-images.githubusercontent.com/27666381/39704617-7b4534a4-523e-11e8-88e6-bf825a121865.png )
Searching __EoT__ Any chance that a setting for realtime searching can be enabled/disabled ? It becomes a real pita when you 're dealing with a large project , type the first character of the search term , and it immediately begins searching and not allowing you to continue typing . Would be a real help .
Error in debug info parser __EoT__ I 've had the same exception as issues # 176 and # 209 , using unstable . The apk is public , it 's the apk from this app : https : //play.google.com/store/apps/details ? id=com.wakeup.smartband & hl=en Do you need more details ?
Stackoverflow for official Periscope app __EoT__ Hi , Run the following command : > jadx -- no-replace-consts -- show-bad-code -- deobf -- deobf-use-sourcename -- output-dir-src Periscope % 20- % 20Live % 20Video_1.18.1_apk-dl.com/source -- output-dir-res Periscope % 20- % 20Live % 20Video_1.18.1_apk-dl.com/res Periscope % 20- % 20Live % 20Video_1.18.1_apk-dl.com.apk It will crash with the following exception : > Exception in thread `` main '' java.lang.StackOverflowError > at jadx.core.deobf.Deobfuscator.resolveOverridingInternal ( Deobfuscator.java:151 ) > at jadx.core.deobf.Deobfuscator.resolveOverridingInternal ( Deobfuscator.java:184 ) > at jadx.core.deobf.Deobfuscator.resolveOverridingInternal ( Deobfuscator.java:184 ) > at ... [ Periscope % 20- % 20Live % 20Video_1.18.1_apk-dl.com.apk.zip ] ( https : //github.com/skylot/jadx/files/1637081/Periscope.20-.20Live.20Video_1.18.1_apk-dl.com.apk.zip ) ( remove ` .zip ` from file name )
Deobfuscator forgets to replace some expressions __EoT__ Hi , please use the following APK https : //play.google.com/store/apps/details ? id=ru.akbars.mobile When you open `` ` com.akbars.bankok.activities.legacy.NfcActivity `` ` you can see import `` ` java import ru.b.a.b.C4184b ; `` ` but in reality it was moved to `` ` ru.p313b.p314a.EmvClient.C4184b `` ` Deobfuscator was ran with args `` ` -- deobf -- deobf-use-sourcename `` `
Decompiler freezes for some apps ( deadlock ) __EoT__ Hi , I met that in 10 % of the processing apps . Example app is Dropbox : https : //play.google.com/store/apps/details ? id=com.dropbox.android I ran jstack and it shows the following thing : `` ` 2018-04-12 17:30:48 Full thread dump Java HotSpot ( TM ) 64-Bit Server VM ( 25.74-b02 mixed mode ) : '' pool-1-thread-8 '' # 17 prio=5 os_prio=0 tid=0x000000003cb36000 nid=0xea0 waiting for monitor entry [ 0x0000000042d5f000 ] java.lang.Thread.State : BLOCKED ( on object monitor ) at jadx.core.ProcessClass.process ( ProcessClass.java:28 ) - waiting to lock < 0x00000004097f45c8 > ( a jadx.core.dex.info.ClassInfo ) at jadx.core.ProcessClass.processDependencies ( ProcessClass.java:60 ) at jadx.core.ProcessClass.process ( ProcessClass.java:39 ) - locked < 0x0000000409a97c78 > ( a jadx.core.dex.info.ClassInfo ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:282 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) - locked < 0x0000000409bd6df0 > ( a jadx.api.JavaClass ) at jadx.api.JadxDecompiler.lambda $ appendSourcesSave $ 0 ( JadxDecompiler.java:200 ) at jadx.api.JadxDecompiler $ $ Lambda $ 8/829737737.run ( Unknown Source ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) Locked ownable synchronizers : - < 0x000000040c54cc18 > ( a java.util.concurrent.ThreadPoolExecutor $ Worker ) '' pool-1-thread-7 '' # 16 prio=5 os_prio=0 tid=0x000000003cb35800
latest head and release 0.7.1 seem broken for class files __EoT__ Hi , first thanks for the release , frequent releases would be appreciated . I do n't seem to be able to decompile any class files anymore with latest HEAD version . The test suite passes when building jadx . `` ` cat foo/Foo.java `` ` `` ` java package foo ; public class Foo { public int a = 42 ; public static void main ( String args [ ] ) { Foo m = new Foo ( ) ; m.a = 23 ; System.out.println ( `` hello '' + m.a ) ; } } `` ` `` ` java -version openjdk version `` 1.8.0_162 '' OpenJDK Runtime Environment ( build 1.8.0_162-b12 ) OpenJDK 64-Bit Server VM ( build 25.162-b12 , mixed mode ) javac foo/Foo.java jadx foo/Foo.class INFO - output directory : Foo INFO - loading ... ERROR - jadx error : Error load file : foo/Foo.class jadx.core.utils.exceptions.JadxRuntimeException : Error load file : foo/Foo.class at jadx.api.JadxDecompiler.loadFiles ( JadxDecompiler.java:126 ) at jadx.api.JadxDecompiler.load ( JadxDecompiler.java:87 ) at jadx.cli.JadxCLI.processAndSave ( JadxCLI.java:27 ) at jadx.cli.JadxCLI.main ( JadxCLI.java:16 ) Caused by : java.io.IOException : Ca n't read class name from file :
Resources decodes incorrectly when system locale is using comma as decimal separator instead of dot __EoT__ Version : jadx-0.7.0 built with current GitHub sources There is a problem with resoucres decoding when `` Save as gradle project '' is used : `` ` diff ru_RU.UTF-8/src/main/res/drawable/login_edit_background.xml C/src/main/res/drawable/login_edit_background.xml 4c4 < < stroke android : width= '' 0,5dp '' android : color= '' @ color/color_edit_button_line '' / > -- - > < stroke android : width= '' 0.5dp '' android : color= '' @ color/color_edit_button_line '' / > `` ` The comma decimal separator in `` 0,5dp '' is rejected by Android Studio . Temporary workaround for me is running export LC_ALL=C before starting jadx-gui
XML decode errors ( missing tags , attributes , etc ) __EoT__ This app https : //play.google.com/store/apps/details ? id=ru.abb.mobilebank Proceed to `` ` res/xml/config.xml `` ` A lot of wrong decodes can be found like `` ` xml < name АК БАРС Online/ > < description Etalon version of OpenWay Mobile Bank/ > < author email= '' aliventsev @ openwaygroup.com '' href= '' http : //openwaygroup.com '' OpenWay Group/ > `` ` or `` ` xml < feature name= '' CardIO '' > < param name= '' android-package '' value= '' io.card.cordova.sdk.CardIOCordovaPlugin '' / > < /http : //www.w3.org/ns/widgets : feature > < feature name= '' PickContact '' > < param name= '' android-package '' value= '' com.kolwit.cordova.PickContactPlugin '' / > < /http : //www.w3.org/ns/widgets : feature > < feature name= '' MMA '' > < param name= '' android-package '' value= '' com.openwaygroup.ic.otp.MMAPlugin '' / > < /http : //www.w3.org/ns/widgets : feature > < feature name= '' InAppBrowserXwalk '' > < param name= '' android-package '' value= '' com.example.plugin.InAppBrowserXwalk.InAppBrowserXwalk '' / > < /http : //www.w3.org/ns/widgets : feature > < feature name= '' Contacts '' > < param name= '' android-package '' value= '' org.apache.cordova.contacts.ContactManager '' / > <
XMLGen : Decode error : Type : 0xffff not yet implemented , position : 0x1b4f2 __EoT__ Exception in `` ` AndroidManifest.xml `` ` : `` ` Error decode manifest java.io.IOException : Decode error : Type : 0xffff not yet implemented , position : 0x1b4f2 at jadx.core.xmlgen.CommonBinaryParser.die ( CommonBinaryParser.java:97 ) at jadx.core.xmlgen.BinaryXMLParser.decode ( BinaryXMLParser.java:138 ) at jadx.core.xmlgen.BinaryXMLParser.parse ( BinaryXMLParser.java:90 ) at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:99 ) at jadx.api.ResourcesLoader.lambda $ loadContent $ 0 ( ResourcesLoader.java:83 ) at jadx.api.ResourcesLoader.decodeStream ( ResourcesLoader.java:72 ) at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:83 ) at jadx.api.ResourceFile.loadContent ( ResourceFile.java:53 ) `` ` APK : http : //dl.apk-cloud.com/dl3/apk/2018/1/30/com.xiaomi.smarthome_60727.apk ? id=com.xiaomi.smarthome & f=Mi % 20Home_5.1.1_apk-dl.com.apk & dl=2
Error when opening APK , no subfolders nor decompiled code is shown __EoT__ **Exception : ** `` ` java INFO - loading ... ERROR - Error load file : /tmp/087af5aacab8fc8bc7b1dcb7a138c3552d175c74b496056893299bc437422f95.apk jadx.core.utils.exceptions.JadxRuntimeException : Error load file : /tmp/087af5aacab8fc8bc7b1dcb7a138c3552d175c74b496056893299bc437422f95.apk at jadx.api.JadxDecompiler.loadFiles ( JadxDecompiler.java:126 ) at jadx.api.JadxDecompiler.load ( JadxDecompiler.java:87 ) at jadx.gui.JadxWrapper.openFile ( JadxWrapper.java:34 ) at jadx.gui.ui.MainWindow.openFile ( MainWindow.java:169 ) at jadx.gui.ui.MainWindow.openFile ( MainWindow.java:162 ) at jadx.gui.ui.MainWindow.open ( MainWindow.java:124 ) at jadx.gui.JadxGUI.lambda $ main $ 0 ( JadxGUI.java:27 ) at java.awt.event.InvocationEvent.dispatch ( InvocationEvent.java:311 ) at java.awt.EventQueue.dispatchEventImpl ( EventQueue.java:756 ) at java.awt.EventQueue.access $ 500 ( EventQueue.java:97 ) at java.awt.EventQueue $ 3.run ( EventQueue.java:709 ) at java.awt.EventQueue $ 3.run ( EventQueue.java:703 ) at java.security.AccessController.doPrivileged ( Native Method ) at java.security.ProtectionDomain $ JavaSecurityAccessImpl.doIntersectionPrivilege ( ProtectionDomain.java:80 ) at java.awt.EventQueue.dispatchEvent ( EventQueue.java:726 ) at java.awt.EventDispatchThread.pumpOneEventForFilters ( EventDispatchThread.java:201 ) at java.awt.EventDispatchThread.pumpEventsForFilter ( EventDispatchThread.java:116 ) at java.awt.EventDispatchThread.pumpEventsForHierarchy ( EventDispatchThread.java:105 ) at java.awt.EventDispatchThread.pumpEvents ( EventDispatchThread.java:101 ) at java.awt.EventDispatchThread.pumpEvents ( EventDispatchThread.java:93 ) at java.awt.EventDispatchThread.run ( EventDispatchThread.java:82 ) Caused by : com.android.dex.DexException : Unexpected magic : [ 0x9b , 0x9a , 0x87 , 0xf5 , 0xcf , 0xcc , 0xca , 0xff ] at com.android.dex.TableOfContents.readHeader ( TableOfContents.java:86 ) at com.android.dex.TableOfContents.readFrom ( TableOfContents.java:72 ) at com.android.dex.Dex.loadFrom ( Dex.java:142 ) at com.android.dex.Dex. < init >
NullPointerException when parsing AndroidManifest.xml __EoT__ Error : `` ` Error decode manifest java.lang.NullPointerException at jadx.core.codegen.CodeWriter.add ( CodeWriter.java:98 ) at jadx.core.xmlgen.BinaryXMLParser.parseAttribute ( BinaryXMLParser.java:266 ) at jadx.core.xmlgen.BinaryXMLParser.parseElement ( BinaryXMLParser.java:241 ) at jadx.core.xmlgen.BinaryXMLParser.decode ( BinaryXMLParser.java:124 ) at jadx.core.xmlgen.BinaryXMLParser.parse ( BinaryXMLParser.java:83 ) at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:114 ) at jadx.api.ResourcesLoader.lambda $ loadContent $ 0 ( ResourcesLoader.java:98 ) at jadx.api.ResourcesLoader.decodeStream ( ResourcesLoader.java:80 ) at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:98 ) at jadx.api.ResourceFile.loadContent ( ResourceFile.java:53 ) `` ` APK : [ Hulu Stream TV Movies more_v3.17.1.250381_apkpure.com.apk.zip ] ( https : //github.com/skylot/jadx/files/1646071/Hulu.Stream.TV.Movies.more_v3.17.1.250381_apkpure.com.apk.zip ) ( remove ` .zip ` from name ) . Looks like that none of the resources is correctly decompiled , but I 'm able to successfully install this app on the emulator
decompile static block throw exception __EoT__ static { /* JADX : method processing error */ /* Error : jadx.core.utils.exceptions.DecodeException : Load method exception in method : org.cocos2dx.cpp.AppActivity. < clinit > ( ) : void at jadx.core.dex.nodes.MethodNode.load ( MethodNode.java:116 ) at jadx.core.dex.nodes.ClassNode.load ( ClassNode.java:249 ) at jadx.core.ProcessClass.process ( ProcessClass.java:31 ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:296 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) Caused by : jadx.core.utils.exceptions.DecodeException : in method : org.cocos2dx.cpp.AppActivity. < clinit > ( ) : void at jadx.core.dex.instructions.InsnDecoder.decodeInsns ( InsnDecoder.java:46 ) at jadx.core.dex.nodes.MethodNode.load ( MethodNode.java:101 ) ... 4 more Caused by : java.lang.IllegalArgumentException : bogus opcode : 0073 at com.android.dx.io.OpcodeInfo.get ( OpcodeInfo.java:1217 ) at com.android.dx.io.OpcodeInfo.getFormat ( OpcodeInfo.java:1232 ) at com.android.dx.io.instructions.DecodedInstruction.decode ( DecodedInstruction.java:72 ) at jadx.core.dex.instructions.InsnDecoder.decodeInsns ( InsnDecoder.java:43 ) ... 5 more */ /* // Ca n't load method instructions . */ throw new UnsupportedOperationException ( `` Method not decompiled : org.cocos2dx.cpp.AppActivity. < clinit > ( ) : void '' ) ; }
Decompile error on twitch apk ( Jump to NOP instruction ) __EoT__ Using version 5.8.3 of the twitch apk in the google play store , many methods are not being decompiled properly throwing a method processing error , usually all stemming from a null pointer exception . The easiest one to find that I know of is the class file ` tv.twitch.android.social.q ` which has one of the methods trace below . `` ` private final java.lang.CharSequence a ( int r1 , tv.twitch.chat.ChatMessageBadge [ ] r2 , tv.twitch.android.social.h.a r3 , boolean r4 ) { /* JADX : method processing error */ /* Error : jadx.core.utils.exceptions.DecodeException : Load method exception : null in method : tv.twitch.android.social.q.a ( int , tv.twitch.chat.ChatMessageBadge [ ] , tv.twitch.android.social.h $ a , boolean ) : java.lang.CharSequence at jadx.core.dex.nodes.MethodNode.load ( MethodNode.java:116 ) at jadx.core.dex.nodes.ClassNode.load ( ClassNode.java:249 ) at jadx.core.ProcessClass.process ( ProcessClass.java:31 ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:323 ) at jadx.api.JavaClass.decompile ( JavaClass.java:62 ) Caused by : java.lang.NullPointerException */ /* r0 = this ; r1 = 0 ; if ( r4 > = 0 ) goto L_0x000d ; L_0x0003 : r0 = -1 ; if ( r4 == r0 ) goto L_0x000d ; L_0x0006 : r0 = 1 ;
[ GUI ] Feature request : Double-click to allow multiple highlighting __EoT__ Although the intention of JADX is not to be an advanced source code viewer . The feature of multiple highlighting when double-clicking a word could be very useful to follow the decompiled code . ! [ 2beap ] ( https : //user-images.githubusercontent.com/14809754/35116340-643f8f2e-fc8b-11e7-9736-4ef86f03c992.png ) Thanks for listening : )
Separate output dir for sources and resources __EoT__ Hi , it would be extremely good to change parameter > -d , -- output-dir - output directory to > -dr , -- output-dir-res - output directory for resources > -ds , -- output-dir-src - output directory for sources because currently they are dropped to the same directory . Or I 'm missing something and such things already exist ? If no , I 'd like to implement two behaviours : 1 ) If none of these parameters is specified , create directories ` source ` and ` res ` inside `` root '' 2 ) If only one of them is specified , show error and require to specify two of them
Always write full class name including package , do n't use imports __EoT__ Hi , sometimes I see that decompiler fails to write class name correctly ( e.g . a source contains import of class A , but internally another class A is used -- local one from the same package ) , and development tool does n't know what you mean . Is that possible to ALWAYS use full class names everywhere ? Like now it is `` ` java private static final SparseArray < String > t = new SparseArray ( ) ; private static final UriMatcher u = new UriMatcher ( -1 ) ; private static final SparseBooleanArray v = new SparseBooleanArray ( 26 ) ; private static final List < Integer > w = new ArrayList ( ) ; `` ` And I want it to be : `` ` java private static final android.util.SparseArray < java.lang.String > t = new android.util.SparseArray ( ) ; private static final android.content.UriMatcher = new android.content.UriMatcher ( -1 ) ; private static final android.util.SparseBooleanArrayv = new android.util.SparseBooleanArray ( 26 ) ; private static final java.util.List < java.lang.Integer > w = new java.util.ArrayList ( ) ; `` `
JADX : method processing error __EoT__ Hi , When I decompile a dex file from http : //www.javadecompilers.com , almost every decompliled Java method is like this : private void m1777a ( java.lang.Object r2 , java.lang.Object r3 , int r4 ) { /* JADX : method processing error */ /* Error : java.lang.IllegalArgumentException : position=271645287 length=6731424 at com.android.dex.Dex.open ( Dex.java:188 ) at jadx.core.dex.nodes.DexNode.openSection ( DexNode.java:210 ) at jadx.core.dex.nodes.parser.DebugInfoParser. < init > ( DebugInfoParser.java:47 ) at jadx.core.dex.visitors.DebugInfoVisitor.visit ( DebugInfoVisitor.java:18 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:31 ) at jadx.core.dex.visitors.DepthTraversal.visit ( DepthTraversal.java:17 ) at jadx.core.ProcessClass.process ( ProcessClass.java:37 ) at jadx.core.ProcessClass.processDependencies ( ProcessClass.java:59 ) at jadx.core.ProcessClass.process ( ProcessClass.java:42 ) at jadx.api.JadxDecompiler.processClass ( JadxDecompiler.java:281 ) at jadx.api.JavaClass.decompile ( JavaClass.java:59 ) at jadx.api.JadxDecompiler $ 1.run ( JadxDecompiler.java:161 ) */ /* r1 = this ; return ; */ throw new UnsupportedOperationException ( `` Method not decompiled : com.lufax.android.v2.app.common.c.d.a ( java.lang.Object , java.lang.Object , int ) : void '' ) ; } What is the reason and can this be fixed ? Thanks Jake
OutOfMemoryError in BlockUtils.collectWhileDominates __EoT__ The error log is : `` ` 00:49:55 ERROR - OutOfMemoryError in pass : BlockFinallyExtract in method : com.sec.android.touchwiz.widget.TwListView.layoutChildren ( ) : void java.lang.OutOfMemoryError : Java heap space at java.util.Arrays.copyOf ( Arrays.java:3181 ) ~ [ na:1.8.0_131 ] at java.util.ArrayList.grow ( ArrayList.java:261 ) ~ [ na:1.8.0_131 ] at java.util.ArrayList.ensureExplicitCapacity ( ArrayList.java:235 ) ~ [ na:1.8.0_131 ] at java.util.ArrayList.ensureCapacityInternal ( ArrayList.java:227 ) ~ [ na:1.8.0_131 ] at java.util.ArrayList.add ( ArrayList.java:458 ) ~ [ na:1.8.0_131 ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:463 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates ( BlockUtils.java:464 ) ~ [ jadx-core-0.6.1.jar : na ] at jadx.core.utils.BlockUtils.collectWhileDominates
Peer not authenticated __EoT__ I am building jadx with Ubuntu 16.04 like this : ./gradlew dist But the terminal shown “ peer not authenticated '' error . Here is the follow error message : -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- FAILURE : Build failed with an exception . * Where : Build file '/home/ryohao/Android/Tools/jadx/build.gradle ' line : 9 * What went wrong : Error resolving plugin [ id : 'com.github.kt3k.coveralls ' , version : '2.3.1 ' ] > Could not GET 'https : //plugins.gradle.org/api/gradle/2.7/plugin/use/com.github.kt3k.coveralls/2.3.1 ' . > peer not authenticated * Try : Run with -- stacktrace option to get the stack trace . Run with -- info or -- debug option to get more log output . BUILD FAILED -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
Disable constants references __EoT__ It 's really useless to see constant references instead of constants in reversing Will be here an option for disabling constants recovery ? For example , `` ` private static final String IS_SYNC_DATA = `` is_sync_data '' ; // ... getIntent ( ) .getStringExtra ( EXTRA_OPERATION ) ; `` ` I want to see only ` getIntent ( ) .getStringExtra ( `` is_sync_data '' ) ; `
Support for AAR files __EoT__ I really like this viewer , but why is there no out of the box support for aar files ? They also includes a _ ` classes.jar ` _ .
Error decode arsc __EoT__ From [ Google Play ] ( https : //play.google.com/store/apps/details ? id=ba.bhtelecom.stanjeracuna ) `` ` java java.io.IOException : Decode error : Unexpected type header size : 0x48 , position : 0x1be8 at jadx.core.xmlgen.CommonBinaryParser.die ( CommonBinaryParser.java:96 ) at jadx.core.xmlgen.ResTableParser.parseTypeChunk ( ResTableParser.java:164 ) at jadx.core.xmlgen.ResTableParser.parsePackage ( ResTableParser.java:142 ) at jadx.core.xmlgen.ResTableParser.decodeTableChunk ( ResTableParser.java:89 ) at jadx.core.xmlgen.ResTableParser.decode ( ResTableParser.java:57 ) at jadx.core.xmlgen.ResTableParser.decodeToCodeWriter ( ResTableParser.java:62 ) at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:111 ) at jadx.api.ResourcesLoader.access $ 000 ( ResourcesLoader.java:25 ) at jadx.api.ResourcesLoader $ 1.decode ( ResourcesLoader.java:91 ) at jadx.api.ResourcesLoader.decodeStream ( ResourcesLoader.java:64 ) at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:84 ) at jadx.api.ResourceFile.getContent ( ResourceFile.java:52 ) `` `
Inconsistent code __EoT__ Method ` public void start ( ) ` from [ link ] ( https : //github.com/JakeWharton/NineOldAndroids/blob/master/library/src/com/nineoldandroids/animation/AnimatorSet.java ) gave inconsistent code .
Inconsistent code __EoT__ Following method gave inconsistent code : `` ` java private ArrayList < Day > parseWeatherResponse ( String response ) { ArrayList < Day > reportList = new ArrayList < > ( ) ; try { System.out.println ( response ) ; if ( response ! =null & & ( response.startsWith ( SERVER_ERROR ) || response.startsWith ( NOT_FOUND ) ) ) { return reportList ; } JSONObject jsonObj = new JSONObject ( response ) ; JSONArray days = jsonObj.getJSONArray ( LIST_TAG ) ; for ( int i = 0 ; i < days.length ( ) ; i++ ) { JSONObject c = days.getJSONObject ( i ) ; long milis = c.getLong ( MILIS_TAG ) ; JSONObject temp = c.getJSONObject ( TEMP_TAG ) ; String max = temp.getString ( MAX_TAG ) ; String min = temp.getString ( MIN_TAG ) ; JSONArray weather = c.getJSONArray ( WEATHER_TAG ) ; String weatherDesc = weather.getJSONObject ( 0 ) .getString ( DESC_TAG ) ; Day d = new Day ( ) ; d.setMilis ( milis ) ; d.setMinTmp ( min ) ; d.setMaxTmp ( max ) ; d.setWeatherDesc ( weatherDesc ) ; reportList.add ( d ) ; } } catch ( JSONException e )
Error decode manifest __EoT__ Error decode manifest java.io.IOException : Decode error : Type : 0x104 not yet implemented , position : 0xb9aa at jadx.core.xmlgen.CommonBinaryParser.die ( CommonBinaryParser.java:96 ) at jadx.core.xmlgen.BinaryXMLParser.decode ( BinaryXMLParser.java:128 ) at jadx.core.xmlgen.BinaryXMLParser.parse ( BinaryXMLParser.java:88 ) at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:106 ) at jadx.api.ResourcesLoader.access $ 000 ( ResourcesLoader.java:25 ) at jadx.api.ResourcesLoader $ 1.decode ( ResourcesLoader.java:89 ) at jadx.api.ResourcesLoader.decodeStream ( ResourcesLoader.java:63 ) at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:82 ) at jadx.api.ResourceFile.getContent ( ResourceFile.java:52 )
Resources not decoded fully if an error occurs __EoT__ Decoding of resources stops for https : //play.google.com/store/apps/details ? id=com.coasia.airmentor after the following error occurs . The error is shown only during saving of results to HDD , however remaining resources are missing both in GUI and on disk . Missing resources include res/strings for example . Reproducible for both JADX/JADX-GUI 0.6.1 build 211 and 0.6.0 stable release . Not reproducible for the online version at http : //www.javadecompilers.com/apk/ , however the exception itself is still there . > INFO : processing ... > ERROR : Decode error > jadx.core.utils.exceptions.JadxException : Error decode : assets/logback.xml > at jadx.api.ResourcesLoader.decodeStream ( ResourcesLoader.java:65 ) ~ [ jadx-core-0.6.1-dev-build211.jar : na ] > at jadx.api.ResourcesLoader.loadContent ( ResourcesLoader.java:82 ) ~ [ jadx-core-0.6.1-dev-build211.jar : na ] > at jadx.api.ResourceFile.getContent ( ResourceFile.java:52 ) [ jadx-core-0.6.1-dev-build211.jar : na ] > at jadx.api.JadxDecompiler $ 2.run ( JadxDecompiler.java:179 ) [ jadx-core-0.6.1-dev-build211.jar : na ] > at java.util.concurrent.ThreadPoolExecutor.runWorker ( Unknown Source ) [ na:1.7.0_55 ] > at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( Unknown Source ) [ na:1.7.0_55 ] > at java.lang.Thread.run ( Unknown Source ) [ na:1.7.0_55 ] > Caused by : java.io.IOException : Decode error : Version is not 3 , position :
Initialization of static variable is pulled out of its try block __EoT__ ( Commit : bc73010d4eaa484dfc8081bf2cbd1215871b70ea ) The code `` ` java class A { private static final URL a ; static { try { a = new URL ( `` http : //www.example.com/ '' ) ; } catch ( final MalformedURLException e ) { throw new RuntimeException ( e ) ; } } } `` ` is decompiled as : `` ` java class A { private static final URL a = new URL ( `` http : //www.example.com/ '' ) ; static { try { } catch ( Throwable e ) { throw new RuntimeException ( e ) ; } } } `` ` i.e . the initialization of the static variable is pulled out of the try block , and the original try block becomes surrounding nothing .
Nested anonymous classes variable assignment fails code generation __EoT__ Consider the following example code : `` ` java // a basic abstract class for nesting example public static abstract class BasicAbstract { public abstract void doSomething ( ) ; } public static class TestCls { private BasicAbstract inner ; public void simpleAnonymous ( ) { inner = new BasicAbstract ( ) { @ Override public void doSomething ( ) { inner = null ; } } ; } } `` ` Code gets generated correctly here . Now let 's add another level of anonymous class : `` ` java // a basic abstract class for nesting example public static abstract class BasicAbstract { public abstract void doSomething ( ) ; } public static class TestCls { private BasicAbstract outer , inner ; public void nestedAnonymous ( ) { outer = new BasicAbstract ( ) { @ Override public void doSomething ( ) { inner = new BasicAbstract ( ) { @ Override public void doSomething ( ) { inner = null ; } } ; } } ; } } `` ` Code generation fails . You can see that ` inner = null ` does n't get generated
constructor usage decompiles wrong __EoT__ The contructor of internal class ViewHolder in method doSomething ( ) contains a additional comma after decompilation **new ViewHolder ( , root , name ) ; ** Thank you . `` ` java public class Main { void doSomething ( String root , String name ) { ViewHolder viewHolder = new ViewHolder ( root , name ) ; } private final class ViewHolder { private int mElements = 0 ; private final String mRoot ; private String mName ; private ViewHolder ( String root , String name ) { this.mRoot = root ; this.mName = name ; } } } `` `
inconsistent code __EoT__ The following function cacheItems1 ( ) does not decompile , however cacheItems2 ( ) does . Thank you ! `` ` private static class MyItem { int idx ; String name ; } private final Map < Integer , MyItem > mCache = new HashMap < > ( ) ; void cacheItems1 ( MyItem [ ] items ) { synchronized ( mCache ) { for ( int i = 0 ; i < items.length ; ++i ) { MyItem existingItem = mCache.get ( items [ i ] .idx ) ; if ( null == existingItem ) { mCache.put ( items [ i ] .idx , items [ i ] ) ; } else { existingItem.name = items [ i ] .name ; } } } } void cacheItems2 ( MyItem [ ] items ) { synchronized ( mCache ) { for ( MyItem item : items ) { MyItem existingItem = mCache.get ( item.idx ) ; if ( null == existingItem ) { mCache.put ( item.idx , item ) ; } else { existingItem.name = item.name ; } } } } `` `
Enum class processing for obfuscated code __EoT__ [ This ] ( https : //github.com/skylot/jadx/commit/883429fa47969b7af92fab33529ee242ed0f447d ) fix was greate . But there is new issue , that in the generated code used field with not aliased name . For example : `` ` enum Example { ITEM1 , ITEM2 } `` ` and somewhere in the code we can found `` ` Example.b `` ` I made the fix , that processes the **SPUT** instruction and creates link with restored field name and the `` real '' enum class field ( also I added _FieldInfo_ caching ) . But there I found issue in the architecture that code generator worked before all resolve is done . So we get some code before restore the field name and some after . I can make a patch that provides a workaround ( 2-pass like deobfuscator ) to resolve this issue . In the future , I think there is need to change the architecture to make some steps before generate the code . But this is not my privilege , I think so . What do you think ?
Rename class files __EoT__ Need this feature , esp when dealing with classes without original names . IMHO , this feature should prioitize targeting classes first as it 's impossible to save case insensitive filenames on certain OSs
try within finally - inconsistent code __EoT__ The following statement generates a inconsistent code UnsupportedOperationException . `` ` public void tryWithinFinally ( ) throws IOException { File file = File.createTempFile ( `` test '' , `` txt '' ) ; OutputStream outputStream = new FileOutputStream ( file ) ; try { outputStream.write ( 1 ) ; } finally { try { outputStream.close ( ) ; file.delete ( ) ; } catch ( IOException ignored ) { } } } `` `
synchronized statement - inconsistent code __EoT__ the following snipped generates inconstent code warning : `` ` static class MyException extends Exception { MyException ( ) { } MyException ( String msg , Throwable rootCause ) { super ( msg ) ; } } static class MyThread extends Thread { MyException e = null ; MyThread ( ) { super ( ) ; } public void run ( ) { synchronized ( this ) { try { throw new MyException ( ) ; } catch ( MyException e ) { this.e = e ; } catch ( Exception x ) { this.e = new MyException ( `` MyThread '' , x ) ; } } } } `` `
JadxOverflowException : Regions count limit reached __EoT__ The following sample failes to decompile , it generates a JadxOverflowException . `` ` public static int countBits ( int k ) { int accum = 0 ; while ( true ) { switch ( k ) { case 0 : return accum ; default : accum++ ; k > > = 1 ; } } } `` `
NullPointerException in FilledNewArrayNode.getArrayType __EoT__ The array-type in the following code-sample is null , causing a CodegenException . `` ` Object newObjArray ( byte [ ] bArr ) { return new Object [ ] { bArr } ; } `` `
unresolved android attributes __EoT__ The symbolic names of the attributes ( R.attr.colorControlActivated and R.attr.colorAccent ) are not resolved ( showing 'only ' the id ) , although this beneficial feature is working elsewhere . `` ` public void androidAttrArray ( ) { TypedArray obtainStyledAttributes = getActivity ( ) .obtainStyledAttributes ( new int [ ] { R.attr.colorControlActivated , R.attr.colorAccent } ) ; if ( obtainStyledAttributes ! = null ) { obtainStyledAttributes.getColor ( 0 , 0 ) ; obtainStyledAttributes.getColor ( 1 , 0 ) ; obtainStyledAttributes.recycle ( ) ; } } `` `
switch lost some break __EoT__ package tutorial ; public class testSwitch { boolean isLongtouchable ; boolean isMultiTouchZoom ; float multiTouchZoomOldDist ; boolean isCanZoomIn ; boolean isCanZoomOut ; boolean isScrolling ; `` ` void onTouchEvent ( int action ) { switch ( action & 255 ) { case 0 : this.isLongtouchable = true ; break ; case 1 : case 6 : if ( this.isMultiTouchZoom ) { this.isMultiTouchZoom = false ; } break ; case 2 : if ( this.isMultiTouchZoom ) { float dist = multiTouchZoomOldDist ; if ( Math.abs ( dist - this.multiTouchZoomOldDist ) > 10.0f ) { float scale = dist / this.multiTouchZoomOldDist ; if ( ( scale > 1.0f & & this.isCanZoomIn ) || ( scale < 1.0f & & this.isCanZoomOut ) ) { this.multiTouchZoomOldDist = dist ; } } return ; } break ; case 5 : this.multiTouchZoomOldDist = action ; if ( this.multiTouchZoomOldDist > 10.0f ) { this.isMultiTouchZoom = true ; this.isLongtouchable = false ; return ; } break ; } if ( this.isScrolling & & action == 1 ) { this.isScrolling = false ; } } `` ` }
broken native type support ( boolean , int ) __EoT__ version 0.54 is a regression to 0.53 in that matter . e.g . : with 0.54 : `` ` booleanValue = ( z & & threadStorage.getReducer ( str ) .andReduction.booleanValue ( ) ) ? 1 : null ; `` ` while with 0.53 : `` ` booleanValue = ( z & & threadStorage.getReducer ( str ) .andReduction.booleanValue ( ) ) ? 1 : 0 ; `` `
Wrong with complex if/else condition and for loop ( while loop ) __EoT__ I found this bug long ago but today i find a simple test case to report . This occur with latest code base . `` ` public class Main { static boolean [ ] [ ] occupied = new boolean [ 30 ] [ 70 ] ; static boolean placingStone = true ; public static void main ( String [ ] args ) { if ( findPoint ( 14 , 20 ) ) { System.out.printf ( `` Found ! ! `` ) ; } else { System.out.printf ( `` Not Found ! ! `` ) ; } } private static boolean findPoint ( int xx , int yy ) { int [ ] extraArray = new int [ ] { 10 , 45 , 300 , 600 , 800 } ; if ( extraArray ! = null & & placingStone ) { for ( int i = 0 ; i < extraArray.length ; i += 2 ) { int tX ; int tY ; if ( yy % 2 == 0 ) { if ( extraArray [ i + 1 ] % 2 == 0 ) {
Issues in decompilation complicate if __EoT__ Has been long time since i reported same bug , but it still exist ( latest unstable version ) , below test code will wrong when decompile : `` ` static int executedCount = 0 ; static boolean finished =false ; static int repeatCount=2 ; public static void main ( String [ ] args ) throws Exception { float delta = 5 ; Object object = null ; check ( delta , object ) ; } static boolean check ( float delta , Object object ) { if ( executedCount ! = repeatCount ) { if ( isRun ( delta , object ) ) { if ( finished ) { return true ; } if ( repeatCount == -1 ) { ++executedCount ; action ( ) ; return false ; } ++executedCount ; if ( executedCount > = repeatCount ) { return true ; } action ( ) ; } } return false ; } public static void action ( ) { } public static boolean isRun ( float delta , Object object ) { return true ; } ; `` `
Nested 'if ' __EoT__ I think you can find a solution faster than me . Below is a test that does not decompile . `` ` package jadx.samples ; public class TestConditions2 extends AbstractTest { private boolean a0 = false ; private int a1 = 1 ; private int a2 = 2 ; private int a3 = 1 ; private int a4 = 2 ; public void test1a ( ) { } public void test1b ( ) { } public void test1c ( ) { } public boolean test1 ( ) { if ( a0 ) { if ( ( a1 == 0 ) || ( a2 == 0 ) ) { return false ; } } else { if ( ( a3 == 0 ) || ( a4 == 0 ) ) { return false ; } } test1a ( ) ; test1b ( ) ; test1c ( ) ; return true ; } @ Override public boolean testRun ( ) throws Exception { assertTrue ( test1 ( ) ) ; return true ; } public static void main ( String [ ] args ) throws Exception { new TestConditions2 ( ) .testRun ( ) ; } } ``
A trouble in case of the same names of a constructor and a method in a class __EoT__ Thank you for a brilliant app ! But using it I 've found some error . If a class contents a constructor with the same name as a one of the class 's methods , it causes an error after decompilation a .dex file due to exchanging of the method 's name from `` Name '' to `` Name_ '' , meanwhile the method is called from another class using it 's actual name `` Name '' . Example . The class Bug has a constructor named `` Bug '' , of cource , and a method named `` Bug '' too . ! [ origin_source ] ( https : //cloud.githubusercontent.com/assets/8015047/3948980/0ad5e1f0-26af-11e4-9dd8-1b0172bfb1a4.png ) After decompilation it contents a method named `` Bug_ '' instead of `` Bug '' . ! [ bug_source_after_decompilation ] ( https : //cloud.githubusercontent.com/assets/8015047/3948979/0ad2dcee-26af-11e4-9108-d81f8c0b2f65.png ) But in the main method it 's being called as `` Bug '' . ! [ main_source_after_decompilation ] ( https : //cloud.githubusercontent.com/assets/8015047/3948981/0add616e-26af-11e4-93af-10b90a9b3fdb.png )
Missing blocks __EoT__ First of all thanks for your amazing work ! This is by far the best dex decompiler available . I 'm using the latest 0.5.2 version built from sources and encounter many 'Missing block ' and therefore 'Inconsistent code ' errors while decompiling Android frameworks , both AOSP compiled and LG custom ones . A few examples all from AOSP code : 1 . ) The error : `` ` DEBUG - Missing block : B:25 : ? in android.os.Parcel.readParcelable ( java.lang.ClassLoader ) : T ERROR - Inconsistent code in method : android.os.Parcel.readParcelable ( java.lang.ClassLoader ) : T `` ` Original source : https : //github.com/android/platform_frameworks_base/blob/android-4.1.2_r2.1/core/java/android/os/Parcel.java # L2048 Decompiled source : `` ` /* JADX WARNING : inconsistent code . */ /* Code decompiled incorrectly , please refer to instructions dump . */ public final < T extends android.os.Parcelable > T readParcelable ( java.lang.ClassLoader r11_loader ) { throw new UnsupportedOperationException ( `` Method not decompiled : android.os.Parcel.readParcelable ( java.lang.ClassLoader ) : T '' ) ; /* r10 = this ; r6 = 0 ; r5 = r10.readString ( ) ; if ( r5 ! = 0 ) goto L_0x0008 ; L_0x0007 : return r6 ; L_0x0008 :
Found issues in decompilation __EoT__ Thanks for your brilliant work . I found two cases which provides wrong results . Hope you could fix it . //Src 1 `` ` public class JavaTest { public static void main ( String [ ] args ) throws Exception { boolean a = true ; int b = 3 ; if ( a || b > 2 ) b++ ; if ( ! a || ( b > = 0 & & b < =11 ) ) System.out.println ( `` OK '' ) ; else System.out.println ( `` Not Reach '' ) ; System.out.println ( `` End '' ) ; } } `` ` //Src 2 `` ` public class JavaTest { public static void main ( String [ ] args ) throws Exception { int a = 3 * 5 ; String s = null ; switch ( a % 4 ) { case 1 : s = `` 1 '' ; break ; case 2 : s = `` 2 '' ; break ; case 3 : s = `` 3 '' ; break ; case 4 : s = `` 4 '' ; break ; default : System.out.println ( ``
Found issues in decompilation __EoT__ Thanks for your brilliant work . I found two cases which provides wrong results . Hope you could fix it . //Src 1 `` ` public class JavaTest { public static void main ( String [ ] args ) throws Exception { boolean a = true ; int b = 3 ; if ( a || b > 2 ) b++ ; if ( ! a || ( b > = 0 & & b < =11 ) ) System.out.println ( `` OK '' ) ; else System.out.println ( `` Not Reach '' ) ; System.out.println ( `` End '' ) ; } } `` ` //Src 2 `` ` public class JavaTest { public static void main ( String [ ] args ) throws Exception { int a = 3 * 5 ; String s = null ; switch ( a % 4 ) { case 1 : s = `` 1 '' ; break ; case 2 : s = `` 2 '' ; break ; case 3 : s = `` 3 '' ; break ; case 4 : s = `` 4 '' ; break ; default : System.out.println ( ``
Enhancement : THIS naming removal step __EoT__ Could you please add a pass to optimize class calls from 'classname ' to 'this ' instead class Something { int a ; private void example ( ) { Something something = this ; something.whatever ( ) ; something.a = 123 ; } } Would be nicer if it showed : this.whatever ( ) ; this.a = 123 ; etc
Found issues in decompilation __EoT__ Thanks for your brilliant work . I found two cases which provides wrong results . Hope you could fix it . //Src 1 `` ` public class JavaTest { public static void main ( String [ ] args ) throws Exception { boolean a = true ; int b = 3 ; if ( a || b > 2 ) b++ ; if ( ! a || ( b > = 0 & & b < =11 ) ) System.out.println ( `` OK '' ) ; else System.out.println ( `` Not Reach '' ) ; System.out.println ( `` End '' ) ; } } `` ` //Src 2 `` ` public class JavaTest { public static void main ( String [ ] args ) throws Exception { int a = 3 * 5 ; String s = null ; switch ( a % 4 ) { case 1 : s = `` 1 '' ; break ; case 2 : s = `` 2 '' ; break ; case 3 : s = `` 3 '' ; break ; case 4 : s = `` 4 '' ; break ; default : System.out.println ( ``
jadx-gui : Save all code is different __EoT__ The code created by the `` Save all '' function is different from the code displayed in jadx-gui : The method parameter names are not correctly named . Example : jadx-gui shows : public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { if ( fromUser ) { progress = ( progress / 1000 ) \* 1000 ; ... '' Save all '' creates : public void onProgressChanged ( SeekBar r1_SeekBar , int r2i , boolean r3z ) { if ( fromUser ) { int progress = ( progress / 1000 ) \* 1000 ;
Broken complex If statements __EoT__ Input : `` ` java int c ; String d ; public void testComplexIf ( String a , int b ) { if ( d == null || ( c == 0 & & b ! = -1 & & d.length ( ) == 0 ) ) { c = a.codePointAt ( c ) ; } else { if ( a.hashCode ( ) ! = 0xCDE ) { c = f.compareTo ( a ) ; } } } `` ` Output : `` ` java int c ; String d ; public void testComplexIf ( String a , int b ) { if ( d ! = null ) { if ( c ! = 0 || b == -1 || d.length ( ) ! = 0 ) { if ( a.hashCode ( ) ! = 3294 ) { c = f.compareTo ( a ) ; } // Fix option # 1 // return ; } } // Fix option # 2 // else c = a.codePointAt ( c ) ; } `` `
ArrayIndexOutOfBoundsException 版本 2.9.28 __EoT__ java.lang.ArrayIndexOutOfBoundsException : length=24 ; index=-1 at java.util.ArrayList.get ( ArrayList.java:310 ) at com.chad.library.adapter.base.BaseQuickAdapter.getItem ( BaseQuickAdapter.java:611 ) at com.chad.library.adapter.base.BaseQuickAdapter.getExpandableItem ( BaseQuickAdapter.java:1816 ) at com.chad.library.adapter.base.BaseQuickAdapter.collapse ( BaseQuickAdapter.java:1761 ) at com.chad.library.adapter.base.BaseQuickAdapter.collapse ( BaseQuickAdapter.java:1796 ) at mst.com.baserecyclerviewadapterhelper.adapter.ExpandableAdapter $ 2.onClick ( ExpandableAdapter.java:82 ) at android.view.View.performClick ( View.java:5264 ) at android.view.View $ PerformClick.run ( View.java:21297 ) at android.os.Handler.handleCallback ( Handler.java:743 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:150 ) at android.app.ActivityThread.main ( ActivityThread.java:5621 )
setOnItemSwipeListener # onItemSwiped is called before the data is changed __EoT__ when using ` setOnItemSwipeListener # onItemSwiped ` as in sample application I noticed that ` onItemSwiped ` is called before the swiped item is deleted from the data list . looking at library code it turns out the that in ` BaseItemDraggableAdapteronItemSwiped # onItemSwiped ` is called before remove ` mData.remove ( pos ) ; ` which make the callback mostly useless if you want to make anything with the updated data . I 'm suggesting moving onItemSwiped at the end of the method . I have tried it and everything seems to be working fine . I can make a pull request for it if you want .
添加headerview后 使用ExpandableItem 在 item未满一屏幕情况下 adapter.expandAll 方法无效 子项无法展开 __EoT__ 添加headerview后 使用ExpandableItem 在 item未满一屏幕情况下 adapter.expandAll 方法无效 子项无法展开，去掉headerview后正常 在demo ExpandableUseActivity中添加headerview后： adapter.setHeaderView ( new ImageView ( this ) ) ; mRecyclerView.setAdapter ( adapter ) ; // important ! setLayoutManager should be called after setAdapter mRecyclerView.setLayoutManager ( new LinearLayoutManager ( this ) ) ; adapter.expandAll ( ) ; 报错： Caused by : java.lang.ArrayIndexOutOfBoundsException : length=12 ; index=-1 at java.util.ArrayList.get ( ArrayList.java:310 ) at com.chad.library.adapter.base.BaseQuickAdapter.getItem ( BaseQuickAdapter.java:526 ) at com.chad.library.adapter.base.BaseQuickAdapter.getExpandableItem ( BaseQuickAdapter.java:1701 ) at com.chad.library.adapter.base.BaseQuickAdapter.expandAll ( BaseQuickAdapter.java:1564 ) at com.chad.library.adapter.base.BaseQuickAdapter.expandAll ( BaseQuickAdapter.java:1605 ) at com.chad.baserecyclerviewadapterhelper.ExpandableUseActivity.onCreate ( ExpandableUseActivity.java:47 )
BaseMultiItemQuickAdapter使用问题 __EoT__ 我使用BaseMultiItemQuickAdapter，在给二级列表添加数据后，使用adnapter的replaceData ( ) 方法后整个列表的数据就没有了。小弟测试代码如下： Person person = ( Person ) mListData.get ( 0 ) ; person.getSubItems ( ) .add ( new Like ( `` 搞笑 '' ) ) ; mAdapter.replaceData ( mListData ) ; 望大神指点！
createGenericKInstance 时 z.isMemberClass ( ) 空指针 __EoT__ https : //github.com/pdog18/GradleForAndroidPdog/tree/master/app 我的代码在这， java.lang.NullPointerException : Attempt to invoke virtual method 'boolean java.lang.Class.isMemberClass ( ) ' on a null object reference at com.chad.library.adapter.base.BaseQuickAdapter.createGenericKInstance ( BaseQuickAdapter.java:1020 ) at com.chad.library.adapter.base.BaseQuickAdapter.createBaseViewHolder ( BaseQuickAdapter.java:1004 ) at com.chad.library.adapter.base.BaseQuickAdapter.createBaseViewHolder ( BaseQuickAdapter.java:986 ) at com.chad.library.adapter.base.BaseQuickAdapter.onCreateDefViewHolder ( BaseQuickAdapter.java:982 ) at com.chad.library.adapter.base.BaseQuickAdapter.onCreateViewHolder ( BaseQuickAdapter.java:759 ) at com.chad.library.adapter.base.BaseQuickAdapter.onCreateViewHolder ( BaseQuickAdapter.java:68 )
滑动删除时判空一下数组的长度 __EoT__ 版本2.9.23 在BaseItemDraggableAdapter.java中的246行中如下： `` ` public void onItemSwiped ( RecyclerView.ViewHolder viewHolder ) { if ( mOnItemSwipeListener ! = null & & itemSwipeEnabled ) { mOnItemSwipeListener.onItemSwiped ( viewHolder , getViewHolderPosition ( viewHolder ) ) ; } int pos = getViewHolderPosition ( viewHolder ) ; mData.remove ( pos ) ; notifyItemRemoved ( viewHolder.getAdapterPosition ( ) ) ; } `` ` 判定一下mData的长度再进行remove，做一个项目时报错了 ，报错如下 ` java.lang.ArrayIndexOutOfBoundsException : length=0 ; index=-1 at java.util.ArrayList.remove ( ArrayList.java:405 ) at com.chad.library.adapter.base.BaseItemDraggableAdapter.onItemSwiped ( BaseItemDraggableAdapter.java:246 `
如果item中有多个view 只给某一个view添加长按监听，然后长按其他View 就报错了 __EoT__ java.lang.NullPointerException : Attempt to invoke virtual method 'void android.view.View.setPressed ( boolean ) ' on a null object reference at com.chad.library.adapter.base.listener.SimpleClickListener $ ItemTouchHelperGestureListener.onLongPress ( SimpleClickListener.java:215 ) at android.view.GestureDetector.dispatchLongPress ( GestureDetector.java:770 ) at android.view.GestureDetector.-wrap0 ( GestureDetector.java ) at android.view.GestureDetector $ GestureHandler.handleMessage ( GestureDetector.java:293 ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:160 ) at android.app.ActivityThread.main ( ActivityThread.java:6200 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:874 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:764 )
使用自定义viewholder继承BaseViewHolder报错。 __EoT__ 1、brvah自带demo代码 2、修改AnimationAdapter，使用butterknife生成viewholder ` AnimationAdapter extends BaseQuickAdapter < Status , AnimationAdapter.ViewHolder > ` ` helper.img.setImageResource ( R.mipmap.animation_img1 ) ; ` ` static class ViewHolder extends BaseViewHolder { @ BindView ( R.id.img ) ImageView img ; @ BindView ( R.id.tweetName ) TextView tweetName ; @ BindView ( R.id.tweetText ) TextView tweetText ; @ BindView ( R.id.tweetDate ) TextView tweetDate ; @ BindView ( R.id.card_view ) CardView cardView ; ViewHolder ( View view ) { super ( view ) ; ButterKnife.bind ( this , view ) ; } } ` 3、运行报错 ` java.lang.ClassCastException : com.chad.library.adapter.base.BaseViewHolder can not be cast to com.chad.baserecyclerviewadapterhelper.adapter.AnimationAdapter $ ViewHolder at com.chad.baserecyclerviewadapterhelper.adapter.AnimationAdapter.convert ( AnimationAdapter.java:31 ) `
BaseMultiItemQuickAdapter 使用中遇到的问题 __EoT__ 比如在app 1.0版本时 某个列表有三种布局类型 （比如type 1,2，3）， 这时候肯定在adapter 构造方法中调用三次这个addItemType ( ) ; 那下个版本1.1 列表的布局类型增加后 （比如type增加了4,5），服务端相应也会返回（4和 5的类型）， 1.0版本就会有问题 。 ` // 这个方法会报错， layouts.get 结果是 null private int getLayoutId ( int viewType ) { return layouts.get ( viewType ) ； } protected void addItemType ( int type , @ LayoutRes int layoutResId ) { if ( layouts == null ) { layouts = new SparseArray < > ( ) ; } layouts.put ( type , layoutResId ) ; } ` 希望以后的版本能兼容这种情况
请暴露空参的构造方法 __EoT__ 就是我不要自己传个list，直接用框架里面的list，现在是暴露的构造方法必须要传，希望保留不要传list的构造方法
2.8.8 添加对item 点击，长按事件的支持方式有点太刻苦了。如果使用延迟的方式会好一些。 __EoT__ `` ` java //代码片段来之v2.8.8 ... default : baseViewHolder = onCreateDefViewHolder ( parent , viewType ) ; bindViewClickListener ( baseViewHolder ) ; `` ` 代码在创建ViewHolder 后立刻设计了监听器。（自己添加item 事件的做法，创建ViewHolder 的时候直接添加事件）。那么就会把自己设计的监听器覆盖掉了。（强硬点说已经不兼容以前版本了。） 建议： `` ` java //等用户需要item 点击事件才去绑定 public void setOnItemClickListener ( @ Nullable OnItemClickListener listener ) { bindViewClickListener ( ) ; mOnItemClickListener = listener ; } `` `
关于触发loadmore功能的小bug __EoT__ ! [ autoLoadMore方法 ] ( https : //cloud.githubusercontent.com/assets/6622321/25788777/25da93c6-33de-11e7-8de6-84c86fe007ad.png ) 暂且假设mAutoLoadMoreSize = 1 ( 默认值，且觉得这个变量表达意思不够清晰 ) ，当getItemCount ( ) 中如果包含了getFooterLayoutCount ( ) ==1时，这时触发加载更多的position 代表的就是FooterView了，是不是错了？
gridlayoutmanager布局分组问题 __EoT__ 在使用gridlayoutmanager 布局的时候 分组的item 出现错乱 , 原因应该是没有设置setSpanSizeLookup
Change BaseQuickAdapter click listeners to generic type and fix some typo __EoT__
未判NULL __EoT__ release:2.9.12 -- > 类：BaseQuickAdapter -- > 1414 行 没有对获取到viewHolder做非空判断，一般当item不可见时获取到的为null值，造成空指针异常。
2.9.10出现的问题 __EoT__ loadmore 中 上滑的时候 那个加载中的view不会显示··· 我不知道是不是个别机器的问题哈···
使用setNewData 报错java.lang.IndexOutOfBoundsException __EoT__ 我使用下拉刷新的时候 是 setNewData方法 第一次刷新OK 第二次 就报错了 版本是 2.9.9 感觉之前的版本不会报错 ` java.lang.IndexOutOfBoundsException : Inconsistency detected . Invalid item position 16 ( offset:17 ) .state:31 at android.support.v7.widget.RecyclerView $ Recycler.tryGetViewHolderForPositionByDeadline ( RecyclerView.java:5504 ) at android.support.v7.widget.RecyclerView $ Recycler.getViewForPosition ( RecyclerView.java:5440 ) at android.support.v7.widget.RecyclerView $ Recycler.getViewForPosition ( RecyclerView.java:5436 ) at android.support.v7.widget.LinearLayoutManager $ LayoutState.next ( LinearLayoutManager.java:2224 ) at android.support.v7.widget.LinearLayoutManager.layoutChunk ( LinearLayoutManager.java:1551 ) at android.support.v7.widget.LinearLayoutManager.fill ( LinearLayoutManager.java:1511 ) at android.support.v7.widget.LinearLayoutManager.onLayoutChildren ( LinearLayoutManager.java:595 ) at android.support.v7.widget.RecyclerView.dispatchLayoutStep1 ( RecyclerView.java:3534 ) at android.support.v7.widget.RecyclerView.dispatchLayout ( RecyclerView.java:3310 ) at android.support.v7.widget.RecyclerView.onLayout ( RecyclerView.java:3844 ) `
上拉加载onLoadMoreRequested无限执行 __EoT__ 在加载完数据后设置了loadMoreComplete ( ) 还是要无限执行onLoadMoreRequested 按理说onLoadMoreRequested这玩意儿不是要拉到最下面一个Item的时候才会执行吗 怎么会自己就执行了？
从2.9.6升级到2.9.8后，有的列表出不来了。 __EoT__ 如题 if ( isLoadMore ) { myAdapter.addData ( commodities ) ; } else { myAdapter.setNewData ( commodities ) ; } MyLog.e ( `` 测试商品列表2 '' , myAdapter.getData ( ) .toString ( ) ) ; 打印有数据，但是列表没显示出来，2.9.6正常，切换到2.9.8后有问题 而且setNewData ( null ) , 或者setNewData ( new ArrayList < String > ) 会挂掉。报空指针或者越界 java.lang.IndexOutOfBoundsException : Inconsistency detected . Invalid view holder adapter positionViewHolder { 8f0ad6 position=0 id=-1 , oldPos=0 , pLpos : -1 scrap [ attachedScrap ] tmpDetached no parent } 以上同样是2.9.6正常，切换到2.9.8后有问题
header是webView，刷新数据的时候会把webview也重新加载一次 __EoT__ 如果header是webView，刷新数据的时候会把webview也重新加载一次，会闪屏
disableLoadMoreIfNotFullPage 无效 __EoT__ disableLoadMoreIfNotFullPage 我的理解是 是不是 列表项还没有沾满显示区域 ( 可能数据很少的情况下 ) 是不会出发加载更多··· 但是感觉每次进来的时候 onLoadMoreRequested走了回调实际上数据只有1 2条如下图 ! [ image ] ( https : //cloud.githubusercontent.com/assets/3139596/24552768/55ddf7ee-165a-11e7-90a8-8e39e08ef809.png ) 主要代码如下 ! [ image ] ( https : //cloud.githubusercontent.com/assets/3139596/24552773/5c856d52-165a-11e7-9193-77634869dbcb.png )
关于BaseSectionQuickAdapter的convertHead接口回调建议 __EoT__ 我在导入我们这个库进行多一层封装的时候发现，这个类疑似还残留以前旧版本，写死入参数定义。 BaseSectionQuickAdapter的第57行代码 参数 BaseViewHolder helper： ` protected abstract void convertHead ( BaseViewHolder helper , T item ) ; ` 后面我封装的时候只能进行代码拷贝封装了，没办法直接继承。建议修改如下 ` protected abstract void convertHead ( K helper , T item ) ; `
disableLoadMoreIfNotFullPage 无效 __EoT__ disableLoadMoreIfNotFullPage 我的理解是 是不是 列表项还没有沾满显示区域 ( 可能数据很少的情况下 ) 是不会出发加载更多··· 但是感觉每次进来的时候 onLoadMoreRequested走了回调实际上数据只有1 2条如下图 ! [ image ] ( https : //cloud.githubusercontent.com/assets/3139596/24552768/55ddf7ee-165a-11e7-90a8-8e39e08ef809.png ) 主要代码如下 ! [ image ] ( https : //cloud.githubusercontent.com/assets/3139596/24552773/5c856d52-165a-11e7-9193-77634869dbcb.png )
disableLoadMoreIfNotFullPage 无效 __EoT__ disableLoadMoreIfNotFullPage 我的理解是 是不是 列表项还没有沾满显示区域 ( 可能数据很少的情况下 ) 是不会出发加载更多··· 但是感觉每次进来的时候 onLoadMoreRequested走了回调实际上数据只有1 2条如下图 ! [ image ] ( https : //cloud.githubusercontent.com/assets/3139596/24552768/55ddf7ee-165a-11e7-90a8-8e39e08ef809.png ) 主要代码如下 ! [ image ] ( https : //cloud.githubusercontent.com/assets/3139596/24552773/5c856d52-165a-11e7-9193-77634869dbcb.png )
关于BaseSectionQuickAdapter的convertHead接口回调建议 __EoT__ 我在导入我们这个库进行多一层封装的时候发现，这个类疑似还残留以前旧版本，写死入参数定义。 BaseSectionQuickAdapter的第57行代码 参数 BaseViewHolder helper： ` protected abstract void convertHead ( BaseViewHolder helper , T item ) ; ` 后面我封装的时候只能进行代码拷贝封装了，没办法直接继承。建议修改如下 ` protected abstract void convertHead ( K helper , T item ) ; `
在Demo PullToRefreshUseActivity的页面中，item使用remove或notifyItemRemoved删除最后一个数据会报错 __EoT__ 你好，在Demo PullToRefreshUseActivity的页面中，item使用remove或notifyItemRemoved删除最后一个数据会报错，如果取消上拉加载功能则不会出现此问题，希望作者尽快修复~ 原代码： private void initAdapter ( ) { mQuickAdapter = new QuickAdapter ( R.layout.tweet , sampleData ) ; mQuickAdapter.setOnLoadMoreListener ( this ) ; mQuickAdapter.openLoadAnimation ( BaseQuickAdapter.SLIDEIN_LEFT ) ; mRecyclerView.setAdapter ( mQuickAdapter ) ; mCurrentCounter = mQuickAdapter.getData ( ) .size ( ) ; mRecyclerView.addOnItemTouchListener ( new OnItemClickListener ( ) { @ Override public void onSimpleItemClick ( final BaseQuickAdapter adapter , final View view , final int position ) { Toast.makeText ( PullToRefreshUseActivity.this , Integer.toString ( position ) , Toast.LENGTH_LONG ) .show ( ) ; mQuickAdapter.remove ( position ) ; } } ) ; } 报错原因：java.lang.IndexOutOfBoundsException : Inconsistency detected . Invalid view holder adapter positionViewHolder { 2bd3bdd position=0 id=-1 , oldPos=1 , pLpos:1 scrap [ attachedScrap ] tmpDetached no parent }
setEmptyView / addFooterView在fragmentLayout中使用的bug __EoT__ if ( adapter == null ) { adapter = new Adapter ( ) ; adapter.setEmptyView ( ) ; adapter.addFooterView ( ) ; } else adapter.setNewData ( ) ; 以上代码是我在项目中使用的，当当前页面经过fragmentLayout.replace之后，执行的是setNewData，但页面不会再呈现任何画面了。
开启动画后，进入Activity后白屏一秒的问题？ __EoT__ 我用了大神写的库，用到了我的程序中，设置了动画之后呢，进入Activity后 屏幕白白的一秒后，数据才能出来，设置假数据也是如此， 把动画去掉后就快多了 直接显示数据，这个在低配手机上很明显，高配手机不怎么明显。麻烦问下，这个动画问题可否优化一下？？？
关于ExpandableListView问题 __EoT__ 当你展开第一级伸展栏，然后关闭同时快速点击第二级伸展栏会奔溃。 望修复。
在Demo PullToRefreshUseActivity的页面中，item使用remove或notifyItemRemoved删除最后一个数据会报错 __EoT__ 你好，在Demo PullToRefreshUseActivity的页面中，item使用remove或notifyItemRemoved删除最后一个数据会报错，如果取消上拉加载功能则不会出现此问题，希望作者尽快修复~ 原代码： private void initAdapter ( ) { mQuickAdapter = new QuickAdapter ( R.layout.tweet , sampleData ) ; mQuickAdapter.setOnLoadMoreListener ( this ) ; mQuickAdapter.openLoadAnimation ( BaseQuickAdapter.SLIDEIN_LEFT ) ; mRecyclerView.setAdapter ( mQuickAdapter ) ; mCurrentCounter = mQuickAdapter.getData ( ) .size ( ) ; mRecyclerView.addOnItemTouchListener ( new OnItemClickListener ( ) { @ Override public void onSimpleItemClick ( final BaseQuickAdapter adapter , final View view , final int position ) { Toast.makeText ( PullToRefreshUseActivity.this , Integer.toString ( position ) , Toast.LENGTH_LONG ) .show ( ) ; mQuickAdapter.remove ( position ) ; } } ) ; } 报错原因：java.lang.IndexOutOfBoundsException : Inconsistency detected . Invalid view holder adapter positionViewHolder { 2bd3bdd position=0 id=-1 , oldPos=1 , pLpos:1 scrap [ attachedScrap ] tmpDetached no parent }
在OnResume中再次初始化头部的时候会出现下面错误？？？？？？版本：2.6.6 __EoT__ java.lang.IllegalArgumentException : Called attach on a child which is not detached : ViewHolder { 2fde25c7 position=0 id=-1 , oldPos=-1 , pLpos : -1 } at android.support.v7.widget.RecyclerView $ 4.attachViewToParent ( RecyclerView.java:581 ) at android.support.v7.widget.ChildHelper.attachViewToParent ( ChildHelper.java:212 ) at android.support.v7.widget.RecyclerView.addAnimatingView ( RecyclerView.java:1003 ) at android.support.v7.widget.RecyclerView.animateDisappearance ( RecyclerView.java:2911 ) at android.support.v7.widget.RecyclerView.dispatchLayout ( RecyclerView.java:2711 ) at android.support.v7.widget.RecyclerView.onLayout ( RecyclerView.java:2971 ) at android.view.View.layout ( View.java:16112 ) at android.view.ViewGroup.layout ( ViewGroup.java:5185 ) at android.support.v4.widget.SwipeRefreshLayout.onLayout ( SwipeRefreshLayout.java:562 ) at android.view.View.layout ( View.java:16112 ) at android.view.ViewGroup.layout ( ViewGroup.java:5185 ) at android.widget.FrameLayout.layoutChildren ( FrameLayout.java:639 ) at android.widget.FrameLayout.onLayout ( FrameLayout.java:574 ) at android.view.View.layout ( View.java:16112 ) at android.view.ViewGroup.layout ( ViewGroup.java:5185 ) at android.widget.LinearLayout.setChildFrame ( LinearLayout.java:1959 ) at android.widget.LinearLayout.layoutVertical ( LinearLayout.java:1813 ) at android.widget.LinearLayout.onLayout ( LinearLayout.java:1722 ) at android.view.View.layout ( View.java:16112 ) at android.view.ViewGroup.layout ( ViewGroup.java:5185 ) at android.widget.LinearLayout.setChildFrame ( LinearLayout.java:1959 ) at android.widget.LinearLayout.layoutVertical ( LinearLayout.java:1813 ) at android.widget.LinearLayout.onLayout ( LinearLayout.java:1722 ) at android.view.View.layout ( View.java:16112 ) at android.view.ViewGroup.layout ( ViewGroup.java:5185 ) at android.widget.RelativeLayout.onLayout ( RelativeLayout.java:1195 ) at android.view.View.layout ( View.java:16112 ) at android.view.ViewGroup.layout ( ViewGroup.java:5185 ) at android.widget.FrameLayout.layoutChildren ( FrameLayout.java:639 ) at android.widget.FrameLayout.onLayout ( FrameLayout.java:574 ) at android.view.View.layout ( View.java:16112 ) at android.view.ViewGroup.layout ( ViewGroup.java:5185 ) at android.widget.LinearLayout.setChildFrame ( LinearLayout.java:1959 ) at android.widget.LinearLayout.layoutVertical ( LinearLayout.java:1813 ) at android.widget.LinearLayout.onLayout
在Demo PullToRefreshUseActivity的页面中，item使用remove或notifyItemRemoved删除最后一个数据会报错 __EoT__ 你好，在Demo PullToRefreshUseActivity的页面中，item使用remove或notifyItemRemoved删除最后一个数据会报错，如果取消上拉加载功能则不会出现此问题，希望作者尽快修复~ 原代码： private void initAdapter ( ) { mQuickAdapter = new QuickAdapter ( R.layout.tweet , sampleData ) ; mQuickAdapter.setOnLoadMoreListener ( this ) ; mQuickAdapter.openLoadAnimation ( BaseQuickAdapter.SLIDEIN_LEFT ) ; mRecyclerView.setAdapter ( mQuickAdapter ) ; mCurrentCounter = mQuickAdapter.getData ( ) .size ( ) ; mRecyclerView.addOnItemTouchListener ( new OnItemClickListener ( ) { @ Override public void onSimpleItemClick ( final BaseQuickAdapter adapter , final View view , final int position ) { Toast.makeText ( PullToRefreshUseActivity.this , Integer.toString ( position ) , Toast.LENGTH_LONG ) .show ( ) ; mQuickAdapter.remove ( position ) ; } } ) ; } 报错原因：java.lang.IndexOutOfBoundsException : Inconsistency detected . Invalid view holder adapter positionViewHolder { 2bd3bdd position=0 id=-1 , oldPos=1 , pLpos:1 scrap [ attachedScrap ] tmpDetached no parent }
支持插入在之前布局的前面BaseQuickAdapter修改？ __EoT__ BaseQuickAdapter第336行加上等于 ! [ image ] ( https : //cloud.githubusercontent.com/assets/7498978/20965251/d2b3fa8e-bcaf-11e6-8f71-a4139d0bade1.png )
优化EmptyView后出现布局高度一直和父布局一致问题 __EoT__ 一些信息： 库版本：2.6.3 测试设备： MI 4 问题是这样的，今早我把库从2.6.0升级到2.6.3，出现了emptyView显示异常的问题，主要体现在高度一直和RecyclerView一样。 使用代码是这样的 `` ` mAdapter.setHeaderAndEmpty ( true ) ; mAdapter.setEmptyView ( LayoutInflater.from ( mContext ) .inflate ( R.layout.item_detail_no_comment , new LinearLayout ( mContext ) , true ) ) ; `` ` 布局文件 `` ` < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : orientation= '' vertical '' > < TextView android : layout_width= '' match_parent '' android : layout_height= '' 64dp '' android : layout_marginBottom= '' 30dp '' android : background= '' @ color/bg_white '' android : gravity= '' center '' android : text= '' 暂无评论内容 '' / > < /LinearLayout > `` ` 我看了一眼提交日志，发现是这里导致的： ! [ d8111fe3-672c-4455-ad7e-c1400186ba8e ] ( https : //cloud.githubusercontent.com/assets/10010149/20953577/c2d6a2e6-bc6f-11e6-9b8a-ee6b002002f6.png ) 我们每次传进去的emptyView都会在外层加一个FrameLayout 而且宽高和父布局（RecyclerView）是一致的，我不清楚是不是我使用的有问题，还是BRVAH故意这样做的，希望作者能解释下 ……
setEmptyView ( ) 与 addFooterView ( ) 初始化配置 __EoT__ ` setEmptyView ( ) ` 被调用后，在 ` adapter ` 初始化完成时（没有数据），会显示 ` EmptyView ` ，但此时正处于获取数据的状态， ` EmptyView ` 不应该被隐藏吗？为了在第一次获取数据的时候不显示 ` EmptyView ` 我只能在获得数据后做处理，逻辑如下： `` ` java protected < T > void setData ( List < T > datas , BaseQuickAdapter adapter ) { if ( mIsRefresh ) { adapter.setNewData ( datas ) ; if ( datas.size ( ) == 0 & & adapter.getEmptyView ( ) == null ) { adapter.setEmptyView ( mEmptyView ) ; } else if ( datas.size ( ) < ApiConstants.ParamValue.PAGE_SIZE ) { adapter.loadComplete ( ) ; adapter.addFooterView ( mNoMoreView ) ; } } else { if ( datas.size ( ) == 0 ) { adapter.loadComplete ( ) ; adapter.addFooterView ( mNoMoreView ) ; } else adapter.addData ( datas ) ; } } `` ` 这部分代码位于父类中，可以看到，逻辑比较繁琐，最理想的使用应该是在 ` Adapter ` 初始化时做配置，而不是在获得数据后写一堆的逻辑判断。 可能是我还没有理解这个库的使用方法，就我目前看来，只能使用如上的办法，希望能有更好的办法处理这方面的逻辑。 最后建议增加 ` setErrorView ( ) ` 。 thx
上拉 会出现崩溃：Added View has RecyclerView as parent but view is not a real child __EoT__ 出现的情况是，一进入页面，我就快速上拉，很快的那种，就一般会出现这种崩溃问题，感觉是数据添加到列表时候出现的问题。 ` java.lang.IllegalStateException : Added View has RecyclerView as parent but view is not a real child . Unfiltered index:0 at android.support.v7.widget.RecyclerView $ LayoutManager.addViewInt ( RecyclerView.java:7109 ) at android.support.v7.widget.RecyclerView $ LayoutManager.addView ( RecyclerView.java:7073 ) at android.support.v7.widget.RecyclerView $ LayoutManager.addView ( RecyclerView.java:7061 ) at android.support.v7.widget.LinearLayoutManager.layoutChunk ( LinearLayoutManager.java:1428 ) at android.support.v7.widget.LinearLayoutManager.fill ( LinearLayoutManager.java:1377 ) at android.support.v7.widget.LinearLayoutManager.scrollBy ( LinearLayoutManager.java:1193 ) at android.support.v7.widget.LinearLayoutManager.scrollVerticallyBy ( LinearLayoutManager.java:1043 ) at android.support.v7.widget.RecyclerView $ ViewFlinger.run ( RecyclerView.java:4413 ) at android.view.Choreographer $ CallbackRecord.run ( Choreographer.java:775 ) at android.view.Choreographer.doCallbacks ( Choreographer.java:588 ) at android.view.Choreographer.doFrame ( Choreographer.java:557 ) at android.view.Choreographer $ FrameDisplayEventReceiver.run ( Choreographer.java:761 ) at android.os.Handler.handleCallback ( Handler.java:739 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:135 ) at android.app.ActivityThread.main ( ActivityThread.java:5276 ) at java.lang.reflect.Method.invoke ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:372 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:911 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:706 ) ` 再次封装： ` public abstract class BaseRecyclerAdapter < T > extends BaseQuickAdapter < T > { `` ` public BaseRecyclerAdapter ( int layoutResId , List < T > data ) { super ( layoutResId , data ) ; setBaseView ( ) ; } private void setBaseView ( ) { //配置上拉加载更多时的过度页面
setNewData 引起的 NullPointerException __EoT__ BaseQuickAdapter 的构造方法中data传null，程序有非空判断，mData不会为空，但是初始化之后调用setNewData 是data传null，mData被赋值为空，getItemCount ( ) 被调用时程序崩溃，建议setNewData方法中加入非空判断
v2.1.1 版本 addData ( List < T > newData ) 分页加载时列表没有刷新 __EoT__ 第一页10条数据， 第二页只有一条数据， 在加载调用 addData 后， adapter 里的 mData 数据是 11 条， 页面还是停留在 footer loading ，没有刷新 UI，页面上的数据还是10条，滑动后才显示正确，这个地方应是 notifyItemRangeChanged ( ) 的原因。 最后直接使用notifyDataSetChanged就可以了， 楼主看看这个问题会不会复现， 我的 recyclerview版本是 23.4.0； `` ` java mQuickAdapter.getData ( ) .addAll ( datas ) ; mQuickAdapter.dataAdded ( ) ; `` `
设置isFirstOnly 加载更多后闪烁 __EoT__ 如果代码里面设置了isFirstOnly为false ，当加载更多的数据后，会造成整个item闪烁。
BaseMultiItemQuickAdapter类中的mData为List < Object > __EoT__ 描述下我的问题吧 . 在使用BaseMultiItemQuickAdapter的时候想得到mData里的某个元素 ` this.mData.get ( i ) ` 发现得到的是Object类型 . 发现bug出在 ! [ image ] ( https : //cloud.githubusercontent.com/assets/10737613/18075180/233dca56-6ea5-11e6-8eb7-c217760d8a1f.png ) 改成这样应该就可以了 ! [ image ] ( https : //cloud.githubusercontent.com/assets/10737613/18075201/455bec58-6ea5-11e6-9cd0-660f1b8b02c5.png )
2.0 emptyview 我设置的空布局 结果显示错误布局 来回切换emptyview 就混乱了 __EoT__
2.0 emptyview 我设置的空布局 结果显示错误布局 来回切换emptyview 就混乱了 __EoT__
2.0 emptyview 我设置的空布局 结果显示错误布局 来回切换emptyview 就混乱了 __EoT__
v7包依赖方式 __EoT__ 嗨 , 陈总好 ! library中的compile 'com.android.support : recyclerview-v7:23.3.0'能变成provided不 , 因为项目中如果用了其他版本的support , 就会报冲突
快速连续多次滑动删除item时bug __EoT__ 有些item已经变成了黄色但是没有删除，并且convertView复用，滑动的时候其他item也会变成黄色。
loadingView __EoT__ loadingView 点击能否开放出来 , 而不是放到itemclick事件中 , 否则点击itemclick 不做处理会数组越界
IndexOutOfBoundsException __EoT__ 你好，在onItemChildClick 中使用 mQuickAdapter.remove ( i ) ; 连续点击非最后一个条目 会出现数据越界问题 而onItemClick 则不存在此问题 请检查相关position 是否计算正确
第一次加入一个空数组Alist之后，第二次 AList 数据改变通知 adapter 刷新 发现无法刷新，追踪源码发现，构造函数把数据源内存地址改变了？ __EoT__ `` ` java public BaseQuickAdapter ( Context context , int layoutResId , List < T > data ) { this.mNextLoadEnable = false ; this.mLoadingMoreEnable = false ; this.mFirstOnlyEnable = true ; this.mOpenAnimationEnable = false ; this.mInterpolator = new LinearInterpolator ( ) ; this.mDuration = 300 ; this.mLastPosition = -1 ; this.mSelectAnimation = new AlphaInAnimation ( ) ; this.pageSize = -1 ; this.mData = data == null ? new ArrayList ( ) : new ArrayList ( data ) ; this.mContext = context ; this.mLayoutInflater = LayoutInflater.from ( context ) ; if ( layoutResId ! = 0 ) { this.mLayoutResId = layoutResId ; } } `` `` `
GridLayoutManager header和Load more的问题 __EoT__ 当使用GridLayoutManager的时候，addHeaderView占的spansize应该是整个宽度，可以通过一下设置解决问题 manager.setSpanSizeLookup ( new GridLayoutManager.SpanSizeLookup ( ) { @ Override public int getSpanSize ( int position ) { if ( position == 0 ) { return 2 ; } return 1 ; } } ) ; 但是loadmore view占地spansize不是整个宽度，看了下代码，loadmore处理了StaggeredGridLayoutManager的情况，但是StaggeredGridLayoutManager的时候addHeaderView的spansize不知道如何处理
当用StaggeredGridLayoutManager时用使用emptyview时不能占整行 __EoT__ setEmptyView 没有考虑StaggeredGridLayoutManager或者GridLayoutManager的情况可以考虑在重写onViewAttachedToWindow ` `` ` if ( holder.getItemViewType ( ) == EMPTY_VIEW ) { if ( holder.itemView.getLayoutParams ( ) instanceof StaggeredGridLayoutManager.LayoutParams ) { StaggeredGridLayoutManager.LayoutParams params = ( StaggeredGridLayoutManager.LayoutParams ) holder.itemView.getLayoutParams ( ) ; params.setFullSpan ( true ) ; } } `` ` `
红米3s Android 6.0 压缩返回还是源路径，没有进行压缩 __EoT__ 公司大部分机型压缩的返回的路径都是默认的luban_cache路径，但是红米3s遇到的是原路径。在压缩保存的路径找不到，不管指不指定压缩路径，结果都是手机原路径。
Checker String extSuffix ( ) 这个地方容易OOM __EoT__ class Checker String extSuffix ( InputStreamProvider input ) { try { Bitmap bitmap = BitmapFactory.decodeStream ( input.open ( ) , null , new BitmapFactory.Options ( ) ) ; ... ... ... ... 这个地方容易OOM
压缩没有图片后缀名的图片 __EoT__ 压缩一些是图片但是经过加密没有后缀名（比如QQ保存得图片）然后去压缩这类文件就会报StringIndexOutOfBoundsException
png压缩问题 __EoT__ png图片压缩出来为黑色背景
再添加一个设置压缩后文件名的方法吧~ __EoT__ 而不是默认的时间戳加随机数
Demo里的Dismiss Snackbar这个按钮放在最下面没有机会点到啊 __EoT__ 显示Snackbar的时候会遮住这个按钮
EditText soft keyboard positioning __EoT__ Sample showing the issue : https : //github.com/deronbrown/SlidingUpPanelIssue An EditText within the main content view ( second child ) is expected to be repositioned above the soft keyboard when the keyboard appears . The behavior works as expected when the MainActivity is first launched . However , once interaction with the draggable view has occurred , the EditText 's position will never be updated . Notes : - The activity 's windowSoftInputMode is set to stateHidden|adjustResize . adjustResize is desired as to not hide the draggable view and toolbar when the keyboard is shown ( as adjustPan would do ) . - adjustPan behaves as expected both before and after interacting with the draggable view . - An unrelated issue that was discovered in this sample is that only the EditText at the bottom of the activity fades when the draggable view is pulled down . Version 2.0.2 does not have this issue .
Take margin top into account for slidable view __EoT__ First , thanks for the awesome lib ! How ? It 'd be nice if the slidable view can be aware of its margin top so that we can achieve the following effect . ! [ untitled-1 ] ( https : //cloud.githubusercontent.com/assets/1214816/6767918/5dbcc746-d080-11e4-825e-13118c48f2ad.gif ) There 're many different ways to make it work but the simplest we found is to specify ` layout_marginTop ` for the slidable view with whatever dimen we expect : `` ` xml < ! -- SLIDING LAYOUT -- > < LinearLayout android : layout_marginTop= '' ? actionBarSize '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : orientation= '' vertical '' android : clickable= '' true '' android : focusable= '' false '' android : id= '' @ +id/dragView '' > `` ` Currently the slidable view always matches its parent ( SlidingUpPanelLayout ) height .
Add prefixes to all custom attributes to avoid conflicts __EoT__ Hello , I tried adding the library however one of the custom attributes in the values.xml file conflicts with another . How could I resolve this issue ? Error in SlidingUpPanelLayout : ! [ image ] ( https : //cloud.githubusercontent.com/assets/7770779/3822507/54ea7aa8-1d27-11e4-9e81-07cf21df58fa.png ) Error in other library ( flat buttons ) : ! [ image ] ( https : //cloud.githubusercontent.com/assets/7770779/3822510/7e507a28-1d27-11e4-8ef7-f784e835f5a5.png )
Maven pom refers to incorrect support library version __EoT__ We should use the support library naming standard from [ maven-android-sdk-deployer ] ( https : //github.com/mosabua/maven-android-sdk-deployer ) which seems to be the best way to deploy the support libraries into a maven repository . Currently , we refer to ` com.android.support : support-v4:13.0.0 ` , which I think is actually supposed to correspond to ` $ ANDROID_HOME/extras/android/support/v13/android-support-v13.jar ` . ` maven-android-sdk-deployer ` calls that ` com.google.android : support-v13:19.0.1 ` It uses the version reported from the Android SDK Manager , and we should do the same . I 'll submit a PR later tonight .
Add AndroidX support . __EoT__ Addresses # 1280 It would be nice if we could get this functionality tested within ButterKnife . Not sure the best way to go about that since we have to add androidx artifacts to the processor classpath . For the time being I was able to deploy to maven local and successfully built an AndroidX app using this change . Strangely I had to declare an explicit dependency on ButterKnife 's annotations artifact otherwise they did n't appear on my classpath .
Use ` BaseVariant.getApplicationId ( ) ` to make ButterknifePlugin compatible with AGP 3.1.0-alpha07 __EoT__ Use ` BaseVariant.getApplicationId ( ) ` instead of ` ProcessAndroidResources.getOriginalApplicationId ( ) ` which was moved to an internal class ` LinkApplicationAndroidResourcesTask ` in ` AGP 3.1.0-alpha07 `
Remove redundant entry from gitignore __EoT__
Compute fq name correctly when using R2 __EoT__ Followup from a small regression introduced in # 1075
Correct typecast checking utility . __EoT__ Fix utility that checks for parameter types so it correctly checks and reports type errors .
Correct typecast checking utility . __EoT__ Fix utility that checks for parameter types so it correctly checks and reports type errors .
Fix listener method type checking __EoT__ Fix # 782 - Add checking to listener method parameter to allow using subtype of original method 's type only when the parameter is subtype of view . - Add testcase in OnTextChangedTest.java
Is it some kinda misspelling in v8.1.0-SNAPSHOT ? __EoT__ Hi , I was looking through the source code and IMO the code is incorrect a little bit : `` ` public static Unbinder bind ( @ NonNull Object target , @ NonNull Activity source ) { return getViewBinder ( target ) .bind ( Finder.VIEW , target , source ) ; } `` ` I think that the correct **Finder** is **ACTIVITY** here , is n't it ? Because later you will try to cast a **source** to the **Finder 's type** ( in this case you will try to cast a passed **Activity** to the **View** class and it 's impossible of course ) .
Butterknife causing latest lint build to fail __EoT__ I am in the process of upgrading my projects to the latest version of the gradle android plugin ( currently 0.9.0/19.03 with gradle 1.11 ) . Builds within AndroidStudio work properly , but trying to build on the command line fails lint with the following errors `` ` xml < issue id= '' InvalidPackage '' severity= '' Error '' message= '' Invalid package reference in library ; not included in Android : javax.lang.model.element . Referenced from butterknife.internal.Listener . '' category= '' Correctness '' priority= '' 6 '' summary= '' Finds API accesses to APIs that are not supported in Android '' explanation= '' This check scans through libraries looking for calls to APIs that are not included in Android . When you create Android projects , the classpath is set up such that you can only access classes in the API packages that are included in Android . However , if you add other projects to your libs/ folder , there is no guarantee that those .jar files were built with an Android specific classpath , and in particular , they could be accessing unsupported APIs such as java.applet . This check
Type T can not be resolved to a type __EoT__ Hi Jake , i just tried the example in Eclipse but got error on generated code for @ OnItemClick annotation . Line is `` ( ( android.widget.AdapterView < T > ) view ) '' and should be `` ( ( android.widget.AdapterView < ? > ) view ) '' below the generated code : `` ` java target.listOfThings = ( android.widget.ListView ) view ; ( ( android.widget.AdapterView < T > ) view ) .setOnItemClickListener ( new android.widget.AdapterView.OnItemClickListener ( ) { @ Override public void onItemClick ( android.widget.AdapterView < ? > p0 , android.view.View p1 , int p2 , long p3 ) { target.onItemClick ( p2 ) ; } } ) ; `` `
Type T can not be resolved to a type __EoT__ Hi Jake , i just tried the example in Eclipse but got error on generated code for @ OnItemClick annotation . Line is `` ( ( android.widget.AdapterView < T > ) view ) '' and should be `` ( ( android.widget.AdapterView < ? > ) view ) '' below the generated code : `` ` java target.listOfThings = ( android.widget.ListView ) view ; ( ( android.widget.AdapterView < T > ) view ) .setOnItemClickListener ( new android.widget.AdapterView.OnItemClickListener ( ) { @ Override public void onItemClick ( android.widget.AdapterView < ? > p0 , android.view.View p1 , int p2 , long p3 ) { target.onItemClick ( p2 ) ; } } ) ; `` `
Add annotations to kotlin files __EoT__ There is a lot of refactoring in this PR . It was require for me to understand what is going on there . At the end there are two commits that matter . Adding missing annotations is here https : //github.com/OrdonTeam/RxBinding/commit/0e94d92d5d6b399a9ef29f3a885ddaacb532b520 I had a huge problem with kotlin poet not adding imports . I resolved it by specifying fully qualified name of annotation types .
Port android support design module to rxjava 2 __EoT__ My objections : Should we replace deprecated methods like setOnTabSelectedListener by addOnTabSelectedListener ? What suggested when view action callback is not interface but abstract class ?
Generate Kotlin task does n't work on Windows __EoT__
TitlePageIndicator/UnderlinePageIndicator/LinePageIndicator android : background resource issue __EoT__ TitlePageIndicator : https : //github.com/JakeWharton/Android-ViewPagerIndicator/blob/master/library/src/com/viewpagerindicator/TitlePageIndicator.java # L207 Line 207 : Drawable background = a.getDrawable ( R.styleable.CirclePageIndicator_android_background ) ; should be : Drawable background = a.getDrawable ( R.styleable.TitlePageIndicator_android_background ) ; UnderlinePageIndicator : https : //github.com/JakeWharton/Android-ViewPagerIndicator/blob/master/library/src/com/viewpagerindicator/UnderlinePageIndicator.java # L101 Line 101 : Drawable background = a.getDrawable ( R.styleable.CirclePageIndicator_android_background ) ; should be : Drawable background = a.getDrawable ( R.styleable.UnderlinePageIndicator_android_background ) ; LinePageIndicator : https : //github.com/JakeWharton/Android-ViewPagerIndicator/blob/master/library/src/com/viewpagerindicator/LinePageIndicator.java # L89 Line 89 : Drawable background = a.getDrawable ( R.styleable.CirclePageIndicator_android_background ) ; should be : Drawable background = a.getDrawable ( R.styleable.LinePageIndicator_android_background ) ; Regards Patrick
TabPageIndicator styling Text __EoT__ It seem it is not possible to style selected Text with TabPageIndicator . I want to set another style for the selected Tab . For example bold and another color . Thanks
Add support for android : *divider* to TabPagerIndicator __EoT__ I 'd like to be able to use vertical dividers on my TabPagerIndicator . i.e . `` ` < style name= '' MyTabPageIndicator '' > < item name= '' android : divider '' > @ drawable/my_divider < /item > < item name= '' android : showDividers '' > middle < /item > < item name= '' android : dividerPadding '' > 12dp < /item > < /style > `` ` ( This involves using the ICSLinearLayout as dividerPadding is from API14 and showDividers is from API11 )
Allow Drawing TitlePageIndicator Line On Top __EoT__ For bottom titles .
Background is not set __EoT__ When I create a custom style and set the android : background attribute in a style for vpiTitlePageIndicatorStyle , it is n't used . The background remains the default colour . When I set the text colour for the TitlePageIndicator I 'm using in the same style , this does work .
Usage guides broken __EoT__ At 81065a6 ( issue # 70 ) TitleProvider was removed from dev branch and with f0ea9a2 hat commit was merged to master , resulting in the final death of TitleProvider . None of the guides ( located in README.md and on http : //viewpagerindicator.com ) are working since the merge , this because of the note : '' Note : If you are using TitlePageIndicator your adapter must implement TitleProvider . '' tells people to implement something that does n't exist anymore .
Left title overlaps current title with long text during right dragging __EoT__ Hi , I found out that when I have long title texts in the indicator , during right dragging , the title in the left part of the indicator overlaps the current title until the motion is over . This behavior does n't happen when I scroll in the opposite direction . An example of this behavior can be found here = > http : //dl.dropbox.com/u/1146701/view-page-indicator-overlaps.png
Underline indicator disappears after phone rotation . __EoT__ Run demo app from the market . Open Underlines - > No Fade . Swipe until you hit the AAAAA page . Rotate the phone . The underline is gone . Only happens if nofade==true .
Title of TitlePageIndicator jump and blink at the end of animation if PageView has margin __EoT__ Please try to add this mPager.setPageMargin ( 30 ) ; mPager.setPageMarginDrawable ( android.R.drawable.screen_background_dark ) ; to the SampleTitlesDefault.java And try swipe to the right , title will jump and blink at the end of slide . It does n't happen if you slide back . So currently is not possible use divider between fragments .
Reselected Callback for TabPageIndicator __EoT__ ala center title clicked listener on TitlePagerIndicator
Properly check if fakedrag is allowed before dragging __EoT__ https : //github.com/JakeWharton/Android-ViewPagerIndicator/blob/master/library/src/com/viewpagerindicator/TitlePageIndicator.java # L496 Replace : `` ` java if ( ! mViewPager.isFakeDragging ( ) ) { mViewPager.beginFakeDrag ( ) ; } mLastMotionX = x ; mViewPager.fakeDragBy ( deltaX ) ; `` ` With : `` ` java mLastMotionX = x ; if ( mViewPager.isFakeDragging ( ) || mViewPager.beginFakeDrag ( ) ) mViewPager.fakeDragBy ( deltaX ) ; `` `
Disable theming in Eclise Edit Mode __EoT__ Error in latest eclipse adt visual layout editor `` ` The following classes could not be instantiated : - ( Open Class , Show Error Log ) See the Error Log ( Window > Show View ) for more details . Tip : Use View.isInEditMode ( ) in your custom views to skip code when shown in Eclipse `` ` Error log : `` ` android.content.res.Resources $ NotFoundException : Resource ID # 0x7f060000 type # 0x3 is not valid at android.content.res.Resources.getBoolean ( Resources.java:679 ) at com.viewpagerindicator.CirclePageIndicator. < init > ( CirclePageIndicator.java:85 ) at com.viewpagerindicator.CirclePageIndicator. < init > ( CirclePageIndicator.java:71 ) at sun.reflect.NativeConstructorAccessorImpl.newInstance0 ( Native Method ) at sun.reflect.NativeConstructorAccessorImpl.newInstance ( NativeConstructorAccessorImpl.java:57 ) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance ( DelegatingConstructorAccessorImpl.java:45 ) at java.lang.reflect.Constructor.newInstance ( Constructor.java:532 ) at com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback.instantiateClass ( ProjectCallback.java:397 ) at com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback.loadView ( ProjectCallback.java:165 ) `` `
GridLayout and ViewPagerIndicator __EoT__ The orientation attribute conflicts with the view pager indicator . This can be fixed of course by removing the orientation definitions but a better fix is needed . There also seems to be some conflict between gridlayout and abs but I ca n't seem to work that one out and i 'll post in ABS for that .
Spannable Title __EoT__ It is possible to change the String getTitle ( ) to CharSequence getTitle ( ) and then change how the text is painted ? It seems that the mPaint color variable when drawing the text to the canvas is the only missing link to allowing someone to return a Spannable String ( that will be displayed with its styling ) instead of a regular String without changing the ability to return regular Strings .
Force close when removing page __EoT__ This seems to only be a problem with the Titles samples , and not the Tabs or Circles samples . The `` Remove Page '' option removes the right-most page . When I 'm on the right-most page and I chose the remove page menu option , the sample app will sometimes crash . However , sometimes the app behaves as expected and removes the tab and the new right-most page is selected . I was n't able to determine what I was doing differently that sometimes causes the app to crash .
Give Superclass chance to handle Touch Events __EoT__ I would send a Pull Request for this but I 've made another commit previously which you will not want ( [ this one ] ( https : //github.com/chrisbanes/Android-ViewPagerIndicator/commit/f6e172ce390468874d6ee92e180227f9dfa66769 ) ) . At the moment , TitlePageIndicator and CirclePageIndicator gobble up all Touch Events at the end , where as they should send them up to the superclass . That way , any click listeners will have a chance to work . Here 's my commit on my fork : https : //github.com/chrisbanes/Android-ViewPagerIndicator/commit/6e43f79eccc55ff3ff2644986e478b2404366ff0
Change title textSize to 'dp ' instead of 'sp ' ? __EoT__ I 'm not doing a pull request on this because a ) it 's really easy to change and b ) you might not be interested ... I was playing with my app on ICS and noticed a `` font setting '' on ICS , which I picked `` large '' . This had a lot of impact in my app and messed everything up . One of the things messed up was the ViewPagerIndicator titles , which must not be affected by a system property like this . The fix is easy , the font size must be changed from ` sp ` to ` dp ` . One can easily adapt one 's app without messing in the core library . I 'm just posting this here in case you were not aware of this behavior . Feel free to close the issue whenever you want .
`` compatibility-v4-r4.jar '' is missing __EoT__ Hi , Today I imported your Library in Eclipse but evertime I try to build the sample . I got this error : < code > The container 'Maven Dependencies ' references non existing library 'C : \Users\Cracksoldier.m2\repository\android\support\compatibility-v4\r4\compatibility-v4-r4.jar ' < /code > I already checked this folder and it only contains the two following files : < code > compatibility-v4-r4.jar.lastUpdated compatibility-v4-r4.pom.lastUpdated < /code > Maven and the plugin is installed and works right . This the output of the Eclipse Console during the import of your git repo : < code > 20.12.11 21:49:44 MEZ : [ WARN ] The POM for com.jayway.maven.plugins.android.generation2 : android-maven-plugin : jar:3.0.0-alpha-10 is missing , no dependency information available 20.12.11 21:49:45 MEZ : [ INFO ] Using DEFAULT lifecycle mapping for MavenProject : com.viewpagerindicator : library:2.2.0 @ C : \Users\Cracksoldier\Workspace\parent\library\pom.xml . 20.12.11 21:49:45 MEZ : [ WARN ] The POM for android : android : jar:1.6_r3 is missing , no dependency information available 20.12.11 21:49:45 MEZ : [ WARN ] The POM for android.support : compatibility-v4 : jar : r4 is missing , no dependency information available 20.12.11 21:49:45 MEZ : [ WARN ] The POM for com.jayway.maven.plugins.android.generation2 :
Add setTypeface method ( or mPaintText accessor ) to TitlePageIndicator __EoT__ May I suggest adding setTypeface method to TitlePageIndicator class ? I 'm using something like this right now : `` `` `` `` ` public void setTypeface ( Typeface typeface ) { mPaintText.setTypeface ( typeface ) ; } `` ` `` `` `` Having mPaintText accessor will do the trick as well .
TitlePageIndicator throws Exception when in non-Exactly Measured view __EoT__ TitlePageIndicator throws an IllegalStateException when it is used in a non-MeasureSpec.EXACTLY measured view . Line 720-722 : `` ` java if ( specMode ! = MeasureSpec.EXACTLY ) { throw new IllegalStateException ( getClass ( ) .getSimpleName ( ) + `` can only be used in EXACTLY mode . `` ) ; } `` ` I 've commented out these lines and it works perfectly in a view measured using layout_weight . Infact , it 's been working for the past 6/7 weeks and released in FriendCaster back then .
Add OnCentreItemClickListener __EoT__ Allow a listener to be added for Click 's to the Centre Page Indicator
TitlePageIndicator issue when calling onDraw method __EoT__ Hi Jake , I use Android-ViewPagerIndicator classes on my project and I have noticed an issue when calling onDraw method of TitlePageIndicator class . This issue is specific to an Android target environment < Android 2.2 ( API level 8 ) . Stack : `` ` 11-05 13:30:36.290 : E/AndroidRuntime ( 209 ) : Uncaught handler : thread main exiting due to uncaught exception 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : java.lang.IndexOutOfBoundsException : Invalid location 0 , size is 0 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : at java.util.ArrayList.get ( ArrayList.java:353 ) 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : at com.hencky.discography.ui.widget.TitlePageIndicator.onDraw ( TitlePageIndicator.java:314 ) 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : at android.view.View.draw ( View.java:6274 ) 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : at android.view.ViewGroup.drawChild ( ViewGroup.java:1526 ) 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : at android.view.ViewGroup.dispatchDraw ( ViewGroup.java:1256 ) 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : at android.view.View.draw ( View.java:6277 ) 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : at android.view.ViewGroup.drawChild ( ViewGroup.java:1526 ) 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) : at android.view.ViewGroup.dispatchDraw ( ViewGroup.java:1256 ) 11-05 13:30:36.300 : E/AndroidRuntime ( 209 ) :
SampleTitlesWithListener crash __EoT__ Hey Jake , there 's still an error in SampleTitlesWithListener activity name : `` ` xml < activity android : name= '' .sample.sample.SampleTitlesWithListener `` ` which causes the sample app to crash with class not found exception while trying to load it Cheers
Changing Dataset Not Updating Titles __EoT__ Adding a page to the bound adapter and calling ` notifyDataSetChanged ( ) ` will properly notify the ` ViewPager ` but a ` TitlePageIndicator ` widget will not update . This should be due to not acting on the ` onPageSelected ` callback for the listener . However , ignoring this callback was a deliberate design decision -- the reason for which unfortunately now escapes me .
mPaintFooterIndicator color does n't change when changing mPaintFooterLine color __EoT__ Title says it all . Hot fix , change the footerIndicator color when changing the line color . ( line 148 TitlePageIndicator.java ) `` ` java public void setFooterColor ( int footerColor ) { mPaintFooterLine.setColor ( footerColor ) ; mPaintFooterIndicator.setColor ( footerColor ) ; invalidate ( ) ; } `` `
Title Padding Shows Other Adjacent Titles __EoT__ Set a larger title padding to move the left/right titles off of the sides of the screen and you will see the titles for two pages to the left and right ( if available ) .
Little glitches when clicking in the tab __EoT__ Hi ! I noticed that when you click in a tab , a little glich happens . For a fraction os seconds , the name of the clicked tab appears in the middle of the indicator and just later the animation of scrolling occurs . I could notice that in the honeycomb emulator . I think it may be the call to invalidate ( ) inside setCurrentItem which is called by the OnTouch event .
Add Left/Right Title Clicking __EoT__ Clicking on the left or right title will switch to that page .
Update documentation for BitmapPool # getDirty __EoT__ BitmapPool # getDirty was changed to @ NonNull in 57cdba301532357d55668871321b47d23197349a .
Fix typo in Javadoc __EoT__
Fix swapped pixels in GifDecoder 's output __EoT__ ` StandardGifDecoder ` uses modified [ public domain ] ( http : //show.docjava.com/book/cgij/exportToHTML/ip/gif/stills/GifDecoder.java.html ) code to decode the GIF . Some changes were done to it that introduced a subtle bug : the initial two pixels are swapped , as well as the pixels after each ` CLEAR ` command in the LZW stream . Comparing with the original code , the bug was introduced because the loop that pops the bytes from the stack into the output pixel array was moved . This code motion did not take into account the [ ` continue ` ] ( https : //github.com/bumptech/glide/blob/master/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java # L773 ) in the branch guarded by ` oldCode == NULL_CODE ` . The pixel that this branch pushes to the stack was supposed to be immediately transferred to the output , but since the stack-popping loop was moved , it happens after adding ` first ` to the output pixels , thereby swapping the two initial pixels . The fix is simple : instead of pushing to the stack in the ` oldCode == NULL_CODE ` branch , send the pixel directly to the output pixel array . This
Give generated code meaningful parameter names __EoT__ The currently generated method parameters are meaningless ` arg0 ` , ` arg1 ` kind of stuff which makes for an unpleasant development experience . This PR makes the params as pretty as possible given the limitation that we do n't know what the actual parameter names are . Now I 'm not gon na lie , the code to do this is kind of ugly , but I think the end result is well worth it .
Respect theme when loading Drawables while AppCompat is present __EoT__ # # Description Makes DrawableDecoderCompat # loadDrawableV7 wrap a now passed Resources.Theme with the present Context , in order for the former to be respected as AppCompat tries to load the Drawable resource # # Motivation and Context Resolves # 2783
Fix do n't start preload on open RecyclerView ( without user intract ) __EoT__ I see that ListPreloader do n't start preload until the user do n't start scroll . I think my commit fix it .
Evict oldest half of cache on TRIM_MEMORY_RUNNING_CRITICAL __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Trim half of resource cache allocations when receiving [ TRIM_MEMORY_RUNNING_CRITICAL ] ( https : //developer.android.com/reference/android/content/ComponentCallbacks2.html # TRIM_MEMORY_RUNNING_CRITICAL ) in ` trimMemory ( ) ` See # 2810 Also , while in the code I updated some outdated comments , and replaced ` maxSize ` with ` getMaxSize ( ) ` in ` LruBitmapPool ` # # Motivation and Context < ! -- Why is this change required ? What problem does it
Fix param mistake __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Fix a little mistake about param . Close # 2798 # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > < ! -- If you have any issues feel free to create the PR anyway , we 'll help to resolve them . -- >
Start adding nullability annotations to load package __EoT__
Add nullability annotations to manager package __EoT__
Ensure all generated classes are fully nullabilitily annotated __EoT__ And voila , every generated class now has nullability annotations everywhere ! 😄 PS : fae9444e85857bc524511f9b78063765bbcc760d is amazing ! When I ran the build , I was like `` why are the tests passing ! ? '' Anyway , thanks ! ❤️
Add missing annotations on APT overriding methods __EoT__ # # Description * Added annotations * Connect up the test module with the apt compiler , so it 's harder to forget to run the tests . # # Motivation and Context ! [ image ] ( https : //user-images.githubusercontent.com/2906988/34469192-4a30ee34-ef11-11e7-8843-5086d23e95a0.png )
Make PMD depend on compiled .class files __EoT__ # # Description Fixes # 2776 # # Motivation and Context https : //github.com/pmd/pmd/issues/817 # issuecomment-354571056
PMD 6.0.0 __EoT__ I suggest a Squash Merge again . I suggest you take a look at the two revert commits and then the extra commits I added later . Please make sure you review thoroughly , hopefully rebase did n't mess anything up . Feel free to commit any amendments to the branch ( you have write rights to all PR branches ) . # # Description Upgrade PMD from 5.8.1 to 6.0.0 based on https : //github.com/sjudd/glide/tree/pmd_6_0_0 branch rebased onto # 2762 . Mostly PMD triggered fixes and refactors . # # Motivation and Context Better checks for finding hidden issues in the code .
Clean up synthetic accessor method rot __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Since PMD 5.5.4 there 's a [ ` AccessorMethodGeneration ` ] ( https : //pmd.github.io/pmd-5.8.1/pmd-java/rules/java/design.html # AccessorMethodGeneration ) rule in ` design ` category thanks to [ Jake 's request ] ( https : //sourceforge.net/p/pmd/bugs/1496/ ) . The PR removes 20 synthetic methods and prevents adding any new ones . In this PR : * simply updating PMD to 5.5.4+ enabled the rule . * did n't update to 6.0.0 , only to
Upgrade to API 27 __EoT__ @ sjudd The API 27 sources were just released so we can close # 2730 .
Add nullability annotations to more generated classes __EoT__ This PR adds nullability annotations to the ` GlideApp ` class and does a bit of cleanup that helped me understand what was going on .
Add nullability annotations to RequestOptions __EoT__ It 's just a whole latta return ` @ NonNull ` annotations .
Add nullability annotations to pool package and its dependencies __EoT__
Finish adding nullability annotations to Registry class and its dependencies __EoT__ The entire root package is done ! 😄
Util nullability __EoT__ The entire ` util ` package is done ! ! ! 😄
Fix all annotation testing issues on Windows __EoT__ Fixes # 2709 . It 's a tad uglier than I would have liked , but running ` ./gradlew : annotation : compiler : test : test ` is all green now ! 😄
Cleanup __EoT__ Some cleanup I 've noticed from working on the nullability annotation stuff : - Use Java 6 foreach loops - Add a set of forgotten nullability annotations - Miscellaneous
Add nullability annotations to gif encoder module __EoT__ More progress .
Some images simply do not download ( Black image ) - Android __EoT__ Hi , In some devices ( Moto X ) do not download correctly , like the screenshot attached . When i skipMemoryCache ( true ) it works , because Glide download the image again . I already use asBitmap ( ) with imageDecoder ( ) and the problem still occur . But , in my other device ( Nexus 4 ) this problem does n't occur . Glide works perfectly I tried to config listener ( ) to log Exceptions but never called onException ( ) method . In other words , no Exceptions occurs . Its weird . Best , Thiago Luis . ! [ screenshot_2015-11-12-16-45-43 ] ( https : //cloud.githubusercontent.com/assets/5911164/11127862/8dd736e6-895d-11e5-9522-ac0da09c6243.png )
Add nullability annotations to gif modules __EoT__ More progress on nullability . I 've also noticed https : //github.com/bumptech/glide/pull/2711 ... looks like it would combine nicely with my work . 😄
Add nullability annotations to library module ( 1/n ) __EoT__ Man this is painful ! 😄 Here 's what I got done before I ran out of podcasts .
Add nullability annotations to okhttp3 module and its dependencies __EoT__ More work to improve Kotlin support .
Cleanup target api annotations __EoT__ Any reason to use ` TargetApi ` ? Dunno why the support lib folks have n't just deprecated that annotation , but ` RequiresApi ` is the better one . Also , this PR removes target annotations for api 14 which is the min of this library anyway .
Update README to use new dependency resolution DSL __EoT__
External storage exists but not writable __EoT__ The Huawei P9 lite is returning the external storage path as if it were available , but it is not writable , therefore , writes fail . This commit fixes the issue .
Replace http links with https in README.md __EoT__ # # Description few links are served over http , replacing with https # # Motivation and Context # # # # Why is this change required ? What problem does it solve ? Our links will be secure and serve over ` SSL Protocol ` and other links are already using https . I also checked in network , console panel in dev tools in case any script is getting blocked , everything is working fine . Repository description link is also http , we have to change it too .
Add probot stale configuration . __EoT__ Progress towards # 2549 . This will comment on and automatically close stale issues that do n't have a whitelisted set of tags .
Use Iterator.remove when trimming cache __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Instead of explicitly removing a key from the LruCache ( which fails if the key class violates the equals ( ) contract ) call remove ( ) on the iterator instead . # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > Using this
Use long value so that cache sizes greater than 2Gigabytes can be supported . __EoT__ # # Description I want to be able to set cache sizes greater than 2 gigabytes which is the max value supported by the int primitive type , my approact to achieving this is to change the type used for maintaing cache size to long , so that cache with greater than 2 gigabyte can be used since these days phones are getting bulkier I think its fair to also let developers use more of the phone to improve User experience . Issue Reference : https : //github.com/bumptech/glide/issues/2022 # # Motivation and Context Bigger cache sizes equals better user experiences !
clear all pixels when dispose is 3 but previousImage is null __EoT__ # # Description Fix Issues # 2271 and part of # 1094 # # Motivation and Context Dispose in frame should not be DISPOSAL_PREVIOUS when there did not save previous image . GIF like # 2271 is wrong because the dispose is DISPOSAL_PREVIOUS in first frame .
Fix crash because of wrong executor being created __EoT__ We are having issues using the new API to set an UncaughtThrowableStrategy . There was a mistake in my latest PR . Sorry about it . Can you give us an ETA to release the fix on central ? We might have to reverse the change on our side if it 's not published soon . The crash is pretty simple : no images load ( on Oreo devices ? ? ? strange , it should always crash.. ) . Anyway , yes , no images are loaded because we use an executor that ca n't go to the network .
Fixed a small typo . __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Fixed a small typo in error message output . # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > The previous error message was misleading . < ! -- If you have any issues feel free to create the PR anyway , we 'll
Build improvements __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > ( squash-merge this ) # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Update some build-related version numbers , and multiple minor code cleanups . Separated each improvement into commits , so we can drop some if you do n't like it . # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > Try to reduce
Update proguard rules __EoT__ # # Description It seems that was wrong class name and warning says `` ` Note : the configuration refers to the unknown class 'com.bumptech.glide.AppGlideModule' Maybe you meant the fully qualified name 'com.bumptech.glide.module.AppGlideModule ' ? `` `
Use Dagger 2.11 in imgur sample __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Update the version and use more of the Dagger helper classes . # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > Just for fun to learn more about the Android Dagger injection < ! -- If you have any issues feel free
UncaughtThrowableStrategy API / extension __EoT__ In our crash reporting tool , we can see this : ! [ image ] ( https : //user-images.githubusercontent.com/1832925/30516489-adaee8dc-9af5-11e7-85ed-8d481e56c4a9.png ) The threads created by GlideExecutor thread factory crash , mostly because of OOMs , but they actually crash the app and are caught by the crash reporting general uncaught exception handler . It would be valuable for us to be able to pass a custom UncaughtExceptionStrategy to the glide executor , that would simply log the crash , without crashing the app . Our app can live with an image that could not be loaded . Is it possible to create an API so that we can use a custom error handler here : https : //github.com/bumptech/glide/blob/master/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java # L349 If you agree with this feature , we will gladly contribute a PR for it .
Add link to Simplified Chinese Doc . __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > This is a simple PR to link to Simplified Chinese documentation site . Details are already discussed in # 2377 . < ! -- # # Motivation and Context -- > < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > < ! -- If you have
Implement a new optional model interface ModelEquity . __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > This allows models to handle equity for internal states that can be different from the target image result that is handled with equals ( ) /hashCode ( ) For example to allow restart of image download from a new source but still using the same cache in Glide # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > <
Fix code format and typo in TransformationUtils __EoT__ # # Description This PR fixes code format and typo of TransformationUtils .
Override default Encoders __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Override default Encoders for existing data classes . I 've added prepend methods to Encoder and ResourceEncoder classes to achieve this . # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > I want to encrypt images in Glide disk cache . To do that I
Add the Google 's maven repo to get the support-annotations library __EoT__ If not , Gradle does n't succeed . And that does n't help copypasting ( the common way to get Glide : · )
Flip incorrect comparator operator in BITMAP_POOL_TARGET_SCREENS __EoT__ Fixes # 2332
Glide 4.0.0-RC1 does n't work on Gingerbread : NoClassDefFoundError __EoT__ It 's work fine on Android N but when I tested my app on Gingerbread it 's giving me error . ` E/AndroidRuntime ( 10149 ) : FATAL EXCEPTION : main E/AndroidRuntime ( 10149 ) : java.lang.NoClassDefFoundError : com.bumptech.glide.Glide E/AndroidRuntime ( 10149 ) : at ... android.app.Instrumentation.callActivityOnCreate ( Instrumentation.java:1047 ) E/AndroidRuntime ( 10149 ) : at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:1722 ) E/AndroidRuntime ( 10149 ) : at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:1784 ) E/AndroidRuntime ( 10149 ) : at android.app.ActivityThread.access $ 1500 ( ActivityThread.java:123 ) E/AndroidRuntime ( 10149 ) : at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:939 ) E/AndroidRuntime ( 10149 ) : at android.os.Handler.dispatchMessage ( Handler.java:99 ) E/AndroidRuntime ( 10149 ) : at android.os.Looper.loop ( Looper.java:130 ) E/AndroidRuntime ( 10149 ) : at android.app.ActivityThread.main ( ActivityThread.java:3835 ) E/AndroidRuntime ( 10149 ) : at java.lang.reflect.Method.invokeNative ( Native Method ) E/AndroidRuntime ( 10149 ) : at java.lang.reflect.Method.invoke ( Method.java:507 ) E/AndroidRuntime ( 10149 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:864 ) E/AndroidRuntime ( 10149 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:622 ) E/AndroidRuntime ( 10149 ) : at dalvik.system.NativeStart.main ( Native Method ) ` I 've tried to Clean Build multiple times but did n't
Update model on failed request update . __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Ensure that restarted request use the updated model when failed/cancelled as it can contains data to help the request to succeed . # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > Mostly fixes # 2270 Since I had to push a
[ Gradle ] - Update gradle to 4.1 __EoT__
Contact lookup by phone number added . __EoT__ …ved license handling in sample < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Added support to contact lookup by phone number . Since Android offers highly optimized way to lookup for contacts by their number , this extension allows us to use it . Also , I updated sample application to better handle permissions and added part which demonstrates searching contacts based on phone number and showing contact image . # # Motivation and Context < ! -- Why is
Annotate getDataClass and getDataSource from DataFetcher as NonNull __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > Annotate getDataClass and getDataSource from DataFetcher as NonNull Returning null from those will trigger obscure crash in MultiClassKey , annotation helps preventing that . # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > Help devs to avoid pitfalls : )
Add a shortcut to apply multiple transformations on a single request . __EoT__ # # Description As per discussion here : https : //github.com/bumptech/glide/issues/2086 # # Motivation and Context Makes the possibility to apply multiple transformations easier discoverable via API . I 'd like to have broaden the test context a bit more , but this would have meant to introduce ` @ VisibleForTesting ` getters to internals in a couple of places which I neglected to do for now .
Update Fetcher documentation __EoT__ The Fetcher documentation needs to be updated for the new Glide 4 API
Proguard - Keep AppGlideModule __EoT__
Add vector drawable support via appcompat __EoT__ # # Description use the support lib in order to inflate resources . This allows you to use the ids of VectorDrawables for placeholder , error or fallback calls .
Update README.md __EoT__ Added a friendly maven central version badge < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > < ! -- If you have any issues feel free to create the PR anyway , we 'll help to resolve them . -- >
Fix wrong interpretation of the Netscape iteration count in an animated GIF __EoT__ This is a pull request into not ` master ` but ` 3.0 ` branch . If Glide shows an animated GIF with LOOP_INTRINSIC option as follows , the GIF animation loops incorrect number of times . `` ` java ImageView target = ( ImageView ) findViewById ( R.id.imageView ) ; Glide.with ( this ) .load ( Uri.parse ( `` < animated GIF URL > '' ) ) .into ( new GlideDrawableImageViewTarget ( target , GlideDrawable.LOOP_INTRINSIC ) ) ; `` ` This PR makes a GIF animation loop correct number of times as follows , and also fixes # 1724 : | Netscape iteration count in animated GIF | Before merged | After merged | | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | -- -- -- -- | -- -- -- -| | 0 ( forever ) | Only the first frame is shown. < br > Not animated. < br > ( due to # 1724 ) | Loops forever | | Does n't exist | Only the first frame is
Please remove synthetic methods __EoT__ **Glide Version** : 3.7.0 **Issue details** : There ’ s no true nesting in Java . Hence , any access to private members of outer class from nested class will have to go via a package scoped method generated by Java to facilitate the call . To reduce method , make methods of outer class package scoped . More information : https : //realm.io/news/360andev-jake-wharton-java-hidden-costs-android/
Error : Failed to resolve : glide-parent.third_party : gif decoder : unspecified __EoT__ < ! -- Please fill in the below fields with some data to help us best diagnose the issue . The more specific you are , the better ! You can help a lot by not making us ask these questions . Feel free to remove any irrelevant parts that you know are not related to the issue . Any HTML comment like this will be stripped when rendering markdown , no need to delete them . -- > < ! -- What version of Glide you 're running , for example : 3.7.1 | 3.8.0-SNAPSHOT | 4.0.0-SNAPSHOT It 's essentially the version number from your build.gradle : ` dependencies { compile ' ... : x.y.z ' } ` -- > **Glide Version** : 4.0.0-SNAPSHOT < ! -- Do you use any integration library , like OkHttp3 or Volley ? For example : Fails to display with stock networking , but works with okhttp3-1.4.0 -- > **Integration libraries** : does n't matter < ! -- What devices you managed to get the issue to come up on ? For example : fails on Galaxy S4/GT-I9500 4.4.2 ,
.asBitmap ( ) .crossFade ( ) __EoT__ # # Description Allow ` .animate ( factory ) ` , ` .asBitmap ( ) .crossFade ( ) ` , ` .asBitmap ( ) .transcode ( ... ) .crossFade ( ) ` . This opens up the API to allow custom transformations via factory ( e.g . ` PaletteBitmap ` ) , as well as stock usage of ` .crossFade ( ) ` in most cases : now default , ` asGif ` and ` asBitmap ` all allow cross-fading . Closes # 1007 ( v4 already done that ) and fixes # 840 for v3 ( v4 TODO ) # # Motivation and Context It has been asked many times ( # 840 , # 605 , # 903 , # 847 , # 1007 , # 63 , # 155 , # 261 , # 362 , # 405 , # 749 , # 1083 , [ UPq4H4009OY ] ( https : //groups.google.com/d/msg/glidelibrary/UPq4H4009OY/v84MFKD7yYsJ ) ) how to do this and I figured out a few workarounds , this incorporates those into a builtin method to ease use while also allowing more customization . -- - Questions to @ sjudd : -
Fill only the area that was modified by the previous GIF frame __EoT__ # # Description As seen in # 1059 : ! [ flickering GIF animation ] ( https : //camo.githubusercontent.com/ef41a849b9296d956424ecb86450ef802f387fcc/687474703a2f2f692e696d6775722e636f6d2f384f344b6e36432e676966 ) If you look closely you can see there are multiple different flickers : - one where the frame is partially shown - one where a single frame is almost fully transparent This is how it should look like : ! [ original image ] ( https : //camo.githubusercontent.com/390c7c933d9cb508df8d81292ce4ffa7fca46694/687474703a2f2f66696c652e62616978696e672e6e65742f3230313531312f35396161306361306331643063333330393833613131306436303566663934302e676966 ) This change achieves that by clearing only part of the frame when need to dispose to background . # # Motivation and Context I sent the above image through http : //ezgif.com/split ( `` Ignore optimizations '' ) to see what how they look : ! [ image ] ( https : //cloud.githubusercontent.com/assets/2906988/14052276/3b4fdc04-f2c9-11e5-8c1a-fe7a1560db99.png ) As you can see there 's an actual half-frame and there are many almost-empty frames , most importantly the one where there 's a little pink on the left . These two frames cause the trouble . Their dispose is set to `` background '' which triggers a code block that fills the entire frame with ` bgColor ` . The problem is that
Use application Context in GifResourceDecoder __EoT__ Very quick fix for # 1277 This fixes a memory leak which causes ` GifResourceDecoder ` to leak ` Activity ` context once in memory cache . The solution is to save the application context instead when initializing the decoder .
Support contact Uri # 394 __EoT__ So I 've supported these kind of Uris for issue # 394 , also wrote a simple sample for this feature . content : //com.android.contacts/contacts/5/display_photo content : //com.android.contacts/contacts/lookup/3570i61d948d30808e537 content : //com.android.contacts/contacts/38 content : //com.android.contacts/contacts/lookup/3570i61d948d30808e537
Update to Gradle 2.9 | Checkstyle 6.12.1 | PMD 5.4.0 __EoT__ In order to update Checkstyle I had to upgrade Gradle since with Checkstyle 6.8 there was a breaking change and Gradle fixed that with 2.7 . [ More information ] ( https : //github.com/gradle/gradle/pull/491 ) The CI will fail since there are 5 checkstyle issues : `` ` [ ant : checkstyle ] /Users/nbaudy/tmp/glide/library/src/main/java/com/bumptech/glide/load/Option.java:146 : error : Type Javadoc comment is missing an @ param < T > tag . [ ant : checkstyle ] /Users/nbaudy/tmp/glide/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java:68 : error : Type Javadoc comment is missing an @ param < ResourceType > tag . [ ant : checkstyle ] /Users/nbaudy/tmp/glide/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java:19 : error : Type Javadoc comment is missing an @ param < R > tag . [ ant : checkstyle ] /Users/nbaudy/tmp/glide/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java:109 : error : Type Javadoc comment is missing an @ param < T > tag . [ ant : checkstyle ] /Users/nbaudy/tmp/glide/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java:116 : error : Type Javadoc comment is missing an @ param < T > tag . `` ` Should I fix them or would you do that ?
Some images simply do not download ( Black image ) - Android __EoT__ Hi , In some devices ( Moto X ) do not download correctly , like the screenshot attached . When i skipMemoryCache ( true ) it works , because Glide download the image again . I already use asBitmap ( ) with imageDecoder ( ) and the problem still occur . But , in my other device ( Nexus 4 ) this problem does n't occur . Glide works perfectly I tried to config listener ( ) to log Exceptions but never called onException ( ) method . In other words , no Exceptions occurs . Its weird . Best , Thiago Luis . ! [ screenshot_2015-11-12-16-45-43 ] ( https : //cloud.githubusercontent.com/assets/5911164/11127862/8dd736e6-895d-11e5-9522-ac0da09c6243.png )
Integrate Proguard rules __EoT__ From http : //stackoverflow.com/a/30801516 : `` ` gradle buildTypes { release { consumerProguardFiles 'proguard.txt' } } `` ` As in afollestad/material-dialogs # 708 . This simple change can make integration much easier and less error-prone .
Maven dependency type issue __EoT__ I build my project with Maven，while I import Glide into my project，I found out there is a build error like `` file glide.aar not exist '' . So I check the pom.xml , and found that the TYPE of glide is `` aar '' . After I modified it into `` jar '' , my project can successfully build . So , should we modify the Maven part in README.md ?
Load images through RemoteViews in widget __EoT__ Is there any chance that this feature request would be implemented in a next release ? I have searched but did not find anything about RemoteViews and Glide .
Robolectric 2.4 is out __EoT__ Travis build fails : https : //travis-ci.org/bumptech/glide/builds/40527307 And local failure as well : `` ` text * Where : Build file 'P : \projects\contrib\github-glide\glide\build.gradle ' line : 3 * What went wrong : A problem occurred evaluating project ' : glide ' . > A problem occurred configuring project ' : third_party : gif_decoder ' . > Could not resolve all dependencies for configuration ' : third_party : gif_decoder : _debugTestCompile ' . > Could not find org.robolectric : robolectric:2.4-SNAPSHOT . Searched in the following locations : https : //jcenter.bintray.com/org/robolectric/robolectric/2.4-SNAPSHOT/maven-metadata.xml https : //jcenter.bintray.com/org/robolectric/robolectric/2.4-SNAPSHOT/robolectric-2.4-SNAPSHOT.pom https : //jcenter.bintray.com/org/robolectric/robolectric/2.4-SNAPSHOT/robolectric-2.4-SNAPSHOT.jar https : //oss.sonatype.org/content/repositories/snapshots/org/robolectric/robolectric/2.4-SNAPSHOT/maven-metadata.xml https : //oss.sonatype.org/content/repositories/snapshots/org/robolectric/robolectric/2.4-SNAPSHOT/robolectric-2.4-SNAPSHOT.pom https : //oss.sonatype.org/content/repositories/snapshots/org/robolectric/robolectric/2.4-SNAPSHOT/robolectric-2.4-SNAPSHOT.jar file : /P : /tools/android-sdk-windows/extras/android/m2repository/org/robolectric/robolectric/2.4-SNAPSHOT/maven-metadata.xml file : /P : /tools/android-sdk-windows/extras/android/m2repository/org/robolectric/robolectric/2.4-SNAPSHOT/robolectric-2.4-SNAPSHOT.pom file : /P : /tools/android-sdk-windows/extras/android/m2repository/org/robolectric/robolectric/2.4-SNAPSHOT/robolectric-2.4-SNAPSHOT.jar file : /P : /tools/android-sdk-windows/extras/google/m2repository/org/robolectric/robolectric/2.4-SNAPSHOT/maven-metadata.xml file : /P : /tools/android-sdk-windows/extras/google/m2repository/org/robolectric/robolectric/2.4-SNAPSHOT/robolectric-2.4-SNAPSHOT.pom file : /P : /tools/android-sdk-windows/extras/google/m2repository/org/robolectric/robolectric/2.4-SNAPSHOT/robolectric-2.4-SNAPSHOT.jar Required by : glide-parent.third_party : gif_decoder : unspecified `` `
切换相册 相册图片加载不出来 __EoT__ 切换相册后 相册图片加载不出来，需要滑动后才会显示
Add exclusive interface ( enable selecting images and videos at the same time ) __EoT__ https : //github.com/zhihu/Matisse/issues/53
fix negative scrollY when ObservableView has paddingTop __EoT__ I found that when I add paddingTop to ObservableListView or other Observable View , then I get scrollY will get a negative offset of paddingTop value in pixels . So I create this PR , only test it on ListView implement , but I believe that there 'll be the same issue with ObservableGridView and ObservableRecyclerView . Please review that~ Thanks .
Implement feature addFooterView in ObservableGridView __EoT__
Implement feature addFooterView in ObservableGridView __EoT__
Build failed for minSdkVersion 8 app . __EoT__ Hello ... . i came across your library and would like try to introduce it into my app by following your guideline here : http : //ksoichiro.github.io/Android-ObservableScrollView/docs/quick-start/dependencies but I encounter an error stating : '' Error : Execution failed for task ' : app : processDebugManifest ' . > Manifest merger failed : uses-sdk : minSdkVersion 8 can not be smaller than version 9 declared in library `` while trying to configure into my build.gradle . I wonder does your library support api 8 too ? I 'm try to make an app that can support at least api 8 and I noticed that from https : //github.com/ksoichiro/Android-ObservableScrollView/issues/58 mentioned he is able to run in ( APIs : 8 , 11 , 15 , 19 , 21 ) . Would like to hear from you . I 'm quite new on this . Thanks..
[ ViewPagerTabListViewFragment ] The view pager changes the sliding bar selected location with onTouch event . __EoT__ I am facing the following issue : - Using ActionBar-Tab-ViewPager activity and ViewPagerTabListViewFragment - The first child fragment works perfect - But when you swipe to the second fragment and touch any where on the fragment the Sliding Tab flickers and most of the time shifts to the next child . - Swiping reverse works fine , but while swiping forward , many times it catches the onTouch event instead of the swipe event and hence the flickring /next child selection . Check this link for the code : http : //stackoverflow.com/questions/29991358/android-observablescrollview-unexpected-touch-changes-the-child-fragment-while And here is the video of the exact issue : https : //youtu.be/0katNDIWcmg
FlexibleSpaceWithImageWithViewPagerTab2Activity is lagging when used with custom fragment listview adapter __EoT__ From what I discovered , the problem is caused by calling mInterceptionLayout.requestLayout ( ) ; in onMoveMotionEvent ( )
ActionBarActivity was deprecated __EoT__ Android Support Library , revision 22.1.0 ( April 2015 ) deprecated ActionBarActivity in favor of AppCompatActivity , for the sample app code update ( just extend AppCompatActivity in the BaseActivity class ) . And they also added a new NestedScrollView class to support nested scrolling parent and child http : //developer.android.com/reference/android/support/v4/widget/NestedScrollView.html which can be interesting and fun . Excellent library , thanks .
The floatbutton is n't triggered when clicked with API 8 . __EoT__ I 'm testing the library and everything works fine with my API-21 phone , the floatbutton is triggered when clicked . However , when I try it with API-8 most of the things works good except the floatbutton in **FlexibleSpaceWithImageListViewActivity** class it 's not triggered , likewise when I used a different floatbutton to **melnykov's** one the same happens and nothing is triggered . I set the view to clickable in xml , and typed the following code and no luck : `` ` java mFab.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { // TODO Auto-generated method stub Log.v ( `` mFab1 : '' , `` Do you want change color of this button to red ? `` ) ; } } ) ; `` ` I also tried setting the floatbutton as a button and no luck . Any suggestions ? Thank you very much .
The floatbutton is n't triggered when clicked with API 8 . __EoT__ I 'm testing the library and everything works fine with my API-21 phone , the floatbutton is triggered when clicked . However , when I try it with API-8 most of the things works good except the floatbutton in **FlexibleSpaceWithImageListViewActivity** class it 's not triggered , likewise when I used a different floatbutton to **melnykov's** one the same happens and nothing is triggered . I set the view to clickable in xml , and typed the following code and no luck : `` ` java mFab.setOnClickListener ( new View.OnClickListener ( ) { @ Override public void onClick ( View v ) { // TODO Auto-generated method stub Log.v ( `` mFab1 : '' , `` Do you want change color of this button to red ? `` ) ; } } ) ; `` ` I also tried setting the floatbutton as a button and no luck . Any suggestions ? Thank you very much .
include topMargin in Scrollable 's height calculation __EoT__ # # Issue In ToolbarControl\* examples , last item ( or last few hundred pixels ) does not show up on display . for example , in ToolbarControlListViewActivity , 100th item is always hidden under the bottom navigation bar . This is because Scrollable 's height becomes longer than screen height once toolbar is hidden . # # What I did include topMargin in Scrollable 's height calculation .
CacheFragmentStatePagerAdapter crashes App __EoT__ When I used Viewpager , it works for ObservableListView , RecyclerView etc but when the phone sleeps automatically then it crashes due to the cause of - CacheFragmentStatePagerAdapter.saveState android.support.v4.app.FragmentManagerImpl.putFragment . I 've tested your example `` ViewPagerTabFragmentActivity '' even it also crashes when viewpager is at recyclerview fragment page . App does n't crash at any other ObservableView rather than RecyclerView . I tried to describe more so that it would be easy for you to solve the problem . Thanks for your excellent library .
Toolbar with Observable List View __EoT__ Hi , Thank you for this library . I 'm using it since many days , previously with Action Bar but now I have switched to Toolbar but when scrolling the ListView causes some weird scrolling feel . Like it 's moving to adjust things . I checked your samples but it had either Action Bar with Observable Scroll View or Toolbar with Sticky . I hope you get what I am saying . In short I just mean to have a smooth hiding of toolbar when scrolling though the list . Thank you .
clicks when scrolling down __EoT__ Hi , thank you for all your beautiful examples . There is a bug that is annoying , in some listview examples when the user is on the topp of the list and is trying to scroll up ( swiping down ) then the item the user first touch is clicked or if the user scrolls up ( swiping down ) and holds then the onItemLongClick will be call for the fitrst touched item . So it is too easy to click on item when the user only swipes down at the top of the list . The problem can be found at ToolbarControlListviewActivity I hope I 'm being clear about the problem : ) And another bug i found is when you scroll up and down fast then the toolbar/sticky toolbar gets stuck and you are able to see and click at the padding views at the top of the list . so both problems can be found at the same example , ToolbarControlListviewActivity with sticky view .
clicks when scrolling down __EoT__ Hi , thank you for all your beautiful examples . There is a bug that is annoying , in some listview examples when the user is on the topp of the list and is trying to scroll up ( swiping down ) then the item the user first touch is clicked or if the user scrolls up ( swiping down ) and holds then the onItemLongClick will be call for the fitrst touched item . So it is too easy to click on item when the user only swipes down at the top of the list . The problem can be found at ToolbarControlListviewActivity I hope I 'm being clear about the problem : ) And another bug i found is when you scroll up and down fast then the toolbar/sticky toolbar gets stuck and you are able to see and click at the padding views at the top of the list . so both problems can be found at the same example , ToolbarControlListviewActivity with sticky view .
clicks when scrolling down __EoT__ Hi , thank you for all your beautiful examples . There is a bug that is annoying , in some listview examples when the user is on the topp of the list and is trying to scroll up ( swiping down ) then the item the user first touch is clicked or if the user scrolls up ( swiping down ) and holds then the onItemLongClick will be call for the fitrst touched item . So it is too easy to click on item when the user only swipes down at the top of the list . The problem can be found at ToolbarControlListviewActivity I hope I 'm being clear about the problem : ) And another bug i found is when you scroll up and down fast then the toolbar/sticky toolbar gets stuck and you are able to see and click at the padding views at the top of the list . so both problems can be found at the same example , ToolbarControlListviewActivity with sticky view .
Problem with Fill Gap & ScrollVIew __EoT__ Hello . I realised in this activity when i scroll fast down or app the sticky part with the title make some move and shows the layout that scrolling below , in gill gap with recycler view this is not happening . And i have a question . Can i do ViewPagerTabActivity with fragment and no with activity ? ( I mean to extend fragment not activity and hide the supportActionbar thats the parent activity has ) ? I tried it and replace some staffs like setSupportActionBar because i had the actionbar from the activity but when i scroll up it doesnt hide . Thank you in advance
Problem with Fill Gap & ScrollVIew __EoT__ Hello . I realised in this activity when i scroll fast down or app the sticky part with the title make some move and shows the layout that scrolling below , in gill gap with recycler view this is not happening . And i have a question . Can i do ViewPagerTabActivity with fragment and no with activity ? ( I mean to extend fragment not activity and hide the supportActionbar thats the parent activity has ) ? I tried it and replace some staffs like setSupportActionBar because i had the actionbar from the activity but when i scroll up it doesnt hide . Thank you in advance
SlidingUp improvements __EoT__ Hi ! I have an idea to improve the slidingUp . When you slide the panel must appears on the top an image with parallax effect , in this way on the finish of slide we have a FlexibleSpaceWithImage , and if you continue the scroll the image disappears like your example ! What do you think ?
SlidingUp improvements __EoT__ Hi ! I have an idea to improve the slidingUp . When you slide the panel must appears on the top an image with parallax effect , in this way on the finish of slide we have a FlexibleSpaceWithImage , and if you continue the scroll the image disappears like your example ! What do you think ?
Ripples are clipped in ViewPagerTabActivity __EoT__ ! [ ] ( http : //i.imgur.com/EYBe4MG.png ) The Play Store , which presumably uses similar code with RecyclerViews , does not have this issue . I am experiencing this issue with my own app as well as the demo . To reproduce , slide to the left or right on the first or last fragments .
SlidingUp improvements __EoT__ Hi ! I have an idea to improve the slidingUp . When you slide the panel must appears on the top an image with parallax effect , in this way on the finish of slide we have a FlexibleSpaceWithImage , and if you continue the scroll the image disappears like your example ! What do you think ?
ViewPagerTabListView/RecyclerView without using dummy padding as first item ? __EoT__ Hi @ ksoichiro Sorry it 's me again . I have a problem with view pager with sliding tab layout example . The problem with current example is - sometimes when you try scroll or slide a lot , you can see the blank padding / first item . - the vertical scroll indicator become strange because there is one item hidden below the tab . - when there is swiperefreshlayout , the refresh indicator became partially visible ( hidden below the tab ) I tried to use another approach without using dummy padding item for hours but luckily i did n't get the good result : ( I found an app example , it 's not material spec but it has the similar flow of design , and i think they did correctly . Here is the link . https : //play.google.com/store/apps/details ? id=jp.gocro.smartnews.android Notice in the app when we scroll the listview/recycler down , the scrollbar does n't showup but the tabs and the content moves up then after the tab reach the top , then we can scroll the listview/recyclerview . Any ideas how to accomplish this
Issue with the RecyclerView state on Android 5.0.2 __EoT__ I 'm using ` ObservableRecyclerView ` and it works fine on Android < 5 . But when I run the same code on Lollipop , I get an exception . The RecyclerView has elements , a click on them starts another activity . When I return from that one , the app crashes with the following exception : `` ` Caused by : android.os.BadParcelableException : ClassNotFoundException when unmarshalling : android.support.v7.widget.RecyclerView $ SavedState at android.os.Parcel.readParcelableCreator ( Parcel.java:2289 ) at android.os.Parcel.readParcelable ( Parcel.java:2239 ) at android.view.AbsSavedState. < init > ( AbsSavedState.java:57 ) at android.view.View $ BaseSavedState. < init > ( View.java:20038 ) at com.github.ksoichiro.android.observablescrollview.ObservableRecyclerView $ SavedState. < init > ( ObservableRecyclerView.java:265 ) at com.github.ksoichiro.android.observablescrollview.ObservableRecyclerView $ SavedState. < init > ( ObservableRecyclerView.java:252 ) at com.github.ksoichiro.android.observablescrollview.ObservableRecyclerView $ SavedState $ 1.createFromParcel ( ObservableRecyclerView.java:304 ) at com.github.ksoichiro.android.observablescrollview.ObservableRecyclerView $ SavedState $ 1.createFromParcel ( ObservableRecyclerView.java:301 ) at android.os.Parcel.readParcelable ( Parcel.java:2246 ) at android.os.Parcel.readValue ( Parcel.java:2146 ) at android.os.Parcel.readSparseArrayInternal ( Parcel.java:2540 ) at android.os.Parcel.readSparseArray ( Parcel.java:1868 ) at android.os.Parcel.readValue ( Parcel.java:2203 ) at android.os.Parcel.readArrayMapInternal ( Parcel.java:2479 ) at android.os.BaseBundle.unparcel ( BaseBundle.java:221 ) at android.os.Bundle.getSparseParcelableArray ( Bundle.java:871 ) at com.android.internal.policy.impl.PhoneWindow.restoreHierarchyState ( PhoneWindow.java:1979 ) at android.app.Activity.onRestoreInstanceState ( Activity.java:1022 ) at android.app.Activity.performRestoreInstanceState (
Toolbar sometimes remains in inconsistent state in the demo __EoT__ Hi , firstly thanks for the great library : ) When I try implementing some samples , I found some strange things , and I also reproduced with the official demo , you can see it from the screenshot : ! [ s41213-214434 ] ( https : //cloud.githubusercontent.com/assets/1077604/5431324/b76cefca-8461-11e4-97fc-9ad281776796.jpg ) ! [ s41213-214643 ] ( https : //cloud.githubusercontent.com/assets/1077604/5431325/bbfefb0a-8461-11e4-8b52-a7c5345ca084.jpg ) You can see that the toolbar only show part of it or does n't show at all when listview or recyclerview has reached its top . These things did n't happen every time , but when you try scrolling it near the top again and again , it will happen sometime . I did some simple investigation , maybe problems are from codes below : `` ` java private void adjustToolbar ( ScrollState scrollState , View view ) { int toolbarHeight = mToolbarView.getHeight ( ) ; final Scrollable scrollView = ( Scrollable ) view.findViewById ( R.id.scroll ) ; if ( scrollView == null ) { return ; } if ( scrollState == ScrollState.UP ) { if ( toolbarHeight < scrollView.getCurrentScrollY ( ) ) { hideToolbar ( ) ; } else if (
The firstScroll and the dragging parameters of onScrollChanged ( ) event do not work properly __EoT__ Hi ksoichiro , I found a problem that ` onScrollChanged ( ) ` event does not work properly under certain condition . If child views handles ` onTouchEvent ( ) ` ( e.g . children are using ` setOnClickListener ( ) ` ) , ` onTouchEvent ( ) ` wo n't occurs at ` Obserbable*View ` anymore . I think ` onInterceptTouchEvent ( ) ` should be used for the current purpose . Thanks
The firstScroll and the dragging parameters of onScrollChanged ( ) event do not work properly __EoT__ Hi ksoichiro , I found a problem that ` onScrollChanged ( ) ` event does not work properly under certain condition . If child views handles ` onTouchEvent ( ) ` ( e.g . children are using ` setOnClickListener ( ) ` ) , ` onTouchEvent ( ) ` wo n't occurs at ` Obserbable*View ` anymore . I think ` onInterceptTouchEvent ( ) ` should be used for the current purpose . Thanks
Tiny suggestion for the samples : add android : fillViewport= '' true '' __EoT__ This is because if others will try to put smaller content ( or if the screen is large enough ) , the bottom area will look weird , as shown here : http : //www.curious-creature.com/2010/08/15/scrollviews-handy-trick/comment-page-1/
Is it possible to mimic Google I/O 14 Scroll effect ? __EoT__ Hi ! Is it possible to mimic Google I/O 14 app scroll effect as shown in this gif ? ( the right one ) http : //4.bp.blogspot.com/-9jn0pCtadO8/U9_E1mlg8CI/AAAAAAAAAt4/yr9CCSThkpg/s640/change_1.gif That effect is related to this post http : //android-developers.blogspot.com.es/2014/08/material-design-in-2014-google-io-app.html and I 've been looking through the code to find out how to implement it but I 've found it too complicated for me right now . Do you know a way of mixing your examples to achieve this effect ? Thank you for you help !
Error : ( 10 , 0 ) Cause : error=2 , No such file or directory __EoT__ Android Studio 1.0 RC 4
Flexible space fading action bar does n't work for Fragments __EoT__ Hi , EDIT : Now it 's not working for Fragments Thank you very much for this excellent library , your library has helped a lot . I found that you added new component named which has Flexible space + image + fading action bar + floating action button , this is like a complete package for me . Except that I need a ListView instead of a ScrollView . Can you help me adding a ListView instead of ScrollView ? P.S : My ListView is already a ObservableListView Thanks in advance .
Support for Sliding Tabs+ Viewpager __EoT__ Thanks for this amazing library Soichiro , I 'm curious to implement ` ToolbarControlListViewActivity ` in ` Listview ` hosted in ` Fragment ` with ` ViewPager ` setup , I 've almost achieved it , but when the toolbar goes off , there is a white space created below the list like you can see in here http : //i.imgur.com/RNvJUfY.png If you require i can provide you the code i used to do the setup . Help would be highly appreciated
RecyclerView support __EoT__
v2.3.1 __EoT__
v2.3.0 __EoT__
Yombunk3r/small code changes __EoT__ - Adding annotations to some methods so that we can get better lint warnings - Refactoring of the TabParser - Fixing a bug that will try to parse and item before checking if is a `` tab '' tag - Changing the method signatures so that they return the result instead of saving it in member variables - Adding some StringDef for the attributes so that it warns you about missing attributes - Adding missing IntDef value
Allowing drawable selectors to change icon when tab is selected __EoT__ - Setting the `` selected '' state to true when the tab is active , and false otherwise - This allows the use of DrawableSelectors in case you need to change the drawable when tab selected
Adding OnTabShouldSelectListener __EoT__ Adding a way to intercept tab selection . **EDIT** I 've added an interface ` OnTabShouldSelectListener ` with a single method ` boolean onTabShouldSelect ( @ IdRes int oldTabId , @ IdRes int newTabId ) ` . The purpose of this is to be able to add logic to stop tab changes . There may be a better name for this interface and/or method . The ` BottomBar ` checks in ` private void handleClick ( View v ) ` for a non-null ` onTabShouldSelectListener ` and calls out to it to see if it should proceed with the tab change . This technically intercepts both select and reselect . I could also break the interface into two different methods , or rename the interface to something more encompassing . Our use case is that we want to warn the user of unsaved changes before they go ( and then programmatically proceed with the tab change if they want to discard their unsaved changes ) .
fix for calculating width of tabs __EoT__ fixed faulty pixel to DP conversion , that caused first and last tab to go outside bounds of bar fixed active tab width for active element in shifting mode
Add ability to keep badges visible even when the tab is selected __EoT__ This allows the possibility of keeping the badges visible when the tab is selected this is a nice feature that existed before 2.0 and is preventing us from updating to the latest version
Avoid bar being cut at edges __EoT__ Hi , I would like to avoid the bottombar to be cut at the left and right edges . I mean to keep every icon completely inside of the screen . Is it possible ? How can be done ? Thanks in advance and sorry for my english . ! [ image ] ( https : //cloud.githubusercontent.com/assets/17174870/21989778/7e077ade-dc0c-11e6-8f7b-d019f684551f.png )
barColorWhenSelected not work ! __EoT__ I use barColorWhenSelected but no change background color of BottomBar ! i use this lib in an fragment : ` < com.roughike.bottombar.BottomBar android : id= '' @ +id/bottomBar '' android : layout_width= '' match_parent '' style= '' @ style/BB_BottomBarItem_TitleStyle '' android : layout_height= '' 60dp '' app : bb_behavior= '' shifting '' android : layout_alignParentBottom= '' true '' app : bb_tabXmlResource= '' @ xml/bottombar_tabs '' app : bb_inActiveTabAlpha= '' 0.5 '' app : bb_showShadow= '' true '' / > ` And this is my ` bottombar_tabs.xml ` ` < tabs > < tab id= '' @ +id/tab_paused '' icon= '' @ drawable/ic_play_circle '' barColorWhenSelected= '' # 00FF00 '' activeColor= '' # 00FF00 '' title= '' در حال اجرا '' / > < tab id= '' @ +id/tab_opened '' icon= '' @ drawable/ic_pause_circle '' barColorWhenSelected= '' # FFFF00 '' activeColor= '' # FFFF00 '' title= '' در حال تکمیل '' / > < tab id= '' @ +id/tab_finished '' icon= '' @ drawable/ic_stop '' barColorWhenSelected= '' # FF0000 '' activeColor= '' # FF0000 '' title= '' خاتمه یافته '' / > < tab id= '' @ +id/tab_free_level '' icon= '' @ drawable/ic_money_off '' barColorWhenSelected= '' #
Added overload for setOnSelectedTab to not fire item selection __EoT__ PR to resolve the # 584
makes animated tab select method public __EoT__ Tab change could not be animated when selecting them programmatically . The method was private .
tabs redraw width based on view not screen __EoT__ This resizes tabs according to the width of the parent view rather than the screen width . So for example , you can have a bottom tab bar on one side of a split view ( master-detail ) , if you want .
tabs redraw width based on view not screen __EoT__ This resizes tabs according to the width of the parent view rather than the screen width . So for example , you can have a bottom tab bar on one side of a split view ( master-detail ) , if you want .
Do n't load tabs if no tab resource is set __EoT__ When called with ` 0 ` , ` setItems ` throws an error , causing an ` InflationException ` .
Do n't load tabs if no tab resource is set __EoT__ When called with ` 0 ` , ` setItems ` throws an error , causing an ` InflationException ` .
Badgets are cut __EoT__ Hello I ` ve noticed that every time i ` m on tab which has badge and then I clicked the tab next to it on the right it makes the badge cut and you can see only half number
Snackbars do n't go above the bottom bar with attachShy ( ) __EoT__ I give my snackbar the root CoordinatorLayout and it was showing above the bottom bar when using just attach ( this , ... ) ( as described in the issue [ `` Snackbars should go above the bottom bar . # 36 '' ] ( https : //github.com/roughike/BottomBar/issues/36 ) ) but when I now use attachShy ( ) it overlaps the bottom bar .
Snackbars do n't go above the bottom bar with attachShy ( ) __EoT__ I give my snackbar the root CoordinatorLayout and it was showing above the bottom bar when using just attach ( this , ... ) ( as described in the issue [ `` Snackbars should go above the bottom bar . # 36 '' ] ( https : //github.com/roughike/BottomBar/issues/36 ) ) but when I now use attachShy ( ) it overlaps the bottom bar .
Snackbars do n't go above the bottom bar with attachShy ( ) __EoT__ I give my snackbar the root CoordinatorLayout and it was showing above the bottom bar when using just attach ( this , ... ) ( as described in the issue [ `` Snackbars should go above the bottom bar . # 36 '' ] ( https : //github.com/roughike/BottomBar/issues/36 ) ) but when I now use attachShy ( ) it overlaps the bottom bar .
how to use it in xml ? __EoT__ How use it in activity_main.xml file rather than in MainActivity.java ?
好像除了下载中的任务，其他状态的progress的filePath和fileName会为空 __EoT__ 如题，不清楚设计是这样还是出现了什么问题
【requestAsync方法】异步请求prepareRawCall ( ) 异常时建议 __EoT__ 1、问题描述： prepareRawCall ( ) ; 异常无法捕获，例如传递一个无效URL时， 代码查阅后，认为DefaultCachePolicy.requestAsync（）方法的catch 不太合理 2、建议修改： 2.1、代码位置 : DefaultCachePolicy.requestAsync（） , 以 DefaultCachePolicy为例 2.2、 try { prepareRawCall ( ) ; } catch ( Throwable throwable ) { onError ( Response.error ( false , rawCall , null , throwable ) ) ; return ; } 3、当前代码： try { prepareRawCall ( ) ; } catch ( Throwable throwable ) { Response.error ( false , rawCall , null , throwable ) ; return ; }
OkDownload频繁pauseAll ( ) 和start ( ) 报错： Can not perform this operation because there is no current transaction __EoT__ 06-21 15:29:34.460 8562-8562/com.led.player I/MyDownLoadService : 下载进度： fraction:0.0 DownloadLength:0 TotalLength : -1 speed:0 FileName : （3）箴言.jpg_ 06-21 15:29:34.470 8562-18047/com.led.player W/OkGo : only the task with status WAITING ( 1 ) or LOADING ( 2 ) can pause , current status is 3 06-21 15:29:34.470 8562-18047/com.led.player W/OkGo : only the task with status WAITING ( 1 ) or LOADING ( 2 ) can pause , current status is 3 06-21 15:29:34.470 8562-18047/com.led.player W/OkGo : only the task with status WAITING ( 1 ) or LOADING ( 2 ) can pause , current status is 3 06-21 15:29:34.470 8562-18047/com.led.player W/OkGo : only the task with status WAITING ( 1 ) or LOADING ( 2 ) can pause , current status is 3 06-21 15:29:34.490 8562-18047/com.led.player W/OkGo : only the task with status WAITING ( 1 ) or LOADING ( 2 ) can pause , current status is 3 06-21 15:29:34.490 8562-18047/com.led.player W/OkGo : only the task with status WAITING ( 1 ) or LOADING ( 2 ) can pause , current status is 3 06-21 15:29:34.500 8562-18047/com.led.player W/OkGo : only the task with status
只要是在下载列表中暂停，然后在开始下载，就会出现下载异常，下载进度超过百分百，优先级高！！！ __EoT__ 06-23 11:26:32.834 19359-19359/com.lzy.demo W/System.err : com.lzy.okgo.exception.OkGoException : breakpoint file has expired ! 06-23 11:26:32.836 19359-19359/com.lzy.demo W/System.err : at com.lzy.okserver.download.DownloadTask.run ( DownloadTask.java:308 ) 06-23 11:26:32.837 19359-19359/com.lzy.demo W/System.err : at com.lzy.okserver.task.PriorityRunnable.run ( PriorityRunnable.java:35 ) 06-23 11:26:32.837 19359-19359/com.lzy.demo W/System.err : at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1112 ) 06-23 11:26:32.837 19359-19359/com.lzy.demo W/System.err : at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:587 ) 06-23 11:26:32.837 19359-19359/com.lzy.demo W/System.err : at java.lang.Thread.run ( Thread.java:848 ) 06-23 11:26:32.838 19359-19359/com.lzy.demo W/System.err : com.lzy.okgo.exception.OkGoException : breakpoint file has expired ! 06-23 11:26:32.838 19359-19359/com.lzy.demo W/System.err : at com.lzy.okserver.download.DownloadTask.run ( DownloadTask.java:308 ) 06-23 11:26:32.838 19359-19359/com.lzy.demo W/System.err : at com.lzy.okserver.task.PriorityRunnable.run ( PriorityRunnable.java:35 ) 06-23 11:26:32.838 19359-19359/com.lzy.demo W/System.err : at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1112 ) 06-23 11:26:32.838 19359-19359/com.lzy.demo W/System.err : at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:587 ) 06-23 11:26:32.838 19359-19359/com.lzy.demo W/System.err : at java.lang.Thread.run ( Thread.java:848 )
OkDownload.pauseAll多线程报错，建议换成ConcurrentHashMap __EoT__ 1 java.lang.RuntimeException : Unable to start service com.led.player.download.MyDownLoadService @ 42433468 with Intent { cmp=com.led.player/.download.MyDownLoadService ( has extras ) } : java.util.ConcurrentModificationException 2 android.app.ActivityThread.handleServiceArgs ( ActivityThread.java:2673 ) 3 ... ... 4 Caused by : 5 java.util.ConcurrentModificationException : 6 java.util.LinkedHashMap $ LinkedHashIterator.nextEntry ( LinkedHashMap.java:350 ) 7 java.util.LinkedHashMap $ EntryIterator.next ( LinkedHashMap.java:379 ) 8 java.util.LinkedHashMap $ EntryIterator.next ( LinkedHashMap.java:377 ) 9 com.lzy.okserver.OkDownload.pauseAll ( OkDownload.java:126 ) 10 com.led.player.download.MyDownLoadService.pauseAllDownload ( MyDownLoadService.java:150 ) 11 com.led.player.download.MyDownLoadService.onStartCommand ( MyDownLoadService.java:116 )
文件下载的后缀名问题 __EoT__ 你好，请问可不可以修改一下下载文件后缀名的策略呢，因为我这边下载文件，响应头中没有文件名，以第二种方式，即请求url的后缀名作为文件名字，因为带有汉字，所以下载下来的是URL编码后的一串字符，如 % E % 2B.doc。我已经通过重新继承AbsCallback抽象类 , 重新实现Converter接口，以及重新写HttpUtils里面的那个方法，对url进行Url.decode解码解决这个问题，顺便给你提一下自己的想法，谢谢~~
下载管理item会错乱 __EoT__ 下载管理滑动时item会错乱 测试了demo中的，数据添加到20条 滑动也能明显看出错乱
OkGo下载一个文件出现尺寸变大和乱码问题 __EoT__ http : //jj-test.oss-cn-shanghai.aliyuncs.com/b2c % E5 % 95 % 86 % E5 % 9F % 8E % E8 % A7 % 84 % E5 % 88 % 92.docx 上面是出现问题的文件地址，可以用浏览器直接下载，文件大小是21k多。 这个文件地址使用OkGo的FileCallBack进行下载，文件总是变大很多（39k左右），而且打开后乱码。 最后我用原生OkHttp封装了一个下载，自己从Response里通过流进行读取文件才正确。 排查了半天，我没发现怎么在OkGo里面怎么解决这个问题。
手动删除已下载的文件 , 列表显示已完成 , 没有更新 , 建议读数据库的时候判断下这个文件是否存在 __EoT__
不支持Content-Disposition : attachment ; filename*= __EoT__ 看到源代码中只处理了Content-Disposition : attachment ; filename=FileName.txt这种类型的。 比如这种Header就不能正确处理，希望能够解决一下，支持编码 Content-Disposition : attachment ; filename*= '' UTF-8 '' 3777-12281001 % E6 % 9F % BB % E6 % 98 % 8E % E6 % 98 % 8E_Linux % E5 % 91 % BD % E4 % BB % A4 % E8 % A7 % A3 % E9 % 87 % 8A % E5 % 99 % A8 % E8 % AE % BE % E8 % AE % A1 % E4 % B8 % 8EShell % E6 % 9B % BF % E6 % 8D % A2 % E5 % AE % 9E % E9 % AA % 8C % E6 % 8A % A5 % E5 % 91 % 8A.pdf '' ` private static String getHeaderFileName ( Response response ) { String dispositionHeader = response.header ( HttpHeaders.HEAD_KEY_CONTENT_DISPOSITION ) ; if ( dispositionHeader ! = null ) { String split = `` filename= '' ; int indexOf = dispositionHeader.indexOf ( split ) ; if ( indexOf ! = -1 ) { String fileName = dispositionHeader.substring ( indexOf + split.length ( ) , dispositionHeader.length ( ) ) ; fileName = fileName.replaceAll ( `` \ '' '' , `` ''
您好，关于缓存，我单个接口接口中设置缓存时间 __EoT__ 情况是这样的，我在application设置缓存模式是没有网络读缓存，有网络走服务器，然后为个别接口设置了缓存时间，设置了1毫秒。我是这样测试的，第一次有网。从服务器获取数据，做缓存。断开网络，这回缓存应该过期了，但是他还是读取出来了数据。 //application中 private void initHttpModule ( ) { OkGo.init ( this ) ; OkGo.getInstance ( ) .debug ( `` Ecs '' ) .setCacheMode ( CacheMode.REQUEST_FAILED_READ_CACHE ) ; } //fragment中 String postData = CipherUtils.encode ( jsonObject ) ; HttpUtils.post ( `` http : //weixin.1000jd.com/home/parts/listParts '' , postData , cacheTime , new StringCallback ( ) { @ Override public void onSuccess ( String s , Call call , Response response ) { Log.i ( `` Ecs '' , s ) ; } `` ` @ Override public void onError ( Call call , Response response , Exception e ) { Log.i ( `` Ecs '' , '' Error '' + e.getMessage ( ) ) ; } } ) ; `` `
apk 下载有点问题 __EoT__ 刚下载安装apk看来一下，多任务下载，点击详情里面的 下载就蹦了，可以看下
apk 下载有点问题 __EoT__ 刚下载安装apk看来一下，多任务下载，点击详情里面的 下载就蹦了，可以看下
v1.12 Logger.json cause nullpoint exception but v1.11 is OK __EoT__ `` ` public void getBonusData ( ) { String url = HttpUrl.CLIST ; Map < String , String > args = new HashMap < > ( ) ; args.put ( `` type '' , `` 1 '' ) ; HttpRequest httpRequest = new HttpRequest ( `` CLIST_BONUS '' ) ; httpRequest.postRequest ( url , args , new HttpResponse ( ) { @ Override public void onSucceedResponse ( String response ) { Logger.json ( response ) ; } @ Override public void onErrorResponse ( VolleyError error ) { Logger.t ( `` CLIST_BONUS '' ) .d ( error.toString ( ) ) ; } } ) ; } `` ` 12-22 16:05:11.341 12284-12284/com.hangzhuangyuan.employee E/AndroidRuntime : FATAL EXCEPTION : main Process : com.hangzhuangyuan.employee , PID : 12284 java.lang.NullPointerException at com.orhanobut.logger.LoggerPrinter.log ( LoggerPrinter.java:204 ) at com.orhanobut.logger.LoggerPrinter.d ( LoggerPrinter.java:110 ) at com.orhanobut.logger.LoggerPrinter.json ( LoggerPrinter.java:160 ) at com.orhanobut.logger.Logger.json ( Logger.java:86 ) at com.hangzhuangyuan.employee.fragment.BonusFragment $ 1.onSucceedResponse ( BonusFragment.java:52 ) at com.hangzhuangyuan.employee.network.HttpRequest $ 1.onResponse ( HttpRequest.java:33 ) at com.hangzhuangyuan.employee.network.HttpRequest $ 1.onResponse ( HttpRequest.java:30 ) at com.android.volley.toolbox.StringRequest.deliverResponse ( StringRequest.java:67 ) at com.android.volley.toolbox.StringRequest.deliverResponse ( StringRequest.java:30 ) at com.android.volley.ExecutorDelivery $ ResponseDeliveryRunnable.run ( ExecutorDelivery.java:99 ) at android.os.Handler.handleCallback ( Handler.java:733 ) at android.os.Handler.dispatchMessage (
`` Can not call this method in a scroll callback '' warning in the home screen __EoT__ Noticed this warning while messing around with the dev build : `` ` 10-23 06:43:00.243 21023-21023/io.plaidapp W/RecyclerView : Can not call this method in a scroll callback . Scroll callbacks mightbe run during a measure & layout pass where you can not change theRecyclerView data . Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame . java.lang.IllegalStateException : android.support.v7.widget.RecyclerView { d993774 VFED.V ... .F ... .ID 0,0-1440,2560 # 7f0b0070 app : id/grid } , adapter : io.plaidapp.ui.FeedAdapter @ da249d , layout : android.support.v7.widget.GridLayoutManager @ 2779d12 , context : io.plaidapp.ui.HomeActivity @ cb58ce3 at android.support.v7.widget.RecyclerView.assertNotInLayoutOrScroll ( RecyclerView.java:2673 ) at android.support.v7.widget.RecyclerView $ RecyclerViewDataObserver.onItemRangeInserted ( RecyclerView.java:5074 ) at android.support.v7.widget.RecyclerView $ AdapterDataObservable.notifyItemRangeInserted ( RecyclerView.java:11564 ) at android.support.v7.widget.RecyclerView $ Adapter.notifyItemInserted ( RecyclerView.java:6871 ) at io.plaidapp.ui.FeedAdapter.dataStartedLoading ( FeedAdapter.java:669 ) at io.plaidapp.data.BaseDataManager.dispatchLoadingStartedCallbacks ( BaseDataManager.java:143 ) at io.plaidapp.data.BaseDataManager.loadStarted ( BaseDataManager.java:114 ) at io.plaidapp.data.DataManager.loadSource ( DataManager.java:95 ) at io.plaidapp.data.DataManager.loadAllDataSources ( DataManager.java:60 ) at io.plaidapp.ui.HomeActivity $ 4.onLoadMore ( HomeActivity.java:189 ) at io.plaidapp.ui.recyclerview.InfiniteScrollListener.onScrolled ( InfiniteScrollListener.java:54 ) at android.support.v7.widget.RecyclerView.dispatchOnScrolled ( RecyclerView.java:4722 ) at android.support.v7.widget.RecyclerView.dispatchLayoutStep3 ( RecyclerView.java:3789 ) at android.support.v7.widget.RecyclerView.dispatchLayout ( RecyclerView.java:3421 ) at android.support.v7.widget.RecyclerView.consumePendingUpdateOperations (
[ 内存泄露 ] Anonymous runnable causes memory leak __EoT__ in.srain.cube.views.ptr.PtrFrameLayout $ 2.this $ 0 ( anonymous class implements java.lang.Runnable ) 使用了LeakCanary , 发现PtrFrameLayout中的匿名Runnable持有Activity的引用 , 造成了内存泄露 , 望测试 .
memory leak __EoT__ I put a Fragment inside PtrClassicFrameLayout.When I finish my Activity , I found the Activity still in memory . This is the analyze result from MAT . ! [ image ] ( https : //cloud.githubusercontent.com/assets/8686438/7896611/f12dd244-06f0-11e5-84d9-e36256b04704.png )
add demo for scrollview __EoT__
NullPointerException sendCancelEvent 必现 __EoT__ ［重现步骤］ : 进入列表后快速不停的点击屏幕 ［Logcat］ 这是在我的应用中碰到的crash , 版本是1.0.9 : 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : java.lang.NullPointerException 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at in.srain.cube.views.ptr.PtrFrameLayout.sendCancelEvent ( PtrFrameLayout.java:895 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at in.srain.cube.views.ptr.PtrFrameLayout.updatePos ( PtrFrameLayout.java:373 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at in.srain.cube.views.ptr.PtrFrameLayout.movePos ( PtrFrameLayout.java:360 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at in.srain.cube.views.ptr.PtrFrameLayout.access $ 400 ( PtrFrameLayout.java:17 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at in.srain.cube.views.ptr.PtrFrameLayout $ ScrollChecker.run ( PtrFrameLayout.java:953 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at android.os.Handler.handleCallback ( Handler.java:733 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at android.os.Handler.dispatchMessage ( Handler.java:95 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at android.os.Looper.loop ( Looper.java:136 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at android.app.ActivityThread.main ( ActivityThread.java:5111 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at java.lang.reflect.Method.invokeNative ( Native Method ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at java.lang.reflect.Method.invoke ( Method.java:515 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:806 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:622 ) 06-09 15:53:12.582 E/AndroidRuntime ( 19083 ) : at dalvik.system.NativeStart.main ( Native Method ) 06-09 15:53:14.972 D/AndroidRuntime (
希望增加 ‘ 当前是否正在刷新 ’ 的方法 __EoT__ 类似Android-PullToRefresh的 `` ` boolean isRefreshing ( ) `` ` 简单的标识当前的刷新状态
Add badge for android-gems.com __EoT__
希望增加 ‘ 当前是否正在刷新 ’ 的方法 __EoT__ 类似Android-PullToRefresh的 `` ` boolean isRefreshing ( ) `` ` 简单的标识当前的刷新状态
Add badge for android-gems.com __EoT__
Add badge for android-gems.com __EoT__
Code clean __EoT__ For code clean purpose , it 's better to move ` RentalsSunDrawable ` and ` RentalsSunHeaderView ` to sample module , since _Rentals Sun Style_ is a special use case , and as a library it 's not appropriate . @ liaohuqiu how do you think ?
fix typo __EoT__
Enable Next PTR at Once __EoT__ At current design , only after ` PtrUIHandler.onUIReset ` has been called , the next ` PTR ` can be performed . Now , I 've add a method ` setEnabledNextPtrAtOnce ` for this feature .
Get NoClassDefFoundError : in.srain.cube.util.CLog ’ when I use RentalsSunHeaderView without clog.jar __EoT__ I use the library in gradle way ` compile 'in.srain.cube : ultra-ptr:1.0.8 @ aar ' ` .Everything runs fine when I use MaterialHeader or StoreHouseHeader while if I use RentalsSunHeaderView I will get a error ` java.lang.NoClassDefFoundError : in.srain.cube.util.CLog ` . If I add the clog.jar it will be OK but I do n't think it is a good idea to import other jar besides the aar in the project . Thank you very much .
How do I add listview with emptyview ? the PtrFrameLayout only can host 2 elements __EoT__ `` ` < in.srain.cube.views.ptr.PtrClassicFrameLayout android : id= '' @ +id/rotate_header_list_view_frame '' xmlns : cube_ptr= '' http : //schemas.android.com/apk/res-auto '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : background= '' @ color/white '' cube_ptr : ptr_duration_to_close= '' 200 '' cube_ptr : ptr_duration_to_close_header= '' 1000 '' cube_ptr : ptr_keep_header_when_refresh= '' true '' cube_ptr : ptr_pull_to_fresh= '' false '' cube_ptr : ptr_ratio_of_header_height_to_refresh= '' 1.2 '' cube_ptr : ptr_resistance= '' 1.7 '' > < ListView android : id= '' @ +id/rotate_header_list_view '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' android : background= '' @ color/primary '' android : divider= '' @ null '' android : fadingEdge= '' none '' android : listSelector= '' @ android : color/transparent '' android : paddingLeft= '' 12dp '' android : paddingRight= '' 12dp '' android : scrollbarStyle= '' outsideOverlay '' android : choiceMode= '' singleChoice '' / > < TextView android : id= '' @ +id/empty '' android : text= '' empty view '' android : layout_width= '' wrap_content '' android : layout_height= '' wrap_content '' / > < /in.srain.cube.views.ptr.PtrClassicFrameLayout >
the press state can not be removed automatically when pull down with button pressed __EoT__
using a hook to catch refresh complete . __EoT__ Sometimes we need play an animation before onUIRefreshComplete been triggered .
Decide the UI when perform auto refresh . __EoT__
Transformer strips similar named methods __EoT__ The library-transformer strips all methods marked ` @ ObjectServer ` . Unfortunately , it seems it also strips similar named methods even though they do n't have this annotation . In this case ` ObjectServerFacade.init ( Context , String ) ` . Renaming the internal method is the quickest way to make 5.8.0 ready for release . I 'll be making a fix for the behaviour after the release .
Fix Gradle cache not working in parallel builds __EoT__
Add support for bulk updating fields in query results __EoT__ Closes # 762 **CM : ** This PR adds methods for updating all objects using a dynamic like API . * The API methods mirrors the ones found in ` DynamicRealmObject ` , i.e . methods for all non-nullable types like ` setLong ( fieldName , long ) ` , ` setNull ( fieldName ) ` and ` setValue ( fieldName , Object ) ` that does automatic type conversion . * It currently depends on functionality found in # 6224 , which is why it is using it as base . Rebase once it is merged . * Only first-level properties are supported in this iteration , i.e you can not do something like ` realm.where ( Person.class ) .findAll ( ) .setString ( `` dog.name '' , `` Fido '' ) ` . TODO - [ x ] Add support for Lists using ` OsObjectBuilder ` + tests - [ x ] Hook native code up to ` JavaContext ` - [ x ] Add tests for all types - [ x ] Updating linked fields will not be supported in first iteration . Make issue for tracking
PR feedback __EoT__ Fixing a few minor things /cc @ nhachicha
Add support for uploading and downloading changes with a timeout __EoT__ Closes https : //github.com/realm/realm-java/issues/6247 This PR adds two convenience methods overrides for ` SyncSession.downloadAllServerChanges ( ) ` and ` SyncSession.uploadAllLocalChanges ( ) ` so they will now terminate if a timeout is hit . This will make it a lot easier to implement sync logic that is guaranteed to proceed after a given period without having to resort to external synchronization This PR also add support for ` SyncConfiguration.waitForInitialRemoteData ( timeout , unit ) ` as it uses the above helper methods .
Add support for latest version of Sync __EoT__ This upgrades all dependencies to latest version of Sync . This will also enable setting the user agent . This API will be added in another API shortly .
Ignore same values when using copyToRealm __EoT__ This PR changes the implementation of ` copyToRealm ` to use Object Stores ` Object : :create ` method . This allows us to ignore fields with the same value . Currently this generates a lot of extra set instructions when syncing Realms which has a negative performance impact on the server . A side-effect of this is also that using this method fine-grained notifications will not report any changes for this field . However this is only true if using ` copyToRealm ` or ` copyToRealmOrUpdate ` Implementation is done by adding a new ` OsObjectBuilder ` class that will build up a list of data on the C++ side before creating the whole thing . From the user API side , we have a new ` ImportFlag ` enum . Enums are being used instead of booleans or int flags since that mirros the API used by ` RealmObjectSchema ` for specifying field properties . It also has the upside of being more typesafe ( plus I strongly suspect more flags in the future ) . `` ` // New enum enum ImportFlag { DO_NOT_SET_SAME_VALUES } // Usage realm.copyToRealm ( object
Expose subscriptions more directly __EoT__ Expose Subscriptions more directly , so it is easier to create , find and remove them . This mirrors the API 's in https : //github.com/realm/realm-js/pull/2060 but exposes the Subscription class more directly as it makes it easier to query , list and manipulate the subscriptions . * Added new ` Subscription ` model class that represents ` __ResultSets ` objects . * Added ` Realm.getSubscriptions ( ) ` , ` Realm.getSubscriptions ( String pattern ) ` , ` Realm.getSubscription ( String name ) ` . • Added ` RealmQuery.subscribe ( ) ` that creates the subscription directly ( requires a write transaction ) . * If ` SyncConfiguration.waitForInitialRemoteData ( ) ` is set and ` SyncConfiguration.initialData ( ) ` creates subscriptions , the Realm is n't opened until the subscriptions have downloaded data . TODO : - [ x ] Changelog - [ x ] Merge https : //github.com/realm/realm-object-store/pull/701 and switch back to using OS master - [ x ] Fix https : //github.com/realm/realm-object-store/pull/698 - [ x ] Add tests for initialData and getInstanceAsync - [ x ] Added tests for Subscription class .
Fix initial listener not triggering for query-based listeners __EoT__ Closes https : //github.com/realm/realm-java/issues/6235 This bug caused the INITIAL callback from Object Store to never trigger for Query-based Realms . For devices that only created a query , this could mean they never saw the callback until the device came online as that caused a write from the server triggering the listener again . From the perspective of the user they still got the INITIAL callback , but only for the 2nd callback from Object Store .
Better GitHub templates __EoT__ Improve the templates used on GitHub
Fix Bintray upload __EoT__ Uploading to Bintray apparently broke when upgrading Gradle and our other dependencies . This should fix it . It was tested in the 5.6.0 and 5.7.0 releases .
Support ROS protocol v25 __EoT__ _DO NOT MERGE UNTIL 5.6.0 HAS BEEN RELEASED_ Release PR for supporting protocol v25 .
Add findOrCreate helper methods __EoT__ This mirrors API methods found in the Swift and Objective-C API 's . In their case it exists on the ` RealmList < Permission > ` object , but 1 ) That is an extension method on the ` RealmList < Permission > ` only , which is impossible to achieve in Java unless we subclass ` RealmList ` . This is achievable and we need to do it to support the ACL property better anyway , but ... . 2 ) It is also much harder to do and is one extra level of indirection on ` RealmPermissions ` and ` ClassPermissions ` so having it directly on those classes will be nicer anyway .
Support LIMIT __EoT__ Closes # 544 This PR adds support for the keyword LIMIT when making queries . Note , that OFFSET is still not supported . Core 5.8.0 has not yet been released , so this can not be completed until that has happend - [ x ] Refactor descriptors to use Cores DescriptorOrdering - [ x ] Refactor Java ` SortDescriptor ` to better named ` FieldDescriptor ` or similar ( FieldDescriptor was already taken , renamed to QueryDescriptor ) . - [ x ] Update to Sync/Core release with support for LIMIT - [ x ] Extend DescriptorOrdering class with correct API calls for specifying the limit - [ x ] Add public LIMIT API - [ x ] Add query tests - [ x ] Add notification tests - [ x ] Add subscription tests - [ x ] Update ObjectStore to support notifications
Fix OJO upload __EoT__ Closes # 6174 * Modified build scripts so shared dependencies are only defined once * Bumped to the latest versions of publishing plugins to ensure compatibility with Gradle 4.9 Tested by uploading locally to OJO
Fix base unit tests __EoT__ The build transformer did not correctly keep annotations for unit test files . Most importantly it removed the ` @ Rule ` annotation which broke pretty much all base unit tests . This was also what we saw in the Core 6 branch .
Update CHANGELOG.md __EoT__ @ cmelchior : Missing when the bug that was fixed was introduced . Merge when fixed .
Upgrade build tool dependencies . __EoT__
Fix various lifecycle issues with tests __EoT__ Fixes # 6138 Fixes # 6137 This PR fixes various lifecycle issues with tests introduced with # 6131 It also includes a workaround so we can correctly store ros-logs . However the logs are only pulled once ROS is shut down , so I suspect in some cases we might not get logs . We should continue to investigate ways of seeing the logs in real time .
Upgrade to Sync 3.9.4 __EoT__
Add support for custom headers for improved proxy support . __EoT__ Closes https : //github.com/realm/realm-java-private/issues/236 This PR improves proxy support for the Realm Object Server by adding the following API 's : `` ` // SyncManager SyncManager.addCustomRequestHeader ( String header , String headerValue ) ; SyncManager.addCustomRequestHeader ( String header , String headerValue , String host ) ; SyncManager.addCustomRequestHeaders ( Map < String , String > headers ) ; SyncManager.addCustomRequestHeaders ( Map < String , String > headers , String host ) ; SyncManager.setAuthorizationHeaderName ( String headerName ) ; SyncManager.setAuthorizationHeaderName ( String headerName , String host ) ; // SyncConfiguration.Builder SyncConfiguration.Builder urlPrefix ( String urlPrefix ) ; `` ` The API mirrors the one available in Swift + adds the capability to define headers for selected hosts only . See https : //docs.realm.io/platform/guides/learn-realm-sync-and-integrate-with-a-proxy # adding-a-custom-proxy **TESTING** : `` ` Sync protocol : From Logcat with different auth header + prefix 08-29 10:01:02.059 10666-10692/io.realm.test V/REALM_SYNC : Connection [ 1 ] : HTTP request = GET /foo/ % 2Fdefault % 2F__partial % 2F516d643ff4363a8eecb2e6c16aa84f75 % 2Fbb54a0f71d1682d8dbc7cf0bca13f52473a48e6a HTTP/1.1 Connection : Upgrade Host : 127.0.0.1 Sec-WebSocket-Key : hVzyMIEtInK3V0tUc7yRjg== Sec-WebSocket-Protocol : io.realm.sync.24 Sec-WebSocket-Version : 13 TestAuth : Realm-Access-Token version=1 token= '' eyJhcHBfaWQiOiJpby5yZWFsbS50ZXN0IiwiaWRlbnRpdHkiOiI1MTZkNjQzZmY0MzYzYThlZWNiMmU2YzE2YWE4NGY3NSIsImFjY2VzcyI6WyJkb3dubG9hZCIsInVwbG9hZCJdLCJzYWx0IjoiNmVkMDBjZTkiLCJleHBpcmVzIjoxNTM1NTM2ODgyLCJwYXRoIjoiL2RlZmF1bHQvX19wYXJ0aWFsLzUxNmQ2NDNmZjQzNjNhOGVlY2IyZTZjMTZhYTg0Zjc1L2JiNTRhMGY3MWQxNjgyZDhkYmM3Y2YwYmNhMTNmNTI0NzNhNDhlNmEiLCJzeW5jX2xhYmVsIjoiZGVmYXVsdCJ9 : AGmdmj8PtEIpFjuPNZgZFegzs0D6cOAg/EfgGnwppQgt83GrUDrRjm/wtouBGv94EF+rYavz29B7K+YkN56qGntCumUrwAEHmZURVmebjdk4gxX0W17F9yRM7kLt3OX7928iCaIAjagnWpmvGZXtead7QYqzm+N1HFr9Ayw7mnQf95VKztBm+FknsGxG/Ctercx8nr+GYWYFyhGUZS6kG40eZkoACvyIqc3sxWsjlfmIPpG7NMbQuICovfQhs2L4Sk2clJkwNtnwcUpUsz0peGK4QD4KG+gN7akrTWbTQBCTMl8/ZTZdXNQsFeODv1/ZLWqjMaINw9bol2BmKc/cxg== '' Upgrade :
Add support for Sync 3.9.3 __EoT__ Still WIP Core 5.8.0 introduced some changes incompatible with ObjectStore . See https : //github.com/realm/realm-object-store/pull/691
Added support for stopping and starting a session __EoT__ Closes : https : //github.com/realm/realm-java-private/issues/235 This PR adds support for manually stopping and starting a session . The session lifecycle is still tied to the Realm though . Changing that will be a major refactor of the SyncSession in Object Store . This approach just uses existing methods on the underlying session that already have the semantics we desire . Calling ` log_out ( ) ` is probably a bit heavy-handed since it will also clear the access token , but caching the token in ObjectStore did n't seem worth it as we probably need to do a full refactor of the Session anyway . This means that using this approach there is currently the overhead of an extra HTTP request when calling ` stop/start ( ) ` . **TODO : ** - [ x ] Public API - [ x ] Integration tests - [ x ] Unit tests - [ x ] Cleanup
Add support for Realm.syncSession as an extension method __EoT__ Makes it easier in Kotlin to get to the SyncSession .
Optimizing the methods 'copyFromRealm ' , 'copyToRealmOrUpdate ' and 'co… __EoT__ ArrayList unmanagedObjects ; if ( realmObjects instanceof Collection ) { unmanagedObjects = new ArrayList < > ( ( ( Collection ) realmObjects ) .size ( ) ) ; } else { unmanagedObjects = new ArrayList < > ( ) ; }
Make ObjectServerExample more accessible __EoT__ Ran into this while testing https : //github.com/realm/realm-java/pull/6110 Previously the example depended on a local version of ROS running , but testing using Cloud is much simpler , so the example was modified to work when you just copy the instance URL from the web UI . The actual demo actually also did n't work correctly since it used ` findFirstAsync ( ) ` instead of ` findAllAsync ( ) ` meaning that no subscription was ever created .
Correctly keep members of OsSubscription __EoT__ Closes https : //github.com/realm/realm-java-private/issues/234
Add Build Transformer stripping Sync methods __EoT__ Fixes https : //github.com/realm/realm-java/issues/5799 Replaces https : //github.com/realm/realm-java/pull/6038 . We should move the ` getSession ` method back to Java and annotate it with ` @ ObjectServer ` once this is merged . This adds a transformer only used when building the Realm library . It will remove all traces of any class/method/field annotated with the ` @ ObjectServer ` annotation when building the ` base ` variant while keeping them when building the ` objectServer ` variant . It does so using ASM which is more low level than JavaAssist , but also faster because we do n't have to load all classes into a shared classpool . This allows us to emulate Kotlin extension functions at the Java layer which can make it a lot easier to introduce new sync API 's . It should not matter that there are bytecode differences between ` base ` and ` objectServer ` libraries as trying to include them both today would already result in ` Duplicate class definition ` errors . The transformer does not need to be published on BinTray since it is only used internally when building Realm . TODO :
Upgrade Sync and ROS __EoT__
Fix nullpointer when using RealmTransformer __EoT__ Closes # 6082 Converts the util functions to Kotlin and added extra crash safety when sending analytics ( basically , we should never crash no matter what goes wrong ) . Now all exceptions are just silently logged to the debug log .
Fix dependencies being changed too late . __EoT__ Closes # 6080 TODO - [ x ] Figure out how to change dependencies at configuration time ( Gradle 🤕 )
Upgraded Sync/Core/ROS dependencies __EoT__
Incremental build causing direct access to model without accessor to fail __EoT__ https : //github.com/realm/realm-java/issues/6056 revealed an issue with the incremental build that causes the bytecode to not replace access to fields with the generated accessor . The issue was in ` FieldAccessToAccessorConverterUsingClassPool ` which excluded by error a legitmate fields from being processed since ` isRealmModelClass ( fieldAccess.enclosingClass ) ` was returing ` false ` , which is wrong since the ` enclosingClass ` is not the class that we want to make sure it 's a valid Realm model but rather ` fieldAccess.className ` . In the example [ project ] ( https : //github.com/realm/realm-java/issues/6056 # issuecomment-403865389 ) this translate into excluding changes to ` com.bilal.realmerrorrecreate.MyRealmModel.minAge ` field for instance since its enclosing class is ` com.bilal.realmerrorrecreate.MainActivity ` which is indeed not a Realm model .
Fix bug when using distinct ( ) and count ( ) __EoT__ Fixes # 5958
Fix analytics not being sent __EoT__ This also fixed an invalid cast that was n't detected before because the code path was never touched .
Remove reliance on groovy in realm-transformer __EoT__ Ref # 3971
Fix Realm.deleteAll ( ) and Realm.isEmpty ( ) __EoT__ Closes # 5745 This PR fixes ` Realm.deleteAll ( ) ` and ` Realm.isEmpty ( ) ` so they now respect the defined schema . This is important if the schema is only a subset of the actual tables found in the Realm . This means that ` deleteAll ( ) ` will only delete the schema defined and ` isEmpty ( ) ` will only return the result based on the defined schema as well . TODO : - [ ] Determine what to do about system classes in synced Realms , ie . ` __ResultSets ` and ` __Class ` . In the old behaviour they were ignored for ` Realm.isEmpty ( ) ` but cleared when doing ` Realm.deleteAll ( ) ` . This feels inconsistent . I think I lean towards ignoring them in both cases .
Fix rare native crash __EoT__ Closes # 5300
Enable compact for synchronized Realms __EoT__ Fixes # 5937
Removed volatile keyword __EoT__ Why volatile variable is here ? Look like the variable using only in synchronized block . Synchronized block ensure atomicity and visibility for the variable in this case https : //docs.oracle.com/javase/specs/jls/se7/html/jls-17.html # jls-17.4.5 .
Prevent monkey from using system events __EoT__ Before this PR monkey could send system events which regularly caused test failures not related to Realm , e.g . if the monkey switched to the guest account . With this change , all events should be in-app . It might cause a few subtle errors to never be exposed , but any such errors would be related to us implementing an example project wrong ( e.g . with respect to the lifecycle ) and not to Realm as such .
Add getRealm methods __EoT__ Closes # 5997 We already had ` RealmObject.getRealm ( ) ` this adds the same methods to ` RealmList ` , ` RealmResults ` , ` RealmQuery ` and ` OrderedRealmCollectionSnapshot ` .
Use new API for getting configurations . __EoT__
Enable incremental builds in the RealmTransformer __EoT__ Closes # 3034 Closes # 3709 This PR enables incremental builds in the RealmTransformer , massively decreasing the time spend there in some cases . Preliminary testing shows that it works , but some corner cases do exists . We need to flesh those out . **Known bugs / corner cases** * Changing a model field to ` @ Ignore ` will not include classes using that field in the incremental build . Depending on the situation , it will either look like the field fails to load the value from Realm or crashes with a missing method exception . To fix this I suspect that we need to trigger a full transform whenever a Realm model class is changed . This needs to be investigated further . Alternatively , if the only corner cases we have is this one , we could consider just documenting it in the FAQ , since it probably is n't something people will run into a lot , and triggering a full transform every time a model class is modified is pretty painful . * Adding or removing the ` transient ` keyword is the same as
Improved performance when parsing field descriptions __EoT__ Fixes # 5547
Post size metrics to our own InfluxDB server __EoT__ Data will be transferred from the old instance as well
Migration that changes primary key deletes rows __EoT__ Closes # 5899 Root cause : When changing nullability status on a field , we actually do it by creating a new column , move all data there and then delete the old column . This is a problem in the context of primary keys for the following reason : Use case : Change primary key int column from nullable to required . 1 ) create tmp int column : All rows will have the 0 value default value ( which actually violates the pk constraint ) 2 ) Start moving values from the old column to the new row by row . This is done using a special ` set_unique ` instruction . If 0 was present in the old column , we will now do a ` set_unique_int ( col , row , 0 ) ` , but since all rows have the 0 value , the result is that the rows are collapsed causing data loss . Solution : Since changing nullability is only supported for non-sync Realms anyway , there should n't be any harm i in not using the ` set_unique ` method , since the pk
Add support for resetting password and email confirmation . __EoT__ Closes # 5821 TODO - [ x ] Tests - [ x ] Public Javadoc - [ x ] Run tests Tests are currently disabled and waiting for # 5909 to complete before we can enable them . They have all been run manually and succesfully against a cloud instance .
Support empty input to in and alwaysTrue and alwaysFalse __EoT__ Closes # 4011 This PR will make our ` in ( ) ` operator mirror Cocoas equivalent where parsing in no values and treat it as `` always false '' . At the same time I added support for two new predicates : ` alwaysTrue ( ) ` and ` alwaysFalse ( ) ` ` alwaysFalse ( ) ` is used by ` in ( ) ` . ` alwaysTrue ( ) ` is n't terrible useful outside generic code going down a branch in a 'or ( ) ` expression , but it also provides symmetri . See https : //github.com/realm/realm-java/issues/3238 # issue-168877473 Naming the operators was n't that easy , but in the end , I opted for the naming also used in Guava https : //google.github.io/guava/releases/snapshot/api/docs/com/google/common/base/Predicates.html It seems more descriptive in our query language than both ` .trueExpression ( ) ` or ` .truePredicate ( ) `
Add script to help unrolling crash reports __EoT__ This script is a helper script when unrolling stacktraces provided by users making the process a lot less manual , as it is especially tedious to find and download the unstripped versions of Realm . Example of usage : `` ` = > sh unroll_stacktrace.sh base 3.5.0 armeabi-v7a ./dump.txt Unrolling /Users/cm/Realm/realm-java/tools/./dump.txt from Realm Java 3.5.0 ( base ) using ABI armeabi-v7a ********** Crash dump : ********** Build fingerprint : 'google/sailfish/sailfish:7.1.2/NJH47F/4146041 : user/release-keys' pid : 28302 , tid : 28302 , name : com.anghami > > > com.anghami < < < signal 11 ( SIGSEGV ) , code 1 ( SEGV_MAPERR ) , fault addr 0xae47ffff Stack frame # 00 pc 00018acc /system/lib/libc.so ( memmove+444 ) Stack frame # 01 pc 0012fc8d /data/app/com.anghami-1/lib/arm/librealm-jni.so : Routine realm : :ArrayBlob : :replace ( unsigned int , unsigned int , char const* , unsigned int , bool ) at libgcc2.c : ? Stack frame # 02 pc 00130323 /data/app/com.anghami-1/lib/arm/librealm-jni.so : Routine realm : :ArrayStringLong : :insert ( unsigned int , realm : :StringData ) at libgcc2.c : ? Stack frame # 03 pc 00130673 /data/app/com.anghami-1/lib/arm/librealm-jni.so : Routine realm : :ArrayStringLong : :bptree_leaf_insert ( unsigned int ,
Fix AAR size not being reported correctly __EoT__ 10 steps back and 11 forward . After a lot of detours I discovered that Zaki added a small optimization which meant that if ` PbuildTargetABIs ` was set to to the empty string , all ABI 's where being filtered , resulting in only metrics for the Java code being sent to the server ( which also explains why only a a few hundred kb was being reported for the full AAR ) . To fix this , we now only set ` PbuildTargetABIs ` if it has a value .
Nh/fixes local ref overflow __EoT__ - Some callbacks from the Sync Client Thread were called multiple times ( to validate SSL certificate , error notification or to retrieve the access_token ) which may cause the local JNI table to overflow ( fixes # 5880 ) - Update ROS & Sync client to the latest
Fix RealmList.move ( ) for unmanaged lists __EoT__ Fixes # 5860 Apparently , a brain fart was made in the unit test for this resulting in a wrong implementation compared to the managed list . Tests have been modified to make sure they test the same behaviour in both managed and unmanaged mode .
RealmObject.isValid now returns the correct value for the null argument . __EoT__ Fixes # 5865
Fix SyncSession tests __EoT__ **Changes : ** * ` SyncManager.NETWORK_THREAD_POOL ` is now public * Will now shutdown and close the network thread pool before exiting tests that log all users out ( which result in network requests ) * Object Level Permission tests now depend on the global default Realm instead of trying to create one themselves ( which often fail because of the ` PermissionManager ` being laky ) .
SyncConfiguration # automatic to use the host port __EoT__
add architectureComponentsExample __EoT__ Added an example project that uses ArchitectureComponents ( ` ViewModel ` and ` LiveData ` ) . I think that I should update the UI and output fancier .
Update json example __EoT__ I ca n't help but feel like I 've seen this example before ... . so things that applies to ` gridView example ` apply to this one too . 😄
Update GridView example __EoT__ Base : Master . You guys probably know which branch this is supposed to go on . Currently the GridView example was written by rlwaldrop in 2014.09 , and it was never updated beyond adding ` Realm.init ( Context ) ` . So it had some pretty bad practices regarding current-day Realm usage . So I updated it .
Update Kotlin sample __EoT__ Base : Master , and this is also eerily familiar . Although I made less changes to it than I did do the intro version .
Update Intro example __EoT__ Base : Master , you guys know what this branch should go on . The intro example was kinda old , so I did some magic to it . Added a RealmChangeListener , a RealmList < String > , an ` @ Index ` , a ` @ PrimaryKey ` , things like that . I did preserve its initial scenarios , though .
Update dependencies __EoT__
deleteRealm throwing in loginLogoutResumeSyncing __EoT__ - Fixed Changelog entries - Workaround deleteRealm throwing in ` loginLogoutResumeSyncing ` sometimes ( due to https : //github.com/realm/realm-java/issues/5416 )
Better exception message if non model class is provided __EoT__ Fixes # 5779
Align Sync API 's with Cocoa __EoT__ Align Sync API 's with Cocoa . Reasoning : > “ Log in ” is a phrasal verb , while “ login ” is a noun . Given that the method in question performs an action , the verb is the correct choice .
Fix module example __EoT__ This fixes the app module example . It , unfortunately , does this by reverting the code that tests that app modules can link to library module model classes . The reason for this is that testing this is impossible without seriously complicating the current example ( e.g . just using the default configuration is no longer possible ) . Creating another example just for this seems a bit much and the chance of the functionality breaking is probably low . I verified that it worked manually before removing the code , by using the following default config ` RealmConfiguration defaultConfig = new RealmConfiguration.Builder ( ) .modules ( Realm.getDefaultModule ( ) , new DomesticAnimalsModule ( ) ) .build ( ) ; ` /cc @ nhachicha
Using a specific version of winston library __EoT__ CI failure which may be related to the latest ` winston ` dependency . Now specifying an exact version when building ROS for integration test
logout logging not resuming sync __EoT__ Currently when the user login , the Object Store will try to revive its inactive sessions ( stored previously after a logout ) . This will cause the OS to call ` bindSession ` to obtain an access token , however since the Realm might not be open yet , the ` wrapObjectStoreSessionIfRequired ` will not be invoked to wrap the OS store session with the Java session , which causes the Sync client to not resume syncing .
Add support for Object Level Permissions __EoT__ Add support for object level permissions for partially synchronized Realms . This PR is still very rough and is mostly here to gather feedback on the public API . # # # Public API **New classes** In package ` io.realm.sync.permissions ` . The old permission system lives in ` io.realm.permissions ` . * ` RealmPermissions ` * ` ClassPermissions ` * ` Permission ` ( conflicts with ` Permission ` from the old permission system : ( ) * ` Role ` * ` User ` ( overlaps with ` SyncUser ` ) * ` RealmPrivileges ` **New methods** `` ` java // in BaseRealm.java ( thus both in Realm/DynamicRealm RealmPrivileges getPrivileges ( ) ; RealmPrivileges getPrivileges ( RealmModel obj ) ; RealmPermissions getPermissions ( ) ; RealmResults < Role > getRoles ( ) ; RealmResults < User > getUsers ( ) ; `` ` `` ` java // In Realm.java RealmPrivileges getPrivileges ( Class < ? extends RealmModel > clazz ) ; ClassPermissions getPermissions ( Class < ? extends RealmModel > clazz ) ; `` ` `` ` java // In DynamicRealm.java RealmPrivileges getPrivileges ( String className ) ; ClassPermissions getPermissions (
Support clearing data using Partial Sync __EoT__ Fixes https : //github.com/realm/realm-java/issues/5758 Partial Sync does not support the ` clearTable ` instruction . This fixes it . Due to performance concerns , this code path is only triggered for partially synchronized Realms .
Non-nullable types are a subclass of nullable types __EoT__ In Kotlin , Non-nullable types are a subclass of nullable types , so this is a cleaner implementation .
Refactor Partial Sync to use Object Store master __EoT__ This PR refactors the Partial Sync support so it uses the API available on OS/master : * Upgrade to Sync 3.0.0-beta.6 * Add a wrapper for Subscription class in Object Store * Add support for ` will_send_notifications/did_send_notifications ` from Object Sdtore * Combine Subscription/Results notifications in Java after they are done sending . * Some of these classes , unfortunately , have to live in the ` main ` flavour for the time being .
Support types in other compilation units __EoT__ With the support for changing the internal names , we can no longer infer the name from the reference type itself . This turned out to cause problems if the referenced type was in another compilation unit . This PR splits out the fix from https : //github.com/realm/realm-java/pull/5729 as the functionality was originally merged to master ( but has not yet been released ) . Not Changelog as the functionality has not yet been released . The functionality is being tested in the ` moduleExample ` where the app now has a reference to a library module class .
Correctly support multiple classes with the same name __EoT__ When # 5280 was merged , it was stipulated that it would mean having two model classes with the same name would be supported . It turned out this was not fully tested and thus did n't work . In particular we had problems with multiple proxy classes being created with the same name . This was fixed by changing the naming scheme for proxy classes , so they now include the package name , i.e . from ` PersonRealmProxy ` to ` some_package_PersonRealmProxy ` . We can not use the internal name as that might be an illegal Java class like `` ! Person '' . After this changed it also turned out that backlinks did n't work correctly in the case of conflicting classes . This was fixed as well . So in summary , this PR consists of : 1 ) Proxy classes renamed from ` < SimpleName > RealmProxy ` to < my_package_SimpleName > RealmProxy ` . Proxy interfaces were changed in a similar way . 2 ) Referencing classes by simple names can lead to subtle bugs , so removed that functionality from the Realm annotation
Remove deprecated methods __EoT__ Remove deprecated query and partial sync methods for 5.0
downgrade javassist __EoT__ We have a [ reproducible ] ( https : //github.com/realm/realm-java/issues/5641 # issuecomment-358617948 ) crash at runtime ( ` ClassNotFoundException ` ) when a certain setup uses Realm and SLF4J https : //github.com/realm/realm-java/issues/5641 . Downgrading to Javassist ` 3_21_0_ga ` solved the issue , still , need to investigate what changed between https : //github.com/jboss-javassist/javassist/compare/rel_3_21_0_ga ... rel_3_22_0_ga that causes the issue and why
javadoc for Required annotation __EoT__ It caused confusion like : https : //stackoverflow.com/questions/47940219/realmmigrationneededexception-when-adding-realmlistint-kotlin
adding nickname and anoymous auth __EoT__ adding nickname and anoymous auth
Partial Sync : Support unsubscribe __EoT__ Makes it possible to cancel named subscriptions .
Partial Sync : Add support for named subscriptions __EoT__
Partial Sync States in OrderedChangeSet __EoT__ Closes # 5619 Part of # 5359 We need to figure out what to do with this branch . Either a ) Merge to some new ` master-5.0 ` and releases from that or easier : b ) Merge to master as we do n't expect any minor releases before this is released .
fixing deps scope __EoT__ Somehow the scope ` provided ` in gradle , end up being generated as ` compile ` in the POM file ( generated by ` maven-publish ` ) this causes clients to pull the provided dependency as a transitive one which is not necessary and may cause issues similar to # 5640 - ` more ~/.m2/repository/io/realm/realm-gradle-plugin/4.3.2-SNAPSHOT/realm-gradle-plugin-4.3.2-SNAPSHOT.pom ` `` ` XML < artifactId > realm-gradle-plugin < /artifactId > < version > 4.3.2-SNAPSHOT < /version > < dependencies > < dependency > < groupId > io.realm < /groupId > < artifactId > realm-transformer < /artifactId > < version > 4.3.2-SNAPSHOT < /version > < scope > compile < /scope > < /dependency > < dependency > < groupId > com.neenbedankt.gradle.plugins < /groupId > < artifactId > android-apt < /artifactId > < version > 1.8 < /version > < scope > compile < /scope > < /dependency > < /dependencies > `` ` - ` more ~/.m2/repository/io/realm/realm-transformer/4.3.2-SNAPSHOT/realm-transformer-4.3.2-SNAPSHOT.pom ` `` ` XML < artifactId > realm-transformer < /artifactId > < version > 4.3.2-SNAPSHOT < /version > < dependencies > < dependency > < groupId > io.realm < /groupId > < artifactId > realm-annotations < /artifactId > < version > 4.3.2-SNAPSHOT
Upgrade to Sync 2.2.9 __EoT__
Fixing Plugin Test __EoT__ The Gradle plugin tests are not part of the CI checks , so for instance ` jitpack ` dependency was removed in https : //github.com/realm/realm-java/commit/d00ddcaa4a2ab7d86616b5c01fcd28df077ceeba # diff-fbc37097ca151e18a6db623e59ebdba8 which should break the tests . - [ x ] Fixing tests - [ x ] Adding the plugin test as part of CI checks < img width= '' 715 '' alt= '' screen shot 2018-01-10 at 18 27 40 '' src= '' https : //user-images.githubusercontent.com/1793238/34790053-63bc2f84-f638-11e7-9a93-03341851bfea.png '' > - [ x ] Adding the Transformer tests as part of CI checks < img width= '' 675 '' alt= '' screen shot 2018-01-10 at 18 58 41 '' src= '' https : //user-images.githubusercontent.com/1793238/34790063-6e06245e-f638-11e7-8f48-1e292ee4e360.png '' >
Update Gradle plugin __EoT__ - Update Gradle plugin - Update Kotlin runtime This should allow you to use AS 3.1 Canary 5
Update Gradle Wrapper to 4.4.1 and Update to Kotlin 1.2 __EoT__ https : //blog.jetbrains.com/kotlin/2017/11/kotlin-1-2-released/ https : //docs.gradle.org/4.4/release-notes.html https : //docs.gradle.org/4.4.1/release-notes.html
Better exception message for addField ( ) __EoT__ Close # 3388
Fix getLocalInstanceCount doc __EoT__ close # 5597
Fixes Kotlin extension functions always being added __EoT__ Closes # 5587 Big ups . Could have sworn I tested this 😞
add @ deprecated javadoc in RealmQuery.java __EoT__ Javadoc @ deprecated is missing on new deprecated methods in RealmQuery.java Better to help users
Listener not called on RealmList __EoT__ - Add a test case to show issue described in # 5507 . - Update OS to a31fab1f56a3a to solve part of the issue ( issue with RealmList ) . - Need https : //github.com/realm/realm-object-store/issues/605 to solve the issue in RealmResults side .
Update sync to 2.1.8 __EoT__ None
Add explicit support for JWT tokens __EoT__ Closes # 5580
Kotlin Extension Library __EoT__ Closes # 4092 Closes # 4701 This PR contains a new dependency ` realm-android-kotlin-extensions ` that is automatically included in all projects including Kotlin . The primary purpose to provide extension functions for methods so they become more Kotlin friendly . TODO - [ x ] Figure out how and what kind of docs we should distribute . KDoc or Javadoc ? KDoc seems to work fine since IntelliJ apparently uses the sources for the inline docs . CMD + F1 is showing correct and jumping to the definition also has the docs as expected . - [ x ] Fix wrong classes included in KDoc : Currently not possible https : //youtrack.jetbrains.com/issue/KT-11333 - [ x ] Test upload to OJO - [ x ] Test upload to Bintray - [ x ] Correctly report unit test failures - [ x ] Cleanup - [ x ] KDoc for all methods - [ x ] Fix unit tests - [ x ] Add unit tests for all extension methods - [ ] Update website docs Usage of these extensions can be seen here : https : //github.com/realm/realm-java/pull/4684/files # diff-a9bdfddc109df70caf521cb459b12d15 -- -- OUTDATED This PR is just
Life cycle of temp OsSharedRealm in callbacks __EoT__ Every temp OsSharedRealm created during construction for the callbacks have to be closed before the exception throws to users . close # 5570
Add support for new sort and distinct predicates __EoT__ This is part of # 5538 The proposed API for supporting partial Sync is currently aiming at introducing ` query.subscribeAsync ( ) ` . With our current query API that is problematic as sorting and distinct information is currently inlined in the ` findAllSorted ` and ` distinct ( ) ` methods , which will require a ton of annoying overloads to support + there is also some benefit to only have 1 or 2 `` execute '' methods and delegate all the query set up to predicates . With this PR , these methods are now deprecated and are being converted to predicates instead , so : `` ` // findAllSorted is being replaced by sort realm.where ( Person.class ) .findAllSorted ( `` name '' ) realm.where ( Person.class ) .sort ( `` name '' ) .findAll ( ) // distinct is being moved to a predicate realm.where ( Person.class ) .distinct ( `` name '' ) realm.where ( Person.class ) .distinct ( `` name '' ) .findAll ( ) `` ` This also has the advantage that you can now combine ` sort ` and ` distinct ` in
Improve encryption example __EoT__ Based on question here : https : //stackoverflow.com/questions/47505171/realm-database-decryption-failed
Ensure stable classes order in generated mediators __EoT__ Fixes # 5566 .
Added notification to OsList instead of OsResults __EoT__ - The notification token for RealmList < RealmModel > will be added to the underlying OsList instead of the OsResults created from the list . This will have a different behavior for a corner case , see https : //github.com/realm/realm-object-store/pull/602 . Thus the test cases needs to be modified accordingly . - This would be the precondition of using https : //github.com/realm/realm-object-store/pull/601 - Add toString ( ) for OrderedCollectionChangeSet .
Re-enable some deactivated tests __EoT__
[ Sync ] Verify certificate using TrustManager __EoT__ fixes https : //github.com/realm/realm-java/issues/4759
Support importing primitive list from JSON __EoT__ Close # 5362
Fix leaking file handlers . __EoT__ Fixes # 5521 I do n't have a Windows machine to verify this on , but by doing code review it does appear that file handlers are being leaked . Unfortunately one of the leaks are inside JavaAssist , so I reported that upstream while implementing a workaround in our end for the time being .
Fix spelling mistake __EoT__ Fixes # 5512
Specify distributionType in wrapper task __EoT__ No need to edit ` gradle-wrapper.properties ` after generating the file .
Add multi-process example __EoT__ All Realm public APIs should be process-safe now . Encryption is not supported for multi processes due to core restriction https : //github.com/realm/realm-core/issues/1845 Accessing same Realm file in different processes from different apks is safe , but the notifications wo n't work .
Fix a socket timeout issue with test server __EoT__ If startRealmObjectServer was called twice without stop in between , syncServerChildProcess will be overwritten by a terminated process since the 2nd call of creating sync server will fail and set the syncServerChildProcess . This would make the stopRealmObjectServer get stuck forever . In practice , we need to make sure the server has been stopped before start it . So just treat the `` start '' as a `` restart '' command which will stop the sync server if needed . Thus , no need to stop in tear down functions in java side anymore .
Rename SharedRealm to OsSharedRealm __EoT__ None
Fix monkey , release no longer need a real device __EoT__ As reported by @ beeender https : //github.com/novoda/gradle-android-command-plugin/issues/122 the ` android-command ` plugin has an issue when running ` monkey ` . This PR remove this dependency , also we no longer require having a physical device to run monkey task ( and perform a release ) fixes https : //github.com/realm/realm-java/issues/5192
fix secureTokenAndroidKeyStore example to pass monkey test __EoT__ monkey is not passing for ` secureTokenAndroidKeyStore ` `` ` E/AndroidRuntime ( 11515 ) : Process : io.realm.examples.securetokenandroidkeystore , PID : 11515 E/AndroidRuntime ( 11515 ) : java.lang.RuntimeException : Unable to start activity ComponentInfo { io.realm.examples.securetokenandroidkeystore/io.realm.examples.securetokenandroidkeystore.MainActivity } : java.lang.IllegalArgumentException : User not authenticated or authentication expired . E/AndroidRuntime ( 11515 ) : at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:2325 ) E/AndroidRuntime ( 11515 ) : at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:2387 ) E/AndroidRuntime ( 11515 ) : at android.app.ActivityThread.access $ 800 ( ActivityThread.java:151 ) E/AndroidRuntime ( 11515 ) : at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1303 ) E/AndroidRuntime ( 11515 ) : at android.os.Handler.dispatchMessage ( Handler.java:102 ) E/AndroidRuntime ( 11515 ) : at android.os.Looper.loop ( Looper.java:135 ) E/AndroidRuntime ( 11515 ) : at android.app.ActivityThread.main ( ActivityThread.java:5254 ) E/AndroidRuntime ( 11515 ) : at java.lang.reflect.Method.invoke ( Native Method ) E/AndroidRuntime ( 11515 ) : at java.lang.reflect.Method.invoke ( Method.java:372 ) E/AndroidRuntime ( 11515 ) : at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:903 ) E/AndroidRuntime ( 11515 ) : at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:698 ) E/AndroidRuntime ( 11515 ) : Caused by : java.lang.IllegalArgumentException : User not authenticated or authentication expired . E/AndroidRuntime ( 11515 ) : at io.realm.SyncConfiguration $ Builder.validateAndSet ( SyncConfiguration.java:467
Removed @ SafeVarargs annotation since it 's not available until API 19 __EoT__ fixes # 5463
fix SocketTimeout __EoT__ fixes https : //github.com/realm/realm-java/issues/5403 now we should retry when encountering any ` IOException ` error
Remove depreacted RealmProxyMediator.getTableName __EoT__ Prefix `` class_ '' should be hide from java layer and handled in Object Store . Try to that direction step by step . Close # 5455
Enable work-around for failing permission tests __EoT__ Adding temporary fix for unit tests to prevent CI from failing almost consistently .
Update ROS to 2.0.2 __EoT__ None
Enable SSL integration tests __EoT__ - Some features were missing which caused ssl tests failures . See https : //github.com/realm/openssl-android/pull/2 Linking with pre-build openssl 1.0.2k-1 . - Use a new Realm instead of using deleteRealm ( )
Fix wrong Javadoc __EoT__ Fixes # 5422
Update all dependencies __EoT__ * Update to ROS-2.0.0-rc9 * Update to Sync 2.0.2 * Store ROS logs as an artifact for each test run * Re-enable default permissions + tests .
Upgrade to RxJava 2.1.4 and OkHttp 3.9.0 __EoT__ https : //github.com/ReactiveX/RxJava/blob/2.x/CHANGES.md https : //github.com/square/okhttp/blob/master/CHANGELOG.md
Upgrade ROS Integration Test Server to 2.0.0-rc.5 __EoT__ + enabled 2 tests that succeed locally , but seem to fail consistently on CI .
Setting own list does not work __EoT__ Unit test for https : //github.com/realm/realm-java/issues/5395 This is the same problem we had for Dynamic primitive lists . The solution is to check for the size of the list , and if they are equal , replace each item instead of clearing the receiver list first ( which also clears the sender list ) .
Dont use ApplicationContext __EoT__ Fixes # 5389 Using the ` ApplicationContext ` was a safeguard against memory leaks in case people decided to accidentally send in an Activity , but apparently , the ` ApplicationContext ` is not available in ` Application.attachBaseContext ( Context ) ` , so this PR changes it so we just use the Context directly . Since best practice is to init Realm in the ` Application ` class anyway and the Google documentation specifically warns against saving references to Activity contexts , making this change should n't really impact anyone in a negative way .
Update android gradle plugin to 3.0.0-beta7 __EoT__ I 've fixed all issues and we can merge this PR after the review . @ realm/java PR contains following changes . 1 . Updating Android Gradle Plugin to 3.0.0-beta7 2 . Removing work-around in gradle wrapper 3 . Updatig Gradle wrapper to 4.2.1 4 . Enabling new dex compiler ( D8 ) in example projects ~~This PR still has some issues.~~ 1 . ~~First execution of ` publishToMavenLocal ` task in ` realm/realm-library ` project after ` clean ` fails if gradle daemon is not used . Gradle does n't execute ` assemble ` task in that case ( ` build.gradle ` contains explicit dependency to ` assemble ` task , no idea why not executed ) . Second time s always fine.~~ < - fixed by adding more task dependencies 2 . ~~CMake build fails . This is caused by https : //issuetracker.google.com/issues/65336086 and the status of the issue has become fixed . I think this build failure will be fixed in coming android gradle plugin.~~ < - fixed in ` 3.0.0-beta7 `
update to latest ROS for testing __EoT__
Enabling client reset test __EoT__ fixes # 5143
Fix cmake license __EoT__
Keep annotations at runtime __EoT__ Fixes # 5344 Thinking about this , we actually also need to keep these if we at some point support inheritance for model classes as the superclass might exist in another jar file . But for now , the primary driver is giving other library developers better tools for interacting with Realm . The size increase of this in peoples apps should be minimal . @ Zhuinden does this fix your issue ?
Update ROS integration test server and re-enable some tests . __EoT__
Test : PartialSyncTests # partialSyncFails __EoT__ This test fails consistently on CI , e.g https : //ci.realm.io/job/realm/job/realm-java/job/master/759/ . We need to fix this . `` ` 10-03 19:39:27.137 I/TestRunner ( 11549 ) : started : partialSync ( io.realm.objectserver.PartialSyncTests ) 10-03 19:39:27.142 I/MonitoringInstr ( 11549 ) : Activities that are still in CREATED to STOPPED : 0 10-03 19:39:27.187 D/REALM_JAVA ( 11549 ) : Network request ( authenticate ) : http : //127.0.0.1:9080/auth 10-03 19:39:27.334 D/REALM_JAVA ( 11549 ) : AuthenticateResponse . accessToken = null 10-03 19:39:27.335 I/REALM_JAVA ( 11549 ) : Succeeded authenticating user . 10-03 19:39:27.335 I/REALM_JAVA ( 11549 ) : { UserId : 7ecab59100f7046beb9a1cc0df0ef442 , AuthUrl : http : //127.0.0.1:9080/auth } 10-03 19:39:27.358 D/REALM_JAVA ( 11549 ) : Network request ( authenticate ) : http : //127.0.0.1:9080/auth 10-03 19:39:27.509 D/REALM_JAVA ( 11549 ) : AuthenticateResponse . accessToken = null 10-03 19:39:27.510 I/REALM_JAVA ( 11549 ) : Succeeded authenticating user . 10-03 19:39:27.510 I/REALM_JAVA ( 11549 ) : { UserId : c5222878c6ac71116db7c8f4de229008 , AuthUrl : http : //127.0.0.1:9080/auth } 10-03 19:39:27.544 D/REALM_JAVA ( 11549 ) : first session created add network listener 10-03 19:39:27.558 D/REALM_JNI ( 11549 ) : SyncClient thread created 10-03 19:39:27.558 D/REALM_JNI ( 11549 ) :
Prepare CHANGELOG for public release __EoT__ Combined ` BETA1-3 ` + unreleased 3.7.3 into one changelog entry called ` 4.0.0-RC1 ` Also added bug fix entries for `` ` +* `` Bad File Header '' caused by the device running out of space while compacting the Realm ( # 5011 ) . +* ` RealmQuery.equalTo ( ) ` failed to find null values on an indexed field if using Case.INSENSITIVE ( # 5299 ) . `` ` They were solved on the Core side , and we forgot to add them to the changelog when updating Core .
Re-enable PermissionManager tests __EoT__ This PR re-enables the PermissionManager tests . Default Permissions are currently disabled as work is still ongoing on them
Array of Primitives : RealmObjectSchema support __EoT__ This adds support for primitive lists to ` RealmObjectSchema - Going around Object Store and directly to Core to dynamically add primitive lists during migrations . Not ideal , but using Object Store constants where possible . - Refactored ` Table.cpp # nativeConvertColumnToNotNullable and ` Table.cpp # nativeConvertColumnToNullable ` so they work on both normal tables and sub tables . This is the biggest change , so please focus review there . - Added bunch of tests . **Open questions : ** Is ` RealmObjectSchema.addRealmListField ( String name , Class < ? > class ) ` the best name ? We already have ` RealmObjectSchema.addRealmListField ( String name , RealmObjectSchema class ) ` , but is the overload weird ? Another alternative could be ` addPrimitiveRealmListField ( name , class ) ` or ` addPrimitiveListField ( name , class ) ` ? For the dynamic API , we have ` getList ( string fieldName ) ` . This will either need an overload with ` getList ( String fieldName , Class < ? > ` or ` getPrimitiveList ( String fieldName , Class < ? > clazz ) ` . Since these lists
Cleanup RealmFieldType __EoT__ Remove types not used by the public API
Support Primitive List feature __EoT__ This PR implements # 4165 and fixes # 575 . TODO : **Required : ** - [ x ] Add , modify APIs ( @ zaki50 ) # 5145 - [ x ] Loosen type restriction on ` RealmList < RealmModel > ` to ` RealmList < Object > ` ( @ zaki50 ) # 5145 - [ x ] Loosen type restriction on ` RealmResults < RealmModel > ` to ` RealmResults < Object > ` ( @ zaki50 ) # 5145 - [ x ] Implement type parameter check in annotation processor ( @ zaki50 ) # 5168 - [ x ] Implement Schema related feature used on initialization ( @ zaki50 ) # 5209 ( part 7 ) - [ x ] Implement proxy 's getters/setters logic in annotation processor ( @ zaki50 ) # 5210 ( part 8 ) - [ x ] Implement support for primitives in ` RealmList ` ( Java side , @ zaki50 ) # 5213 ( part 9 ) - [ x ] Wire with Core/Object Store ( @ beeender ) # 5208 ( part 6 ) , # 5216 ( part10 ) - [ x
Use release version of Sync when testing __EoT__ From # 5354 I should have listened to @ beeender Using the debug version is causing all sorts of crashes . Reverting to using the ` release ` version until we can fix it .
Update sync to 2.0.0-rc25 __EoT__ None
Upgrade ROS to alpha.39 __EoT__
Update test support library to 1.0.1 __EoT__
Update RxJava2 to 2.1.1 __EoT__
Update Kotlin to 1.1.51 __EoT__
Update buildTools to 26.0.2 __EoT__
Add support for alpha.36 changes __EoT__ Looks like https : //github.com/realm/ros/issues/360 is causing a lot of problems
Re-enable breakingSchemaChange_throws __EoT__ None
Support offline client reset __EoT__ fixes https : //github.com/realm/realm-java/issues/5223
4.0 API breaking changes __EoT__ addresses point 5 and 6 form the issue https : //github.com/realm/realm-java/issues/4785
JSON parser throws IndexOutOfBoundsException when converting ISO8601-compliant dates with a 2-digit time zone designator __EoT__ # # # # Goal I want to parse JSON data that contains ISO8601-compliant timestamps with a 2-digit time zone designator , such as ` 2017-09-20T20:00:00+04 ` , using Realm ’ s own JSON parse . Based on the discussion on Issue # 1213 the parser should support all valid ISO8601 dates . According to IS8601 , the time zone can be indicated with only 2 digits . # # # # Expected Results The JSON is parsed successfully and the object ( s ) is ( are ) created successfully . # # # # Actual Results The parser throws IndexOutOfBoundException with message `` Mismatching time zone indicator : GMT04 given , resolves to GMT0400 '' . # # # # Steps & Code to Reproduce Create a class with a Date field . Try to convert JSON data that contains the corresponding parameter as a valid ISO8601 date with a 2-digit time zone designator using Realm ’ s own parser . Observe the exception to be thrown . # # # # Code Sample Example class : `` ` public class Foo extends
Add support for new error codes __EoT__ Fixes https : //github.com/realm/realm-java/issues/5301
Fix change listener getting GC'ed __EoT__ Fixed example not working correctly
Upgrade to ROS-2.0.0-alpha.35 __EoT__
Always use object store to create PK table __EoT__ - Add OsObjectStore class to wrap methods in ObjectStore.hpp . - Use ObjectStore to create meta tables . - Use ObjectStore to get/set primary key . - Always create meta tables when open a non-exist , non-readonly Dynamic Realm . - Clean code . Close # 5231
Sync - Verify certificate using TrustManager __EoT__ Sync is working on a [ PR ] ( https : //github.com/realm/realm-sync/pull/1312 ) that will perform a series of callback to validate the certificate chain , in order to complete the SSL Handshake using the trusted root CA configured with Android . We need to handle the callback from the Java binding , and use the default ` TrustManager ` in order to validate the certificate . The C++ need to pass as an argument the certificate that we should transform into a ` X509Certificate ` format , so it can be usable with the ` JSSE ` API
Minimize overhead on CI for PR builds . __EoT__ This PR changes PR 's so they only build for ` armeabi-v7a ` and run integration tests against the ` ObjectServer ` variant . ` master ` still runs the full test suite . Nesting was wrong as well so fixed . Relevant changes are in https : //github.com/realm/realm-java/commit/78a2af9af4f3e73a8edec4f57143f88c53cf3479 Build time for PR 's have been reduced to ~22 minutes , so at least a 50 % reduction . We can probably get that lower . @ emanuelez What would it take to run integration tests on an x86 emulator instead of on a device ? TODO - [ x ] Make build work - [ x ] Measure savings
disable flaky test until 5294 is fixed __EoT__
Upgrade to latest Sync RC + ROS __EoT__ * Sync-RC21 * ROS 2.0.0-alpha.34 * Added support for Authorization headers * Added support for new Sync exception * Enabled remote revokation again TODO - [ x ] Figure out why some ` retrieve ` tests are now failing
Add Gridview example 's proguard configuration . __EoT__ To fix # 5262
Ignore callbacks from Object Store if waiting was canceled . __EoT__ Followup from https : //github.com/realm/realm-java/pull/4985 # discussion_r128153265 It does not appear possible to cancel the notification , so instead , we just ignore the callback . Note that Sync has a synchronous method for waiting for upload/download to complete , but since all Object Store methods are behind a session mutex , exposing that would result in us blocking _all_ other interaction with the session . This is against ` master ` as the refactor was also merged to ` master `
Unit test combining sort ( ) and distinct ( ) __EoT__ Fixes # 3503 Connects to # 3503 Connects to # 3411
Check and throw when converting String/byte [ ] __EoT__ Throw IAE if the data length exceeds the limit .
Converting examples to RxJava2 __EoT__ Part of # 4991 TODO : - [ x ] converting unitTestExample to RxJava2 - [ x ] converting newsreaderExample to RxJava2 - [ x ] converting rxJavaExample to RxJava2 - [ x ] Debugging a native crash in newsreaderExample - [ x ] Apply Lambda instead of anonymous classes .
Upgrade to 2.0.0-rc18 __EoT__
Feature : RxJava2 Support __EoT__ Part of # 4785 This feature branch contains all changes required to convert our current RxJava1 support to RxJava2 . There has been a lot of discussion about how our RxJava support could look like in # 3497 and # 4291 . Mostly it came down to a choice between splitting into a separate library like ` RxRealm ` or continue to use our `` optional dependency '' approach . After thinking about this a lot and trying to prototype the various approaches , I came to the conclusion that we should continue to use our `` optional dependency '' approach . Reasons : * Splitting RxJava out is mostly a benefit for our codebase , not so much for users of Realm . * Having a fluent API is extremely nice : ` realm.where ( Person.class ) .findAll ( ) .asFlowable ( ) ` vs. ` RxRealm.asFlowable ( realm.where ( Person.class ) .findAll ( ) ) ` . * With Kotlin we could introduce the fluent API as extension functions , but right now the numbers still only show ~15 % of Realm uses having Kotlin in their code base . * People not
Fix a bug that RealmList.delete* ( ) does not delete target objects __EoT__ Fixes # 5233
Refactor java array accessors __EoT__ The original implementation has a serious memory issue that the ReleaseXxxArrayElements might be called before accessing if the copy/move constructor is invoked . That could happen when use JniArraysOfArray where the JniXxxArray would be copied when push it to the vector . The JNI SortDescriptor may trigger various native crashes because of using this .
Update README.md __EoT__ Updated with correct URL
Renaming CollectionChangeSet to OsCollectionChangeSet __EoT__ Part II of # 4215 .
Update to use MutableRealmIntegers __EoT__ Convert to MutableRealmInteger and update the code where necessary . Addresses # 5094
Report the class missing correctly __EoT__ Seen in # 5195 that we do n't report the class missing correctly
Use OS List instead of core 's LinkView __EoT__ - Replace LinkView with OS List . - Code clean up . - Fix a potential leak with LinkView in insertion APIs .
Permission API 's __EoT__ Fixes # 4296 This is a feature branch . The work will be split into smaller PR 's that will be merged into this branch incrementally . TODO : - [ x ] Check changelog before final merge . - [ x ] Javadoc - [ x ] Timing issue for permission Realm not being ready - [ x ] Non-public PermissionManager constructor - [ x ] applyPermissions method ( # 4731 ) - [ x ] getDefaultPermissions method ( # 4850 ) - [ x ] Remove FIXME's - [ x ] Deprecate Management Realm - [ x ] Remove task before calling success ( in case it crashes ) Optional - [ x ] makeOffer method - [ x ] acceptOffer method - [ x ] revokeOffer method - [ x ] getOffers method
Fix release script __EoT__ - sed for Mac and Linux . - Update submodule when release from master branch .
Fix possible leaks with java callback in config __EoT__ Holding strong java refs in the lambda function in the Object Store config will cause circular refs with SharedRealm/Callbacks/Config . That will leak some objects .
Revert `` Upgrade Integration Test setup '' Test if CI is better __EoT__
update Kotlin to 1.1.4-3 __EoT__
Update to latest OS __EoT__ WIP still have an issue with the linker probably because of the change of the namespace in ` results.cpp ` `` ` /Users/Nabil/Dev/realm/realm-java/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp:137 : error : undefined reference to 'unsigned int realm : :Results : :index_of < realm : :BasicRow < realm : :Table > > ( realm : :BasicRow < realm : :Table > const & ) ' /Users/Nabil/Dev/realm/realm-java/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp:369 : error : undefined reference to 'unsigned int realm : :Results : :index_of < realm : :BasicRow < realm : :Table > > ( realm : :BasicRow < realm : :Table > const & ) ' /Users/Nabil/Dev/realm/realm-java/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp:384 : error : undefined reference to 'unsigned int realm : :Results : :index_of < unsigned int > ( `` `
Add support for ` RunInHandlerThread ` to emulate the Main thread __EoT__ Required to test functionality that requires the Main thread _and_ also loops . The ` @ UITest ` annotation does not have this capability .
Final step for OS schema integration __EoT__ - Build the column indices cache from OsSchemaInfo . Not like before , the column indices are not built when the Realm instance is created . Instead , they will only be built when the relevant RealmObject needs to be accessed . - Column indices cache system has been changed . Different Realm instance will not share the same cache . Instead , every Realm instance will have its own cache . So we do n't rely on the schema version any more . The cache can handle the situation when the schema versions are the same but schemas are not . - Refresh column indices cache when schema changes . This is also supported in multi-processes environment . - Almost all of the Realm initialization work is handled by Object Store . So we have the same routine for both sync/non-sync Realm . Also the initialization routine has be simplified a lot in java side . - A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config . - Due to the Object Store 's behaviour , read-only sync Realm is
apply kotlin-kapt plugin since original kapt feature has been deprecated __EoT__ This PR is applying the same changes with # 5126 to ` releases ` branch .
Apply kotlin-kapt plugin __EoT__ Original kapt feature has been deprecated . This PR enables ` kotlin-kapt ` plugin instead .
Upgrade Integration Test setup __EoT__ Better detection of when ROS is running . Previously you could run into a lot of ` SocketTimeout ` exceptions . Also upgraded ROS used in tests to latest stable Debian version . @ realm/java
Migrate SyncUser to the ObjectStore __EoT__ SyncUser class should use the ObjectStore SyncUser .
using property access syntax __EoT__
using property access syntax __EoT__
Bump compileSdkVersion to 26 __EoT__
Align User Lookup implementation __EoT__ fixes # 5008
Update kotlin to 1.1.4-2 __EoT__ https : //blog.jetbrains.com/kotlin/2017/08/kotlin-1-1-4-is-out/ Kotlin 1.1.4 now supports default nullability that we recently introduced to Realm Java .
Update Javadoc to not reference Realm.getDefaultInstanceAsync . __EoT__ Fix https : //github.com/realm/realm-java/issues/2299 # issuecomment-303508956
Object notifications can not find class __EoT__ I ran into this while debugging a unit test failure my unit tests in # 4558 kept running into . I can not reproduce it in standalone unit tests . It is 100 % triggerable in some of my other tests but only in Android Studio , not from the commandline 🤔 Really puzzling Anyway , getting the method reference when calling JNI works . If anyone has a better idea on how to do this , I 'm all ears . Sidenote : After this fix , all the flakiness from my PermissionManager tests seems have disappeared . So I suspect it previously was caused by flakiness in the notification subsystem and recent changes just caused the error to finally bubble up . EDIT : And no , still got failing tests 😢
Fix class name in exception message __EoT__ This PR fixes # 5096 The important change is in ` CachedFieldDescriptor # compileFieldDescription ( ) ` . At the end of the method , they passed ` className ` as an first argument of ` setCompilationResults ( ) ` . However , that argument should be the name of the container class of final field and actually the ` className ` is not the one . This PR also improve performance of ` CachedFieldDescriptor # compileFieldDescription ( ) ` . In the method , map lookup happened three times with the same key for each field . This PR replaced it with just one lookup for each field .
Fix misleading documentation about FieldAttribute.PRIMARY_KEY __EoT__ ` FieldAttribute.PRIMARY_KEY ` does not mark ` REQUIRED ` the field after this change https : //github.com/realm/realm-java/commit/e36e69bb6887d3427b40f661a80c71b6dfb2548f # diff-8b882bdae59573a63bd9922af9ec0f81R144
Add @ Nullable annotation to public APIs __EoT__
Update CHANGELOG.md : Improve formatting . __EoT__
Fix a bug that RealmSchema.remove ( ) and RealmSchema.rename ( ) do n't update internal cache __EoT__
Add SyncUser.allSessions ( ) __EoT__ Fixes # 4783
Update gradle wrappers to 4.1 __EoT__ Gradle 4.1 seems to have a bug that ` GradleBuild ` task sometimes hangs up . To work around that bug , we need to add ` -- console=plain ` option when you execute gradle wrapper . ` tools/update_gradle_wrapper.sh ` modifies the Gradle Wrapper script in the root directory to add that option automatically .
Disable lcache __EoT__ Since the lto has been disabled , linking is much faster now . No need to use lcache anymore .
Fix CI build __EoT__
Update Object Store __EoT__ Breaking changes from Object Store : to 50cf5ee583 - To identify a user , Object Store needs both user ID and auth URL . Thus API has been changed in UserStore . - Property : :PropertyType has been changed which is not the same with field types in the core anymore .
Update gradle from 4.0.1 to 4.0.2 __EoT__ Update gradle and improve the instructions in the update script .
copyToRealmOrUpdate cause dup values in list field __EoT__ Close # 4957 We are using HashMap to maintain a cache of added managed RealmObject when doing copyOrUpdate . But if the given object graph contains objects which have same PK but are different java object , cache missing will happen . That caused the object got set multiple times . For non-list fields , it is not a problem since it will eventually has the expected value if user 's objects graph is consistent . For list , that results the elements in the list are added multiple times since we do n't clear the RealmList in copy ( ) .
Add MutableRealmIntegers to the CHANGELOG . __EoT__ CHANGELOG update for MutableRealmIntegers
Fix change log __EoT__ None
Fix class name length check __EoT__ ` RealmSchema.create ( String ) ` and ` RealmObjectSchema.setClassName ( String ) ` did not accept class name whose length was 51 to ~56~ 57 .
fix compilation error on master-4.0 branch __EoT__ @ realm/java
Counters : Merge MutableRealmIntegers Feature __EoT__ Add support for Counters . Implements most of # 4266
logout and ` currentUser ( ) ` __EoT__ Below test case will fail with : `` ` java.lang.IllegalStateException : Current user is not valid if more that one valid , logged-in user exists . `` ` `` ` java @ Test public void logout_currentUserMoreThanOne ( ) { final CountDownLatch latch = new CountDownLatch ( 1 ) ; SyncUser user1 = UserFactory.createUniqueUser ( Constants.AUTH_URL ) ; final RealmConfiguration config1 = configurationFactory.createSyncConfigurationBuilder ( user1 , Constants.USER_REALM ) .build ( ) ; SyncUser.currentUser ( ) .logout ( ) ; SyncUser user2 = UserFactory.createUniqueUser ( Constants.AUTH_URL ) ; Realm realm = Realm.getInstance ( config1 ) ; SyncUser user3 = SyncUser.currentUser ( ) ; } `` `
fix internal method name __EoT__ This PR fixes a name of internal method .
Update README.md __EoT__ remove unused mailing-list .
add Nullable annotation to methods that can return 'null ' __EoT__ This improves type inference in Kotlin .
Add support for SyncSession.uploadAllLocalChanges ( ) __EoT__ Mostly to mirror ` SyncSession.downloadAllServerChanges ( ) ` , but this should also prove quite helpful for a lot of our Sync integration tests .
Add missing error codes __EoT__ Fixes # 4980 This adds error codes not documented in the protocol definition . Note , that these new error codes also clashes with existing ones . E.g we have ` BAD_CHANGESET ( 212 ) // Bad changeset ( UPLOAD ) ` and now ` BAD_CHANGESET_DOWNLOAD ( 112 ) // Bad changeset ( DOWNLOAD ) ` . Finding a consistent way of naming all these enums do appear straight forward nor easy to make consistent and easy to use by end users , so I went with the simplest approach and suffixed the conflicting new ones with ` _DOWNLOAD ` . Suggestions for making this better is welcome .
Update Gradle Wrappers to 4.0.1 __EoT__ Updated Gradle Wrappers to 4.0.1 .
Create ProxyUtils class to simplify proxies __EoT__ New class ProxyUtils to reduce size of proxies .
Upgrade Realm Core to 2.8.6 __EoT__ This introduces a breaking change to how SSL is configured . https : //github.com/realm/realm-object-store/pull/493 addressed this . Close # 4791 # 4788
Fix tests : Thread # run - > Thread # start __EoT__
Add CompactOnLaunch . __EoT__ Addresses # 3739 .
fix changelog entries __EoT__
Add RealmObject.getRealm ( ) and DynamicRealmObject.getDynamicRealm ( ) . __EoT__ closes # 4720 In the discussion of # 4720 , we found some problems in regard to ` Realm ` and ` DynamicRealm ` . To avoid that problem , I implemented ` RealmObject.getConfiguration ( ) ` instead . Now I only add ` public static RealmConfiguration getConfiguration ( RealmModel ) ` . Should we have non static version ` public RealmConfiguration getConfiguration ( ) ` as well ?
Extend test to verify that logging out one user allows another to log in __EoT__
Extend test to verify that logging out one user allows another to log in __EoT__
Fix flaky emptyChangeSet_findAllAsync __EoT__ There is no guarantee that async query will be finished later after the transaction . So the original assertEquals ( 9 , collection.size ( ) ) might not be true always . Just remove the object deletion logic since it has nothing to do with the test purpose .
Listeners and LinkingObjects __EoT__ To clarify expected behaviour ( see also # 4875 ) .
Add missing sync error codes __EoT__ Discovered while adding tests for # 4871 This PR adds support for all known error codes coming from ROS , including standard HTTP error codes . All names are just capitalized versions of this list https : //github.com/realm/realm-object-server/blob/master/object-server/doc/problems.md
Support stable IDs for sync __EoT__ A special column to store stable IDs are added by sync . See https : //github.com/realm/realm-sync/pull/1170 for details . - Calling sync : :create_object instead of add_empty_row to create new object . - Calling sync : :create_table/sync : :create_table_with_primary_key instead of add_table to create a new object schema . - addPrimaryKey ( ) is not allowed for synced Realm anymore . - New API RealmSchema.createWithPrimaryKeyField is added . TODO : - [ x ] Check the version in ` dependencies.list ` . - [ x ] Check the object store submodule after https : //github.com/realm/realm-object-store/pull/434 merged . - [ x ] Testing with new ROS release which supports stable IDs .
specify errorprone version to prevent sudden build failure __EoT__
Last field might be a backlink field . __EoT__ When querying a ` LinkingObjects ` field ( aka backlink field ) , it might be the last . ` isEmpty ( ) ` is a pretty useful predicate , and we need to track down the source table . The changes to the C++ code is only for code style consistency . Closes # 4864
Update Kotlin to 1.1.3 __EoT__
Better control of ROS instance used by the integration tests __EoT__ Courtesy of @ alebsack . This fixes a bunch of flaky integration tests . Mostly seen during the development of # 4558 , but could also be the root cause for a bunch of other stability issues we have seen lately with integration tests timing out .
Fix reference table overflow when logging from the sync thread __EoT__ I discovered this while debugging our unstable integration tests . I have n't found a way to reproduce this in a unit test since it depends on the logging happening from a non-java thread ( like the Sync thread ) . Error was this one : `` ` 06-30 06:33:51.053 11311 13305 I REALM_SYNC : Connection [ 12 ] : Session [ 29 ] : Sending : UNBIND 06-30 06:33:51.054 11311 13305 F art : art/runtime/indirect_reference_table.cc:115 ] JNI ERROR ( app bug ) : local reference table overflow ( max=512 ) 06-30 06:33:51.054 11311 13305 F art : art/runtime/indirect_reference_table.cc:115 ] local reference table dump : 06-30 06:33:51.054 11311 13305 F art : art/runtime/indirect_reference_table.cc:115 ] Last 10 entries ( of 512 ) : 06-30 06:33:51.054 11311 13305 F art : art/runtime/indirect_reference_table.cc:115 ] 511 : 0x1329bac0 java.lang.String `` REALM_SYNC '' 06-30 06:33:51.054 11311 13305 F art : art/runtime/indirect_reference_table.cc:115 ] 510 : 0x13840760 java.lang.String `` Closing Realm fi ... ( 136 chars ) 06-30 06:33:51.054 11311 13305 F art : art/runtime/indirect_reference_table.cc:115 ] 509 : 0x1329ba90 java.lang.String `` REALM_SYNC '' 06-30 06:33:51.054 11311 13305 F art : art/runtime/indirect_reference_table.cc:115 ] 508 : 0x12dcc4e0 java.lang.String
[ Sync ] Adding user account lookup __EoT__ fixes # 4828
IllegalArgumentException : Could not parse user json __EoT__ # # # # Goal I 'm trying to create a synced realm database # # # # Expected Results That the database should not crash even if it failed to login # # # # Actual Results SyncUser.currentUser throws an exception , crashing the whole application and it 's not possible to delete that invalid user . The error is something like : Caused by : `` ` java.lang.IllegalArgumentException : Could not parse user json : eyJpZGVudGl0eSI6IjQ0ZWU5Y2ZlNGMwNDc5YTVmZDU4MWMwOTQ5OTI5Y2YxIiwiZXhwaXJlcyI6MTgxMzM1NDkzNCwiYXBwX2lkIjoiY29tLmxvc3RwaXhlbHMuZmllbGRzZXJ2aWNlIiwiYWNjZXNzIjpbInJlZnJlc2giXSwiaXNfYWRtaW4iOmZhbHNlLCJzYWx0IjowLjY1OTEwMjg3OTYyMzExNTN9 : P1KRa4IykFyVWdd9CUt84jytP7r+O3X8P7bgwtXjJBrgbwLtf0Fz8+ezfKP01G5mjumsjx9bc4ZCY+JkaEOjSu1U+kDck0Oi7fOgvhpf2cpPjPryrEMF/XXkNq8EBzUfumdNRsxoBEJhNsGcOui/UO8kEI1y0qlxUdjVwEupqv62BPlz4AzGCC27MWsKUACDLJUekC/pdMTRYcrWEVTfmZXZHrm90QtXwmJVSUKePmwWhE5xTvDQKw49bT1FJzX45RhRZez3pP2SAYpwNH8IVpnMqN1M4+OruwTt//eRwO8VQdPJKgXLk3T2Cx1AWnjL+AkuW0dcKBmbjJt3Cs3v1g== at io.realm.SyncUser.fromJson ( SyncUser.java:157 ) at io.realm.RealmFileUserStore.toSyncUserOrNull ( RealmFileUserStore.java:84 ) at io.realm.RealmFileUserStore.getCurrent ( RealmFileUserStore.java:44 ) at io.realm.SyncUser.currentUser ( SyncUser.java:110 ) `` ` # # # # Steps & Code to Reproduce I first start with an offline realm database . Then I create a synced user with this code `` ` GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent ( data ) ; if ( result.isSuccess ( ) ) { GoogleSignInAccount acct = result.getSignInAccount ( ) ; String token = acct.getIdToken ( ) ; SyncCredentials myCredentials = SyncCredentials.google ( token ) ; String authURL = serverUrl + `` /auth '' ; return SyncUser.login ( myCredentials , authURL ) ; } `` ` I then merge the
Fixing isNull ( ) for link queries __EoT__ If the link query is on a nullable field , it seems to query the wrong field . This is embarrassing bug , and the solution is simple : Follow links between tables and not queries links . Fixes # 4856
Explicitly specify Locale for String.format ( ) in our annotation processor __EoT__ Explicitly specify Locale for String.format ( ) in our annotation processor . And also added a test for non-latin model name and field names .
Update android gradle plugin to 3.0.0 __EoT__ https : //developer.android.com/studio/preview/features/new-android-plugin.html https : //developer.android.com/studio/preview/features/new-android-plugin-migration.html When you switch android gradle plugin from 2.x to 3.x , you need to stop running gradle daemon by executing ` ./gradlew -- stop ` .
Remove useless code for the old async query impl __EoT__ None
Let Object Store handle table creations __EoT__ This tries to progressively move more things about schemas to Object Store . First the concept of Schema in Object Store is not the same as what we have in Java . It is very much just a schema information holder and won't take care of the schema modifications . That says it is more like the ColumnIndices cache in the Java binding . So this commit try to : - Instead of inheriting from the RealmSchema , change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo . They behave as a simple Java wrapper to the relevant OS objects . - Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator . - Call ` SharedRealm.updateSchema ` with the OsSchemaInfo which is got from the proxy interface to do table initialization . - This will also fix a minor bug we have before , All tables are created even if the class is not in the module . - Migration is still handled in the old way , and it will be solved in the future , to let Object Store handle
Update README.md ( OSX - > macOS ) __EoT__ There is still OSX .
describe a way to exclude generated files from idexing target . __EoT__
Update README.md ( OS X - > macOS ) __EoT__ It is macOS now .
Explicitly specify Locale for String.format ( ) instead of implicit current Locale __EoT__ Added explicit Locale information to follow ` lint ` s advice .
Removed unused methods from internal Table class __EoT__ This PR migrated all codes using ` Table # addEmptyRow ( ) ` to ` OsObject.create* ( ) ` in order to remove ` Table # Table ( ) ` , ` Table # addEmptyRow ( ) ` , ` Table # addEmptyRows ( long ) ` , ` Table # add ( Object ... ) ` , ` Table # pivot ( ) ` and ` Table # createNative ( ) ` . And this PR also removed ` SharedRealm ` argument from ` OsObject.create* ( SharedRealm , Table , ... ) ` methods since Table always contains the same ` SharedRealm ` instance in it .
Re-enable RealmTests # unicodeStrings ( ) __EoT__ This PR speeds up RealmTests # unicodeStrings ( ) and I think that we can execute it every CI build . On my Galaxy S8+ , original code took about 6 sec , now it takes 800 msec .
Separated dir for remote SyncManager __EoT__ This may cause some flaky tests on CI .
Local ref needs to be cleaned on client thread __EoT__ - Add support for null JavaLocalRef . - Clean the local ref after notifyAllChangesDownloaded .
Fix GCed ref caused flaky test __EoT__ None
Migrate some test cases to JUnit4 __EoT__ To prepare # 4812 , migrate some tests to JUnit4 .
Returning session 's state __EoT__ fixes # 4784
Suppress warnings in JNIQueryTest and JNITableInsertTest __EoT__
Exponential Back Off now retry query in case of ` ConnectionException ` __EoT__ ` ConnectionException ` which is a network error , was being treated as an ` ErrorCode.UNKNOWN ` instead of ` ErrorCode.IO_EXCEPTION ` which allow retrying . fixes # 4310
Correctly reset integration tests . __EoT__ According to @ mrackwitz , we need to delete the ` realm-object-server ` directory between each integration test to correctly reset ROS ( https : //github.com/realm/realm-object-server/issues/1225 # issuecomment-308216359 ) . This error caused # 4655 to be extremely flaky . After this change , it seems to run consistently .
Use fail ( ) instead of assert ( false ) in tests __EoT__ ` assert ( false ) ` checks nothing ...
Update android gradle plugin to 2.3.3 __EoT__ @ realm/java
Convert exception on sync client to java exception __EoT__ - Update realm-sync to 1.10.1 - update object-store to 1e3cbb1789 - Convert exception on sync client to java exception This will give us some better information when excpetion happens on the sync client thread .
migrate to sdkmanager __EoT__ Migrated CI environment to ` sdkmanager ` command from deprecate ` android ` command .
re-generate gradle wrappers to remove extra spaces __EoT__
update Gradle wrappers to 4.0 __EoT__ Gradle 4.0 has been released .
Converting nullable PK fields with null values __EoT__ - RealmObjectSchema.setRequired ( ) will throw if the PK field has null values stored . - Call set_xxx_unique when converting nullability on a PK field . - Remove useless check in the proxy generator which caused inconsistency exception . - Add relevant test cases .
Re-add Sync Progress Notifications __EoT__ Blocked by https : //github.com/realm/realm-sync/issues/1273 # issuecomment-291092074 Original PR : # 4349
Clean up JsonHelper as prep for RealmInteger __EoT__ Shortly adding one more complex ` FieldConverter `
Clean up the Proxies a bit , in prep for RealmInteger mods __EoT__ I would like to be able to read the proxy code easily , so that I can make the ( possibly somewhat complicated ) changes for ` RealmInteger ` . There should be absolutely no functional changes here : just syntax .
Suppress warnings in generated code . __EoT__ There is no reason that generated code , in production , should ever generate a warning . We may decide for any of a number of reasons , that we wish to generated code that would otherwise generate a warning . We may also decide to pay attention to some warnings , an eliminate them . The user , who can *never* do anything about warnings in the generated code , though , should never , ever see them .
Fix logging for RunTestInLooperThreadTests integration tests . __EoT__ Logging was not reset correct when running integration tests with @ RunTestInLooperThread . Also clean up all subclasses of ` BaseIntegrationTest `
Update kotlin to 1.1.2-5 __EoT__ Updated kotlin to ` 1.1.2-5 ` . And now example project uses ` kotlin-stdlib-jre7 ` instead of ` kotlin-stdlib ` . Chnagelog of kotlin 1.1.2-5 is https : //github.com/JetBrains/kotlin/blob/1.1.2/ChangeLog.md # 112-5
Fix admin users not connection correctly to ROS __EoT__ Replaces # 4754 Changed integration tests to completely reset Sync between each test . We should probably consider a more global reset function since right now reset is scattered between multiple classes . I did n't want to do this as part of this PR though .
Get more integration test to work __EoT__ - Add a new TestRule RunWithRemoteService to allow a test case create a service running in a remote process . This is very much like what we have for the RealmInterProcessTests but with more flexibility , eg . : Separate service for separate test case . - Enabled sync interaction tests : notify by simple commit , notify by lots of commits . - Deprecate RemoteProcessService .
Add more capabilities to cleanup RunInLooperThread tests __EoT__ Breaking out this functionality from # 4655 Also , unit test that tests the unit tests 😜 @ realm/java
Add Realm.getDefaultConfiguration ( ) __EoT__ closes # 4725
quick fix __EoT__ Link to url done right
Backlink queries __EoT__ @ bmeike did all the hard work . I am merely wrapping up . This PR is still WIP ! * [ x ] Fix unit tests for backlink queries . * [ x ] Explain what unit tests are testing . * [ x ] Introduce a native implementation of isNotEmpty ( ) - see also # 2025 . * [ x ] ~Remove~ rewrite ` getTableByArray ( ) ` . * [ x ] Add support for queries when last element is a backlink . * [ x ] Update documentation about link ( add backlink ) at web site - # 4320 . See also https : //github.com/realm/realm.io/pull/3294 See also # 4620 .
Fix typo __EoT__ Fix # 4736
Add Realm.getDefaultConfiguration ( ) __EoT__ We added ` Realm.getInstanceAsync ( ) ` and ` DynamicRealm.getInstanceAsync ( ) ` and those always required ` RealmConfiguration ` ( or ` SyncConfiguration ` ) . In order to pass default configuration to those methods , it 's better to have ` Realm.getDefaultConfiguration ( ) ` . What do you think ? @ realm/java
Add Realm.getDefaultConfiguration ( ) __EoT__ We added ` Realm.getInstanceAsync ( ) ` and ` DynamicRealm.getInstanceAsync ( ) ` and those always required ` RealmConfiguration ` ( or ` SyncConfiguration ` ) . In order to pass default configuration to those methods , it 's better to have ` Realm.getDefaultConfiguration ( ) ` . What do you think ? @ realm/java
java.util.IllegalFormatConversionException : d ! = io.realm.ErrorCode error __EoT__ I used the latest version ( 3.2.0 ) of the realm-java . And I found a bug on the SyncSession.java 327 line . `` ` java RealmLog.debug ( `` Session [ % s ] : Failed to get access token ( % d ) '' , configuration.getPath ( ) , response.getError ( ) .getErrorCode ( ) ) ; `` ` The 2nd format of message is `` % d '' , but 2nd argument is ErrorCode enum . So , a exception was fire at the String.format ( message , args ) . I hope the bugs will be fixed as soon as possible . Thanks . # # # # Version of Realm and tooling Realm version ( s ) : 3.2.0 Realm sync feature enabled : yes Android Studio version : 2.3.2 Which Android version and device : Android version 7.0 , Samsung Galaxy S8
Enable Kotlin for unit tests __EoT__ This depends on # 4717 being merged first otherwise this will breach the method limit . This PR adds support for Kotlin in our unit tests and I added a small unit test describing some null weirdness with the schema , but that is mostly proof-of-concept . The reasoning for this is primarily making sure we got the infrastructure in place to develop any features specifically for Kotlin that might come out of # 4701 . Some implementation notes : - Kotlin files are placed in ` src/androidTest/kotlin ` . This is mostly because anything under there should only test Kotlin features . - I added a dependency to ` kotlin-reflect ` . This adds about ~10K to the method count , but allow easier reference to Class/Field names . Along side the Kotlin standard library this puts the method count at about ~48K
Add next release to changelog __EoT__ @ realm/java
Turn off the column # check for synced realms __EoT__
Split createTable & getTable __EoT__ To support Stable IDs , the primary key has to be created while the table is created . This will require a new internal API createTableWithPK in the future . The previous getTable behaviour would be quite confusing to support that . - getTable will only return the table if it exists . - createTable is the one to be used to create tables . - Add JavaExceptionDef to have all common Java exception names in a single place . - Remove useless tests .
Fix queries not working on proguarded Realms model classes __EoT__ Fixes # 4673 The new ColumnIndices wrapper cached names using ` class.getSimpleName ( ) ` which breaks when the class is obfuscated ( We should really have caught this in code review 😢 ) I modified it so a pair consisting of ` < class , realSimpleName > ` is now being passed around instead . It complicated the internals of ` ColumnIndices ` a little more than I would like ( We could really use a MultiKeyMap implementation ) . Creating/Copying this class is now also more expensive as we have to go through the mediator for the proper non-obfuscated name , but given how rarely this happens , it is probably acceptable for now . We have an example ` moduleExample/app ` that used a proguarded Realm and we test the Release build as part of the release process , but unfortunately , that example did n't use any query methods that triggered the bug . It is apparently possible to run unit tests with ProGuard : https : //stackoverflow.com/questions/26482119/android-unit-tests-with-proguard-enabled so I 'll be creating an issue for enabling that going forward . For now , I modified
Change password using Admin user __EoT__ fixes # 4588
Nh/android support ssl __EoT__ Fixing # 4371 This adds two options : - ` trustedRootCA ` to provide the set of trusted root CA that Sync client should use - ` withoutSSLVerification ` to disable OpenSSL certificate validation ( for debug purpose or when using a self signed certificate in dev environment ) TODO - [ x ] changelog - [ x ] tests
SchemaVersion for synced Realms where required by mistake __EoT__ Fixes # 4658 Fixes # 4618 Due to miscommunication , the Java side mistakenly added a requirement that the schema version should be bumped for schema upgrades . This is not the case . TODO : - [ x ] Changelog - [ x ] Unittests - [ x ] Remove version check - [ x ] Verify if the sharedrealm- > update_schema set the schema version internally
Update sync to 1.8.5 __EoT__ None
update Kotlin in example to 1.1.2-4 __EoT__ @ realm/java
Helper class for throwing java exception from JNI __EoT__ None
Support minor release for release script __EoT__ None
Grammar for RealmModule docs __EoT__ Some grammar changes for RealmModule docs
fix ambiguous method calls warned by Java 8 compiler __EoT__ When I compiled Realm java with Java 8 compiler , I got some warnings . This PR fixes those warnings in advance . @ realm/java
Make the proxy toString methods reveal themselves __EoT__ Make the ` toString ` methods in the DynamicObject Proxy and the Realm Proxy more up-front about who they are .
Add comment about GC to all relevant change listeners __EoT__ Closes https : //github.com/realm/realm-java/issues/4626 Closes https : //github.com/realm/realm-java/issues/4472 This adds a mention about the GC to all relevant listeners . Note , the subtle differences in the code samples ; ) Also , this has not been added to the ` Realm ` change listeners as our internal ` RealmCache ` keeps a strong reference to them while they are open .
Support readOnly ( ) on Configurations __EoT__ Fixes # 1147 This PR adds support for read only Realms . This was needed by # 4558 . The semantics differ slightly across local and synced Realms : **Local Realms** It should only work in conjunction with ` assetFile ( ) ` since that is the only place it makes sense . Schemas will not be created , so the file must provide the correct schema . **Synced Realms** It should only work with ` waitForInitialRemoteData ( bool ) ` , since that would be the equivalent to the local ` assetFile ( ) ` . If the downloaded file do not provide the correct schema , the Realm will fail to open and throw RealmMigrationNeededException . Note the Object Store has support for read only Realms , but it require us using the Object Store schema , which we do n't support ( yet ) . TODO - [ x ] More unit tests - [ x ] Does n't make sense to merge this until # 4536 has been merged , since people need to download the schema from the server .
LinkingObject queries __EoT__ Code complete for backlink queries . Fixes # 4321 Needs testing and , as anticipated , DynamicRealm tests are failing . Let 's get the review started , though . Bring it ! ! ; -P
Fix typo in CHANGELOG.md __EoT__ It 's a very simple typo patch . Please review this @ realm/java
Add support for SyncConfiguration.waitForServerChanges ( ) __EoT__ Fixes # 4270 This feature does n't really make a lot of sense without # 2299 , so probably should n't be merged until after that is done , but it can be reviewed without it . This condition is only checked the first time a Realm is opened on a Thread , i.e . if multiple instances are opened , the subsequent calls will just return the cached instance . Is this the semantics we want ? or should we do this on each call to ` getInstance ( ) ` ? TODO - [ x ] Integration tests - [ x ] Unit tests - [ x ] Convert links to ` getInstanceAsync ` from ` @ code ` to ` @ link ` once it has been merged
Use shorthand for generic arguments for better AS support __EoT__ By using a shorthand for the generic argument when creating Changelisteners , IntelliJ ( and Android Studio ) will expand that automatically to be a camel-cased version of the generic argument . This makes the code more readable with minimal effort . Existing code will not be affected . Example : `` ` // Before RealmResults < Permission > permissions = realm.where ( Permission.class ) .findAll ( ) ; permissions.addChangeListener ( new RealmChangeListener < RealmResults < Permission > > ( ) { @ Override public void onChange ( RealmResults < Permission > element ) { // user forced to manually rename ` element ` to something more descriptive } } ) ; // Now permissions.addChangeListener ( new RealmChangeListener < RealmResults < Permission > > ( ) { @ Override public void onChange ( RealmResults < Permission > permissions ) { // IntelliJ will automatically rename the variable to 'permissions ' even though it is really named 't'. } } ) ; `` `
Fixed @ LinkingObjects notation for Kotlin __EoT__ Fixes # 4611 Apparently , annotations need CLASS retention in order to work with Kotlin . I 'm guessing some combination of how annotation processors work with the Kotlin compiler . Also updated the example code to be more correct ( do n't need open on fields / updated Anko ) . And yes that should probably have been in another PR 😄
fix typo in CHANGELOG.md __EoT__ @ realm/java
Introduce DynamicRealmObject # linkingObjects ( String srcClassName , String srcFieldName ) __EoT__ TODO : - [ x ] need to discuss whether we introduce this API . - [ x ] more tests - [ x ] add a check if the object is attached or not ( after the merge of # 4500 ) . - [ x ] CHANGELOG
Remove onSuccess callback before calling it __EoT__ Otherwise it will cause infinite recursion if a transaction is committed in the callback . Fix # 4595
Rename Context to NativeContext __EoT__ Renames ` io.realm.internal.Context ` to ` io.realm.internal.NativeContext ` ( started out as RealmContext ) to avoid confusion with ` android.content.Context `
Implement getInstanceAsync __EoT__ Fix # 2299 - Add APIs to get Realm instance asynchronously . - Remove some useless methods . There are some work need to be done before create the first Realm instance in the process , like creating schema table , doing migration , etc.. Those could block the UI thread quite badly . This commit tries to do those initialization work in the background and hold a Realm instance in the background until the 2nd instance created in the caller thread . A better solution than this would be do initialization in the background and only deliver a column indices cache to caller thread without holding a Realm instance in the background . But that is not possible since from the current database design , we can not know if the schema changes compared with the last time it was opened . Also create a SharedGroup in the background and handover it to the caller thread is not ideal as well . That not only requires some design changes in the Object Store RealmCoordinator , but also is a very special use case of SharedGroup which core is not designed for . SharedGroup Leaking during the
Fine grained locks for RealmCache __EoT__ - Separated lock for different RealmConfiguration instead of one lock on the RealmCache class . So Opening Realm instances from different configurations wo n't block each other . - DynamicRealm which is created during opening type Realm will not be associated to any RealmCache to avoid recursive locks and multiple times initial block . ( Also make the code easier . ) This is for # 4536 and part of implementation of # 2299 .
Android Studio gives warning at threads/AsyncTaskFragment.java static field leaks __EoT__ Android Studio gives warning at **ImportAsyncTask** - AsyncTask that imports Realm data while providing progress and returns the value of an aggregate function in the end . _Static Field Leaks A static field will leak contexts . Non-static inner classes have an implicit reference to their outer class . If that outer class is for example a Fragment or Activity , then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected . Similarly , direct field references to activities and fragments from these longer running instances can cause leaks._ Is it a bug ?
Backport Unit Test PRs to releases __EoT__ This is a backport of # 4563 ( already merged to master ) , and # 4572 ( soon to be abandoned ) to merge them to the release branch . The cherry-picked commits were : commit 9e740f8fd5d631070d54c9d2b3ce5e3c5d7ea410 Author : G. Blake Meike < blake.meike @ realm.io > Date : Thu Apr 27 12:42:28 2017 -0700 Standardize test timeouts commit 9e86af814ba2878ea91969d8cd073a9a7456d372 Author : G. Blake Meike < blake.meike @ realm.io > Date : Wed Apr 26 13:52:15 2017 -0700 Respond to comments Fix spelling errors Clean up multi-error recovery . commit fd76c00e92b759b2d9461381e8158954cc516d7d Author : G. Blake Meike < blake.meike @ realm.io > Date : Tue Apr 25 06:25:47 2017 -0700 Fix threading bugs in RunInLooperThread rule This will , of course fail to merge to master .
Update Kotlin to 1.1.2 __EoT__ @ realm/java Android Gradle Plugin 2.4.0 ( -alpha ) requires Kotlin 1.1.2 plugin .
Removed io.realm.internal.Util # javaPrint ( String ) __EoT__ b0e188145c0d7762cd3edd9725d65e0be38cd614 already removed all calls to ` io.realm.internal.Util # javaPrint ` from JNI code . This PR also removes ` Util.getNativeMemUsage ( ) ` . See https : //github.com/realm/realm-java/pull/4574 # issuecomment-298296872
Use target table to create snapshot from LinkView __EoT__ - Fix # 4554 . - Remove useless confusing ` LinkView.getTable ( ) ` .
Add manualClean task , which works without requiring any dependency artifacts __EoT__ Current ` clean ` task depends on the artifacts of the project itself . That means ` clean ` task only works after successful build . I 've added ` manualClean ` task , which removes all build files without requiring any artifacts . @ realm/java
Update build-tools to 25.0.3 __EoT__ @ realm/java
Fix threading bugs in RunInLooperThread rule __EoT__ During the process of fixing the last couple bugs in the backlinks UTs , I discovered that the ` RunInLooperThread ` ` Rule ` was both difficult to read and , probably because of that , had fundamental threading bugs . This PR fixes both of those problems .
Try to create getFilesDir if it does n't exist on startup . __EoT__ Closes # 4493 We can not `` fix '' it , but this way we try as hard as possible to recover from the situation , and if that fails we throw a better exception , explaining the situation . /cc @ rajuashok
Fix schemaVersion docs for synced Realms __EoT__ Fixes # 4466
Segmentation fault in UncheckedRow_nativeIsNull+56 when operating on invalid/deleted object __EoT__ I kind-of randomly experience native crashes during different scenarios in my app . There is a scenario where I can reproduce the crash almost immediately . # # # # Version of Realm and tooling Realm version ( s ) : 3.1.3 Realm sync feature enabled : no Android Studio version : 2.3.1 Which Android version and device : S6 6.0.1 , x86 emulator 7.1.1 Realm encryption is **not** enabled . # # # # Crash The scenario where I can reproduce the crash is when calling ` Realm.deleteAll ( ) ` and then opening an Activity , which causes a presenter to operate on an invalid Realm object . What happens specifically is that there is an RealmProxy where toString ( ) says `` Invalid object '' - makes sense , as this object has been deleted . On this proxy , the Integer primary key is compared to < = 1 . This results in ` realmGet $ id ( ) ` being called , where ` checkIfValid ( ) ` passes and then ` proxyState.getRow $ realm ( ) .isNull ( columnInfo.idIndex ) ` ( ` UncheckedRow.isNull
Validate how letters are sorted . __EoT__ It seems that our documentation is n't clear on how we sort : https : //github.com/realm/realm-core/issues/2573 I have added a unit test to clarify it , and I will update our documentation accordingly .
Fix flaky test caused by non-closed Realm __EoT__ When the case is using ExpectedException , TestRealmConfigurationFactory wo n't be able to detect the Realm instance is not closed .
Script for doing release locally __EoT__ There are still more work needed to do release on Jenkins . Before that a script to help release locally is useful . This script currently only handle the patch release .
Re-add Realm.refresh ( ) __EoT__ Closes # 3476 This PR adds back ` refresh ( ) ` . Mostly for two reasons : 1 ) With the adoption of the ObjectStore and Snapshots for iterations , the reasons we originally removed ` refresh ( ) ` in favour of ` waitForChange ( ) ` for are no longer valid . 2 ) We keep getting support requests by people using event buses and such instead of RealmChangeListeners . In some of those cases ` refresh ( ) ` does make sense , so this would lessen the support burden as well . 3 ) @ Zhuinden no longer have to keep various hacks up to date ( Just kidding mate , we really appreciate what you are doing 😄 💯 ) Feel free to tell me if this is just stupid , but then we should probably also close # 3476 with a Wont Fix .
Sync reconnect __EoT__ fixes # 4141
Update Object Store __EoT__ To dfddfa7f7bf5 Fix # 4474
Update Object Store and test cases __EoT__ Update OS to 7a1924b4cf Fix # 4502
Clear pending collection first for findFirstAsync __EoT__ Otherwise the pending query will be executed again if there is a local transaction in the listener . That would cause a infinite recursion or NPE ( like # 4495 ) . Fix # 4495
Fix exception thrown from backlinks field __EoT__ fixes # 4499 - [ x ] add test case that reproduce the issue - [ x ] fix the code - [ x ] change log
added field name information to exception messages __EoT__ fixes # 4484 @ realm/java
fix a bug that Collection from backlink holds wrong table pointer . __EoT__ fixes # 4487 @ realm/java
update to Core 2.6.0 & Sync 1.5.2 __EoT__ This is https : //github.com/realm/realm-java/pull/4483 against ` releases `
update to Core 2.6.0 & Sync 1.5.2 __EoT__ This is https : //github.com/realm/realm-java/pull/4483 against ` releases `
Nh/update secure store example __EoT__ ` secure-userstore 1.0.1 ` was [ released ] ( https : //bintray.com/realm/maven/secure-userstore/1.0.1 ) This PR updates the sample code
fix typo in CHANGELOG.md __EoT__ just fix a typo in CHANGELOG.md . fast-merge /cc @ realm/java
fix API incompatibility introduced in 3.1.0 __EoT__ fixes # 4443 I fixed incompatibility of ` RealmSchema.getAll ( ) ` in addition to ` BaseRealm.getSchema ( ) ` . @ realm/java
Hide StandardRealmSchema class from public API . __EoT__ fixes # 4443 @ realm/java
Add support for transient fields __EoT__ While looking into how to best support databinding , I ran across # 4279 , which was easily fixable . It does n't make it possible to extend ` BaseObservable ` yet , but it is a step in the right direction .
Stale local ref crash with Object listener __EoT__ The changed field string array needs to be reset after sending notifications . Fix # 4437
remove com.neenbedankt.android-apt plugin from example projects . __EoT__ Users do n't need to use ` com.neenbedankt.android-apt ` plugin anymore . @ realm/java
Fix OsRealmSchema leak __EoT__ None
update android gradle plugin to 2.3.1 __EoT__ @ realm/java
refactor internal method name in RealmSchema __EoT__ @ realm/java The main purpose of this refactoring is making it easy to distinguish updating ` ColumnIndices ` object itself and creating new ` ColumnIndices ` object .
Resume sending update messages __EoT__ Fixes # 4418
Feature/backlinks __EoT__ Refactor RealmObjectSchema Clean up Proxy generation Not all tests pass ... This is now ready for the mods to the proxies , to support backlinks queries . Not all the tests pass yet but I 'd like to get reviews started ...
Acquire a global ref of jstring for field changes __EoT__ When there are more than 512 fields change , the JNI local ref table size limitation may be reached . Fix # 4378
Update object store __EoT__ to 3b6c0f6110 . Fix # 4369
Revert Progress Listeners __EoT__ Due to bugs discovered in Sync Progress Listeners , this commit removes the functionality again until we can fix those bugs . @ realm/java
correct expected and actual in assertion __EoT__ @ realm/java
remove breaking changes in SyncSession.ErrorHandler __EoT__ fixes # 4380
Refactor Schemas into separate native and realm-based implementations __EoT__ I would like your opinion on this refactor . I think it is mostly right , but , at this point I have done no test beyond making sure it compiles . It illustrates my intention , though , without taking all the time to fix details . I think this is a significant improvement and I think it would make it much easier to migrate the code , slowly , to using ObjectStore . Have a look , if you would , and see if you agree . Note that I am not particularly interested in bugs smaller than design-level problems . I 'm only trying to find out , at this point , if the basic idea is sound .
Mark @ LinkingObjects as beta __EoT__ Pr . internal discussion @ realm/java
Sync Progress Notifications __EoT__ Fixes # 4104 This PR adds support for Sync Progress Listeners . The public API mirrors the Cocoa one with one exception . Instead of having a ` Direction ` enum , I added a two methods ` addDownloadProgressListener ` and ` addUploadProgressListener ` . It reduces the complixity of the method and is generally considered good practise : https : //martinfowler.com/bliki/FlagArgument.html TODO - [ x ] Finalize public API - [ x ] Cleanup Javadoc - [ x ] Implement integration tests . - [ x ] Add sample implementation to the ` objectServerExample ` Needs fixing ( possible in other PR 's ) : - [ ] Figure out how to handle ProgressListeners being added before the Realm instance is open . Right now it is n't possible , which is an odd restriction . Lifting it seems to require unbundling the session life cycle from Realm instances . We probably want to do that anyway though .
Updating to Realm Sync 1.5.0 and Realm Core 2.5.1 __EoT__ @ realm/java
Add detailed notification for RealmObject __EoT__ - Add RowObject for wrapping Object Store 's Object class . - Enabled detailed object notification . - Add RealmObjectChangeListener , ObjectChangeSet . - Fix false positive change notifications for RealmObject . Now the notification will only be sent when the object actually changes . See # 4101
Automatically append ` /auth ` to authentication URL if needed __EoT__ Fixes # 4370 /cc @ ericmaxwell2003
Set log level for core logger bridge __EoT__ Set the all core logger bridges log level with the global log level . Fix # 4337
Trigger collection listeners when commit __EoT__ - The listeners on RealmList/RealmResults will be tiggered immediately when the transaction committed on the same thread if the collections are changed or the async query should return . - Listeners on the RealmObject will have same behaviour after # 4331 merged . This is to solve the problem for predictive UI animations and local transactions . Fix # 4245
Enable checkstyle __EoT__ Not currently failing on errors
Javadoc for findFirstAsync __EoT__ Fix # 4360
Update gradle wrapper to 3.4.1 __EoT__
add @ Override annotation to internal backlinks getters . __EoT__ @ realm/java
fix build error in Javadoc task __EoT__ @ realm/java
Introduce ErrorProne plugin __EoT__ This PR requires merge of # 4338 and # 4341 . After merging of those PRs , all checks should be passed .
Run code formatter over all production code __EoT__ With the merge of this commit , we end debates about code formatting . All code gets formatted by the formatter in ` ... /realm/config/studio/Realm-style.xml ` . PLEASE SEE THE NOTE BELOW ABOUT HOW TO DO THIS ! If you dislike the way some code is formatted , please , instead of challenging the author , teach the formatter to format it they way you would like it formatted , and redistribute . USING THE FORMATTER : Using the formatter requires one more step than you might expect . From Studio : ` Preferences ... > Code Style > Java . ` Use : ` Manage > Import ` to import the Realm-style style from the repo . Once it is imported , you *must* use the ` Copy to Project ` button to set the Realm Style as the code style for the project .
Upgrade Kotlin example __EoT__ @ realm/java
Restoring Sync logging __EoT__ - Sync Client is no longer created from the Java binding , but from the OS - Registering a log factory so the OS can create a logger to attach to the sync client
fix warnings reported by ErrorProne ( second PR ) __EoT__ @ realm/java
Fix warnings from error prone plugin __EoT__ https : //github.com/tbroyer/gradle-errorprone-plugin This PR does not add the plugin , just fix the warnings . I 'll add the plugin in another PR with suppressing some warnings .
stop using deprecated findbugs annotation __EoT__ ` edu.umd.cs.findbugs.annotations.SuppressWarnings ` is deprecated . This PR replaces it with ` edu.umd.cs.findbugs.annotations.SuppressFBWarnings ` . @ realm/java
remove unnecessary array allocations __EoT__ just a small improvement . @ realm/java
Backlinks __EoT__ # Closes # 607 Replaces # 2881 , # 4200 Design PR : # 2904 This PR adds support for Backlinks or LinkingObjects . -- -- - # # # Open Questions - [ ] How live are ` RealmResults ` and how should ` ChangeListeners ` be triggered ? - [ ] Consider how ` CheckedRow ` should handle BackLinks . # # # Design - [ x ] Is ` @ Backlink ` the correct name for the annotation ? - > No . Correct name is ` @ LinkingObjects ` - [ x ] Should backlinks be followed when using ` copyFromRealm ` ? - > No - [ x ] How should ` copyToRealm ` react ? Ignore it or throw an exception ? - > Ignore - [ x ] Should backlinks be null or empty list when using ` copyFromRealm ` ? - > Null ensures people do n't accidentally assume it is a managed object . This ensures that people do n't accidentally assume it is a managed object . It unfortunately also means that unmanaged and managed objects are no longer as ` equal ` . - [ x ]
Upgrading to Realm Sync 1.3.1 __EoT__ Fixes a potential corruption ( never reported by anyone ) . @ realm/java
Use ` clang-format ` to format C++ code __EoT__ Superseed # 4280 ( targeting ` releases ` instead )
Using ObjectStore SyncManager & Session __EoT__ This PR integrates the ObjectStore SyncManager & Session , and get rid of the Java state machine/wrapper around the native OS session . This is a continuation of the work started by @ cmelchior in https : //github.com/realm/realm-java/pull/3900 During the integration I found two bugs/limitation in the ObjectStore that I fixed temporarily in this [ branch ] ( https : //github.com/realm/realm-object-store/tree/nh/sync_manager_java_integration ) , while waiting for a proper fix for : - https : //github.com/realm/realm-object-store/pull/370 - https : //github.com/realm/realm-object-store/issues/379 The remaining tasks are : - [ x ] [ Re ] Implementing refresh token - [ x ] Testing the Client reset - [ x ] Merging OS changes into ` object-store/master ` - [ x ] Merging ` java/releases ` _behold conflict wrath_ 👹 - [ x ] Fixing Tests
Fail Realm.migrateRealm ( ) if a SyncConfiguration is used . __EoT__ Fixes # 4075 I used ` IllegalArgumentException ` instead of ` UnsupportedOperationException ` , since the later should only really be used if the method fails for all input IMO .
compileSdkVersion and targetSdkVersion to 25 __EoT__
Update kotlin used in example to 1.1 __EoT__ @ realm/java Changes in ` KotlinExampleActivity.kt ` is mostly adding try-finally . Adding ` ? w=1 ` at the end of the URL ( https : //github.com/realm/realm-java/pull/4282/files ? w=1 ) makes easy to understand the diff .
Add thread check to methods in DynamicRealmObject __EoT__ fixes # 4258 @ realm/java
Add a timeout of one hour to CI builds . __EoT__
Remove deprecated Logger class __EoT__ None
Add thread check to methods in RealmQuery . __EoT__ Throw IllegalStateException instead of process crash when any of thread confined methods in RealmQuery is called from wrong thread . fixes # 4228 @ realm/java
Fixed element type checking in DynamicRealmOject # setList ( ) . __EoT__ fixes # 4252 @ realm/java
Remove unnecessary 'super 's __EoT__ Since this.addListener does not exist , 'super ' is not needed .
Remove unnecessary 'super 's __EoT__ Since this.removeListener and this.removeAllListeners does not exist , super.removeListener and super.removeAllListeners are not necessary . Just use removeListener and removeAllListeners instead . Please merge # 4247 before this PR .
stabilize flaky test __EoT__ @ realm/java
Revert # 4207 __EoT__ revert # 4207 since we need to build both release and debug before importing ` realm ` project into Android Studio . @ realm/java
Crash when on constructor calls another with default values __EoT__ # 4249 was accidentally merged towards master . This is the same PR against ` releases ` .
Expose bug with default constructors __EoT__ Apparently the recent change to getters/setters ( https : //github.com/realm/realm-java/pull/4206 ) caused a regression not caught by our unit tests , but it was revealed by our Kotlin example ( we should really re-enable checking those again ) . /cc @ zaki50
Deprecate distinctXxx of RealmResults __EoT__ Those methods should only exist in the RealmResults . And maybe those should be deprecated since all they are doing is distinct on the where ( ) . And annotate methods with @ Override in the OrderedRealmCollectionImpl .
RealmList.asObservable ( ) __EoT__ Fixes # 1956
Remove observable interfaces __EoT__ It is very difficult to implements RealmObservable for RealmObject because of generics . So implements those methods directly instead .
RealmObject now uses the same interface methods for RealmObservable __EoT__ This PR makes RealmObject have the same methods for controlling change listeners as ` OrderedRealmCollection ` but without implementing the interface . Yes , it is extremely annoying , but so far any attempt to make it better have failed : `` ` public abstract class Realm < E extends RealmObject > implements RealmModel , RealmObservable < E > `` ` * Crashes the Java compiler because it can not find ` rx.Observable ` . Which is extremely perplexing . Possible the class loader does something else than normal in this case . We can not require everyone to include RxJava . Attempting to add RxJava as a provided dependency in the maven POM for the artifact did not solve the issue . * Also Kotlin has stricter requirements for generics . Causing fun errors like ` Projections are not allowed for immediate arguments of a supertype ` and ` type parameter bound for E in fun < E : RealmModel ! > where ( clazz : Class < E ! > ! ) : RealmQuery < E ! > ! is not satisfied : inferred type Person ! is
Deleted RealmObjects are now emitted as well . __EoT__ Fixes # 3138 It appears that moving to the Object Store notifications accidentally fixed https : //github.com/realm/realm-java/issues/3138 for us . Yay . I just added the unit tests to verify + changelog .
Cast to int64_t when logging __EoT__ Otherwise is will be casted to bool when formatting .
Implement fine gained notification __EoT__ - Add RealmObservable and RealmCollectionObservable interfaces . - Enable detailed change information for RealmResults through OrderedCollectionChange interface . - Fix a bug in the ObserverPairList which could cause the removed listener gets called if it was removed during previous listener iteration . Fix # 989 - [ ] ` RealmObject ` should implement ` RealmObservable ` .
Fix build base with core only __EoT__ - The util.hpp contains some sync only headers . It causes problem when build with core only for base flavour . - We have an agreement that use macro to do casting should be avoided since it is less readable . - An error message issue in CMakeList .
improve performance of getters and setters in proxy classes __EoT__ This change is a part of fixes of # 3809 . Before this PR : `` ` public class Model implements Realm Model { private String foo ; public Model ( ) { super ( ) ; // 2 : context is not set yet realmGet $ foo ( ) ; // 3 : this getter injects the context } } public class ModelRealmProxy extends Model { public ModelRealmProxy ( ) { super ( ) ; // 1 : execute the parent 's constructor // 4 : proxyState == null should be false since getter already injected the context . // If parent 's constructor does not use any setters/getters at all , context is injected here . if ( proxyState == null ) { injectObjectContext ( ) ; } } } `` ` After this PR : `` ` public class Model implements Realm Model { private String foo ; public Model ( ) { super ( ) ; injectObjectContext ( ) ; //2 : this line is injected by our transformer . realmGet $ foo ( ) ; // 3 : no need to call injectObjectContext ( )
Fix documentation for directory ( ) method in RealmConfiguration __EoT__ There is no ` context.getFiles ( ) ` method . The correct documentation for the ` directory ( ) ` should read ` The default value is { @ code context.getFilesDir ( ) } ` instead of ` The default value is { @ code context.getFiles ( ) } `
fix README format issue . __EoT__
Fix log level in jni __EoT__ fixes # 4204 @ realm/java
Improve performance of publishToMavenLocal ( installRealmJava ) task __EoT__ now publishToMavenLocal in realm/realm-library/build.gradle depends on assembleRelease task insteadof assemble task in order to improve build time . @ realm/java
Add OrderedRealmCollectionSnapshot __EoT__ Introduce OrderedRealmCollectionSnapshot as another type of OrderedRealmCollection . A snapshot can be created from RealmResults or RealmList . A snapshot is backed by a snapshot of OS Results . So the snapshot itself wo n't be updated . The size and order stay the same forever ( elements inside are still live objects. ) . Since the RealmResults is auto-updated all the time , snapshot will be usefull when changing the results in a simple loops . This commit also moves the common code from RealmResults to OrderedRealmCollectionImpl since those can be shared with snapshot implementation . Implement # 3883
Upgrading to Realm Sync 1.0.4 __EoT__ This includes Realm Core v2.3.1 : * https : //github.com/realm/realm-core/pull/2428 ( LTO ) * https : //github.com/realm/realm-core/pull/2426 ( ` advance_read ` fix ) @ realm/java
Fix merge from f6343b to master __EoT__ None
Use transitive dependencies in CMake __EoT__ This is a port of # 4155 to the ` releases ` branch
Nh/refresh access token __EoT__ fixes https : //github.com/realm/realm-java/issues/4094
Modify Java docs and comments . __EoT__
Allow more leniency when defining the server url __EoT__ Fixes # 4144 @ realm/java
RealmMigrationNeededException after renaming an indexed field and adding a new field with the old name __EoT__ Hello ! Recently , I had to rename an indexed field and add a new field with the same name as the old name for the existing one , but without an index . Everything was okay until we noticed that users are getting an exception and ca n't even launch the app . Stack trace : `` ` java io.realm.exceptions.RealmMigrationNeededException : Field count is less than expected - expected 13 but was 12 at io.realm.EventRealmProxy.validateTable ( EventRealmProxy.java:701 ) at io.realm.DefaultRealmModuleMediator.validateTable ( DefaultRealmModuleMediator.java:78 ) at io.realm.Realm.initializeRealm ( Realm.java:348 ) at io.realm.Realm.createAndValidate ( Realm.java:313 ) at io.realm.Realm.createInstance ( Realm.java:278 ) at io.realm.RealmCache.createRealmOrGetFromCache ( RealmCache.java:143 ) at io.realm.Realm.getDefaultInstance ( Realm.java:209 ) at [ redacted ] `` ` Event class before the changes : `` ` java public class Event extends RealmObject implements Parcelable , MediaObject { @ PrimaryKey private long id ; @ Index private int channelId ; private Channel channel ; private String title ; private String description ; private String picture ; private Long timeStartUnix ; private Long timeStopUnix ; private String category1 ; private String sysStatus ; private boolean isArchive ; private String
Add minVersion and targetVersion to Realm Transformer metrics __EoT__ Fixes https : //github.com/realm/realm-java-private/issues/206
remove duplicate init of the OS metadata __EoT__ calling ` nativeConfigureMetaDataSystem ` once to init the ObjectStore metadata table needed for client reset action & store Sync users
Fix RealmCollection.contains not respecting custom equal methods __EoT__ Got reported directly , and fixing it was easier than creating the issue : D EDIT : ` static.realm.io ` is still insanely slow so CI times out on the unit tests . Will move into review once that is fixed
RealmObject could be GCed when completedAsyncRealmObject __EoT__ Fix # 4086
allow to skip native build by setting buildTargetABIs to empty __EoT__ @ realm/java
Fix typo on error message __EoT__ Fix typo on error message
remove kapt dependency to io.realm : realm-annotations __EoT__ ` realm-annotations-processor ` has a transitive dependency to ` realm-annotations ` . No need to add it manually . And this change also fixes # 4087 .
Free the SharedRealm in phantom daemon __EoT__ Treat the SharedRealm the same as other native objects . SharedRealm.close will only call Object Store Realm : :close without deleting the ShareRealm pointer . Then we do n't need the finalizer anymore . Fix # 3730 . This is related with https : //github.com/realm/realm-object-store/pull/318 as well . It is possible that java close the Realm in any of the Object Store 's callbacks . To avoid Object Store operating on a invalid SharedRealm pointer , binding should try to make sure after callbacks . However , it can not be totally avoided since user could set the Realm instance to null and the instance can be GCed at any time . It is still something should be considered in the Object Store implementation .
No need to delete ros docker anymore __EoT__ None
Fixed CHANGELOG.md __EoT__ Please review this @ realm/java
Corrected RealmConfiguration # encryptionKey JavaDoc __EoT__ encryptionKey requires a 64 byte key instead of a 64 bit key . May lead to confusion
implement global logout ( # 3639 ) __EoT__ Closes # 3639
PermissionRequest/PermissionOffer __EoT__ Fixes # 3981 - [ x ] Add new classes - [ x ] Add appropriate Javadoc - [ x ] Add integration tests - [ x ] Upgrade ROS and verify integration test Depends on https : //github.com/realm/realm-object-server/pull/845
Preparing 2.3.0 __EoT__
Samsung Tab 3 Lite 7 crashes on Realm 2.0.1 and 2.0.2 __EoT__ A Samsung Galaxy Tab 3 Lite 7 ( SM-T111 ) crashes on startup with the below error ( Android 4.2.2 ) Has been confirmed working on Nexus 5 , Nexus 4 and emulators 15 , 19 , 21 , 22 , 23 , 24 . `` ` 10-18 11:57:25.851 D/dalvikvm ( 6127 ) : Trying to load lib /data/app-lib/com.zt.android.test.realmio-1/librealm-jni.so 0x412e0568 10-18 11:57:25.851 D/dalvikvm ( 6127 ) : Added shared lib /data/app-lib/com.zt.android.test.realmio-1/librealm-jni.so 0x412e0568 10-18 11:57:25.859 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeCreateConfig 10-18 11:57:25.859 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeGetSharedRealm 1521857752 10-18 11:57:25.867 I/v_hwc ( 112 ) : hwc prepare : 3D composition 10-18 11:57:25.875 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeCloseConfig 1521857752 10-18 11:57:25.875 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeHasTable 1522273128 10-18 11:57:25.875 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeCloseSharedRealm 1522273128 10-18 11:57:25.875 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeCreateConfig 10-18 11:57:25.875 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeGetSharedRealm 1521857752 10-18 11:57:25.875 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeGetVersion 1522276080 10-18 11:57:25.875 V/REALM ( 6127 ) : -- > Java_io_realm_internal_SharedRealm_nativeCloseConfig 1521857752 10-18 11:57:25.875 V/REALM ( 6127 ) :
Update the documentation for downloading the NDK . __EoT__ Fixes # 4057
moved changelog entry of like predicate to 2.3 __EoT__ fixes # 4063 @ realm/java
SyncCredentials.accessToken + Integration tests __EoT__ This PR adds support for ` SyncCredentials.accessToken ( ) ` which is required for # 4005 . I also found a number of issues with the integration tests . They have been fixed as well .
SyncUser.all ( ) returns Map __EoT__ For # 3697
add backup option when receiving a client reset from Sync protocol __EoT__ mostly a copy/past from https : //github.com/realm/realm-object-store/blob/ca5e3b8b7f8332a69970f226728889d459fbdd60/src/sync/sync_session.cpp # L352-L372 to add a backup operation when receiving a client_reset code Closes # 3991
Nh/fixes token renew __EoT__ Fixes # 4038 and # 4039. preventing Sync client to renew the access token .
Fix merge from 9d96c4 to master __EoT__ None
Upgrading Realm Sync to v1.0.0-BETA-7.1 __EoT__
'Entity is not part of the schema for this Realm ' when is under androidTest folder __EoT__ # # # # Goal I want to write an android instrumentation test to persist a RealmObject called 'Dog ' . Test works fine if Dog is under /src/main/java folder . But Dog is a class only for testing , so I want to place it under /src/androidTest/java folder # # # # Expected Results Test should run fine after class is moved under /src/androidTest/java # # # # Actual Results Started running tests java.lang.IllegalArgumentException : Dog is not part of the schema for this Realm # # # # Code Sample My test classes are : `` ` java @ RunWith ( AndroidJUnit4.class ) public class RealmTest { @ Rule public TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; Realm realm = null ; @ Before public void setUp ( ) { RealmConfiguration realmConfig = configFactory.createConfiguration ( ) ; realm = Realm.getInstance ( realmConfig ) ; } @ After public void tearDown ( ) { realm.close ( ) ; } @ Test public void testPersistEntity ( ) { realm.beginTransaction ( ) ; realm.copyToRealm ( new Dog ( ) ) ; realm.commitTransaction (
Wire the `` like '' predicate into RealmQuery __EoT__ Fixes # 3752
Fix merge from c9914c to master __EoT__ None
Upgrading to Realm Sync 1.0.0 BETA 7.0 __EoT__
Count 'cpuX ' files in /sys/devices/system/cpu as a more accurate way __EoT__ of counting processors and setting the max threads for the Executor . ( # 3810 )
Memory leak ( Row ) in Java_io_realm_internal_Table_nativeSetPrimaryKey __EoT__ I just stumbled across this while investigating a Core crash seems we 're allocating a Row on the heap https : //github.com/realm/realm-java/blob/d547fde64271229cb6bb98df30deda05faeba9ce/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp # L1508
Memory leak ( Row ) in Java_io_realm_internal_Table_nativeSetPrimaryKey __EoT__ I just stumbled across this while investigating a Core crash seems we 're allocating a Row on the heap https : //github.com/realm/realm-java/blob/d547fde64271229cb6bb98df30deda05faeba9ce/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp # L1508
Memory leak ( Row ) in Java_io_realm_internal_Table_nativeSetPrimaryKey __EoT__ I just stumbled across this while investigating a Core crash seems we 're allocating a Row on the heap https : //github.com/realm/realm-java/blob/d547fde64271229cb6bb98df30deda05faeba9ce/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp # L1508
Nh/fix 3966 __EoT__ fixes # 3966
Single daemon thread for notification __EoT__ With changes in https : //github.com/realm/realm-object-store/pull/197 , there is only one thread will be create for listening changes for all different Realms . But an additional SharedGroup will be created in the daemon thread for determine which SharedGroup has changed since last time . That requires some changes in the java side especially the daemon thread should not be created when Realm.compactRealm called . realm/realm-object-store # 197 needs to be merged first .
Enable -Werror and fix warnings __EoT__ Adapt the same warning options from object store Depends on https : //github.com/realm/realm-object-store/pull/308
Update Javadoc of Realm.compactRealm . __EoT__ It is related # 3520 . Compacting encrypted Realms is working , so Javadoc should be updated .
Java lint warnings with proxy class __EoT__ Fix # 2929
added the throw documentation for delete method __EoT__ Added Missing ` throws ` in the javaDoc
Wait forever in debugging mode __EoT__ It is quite annoy when we stop at a breakpoint the awaitOrFail timeout happens . By checking if the debugger connected , we can know we are actually debugging the test and do n't want to be interrupted by the timeout .
Add the underlying information on RealmFileException . __EoT__ Add the underlying information on RealmFileException to help investigating incompatible lock file issue .
Update core , sync and object store __EoT__ Core to v2.2.0 . Sync to v1.0.0-BETA-5.0 . Also adapt changes from latest object store .
Waiting longer time for checking auth server __EoT__ None
Improve Error Message Output __EoT__ Improve error message output when an Entity Class has n't a default constructor
Disabling sync/compact combo __EoT__ Due to https : //github.com/realm/realm-core/issues/2345 we need to disable ` Realm.compactRealm ( ) ` when the Realm is sync'ed .
Remove final modifier from all major classes . __EoT__ Fixes # 3869 @ realm/java
Zeroing memory before using it __EoT__ I have noticed that while debugging in Android Studio , strings contain garbage . Java strings can contain ` NULL ` characters so it can be a simple artefact of that . But in the light of our string issues in the last two years , it might be worth zeroing the memory before using it . The impact on performance is evaluated using the microbenchmark ( included in the project ) on a Samsung S III mini ( I-8190N ) . Impact is minimal ( writeLong is included to evaluate the variance ) . | Test | String length | w/o ` memset ` | with ` memset ` | | -- -- -- | -- -- -- -- -- -- -- | -- -- -- -- -- -- -- -| -- -- -- -- -- -- -- -- -| | writeLong |N/A | 15.63 μs | 16.09 μs | | writeLongString | 64 | 23.71 μs | 24.86 μs | | writeMediumString | 16 | 20.8 μs | 21.55 μs | | writeShortString | 3 | 20.31 μs | 20.40 μs |
Nh/fix test __EoT__ ` SyncConfiguration ` should n't use identity equals
Nh/objectstore userstore __EoT__ Uses the Object Store to save/retrieve SyncUsers * The current ObjectStore implementation supports only one logged-in user , hence the simplification of the ` UserStore ` interface . After the _SyncManager_ is completely integrated & the ObjectStore updated the SyncUser ` identity ` could be used , to work with multiple users .
updated README.md __EoT__ * ` make ` is not used anymore * no need to install ` s3cmd ` to build realm-java @ realm/java
Revert `` Revert `` Modernize the git checkout code in the Jenkinsfile '' '' __EoT__ Reverts realm/realm-java # 3852
Modernize the git checkout code in the Jenkinsfile __EoT__
Revert `` Modernize the git checkout code in the Jenkinsfile '' __EoT__ Reverts realm/realm-java # 3851
Modernize the git checkout code in the Jenkinsfile __EoT__
BYE BYE finalizer __EoT__ This PR is trying to move the native desctructions from finalizer to Phantom Deamon . And some ideas are inspired by https : //android-review.googlesource.com/ # /c/175765/10 - [ x ] Use linked list for phantom reference queue which should be faster than current array implementation . ( no more chunk allocation ) - [ x ] Use function pointer to generalize the deallocation for native objects instead of current ` switch ` / ` case ` based routine . - [ x ] All native objects go with the phantom reference , ( maybe even the ` SharedGroup ` / ` Group ` , needs to confirm ) . _This will be handled in other PR._ - [ x ] Use Phantom Deamon thread to do deallocation . - [ x ] Check if we still need lock on ` Context ` if we can do deallocation only on one thread . - [ x ] Some exciting benchmarks . # # # Why ? * To close # 2496 . Some UI freeze is caused by the Realm 's finalizer . * See [ Finalization and Phantom References ] ( https : //dzone.com/articles/finalization-and-phantom ) about
Lock the phone resource so we can have more executors per slave __EoT__
Upgrade to latest OS __EoT__ Upgrade to latest commit on the ` realm-object-store/realm-java ` branch @ realm/java
Added a support for androidTest on API 9 devices __EoT__ This enables for us to reproduce # 3804 on our unit test . @ realm/java After applying this change , our android test reproduces # 3804 on ARM with API 9 device , and # 3735 on x86 with API 9 emulator .
Fix getLocalInstanceCount crashing when Realms are closed again . __EoT__ Fixes # 3791 @ realm/java
Fix SyncConfiguration.toString ( ) __EoT__ Fixes # 3787 @ realm/java
fix artifactoryPublish task in realm-annotations-processor __EoT__ fix NPE when executing ` artifactoryPublish ` task in ` realm-annotations-processor ` . `` ` : **** : ****-annotations-processor : artifactoryPublish FAILED : ojoRealm FAILED FAILURE : Build failed with an exception . * What went wrong : Execution failed for task ' : ****-annotations-processor : artifactoryPublish ' . > java.lang.NullPointerException ( no error message ) `` ` @ realm/java @ emanuelez
Set native library version to ReLinker __EoT__ Set native library version to ` ReLinker ` in order to prevent to use old native library . fixes # 3775 @ realm/java
Add support for the management-Realm __EoT__ Adds the low-level support for the Permission Realm : - [ x ] Added permission classes - [ x ] Added ` getPermissionRealm ` on ` User ` - [ x ] Add Javadoc - [ x ] Figure out how we get the URL to the management Realm - [ x ] Enabled support for including Realm classes/modules inside the library - [ x ] Replaced APT with the newly added AnnotationProcessor directive .
removed includedescriptorclasses option to supprt built-in shrinker of Android Gradle Plugin __EoT__ fixes # 3714 @ realm/java
Fixed a bug that caused unexpected MigrationNeededException when a field was added to synced Realm __EoT__ In sync mode , ` validateTable ( ) ` must get all fields in the tabla . @ realm/java
Nh/fixes 3732 insertOrUpdate using other Realm __EoT__ fixes # 3732 Using an ` IdentitifyHashMap ` in case of a cyclic dependencies between existing Realm models , will end up in an infinite loop ( _StackOverFlow_ ) , because the cache will not return previously inserted elements ( since the Identity/Hash of the newly inserted objects does n't match the graph object passed as an argument , because traversing the graph will create a different *RealmProxy class , which makes the _cache_ useless ) The benchmark still looks good on batch inserts ! [ benchmark_batchwrite ] ( https : //cloud.githubusercontent.com/assets/1793238/20067816/7d809d96-a50e-11e6-8638-47094ac234e7.png )
Support annotationProcessor configuration . __EoT__ Added support for ` annotationProcessor ` configuration provided by Android Gradle Plugin 2.2.0 or later . Realm plugin adds its annotation processor to ` annotationProcessor ` configuration instead of ` apt ` configuration if ` annotationProcessor ` configuration is provided and ` com.neenbedankt.android-apt ` plugin is not applied . In Kotlin project , ` annotationProcessor ` configuration is never used for now The projects that satisfy all following conditions must apply ` com.neenbedankt.android-apt ` before Realm 's plugin manually ( or modify the configurations to ` annotationProsessor ` or its variants ) . * Java project ( not Kotlin project ) . * Not applying ` com.neenbedankt.android-apt ` plugin before Realm 's plugin manually . * Using ` apt ` or its variants ( ` *Apt ` ) configurations . fixes # 3026 In this PR , Realm gradle plugin chooses a configuration by following rules . First , ` com.neenbedankt.android-apt ` plugin was already applied manually by the user , Realm plugin always uses ` apt ` configuration . If ` com.neenbedankt.android-apt ` was not applied by the user , Realm plugin uses : | project language | ` preferAptOnKotlinProject ` | ` annotationProcessor
Nh/add secure token android key store files __EoT__ * Add missing src files to ` secureTokenAndroidKeyStore `
DefaultRealmModule not created for empty Kotlin projects __EoT__ Fixes # 3746 @ realm/java
Nh/remove usresync crypto __EoT__ Remove code related to secure ` SynUser ` token , as now it lives in a separate repo https : //github.com/realm/realm-android-user-store . This PR also remove ` Twitter ` as an OAuth provider , as it 's not supported by ROS .
minor grammar fixes __EoT__
fix typo ( IMCOMPATIBLE to INCOMPATIBLE ) __EoT__ @ realm/java
Remove excess comment __EoT__ Thread pool is not associated with Сontext . It looks like a typo .
Workaround for jni headers path in AS __EoT__ See https : //github.com/googlesamples/android-ndk/issues/319
fix a bug that proguard configuration keeps all class names . __EoT__ Our ProGuard configuration introduced in ` 2.1.0 ` unexpectedly keeps classes those do not have any fields with KeepMember annotation . fixes # 3689
Set default RxFactory in SyncConfiguration when RxJava is available . __EoT__ @ realm/java
Remove env for TR_ENTER __EoT__ None
Upgrade to Sync BETA-3.2 __EoT__ Upgraded to Sync BETA-3.2 Upgraded ROS ( integration tests ) to 2.3 Added comments to dependencies.list to increase readability . Restructured README around integration tests to be easier to follow .
Refactor RealmLog __EoT__ The motivation : - The previous implementaion for JNI log needs calls like : JNI - > Java - > JNI . It is not quite effecient for the most common case -- log in JNI and sync . - The previous log levels are bit confusing . - util.cpp gets messy . - The Logger class in Java gets confusing with the Logger from core/sync . So this commit makes below changes : - Adds cpp namespace jni_impl and jni_util , and make log relevant code belong to these two namepsaces . - Moves the RealmLog to JNI . - Implenment a default Android logger in native code . - Add tag support for realm-java Logger . Java side is using tag `` REALM_JAVA '' , JNI side is using tag `` REALM_JNI '' and sync is using tag `` REALM_CORE '' . - All tags share the same log level . - Some cleanups . Benchmark : | | Before NokiaX2 - 4.3 | After NokiaX2 - 4.3 | | -- - | : - : | -- : | | readDouble | 2.37 μs | 2.39 μs | | readLong | 2.53 μs |
Fix memory leak when unsubscribing from RxJava observables . __EoT__ Fixes # 3672 Fixes # 3552 This PR fixes a bug that would leak all RealmResults/RealmObject instances on any long lived thread . Kind embarrassing since I looked into this a couple of weeks ago and could n't find anything , but yay for a good repo case . There is no unit test since the code in question is private and any test would be non-deterministic . If you think a unit test is required , I can move the helper class to our internal package and unit test it from there . That would n't have caught this particular case though as this bug was more about calling code and class not agreeing on the protocol for using the class . @ realm/java
update github issue template __EoT__ added ` Realm sync feature enabled : yes/no ` @ realm/java
Add ANDROID_NDK back __EoT__ None
Upgrade Core to 2.1.3 and Sync to BETA-3.1 __EoT__
Added credits to changelog __EoT__ @ realm/java
fix temp directory name __EoT__ I forgot to address this Muling 's comment https : //github.com/realm/realm-java/pull/3591/files # r83391423 @ realm/java
delete realm file before test __EoT__ existing database file may cause ` RealmMigrationNeededException ` @ realm/java
allow to put Realm database file on external storage . __EoT__ fixes # 3140 fixes # 3633 This PR requires realm/realm-object-store # 191 to be merged TODO : - [ x ] update object-store - [ x ] tests
SyncUser.currentUser is now correctly cleared on logout __EoT__ Fixes # 3638 Also fixed some compile errors . Not entirely sure how they where not caught by CI ? @ realm/java Also this impact # 3639 ( /cc @ zaki50 )
Align Sync classes with Cocoa __EoT__ ` Credentials ` - > ` SyncCredentials ` ` User ` - > ` SyncUser ` ` Session ` - > ` SyncSession ` Also renamed internal ` SyncSession ` to ` ObjectServerSession ` and internal ` SyncUser ` to ` ObjectServerUser ` to avoid complete confusion . @ realm/java
Adding integration-tests __EoT__ https : //github.com/realm/realm-java-private/issues/60 How it works - An node-js service is created to control the ROS . By default it is runninng at port 8888 . - To start the ROS set a GET request to http : //127.0.0.1:8888/start . - To stop the ROS set a GET request to http : //127.0.0.1:8888/stop . - The CI docker will start the testing service before integration tests begin . - See the README to see how to start the testing service locally . - Integrations tests locate in realm/realm-library/src/syncIntegrationTest - Before running those tests , a sync testign server needs to be started .
Remove comments that mention realm-java-private __EoT__
Call notifySessionError from native code __EoT__ Fix # 3597
fix flaky test __EoT__
Adds User.all ( ) __EoT__
Wrong entry in the change log __EoT__ None
Ignore android.injected.build.abi __EoT__ It is set by AS randomly for some reasons , seems AS will inject ABIs according to execution target . But it is not having the right ABI values all the time . So just disable it , only check buildTargetABIs property .
Update ProGuard configuration __EoT__
Update kotlin example __EoT__ Part fix for # 3580 @ realm/java
Disable flaky test __EoT__ Life is to short for restarting CI all the time . Disabling this for now until we can figure out what is wrong with it . /cc @ nhachicha
Upgraded to Sync Beta 2.0 __EoT__ @ realm/java
Enable OJO upload for AAR flavours . __EoT__ Closes # 3513 OJO Uploads now work again . I tried to abstract the CURL commands , but it just ended up more messy and unreadable . So I went back to this more copy-paste way of doing it . @ realm/java @ emanuelez
fix build error on Java 7 environment __EoT__ This PR stops using ` removeIf ` in gradle plugin . That method is available only on Java 8 or later . fixes # 3563 @ realm/java
fix native crash in DynamicRealmObject # setList ( ) __EoT__ fixes # 3549 This PR requires # 3551 to be merged .
distinctAsync now respects other query parameters . __EoT__ Closes # 3537 @ realm/java
Always use CheckedRow when creating DynamicRealmObject __EoT__ fixes # 3404 DynamicRealmObject should not have ` UncheckedRow ` instance as a ` row ` . This PR fix that issue . And this also removes a check of the ` row ` instance if it is an instance of ` UncheckedRow ` in some constructors of DynamicRealmObject since CheckedRow is never passed to it .
Clean .so files that were created by old build script __EoT__ Credit to @ zaki50 to add this fix . After a gradle clean ` realm/realm-library/src/main/jniLibs ` was not cleared causing the packager to use old generated _.so_ in the AAR instead of the freshly compiled inside ` externalNativeBuild ` ex ` ./realm/realm-library/.externalNativeBuild/cmake/objectServerDebug/obj/x86/librealm-jni.so ` without this fix it might include old _.so_ not containing the sync symbols .
Add support for the multiple flavors to the metrics collection stage __EoT__
use Context.registerReceiver ( ) instead of AndroidManifest.xml to register NetworkStateReceiver for android.net.conn.CONNECTIVITY_CHANGE broadcast __EoT__ On Android 7 device , android.net.conn.CONNECTIVITY_CHANGE is not deliverd to receivers registerd by AndroidManifest.xml . See https : //developer.android.com/topic/performance/background-optimization.html # connectivity-action fixes # 3511
change master version to 2.1.0-SNAPSHOT __EoT__
Compacting encrypted Realms is working . __EoT__ Closes # 1033 Finally ! ! ! ! ! @ finnschiermer @ realm/java
Add support for ccache __EoT__ This should shave off a few minutes from CI builds
Append the version number to the name of all the artifacts uploaded to Bintray __EoT__ Fixes # 3514 . This might solve an issue regarding Bintray not updating the ` maven-metadata.xml ` file in the Maven repository
Moving ubuntu package stuff __EoT__ We need to get these debian/ubuntu packaging changes into master . I have also added the possibility to abort if Java is not found . @ bmunkholm
sorting and getting on negative column index no longer breaks core __EoT__
Installation report . __EoT__
New async-mode support + reserve in SharedGroup __EoT__
Added documentation on size limit in writeToMem and removed writeToByteBuffer __EoT__
Use set_string_unique to set primary key __EoT__ See the change in OS https : //github.com/realm/realm-object-store/pull/168
Add INTERACTIVE mode for build.sh config . __EoT__ @ kspangsege @ hovoere @ mekjaer
Do n't run pandoc if you do n't have it installed . __EoT__
Query on view __EoT__
Moving tutorial . __EoT__ @ bmunkholm
merge master into Breaking __EoT__
Changed name from TableDefinition to TableSchema __EoT__
removed unused imports __EoT__
reanabled javaPrint method in Util . Called by low level JNI in debug mod ... __EoT__ ... e
Merge develop into master __EoT__
Dumping Debian/Ubuntu version to 0.1.0 . __EoT__ It seems that my git client has deleted some white spaces as well . @ bmunkholm @ hovoere @ mekjaer
Removed NEW comment from already implemented methods __EoT__
Maven support for Ubuntu __EoT__ @ bmunkholm @ hovoere @ mekjaer
Merged develop into Breaking __EoT__
better test coverage __EoT__
Removed shortnames from Query , and updated doc __EoT__
Add cause to RealmMigrationNeededException __EoT__ None
fix duplicate check of accessors when adding them __EoT__ We need to pass ` java.lang.String ` object instead of ` groovy.lang.GString ` object to ` contains ( ) ` since the ` contains ( ) ` method accepts any type of object thus ` groovy.lang.GString ` is not converted to ` java.lang.String ` . fixes # 3469
Documented limit on query aggregates __EoT__
Develop into master __EoT__
Update core to 2.0.0-rc7 __EoT__ None
test cases + group.equals modified __EoT__
Bump to build tools 2.2.0 __EoT__ @ realm/java
Moved setIndex ( ) and hasIndex ( ) to the Typed StringColumn , so it only ap ... __EoT__ ... pears for strings . Updated tests .
Fixed leak in Query __EoT__ And called finalize ( ) instead of the private_debug_close ( ) which is removed .
Dynamic Operations on Subtables __EoT__
Removed ByteBuffer , now only byte [ ] is supported . In both typed and dyna ... __EoT__ ... mic interface
Bump to build tools 2.2.0 __EoT__ @ realm/java
Added memory warning to Group ( byte [ ] ) __EoT__
OutOfMemoryError to be thrown when tightdb runs out of memory __EoT__
Merging changes from develop into Breaking-updates + Showcase example now uses built-in toString ( ) __EoT__
Introduce global init __EoT__ This PR changes slightly how Realm is initialized 1 ) ` Context ` is now removed from ` RealmConfiguration.Builder ( ) ` 2 ) Instead a global ` Realm.init ( Context ) ` is introduced It has a number of advantages : - The ` Context ` is now available before touching _any_ Realm API . This is especially an advantage for future features that wants to interact with the Android system without having a configuration first . - We now always have the context when loading JNI code , which means we can always use Relinker . - Simplified Builder . - ` Realm.getDefaultInstance ( ) ` now works automatically without having to set one first - The JNI code is now only loaded from one location .
Test for exceptions on wrong parameter types in Query , and column out of bounds __EoT__
Only report to Slack on failure __EoT__
resurrect buildTargetABIs property support __EoT__ This PR enables us to specify ` buildTargetABIs ` property in command-line or in ` ~/.gradle/gradle.properties ` like before and it will be ignored when we execute gradle from AS ( AS automatically set appropriate ABI to ` android.injected.build.abi ` ) . @ realm/java
update javadoc comments of JSON APIs in Realm class to mention available API level . __EoT__ ` createAllFromJson ( Class , InputStream ) ` , ` createOrUpdateAllFromJson ( Class , InputStream ) ` , ` createObjectFromJson ( Class , InputStream ) ` and ` createOrUpdateObjectFromJson ( Class , InputStream ) ` only supports API level 11 or later . That should be mentioned in API reference . Actually related issue was created multiple times ( # 3356 , # 3455 ) . This PR adds a mention to the limitation of those APIs . fixes # 3455
Added finalize to TableQuery __EoT__
update CHANGELOG __EoT__ Sorry , I missed @ cmelchior 's comment https : //github.com/realm/realm-java/pull/3397 # r79114310 fast-merge /cc @ realm/java
Allow to specify default value of the field in model 's constructor __EoT__ This change allows to specify default value of the field . And this change also enables to call setter methods in model 's constructor . fixes # 777 fixes # 2536 TODO - [ x ] add tests - [ x ] update CHANGELING.md
Added IntelliJ to .gitignore and more comprehensive tests for aggregate methods on query __EoT__
Use java.io.IOException __EoT__ The correct exception when I/O errors is java.io.IOException . See http : //docs.oracle.com/javase/6/docs/api/java/io/IOException.html @ bmunkholm
Test cases added for JSON export , sorting and index __EoT__
merge Niko changes . __EoT__
Ref doc @ kneth __EoT__ Refdoc made for all dynamic classes . Most examples still missing , but added one big for dynamic tables .
Debian/Ubuntu support __EoT__ @ kspangsege @ bmunkholm
added thread check to Realm # createObject ( Class , Object ) __EoT__ Thread check in ` Realm # createObject ( Class , Object ) ` seems to be missing . @ realm/java
Alignment with C++ API reference . __EoT__
use the logic in Object Store to update schema version __EoT__ fixes # 3417
Disallow changing PK after object created __EoT__ Thrown an exception if changing the pk after the object created .
Building two Debian packages __EoT__ The build system is modified in order to build two debian packages : one for production and one for development .
Invalidate schema cache when the schema version of Realm is changed by other process . __EoT__ This PR is a part of multi-process support . Now schema cache referred by typed Realm instance is not shared and global schema cache is introduced instead in order to avoid validating schema multiple times for the same version . This enables to change the column index of the defined fields during Realm instances are open .
Update core to 2.0.0-rc4 __EoT__ And with some code cleanup . Throw an runtime exception when input java bytes array can not be read .
Ignore callingOrdersOfListeners for now __EoT__ since it becomes a flaky test after # 3370 . And it will be fixed very soon .
Add branch strategy to the CONTRIBUTING doc . __EoT__ None
Create object without setting PK is not allowed __EoT__ - createObject must be called with PK value when creating a object with PK defined . - Creating objects from JSON must have have corresponding PK defined in the JSON object . Known issue : The default values for creating object from JSONStream will be differnt from those created by createObject . Default values from default constructor VS default values from core . This has to be addressed by # 777
fix Javadoc documentation about encryption key length ( 64 bit - > 64 bytes ) __EoT__ fixes # 3389
Use createObject ( class , primaryKey ) in test __EoT__ Since Realm.createObject ( class ) will be deprecated on master for Classes with primary key defined , fix the test cases which use it first to avoid more conflicts when merging .
RealmLog __EoT__ This PR is preparing our API for the extended logging capabilities soon exposed in core , and it consists of a few changes . - ` RealmLog ` is now moved to the public API and refactored slightly - All JNI log events are now routed through the ` RealmLog ` - JNI logging events are now categorised as VERBOSE rather than DEBUG - Log methods now accept var args to ` String.format ` . This is an optimization to previously where we did string concatenation and then threw the result away . - RealmLog exposes the Log classes from Log4J . This is a good compromise as it closely mirrors the levels in core and also means the log levels will closely match anything running on a normal JVM . - The ` AndroidLogger ` class now maps between Realm Log levels and Android Log levels . - Closes # 3326 The general idea is that all logging events should be routed through ` RealmLog ` so people have a chance of enabling/disabling events as needed . Slightly unorthodox is perhaps the ` getMinimumLogLevel ` on the ` Logger ` interface , but it is needed so
Integrate Object Store [ PART4 ] - OS notifications __EoT__ - Use OS 's notification mechanism to notify threads . - Create RealmNotificer interface for decouple Android related handler logic . - Create AndroidNotifier for the handler notifications . The major change of this PR is about the timing . The notifications are not sent immediately after transaction committed . Instead , there is a dedicated thread monitoring changes and notify others when changes happen . The known problem is for every RealmConfiguration , a monitor thread will be created which is not ideal for app which is using multiple RealmConfiguration . There are different implementations for the monitoring thread in OS . For Android , we can choose from generic which is based on the core's wait_for_change ( ) and android which is used by dotnet based on the named pipe . To align with dotnet , we are using the named pipe for now which also enables notifications between realm-java and realm-dotnet .
DeleteLocalRef when the ref is created in loop __EoT__ Add wrapper class for JNI local reference to delete the local ref after using it . This is reported by user on helpscout : https : //secure.helpscout.net/conversation/244053233/6163/ ? folderId=366141 And some useful explanation can be found : http : //stackoverflow.com/questions/24289724/jni-deletelocalref-clarification Normally the local ref does n't have to be deleted since they will be cleaned up when program returns to Java from native code . Using it in a loop is obvious a corner case : the size of local ref table is relatively small ( 512 on Android ) . To avoid it , the local ref should be deleted when using it in a loop .
Remove deprecated constructor + add directory ( ) __EoT__ This PR removes previously deprecated constructor + adds a new ` directory ( File ) ` option to the RealmConfiguration builder . This means that we now always have a Context reference , so ` assetFile ( context , string ) ` could be simplified to ` assetFile ( string ) ` as well . Most of the changes in this PR is in the unit tests . The interesting code change is in ` RealmConfiguration ` @ realm/java
Fix a lint error in proxy classes when the 'minSdkVersion ' is smaller than 11 __EoT__ fixes # 3356 @ realm/java
revive the version check of ndk __EoT__ I wasted our time by using wrong version of NDK . To prevent us from doing the same mistakes , I revived the check of NDK version . @ realm/java
Integrate Object Store [ PART2 ] - SharedRealm __EoT__ Target for this PR : - [ x ] Remove ` SharedGroupManager ` - [ x ] Remove ` SharedGroup ` - [ x ] Remove ` Group ` - [ x ] ~~Re-think about the refs ownership . Maybe it is better just use ` TableRef ` /etc.. to control the ownership of objects instead of having complex crossed ref raw pointer in java.~~ - [ x ] Still handle realm cache in RealmCache and fix possible problems with RealmCoordinator - [ x ] Still handle notifications in Java and fix possible issues with RealmCoordinator - [ x ] Clean up related JNI code - [ x ] Exception conversion - [ x ] Create basic test cases for ` SharedRealm ` .
isValid ( ) now returns true for unmanaged object . Added isManaged ( ) __EoT__ Closes # 3101 This aligns our API with similar methods from Cocoa/.NET
Allow CI builds not running as root __EoT__
Remove improper incompatibleLockFile test __EoT__ This test is not constructed properly . It tries to modify the lock file while the Realm is still opened . This would cause some undefined behaviour in core . Especially when we are using the generic external_commit_helper which is based on SharedGroup : :wait_for_change ( ) the helper thread will freeze because of polling hangs forever . Just remove the test , core should ensure the proper exception thrown and we have other tests to ensure the exception conversion right .
Making documentation parseble __EoT__
Smaller fixes to binary queries __EoT__ Follow up on missing items in # https : //github.com/realm/realm-java/pull/3285
Wait all async tasks done before next test __EoT__ This is highly related with # 1900 . Below things are still guaranteed by this change after commit async transaction : - When callback function called ( onSuccess/onError ) , the background Realm is closed . - When any change listeners called , the background Realm is closed . What is true now but it is not guaranteed in the future : - Background Realm might not be closed before REALM_CHANGED sent ( not received ) . Due to this , to avoid the flaky tests , we have to ensure all async tasks quit peacefully before start the next test . This is implemented by wait and check in the TestRealmConfigurationFactory . NOTE : Any test , if the async tasks can not be finished peacefully in a certain time , it has to be considered as a problem and fixed . This would be needed by OS notifications since Java wo n't have a precise control of sending REALM_CHANGED anymore .
Remove optional APIs if dependencies do n't meet __EoT__ - Add @ OptionalAPI to mark a method as optional with dependencies . - New bytecode transformer to remove an optional API if it doesn't have enough dependencies . - Modify gradle plugin . - Mark the rx.Observable related APIs as optional . - Add integration-tests module . This is not the perfect solution since the RxObservableFactory is still in the final result . But it is good enough for us to work around the issue with Jackson and other lib which needs to do reflection on the RealmObject . To replace # 2400 , to ` releases ` branch .
Update core to 1.5.1 __EoT__ None
Verify SharedGroup in handleAsyncTransactionCompleted __EoT__ In a rare case , if handleAsyncTransactionCompleted posted before set handler to null , the handleAsyncTransactionCompleted will be called with a closed Realm . It is very difficult to construct a test case for this .
Remove the dependency of Realm.Handler from tests __EoT__ Instead , those tests should use method from RunInLooperThread . Fix this in advance for the coming OS notification integration .
accept new version file ( sources.properties ) in NDK __EoT__ closes # 3284 The name and the format of the file which contains ndk version information was changed since NDK r11 . This PR accepts new format . @ realm/java
Nh/fixing 3105 __EoT__ Re-creating the PR https : //github.com/realm/realm-java/pull/3116 and removing the ` # ` from the name to enable CI
removed io.realm.internal.Version class __EoT__ ` io.realm.internal.Version ` is an relic of old era .
DynamicRealmObject typed getters __EoT__ Closes # 3294 DynamicRealmObject typed getters did n't check if the field name being retrieved was the correct type , which caused a seg fault if you called dynamicObj.getString ( integerField ) . A proper IllegalArgumentException is now being throw instead .
Updated Realm Core to 1.5.0 __EoT__ @ realm/java Note this PR will also mean that # 672 is now supported , and we just need to enable it in the public API .
Fix wrong section of changelog __EoT__ None
Fix notification tests for following changes __EoT__ To support multiprocess & OS notifications , a dedicated thread will monitor the Realm changes and send notifications to other thread . This means our tests can not assume notifications will be sent for every transaction commit . Also , the Realm.handler will moved to a lower layer , it 's better to not rely on it in the test as well . To avoid a massive PR , tests changes are made separately first .
getFieldIndex returns null for non-existing field __EoT__ Close # 3292
DynamicRealmObject.setList declaration fix __EoT__ It should only accept RealmList < DynamicRealmObject > . Fix # 3280
Fix flaky test __EoT__ None
Added missing ( ) in beginTransaction docs __EoT__
Static native method needs jclass __EoT__ None
Kg/support mix lang __EoT__ # 2568 is labelled 0.91 but seems to be stalled . I have merged the work by @ marukami with master . Closes # 2568 @ realm/java
Include timestamp information into logcat.txt __EoT__
Remove dependency to sdk-manager __EoT__ Docker handles SDK setup and AS handles it for local build .
TableBase.average ( ) and TableViewBase.average ( ) return NaN __EoT__ This causes the method shouldAggregateColumnValue ( ) to fail in both TableColumnsTest.java and ViewColumnsTest.java , the methods .
Do not copy strings too many times . __EoT__ ` Table : :get_name ( ) ` returns ` StringData ` . Converting to ` string ` and back to ` StringData ` is really stupid . Let 's run ` git blame ` and see how did that ! @ realm/java
RealmObjectSchema.setClassName ( ) transfers primary key for new class name __EoT__ ` RealmObjectSchema.setClassName ( ) ` transfers a primary key for a new class name that the renamed class can maintain the old primary key . Closes # 3118 . @ realm/java
insert ( ) : Correctly detect multiple objects with the same primary key __EoT__ Fixes # 3212 This PR fixes a bug which happened when using ` insert ( ) ` with two java instances with the same primary key . This now correctly throws a ` RealmPrimaryKeyConstraintBrokenException ` . @ realm/java
Clarify how insertOrUpdate behave for objects with primary keys . __EoT__ Fixes # 3109 @ realm/java
Only execute the builds on slaves with the android label __EoT__
Annotation processor no longer consume annotations __EoT__ This PR changes the Realm annotation processor so it no longer consumes the annotations . The only effect this has is that it is now possible to write multiple annotation processors for the same annotation . It is not possible to specify the order of annotation processors from two different libraries , so if one of the processors consumed the annotation it would be random if both ran or only one of them . I ran into this problem while working on a small side-project that involved creating a new annotation processor that also wanted to generate files based on the Realm model classes . So opening up for this will also allow others to write similar processors . @ realm/java
Add quotes around terms in exceptions message __EoT__ Close # 3217
Update core to 1.4.0 __EoT__ None
Update core to 1.3.1 __EoT__ None
Upgrading to Realm Core 1.3.0 . __EoT__ - Upgrading to Realm Core 1.3.0 ( readding pre 1.1.2 sorting ) - Reverting callback for sorting ( performance is back ) @ realm/java
Fix metrics collection __EoT__
Do n't rely on dir ( ) in docker containers in the Jenkinsfile __EoT__ Also , we need to install ` hexdump ` on our docker images in order to perform the method count .
Clean and unify the Jenkinsfile __EoT__ It also adds Slack notifications for the ` master ` and ` releases ` branches and introduces lint checking . It does n't fail be build yet since we have 135 issues to solve ( in our unit tests )
Allow empty collection to insert/insertOrUpdate ( Collection ) __EoT__ fixes # 3103 - [ x ] add tests - [ x ] fix implementation - [ x ] update changelog
GCed ref causes flaky test __EoT__ None
Unit tests for PrimaryKey field type change __EoT__ Unit tests for checking proper migration of PrimaryKey field type change from String to Integer/int . These cases were surfaced in issue # 3068 .
Migrate RealmLinkTests.java to JUnit4 style . __EoT__ ` RealmLinkTest ` is the last user of the deprecated ` TestHelper.createConfiguration ( ) ` method . I 'll clean up ` TestHelper.createConfiguration ( ) ` s in other PR . @ realm/java
Fixed a race condition in RealmTests.deleteRealm ( ) . __EoT__ If ` assertTrue ( tempDir.renameTo ( tempDirRenamed ) ) ; ` is executed before other thread 's ` Realm realm = Realm.getInstance ( configuration ) ; ` , opening Realm fails with ` no such directory ` . @ realm/java
Forward all throwables but not only excpetions - Fix the CI timeout __EoT__ For example the UnsatisfiedLinkError should cause the process terminated . This is the reason of all the time out issues we found for CI .
removed unused methods and a constant string __EoT__ @ realm/java
improve generated javadoc __EoT__ link against JavaSE , Android , and RxJava see also : realm/realm-android-adapters # 55
Fix JNI declaration for UncheckedRow __EoT__ None
Fix lint checks in examples . __EoT__ Due to our gradle project structure , when one module pulls in Timber , the lint check is applied to all ( looks like a bug in how Lint is run ) . This caused Lint to fail and have prevented releasing SNAPSHOTs from ` master ` This PR fixes all lint checks across all the examples . @ realm/java
Move Realm.finalize to BaseRealm __EoT__ So DynamicRealm can have a warning logged as well .
Use qualified name for model classes in generated code in order to avoid name conflict . __EoT__ - [ x ] fix processor implementation - [ x ] update processor tests - [ x ] add tests that reproduce # 3077 - [ x ] update changelog This PR would conflicts with # 2999 ( bulk insert ) and should be merged after the merge of # 2999 .
bulk inserts __EoT__ Fixes https : //github.com/realm/realm-java/issues/1684 # Benchmarks with 100_000 objects # # Before ( using ` copyToRealm ` ) ! [ benchmark_batchwrite ] ( https : //cloud.githubusercontent.com/assets/1793238/16064422/fdd88640-3298-11e6-9601-b9bdfbaabab2.png ) # # Using Bulk Inserts ! [ benchmark_batchwrite ] ( https : //cloud.githubusercontent.com/assets/1793238/16064440/2754c560-3299-11e6-8439-d64f6779eb44.png ) # Cap The new API accepts a list of ` Collection ` instead of a list of ` Iterator ` because we need to know the size of the collection , in order to optimise the ` Map ` that acts as a cache for the previously inserted objects . here is an Android _traceview_ dump that stress the importance of initialising the ` IdentityMap ` to avoid the expensive ` rehash ` invocation for each ` put ` operation . # # Without initialising the Map < img width= '' 780 '' src= '' https : //cloud.githubusercontent.com/assets/1793238/16064630/cbf7d12e-329a-11e6-844f-1e95a2d9eeb5.png '' > we spend 35 % of the overall time in the ` put ` operation < img width= '' 693 '' src= '' https : //cloud.githubusercontent.com/assets/1793238/16064676/39c1bcf6-329b-11e6-915a-986eaeaaf0de.png '' > the ` rehash ` could be avoided if we initialise the Map with the appropriate size # # Initialising the Map with the size of the Collection < img
Fix async transaction problem when async query already exist . __EoT__ Please review this @ realm/java Fixes # 1893
Fix merge from 0e3529 to master __EoT__ None
Save LogCat file in case of test failure __EoT__ Move from https : //github.com/realm/realm-java/pull/3049 If unit tests crashes with native exceptions we currently have no way of knowing why . With this PR we now save the LogCat file in case there is a test failure . For green builds nothing is saved . A local test on my phone indicates that a full logcat file is ~8MB in size and 400Kb when zipped . The CI log seems to be much smaller ( ~4Mb compressed to 130k ) An example is here : https : //ci.realm.io/job/android-pr-jenkinsfile/630/ We need to enable logging before starting tests as Android only have a 256Kb buffer for log entries and rotates between multiple files . This means that dumping the log afterwards are missing _a lot_ of entries . @ realm/java @ emanuelez
Fix the adb key for docker __EoT__ None
Remove redundant calls to std : :move __EoT__ ` std : :move ` casts an lvalue to an rvalue . It 's redundant to call it with an rvalue as its argument . /cc @ beeender
Clean up unused sub-table __EoT__ sub-table is not used in java-binding right now , and if it is going to be , the relevant logic might be more suitable in the object store . Since we are moving to the object store , the sub-table related code needs to be cleaned anyway . So we do the clean up directly to the master branch to make the future PR easier to be reviewed .
Optimistic opening of a Realm file __EoT__ This PR is the result of investigating https : //github.com/realm/realm-java/issues/2459 We have anecdotal evidence that multiple processes might be open for the same app . We have not been able to verify this , but the result matches the `` IncompatibleLockFile '' errors reported in # 2459 . This happens if the two processes have two versions of Realm ( e.g . during app upgrades ) . This PR is based on our assumption that such an overlap is not intentional and only happens because one process is started before the previous was completely shut down . So this PR introduces an optimistic opening scheme where we retry for 1 second before crashing as before . I also added logging so users can log if they run into this issue . The settings for this are currently public in SharedGroup , which will allow users to modify the timeout and retry-policy without us needing to release a new version of Realm Java . @ realm/java
Updated beginTransaction doc __EoT__ We recently had a number of questions around refreshing and modifying data . I extended the ` beginTransaction ` Javadoc to be very explicit about what happens and what the best practise is around this . @ realm/java
Builder takes custom directory path and context __EoT__ ` RealmConfiguration.Build ( context , dirPath ) ` constructor invokes ReLinker which provides protections on broken android installs/updates with custom directory path . Closes # 2900 .
JNI clean up __EoT__ - Enable -Wmissing-declarations and -Werror to ensure all global functions are defined with a proper declaration . JNI function not found problem can only be seen at run time , thus we need to do so . - Add static keyword for local functions . - Fix wrong JNI function declaration . - Remove useless functions .
Add a Dockerfile to the repo __EoT__ This is done to facilitate CI and build reproducibility
Race condition between Realm change notifications and UI events __EoT__ Fixes realm/realm-android-adapters # 11 Fixes realm/realm-android-adapters # 48 From # 2952 This PR fixes a bug surfaced by our Realm Android Adapter example . Before this PR we posted all REALM_CHANGED events to the looper queue as normal . This meant that potential touch input events could get in front which in turn could cause a relayout of a ListView which would then crash because it detected a difference between it 's cached adapter size and the actual one . This PR now forces all local commits to be placed at the front of the queue eliminating that risk . Using postAtFrontOfQueue is highly discouraged by Google since you risk starving the UI thread and introduce lag . However commits are generally fairly infrequent and any loop ( commits inside a change listener ) will now be more easily detected . Before this , they would probably work , although making the UI sluggish . Implementation is as follows : | Things need to do | REALM_CHANGED | LOCAL_COMMIT | | -- - | -- - | -- - | | Finished async query | Swallow the event and schedule
Asset file provided in configuration should not be deleted in migrations __EoT__ RealmConfiguration.Builder.assetFile ( ) and deleteRealmIfMigrationNeeded ( ) should not be called at the same time to prevent the provided asset file from deletion in migrations . Closes # 2933 .
Wrong JNI function declaration caused test timeout __EoT__ The worst thing is async query wo n't throw those exceptions in the background .
Listeners can call un-synchronized RealmResults ( Async queries ) __EoT__ When async queries are updated , they call listeners in a specific order . This currently has a very subtle bug , so accessing synchronous RealmResults from inside a async RealmResult listener might hit a detached row accessor . Reason being is that the Realm is advanced , then all listeners called in order , but RealmResults are not synchronised until just before listener is called . This was discovered when investigating # 2901 , but I doubt it is the root cause .
Add the Jenkins logic to the repo __EoT__
update proguard configuration no to depend on Android 's default configuration __EoT__ related to # 2927 This PR adds a ProGuard configuration for native methods . In normal cases , users include android 's default ProGuard configuration and it contains a configuration for native methods . But including default configuration is not mandatory and users freely write their own configurations from scratch . To allow such a usage , ProGuard configuration provided by Realm should not depend on default configuration .
PrimaryKey index rearrangement in migration revisited __EoT__ This PR fixes followings . 1 . When a column with a smaller index than that of a primary key field gets removed , the primary key field index decrements , which causes a cached primary key index to point a wrong field . 2 . When a primary key field is renamed , primary key table is not updated accordingly . Closes # 2829 . @ realm/java please review .
Do n't depend on make to clean the JNI folder __EoT__ Fixes # 911
RealmResults is not synced in global listener __EoT__ Close # 2408 RealmResults are synced when calling its listener , since we need to check the table version before calling the listener . So sync it just after advance read wo n't be an option - in that way , the result's listener wo n't be triggered . So we notify the global listeners as the last thing to do , at that point , result will be synced already . Also a test case is added to ensure the calling sequence of synced listeners .
Redundant addIndex ( fieldName ) removed __EoT__ In ` RealmObjectSchema.addModifiers ( ) ` there is a redundant ` addIndex ( fieldName ) ` called before ` addPrimaryKey ( fieldName ) ` . This should have been removed at # 2832 .
Remove optional APIs if dependencies do n't meet __EoT__ - Add @ OptionalAPI to mark a method as optional with dependencies . - New bytecode transformer to remove an optional API if it doesn't have enough dependencies . - Modify gradle plugin . - Mark the rx.Observable related APIs as optional . - Add integration-tests module . This is not the perfect solution since the RxObservableFactory is still in the final result . But it is good enough for us to work around the issue with Jackson and other lib which needs to do reflection on the RealmObject . To replace # 2400 , to ` releases ` branch .
Changelog fix for PR # 2903 __EoT__ The missing changelog entry for # 2903 is added . @ realm/java
Table.toString ( ) message for debugging Table with PrimaryKey __EoT__ This PR is to enhance ` toString ( ) ` message for ` Table ` debugging .
RealmResults.isLoaded description fix __EoT__ ` RealmResults.isLoaded ( ) ` description fix . Closes # 2895 . @ realm/java
Make 1.0.0 header the same level as others __EoT__ Because this broke [ realm-java 's release notes ] ( https : //allmychanges.com/p/java/realm-java/ # 1.0.0 ) parsing at AllMyChanges .
Add code of conduct __EoT__
Inherit documentation __EoT__ Closes # 2680 @ realm/java
Merge remote-tracking branch 'origin/releases ' into mc/merge/0.91_4c48038a __EoT__ Conflicts : version.txt
Upgrading core __EoT__ @ realm/java
Revert `` update logo '' __EoT__ Reverts realm/realm-java # 2869 @ realm/java
update logo __EoT__ < img width= '' 313 '' alt= '' screen shot 2016-05-24 at 19 24 25 '' src= '' https : //cloud.githubusercontent.com/assets/1793238/15515920/46396b82-21e8-11e6-9d6c-e041e510ae8a.png '' > < img width= '' 449 '' alt= '' screen shot 2016-05-24 at 19 24 41 '' src= '' https : //cloud.githubusercontent.com/assets/1793238/15515923/4f7d9100-21e8-11e6-96d6-2aa4da0650b5.png '' >
Note about empty constructor with no arguments __EoT__ Closes # 2795 @ realm/java
Update android gradle to 2.1.0 __EoT__
Kotlin reflection for example revived __EoT__ KotlinExample needs reflection so re-added .
Fix bug in IntroExample __EoT__ @ realm/java
Updating core __EoT__ @ realm/java
Remove log files in Realm.deleteRealm __EoT__ Close # 2834
Upload native lib with symbols to s3 __EoT__ And remove some useless lines Unfortunately crashlytics 's symbols uploading is not what we want . It would be useful if user is using ndk and 3rd party libs exist in the ` lib ` dir . I could n't make it work . Having debug so on s3 would be good enough for us right now . TODO : - [ x ] Update wiki about decode symbols **PS . Have n't successfully tested the uploading part since it always fails in my network : ( **
Improved detection when using interfaces in Realm classes __EoT__ Fixes # 2808 This PR adds additional checking to the annotation processor to prevent the error reported int # 2808 . # 2808 would not compile anyway , but this way we can report the real error to the user . @ realm/java
Added credits for assetFile ( ) __EoT__ @ realm/java
Objects not in Realm are now called unmananged everywhere . __EoT__ Fixes # 2789 This PR changes the terminology on the Java side so object not in Realm are called `` unmanaged '' everywhere : - Changlog - Unit tests - variables - Javadoc / comments / exception messages The following terms have been converted : - un-managed - standalone - non-managed - nonmanaged @ realm/java
Kg/better changelog message for core 0.100.4 __EoT__
Explaing why OpenSSL has been updated __EoT__ @ realm/java @ bmunkholm
Asset file as an initial dataset __EoT__ Support for Realm asset file as an initial dataset .
Fixed grammar in exception message __EoT__ Fixes # 2826 @ realm/java
Unit test cleanup and parameterization for PrimaryKey __EoT__ This PR is to address issue # 2658 for adding more coverage and cleanup for PrimaryKey related unit tests . **What is Done ? ** 1 . With an exception , all the null primarykey tests in ` RealmTests ` are now parameterized . 2 . Parameters in ` RealmJsonNullPrimaryKeyTests ` are cleaned up . 3 . ` Realm.createObject ( class , primaryKeyValue ) ` is tested with ` null ` in positive and negative manner . 4 . ` NullPrimaryKey ` interface is expanded to setters as well .
Changed to throw IllegalStateException when setAutoRefresh ( ) is called on non-Looper thread __EoT__ @ realm/java
add a null check to addChangeListener and removeChangeListener __EoT__ fixes # 2772 ` { Realm , DynamicRealm } . { add , remove } ChangeListener ( ) ` accept ` null ` as a listener . And then Crash will happen when it is called . I added ` null ` check to those methods ( corresponding methods in ` RealmObject ` and ` RealmResults ` already check ` null ` ) . Please review this @ realm/java
Javadoc corrections for findAllSorted & findAllSortedAsync __EoT__ Javadoc fix addressing the issue # 2792 , which could arise a confusion as to where one might search with a child ` RealmList ` or ` RealmObject ` field . @ realm/java
Realm Core updated to 0.100.4 . __EoT__ Closes # 2749 @ realm/java
Pushing to wrong branch __EoT__
One RealmModule per file __EoT__ Closes # 2566 The general documentation has been updated . @ realm/java
Examples should use transaction blocks __EoT__ Replacing # 2454 @ realm/java
Fix README and top level gradle file to support benchmarks . __EoT__ @ realm/java
Workaround to add android.jar for transform __EoT__ ==== Final commit message === Close # 2703 While javassit manipulating the method , it requires all of the classed used in the method can be found in the class pool . But android.jar will not be passed to the transform -- It is not in any of QualifiedContent.Scope definitions . We use project.android.bootClasspath which is public right now to get the path to android.jar . Project is passed from gradle . See https : //android.googlesource.com/platform/tools/base/+/studio-master-dev/build-system/gradle/src/main/groovy/com/android/build/gradle/BaseExtension.java # 737
Javadoc for using Realm with SubscribedOn ( ) __EoT__ It is recommended to use Realm.where ( ) .find*Async ( ) instead of SubscribedOn ( ) to avoid Realm being accessed from different threads . This PR addresses issue # 2607 . @ realm/java
thread safe HandlerController # emptyAsyncRealmObject & realmObjects __EoT__ fixes https : //github.com/realm/realm-java/issues/2724 note : ` syncRealmResults ` is thread confined & does n't need to use any locking
Improve formatting . __EoT__ please review this @ realm/java
Added support for adding micro benchmarks __EoT__ This PR adds support for micro benchmarks of the Realm API : - It uses [ Spanner ] ( https : //github.com/cmelchior/spanner ) . Spanner is my fork of Caliper that is more Android friendly and allows us to compare results against baselines . - All benchmarks are in a separate ` src/benchmarks ` folder but are treated as instrumentation tests . - Two new gradle targets have been added ` connectedBenchmarks ` and ` connectedUnitTests ` that replace ` connectedCheck ` . Ideally I wanted to just create a ` runBenchmarks ` task , but it did n't seem possible while still reusing the instrumentation test setup already provided by Google . - The benchmarks will produce JSON/CSV files and save them on the SD card . - Json files is the internal Spanner storage format . CSV is for external use and can be configured as we like . - Subsequent runs can then use the Json files as a baseline . - New benchmarks are really easy to add ( just add a new method + annotation ) . - Runs as separate JUnit tests , which means that failures
Update to core 0.100.2 __EoT__ @ realm/java
hashCode behavior javadoc __EoT__ Title : hashCode behavior Javadoc The behavior of hashCode is documented as it is pointed in issue # 2323 . Until realm-java has an immutable identifier , the behavior of hashCode should be documented . @ realm/java please review .
Adding a test on autoresorting on Looper threads __EoT__ Related to # 2604 @ realm/java
Add to realmObjects when addChangeListener called __EoT__ - Only add the RealmObject to HandlerController.realmObjects when addChangeListener called . This will avoid we have too many objects in the map . - addToRealmObjects missed reference queue which would lead to the map grows always without cleaning . Close # 2569 , potentially a fix to # 2686 .
Expanding time resolution into millisecs __EoT__ Closes # 833 Current status : ready to be merged
StopWaitForChange exception in Javadoc __EoT__ ` BaseRealm.stopWaitForChange ( ) ` exception description in Javadoc . @ realm/java
Implementation of wait_for_change ( ) method . __EoT__ Continuation from # 2319 and # 1300 . **Goal** 1 . Add ` Realm.waitForChange ( ) ` which blocks until a change is available , then advance the Realm and continue without triggering ` RealmChangeListeners ` . 2 . Expose ` SharedGroup : :wait_for_change ( ) ` . We should probably be careful with exactly how a thread is blocked using this method . **What is done** 1 . Reverted ` BaseRealm.refresh ( ) ` ( Commits on # 2319 after [ 0abbb87 ] ( https : //github.com/realm/realm-java/commit/0abbb87a63de4afa76a18539814d22e18fa6eb21 ) is blown ) . 2 . Deprecated ` BaseRealm.refresh ( ) ` . 3 . ` BaseRealm.waitForChange ( ) ` & ` BaseRealm.stopWaitForChange ( ) ` **Behaviors** 1 . ` BaseRealm.waitForChange ( ) ` will throw ` IllegalStateException ` within a transaction . 2 . ` BaseRealm ` can not wait in a thread with Looper . ` IllegalStateException ` will be thrown . 3 . ` SharedGroup.enableWaitForChange ( true ) ` will be called everytime ` BaseRealm.waitForChange ( ) ` is called that users do n't need to doubly make sure ` waitForChange ` is enabled . 4 . When change happens
Use the motherboard identifier instead of the BIOS one for Windows machines __EoT__ The solution relying on the BIOS turned out to be not too solid .
API review & cleanup for 1.0 __EoT__ The following things should be implemented : - [ x ] JSON methods currently wrap all runtime exceptions in a RealmException . Consider removing this as it makes it hard to know exactly what failed - > Remove RealmException where possible . ( # 2618 ) - [ x ] Cleanup sorted\* methods . Remove all sort methods accepting 3 fields . Multiarg should be used instead . ( # 2619 ) - [ x ] Remove ` allObjects ` and friends from Realm so all query options are in RealmQuery . ( # 2620 ) - [ x ] RealmConfiguration ` setModules ( ) ` rename to ` modules ( ) ` ( # 2621 ) - [ X ] All lists methods should automatically do ` copyToRealm ` or ` copyToRealmOrUpdate ` ( mc Checked , all methods which could add/change object in the list , will call ` copyToRealmIfNeeded ` ) - [ x ] RealmChangeListener should provide the changes object/realm/collection as well ( # 2705 ) - [ x ] realm.createObject ( class , primaryKey ) should be public ( # 2622 ) - [ x ] All methods
Fix typo in 0.90.0 's CHANGELOG section __EoT__ Just noticed a typo and figured I 'd fix it 👍
Split base adapters into their own repository __EoT__ This PR splits the ` RealmBaseAdapter ` into https : //github.com/realm/realm-android-adapters . So this mostly just removes all relevant code from this repository . See https : //github.com/realm/realm-android-adapters/pull/1 for more details + review of the the import of data . @ realm/java
Ca n't use proguard with 0.89.x , LinkedTreeMap can not be cast to io.realm.RealmModel __EoT__ # # # # Goal > What do you want to achieve ? I want to use proguard on my Android App with Realm 0.89.x # # # # Expected Results It should work as it was working on 0.88.x # # # # Actual Results 04-25 19:16:39.115 4881-5926/com.loreal.campus W/System.err : java.lang.ClassCastException : com.google.gson.internal.LinkedTreeMap can not be cast to io.realm.RealmModel 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at io.realm.RealmList.add ( SourceFile:52 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at com.google.gson.internal.bind.CollectionTypeAdapterFactory $ Adapter.a ( SourceFile:83 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at com.google.gson.internal.bind.CollectionTypeAdapterFactory $ Adapter.b ( SourceFile:61 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory $ 1.a ( SourceFile:116 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory $ Adapter.b ( SourceFile:216 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at retrofit2.converter.gson.GsonResponseBodyConverter.convert ( SourceFile:37 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at retrofit2.converter.gson.GsonResponseBodyConverter.convert ( SourceFile:25 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at retrofit2.ServiceMethod.toResponse ( SourceFile:116 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at retrofit2.OkHttpCall.parseResponse ( SourceFile:211 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at retrofit2.OkHttpCall.execute ( SourceFile:174 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err : at retrofit2.adapter.rxjava.RxJavaCallAdapterFactory $ RequestArbiter.request ( SourceFile:171 ) 04-25 19:16:39.116 4881-5926/com.loreal.campus W/System.err :
Use more precise and consistent machine identifiers __EoT__
Move all query methods to RealmQuery __EoT__ Part of # 1594 . All changes there should be merged in one release @ realm/java # # Final commit message : Title : Deprecate allObjects and distinct methods on Realm/DynamicRealm Currently we have the following helper query methods on Realm/DynamicRealm : ` allObjects ( ) ` and ` distinct ( ) ` However we have to be mindful about the number of methods in our API and from the projects we have seen so far , these methods does not seem to have been used much . Moving all query methods to RealmQuery has two advantages : 1 ) It helps us to reduce our overall method count and 2 ) It makes our API more consistent as now all RealmQuery methods are only found on RealmQuery .
BaseRealm should be package protected __EoT__
Deprecated 3 field sort in Realm and RealmQuery __EoT__ Part of # 1594 . Merge all PR 's in one release . @ realm/java # # Final commit message Title : Deprecated 3 field sort methods Having many overrides of the same method is a concept heavily used in e.g . Guava , however we need to be mindful about the method count and general surface of our public API . Also we are seeing no indication that these methods are being used . In this change we therefore deprecating 3 field sort and refer to the more generic multi-arg sort instead for those few that run into this use case .
Make Realm.createObject ( Class , PrimaryKey ) public __EoT__ Part of # 1594 . Release all changes in one release . @ realm/java # # Final commit message Title : Make Realm.createObject ( Class , PrimaryKey ) public This method is a way to solve the problem that people might have data with a primary key that is is the default value for that type , e.g a long primary key with the value 0 . Once this object is saved in Realm any calls to the normal ` Realm.createObject ( ) ` would throw an exception as it would try to assign the default value ( zero ) to the object before the user could set it to something else . With this method that is no longer a problem . Internally we already use this method and it is already public in the Dynamic API . The reason for not making this public earlier was due to fear of mis-use since there is no type-safe guarantee at compile time . However since it is already public in the Dynamic API and we have n't seen any indication of that being misused we feel it should be safe to
add proguardFiles configuration to modulesExample/app project __EoT__ ProGuard example should have ` proguardFiles ` configuration which enables app to have application specific configurations for ProGurad since real app needs to have configuration for it 's library in most cases . @ realm/java
Make all methods on RealmObject and all classes in public API final __EoT__ Part of # 1594 . Merge all together in one release . @ realm/java # # Final commit note : Title : Make all methods on RealmObject and all classes in public API final We should mark all methods that should not be overridden final . We should mark all classes that should not be inherited final .
mark constructor of RealmAsyncTask package protected __EoT__ Part of # 1594 . Merge all together in one release . @ realm/java # # Final commit note : Title : mark constructor of RealmAsyncTask package protected Removed constructor from the public API as the method is not useful for public use and we want to keep the public API as clean as possible
Throw the most accurate exception possible in JSON methods __EoT__ Part of # 1594 . All bullets should be merged in one release . @ realm/java # # Final commit message : Title : Only throw ` RealmException ` if absolutely necessary We should avoid wrapping lower level exceptions in RealmExceptions unless there is a good reason for it . We had multiple support issues where people were confused about the RealmException and did n't understand they had to dig through the stack trace for the original exception . This change alters the behaviour of all our JSON methods so they now only convert JSONException to RealmException in order to prevent checked exceptions to reach the user . All other exceptions should be thrown directly .
Made HandlerController package private . __EoT__ Part of # 1594 . Merge all in one release . @ realm/java # # Final commit note : Title : Remove HandlerController from the public API HandlerController was made public by mistake . This is an class only used by internal API 's , so should n't be public . Most likely it was public due to a testing class ( HandlerProxy ) in a separate package needing access to it . HandlerProxy was instead moved to ` io.realm ` to work around this as keeping the public API clean has priority .
Fix the abi naming for ARM architectures __EoT__ @ realm/java
Fix using RealmModel as a field __EoT__ - Modify and rename isRealmObject to isRealmModel . - Modify annotation processor to allow RealmModel as a field . Fix # 2654
Added credits to 0.90 __EoT__ Adding credits for # 2648 @ realm/java
Add getPrimaryKey ( ) method to RealmObjectSchema __EoT__ Resolves # 2636 : this PR adds a ` getPrimaryKey ( ) ` method to ` RealmObjectSchema ` . ` getPrimaryKey ( ) ` returns the name of the primary key field if the model has a primary key , or throws an ` IllegalStateException ` if the model does n't have a primary key field ( using the same message that ` removePrimaryKey ( ) ` uses in such a situation ) . I 've also modified/added tests in ` RealmObjectSchemaTests.java ` in order to attain 100 % coverage for ` getPrimaryKey ( ) ` . I 'm new to GitHub pull requests , so if I 've done something wrong here please do n't hesitate to tell me !
Use RealmConfig.modules ( ) instead of RealmConfig.setModules ( ) __EoT__ Part of # 1594 . Merge all together in one release . @ realm/java # # Final commit message : Title : Replace setModules ( ) with modules ( ) This PR deprecates RealmConfiguration.setModules ( ) in favour of RealmConfiguration.modules ( ) . The reason being using the setter terminology is not common in builders . See Effective Java item 2 .
PrimaryKey value can be null for String , Byte , Short , Integer , and Long types . __EoT__ # # # Final commit note **Title : ` @ PrimaryKey ` in ` String ` , ` Byte ` , ` Short ` , ` Integer ` , and ` Long ` types can be ` null ` . ** @ PrimaryKey is allowed to be null for String and Boxed primitive classes . Features part of this commit : 1 . A ` @ PrimaryKey ` annotated field in ` java.lang.String ` / ` Byte ` / ` Short ` / ` Integer ` / ` Long ` type can be ` null ` . 2 . The object with ` nil ` primary key can be updated . 3 . Migration checks if existing nullable type ` @ PrimaryKey ` is set to be nullable in existing file . If not , throws ` RealmMigrationNeeded ` . 4 . Duplicated ` null ` as PrimaryKey throws ` RealmPrimaryKeyConstraintException ` . 5 . When a new empty row is added , the default value checked for duplicated is still the same empty string ( ` `` '' ` )
Add missing entry to changelog __EoT__ @ realm/java
Initial dataset for a Realm __EoT__ Fixes [ # 2254 ] ( https : //github.com/realm/realm-java/issues/2254 )
Move the analytics collection from the AP to the transformer . __EoT__ In the process the tracking of Kotlin usage has been added .
Nh/lint/thread example __EoT__
Nh/lint/module example __EoT__
fix intro Lint warning __EoT__
RealmConfiguration.hashCode ( ) should take into account rxObservableFactory __EoT__
Kotlin : Package level functions can not be imported from library project with new gradle plugin __EoT__ This is a pretty elaborate case so hopefully I can explain it well enough . We have a project consisting of a main application and a library project . The library project contains Realm models that are shared . Using the new plugin on both the main application and the library project causes the main project to not see the package level functions in the library . I 've attached a small sample project to show what I mean . Given this file in the library project `` ` kotlin package io.vokal.realmtest.model import io.realm . * import io.realm.annotations . * @ RealmClass open class Dog ( @ PrimaryKey public open var name : String = `` spot '' ) : RealmObject ( ) { } @ RealmModule ( library = true , allClasses = true ) public class LibraryModule { } public fun Realm.findSpot ( ) : Dog { return where ( Dog : :class.java ) .equalTo ( `` name '' , `` spot '' ) .findFirst ( ) } `` ` I should be able to import ` findSpot ` in the
[ 0.88-SNAPSHOT ] RealmTransformer should support both 1.5 and 2.0.0-beta __EoT__ Using latest snapshot i get following error during gradle sync : ` Error : Unable to load class 'io.realm.transformer.RealmTransformer'. ` `` ` buildscript { repositories { jcenter ( ) maven { url 'http : //oss.jfrog.org/artifactory/oss-snapshot-local' } maven { url `` https : //jitpack.io '' } } dependencies { classpath 'io.realm : realm-gradle-plugin:0.88.0-SNAPSHOT' } } apply plugin : 'realm-android' `` `
Naming restriction of attributes in RealmObjects __EoT__ Goal : create a RealmObject class with an attribute named `` realm '' . Expected results : No compilation errors Actual results : `` Error : realm has private accessor '' compiler error , due to internal realm.io variable also called `` realm '' , thus the whole proxy class is getting confused as to which realm to use for the proxy functions . Steps to reproduce : Create a class extending RealmObject , add an attribute named realm , compile Realm Version : 0.87.0 Well , the problem is pretty obvious . The proxy class is extending the actual class , tries to override the attribute named realm , because apparently you use a variable called `` realm '' for the proxy implementation . The proxy class then finds that this variable has a private accessor and throws an exception . Either disallow attributes with the name `` realm '' ( bad idea ) or rename the internal attribute to `` proxyRealm '' or something like that .
[ 0.88.0-SNAPSHOT ] IllegalStateException : Caller thread behind the worker thread __EoT__ http : //crashes.to/s/d9d24a52572 This exception is thrown after I migrated my codebase from synchronous to asynchronous realm calls using observables . The stacktrace does n't show where it went wrong from my code . `` ` messagesSubscription = realm.where ( Message.class ) .equalTo ( `` conversationId '' , conversationId ) .findAllSortedAsync ( `` updated '' ) .asObservable ( ) .filter ( RealmResults : :isLoaded ) .subscribe ( ( messages ) - > { if ( adapter ! = null ) { adapter.call ( messages ) ; } } ) ; `` ` The above is the only asynchronous call in that problematic activity . Any ideas why the exception is thrown ?
Exceptions during async transactions are failing silently __EoT__ So I 've ran into a very frustrating error . Exceptions during asynchronous transactions are n't getting reported . No signs of stacktrace . This made me spend a couple of hours trying to figure out why my logic is n't working only to realize that Realm has stopped printing Error stacktraces . # # # # # Steps to reproduce Simply throw an ` Error ` inside a transaction . # # # # # Example code `` ` java private void testRealm ( ) { final Realm.Transaction.Callback callback = new Realm.Transaction.Callback ( ) { @ Override public void onSuccess ( ) { super.onSuccess ( ) ; } @ Override public void onError ( Exception e ) { super.onError ( e ) ; e.printStackTrace ( ) ; } } ; getRealm ( ) .executeTransaction ( realm - > { throw new IllegalAccessError ( `` Poop '' ) ; } , callback ) ; } `` ` The stacktrace never gets printed . **Realm version** : 0.87.2 Any ideas how do i fix this ?
Update ` asObservable ` JavaDoc to mention that they keep emitting and never call onComplete __EoT__ I request only once to my method that uses realm query with asObservable . ( I saw Log for sure that I requested really once , and it 's true . ) But subscribe event from the query which is observable came multiple , twice sometimes triple . Besides , one of the subscribe events gives me wrong results as 0 , even if table has some datas . How can I get subscribe event only once when I request once query with observable ?
Comply with the most basic PMD ruleset __EoT__
Async queries do n't update when using link __EoT__ as mentioned [ here ] ( https : //github.com/realm/realm-java/issues/1676 # issuecomment-152974784 ) updating an async query containing a link will not bring latest result . UT to reproduce `` ` java public void testQueryingLink ( ) throws Throwable { final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; final AtomicInteger numberOfInvocations = new AtomicInteger ( 0 ) ; final Realm [ ] realm = new Realm [ 1 ] ; final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; final Looper [ ] backgroundLooper = new Looper [ 1 ] ; ExecutorService executorService = Executors.newSingleThreadExecutor ( ) ; executorService.submit ( new Runnable ( ) { @ Override public void run ( ) { Looper.prepare ( ) ; backgroundLooper [ 0 ] = Looper.myLooper ( ) ; try { realm [ 0 ] = openRealmInstance ( `` testQueryingLink '' ) ; final RealmResults < Dog > allAsync = realm [ 0 ] .where ( Dog.class ) .equalTo ( `` owner.name '' , `` kiba '' ) .findAllAsync ( ) ; allAsync.addChangeListener ( new RealmChangeListener ( ) { @
lessThan with negative id 's not working as expected __EoT__ I am working with RealmObjects where i use negative id 's ( as long as they are not synced to the server ) . So , when i synchronize with the server , i can get all negative id 's , synchronize those objects and when synchronized , update the id . But , when i perform a lessThan query on a RealmResult , there are less objects returned than expected . When i use between ( with f.e . values -10000 , 0 ) , it is working and i am getting all the objects returned that i expect . So it looks like the behaviour of lessThan with negative number is not working the way i would expect it to be , Is this a bug or is there a good explanation for this ? I created a small android studio project , with a TestApplication where this test is setup , which fails ( only 2 of the 10 objects are retreived ) . Project is on github : https : //github.com/Sein-IT/RealmLessThan . I am testing with a Samsung Galaxy S6 , Android version 5.1.1
Fix crash when close Realm in listener __EoT__
Native crash in TableQuery.cpp line 1543 __EoT__ im currently using latest snapshot version . i also used latest release version but same error . `` ` D/REALM﹕ REALM_CHANGED realm : io.realm.HandlerController @ 41f9e5a0 no async queries , advance_read D/REALM﹕ REALM_CHANGED realm : io.realm.HandlerController @ 41bc2690 updating async queries , total : 3 D/REALM﹕ REALM_UPDATE_ASYNC_QUERIES realm : io.realm.HandlerController @ 41bc2690 caller is behind advance_read D/REALM﹕ REALM_UPDATE_ASYNC_QUERIES realm : io.realm.HandlerController @ 41bc2690 updating RealmResults java.lang.ref.WeakReference @ 41bc9e88 D/REALM﹕ jni : ThrowingException 11 , std : :exception in io_realm_internal_TableQuery.cpp line 1543 , . D/REALM﹕ Exception has been throw : Unrecoverable error . std : :exception in io_realm_internal_TableQuery.cpp line 1543 D/AndroidRuntime﹕ Shutting down VM W/dalvikvm﹕ threadid=1 : thread exiting with uncaught exception ( group=0x4168ace0 ) W/System.err﹕ io.realm.exceptions.RealmError : Unrecoverable error . std : :exception in io_realm_internal_TableQuery.cpp line 1543 W/System.err﹕ at io.realm.internal.TableQuery.nativeImportHandoverTableViewIntoSharedGroup ( Native Method ) W/System.err﹕ at io.realm.internal.TableQuery.importHandoverTableView ( TableQuery.java:508 ) W/System.err﹕ at io.realm.RealmResults.swapTableViewPointer ( RealmResults.java:708 ) W/System.err﹕ at io.realm.HandlerController.completedAsyncQueriesUpdate ( HandlerController.java:222 ) W/System.err﹕ at io.realm.HandlerController.handleMessage ( HandlerController.java:312 ) W/System.err﹕ at android.os.Handler.dispatchMessage ( Handler.java:98 ) W/System.err﹕ at android.os.Looper.loop ( Looper.java:136 ) W/System.err﹕ at android.app.ActivityThread.main ( ActivityThread.java:5158 ) W/System.err﹕ at java.lang.reflect.Method.invokeNative ( Native Method ) W/System.err﹕ at java.lang.reflect.Method.invoke ( Method.java:515 ) W/System.err﹕ at com.android.internal.os.ZygoteInit $
findFirst ( ) of RealmQuery which is created from RealmResults returns wrong result __EoT__ ` RealmQuery ` created from ` RealmResult ` must targets only objects in the ` RealmResults ` . But in current implementation , ` findFirst ( ) ` of that ` RealmQuery ` targets all objects of target Class . reported by @ ytRino
findFirst ( ) of RealmQuery which is created from RealmResults returns wrong result __EoT__ ` RealmQuery ` created from ` RealmResult ` must targets only objects in the ` RealmResults ` . But in current implementation , ` findFirst ( ) ` of that ` RealmQuery ` targets all objects of target Class . reported by @ ytRino
Should have a check if value is a valid managed object or not in setter of link/link list . __EoT__ relatd to # 1745
Remove update ( ) method from generated proxy class if model class has no primary key . __EoT__
NPE : ColumnIndices.getColumnInfo ( java.lang.Class ) after upgrading to 0.84.0 __EoT__ Hi team , After upgrading from 0.82.2 to 0.84.0 got this exception during the first app start : `` ` java.lang.NullPointerException : Attempt to invoke virtual method 'io.realm.internal.ColumnInfo io.realm.internal.ColumnIndices.getColumnInfo ( java.lang.Class ) ' on a null object reference `` ` Did n't happen during the next starts . Same happened when I deployed the app on another device with the same 0.82.2 realm version . Here is the piece of code which triggered the crash on the first device ( called on the worker thread ) : `` ` java realm.where ( PinRealm.class ) .equalTo ( `` token '' , pinToken ) .findFirst ( ) ; `` ` And here is the piece of code which triggered the crash on another device ( called on the main thread ) : `` ` java realm.where ( PinRealm.class ) .equalTo ( `` deleted '' , false ) .equalTo ( `` inboxState '' , NEW.ordinal ( ) ) .findAll ( ) ; `` `
NPE : ColumnIndices.getColumnInfo ( java.lang.Class ) after upgrading to 0.84.0 __EoT__ Hi team , After upgrading from 0.82.2 to 0.84.0 got this exception during the first app start : `` ` java.lang.NullPointerException : Attempt to invoke virtual method 'io.realm.internal.ColumnInfo io.realm.internal.ColumnIndices.getColumnInfo ( java.lang.Class ) ' on a null object reference `` ` Did n't happen during the next starts . Same happened when I deployed the app on another device with the same 0.82.2 realm version . Here is the piece of code which triggered the crash on the first device ( called on the worker thread ) : `` ` java realm.where ( PinRealm.class ) .equalTo ( `` token '' , pinToken ) .findFirst ( ) ; `` ` And here is the piece of code which triggered the crash on another device ( called on the main thread ) : `` ` java realm.where ( PinRealm.class ) .equalTo ( `` deleted '' , false ) .equalTo ( `` inboxState '' , NEW.ordinal ( ) ) .findAll ( ) ; `` `
setter/getter of Proxy class uses wrong field index if field index differs in multiple Realms __EoT__
DISTINCT __EoT__ In my usage , there are various times where I only want one out of a set of objects that share a value of a field - much like the 'DISTINCT ' clause in SQL . For exampe , with the items | name | logInTime | | -- - | -- - | | Bill | 1426270572 | | Mark | 1426272004 | | Mark | 1426273505 | | Mark | 1426274666 | | Sally | 1426268301 | | Sally | 1426271123 | in the table 'User ' , ` realm.where ( User.class ) .distinct ( `` name '' ) .findAll ( ) ` would return 3 items ( one for 'Mark ' , one for 'Bill ' , and one for 'Sally ' ) . With it like this , which 'Mark ' and which 'Sally ' is undefined - presumably the first one Realm finds . A potential advanced aspect of this would be to select which of the rows to return . ` realm.where ( User.class ) .distinct ( `` name '' , `` logInTime '' , false ) .findAll ( ) ` would return ` ( Bill , 1426270572 ) , ( Mark
Handle adding search index twice properly __EoT__ Guys please take a look on this one , we got it for some users on ` 2.3.3 ` `` ` java.lang.RuntimeException : Unable to create application.android.YaloApp : java.lang.ArrayIndexOutOfBoundsException : columnIndex is less than 0. at android.app.ActivityThread.handleBindApplication ( ActivityThread.java:3279 ) at android.app.ActivityThread.access $ 2200 ( ActivityThread.java:117 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:973 ) at android.os.Handler.dispatchMessage ( Handler.java:99 ) at android.os.Looper.loop ( Looper.java:123 ) at android.app.ActivityThread.main ( ActivityThread.java:3687 ) at java.lang.reflect.Method.invokeNative ( Method.java ) at java.lang.reflect.Method.invoke ( Method.java:507 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:842 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:600 ) at dalvik.system.NativeStart.main ( NativeStart.java ) Caused by : java.lang.ArrayIndexOutOfBoundsException : columnIndex is less than 0. at io.realm.internal.Table.nativeAddSearchIndex ( Table.java ) at io.realm.internal.Table.addSearchIndex ( Table.java:1156 ) at .android.model.Migration.execute ( Migration.java:69 ) at io.realm.Realm.migrateRealm ( Realm.java:1636 ) at io.realm.Realm.create ( Realm.java:569 ) at io.realm.Realm.getDefaultInstance ( Realm.java:521 ) at .model.RealmManager.getInstance ( RealmManager.java:42 ) at .model.CountryDao.init ( CountryDao.java:19 ) at .model.CountryDao.init ( CountryDao.java:15 ) at .android.YaloApp.onCreate ( YaloApp.java:66 ) at android.app.Instrumentation.callApplicationOnCreate ( Instrumentation.java:969 ) at android.app.ActivityThread.handleBindApplication ( ActivityThread.java:3276 ) at android.app.ActivityThread.access $ 2200 ( ActivityThread.java:117 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:973 ) at android.os.Handler.dispatchMessage ( Handler.java:99 ) at android.os.Looper.loop ( Looper.java:123 ) at android.app.ActivityThread.main (
Expand date range __EoT__ Currently , we limit the date range . The reason is that the current used storage engine is using ` time_t ` in the constructor of it ` DateTime ` objects . A recent change in the storage engine is that the constructor takes a ` int_fast64_t ` parameter instead . A storage engine with this change has already been released and integrated into the master branch . The implication is that we can expand the date range .
columnIndices are not populated causing NPE __EoT__ https : //github.com/realm/realm-java/pull/1434 introduced an optimisation to avoid validating a Realm more than once ( if opened with the same configuration from another thread for example ) . this cause ` createAndValidate ` to be called once , still this is problematic as the second Realm will not populate ` columnIndices ` attribute which is used to lookup columns , causing a NPE
columnIndices are not populated causing NPE __EoT__ https : //github.com/realm/realm-java/pull/1434 introduced an optimisation to avoid validating a Realm more than once ( if opened with the same configuration from another thread for example ) . this cause ` createAndValidate ` to be called once , still this is problematic as the second Realm will not populate ` columnIndices ` attribute which is used to lookup columns , causing a NPE
isValid ( ) does n't behave as expected __EoT__ I 'm using ` realm-android:0.83.0-SNAPSHOT ` . When I run this simple code : `` ` java Realm realm = Realm.getInstance ( this ) ; realm.beginTransaction ( ) ; Dog myDog = realm.createObject ( Dog.class ) ; myDog.setDogName ( `` myDog '' ) ; realm.commitTransaction ( ) ; realm.beginTransaction ( ) ; myDog.removeFromRealm ( ) ; realm.commitTransaction ( ) ; Timber.e ( `` myDog still valid : `` + myDog.isValid ( ) ) ; `` ` ` myDog.isValid ( ) ` throws an ` IllegalStateException ` `` ` java Caused by : java.lang.IllegalStateException : Object is no longer managed by Realm . Has it been deleted ? at io.realm.internal.InvalidRow.getStubException ( InvalidRow.java:180 ) at io.realm.internal.InvalidRow.isAttached ( InvalidRow.java:171 ) at io.realm.RealmObject.isValid ( RealmObject.java:107 ) `` ` How can I check if an object was removed from realm ? Or does my little example not work because I 'm calling this function from the same thread ? However , I do n't think that ` isValid ( ) ` should ever throw such an exception .
Timeout on Context.finalize ( ) __EoT__ Hey , we started seeing following error with the update to Realm 0.82.0 : `` ` java.util.concurrent.TimeoutException : io.realm.internal.Context.finalize ( ) timed out after 10 seconds at java.lang.Object.equals ( Object.java:205 ) at java.util.ArrayList.remove ( ArrayList.java:418 ) at io.realm.internal.Context.cleanRows ( Context.java:69 ) at io.realm.internal.Context.executeDelayedDisposal ( Context.java:61 ) at io.realm.internal.Context.finalize ( Context.java:113 ) at java.lang.Daemons $ FinalizerDaemon.doFinalize ( Daemons.java:209 ) at java.lang.Daemons $ FinalizerDaemon.run ( Daemons.java:192 ) at java.lang.Thread.run ( Thread.java:818 ) `` ` We also see some longer access times to the Realm after we added some `` realm.clear ( RealmObject.class ) '' calls . Is this a known issue or is there a better way to clear a whole table ?
RealmBaseAdapter with null RealmResults __EoT__ Can you please handle null ` realmResults ` within ` RealmBaseAdapter ` ? If the adapter has no content at all , and ` RealmQuery ` possibly returns ` null ` too , it does n't make sense for ` RealmBaseAdapter ` to not accepting ` null ` . Example : `` ` RealmResults < MyObject > results = realm.where ( `` ... '' ) .find ( ) ; // it 's possible the result is null MyRealmAdapter adapter = new MyRealmAdapter ( context , results ) ; // if results is null , you get exception // if I catch the exception , then adapter is null // I could n't do this spinner.setAdapter ( adapter ) ; // or adapter.updateRealmResults ( notNullRealmResults ) ; `` `
Upgrading to core 0.87.0 . __EoT__ Nothing really exciting . The core team has changed the API a few places . @ bmunkholm @ emanuelez @ cmelchior
Upgrading to core 0.87.0 . __EoT__ Nothing really exciting . The core team has changed the API a few places . @ bmunkholm @ emanuelez @ cmelchior
Upload to Sonatype __EoT__ Notice that ` gradle.properties ` is user-specific and contains user names and password . Therefore , the file is not added to the repository . @ emanuelez
Lfn unit tests __EoT__ @ bmunkholm @ kneth : This is the first batch of test files - it covers the public methods of the Realm class . The tests are currently implemented as AndroidTestCases . Robert is investigating how we can provide a Android context if we make the tests into JUnit TestCases . I looked at the JNI unit tests and the ones that are using the Realm is also implemented as AndroidTestCases . So I am assuming this is how we have to do it for now .
Readability and speed improvements for the code generator __EoT__
Convert the convert ions functions to immutable maps __EoT__ Increases readability and speed
Doc enhance __EoT__ Remove quotes in the placeholder description as it confuses users whether the quotes are required or not .
Fixes bug in service percentage calculation __EoT__ There was a small bug in service calculation for async spans
Changes index page to order services descending by max span duration __EoT__ I figured out what `` max '' was in the index page . It corresponds to the longest duration span in the trace , as attributed to a specific service . This orders the search results descending by the most likely culprit , using relevant time units to prevent minutes from showing as huge counts of milliseconds , or short traces showing up as zero . Before : ! [ screen shot 2018-11-03 at 3 18 38 pm ] ( https : //user-images.githubusercontent.com/64215/47949351-7237d300-df7c-11e8-8664-21993de3b170.png ) After : ( notice the slowest service is the first one listed ) ! [ screen shot 2018-11-03 at 3 18 30 pm ] ( https : //user-images.githubusercontent.com/64215/47949352-78c64a80-df7c-11e8-82e6-a80a7d2cfffd.png )
Refactors entrypoints into traceSummary and backfills UI tests __EoT__ This refactors some of the call sites into traceSummary to reduce redundant work . To help expose what UI templates use , this adds some tests that push an api template up to the point of invoking mustache . This serves two purposes : sets up trip wires to ensure we do n't break something when migrating to v2 . This also will help us identify dead data or needlessly different named data .
Simplifies summary logic by not doing skew correction __EoT__ The trace summary screen and individual trace screens are served by different data . At the moment , offsets are not considered when computing the trace duration broken down by service . Maybe it should be , but removing clock skew makes migration to v2 simpler and we can then revisit this logic . See # 2217
Create messaging2.json __EoT__
Create ascend.json __EoT__
Adds initial test data __EoT__
Fixes text overflow for annotations __EoT__ Fixes # 2221 ! [ screen shot 2561-10-29 at 17 27 04 ] ( https : //user-images.githubusercontent.com/4723376/47644136-f3b7eb80-db9f-11e8-87da-c514f8f19f79.png )
Fix Issue Templates __EoT__ Remove markdown from about sections .
Sort service names in the UI __EoT__ Implementation for # 2204
Unable to click on the dependency graph __EoT__ When clicking a service or component in the dependency graph nothing is happening . Expected : It should open the dependency modal window with the information of the relationship
Makes build work with JDK 10 __EoT__
Renames Kafka autoconfig types for easier conditions checks __EoT__ endpoints like http : //192.168.99.100:9411/actuator/conditions are easier to read with this in
Removes auto-value dependency and maven metadata from core jar __EoT__ This removes the auto-value dependency from the zipkin2 core jar as we only use it in a couple places now . This prevents a version problem where new versions require a hard dependency . It also reduces the number of classes and the size ( orders of tens of kilobytes uncompressed ) . By default , the maven plugin includes a copy of the pom file , which can be a kilobyte or more of text . This excludes it in favor of normal download location .
Aligns versions with Spring Boot 2.0.2 __EoT__
Upgrades to Springboot2 and Micrometer __EoT__ ... And keeps metrics , health endpoints backward compatible
Minor fixes __EoT__
Migrates metrics to Micrometer __EoT__
Clarifies Span text for the purpose of synchronizing code with api __EoT__ The zipkin-api project has no text to define what a span is . This clarifies text so we can use it consistently . See https : //github.com/openzipkin/zipkin-api/pull/47
add note on security since it has come up several times on gitter __EoT__ brief note basically saying that zipkin-ui does not handle security itself .
Avoids more types absent in boot 2 __EoT__
Inlines actuate metrics buffer code to dodge conflicts on Spring Boot 2 __EoT__ Spring Boot 2 removes the buffers package we used . This inlines the essential work going on .
Corrects clock-skew in one-way RPC spans __EoT__ In one-way RPC , we now correct obvious skew : when the server receives a message before it was sent .
Fixes scribe test by adding XML module __EoT__
Allowing for 'false ' values in config . __EoT__ Fixes issue mentioned at https : //github.com/openzipkin/zipkin/pull/1903 # issuecomment-372857764 .
Prefers empty array to undefined in UI span conversion ; backfills ipv6 __EoT__ When writing json to the wire , we guard on creating empty arrays for annotations and binaryAnnotations . However , in process , this just makes life more difficult ex ` ( annotations || [ ] ) .map ... ` This simplifies things , cleaning up some code . It also backfills the missing ipv6 .
Adding the ability to import traces from JSON into zipkin-ui __EoT__ I got tired of having no way to view previous traces in Zipkin . Since it provides a way to download the trace JSON I figured there should be a way to add it back . This adds a new link with the ability to select a JSON file for upload ( as opposed to copy/paste due to the potential size of traces , ref : https : //github.com/openzipkin/zipkin/issues/1460 ) and view it just like any other trace . Relates to : # 1747 .
Injects configurable < base > tag to support reverse proxies __EoT__ Previously : # 1930 Unlike agreed there , this PR does _not_ change the ENV var ( ` proxy ` ) used in development mode , because based on the documentation , that seems to be a different animal : documentation for ` proxy ` says that ` http ( s ) ` and the port are required , while here we 're preferably using relative paths . I 'll be happy if someone who understands exactly what that ENV var does says `` nope , that doc string is misleading , they do the same thing '' . Full disclosure : I got ` org.apache.maven.lifecycle.LifecycleExecutionException : Failed to execute goal org.apache.maven.plugins : maven-compiler-plugin:3.7.0 : testCompile ( default-testCompile ) on project zipkin : Compilation failure ` when trying to compile the whole project for an end-to-end test , so I did n't do that . This is most likely a problem in my env , but I 'm hoping I can get away with not tracking it down ( at least not today ) . The newly introduced unit tests _do_ pass . Fixes # 1930
Accomodates server spans who were n't propagated their parent __EoT__ See # 1745
Allows no date separator in Elasticsearch __EoT__ Before , you could n't opt-out of a date separator in ES indexes . Now , you can . Just export ES_DATE_SEPARATOR= ( leave it empty ) Fixes # 1925
Adds Java 9 module names with manifest entries __EoT__ This is the easy way out of getting module names stable and mapped to our entrypoint packages . I 've only done this for the highly re-used jars . See https : //github.com/square/okhttp/pull/3743 thx @ yschimke
Added ability to run zipkin-server as an executable jar , verified in … __EoT__ …local and PCF
refresh extra custom date fields on page load __EoT__ fixes # 1927
Removes UDT workaround using new Datastax driver __EoT__ The ideal is to get rid of the dependency on the zipkin_udts keyspace and prevent below `` ` Caused by : java.lang.IllegalArgumentException : Keyspace zipkin2_udts does not exist at com.datastax.driver.mapping.AnnotationParser.parseUDT ( AnnotationParser.java:150 ) ~ [ cassandra-driver-mapping-3.4.0.jar ! / : na ] at com.datastax.driver.mapping.MappingManager.getUDTCodec ( MappingManager.java:320 ) ~ [ cassandra-driver-mapping-3.4.0.jar ! / : na ] at com.datastax.driver.mapping.MappingManager.udtCodec ( MappingManager.java:270 ) ~ [ cassandra-driver-mapping-3.4.0.jar ! / : na ] at com.datastax.driver.mapping.MappingManager.udtCodec ( MappingManager.java:282 ) ~ [ cassandra-driver-mapping-3.4.0.jar ! / : na ] at zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs ( DefaultSessionFactory.java:89 ) ~ [ io.zipkin.zipkin2-zipkin-storage-cassandra-2.4.7.jar ! / : na ] at zipkin2.storage.cassandra.DefaultSessionFactory.create ( DefaultSessionFactory.java:72 ) ~ [ io.zipkin.zipkin2-zipkin-storage-cassandra-2.4.7.jar ! / : na ] at zipkin2.storage.cassandra.CassandraStorage.session ( CassandraStorage.java:161 ) ~ [ io.zipkin.zipkin2-zipkin-storage-cassandra-2.4.7.jar ! / : na ] at zipkin2.storage.cassandra.AutoValue_CassandraStorage.session ( AutoValue_CassandraStorage.java:32 ) ~ [ io.zipkin.zipkin2-zipkin-storage-cassandra-2.4.7.jar `` `
Fix wrong reference of README.md __EoT__ Doc fix
Allow the RabbitMQ collector to be configured via URI __EoT__ In addition to the existing methods for configuration , this adds the ability to configure the RabbitMQ server to connect to via a RabbitMQ URI spec-compliant URI . When the URI is used , the other connection properties will be ignored , since they should be set via the URI . Resolves # 1901
Updates zipkin self-tracing to Brave 4 __EoT__
zipkin-ui : fixed slow meaningless request in home page __EoT__ Fixed # 1914
Polish : lambdas should be replaced with method references __EoT__
validate hasNext ( ) on itrerator __EoT__ By contract , any implementation of the java.util.Iterator.next ( ) method should throw a NoSuchElementException exception when the iteration has no more elements .
Delete unuseful .DS_Sotre __EoT__ as title
Fixes MySQL join condition to use correct index __EoT__ Thanks @ cgfork for noticing Fixes # 1892
Updates to recent dependency versions __EoT__
Adds how to see traces to our quick start __EoT__ A few people have asked what to do next , so I think we can improve . Last to ask was @ abitrolly
Index page now shows message if searching is disabled . __EoT__ Fixes # 1893 .
Keep Cassandra storage working even if the annotations query is dropped __EoT__ It should be possible to drop just the CONTAINS SASI and have Zipkin continue to start up . ( Trying to search by annotation will still ofcourse throw an exception , here a NPE )
Fix the docs for ZIPKIN_UI_LOGS_URL for Kibana version 4 , 5 , and 6 __EoT__ This might need another iteration , but let 's start the discussion to get the docs fixed : IMO this has been working in Kibana 3 , but has been broken with the full rewrite in version 4 ( no major changes since then ) though I have only tested it with Kibana 6.1 . Unfortunately this got a bit more complicated after the rewrite .
Fixes spacing in the index . __EoT__ This PR turns this : ! [ image ] ( https : //user-images.githubusercontent.com/3075074/35340072-7d1bcc56-0122-11e8-8837-7010a3f0ad3d.png ) Into this : ! [ image ] ( https : //user-images.githubusercontent.com/3075074/35340094-8b3fe772-0122-11e8-8393-13c6f79b4a9e.png ) Ping @ adriancole @ igorwwwwwwwwwwwwwwwwwwww
Adds ability to disable indexing for v2 storage implementations __EoT__ This starts towards `` firehose mode '' by making it possible to disable indexing , notably on cassandra where SASI amplifies writes into the cluster . When enabled , only retrieval by ID is allowed . That said , someone can feel free to run the dependency linker if they like.. If 100 % sampling is on , the dependency links will relate to actual service calls made . See # 1869
Makes zipkin2.Span use json serialization __EoT__ Kryo does n't work with auto-value . This makes a default implementation of serialization using the json code ( which is efficient ) . Fixes # 1879
zipkin-ui : relative interval-based lookback __EoT__ the default start-ts and end-ts elements in the form are imo a little difficult to use . commonly i am usually interested in some sort of relative interval , or lookback . this patch replaces the start-ts and end-ts fields with a pre-configured dropdown of `` 1 hour '' , `` 3 hours '' , `` 6 hours '' , `` 12 hours '' , `` 1 day '' , `` 2 days '' , and `` 7 days '' . ! [ screen shot 2018-01-06 at 21 46 48 ] ( https : //user-images.githubusercontent.com/11158255/34643859-f8e99e1c-f32b-11e7-86d4-ebff941b2323.png ) ! [ screen shot 2018-01-06 at 21 47 11 ] ( https : //user-images.githubusercontent.com/11158255/34643861-fdd148c6-f32b-11e7-89fa-08aefb25de32.png ) there is also a `` custom '' option which reveals the start-ts and end-ts fields . ! [ screen shot 2018-01-06 at 21 47 00 ] ( https : //user-images.githubusercontent.com/11158255/34643863-0247e748-f32c-11e7-8b52-a89c3671e704.png ) a nice side-effect from this is that refreshing the page will now show the latest traces , which can be nice when you are trying to reproduce an issue and `` waiting '' for the trace to show up .
Gives advice on how to handle cassandra 's lack of duration support __EoT__ Fixes # 1877
zipkin-ui : make dropdowns resize-friendly __EoT__ the jquery chosen plugin that is used for pretty dropdowns assigns the container element it creates a fixed width . this width is not updated on window resize , which can create strange effects . this patch overrides the width style attribute of that element to be 100 % , which means it will take up the full space of its container . before ( when resizing ) : ! [ screen shot 2018-01-06 at 20 05 05 ] ( https : //user-images.githubusercontent.com/11158255/34643240-1be40ec6-f321-11e7-94a5-9b1c3838a886.png ) after : ! [ screen shot 2018-01-06 at 20 30 00 ] ( https : //user-images.githubusercontent.com/11158255/34643241-20447faa-f321-11e7-984e-3ffdc08f2ec3.png )
Adds notes that v1 and v2 apis are decoupled from storage __EoT__ Many have asked about the v1 and v2 api and relationship to storage . Hopefully , this clarifies some of it . cc @ drolando
Bumps versions on various dependencies __EoT__
removes listing dupe tags from UI ( only if both key & value are the same __EoT__ In shared spans mode it is easy to wind up with duplicate tags ( binary annotations ) . Some instrumentation has tried to avoid this collision by either removing this information from their client side or server side instrumentation at the expense of losing this information if one of the sides is not instrumented . By deduping tags in the UI view when both key and value are exactly the same we 'll have all information available if one side is not instrumented while only showing dupe tags if client side and server side have different values ( which can be valuable information to have and avoids us making an estimated decision on which tags are more important from either client or server side ) .
zipkin-ui : re-design trace search form __EoT__ it 's not perfect yet , but imo more organised than before . ! [ screen shot 2017-12-17 at 00 03 24 ] ( https : //user-images.githubusercontent.com/11158255/34075161-756cf480-e2be-11e7-8f63-99b36ded35af.png )
Added it_IT internationalisation . __EoT__ This PR translates Zipkin in Italian .
zipkin-ui : include minimal header on page load __EoT__ One of the reasons why the zipkin-ui _feels_ slow is because when you click a link , the page is first rendered as blank , and then re-rendered with the page content . This can be improved significantly by rendering the header as part of the original ` index.html ` page load . This is much less visually disruptive , and makes everything feel a lot snappier . I copied the navbar code from ` layout.mustache ` .
zipkin-ui : improve page rendering time by re-configuring jquery-i18n-properties __EoT__ By default the ` jquery-i18n-properties ` plugin appends the current timestamp every time it requests the language ` .properties ` file , which requires the file to be loaded on every page load and prevents it from being served from cache . By enabling the [ ` cache ` option ] ( https : //github.com/jquery-i18n-properties/jquery-i18n-properties # options ) , that will no longer happen . Another factor is the loading of several language files that is attempted . In my case ` traces.properties ` , ` traces_en.properties ` , ` traces_en_US.properties ` . The first one succeeds , the other 2 return a 404 . That 404 can not be cached by the browser . The ` async ` option defers the loading of additional files , which should also improve time to render .
zipkin-ui : change date format to yyyy-mm-dd __EoT__ This is closer to ISO 8601 , more widely accepted , and disambiguates day and month .
Option to use SSL with RabbitMQ __EoT__ Allows users to set a flag to use SSL when connecting to the RabbitMQ server via AMQPS . See # 1827
Uses curl-sh for top-level quick-start __EoT__ Thanks to @ abesto , here 's how to get the latest zipkin jar `` ` bash $ curl -sSL https : //zipkin.io/quickstart.sh | bash -s `` ` And here 's how to get a module , like our kafka10+ addon `` ` bash $ curl -sSL https : //zipkin.io/quickstart.sh | bash -s io.zipkin.java : zipkin-autoconfigure-collector-kafka10 : LATEST : module kafka10.jar `` ` See https : //github.com/openzipkin/openzipkin.github.io/pull/90
Shaves 3.7MiB of unused deps in scribe __EoT__ Before `` ` bash $ du -k ./zipkin-server/target/zipkin-server-*exec.jar 53612 ./zipkin-server/target/zipkin-server-2.3.2-SNAPSHOT-exec.jar `` ` After `` ` bash $ du -k ./zipkin-server/target/zipkin-server-*exec.jar 49928 ./zipkin-server/target/zipkin-server-2.3.2-SNAPSHOT-exec.jar `` `
Defers checksums and uploads to last step __EoT__ Before , the exec jar created by spring boot had incorrect MD5s . This was likely due to interaction with the install plugin , which when deferred creates correct checksums . This also defers uploads , while we 're at it . Fixes # 1819
Forwards api base for the UI __EoT__ This forwards /api - > /zipkin/api so the UI can start using the v2 api . See # 1802
add i18n support __EoT__ add i18n support , according to browser language
Fix traces rendering with numeric-like ` serviceNames ` __EoT__ In case when we have ` serviceNames ` that looks like numbers , ` data ` function from jQuery returns it as ` number ` that leading to error , because ` number ` does n't have method ` split ` .
Require JDK 8 with enforcer plugin __EoT__ To avoid confusing failure messages when a version of JDK that does n't work with the code is used , this requires JDK 8 using the enforcer-plugin , which will output a sensible error message in case an incompatible JDK version is used . Notes the JDK 8 requirement in the README where instructions for building from source are . See documentation at : https : //maven.apache.org/enforcer/enforcer-rules/requireJavaVersion.html Note that the version scheme changed with Java 9 , such that it is not ` 1.9 ` . I tested this with JDK 9 and it outputs an error like the following : `` ` [ INFO ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- [ INFO ] Building Zipkin ( Parent ) 2.3.2-SNAPSHOT [ INFO ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- [ INFO ]
Bounds the amount of data dumped to the WARN category __EoT__ Before , when there were problems , the entire input json and any trace IDs ended up in the server logs . This by itself can take out the server . This takes a conservative step forward , leaving warning level , but significantly reducing the output .
Updates to latest zipkin test docker images __EoT__ this notably updates cassandra from 3.9 - > 3.11
Allows STORAGE_TYPE to be empty ( defaulting to mem ) __EoT__ Before , not setting STORAGE_TYPE implied in-memory , but empty string did not . Now , STORAGE_TYPE empty is the same as in-memory . Fixes # 1601
Add a profile to the root pom.xml that contains the basic code style rules that NetBeans will honour __EoT__
Support for running Zipkin behind a reverse proxy __EoT__ - subfolder 'zipkin ' is enforced - rewrite of the 'base ' tag in the 'index.html ' file is required This implements the # 1731
Keep a separate stress schema cql file , as stress ca n't use use UDTs __EoT__ For safety , create the stress schema in a different keyspace .
Updates to latests deps , notably Spring Boot 1.5.7 __EoT__
Skips null span name on v2 in-memory spanstore __EoT__
RabbitMQ collector __EoT__ This adds a RabbitMQ collector module along with its corresponding auto-configuration . The implementation is largely inspired by the existing collector implementations . In fact , I think some of the logic and tests could be shared between them , but I did not try to tackle that in this PR . Resolves # 1614
Teaches the v2 tree how to encode v1 format __EoT__ The zipkin v2 library is intended to be used by itself in tracers . Since tracers can not control the span transport , it likely will need to write the old ( historical ) json format for at least months . To avoid requiring dual versions of jars to accomplish this , we add an encoder that writes json v1 format given a v2 span . Note : we do n't decode as the library problem is easier to manage on the server side . For example , zipkin-server will need both versions of the jars for things like collection for a while .
Decouples v2 types from v1 types , in preparation of a new package __EoT__ This moves all the code needed for v2 types into zipkin.internal.v2 without any references to code outside the package . To reduce duplication , `` v1 '' code can reference v2 types ( as they need to in order to covert for example ) . Once this is in , we can consider refactoring out a v2 module .
Adds property for X-Forwarded handling on redirect __EoT__ See https : //github.com/openzipkin/zipkin/pull/1627 # issuecomment-326702774 See https : //github.com/spring-projects/spring-boot/issues/6232
Changes v2 IDs and IPs to validated Strings __EoT__ This changes v2 IDs and IPs to validated Strings , which matches the open api definition http : //zipkin.io/zipkin-api/ # / This also polishes codec and backfills the Annotation and Endpoint types missing from the WIP v2 model . Benchmark results are about 2x efficient as prior : `` ` Benchmark Mode Cnt Score Error Units CodecBenchmarks.readClientSpan_json_span2 avgt 15 4.220 ± 0.103 us/op CodecBenchmarks.readClientSpan_json_zipkin avgt 15 8.371 ± 0.404 us/op CodecBenchmarks.readClientSpan_thrift_libthrift avgt 15 2.020 ± 0.064 us/op CodecBenchmarks.readClientSpan_thrift_zipkin avgt 15 2.055 ± 0.051 us/op CodecBenchmarks.readTenClientSpans_json_span2 avgt 15 29.917 ± 0.969 us/op CodecBenchmarks.readTenClientSpans_json_zipkin avgt 15 67.485 ± 2.951 us/op CodecBenchmarks.readTenClientSpans_thrift_zipkin avgt 15 21.180 ± 0.816 us/op CodecBenchmarks.writeClientSpan_json_span2 avgt 15 1.000 ± 0.041 us/op CodecBenchmarks.writeClientSpan_json_zipkin avgt 15 1.916 ± 0.048 us/op CodecBenchmarks.writeClientSpan_thrift_libthrift avgt 15 2.860 ± 0.092 us/op CodecBenchmarks.writeClientSpan_thrift_zipkin avgt 15 0.660 ± 0.029 us/op CodecBenchmarks.writeTenClientSpans_json_span2 avgt 15 10.249 ± 0.260 us/op CodecBenchmarks.writeTenClientSpans_json_zipkin avgt 15 19.509 ± 1.474 us/op CodecBenchmarks.writeTenClientSpans_thrift_zipkin avgt 15 6.326 ± 0.081 us/op `` ` See https : //github.com/openzipkin/zipkin/issues/1499 # issuecomment-325271539
Fixes v2 query api __EoT__ The read api did n't auto-config due to a race condition with the storage component . This also fixed a json bug .
Adds v2 native in-memory storage __EoT__
Adds Call.handleError to address remote resource not found __EoT__ To complete an http span store adapter , we need to be able to coerce 404 to empty . This does that like this : `` ` java call.handleError ( ( error , callback ) - > { if ( error instanceof HttpException & & ( ( HttpException ) error ) .code == 404 ) { callback.onSuccess ( Collections.emptyList ( ) ) ; } else { callback.onError ( error ) ; } } ) ; `` `
Moves long tests to the verify phase , under a known naming convention __EoT__ This renames integration tests so that it is easier to tell which unit tests might be missing and/or skip integration tests as needed .
Backfills query-related tests __EoT__
Elasticsearch integration of v2 SpanStore Api __EoT__ this makes Elasticsearch use the v2 format natively for reads .
Adds Platform for wrapping IOExceptions properly __EoT__ This is used for pending work in SpanStore v2 . Note : this downgrades mockito as it conflicts with powermock and spring boot versions .
Adds call utilities commonly needed __EoT__ This adds ` Call.emptyList ( ) ` needed for almost all span store operations and ` Call.flatMap ( ) ` needed to transform an ID list into a get by ID call .
Adds v2 Call interface based on okhttp and retrofit __EoT__ In Zipkin v1 , we had a pair of SPI interfaces : ` SpanConsumer ` and ` AsyncSpanConsumer ` . For example , this would define the same thing twice : `` ` java void SpanConsumer.accept ( List < Span > spans ) ; // and void AsyncSpanConsumer.accept ( List < Span > spans , Callback < Void > spans ) ; `` ` in v2 , it looks like this ( inspired by Retrofit and OkHttp 's call ) : `` ` java Call < Void > accept ( List < Span > spans ) ; // then make a call like this.. call = spanConsumer.accept ( spans ) ; // to do a blocking call.. call.execute ( ) ; // to do an async call.. call.enqueue ( callback ) ; // to cancel call.cancel ( ) ; `` ` The important part of this design is that it reduces the redundant interfaces . We end up making less work for users and implementors at the cost of an intermediary type : Call . This design is near identical to [ Retrofit 's Call ] ( https : //github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit2/Call.java
Reinstates hard limit on Elasticsearch lookback __EoT__ In e764137a9fa2a229d99f1ce64b772066d3cb26c3 , we compressed index expressions to avoid overrunning request line limits . This wasn't quite enough to avoid > 4096 character request lines . This reinstates the old defense , which was to not attempt to look back farther than when ES support was added See # 1371
Removes double-conversion when collecting into Elasticsearch __EoT__ Before , when accepting span2 format , we needlessly converted data to and from the legacy Span format . This removes the double-conversion in favor of a version 2 native span consumer . Before : `` ` ┌──────────────────────────────────────────────────┐ │ ┌──────────────┐ KafkaCollector │ │ │ Kafka Message│ │ │ └──────┬───────┘ │ │┌─────────────────┼───────────────────┐ │ ││ ┌─────┴───────┐ Collector│ │ ││ │ byte array │ │ │ ││ └─────┬───────┘ │ │ ││ .──▼── . │ │ ││ ╱ ╲ │ │ ││ ┌──── ( decode ) ────┐ │ │ ││ ┌──┴───┐ ` . , ' ┌───┴──┐ │ │ ││ │json2 │ ` ─── ' │thrift│ │ │ ││ └──┬───┘ │ └───┬──┘ │ │ ││ │ │ │ │ │ ││ │ ┌─┴────┐ │ │ │ ││ ▼ │ json │ │ │ │ ││┌────────────┐ └─┬────┘ │ │ │ │││List < Span2 > │ │ │ │ │ ││└────┬───────┘ │ │ │ │ ┌────────────┴┴─────┼─────────────┼───────┼───┐ │ │ │ ▼ ▼ ▼ │ │ │ │ .─────── . ┌────────────┐│ │ │ │ ( convert ) ─────▶│ List < Span > ││ │ │ │ ` ─────── ' └──────┬─────┘│ │ │ │ This double converts when input │ ├─────┘ │ │
Switches Elasticsearch to only write single-type indexes __EoT__ Multi-type indexes are no longer supported starting with Elasticsearch 6 . We added support for single-type writes in Zipkin 1.29 as an opt-in functionality via ` ES_EXPERIMENTAL_SPAN2=true ` . This makes single- type writes the only means to ingest spans , eventhough we still read both models . To turn off dual-reads , set ` ES_LEGACY_READS_ENABLED=false ` once your collectors have been updated to Zipkin 1.31 and old indexes are no longer valuable .
Switches CollectorSampler to use ( trace ID , debug ) vs Span v1 object __EoT__ Currently , transports can decode zipkin2 format , but it has to be converted to v1 objects prior to storage . Part of the reason is CollectorSampler ( used for load shedding to protect storage ) , accepts an object type as opposed to the parameters trace ID and debug . This deprecates the former in favor of the latter , as trace ID and debug exist in both formats . We are switching code to permit use of zipkin2 format in transports .
Starts preparing v2 Codec package __EoT__ All current Zipkin codec operations include the following : * encoding spans one-by-one as reported by instrumentation * encoding a list of spans ready to send into a bytes message * decoding a list of spans off a transport message Zipkin v1 includes legacy encoding , which is a bit different . For example , old variants of Kafka accepted single-element messages instead of a list . We do n't need to carry-forward this anymore . Moreover , interfaces of reporter vs collector were split across jars in Zipkin v1 due to the former being defined late . This introduces the following key interfaces and cleans up some code around codec . * ` byte [ ] Encoder.encode ( S span ) ` * ` M MessageEncoder.encode ( List < byte [ ] > encodedSpans ) ` * ` List < S > Decoder.decodeList ( byte [ ] message ) ` All of these are temporarily placed in an internal package until other code around it stabilizes .
Quiets build warnings __EoT__
Hardens json parser __EoT__ [ go-swagger ] ( https : //github.com/go-swagger/go-swagger ) initializes some fields to null . This ensures null fields do n't break parsing .
Lack of timestamp in server-only spans implies shared __EoT__ When `` sr '' is present without a timestamp , we assume this is a shared span . Moving this signal to the converter allows stackdriver-zipkin to reuse this when converting to their single-host types . See https : //github.com/openzipkin/openzipkin.github.io/issues/49
Coerces non-string binary annotations to Span 2 tags __EoT__ This completes one-way conversion by reusing the same approach as exists in stackdriver-zipkin .
Adds SpanDecoder.DETECTING_DECODER __EoT__ A couple things were found integrating zipkin2 json format with existing collectors . * Only Kafka has a legacy encoding of single span per message * We should n't assume this encoding is supported for others * Azure Event Hubs decodes messages decoupled from collection * We need to move the detecting decode logic to avoid copy/pasting it
Allows span2 json format to omit serviceName instead of setting empty __EoT__ A snag in the old model was that we needed to pass an empty string for serviceName because thrift requires the field . In span2 format , we can act more idiomatic and either leave it out or set it to null .
Changes Elasticsearch single-type indexing to work around dotted tags __EoT__ Tags are stored as a dictionary . Since some tag names will include inconsistent number of dots ( ex `` error '' and perhaps `` error.message '' ) , we can not index them naturally with elasticsearch . Instead , we add an index-only ( non-source ) field of _q which includes valid search queries . For example , the tag error - > 500 results in `` _q '' : [ `` error '' , `` error=500 '' ] . This matches the input query syntax , and can be checked manually with curl . Ex ` curl -s localhost:9200/zipkin : span-2017-08-11/_search ? q=_q : error=500 `
Backfills tests for ES_HOSTS __EoT__ This is in preparation for work on enabling multiple TLS endpoints per # 1611 cc @ openzipkin/elasticsearch
Reinstates cassandra integration tests __EoT__ These have n't been running for quite a while !
Adds Elasticsearch 6.x support using Span2 model __EoT__ This adds Elasticsearch 6.x support via single-type indexes : * zipkin : span-2017-08-05 - span2 ( single endpoint ) format * zipkin : dependency-2017-08-05 - dependency links in existing format This indexing model will be available in the next minor release of Zipkin , particularly for Elasticsearch 2.4+ . If you are n't running Elasticsearch 2.4+ , yet . Please upgrade . Those wishing to experiment with this format before the next minor release can set ` ES_EXPERIMENTAL_SPAN2=true ` to use this style now . When set , writes will use the above scheme , but both the former and new indexes will be read . Fixes # 1676 See # 1644 for the new span2 model See # 1679 for the dual-read approach , which this is similar to Details -- - This uses the span2 model from # 1499 to implement Elasticsearch without using nested queries . This works with Elasticsearch 2.4+ , 5.x and 6.0 alpha2 . 2.4 was released Aug 2016 and works if run with ` ES_JAVA_OPTS=-Dmapper.allow_dots_in_name=true ` The key changes are the following : * there 's only one type per index , and this is
Avoids use of messaging span in raw tests __EoT__
Adds messaging span __EoT__ See https : //github.com/openzipkin/openzipkin.github.io/pull/82 for docs See https : //github.com/openzipkin/zipkin-api/pull/29 for thrift constants Here is what work in progress looks like for a single producer , single consumer POV where the remote endpoint ( broker ) is set to kafka : `` ` bash $ curl -X POST -s localhost:9411/api/v1/spans -H 'Content-Type : application/json ' -d ' [ { `` traceId '' : '' 040c464a2b70a87a '' , '' id '' : '' 040c464a2b70a87a '' , '' name '' : '' '' , '' timestamp '' :1501654414312417 , '' annotations '' : [ { `` timestamp '' :1501654414312417 , '' value '' : '' ms '' , '' endpoint '' : { `` serviceName '' : '' producer '' , '' ipv4 '' : '' 192.168.1.10 '' } } ] , '' binaryAnnotations '' : [ { `` key '' : '' kafka.key '' , '' value '' : '' foo '' , '' endpoint '' : { `` serviceName '' : '' producer '' , '' ipv4 '' : '' 192.168.1.10 '' } } , { `` key '' : '' kafka.topic '' , '' value '' : '' myTopic '' , '' endpoint '' :
Adds errorCount to the dependency graph and colors accordingly __EoT__ Thanks to @ hfgbarrigas for requesting this . This adds errorCount to dependency links , indicating how many of callCount were in error . Once merged , an update to the zipkin-api project will follow , documenting the new field . MySQL users who want this need to add the ` error_count ` column : `` ` sql alter table zipkin_dependencies add ` error_count ` BIGINT `` ` For the UI , I reused the existing color codes for transient and critical status , coloring yellow when 50 % or more calls are in error , and red when 75 % I tested this by making one of the sample apps `` backend '' throw an error . Example link detail screen < img width= '' 622 '' alt= '' screen shot 2017-07-28 at 6 25 44 pm '' src= '' https : //user-images.githubusercontent.com/64215/28713698-cad45a3c-73c2-11e7-9062-3d6dfa7674e2.png '' > Example of when > 50 % of calls are in error < img width= '' 425 '' alt= '' screen shot 2017-07-28 at 6 25 35 pm '' src= '' https : //user-images.githubusercontent.com/64215/28713715-e06f0fe0-73c2-11e7-8a3e-a3e21bc9d09a.png '' > Example of when > 75 % of calls are
Adds zipkin.internal.Span2Codec.JSON __EoT__ This adds an internal copy of a span json codec issue # 1499 . This starts internal to ease review and allow incremental progress . The first consumer will be Elasticsearch , as this format removes nested queries . Note : this change also introduces json serialization of Span2 , which allows future use in Spark . Benchmark : `` ` Benchmark Mode Cnt Score Error Units CodecBenchmarks.readClientSpan_json_span2 avgt 15 4.514 ± 0.141 us/op CodecBenchmarks.readClientSpan_json_zipkin avgt 15 8.026 ± 0.174 us/op CodecBenchmarks.readClientSpan_thrift_libthrift avgt 15 2.251 ± 0.196 us/op CodecBenchmarks.readClientSpan_thrift_zipkin avgt 15 2.093 ± 0.038 us/op CodecBenchmarks.readTenClientSpans_json_span2 avgt 15 37.499 ± 1.834 us/op CodecBenchmarks.readTenClientSpans_json_zipkin avgt 15 72.065 ± 2.804 us/op CodecBenchmarks.readTenClientSpans_thrift_zipkin avgt 15 21.267 ± 1.286 us/op CodecBenchmarks.writeClientSpan_json_span2 avgt 15 1.145 ± 0.083 us/op CodecBenchmarks.writeClientSpan_json_zipkin avgt 15 1.925 ± 0.053 us/op CodecBenchmarks.writeClientSpan_thrift_libthrift avgt 15 2.758 ± 0.056 us/op CodecBenchmarks.writeClientSpan_thrift_zipkin avgt 15 0.630 ± 0.032 us/op CodecBenchmarks.writeTenClientSpans_json_span2 avgt 15 11.283 ± 0.279 us/op CodecBenchmarks.writeTenClientSpans_json_zipkin avgt 15 18.009 ± 0.990 us/op CodecBenchmarks.writeTenClientSpans_thrift_zipkin avgt 15 5.899 ± 0.229 us/op `` `
Adds zipkin.internal.Span2Converter __EoT__ This adds an internal copy of a span conversion utility mentioned in issue # 1499 . This is starting internal to ease review and allow incremental progress . The first consumer will be dependency linking . Benchmarks `` ` Benchmark Mode Cnt Score Error Units Span2ConverterBenchmarks.fromSpan thrpt 15 3.755 ± 0.137 ops/us Span2ConverterBenchmarks.fromSpan_splitShared thrpt 15 1.549 ± 0.055 ops/us Span2ConverterBenchmarks.toSpan thrpt 15 4.178 ± 0.177 ops/us `` `
Adds zipkin.internal.Span2 __EoT__ This adds an internal copy of the new span data structure defined in issue # 1499 . This is starting internal to ease review and allow incremental progress . The first consumer will be dependency linking . Benchmarks : `` ` Benchmark Mode Cnt Score Error Units SpanBenchmarks.buildClientOnlySpan thrpt 15 3.810 ± 0.216 ops/us SpanBenchmarks.buildClientOnlySpan_clear thrpt 15 4.087 ± 0.194 ops/us SpanBenchmarks.buildClientOnlySpan2 thrpt 15 6.683 ± 0.259 ops/us SpanBenchmarks.buildClientOnlySpan2_clear thrpt 15 6.865 ± 0.508 ops/us SpanBenchmarks.buildClientOnlySpan2_clone thrpt 15 7.320 ± 0.247 ops/us `` `
Moves dependency link test to MySQL package __EoT__ Before , the MySQL code for dependency linking was not unit tested , rather relying on integration tests . This moves tests that were for MySQL , but stored in core to where they are used .
Simplifies loop on MySQL dependency linking __EoT__ fyi @ hfgbarrigas
Drops invalid span data vs counting them in dependency links __EoT__ Previously , I over-fixed an NPE on dependency linking when bad data is present . Instead of trying to fix cyclical references , this just drops them . In doing so , the code is easier to maintain . See # 1640
Removes distracting assertions from SpanStoreTest __EoT__ Formerly , we used equivalence for testing things like order . This makes the class unnecessarily brittle to maintenance , or worse hides unwritten tests . This reduces each of the test cases to what they are proving .
Test cleanup including being less sensitive to single-host span storage __EoT__ There were tests accidentally assuming merge semantics when testing unrelated things . This scrubs some of the tests to focus on what they are testing , and in doing so help pave forward single-host span storage . See # 1644
Supports dependency linking on single-host RPC spans __EoT__ Before , if a client span was a parent of a server span , linking wouldn't work . See # 1480
Adds toString to Annotation and BinaryAnnotation __EoT__ If you use Span.toString , embedded annotations and binary annotations look good . However , in tests or debugger they do n't . This fixes this . Thx @ sirtyro for reporting
Refactors codec to reduce redundant list creation __EoT__ This includes cleanups and performance improvements when reading spans . Notably , this stops recreating lists by re-using Span.Builder To test this , we use the same client-span json from zipkin-reporter . Benchmark Mode Cnt Score Error Units CodecBenchmarks.readClientSpan_json_zipkin avgt 15 10.070 ± 0.431 us/op CodecBenchmarks.readClientSpan_thrift_libthrift avgt 15 2.633 ± 0.047 us/op CodecBenchmarks.readClientSpan_thrift_zipkin avgt 15 2.846 ± 0.059 us/op CodecBenchmarks.readTenClientSpans_json_zipkin avgt 15 78.381 ± 2.028 us/op CodecBenchmarks.readTenClientSpans_thrift_zipkin avgt 15 28.216 ± 0.365 us/op After : Benchmark Mode Cnt Score Error Units CodecBenchmarks.readClientSpan_json_zipkin avgt 15 9.700 ± 0.261 us/op CodecBenchmarks.readClientSpan_thrift_libthrift avgt 15 2.367 ± 0.022 us/op CodecBenchmarks.readClientSpan_thrift_zipkin avgt 15 2.396 ± 0.034 us/op CodecBenchmarks.readTenClientSpans_json_zipkin avgt 15 76.188 ± 1.164 us/op CodecBenchmarks.readTenClientSpans_thrift_zipkin avgt 15 23.903 ± 0.404 us/op
Refactors in-memory storage eviction logic to remove lockups __EoT__ I ran the server with self-tracing-enabled and did get services in a for loop . The previous variant was n't happy due to some race conditions and in attempting to fix it , I noticed some places to simplify things .
Bound in-memory __EoT__ Here 's a first whack at fixing # 1528 . A few comments : 1 . Here 's a before and after of memory usage : ! [ before ] ( https : //user-images.githubusercontent.com/4552139/27569027-4f00410e-5ac3-11e7-890f-2d5c7f8290f5.png ) ! [ after ] ( https : //user-images.githubusercontent.com/4552139/27569042-6016a9d8-5ac3-11e7-9746-e39f6ef4dc41.png ) If I recall correctly , this is a run with 200,000 spans stored . You can see in the non-bounded case , that the JVM hits the heap limit , then thrashes desperately ( the flatline ) before dying . In the second picture , you can see the heap usage increase until it hits the max-span limit and old spans start getting purged . 2 . I set the default number of spans to be 500,000 . This requires about 600MB . I do n't know if this is the right default or not . 3 . I 'm open to refactoring the code to create better interfaces , but here 's what I did for now . I did three commits for ease of understanding . The first adds a StorageMetrics interface so that the number of actual spans retained can be shown ( as opposed to the CollectorMetrics , which
Deletes empty test . __EoT__ It looks like the behavior to be tested is covered in the test above : 'should order traces by duration and tie-break using trace id '
use docker for C* tests __EoT__ Refactoring to match elasticsearch tests . This has exposed a few failures that may have went unnoticed . Either that or I just broke things but I feel its probably a mixture so it might take some time to finish this up . closes # 1565
Cassandra3 span store randomly throws exceptions when retrieving spans . __EoT__ Zipkin Version : 1.20.0 Cassandra Version : 3.9 The Cassandra3 CassandraSpanStore.getSpansByTraceIds randomly throws the following exception . The underlying issue seems to be that the driver sees that the result set current page is exhausted and prepares to fetch more results while in an asynchronous request . When this happens the driver makes a check to see if the synchronous request is being made while in an event loop . Then end result is the following stack trace : `` ` java.lang.IllegalStateException : Detected a synchronous call on an I/O thread , this can cause deadlocks or unpredictable behavior . This generally happens when a Future callback calls a synchronous Session method ( execute ( ) or prepare ( ) ) , or iterates a result set past the fetch size ( causing an internal synchronous fetch of the next page of results ) . Avoid this in your callbacks , or schedule them on a different executor . at com.datastax.driver.core.AbstractSession.checkNotInEventLoop ( AbstractSession.java:203 ) ~ [ cassandra-driver-core-3.1.3.jar ! / : na ] at com.datastax.driver.core.ArrayBackedResultSet $ MultiPage.prepareNextRow ( ArrayBackedResultSet.java:310 ) ~ [ cassandra-driver-core-3.1.3.jar ! / : na ] at com.datastax.driver.core.ArrayBackedResultSet
Fixes bug where self-referencing spans NPE on dependency links __EoT__ Instead , this allocates self-referencing spans as direct children of the root span . Fixes # 1604
Fix UI issue __EoT__ We found zipkin UI ca n't display the friendly if there are lots of spans . Looks like the following picture : ! [ image ] ( https : //user-images.githubusercontent.com/8295896/27623821-cf7c552c-5c10-11e7-8d58-8442a9b40493.png ) I just remove the width of the span . It works now . please review it . Thanks
Adding ability to listen to multiple kafka10 topics via comma separated list __EoT__ Useful for cases like span info from different environments coming from different topics , etc .
Forces build to fail if UI tests fail __EoT__ This will cause the whole build to fail if a UI test fails , as happened in # 1625 . I put the configuration option in the POM at builds/plugins/plugin/configuration for the plugin `` frontend-maven-plugin '' It will also work to give the configuration option a narrower scope at builds/plugins/plugin/configuration/executions/execution/configuration for the execution with id `` npm run test '' . However , I think it makes sense to configure this option for the whole plugin , because I do n't know of any failure that should be non-fatal . ( But perhaps there is . ) The only change in behavior I can see is in the test phase of the build . For completeness , I forced a non-test build failure by deleting node from my maven cache and disabling my network connection . In this case , the build failed because it could n't download node , and it failed before and after this change .
Add documentation for custom port for Cassandra storages __EoT__ Fixes https : //github.com/openzipkin/zipkin/issues/1505
Fix to PR 1627 __EoT__ From https : //github.com/openzipkin/zipkin/pull/1627 , looks like ` config.js ` was missed . Without it , you get `` Error loading config.json : No message available ''
Ignore .gitattributes and bnd.bnd for code style __EoT__ Small tweak to fix these two warnings you see when running maven : `` ` [ WARNING ] Unknown file extension : /Users/joel/asource/zipkin/zipkin/zipkin/bnd.bnd [ WARNING ] Unable to find a comment style definition for some files . You may want to add a custom mapping for the relevant file extensions . `` ` and `` ` [ WARNING ] Unknown file extension : /Users/joel/asource/zipkin/zipkin/.gitattributes [ WARNING ] Unable to find a comment style definition for some files . You may want to add a custom mapping for the relevant file extensions . `` `
Escape HTML input __EoT__ This should fix # 1623 . Actually I have n't tried running this patch myself , I just did it in GitHub 's in-browser code editor . But I think it works .
Moves the zipkin UI under the path /zipkin __EoT__ This moves the zipkin UI under the path /zipkin , adding a redirect for / as well . As UI assets look for the api to be relative to it , requests to /zipkin/api are forwarded to /api , too . Fixes # 1229 # 1452
Add migration documentation from kafka 0.8 to 0.10 __EoT__ When migrating Kafka from 0.8.1 to 0.10 , users should pay attention to the change in offset management .
InMemorySpanStore.clear ( ) should clear all its data __EoT__ This is a minor change , but it seems like InMemorySpanStore.clear ( ) should clear all the data it has accumulated . This affects no tests because all tests get a new instantiation of InMemorySpanStore . I 'd be happy to add a test for the clear if it seems worthwhile . All tests passed as reported by : ./mvnw -- also-make -pl zipkin-server clean install
Updates versions notably Spring Boot , MariaDB and ErrorProne __EoT__ ErrorProne caught a small bug in cassandra3 . MariaDB bump caught a missing dialect .
Accepts json span names ( previously broke ElasticSearch ) __EoT__ While not good practice , if we break on json span names , users can't easily troubleshoot . This works around the problem by escaping json . Fixes # 1613
Add zipkin banner __EoT__ It would be nice to show Zipkin banner instead of Spring Boot ! [ image ] ( https : //user-images.githubusercontent.com/106908/27065666-a3b14cb4-5039-11e7-9d40-b411f5067d58.png )
Makes the simple type name of kafka10 's autoconfiguration unique __EoT__ The /autoconfig endpoint expects the simple type names of autoconfiguration to be different .
Add .editorconfig and make sure we use LF ( not CRLF ) for line endings __EoT__ IntelliJ complained a lot about CRLF in the logback.xml file . And besides , it 's nice to have a common convention . ` .editorconfig ` will enforce it ( at least in IDEs )
Add a Kafka 0.10+ compatible collector and attempt to integrate into zipkin-server __EoT__ These changes add a new collector module supporting Kafka 0.10+ ( zipkin-collector-kafka10 ) and the associated auto-configure module ( zipkin-autoconfigure-collector-kafka10 ) . They also make the auto-configure module a dependency of zipkin-server , with the collector activated by setting the ` KAFKA_BOOSTRAP_SERVERS ` environment variable . See https : //github.com/dgrabows/zipkin/tree/kafka10-collector/zipkin-server # kafka-010-collector for more details on the supported configuration . Further changes are needed to how the new collector is integrated with zipkin-server . As currently implemented , the 0.10.2.0 version of the org.apache.kafka : kafka-clients dependency takes precendence over the 0.8.x.x one when zipkin-server is built . This will prevent the existing 0.8 Kafka collector from working . From https : //github.com/openzipkin/zipkin/issues/1405 # issuecomment-300023053 : > wrt how we address integration , I think the best way is to act like sqs , where we package a module jar ( and this includes a zipkin-server-kafka file like https : //github.com/openzipkin/zipkin-aws/blob/master/autoconfigure/collector-sqs/src/main/resources/zipkin-server-sqs.yml ) > > The pom would include a module file as well , like this , except different excludes : https : //github.com/openzipkin/zipkin-aws/blob/master/autoconfigure/collector-sqs/pom.xml > > Running will be a little messier than this because of classpath
Make RegisterZipkinHealthIndicators public for custom zipkin servers __EoT__
use docker for C* tests __EoT__ Refactoring to match elasticsearch tests . This has exposed a few failures that may have went unnoticed . Either that or I just broke things but I feel its probably a mixture so it might take some time to finish this up . closes # 1565
bootstrap styles for 'pre ' does n't break long lines with many words __EoT__ Zipkin wraps text in 'pre ' tag if it has new line symbols ( zipkin-ui/js/component_ui/spanPanel.js:39 ) , but bootstrap styles for 'pre ' are not correct ( please see http : //code.rohitink.com/2015/05/17/solution-tag-bootstrap-breaking-every-word/ ) . It can be fixed by 1 ) overriding bootstrap styles for 'pre ' or 2 ) creating additional css class or 3 ) wrapping a text in < pre > < code > text < /code > < /pre > ( Bootstrap styles for 'pre code ' are correct ) . I prefer the third way .
Explicitly sets line endings to LF for source , doc and configuration __EoT__ Per https : //help.github.com/articles/dealing-with-line-endings/ in efforts to help avoid mixed line endings with unix and windows . See # 1535
Quiets zipkin-server integration test setup __EoT__ Our CI builds are full of log output that is n't helpful , ex . `` ` [ INFO ] [ INFO ] Downloading : file : ///Users/acole/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.pom [ INFO ] [ INFO ] Downloaded : file : ///Users/acole/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.pom ( 2 KB at 501.3 KB/sec ) `` ` See http : //stackoverflow.com/questions/35119522/disable-downloaded-logs-in-maven-invoker-tests
Allows collector-only servers to disable the UI and query apis __EoT__ This adds the ability to set ` QUERY_ENABLED=false ` for reasons including security policy . Fixes # 1591
Fix year in header to appease license-maven-plugin __EoT__
Enables search by binary annotation aka tag key __EoT__ I believe we once were able to search by presence of a tag key . Ex '' http.method '' would return any traces that included any http request . Somewhere along the way this stopped working . This resurrects the feature along with tests . Here 's the impact : * Cassandra will index a bit more : once per unique service/tag key * Elasticsearch now does two nested queries when looking for a key * MySQL now considers all annotation rows when looking for a key I think the value is greater than the impact as this is intuitive and answers a functionality many expect to `` just work '' .
Breaking test for trace search in ES . __EoT__ The Elastic Search implementation should be able to search traces by serviceName of the server , when the server is not also a client of another service . For @ adriancole
Helps tracers be more safe about IP Addresses __EoT__ Before , tracers including Brave and Finagle blindly assumed addresses and strings were IPv4 . While that 's usually the case , it can lead to very late problems , such as runtime exceptions . This adds a utility to encourage safe parsing practice of potentially null inputs . By re-using code from guava , we can safely parse IP literals as well , avoiding troublesome IP from name service lookups . Ex . if your input is an ` HttpServletRequest ` , the following is safe : `` ` java if ( ! builder.parseIp ( input.getHeader ( `` X-Forwarded-For '' ) ) ) { builder.parseIp ( input.getRemoteAddr ( ) ) ; } `` `
Fixes ES service/span indexing for mid-tier server spans __EoT__ Before , the service/span indexing skipped mid-tier server spans . This corrects the associated logic so that the UI drop-down includes all valid service names .
Updates to Spring boot 1.5.3 __EoT__ This includes better support for properties launcher , which we will use in zipkin-aws and zipkin-azure https : //github.com/spring-projects/spring-boot/pull/8486
Fix comments in docs about QUERY_LOOKBACK __EoT__ `` ` 3600*24*1000 = 86400000 ( 1day ) 3600*24*1000*7 = 604800000 ( 7 days ) `` ` Just to not confuse users ( : ( It 's correct in some places and wrong in another )
Adds a query which might help users troubleshoot their data in MySQL __EoT__ Especially with custom or new instrumentation , pinpointing data problems is important . This is an example query which can format things in a way that is easier to work with in SQL . See # 1567 See # 1566
Updates versions , notably to spring boot 1.4.5 __EoT__ This updates versions in use , particularly to the latest patch of spring boot 1.4 .
Refactors elasticsearch service and span name query to be like c* __EoT__ Service and span names are written to the same daily indexes as spans and dependency links as the document type `` servicespan '' . The document is a simple structure , like : `` ` json { `` serviceName '' : `` MyServiceName '' , `` spanName '' : `` MySpanName '' , } `` ` When the `` servicespan '' type is missing from an index , or there 's no results returned , a fallback nested query is invoked . Fixes # 1526
Makes elasticsearch index templates explicit __EoT__ We 've had various concerns about performance and size in elasticsearch . This moves to explicit vs dynamic mappings , and eliminates features not used . A side effect is that new fields have to be added as soon as they are used in our search api . This rarely occurs . Here 's an example of the template applied ( the template is version-specific ) *Note only fields used in search terms are declared . The document stored is n't affected by this* `` ` json { `` template '' : `` test_zipkin_http_mixed-* '' , `` settings '' : { `` index.number_of_shards '' : 5 , `` index.number_of_replicas '' : 1 , `` index.requests.cache.enable '' : true , `` index.mapper.dynamic '' : false , `` analysis '' : { `` analyzer '' : { `` traceId_analyzer '' : { `` type '' : `` custom '' , `` tokenizer '' : `` keyword '' , `` filter '' : `` traceId_filter '' } } , `` filter '' : { `` traceId_filter '' : { `` type '' : `` pattern_capture '' , `` patterns '' : [ `` ( [ 0-9a-f ]
remove traces with null timestamps on rendering __EoT__ I began receiving `` blank pages '' ( with header ) when enabled self-tracing and tried to search for them with following JS error : Uncaught TypeError : Can not read property 'duration ' of null ( traceSummary.js ) Then figured out that there are some traces with absent timestamp field in root spans ( actually , there are cases with some contiguous spans with null timestamps , starting from root spans ) . As far as I remember , there are some existing valid cases ( are n't they ? ) when timestamps may be null . So , there is a straightforward ( maybe not very elegant ) solution with removing useless null-timestamped traces . Actually , I 'm not sure that it 's the right way to solve the problem , but it allows to see at least valid traces and not blank pages .
Fixes byte count when partial surrogates exist __EoT__ A UTF-8 codepoint of a partial surrogate is represented by a ? . This fixes our byte counter accordingly . Thanks to okio for the hint ! https : //github.com/square/okio/pull/297
Adds ES_DEBUG , only used for development tests __EoT__ This is something I often do during tests , so felt I should share cc @ openzipkin/elasticsearch
Makes the build have pretty colors by updating to Maven 3.5 __EoT__
Forks retrolambda to avoid backporting issues __EoT__ See https : //github.com/openzipkin/brave/pull/377
Fixes Elasticsearch AWS integration ( broken dependency ) __EoT__ We used to transiently include elasticsearch , which had joda dependency . In order to not conflict with AWS , we excluded joda from AWS . Now , we do n't depend on Elasticsearch anymore so need joda again ! Reported by @ mclarke47 as an exception like : `` ` Exception in thread `` OkHttp Dispatcher '' java.lang.NoClassDefFoundError : org/joda/time/ReadableInstant at com.amazonaws.auth.EC2CredentialsFetcher.fetchCredentials ( EC2CredentialsFetcher.java:151 ) `` `
Preformats multi-line tag/binary annotations in the UI __EoT__ Before , we did n't preformat text that included newlines . This made them run off the screen . Now we do . Before : < img width= '' 820 '' alt= '' screen shot 2017-04-04 at 1 14 16 pm '' src= '' https : //cloud.githubusercontent.com/assets/64215/24643157/a2f40dc0-193e-11e7-8221-a1efb4a86387.png '' > After : < img width= '' 884 '' alt= '' screen shot 2017-04-04 at 1 54 20 pm '' src= '' https : //cloud.githubusercontent.com/assets/64215/24643161/a7470ed6-193e-11e7-8a27-505efdd2c9b5.png '' >
UI : Preserve sort order when going back to start screen __EoT__
Drops Elasticsearch Native transport __EoT__ This drops the Elasticsearch Native transport , which allows us to focus efforts on the http variant . It also stops us from interfering with Spring Boot autoconfiguration of Elasticsearch . Finally , it speeds up the build as related docker tests are no longer needed . To help in transition , this implicitly converts server configuration pointing to the native port 9300 towards the http port 9200 after logging a warning . This is an attempt to not break existing users . Fixes # 1511
Revises info about Cassandra TTL __EoT__ per chat with @ pauldraper
Disables scribe by default __EoT__ Scribe has been listening on the legacy port 9410 to help with migration off the old zipkin codebase . A year and a half has passed , and all major instrumentation packages support HTTP . By disabling scribe by default , we only listen on one port , which helps in configuration management and also eliminate the common confusion where people accidentally send http traffic to the scribe port . Fixes # 1192
Limits names lookback in Elasticsearch __EoT__ This reuses ` QUERY_LOOKBACK ` to limit names queries ( service and span names ) from searching all indexes . This is particularly important for high-volume sites ( ex 100 % sampling or high traffic ) , and those who do not use curator or otherwise to prune data . Fixes # 1462 ( at least helps a lot with no schema change )
Speed up ActuateCollectorMetrics __EoT__ # **Before the change** 1 thread `` ` Benchmark Mode Cnt Score Error Units MetricsBenchmarks.incrementBytes_longSpans_Actuate avgt 15 295.329 ± 8.135 us/op MetricsBenchmarks.incrementBytes_longSpans_inMemory avgt 15 0.010 ± 0.001 us/op MetricsBenchmarks.incrementBytes_mediumSpans_Actuate avgt 15 60.035 ± 1.428 us/op MetricsBenchmarks.incrementBytes_mediumSpans_inMemory avgt 15 0.010 ± 0.001 us/op MetricsBenchmarks.incrementBytes_shortSpans_Actuate avgt 15 30.210 ± 1.112 us/op MetricsBenchmarks.incrementBytes_shortSpans_inMemory avgt 15 0.010 ± 0.001 us/op `` ` # **After the change** 1 thread `` ` Benchmark Mode Cnt Score Error Units MetricsBenchmarks.incrementBytes_longSpans_Actuate avgt 15 0.108 ± 0.002 us/op MetricsBenchmarks.incrementBytes_longSpans_inMemory avgt 15 0.011 ± 0.001 us/op MetricsBenchmarks.incrementBytes_mediumSpans_Actuate avgt 15 0.108 ± 0.004 us/op MetricsBenchmarks.incrementBytes_mediumSpans_inMemory avgt 15 0.010 ± 0.001 us/op MetricsBenchmarks.incrementBytes_shortSpans_Actuate avgt 15 0.107 ± 0.002 us/op MetricsBenchmarks.incrementBytes_shortSpans_inMemory avgt 15 0.010 ± 0.001 us/op `` ` 4 threads `` ` Benchmark Mode Cnt Score Error Units MetricsBenchmarks.incrementBytes_longSpans_Actuate avgt 15 0.107 ± 0.012 us/op MetricsBenchmarks.incrementBytes_longSpans_inMemory avgt 15 0.014 ± 0.003 us/op MetricsBenchmarks.incrementBytes_mediumSpans_Actuate avgt 15 0.108 ± 0.003 us/op MetricsBenchmarks.incrementBytes_mediumSpans_inMemory avgt 15 0.011 ± 0.001 us/op MetricsBenchmarks.incrementBytes_shortSpans_Actuate avgt 15 0.107 ± 0.005 us/op MetricsBenchmarks.incrementBytes_shortSpans_inMemory avgt 15 0.012 ± 0.001 us/op `` ` 40 threads `` ` Benchmark Mode Cnt Score Error Units MetricsBenchmarks.incrementBytes_longSpans_Actuate avgt 240 0.755 ± 0.016 us/op MetricsBenchmarks.incrementBytes_longSpans_inMemory avgt 240 0.098 ± 0.001 us/op MetricsBenchmarks.incrementBytes_mediumSpans_Actuate avgt
Handle null values in annotation value formatting __EoT__ This happens due to the string `` null '' being converted to an actual null We are adding binaryAnnotations with a potential value of the string `` null '' - somewhere in the UI processing this gets converted to the value null and blows up during span binary annotation formatting . I am fairly confident that this is a UI bug - as I can retrieve the raw json of the trace and still see the quoted null string value in the annotations listing . I debugged the javascript code and I believe it is happening during the mustache templating - > spanPanel.component.show function . I was n't too familiar with how to write a unit test for this . Test span below . ` [ { `` traceId '' : `` c60aebe24bf0e16b '' , `` id '' : `` c60aebe24bf0e16b '' , `` name '' : `` /foo/bar '' , `` timestamp '' : 1488880527927637 , `` duration '' : 9860466 , `` annotations '' : [ { `` timestamp '' : 1488880527927637 , `` value '' : `` sr '' , `` endpoint '' : { `` serviceName '' :
Do not add incorrect dependencies when processing partial/broken traces __EoT__ The current dependency building logic uses the first spen as root for span trees that are missing a span with null parentId . So for example given this span tree ( where all spans are server spans ) : 1 : { traceId : 1 , spanId : 1 , serviceName : A } 2 : { traceId : 1 , spanId : 2 , serviceName : B , parentId : 1 } 3 : { traceId : 1 , spanId : 3 , serviceName : C , parentId : 1 } if the first span is not received , the dependency graph will contain a B - > C dependency , which is obviously wrong . This commit uses an empty node as the tree root for this case instead of using the first server span as the parent .
Lets MergeById.apply accept an Iterable __EoT__ Spark jobs result in iterables . This change allows MergeById to be more conveniently reused .
Exposes property derived MySQL datasource so sparkstreaming can use it __EoT__ The only thing ZipkinMySQLStorageProperties is used for is creating a datasource . This exposes that so that the logic does n't have to be copy pasted into zipkin-sparkstreaming .
Makes storage auto-configuration properties serializable for Spark __EoT__ zipkin-sparkstreaming is best being able to re-use properties here . As jobs have to be serialized across a cluster , the easiest way is to make storage properties objects serializable .
Temporarily disables license plugin on travis __EoT__ See # 1512
Temporarily disables license plugin on travis __EoT__ See # 1512
Adds a date separator for elasticsearch index names __EoT__ Fixes # 1506 Closes # 1507
Set result size when fetching dependency links from ElasticSearch __EoT__ Otherwise it only returns 10 . Fixes # 1503
Fixes bug where UI swallowed the tag value 'false ' __EoT__ Our span panel code had to special case formerly escaped json , as that would become an object at render time . This guards against the same where 'false ' becomes false . ex with this json , the value of `` x-ricebook-normal-request '' was `` false '' , but would render as blank in the UI . It is now fixed . `` ` curl -s localhost:9411/api/v1/spans -H'Content-type : application/json ' -d ' [ { `` traceId '' : `` ddd2fe61b649ff21 '' , `` id '' : `` c0582f5176c78f23 '' , `` name '' : `` servlet '' , `` parentId '' : `` 1def4bb81e274350 '' , `` timestamp '' : 1484924830273035 , `` duration '' : 17920 , `` annotations '' : [ { `` timestamp '' : 1484924830272977 , `` value '' : `` sr '' , `` endpoint '' : { `` serviceName '' : `` contract '' , `` ipv4 '' : `` 10.227.145.181 '' , `` port '' : 8091 } } , { `` timestamp '' : 1484924830290955 , `` value '' : `` ss '' , `` endpoint '' : {
Adds issue template to hopefully reduce the Q/A issues opened __EoT__ Adding an issue template will make what 's appropriate more explicit . The goal here is to set expectations . The text here was modified from OkHttp
Begins migration off Elasticsearch 2.x library ( and Guava ) __EoT__ Currently , our Elasticsearch 2.x dependency makes it impossible to load recent versions of Elasticsearch or Guava . This begins work to migrate off by porting write and health code to not use guava types . See # 1431
Consistently handles fatal errors in catch Throwable blocks __EoT__ I noticed we were n't consistent when catching Throwable .
Polishes release configuration __EoT__
Skips creating dependency links when the serviceName is empty string __EoT__ Sometimes , empty string is sent for endpoint.serviceName . This prevents empty string from showing up in the dependency graph .
do not silently drop subsequent spans missing a parent __EoT__ Currently zipkin models traces as a tree of spans . During the conversation from a list ( or whatever the underlying storage engine uses ) to a tree , spans are dropped if more than one of them is missing a parentId ( it is a `` root '' node ) . This appears to be an unintentional regression ( possibly around 9d8261a33c3adaad9aecd290744b651290c72e24 ) , since the comment still indicate a workaround for this problem : attribute missing parents to root . This is still imperfect , but exposes it to the the user so they can debug the instrumentation problem instead of silently dropping data . Note that the workaround only applies when constructing a tree internally the actual spans returned by the API still have no parentID , and this is what is displayed in the web ui . This problem is alluded to in # 324 , but the thrust of that ticket is modeling asynchronous actions . Highlighting suspect traces is discussed in # 1484 and this condition would be a prime candidate .
Consolidates logic that deals with embedded IPv4 addresses __EoT__ This consolidates logic around mapped or embedded IPv4 addresses , as previously logic was duplicated here and in Brave . See # 1404 See https : //github.com/openzipkin/brave/pull/337
Fixes bad self-tracing configuration resulting in unknown serviceName __EoT__ Fixes # 1486
Kicks out instead of correcting skew on single-host spans __EoT__ An instrumentation glitch can look like clock skew . This kicks out when RPC annotations all belong to the same host . This also backfills tests . See # 1482
Moves off deprecated brave methods __EoT__ This updates to the latest version of Brave and avoids deprecated code .
Switches to release commit user instead of amplifying my commits __EoT__ This switches to a dummy user instead of my email when doing release commits .
Backfills tests for async spans in the dependencies graph __EoT__ This unveiled a small bug left unnoticed .
Update developers section in pom.xml __EoT__ Developers section content is outdated . It is required for publishing to Maven Central so update with Zipkin dev google group info .
Clarifies why we format data in spanPanel.js __EoT__ I found it confusing that we format data both in traceToMustache and spanPanel . This hopefully explains a bit better , and also cleans up some javascript along the way .
Backfills UI tests for annotation and binary annotation value formatting __EoT__ See # 1458
Clock skew correction is not propagated to enclosed local spans __EoT__ Since local spans share the same clock skew as the server they are running on , we need to propagate to children .
Created index for zipkin_annotations , so DEPENDENCIES can run faster __EoT__ Having 238460 rows inside zipkin_annotations , show this benefit : BEFORE -- - ` mysql > explain SELECT ` trace_id_high ` , ` trace_id ` , ` parent_id ` , ` id ` , ` a_key ` , ` endpoint_service_name ` FROM ( select distinct s.trace_id_high , s.trace_id , s.parent_id , s.id , a.a_key , a.endpoint_service_name from zipkin_spans s left outer join zipkin_annotations a on ( s.trace_id = a.trace_id and s.id = a.span_id and a.a_key in ( 'ca ' , 'cs ' , 'sr ' , 'sa ' ) ) where s.start_ts between 1483401600000000 and 1483487999999999 group by s.trace_id_high , s.trace_id , s.id , a.a_key , a.endpoint_service_name ) as link_spans ; | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | | 1 | PRIMARY | < derived2 > | ALL | NULL | NULL | NULL | NULL | 2529761520| | | 2 | DERIVED | s | ALL | start_ts | NULL | NULL | NULL | 94380 | Using where ; Using temporary | | 2 | DERIVED | a | ALL | a_key |
Span timestamp is not correctly correct in case of clock skew . __EoT__ The timestamp of the span is now set to the value of the timestamp of the CS annotation .
Fix NullPointerException when Span.Builder merge other span without i… __EoT__ …nitializing traceIdHigh
show { trace , span } -id in span details pane __EoT__ Placed at the bottom since it is primarily intended as a debugging convenience . ref # 1300 * I 'm not attached to the placement at the bottom , but it was convenient and I think it looks okay . * Passing traceId through the html to get it hack to the js feels a bit wonky , but I could n't find a cleaner approach and it does happen to mirror the current json data format .
Do n't sort span names in elasticsearch __EoT__ While probably not a big contributor to performance , we do n't need to sort span names in elasticsearch as we already copy out into a sorted list . See # 1462
Annotation query can be error prone . __EoT__ With cassandra storage , results from cassandra are intersected with unfiltered traces . The result is that the number of result may vary depending on the limit but would likely to answer no result by default .
Beautify JSON in case of binary annotation value __EoT__ In case JSON is passed as value of binary annotation , the JSON is displayed as one liner . This small fix will ensure that JSON is displayed with correct spacing and indentation level of 4 spaces . The use-case for this is for example passing current thread 's stack trace as JSON value in binary annotation where each stack trace element is element of JSON array . btw : Thanks guys for great work !
add a button to view the raw json of a search query __EoT__ Easy access to the raw json can aid in debugging . Uses the same panel as the per trace json display . ref # 1143
Small fix for ArrayIndexOutOfBoundsException in Buffer class __EoT__ Looks like there is typo , and a char is used instead of an int . This throws ArrayIndexOutOfBoundsException if binary annotation length is greater than 65,535 ( range to char )
Adds ES_MAX_REQUESTS to control maximum in-flight Elasticsearch requests __EoT__ The http client used for Elasticsearch is exclusively for Elasticsearch . However , it was using defaults for web sites , which constrained it to 5 in-flight requests per host . This raises the default to the same as max requests , which is 64 . It also opens ` ES_MAX_REQUESTS ` to adjust that count . The intended behavior is that there will be less contension in a server that is both storing spans and serving api requests . It should also allow higher throughput to the Elasticsearch cluster . Fixes # 1449
construct span name option list using jquery objects __EoT__ The previous method using ad-hoc string templates and concatenation could result in unescaped ` < script > ` tags being executed . ref # 1382
Updates to latest error-prone and fixes issues __EoT__ error-prone now only runs on the main source tree .
Removes bootstrap trace as it increases coupling more than its value __EoT__ The BootstrapTrace feature is a part of self-tracing that relies on a specific brave class . This is partially responsible for people having to create their own main classes . Removing this undoes the coupling with little loss in value ( bootstrap trace was n't that interesting anyway ) .
Adds Span.Builder.clear ( ) __EoT__ Unlike Endpoint , Annotation , etc Span can not be composed without a builder . This makes it possible to reuse the builder which improves straight-line performance quite a bit . `` ` Benchmark Mode Cnt Score Error Units SpanBenchmarks.buildClientOnlySpan thrpt 15 6.088 ± 0.161 ops/us SpanBenchmarks.buildClientOnlySpan_clear thrpt 15 8.080 ± 0.227 ops/us `` `
apply basic size optimizations to js output __EoT__ See : * https : //github.com/webpack/docs/wiki/optimization * http : //webpack.github.io/docs/list-of-plugins.html # uglifyjsplugin for background . All default settings should be safe and license headers preserved . Only applied if ` NODE_ENV=production ` is set ( an apparently common webpack idiom ) so the dev server workflow is unaffected . This reduces the size of the ` min.js ` file from about 2.2 MiB to 821 KiB . ref # 1170
do not use serviceName when linking to trace results __EoT__ 38275c75229bf1941af09d5afacda8fe9ef72073 `` really '' made `` Expand All '' the default way to view a span . However , in practice search results are a popular way to view a span , and they used the ` serviceName ` query parameter to confusingly show only a single service . ref # 1046
cleanup first load events for service/span names __EoT__ During initialization an unconditional ` uiChangeServiceName ` is fired to populate the lists of service and corresponding span names . This had two problematic consequence : * Since there was no service name yet , an http request for spans in the ` undefined ` service was made ( looking `` bad '' in dev tools ) . * On first load we never went back and loaded the span names if no service was selected ( via query parameters or cookies ) . This meant the list of span names would just be `` all '' . These can both be resolved by : * Guarding against span search queries when no service name is set . * Loading the spans names for the first service in the list when no service name is set . ref # 1440 # 1072
really make `` Expand All '' the default view for a trace __EoT__ Previously the default expansion was either : * The ` serviceName ` query parameter , or * A heuristic roughly along the lines of `` the immediate children of the root '' PR # 1326 set the active button to `` Expand All '' . However , to mimic the behavior of actually pressing `` Expand All '' we also need to : * Fire the UI event * Set the filters to active . The interaction with ` serviceName ` and filters ( should a filter be toggled by the query parameter ? ) is not improved . ref # 1046 # 1326
use TestContainers for MySQL tests __EoT__ With this PR we can test schema changes , also later we probably want to test different MySQL versions as well - also possible thanks to TestContainers . It uses an official Zipkin MySQL Docker image by dropping an old schema before we apply a new one .
Uses RetroLambda to get rid of IDE setup and cruft __EoT__ This uses RetroLambda which allows you to use Java 8 source level even if your bytecode level is Java 6 . This makes coding more fun and also obviates IDE setup needed to manage different source levels between main and test code trees . This also moves modules who do n't use Java 8 types back to language level 7 . The same has been in use by zipkin-reporter-java for some time . See https : //github.com/orfjackal/retrolambda Closes # 1256
Allows elasticsearch-http to accept multiple hosts __EoT__ Our first version of elasticsearch-http had a TODO to support multiple base urls . This implements that feature using round-robin DNS . Fixes # 1420 # # Multiple hosts Most users will supply a DNS name that 's mapped to multiple A or AAAA records . For example , ` http : //elasticsearch:9200 ` will use normal host lookups to get the list of IP addresses . You can alternatively supply a list of http base urls . This list is used to recover from failures . Note that all ports must be the same , and the scheme must be http , not https . Here are some examples : * http : //1.1.1.1:9200 , http : //2.2.2.2:9200 * http : //1.1.1.1:9200 , http : // [ 2001 : db8 : :c001 ] :9200 * http : //elasticsearch:9200 , http : //1.2.3.4:9200 * http : //elasticsearch-1:9200 , http : //elasticsearch-2:9200
Add logs button on the trace page . __EoT__ When troubleshooting our system , we often need to check if there were logs . Since a good pratice is to add the trace id to your logs , it seems really natural to have a button to open a link to query your logs with this id . Also , people generally have kibana to search for specific logs ( or at least have a query-able log service ) . The button is deactivated by default ( if you do n't have a log query service or the trace id in the logs ) and it 's simply activated by adding LOGS_URL= '' http : //company.com/logs ? query= { traceId } '' . The traceId will be contextually replaced . Here 's a preview : < img width= '' 1280 '' alt= '' logs button '' src= '' https : //cloud.githubusercontent.com/assets/9842366/20482538/6e35ca66-afed-11e6-90e9-1e28f66d985e.png '' >
Moves ES 5 docker to new base image ; deletes broken transport 5 test __EoT__ This moves the ES 5 docker tests to our new base image , which significantly reduces first-time download size ( particularly helpful for those on slow networks ) . It also deletes the ` ElasticsearchV5TransportTest ` as it will never work since the 2.x protocol is incompatible with 5.x and we can only use one . Finally , it reformats imports so they match the others .
Fix javadoc publish even more . This should n't be that hard . __EoT__
integrate TestContainers __EoT__ to simplify Elasticsearch HTTP testing by starting a Docker container with Elasticsearch
Fixes regression in ZipkinRule when returning all traces __EoT__ When we switched to 128-bit trace ids , we accidentally broke our junit rule . Basically , we were only returning traces who reported timestamps . This fixes the problem ( noticed in Brave ) .
Cautiously writes error when bug found encoding json __EoT__ This adds a more careful message to avoid stack overflowing . fixes # 1406
Adds Elasticsearch 5.x support via storage type : elasticsearch-http __EoT__ This allows use of Elasticsearch 5.x and its notable ingest pipeline feature when using ` zipkin-storage-elasticsearch-http ` . It is important to note that ` zipkin-storage-elasticsearch ` remains pinned to ES 2.x libraries as they are compile incompatible with 5.x . In other words , you must use http if you want to use ES 5 ( for now ) . Version detection is implemented in order to choose the correct index template format for the major version number . The implementation of such is string manip , as it was less work than making a new type . This adds a new parameter ` ES_PIPELINE ` which allows you to manipulate the json sent by Zipkin collector before it is indexed . This could be used for many things including cleaning service names or adding ingest timestamps . Integration tests run version 2.x on CircleCI and 5.x on Travis Fixes # 1312 Fixes # 1318
be more forgiving of IPv4-mapped addresses in json __EoT__ Currently Zipkin checks that all IPv6 addresses are 16 bytes long . However , if an IPv4-mapped addresses such as ` : :ffff:192.168.1.128 ` is given then InetAddress.getByName will return an Inet4Address and the assertion will fail . Instead accept the address , but store it as ipv4 to maintain all existing assertions . This absolves clients of reconciling the nuances of IPv4-mapped addresses in their environments ( for example , in node ` net.isIPv6 ( ' : :ffff:192.168.1.128 ' ) ` is true ) with Java 's .
Limit some ES indexing overhead and document C* limits __EoT__ This removes the explicit mixed-case support in the ES index because it adds overhead . For example , service and span names are downcased prior to storage already . This also limits string indexing to the same as C* : 256 characters or less . This also clarifies the cassandra3 README and backfills a test to make sure we do n't accidentally drop large annotations when we choose to not index them .
Fixes tests not run due to bad naming convention __EoT__
Moves cassandra3 traceId from BigInteger to TraceIdUDT ( high , low ) __EoT__ This moves cassandra3 's schema to high/low which is more precise and allows us more options on how to index by only the low 64-bits of the trace ID . See # 1364
Use span name table instead of materialized view __EoT__ - This switches span name and service name lookups to use a table instead of a materialized view . This change will fix # 1360 - Change limit logic to limit on a set of trace IDs instead of limiting on the provided collection first . In pracitce this did n't make a noticiable difference in the results but it seems like the intended logic . - update stress profiles for new span_name_by_service tables references : - https : //github.com/openzipkin/zipkin/pull/1392 - https : //github.com/openzipkin/zipkin/issues/1360 - https : //github.com/openzipkin/zipkin/pull/1374
Fix javadoc publish __EoT__ Trying to fix JavaDoc publishing , one step at a time .
Zipkin # 1387 - Support for MySQL 5.7 with SQL_MODE=ONLY_FULL_GROUP_BY __EoT__ # # # Summary As documented in # 1387 , this pull request will correct the ambiguous SQL query for MySQL backends . # # # Change This changes the SQL query used to get a list of the traces to one that is now MySQL 5.7 compatible . Previously the query was : `` ` select distinct ` zipkin_spans ` . ` trace_id ` from ` zipkin_spans ` [ ... ] order by ` zipkin_spans ` . ` start_ts ` `` ` This query is ambiguous because it does not specify how to order along the start_ts when there 's multiple records with the same trace_id . It 's now : `` ` select ` zipkin_spans ` . ` trace_id ` , MAX ( ` zipkin_spans ` . ` start_ts ` ) [ ... ] group by ` zipkin_spans ` . ` trace_id ` order by MAX ( ` zipkin_spans ` . ` start_ts ` ) desc limit 10 `` ` This forces MySQL to order along the last start_ts . # # # Testing Done Verified unit tests still succeed [ Travis CI ] ( https :
Use span name table instead of materialized view __EoT__ - This switches span name and service name lookups to use a table instead of a materialized view . This change will fix # 1360 - Change limit logic to limit on a set of trace IDs instead of limiting on the provided collection first . In pracitce this did n't make a noticiable difference in the results but it seems like the intended logic .
Blocking import for gson as we embed it __EoT__
Use span name table instead of materialized view __EoT__ - This switches span name and service name lookups to use a table instead of a materialized view . This change will fix # 1360 - Change limit logic to limit on a set of trace IDs instead of limiting on the provided collection first . In pracitce this did n't make a noticiable difference in the results but it seems like the intended logic .
Adds tests for mixed trace ID length and fixes cassandra3 trace ID codec __EoT__ This adds tests to ensure we can retrieve mixed length trace IDs . Along the way , I noticed the cassandra3 trace ID codec was incorrect . I fixed this , although I hope we can change the model to not use BigInteger in the future . See https : //github.com/openzipkin/zipkin/issues/1364 # issuecomment-257790635
Makes charset explicit in MySQL tables __EoT__ Travis just started failing due to unicode characters not returning . This makes character set explicit in our defaults in case others have the same problem .
Fixes elasticsearch wiring when using AWS and ES_HOSTS __EoT__ Previously , when ` ES_HOSTS ` was used for an Amazon Elasticsearch domain , the following error would result : `` ` There is a circular dependency between 4 beans in the application context : - zipkinHttpCollector defined in file [ /zipkin/BOOT-INF/classes/zipkin/server/ZipkinHttpCollector.class ] - zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageAutoConfiguration ( field zipkin.storage.elasticsearch.InternalElasticsearchClient $ Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageAutoConfiguration.clientBuilder ) - zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration ( field java.util.List zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.networkInterceptors ) - zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageAutoConfiguration ( field java.util.List zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.networkInterceptors ) - awsSignatureVersion4 `` ` This fixes that by unwinding an initialization concern around the OkHttp client used .
Compresses indexes to search based on date expression __EoT__ This adds ` IndexNameFormatter.indexNamePatternsForRange ` which compresses api requests by using wildcard expressions for months or years . For example , if begin is 2016-11-30 and end is 2017-01-02 , the result will be 2016-11-30 , 2016-12-* , 2017-01-01 and 2017-01-02 as opposed to a set of > 30 individual index names . As a side effect , we no longer need special http configuration as we wo n't create request lines larger than 4096 on account of index names . Fixes # 1327 Obviates # 1371
Hard limits ES queries to not look back earlier than ES support was added __EoT__ See # 1327
Fix annotation query parsing __EoT__ The current annotation query parser only returns value if a value contains an '= ' sign . Fixed the parser to return the complete value even if they are '= ' sign in the value . Fixes # 1366
Logs 128-bit trace id when performing dependency links __EoT__ Before this change , if you had dependency linking on debug , you would not see the full 128-bit trace id of a span , rather only the lower 64 bits . This changes the intermediate ( internal ) data structure to include all 128-bits eventhough it is only used for logging . Here 's an example log statement from mysql which shows the full 128-bit trace id ( from zipkin-go-opentracing ) `` ` 2016-10-27 09:17:41.386 DEBUG 71778 -- - [ nio-9411-exec-5 ] zipkin.internal.DependencyLinker : processing { `` traceId '' : `` 2a37dcbdce40ff1504dfda00aa3c56c8 '' , `` parentId '' : `` 21f4093f4461b7d2 '' , `` id '' : `` 303945bf02164b0d '' , `` kind '' : `` SERVER '' , `` service '' : `` svc2 '' , `` peerService '' : `` svc1 '' } 2016-10-27 09:17:41.386 DEBUG 71778 -- - [ nio-9411-exec-5 ] zipkin.internal.DependencyLinker : incrementing link svc1 - > svc2 `` `
Fixes bad high port read on Elasticsearch __EoT__ We had a bug fixed only in the normal json codec around high ports . This backfills tests to make sure it does n't arise again . Thanks to @ nollbit for finding this ! Fixes # 1350
Disables cassandra in travis to avoid perpetual build fail __EoT__ Cassandra recently started crashing only in Travis ( not CircleCI ) . This removes cassandra from travis so that it does n't keep breaking the build . fixes # 1356
When a LazyCloseable delegates to a Closeable , prefer default close ( ) __EoT__ ` LazyCloseable.close ( ) ` is not final as there 's no requirement that its delegate implements Closeable ( ex it could just have a ` shutdown ( ) ` method . Due to copy/pasta , we redudantly did the same thing in a subtype . Thanks to @ autoletics for pointing out this possibility .
Adds an example to Endpoint.port note __EoT__ This adds a code example to Endpoint.port javadoc to help explain what the watch for negatives comment was about . Fixes # 1350
Reference current class for UI properties __EoT__ The UI properties are mapped to ZipkinUiProperties now , and this will help people find where they are used when searching the code .
Tests elasticsearch network interceptor wiring more explicitly __EoT__
Unwinds elasticsearch-http configuration by using List < Interceptor > __EoT__ Before , we had to pass around more state in order to set OkHttp interceptors used in elasticsearch ( ex AWS authentication ) . This injects ` List < Interceptor > ` so that the process is a bit easier .
Merging in release instructions from openfeign/feign __EoT__ openfeign/feign did a 1-up . Now , we 're even .
Updates to latest Datastax Cassandra driver __EoT__ https : //github.com/datastax/java-driver/tree/3.1.1/changelog # 311
Fixes missing CORS config __EoT__ We forgot one of the endpoints when adding CORS config . With this change zipkin-js can send spans directly to Zipkin via HTTP . See # 1234
README broken link __EoT__ Fixes the link to the storage-elasticsearch component from the elasticsearch-http README .
Rewrites elasticsearch-http as an OkHttp client __EoT__ This does the following : - reduces dependency lockup by relying on okhttp and moshi vs specific versions of apachehc , guava and gson - allows self-tracing to work by using brave instrumented interceptors
Defaults UI to expand all __EoT__ Routinely , we ask users to click `` Expand All '' when they are having trouble with the UI . This sometimes is the only thing they need to do . The default to `` Collapse All '' optimizes for very large traces , but we've no history of what a good number would be ( or even a nice place to code that number ) . Also , we 've never heard anyone defend the `` Collapse All '' default despite multiple complaints asking to change it . This changes the default trace view to expand all traces , optimizing for those who are starting with Zipkin or have traces that are n't huge . The impact is that those who have huge traces might want to click `` Collapse All '' and/or report back or raise a pull request to have an appropriate behavior with a default backed up by some user experience . Fixes # 1046
Adds Endpoint.toString in json form __EoT__ This is helpful for debugging instrumentation , particularly their local endpoints . See https : //github.com/openzipkin/brave/pull/245
README polish __EoT__ Use relative links instead of absolute links where possible . Fix some broken links in the READMEs .
Fixes self-tracing of storage component __EoT__ There were some typos and a missing test around storage self-tracing . This plugs the hole and tidies related things .
Cleans up InternalElasticsearchClient and fixes aggregation bug __EoT__ This cleans up InternalElasticsearchClient in preparation of Elasticsearch 5 work . Formerly , the client implementation was required to search the response of a request for specific paths of aggregation bucket keys . This required an intermediary to allow the same response to be read for two paths . Since implementations are trusted , the change is that we search for `` any '' bucket keys . This is simpler to test and requires less coordination . On that note , there was a bug in the aggregation logic , where annotation aggregations were n't treated as nested . This fixes the bug and rewrites the test to expose it in the future . In order to plug-in a different span indexer , I needed to re-organize that code . Now , there 's a BulkSpanIndexer type which can be exteded as needed . See # 1312
Use relative links in README __EoT__ The link to Zipkin core 's directory path was incorrect as it contained an extraneous ` /io ` in it . It was also an absolute link which is more fragile . This changes it to a relative link to the correct directory . See : [ Relative links in READMEs ] ( https : //help.github.com/articles/relative-links-in-readmes/ )
Fixes thread safety issues and improves health checks on elasticsearch __EoT__ This fixes a thread-safety concern raised by @ sethp-jive on AWS signing . It also improves health check by not wrapping exceptions . This will allow users to troubleshoot the system easier . Finally , this throws on misconfigured credentials vs swallowing the exception . This will help people use health checks also , as it makes this configuration error visible without enabling debug logging . See # 1310
Deprecates Endpoint.create ( String , int , int ) as it leads to null pointers __EoT__ Multiple people have been bitten by ` Endpoint.create ( String , int , int ) ` as ` Endpoint.port ` is nullable . This deprecates that method and advises to use a better documented builder method or simply ` Endpoint.toBuilder ( ) ` when copying an endpoint .
Makes it possible to display annotations who are a json value __EoT__ Tested by making an annotation have a json value ! [ screen shot 2016-09-20 at 9 58 26 am ] ( https : //cloud.githubusercontent.com/assets/64215/18660490/4e3a7a3e-7f43-11e6-975d-76dbc06b791d.png ) See https : //github.com/uber/jaeger-client-go/pull/42/files # diff-0c86eb97f3a2f8a9893cb60c27e21dd7R33 See dfcd6c120436c3a6b341f136dc7c634d78b59f4a
Adds cause to test skip exception __EoT__ When the environment is n't available , we used to log the reason , but not the root cause . @ sethp-jive noticed it is easier to debug new components if we log the cause . This does that ! See https : //github.com/openzipkin/zipkin/pull/1304 # r79512516
Unbreaks ElasticsearchStorage.Builder ; reduces scope of internal client __EoT__ This does a few things to make the recently refactored Elasticsearch component more maintainable : - Unbreaks api changes to ElasticsearchStorage.Builder - This now delegates to InternalElasticsearchClient.Builder - Reduces scope of InternalElasticsearchClient - Removes dependency writes as this is only used in tests - Various small cleanups . See # 1303
storage : introduce elasticsearch client shim __EoT__ In order to support elasticsearch on AWS ( and other *aaS vendors ) that choose not to expose the ES binary protocol , we must have an option for clients to use the native transport or REST . Towards that end , this change refactors the existing storage client interactions behind an interface that can be replaced by a different transport . Almost all the changes were non-functional , with the exception of three methods : - getRawTrace - getServiceNames - getSpanNames Which now use the leinientExpandOpen strategy for their index selection . We anticipate this is a positive change , as skipping unavailable ( or closed ) indexes will at worst present a partial span for the period of time that the index is unavailable , which seems be prefereable to a hard error . Also , when using the same elasticsearch cluster for multiple Zipkin instances ( i.e . running tests + a local development server ) the instances will race to claim the ` zipkin_template ` with a pattern that will match only their indices – so if the tests are run first , then the local server 's indices
Tolerates 128bit trace ids in ZipkinRule __EoT__ See # 1298
Renders client-originated traces in the dependencies diagram __EoT__ Most root spans have uninstrumented clients . This change allows instrumented clients to appear in the dependencies view . Particularly , this looks for a `` cs '' annotation . Fixes # 1288
Qualifies annotation queries against a service __EoT__ This ensures that annotation or binary annotation queries are qualified against a service . This also removes the binary annotation key indexing used in cassandra , but nowhere else . There 's nothing in the api , javadoc or web UI docs that suggest binary annotation key should substitute for annotation value . Removing this indexing halves writes per binary annotation without violating our api contract .
Updates elasticsearch client driver to 2.4 __EoT__ https : //www.elastic.co/guide/en/elasticsearch/reference/current/release-notes-2.4.0.html
Skips indexing of non-string binary annotations in Elasticsearch __EoT__ Fixes # 1239
Removes duration query support from Cassandra 2.2 __EoT__ The duration query is unusable for most people , yet adds load every time a span is written . It is also complicated code that has n't improved much since being written . This removes this feature , punting to cassandra3 which can address the problem more effectively via SASI indexing . Fixes # 1224 Obviates # 1204
Handles RFC 7159 json escaping __EoT__ We accept data that might violate json escaping rules . This escapes any UTF-8 String we accept , even binary annotations . Fixes # 1272
Handles RFC 7159 json escaping __EoT__ We accept data that might violate json escaping rules . This escapes any UTF-8 String we accept , even binary annotations . Fixes # 1272
Fixes regression writing I64 binary annotations __EoT__ Before , we special-cased writing numbers , except we had no tests to cover I64 binary annotations . Eventhough these are niche , they should work !
Fix : pathspec 'gh-pages ' did not match any file ( s ) known to git __EoT__ As seen at https : //travis-ci.org/openzipkin/zipkin/builds/156529896 , javadoc publishing is currently broken . This is an attempt to fix it .
Leniently reads span.annotations and span.binaryAnnotations in UI __EoT__ Before , only some branches of code guarded reads to ` span.annotations ` and ` span.binaryAnnotations ` . This guards the rest . The impact is that we now tolerate json that omits the array fields on empty . Fixes # 1263
Improve javadocs publish __EoT__ As discussed in # 1240 . Plus a little bit of added goodness .
Adds Codec.sizeInBytes and changes json to write fixed-length arrays __EoT__ This adds ` Codec.sizeInBytes ( Span ) ` , which is used to pre-allocate a buffer to write the span into . This changes the json encoder to use this approach , which drops its encoding overhead by an order of magnitude : Was : `` ` Benchmark Mode Cnt Score Error Units CodecBenchmarks.writeClientSpan_json_zipkin avgt 15 17.165 ± 0.785 us/op `` ` Now , it is in the same order as thrift : `` ` CodecBenchmarks.writeClientSpan_json_zipkin avgt 15 1.445 ± 0.036 us/op CodecBenchmarks.writeClientSpan_thrift_libthrift avgt 15 1.951 ± 0.014 us/op CodecBenchmarks.writeClientSpan_thrift_zipkin avgt 15 0.433 ± 0.011 us/op CodecBenchmarks.writeLocalSpan_json_zipkin avgt 15 0.813 ± 0.010 us/op CodecBenchmarks.writeLocalSpan_thrift_libthrift avgt 15 1.191 ± 0.016 us/op CodecBenchmarks.writeLocalSpan_thrift_zipkin avgt 15 0.268 ± 0.004 us/op CodecBenchmarks.writeRpcSpan_json_zipkin avgt 15 3.606 ± 0.068 us/op CodecBenchmarks.writeRpcSpan_thrift_libthrift avgt 15 5.134 ± 0.081 us/op CodecBenchmarks.writeRpcSpan_thrift_zipkin avgt 15 1.384 ± 0.078 us/op CodecBenchmarks.writeRpcV6Span_json_zipkin avgt 15 3.912 ± 0.115 us/op CodecBenchmarks.writeRpcV6Span_thrift_libthrift avgt 15 5.488 ± 0.098 us/op CodecBenchmarks.writeRpcV6Span_thrift_zipkin avgt 15 1.323 ± 0.014 us/op `` `
Cuts thrift encoding overhead by allocating the correct sized array __EoT__ This computes the serialized length prior to serializing thrifts . Then , a buffer of exactly the right size is allocated , avoiding growth via rebuffering . The resulting array can be returned directly as it is the correct length . This is the last low-hanging fruit of thrift write optimization , and results in ~4x higher efficiency than typical libthrift usage . `` ` Benchmark Mode Cnt Score Error Units CodecBenchmarks.writeClientSpan_json_zipkin avgt 15 17.165 ± 0.785 us/op CodecBenchmarks.writeClientSpan_thrift_libthrift avgt 15 2.112 ± 0.073 us/op CodecBenchmarks.writeClientSpan_thrift_zipkin avgt 15 0.488 ± 0.026 us/op `` `
Improves thrift encoding performance by special-casing ascii __EoT__ In many cases , annotation values are ascii strings . This special-cases for this , improving thrift encoding performance dramatically . This finally gets encoding overhead of a client span under 1 microsecond ( on `` my laptop '' ) Before : `` ` Benchmark Mode Cnt Score Error Units CodecBenchmarks.writeClientSpan_thrift_zipkin avgt 15 1.029 ± 0.041 us/op CodecBenchmarks.writeLocalSpan_thrift_zipkin avgt 15 0.741 ± 0.108 us/op CodecBenchmarks.writeRpcSpan_thrift_zipkin avgt 15 2.956 ± 0.128 us/op CodecBenchmarks.writeRpcV6Span_thrift_zipkin avgt 15 3.490 ± 0.104 us/op `` ` After : `` ` Benchmark Mode Cnt Score Error Units CodecBenchmarks.writeClientSpan_thrift_zipkin avgt 15 0.779 ± 0.024 us/op CodecBenchmarks.writeLocalSpan_thrift_zipkin avgt 15 0.497 ± 0.026 us/op CodecBenchmarks.writeRpcSpan_thrift_zipkin avgt 15 2.018 ± 0.093 us/op CodecBenchmarks.writeRpcV6Span_thrift_zipkin avgt 15 2.407 ± 0.048 us/op `` `
Changes server README to encourage pre-built artifacts __EoT__ Before this change , the zipkin-server README directed people to build locally . This is not the easiest way to get started , especially on less used environments like Windows and Eclipse . This encourages users to download pre-built jars instead ( similar to the root README ) . See # 1256
Upload javadocs to gh-pages __EoT__ Creates a directory structure that looks like this : `` ` javadoc-builddir/ ├── index.html └── 1.6.1-SNAPSHOT ├── index.html ├── zipkin │ ├── META-INF │ │ └── MANIFEST.MF │ ├── allclasses-frame.html │ ├── allclasses-noframe.html │ ├── constant-values.html │ ├── deprecated-list.html ... `` ` And makes the contents available via GitHub Pages . The URL is , somewhat counter-intuitively , http : //zipkin.io/zipkin/ ( where ` zipkin.io ` is the domain used by all GitHub Pages sites of the ` openzipkin ` org , and ` /zipkin ` is the name of this repo ) . Uploads javadocs only when NOT on a pull request build . Did some testing , and tried to avoid problems , but we might still hit problems around ` git checkout ` , ` git commit ` , and uncommitted files . If all else fails , we can always use a separate clone in , say , ` /tmp ` . ( Also did some research ; there does n't seem to exist a Maven plugin for doing this . )
Fixes package of ImMemoryCollectorMetrics __EoT__ We ca n't break api in a minor , so only choice is to copy the class . Fixes # 1241
Ensures dependencies can be derived when raw spans lack a timestamp __EoT__
Decouples maximum lookback from default lookback __EoT__ This does a number of things to improve performance . QUERY_LOOKBACK prevents the server from having to construct queries that are longer than indexes . This value was used by default which led to a couple major problems . - When looking for performance problems , you are n't usually looking for 7 day old data , and even if you were , it would n't fit into a limit of 10 . Changing to a much smaller amount was requested in # 1210 - Cassandra duration queries convert into lookback/1hr requests . A default of 7 days means 168 requests . This led to most users being unable to use the duration query function . - By changing to 1hr , our 10 trace limit is very likely to apply , and in the case of Cassandra , we will only pull a single bucket . In # 1185 , we know we want to change to daily granularity . By switching lookback to 1 day ( decoupled from the 1hr lookback on traces ) , we better prepare for that change . I also noticed that we document queryLimit to 10
Disables self-tracing by default __EoT__ Fixes # 1200
Adding a TraceKeys constant 'jdbc.query ' __EoT__
Adds SELF_TRACING_SAMPLE_RATE and fixes a C* self-tracing exception __EoT__ Production sites should never run 100 % self-tracing . This adds a parameter to control the rate . This also fixes a mistake where self-tracing could result in a state exception . By logging instead , self-tracing is less dangerous in production .
Adds SCRIBE_ENABLED flag to control whether scribe starts or not __EoT__ Scribe starts over a dozen threads using heap and nonheap memory . By setting ` SCRIBE_ENABLED=false ` , users can recover those resources for productive tasks .
Over-fetches cassandra trace indexes to improve UX and fixes Cassandra index __EoT__ This does two things : - Over-fetches cassandra trace indexes to improve UX and fixes Cassandra index - Restores fix for Cassandra indexes that lost traces in the same millisecond ( # 1153 ) The latter is possible because of recent optimizations including this change . # # New change below : Even when optimized , cassandra indexes will have more rows than distinct ( trace_id , timestamp ) needed to satisfy query requests . This side-effect in most cases is that users get less than ` QueryRequest.limit ` results back . Lacking the ability to do any deduplication server-side , the only opportunity left is to address this client-side . This over-fetches by a multiplier ` CASSANDRA_INDEX_FETCH_MULTIPLIER ` , which defaults to 3 . For example , if a user requests 10 traces , 30 rows are requested from indexes , but only 10 distinct trace ids are queried for span data . To disable this feature , set ` CASSANDRA_INDEX_FETCH_MULTIPLIER=1 ` Fixes # 1142
Adds cassandra index optimization __EoT__ # # # What this does This skips index operations that do n't would n't improve api queries . It does this by only indexing when it would change the gap of a trace 's time interval . For example , a trace that fans out into N spans against the same service will end up with a fixed amount of cassandra inserts as opposed to a function of N. # # # What this does n't do This does n't affect duration indexing , as that 's a tricky part of the code . This also does n't improve anything for single-span traces ( as there 's no redundant indexing ) , # # # How this is configured You can configure this via the [ CassandraStorage ] ( https : //github.com/openzipkin/zipkin/blob/master/zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java ) or by environment variables ( if using zipkin-server ) . - ` CASSANDRA_INDEX_CACHE_MAX ` : Maximum trace index metadata entries to cache . Zero disables caching . Defaults to 100000 . - ` CASSANDRA_INDEX_CACHE_TTL ` : How many seconds to cache index metadata about a trace . Defaults to 60 . # # # When this works best This particularly helps
Clarifies Span.duration as positive ; coerces Span.duration 0 - > null __EoT__ Duration of 0 is confusing to plot and can be misinterpreted as null . Fixes # 1174
Fixes thread safety bug on ES index namer and backfills tests __EoT__ The index namer was using a type that was n't thread-safe . This could cause spans to go into the wrong daily bucket . reported by @ liyichao
Skips Cassandra indexing of zero-duration rows __EoT__ ` QueryRequest.minDuration=0 ` does n't make sense , it expands to traces who have ` Span.duration > = 0 ` . In such case , the query will be faster to remove the duration clause entirely . By constraining this , we can eliminate some busy-work , indexing spans that came in with a dubious duration of zero .
Re-adds tests for query precision __EoT__ This adds everything for 0d51d90a8859450f704e13faea3dee320e4bb080 except the actual schema change . The latter will be re-introduced in a short while .
Documents key indexes , affected by recent code and changes in-flight __EoT__ This documents certain index tables used in Cassandra , particularly those implicated in the more common queries .
Bumps library dependencies __EoT__
Adds error message when Endpoint.ipv4 is n't supplied __EoT__
Resurrects index skipping on core annotations in Cassandra __EoT__ In the old scala implementation , we used to skip `` core annotations '' when performing api queries , and we skipped them on custom indexes like Redis or Cassandra . Skipping very common annotations like `` cs '' results in a lot less storage operations , without affecting meaningful user queries .
Stores raw spans into Cassandra without any modifications __EoT__ Cassandra 's design has an advantage whereas indexing is done separately from span storage . Due to this , we can more accurately record the raw span .
Drops cassandra futures when caching results __EoT__ Drop the connected future so that we do n't hold references to cassandra state for long periods of time .
Extracts DeduplicatingExecutor , preventing redundant Cassandra indexing __EoT__ The previous code had a mechanism to reduce writes to two indexes : ` service_name_index ` and ` service_span_name_index ` . This mechanism would prevent writing the same names multiple times . However , it is only effective on a per-thread basis ( as names were stored in thread locals ) . In practice , this code is invoked at collection , and collectors have many request threads per transport . By changing to a shared loading cache , we can extend the deduplication to all threads . By extracting a class to do this , we can test the edge cases and make it available for future work , such as the other indexes . See # 1142
Highlight spans with errors __EoT__ - Annotations : value must be 'error' - Binary annotations : key must be 'error' - Fixes # 1140 Here 's three screenshots that illustrate the changes : Traces view ( top is transient , bottom is critical ) : ! [ traces ] ( https : //cloud.githubusercontent.com/assets/567900/16543254/88b323de-4099-11e6-8b7c-eca266a5ce74.png ) Trace view ( spans are critical , normal , critical + error annotation , transient ) : ! [ trace ] ( https : //cloud.githubusercontent.com/assets/567900/16543257/8fdc06f8-4099-11e6-9ba5-580c0eafc0d3.png ) Trace modal : ! [ trace-modal ] ( https : //cloud.githubusercontent.com/assets/567900/16543258/976f442a-4099-11e6-8d6f-4dbd0131c622.png ) And the JSON to duplicate : `` ` [ { `` annotations '' : [ { `` endpoint '' : { `` ipv4 '' : `` 10.24.23.10 '' , `` port '' : 9411 , `` serviceName '' : `` zipkin-server '' } , `` timestamp '' : 1466977002899000 , `` value '' : `` sr '' } , { `` endpoint '' : { `` ipv4 '' : `` 10.24.23.10 '' , `` port '' : 9411 , `` serviceName '' : `` zipkin-server '' } , `` timestamp '' : 1466977002908000 , `` value '' : `` ss '' } ] , `` binaryAnnotations '' :
Coerces Span.timestamp to null when zero __EoT__ At the expense of making it impossible to represent a span that started in the first microsecond of Jan 1 , 1970 , we gain index fidelity by working around a common programming mistake .
Fixes Cassandra indexes that lost traces in the same millisecond __EoT__ A schema bug resulted in Cassandra not indexing more than bucket count ( 10 ) trace ids per millisecond+search input . This manifested as less traces retrieved by UI search or Api query than expected . For example , if you had 1000 traces that happened on the same service in the same millisecond , only 10 would return . The indexes affected are ` service_span_name_index ` , ` service_name_index ` and ` annotations_index ` and this was a schema-only change . Those with existing zipkin installations should recreate these indexes to solve the problem . Fixes # 1142
Fixes Cassandra indexes that lost traces in the same millisecond __EoT__ A schema bug resulted in Cassandra not indexing more than bucket count ( 10 ) trace ids per millisecond+search input . This manifested as less traces retrieved by UI search or Api query than expected . For example , if you had 1000 traces that happened on the same service in the same millisecond , only 10 would return . The indexes affected are ` service_span_name_index ` , ` service_name_index ` and ` annotations_index ` and this was a schema-only change . Those with existing zipkin installations should recreate these indexes to solve the problem . Fixes # 1142
Fixes NPE when ES aggregations do n't exist yet __EoT__ Reported by @ liangman `` ` 2016-06-28 10:58:14.976 ERROR 44212 -- - [ nio-9431-exec-3 ] o.a.c.c.C. [ . [ . [ / ] . [ dispatcherServlet ] : Servlet.service ( ) for servlet [ dispatcherServlet ] in context with path [ ] threw exception [ Request processing failed ; nested exception is java.lang.NullPointerException ] with root cause java.lang.NullPointerException : null at zipkin.storage.elasticsearch.ElasticsearchSpanStore $ ConvertSpanNameResponse.apply ( ElasticsearchSpanStore.java:310 ) ~ [ zipkin-storage-elasticsearch-1.1.6-SNAPSHOT.jar ! / : na ] at zipkin.storage.elasticsearch.ElasticsearchSpanStore $ ConvertSpanNameResponse.apply ( ElasticsearchSpanStore.java:306 ) ~ [ zipkin-storage-elasticsearch-1.1.6-SNAPSHOT.jar ! / : na ] at com.google.common.util.concurrent.Futures $ 2.apply ( Futures.java:760 ) ~ [ guava-18.0.jar ! / : na ] at com.google.common.util.concurrent.Futures $ ChainingListenableFuture.run ( Futures.java:906 ) ~ [ guava-18.0.jar ! / : na ] at com.google.common.util.concurrent.MoreExecutors $ DirectExecutor.execute ( MoreExecutors.java:457 ) ~ [ guava-18.0.jar ! / : na ] at com.google.common.util.concurrent.ExecutionList.executeListener ( ExecutionList.java:156 ) ~ [ guava-18.0.jar ! / : na ] at com.google.common.util.concurrent.ExecutionList.execute ( ExecutionList.java:145 ) ~ [ guava-18.0.jar ! / : na ] at com.google.common.util.concurrent.AbstractFuture.set ( AbstractFuture.java:185 ) ~ [ guava-18.0.jar ! / : na ] at com.google.common.util.concurrent.SettableFuture.set ( SettableFuture.java:53 ) ~ [ guava-18.0.jar ! / : na ] at zipkin.storage.elasticsearch.ElasticFutures $
Expose prometheus compatible metrics on /prometheus __EoT__ We run Zipkin in several kubernetes clusters and thus we need a sane way of collecting the metrics . As Prometheus has all the built-in support for dealing with the moving parts of Kubernetes , it seems like a rational choice . This PR exposes Spring Actuator metrics on ` /prometheus ` using the 0.0.4 version of their text format specified here https : //prometheus.io/docs/instrumenting/exposition_formats/ . Not crazy about the path , but adding new controllers into /metrics/\* seems like more complexity than needed .
Add useful documentation for doing zipkin-ui development __EoT__ I keep forgetting this , and it 's not very easy to discover , so I documented it .
Uses ES bulk api only when there 's more than one span __EoT__ During a test where 100 single-span messages are sent to Kafka at the same time , I noticed only 58-97 of them would end up in storage eventhough all messages parsed properly and no operations failed . After a 100ms/message pause was added , the store rate of this test went to 100 % , so figured it was some sort of state issue . I noticed the code was using Bulk operations regardless of input size , so as a wild guess changed the special-case single-span messages . At least in this test , it raised the success rate to 100 % without any pausing needed . I do n't know why this worked , but it seems sensible to not use bulk apis when there 's no bulk action to perform . I started to write a unit test to validate single-length lists do n't use bulk , but the Mockito involved became too verbose as the Elasticsearch client uses chaining and other patterns that are tedious to mock . Instead , we should make a parallel integration test and apply them to all storage
Permits json null token on nullable fields __EoT__ While conventionally , we omit fields rather than passing them as null , null is valid json and was emitted by at least one tracer . This changes the parser to ignore fields declared like ` `` parentId '' : null ` Fixes # 1130
Makes CASSANDRA_ENSURE_SCHEMA work when schema is absent __EoT__ Our cassandra docker image comes with the schema installed , which hid a bug where we failed to properly guard state 0 ( keyspace did n't exist ) . This fixes the bug and also backfills known upgrade scenarios . Tested on Cassandra 2.1 and 2.2 . Thanks to @ gena01 for reporting
Show errors __EoT__ ( Includes # 1124 because of potential merge conflicts ) This is 3 separate pieces that have 3 commits associated with them : - Show an error when config.json is n't present - Provide mechanisms to show errors if one of the ajax calls loading data fails - Show the user an error when a query fails ( this uses a separate mechanism to ensure that it 's placed in a semantically meaningful way ... a query that fails is something like ` foo==bar ` )
Two separate bugfixes . __EoT__ 1 . Bugfix goToTrace not triggering on other pages than default , creating a malformed url . 2. webpack devproxy only targeted default-page locally , and got resources from upstream api if you attached an external dev-server . The external zipkin-server can now be configured with an environment-variable .
Upgrade finagle , util , ostrich __EoT__ - finagle to ` 5.3.20 ` - ostrich to ` 8.2.9 ` - util to ` 5.3.13 `
Display service name when showing addresses in the span detail element __EoT__ Example screenshot : ! [ image ] ( https : //cloud.githubusercontent.com/assets/3523016/15262008/b0932ef0-192d-11e6-9c11-c5a1f570e745.png ) Why : when a request comes from or goes to uninstrumented service , the instrumented part may log CA/SA annotations that include not only the peer IP address , but also the service name . However , the current UI , while it has a special handing for CA/SA annotations , does not display the service name .
Fixes UI display of json values __EoT__ Before , json in a binary annotation value resulted in the UI displaying ' [ object Object ] ' . This guards and stringifies objects , while leaving primitives alone . Fixes # 1113
Add Gradle support __EoT__ Hi ! Really needs in Gradle on this project . Our team recently migrated to Gradle and we are ca n't build this project automaticly in our CI . Cheers , Andrey .
Code style violation __EoT__ This is not acceptable in a serious environment . Methods must start with lower case letters .
Bearer Authentication __EoT__ Started using this lib and really liked , but it was missing bearer authentication ( need for my project ) . Added support to it .
Invalid URL transformation after version 1.4.7 __EoT__ Our API has endpoints like ` < endpoint > /get_data/ < slug > ` Where slug = ` < sportname > % 2f < title > ` for eg . **football % 2fronaldo-scores-a-goal** ` % 2f is html form of / ` The library was working for us up to version 1.4.6 . BUT after upgrading to version 1.4.7 the slug gets auto converted to **football/ronaldo-scores-a-goal** So , something got triggered in version 1.4.7 converting % 2f to / I am trying to figure out the same by reading the commits in tag 1.4.7 BTW this link is not working ( https : //github.com/loopj/android-async-http/commits1.4.7 ) Also , we will need a API to disable this transformation . If that ca n't be done , I will need to maintain a fork of this project as a upstream . As well , kudos for the good work . Thanks
HEAD request downloads body __EoT__ I 'm using this code : `` ` java downloader.head ( myUrl , new AsyncHttpResponseHandler ( ) { @ Override public void onSuccess ( int statusCode , Header [ ] headers , byte [ ] responseBody ) { for ( Header header : headers ) { if ( header.getName ( ) .equals ( `` Content-Length '' ) ) { Log.d ( `` FileSize '' , header.getValue ( ) ) ; } } } @ Override public void onFailure ( int statusCode , Header [ ] headers , byte [ ] responseBody , Throwable error ) { } } ) ; `` ` ` responseBody ` is ` null ` as expected when done , but in a fact client dowloads it and i can see it in logs : ` Progress 2546211 from 11563942 ( 22 % ) `
New Android 5.1 Deprecated classes which could affect on the library in future __EoT__ > The org.apache.http classes and the AndroidHttpClient class have been deprecated in Android 5.1 . This is from the new Android 5.1 APIs update . https : //developer.android.com/about/versions/android-5.1.html # http
Which request callback __EoT__ More like a question then an issue . If I fire 3 identical requests with same callbacks , in onSuccess or onFailure , any way to know which request callback it is ? I though of saving RequestHandle somewhere and checking it in onSuccess , can I get current RequestHandle in onSuccess somehow ?
Cancel request by TAG __EoT__ I think it would be a good feature for manage queries workflow . Just like in picasso project .
Cancel request by TAG __EoT__ I think it would be a good feature for manage queries workflow . Just like in picasso project .
null ResponseHandlerInterface parameter in post method causes app to crash __EoT__ It worked well on 1.4.3
List params not formatted correctly while generating URL __EoT__ This code https : //github.com/loopj/android-async-http/blob/1.4.7/library/src/main/java/com/loopj/android/http/RequestParams.java # L656 contradicts with the examples mentioned here http : //loopj.com/android-async-http/doc/com/loopj/android/http/RequestParams.html For ex . `` ` java List < String > list = new ArrayList < String > ( ) ; // Ordered collection list.add ( `` Java '' ) ; list.add ( `` C '' ) ; params.put ( `` languages '' , list ) ; // url params : `` languages [ ] =Java & languages [ ] =C '' String [ ] colors = { `` blue '' , `` yellow '' } ; // Ordered collection params.put ( `` colors '' , colors ) ; // url params : `` colors [ ] =blue & colors [ ] =yellow '' `` ` Actually generates the following URL params `` ` // url params : `` languages [ 0 ] =Java & languages [ 1 ] =C '' // url params : `` colors [ 0 ] =blue & languages [ 1 ] =yellow '' `` `
Update Documentation for `` onProgress '' __EoT__ Just wasted a couple hours because its everywhere documented as ( int , int ) though its actually ( long , long ) since https : //github.com/loopj/android-async-http/commit/f4db52c68a15c4c387f2a1781f1b9a788497a8b3 .
SaxAsyncHttpResponseHandler - onFailure falls back to onSuccess __EoT__ Unless I 'm very mistaken , I do n't think this is an intended behaviour and line 147 should point to ` onFailure ` . [ SaxAsyncHttpResponseHandler:144-148 ] ( https : //github.com/loopj/android-async-http/blob/master/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java # L147 ) : `` ` java @ Override public void onFailure ( int statusCode , Header [ ] headers , byte [ ] responseBody , Throwable error ) { onSuccess ( statusCode , headers , handler ) ; } `` ` -- - On a related note - what would be the correct way to stop the SAX processing ? Throwing an Exception does the trick but afterwards goes to ` onSuccess ( ) ` . Can I force it to go to ` onFailure ( ) ` ?
Doc clarification __EoT__ The docs for ` RequestHandle # cancel ( boolean ) ` state : > After this method returns , subsequent calls to isDone ( ) will always return true . Subsequent calls to isCancelled ( ) will always return true if this method returned true . If ` cancel ` returns false , will subsequent calls to ` isDone ( ) ` still return true ? It seems like they should not , but the docs suggest they would .
Content_Type Error when using HttpEntity __EoT__ this update : https : //github.com/loopj/android-async-http/commit/8f396c883d63d5c0db6ec4f36a063c21f635690f 这个修改会导致：如果用户没有设置HttpEntity的ContentType , 最终请求中就没有ContentType , 从而出错。 请改成： i 'm sorry about my English . If user did n't set ContentType in HttpEntity , this update will cause no ContentType in HttpRequest Header . please fix it like this : `` ` java if ( contentType ! = null ) { if ( uriRequest instanceof HttpEntityEnclosingRequestBase & & ( ( HttpEntityEnclosingRequestBase ) uriRequest ) .getEntity ( ) ! = null & & uriRequest.containsHeader ( HEADER_CONTENT_TYPE ) ) { Log.w ( LOG_TAG , `` Passed contentType will be ignored because HttpEntity sets content type '' ) ; } else { uriRequest.setHeader ( HEADER_CONTENT_TYPE , contentType ) ; } } `` `
onProgress - overflow totalBytes __EoT__ Try to download a big movie file using this `` ` handle = httpClient.get ( context , movie.getMovieUrl ( ) , new RangeFileAsyncHttpResponseHandler ( file ) { ... @ Override public void onProgress ( int downloadedBytes , int totalBytes ) { ... } `` ` Content-Length : 2,330,725,695 bytes . Since max int = 2,147,483,647 , totalBytes got overflown and return me a negative number .
how to set contenttype to multipart/form-data __EoT__ hello , my server 's contenttype must be multipart/form-data , how to make contenttype be multipart/form-data , I do n't know whether ` params.put ( `` avatar '' , mAvatarInputStream , `` avatar '' , `` multipart/form-data '' ) ; ` can work , please help me , thanks in advance .
no retry when coming out of Airplane mode ( UnknownHostException on first retry ) __EoT__ I have an plain old AsynHttpCLient : `` ` asyncHttpClient.setUserAgent ( platform.getUserAgentString ( ) ) ; asyncHttpClient.setMaxConnections ( 2 ) ; asyncHttpClient.setTimeout ( THIRTY_SECONDS ) ; asyncHttpClient.setMaxRetriesAndTimeout ( 3 , THIRTY_SECONDS ) ; `` ` We have a case where a bluetooth scan triggers a http request right after coming from Airplane mode . This request should be retried since the phone is just connecting to the WIFI again or to cellular . It does not retry because of AsyncHttpRequest:184 : `` ` while ( retry ) { try { makeRequest ( ) ; return ; } catch ( UnknownHostException e ) { // switching between WI-FI and mobile data networks can cause a retry which then results in an UnknownHostException // while the WI-FI is initialising . The retry logic will be invoked here , if this is NOT the first retry // ( to assist in genuine cases of unknown host ) which seems better than outright failure cause = new IOException ( `` UnknownHostException exception : `` + e.getMessage ( ) ) ; retry = ( executionCount > 0 ) & &
Maybe a Dirty Reads thread bug in AsyncHttpClient __EoT__ I 'm inexperienced on thread , but maybe this is a Dirty Reads bug . line 1187 in ` com.loopj.android.http.AsyncHttpClient.sendRequest ( DefaultHttpClient client , HttpContext httpContext , HttpUriRequest uriRequest , String contentType , ResponseHandlerInterface responseHandler , Context context ) ` : `` ` java if ( context ! = null ) { // Add request to request map List < RequestHandle > requestList = requestMap.get ( context ) ; synchronized ( requestMap ) { if ( requestList == null ) { requestList = Collections.synchronizedList ( new LinkedList < RequestHandle > ( ) ) ; requestMap.put ( context , requestList ) ; } } requestList.add ( requestHandle ) ; ... } `` ` After this sequence : | Thread A | Thread B | | -- - | -- - | | map.get ( x ) ==null | | | | map.get ( x ) ==null | | | map.put ( x , listB ) | | map.put ( x , listA ) | | | | listB.add ( sth2 ) | | listA.add ( sth1 ) | | listB and sth2 are lost . I think ` requestMap = Collections.synchronizedMap (
Added support request params for http delete for send request . __EoT__ Support request params for http delete for send request .
NullPointerException at sample application 'Resume Download ' __EoT__ When i run the sample application on my mobile phone , click the item ' Resume Download ' then click the button 'Run ' , throws NullPointerException at the FileAsyncHttpResponseHandler construction , `` ` public FileAsyncHttpResponseHandler ( File file , boolean append ) { super ( ) ; AssertUtils.asserts ( file ! = null , `` File passed into FileAsyncHttpResponseHandler constructor must not be null '' ) ; AssertUtils.asserts ( getTargetFile ( ) .getParentFile ( ) .mkdirs ( ) , `` Can not create parent directories for requested File location '' ) ; this.mFile = file ; this.append = append ; } `` ` This line ` AssertUtils.asserts ( getTargetFile ( ) .getParentFile ( ) .mkdirs ( ) , `` Can not create parent directories for requested File location '' ) ; ` getTargetFile ( ) returns null
Save Downloaded File into SubFolder of Folder __EoT__ When I download file with FileAsyncHttpResponseHandler and I set File path Environment.getExternalStorageDirectory ( ) .getAbsolutePath ( ) + '' /File/ '' , Everything is ok , But I set Folder to save downloaded file Environment.getExternalStorageDirectory ( ) .getAbsolutePath ( ) + '' /File/File2/ '' this state File not found exception fire into onFailure.Sub folder is created before download .
version 1.4.6 : both onCancel and onSuccess are called when request finishes __EoT__ To reproduce : `` ` AsyncHttpClient httpClient = new AsyncHttpClient ( ) ; httpClient.get ( `` www.google.com '' , new DataAsyncHttpResponseHandler ( ) { @ Override public void onSuccess ( int statusCode , Header [ ] headers , byte [ ] responseBody ) { Log.d ( `` TAG '' , `` onSuccess '' ) ; } @ Override public void onFailure ( int statusCode , Header [ ] headers , byte [ ] responseBody , Throwable error ) { Log.d ( `` TAG '' , `` onFailure '' ) ; } } ) ; `` ` If you run the above code you will get the following in the console : `` ` D/AsyncHttpResponseHandler﹕ Request got cancelled D/TAG : onSuccess `` ` It 's because DataAsyncHttpResponseHandler extends AsyncHttpResponseHandler and DataAsyncHttpResponseHandler has `` ` protected static final int PROGRESS_DATA_MESSAGE = 6 ; `` ` but AsyncHttpResponseHandler has `` ` protected static final int CANCEL_MESSAGE = 6 ; `` ` so it is PROGRESS_DATA_MESSAGE being called but because it 's the base class who first runs handleMessage method , it handles PROGRESS_DATA_MESSAGE as a CANCEL_MESSAGE .
Make FileWrapper inside RequestParams serialisable . __EoT__ Any chance for making the < b > FileWrapper < /b > serialisable ? I 've seen a few issues here that were about making RequestParams serialisable , which was done , but the FileWrapper class remained unmarked as implementing < b > Serializable < /b > . I understand this might be something to do with FileNotFound exception handling ? Otherwise it should work fine since File and other members are serialisable .
Crash on cancelling request __EoT__ I 'm not sure if this is a bug or the cancelling method is written intentionally like this . But it was causing crash . See here : http : //stackoverflow.com/q/25666596/1478181
JsonHttpResponseHandler BOM编码 出异常 __EoT__ parseResponse 方法中未处理BOM编码的情况，导致部分json数据无法解析，直接走到failed回调 `` ` java protected Object parseResponse ( byte [ ] responseBody ) throws JSONException { if ( null == responseBody ) return null ; Object result = null ; String jsonString = getResponseString ( responseBody , getCharset ( ) ) ; if ( jsonString ! = null ) { jsonString = jsonString.trim ( ) ; if ( jsonString.startsWith ( `` \ufeff '' ) ) { jsonString = jsonString.substring ( 1 ) ; } if ( jsonString.startsWith ( `` { `` ) || jsonString.startsWith ( `` [ `` ) ) { result = new JSONTokener ( jsonString ) .nextValue ( ) ; } } if ( result == null ) { result = jsonString ; } return result ; } `` `
ConcurrentModificationException on AsyncHttpClient.cancelRequests __EoT__ I just very fast request and cancelRequests . you can get an exception like this : `` ` E/AndroidRuntime ( 11529 ) : FATAL EXCEPTION : Thread-8007 E/AndroidRuntime ( 11529 ) : java.util.ConcurrentModificationException E/AndroidRuntime ( 11529 ) : at java.util.LinkedList $ LinkIterator.next ( LinkedList.java:124 ) E/AndroidRuntime ( 11529 ) : at com.loopj.android.http.AsyncHttpClient $ 4.run ( AsyncHttpClient.java:647 ) E/AndroidRuntime ( 11529 ) : at java.lang.Thread.run ( Thread.java:856 ) `` ` can you help me ?
Bug using strict mode , end not called __EoT__ Meanwhile I 'll use another library `` ` logcat : java.lang.Throwable : Explicit termination method 'end ' not called 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at dalvik.system.CloseGuard.open ( CloseGuard.java:184 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at java.util.zip.Inflater. < init > ( Inflater.java:82 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at java.util.zip.GZIPInputStream. < init > ( GZIPInputStream.java:96 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at java.util.zip.GZIPInputStream. < init > ( GZIPInputStream.java:81 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at com.loopj.android.http.AsyncHttpClient $ InflatingEntity.getContent ( AsyncHttpClient.java:998 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at org.apache.http.conn.BasicManagedEntity.getContent ( BasicManagedEntity.java:100 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at com.loopj.android.http.AsyncHttpResponseHandler.getResponseData ( AsyncHttpResponseHandler.java:451 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at com.loopj.android.http.AsyncHttpResponseHandler.sendResponseMessage ( AsyncHttpResponseHandler.java:436 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at com.loopj.android.http.AsyncHttpRequest.makeRequest ( AsyncHttpRequest.java:78 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at com.loopj.android.http.AsyncHttpRequest.makeRequestWithRetries ( AsyncHttpRequest.java:91 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at com.loopj.android.http.AsyncHttpRequest.run ( AsyncHttpRequest.java:54 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:442 ) 06-15 11:55:13.626 E/StrictMode ( 13373 ) : at java.util.concurrent.FutureTask $ Sync.innerRun ( FutureTask.java:305 ) 06-15
Clear header parameters __EoT__ If I use library on recommended way , so I have a static instance , then how can I remove the latest added header params ? Need the following method : /** \* Remove all header from all requests this client makes ( before sending ) . * */ public void removeHeaders ( ) { clientHeaderMap.clear ( ) ; } What do you think ?
ConcurrentModificationException when cancelling all requests __EoT__ Requests are continuously submitted for a period and it may eventually the process of submitting may be cancelled , as well as the already submitted ones . When the cancelAllRequests is called while submitting , the above exception is raised . I can solve the problem by synchronizing the block where requests are made and the block where cancelAllRequests is called . But maybe this should/could be done in the lib . The relevant stackstrace is : `` ` java.util.ConcurrentModificationException at java.util.LinkedList $ LinkIterator.next ( LinkedList.java:124 ) at com.loopj.android.http.AsyncHttpClient.cancelAllRequests ( AsyncHttpClient.java:583 ) `` ` I 'm using the snapshot 1.4.5-20140329.151824-5 , although the same problem happened with a today 's master build .
NullPointerException in AsyncHttpClient __EoT__ During my app 's development , NullPointerException was run into repeatedly . It happened at line 1179 of AsyncHttpClient : url = url.replace ( `` `` , `` % 20 '' ) ; which got me confused . So has anybody else encountered this problem ? ? ? Here is the snapshot of loggings : ! [ qq20140527171052 ] ( https : //cloud.githubusercontent.com/assets/4122407/3089538/e2054344-e57f-11e3-8f4f-1f443cabc55d.png )
The allowed content-types should add `` image/gif '' in BinaryHttpResponseHandler __EoT__ The BinaryHttpResponseHandler now allows content-types is `` image/jpeg '' , `` image/png '' but I think `` image/gif '' should be supported
fix an exception __EoT__ Fix NetworkonmainthreadException occurs when AsyncHttpRequest.cancel ( true ) is called . `` ` android.os.NetworkOnMainThreadException at android.os.StrictMode $ AndroidBlockGuardPolicy.onNetwork ( StrictMode.java:1117 ) at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close ( OpenSSLSocketImpl.java:908 ) at org.apache.http.impl.SocketHttpClientConnection.shutdown ( SocketHttpClientConnection.java:183 ) at org.apache.http.impl.conn.DefaultClientConnection.shutdown ( DefaultClientConnection.java:150 ) at org.apache.http.impl.conn.AbstractPooledConnAdapter.shutdown ( AbstractPooledConnAdapter.java:169 ) at org.apache.http.impl.conn.AbstractClientConnAdapter.abortConnection ( AbstractClientConnAdapter.java:378 ) at org.apache.http.client.methods.HttpRequestBase.abort ( HttpRequestBase.java:159 ) at com.loopj.android.http.AsyncHttpRequest.cancel ( AsyncHttpRequest.java:170 ) at com.loopj.android.http.RequestHandle.cancel ( RequestHandle.java:32 ) at com.loopj.android.http.AsyncHttpClient.cancelRequests ( AsyncHttpClient.java:565 ) `` `
preemptive authorization __EoT__ first off , thanks for the awesome library . i 've run in to a case where i need to preemptively send basic auth to avoid the extra round trip ( i.e . send request , get 401 , send request with auth header , success ) searching has lead me to other people with the same need : http : //stackoverflow.com/questions/15110497/asynchttpclient-authentication-failed so far the best solution i 've come up with , without modifying loopj , has been to manually set a Authorization header on the AsyncHttpClient . that works fine , and i can live with it . anyway , just thought i 'd file an issue in case it makes sense to add support for something like : `` ` asyncHttpClient.setAuthenticationPreemptive ( true ) `` ` it would of potentially saved me a bit of time trying to figure out what was going wrong and mucking around for a clean solution .
302 redirect issue __EoT__ if server give me a 302 redirect , for example : `` ` HTTP/1.1 302 Found Date : Wed , 05 Mar 2014 17:23:45 GMT Content-Type : text/html ; charset=UTF-8 Content-Length : 0 Connection : keep-alive Location : /t/102665 # reply9 ... `` ` then will cause an automatical redirect , but the library will not remove the # reply9 part.And then it will send the http request like this : `` ` GET http : //www.v2ex.com/t/102665 # reply9 HTTP/1.1 Host : www.v2ex.com Connection : Keep-Alive User-Agent : Mozilla/5.0 ( Linux ; U ; Android 4.2.1 ; en-us ; M040 Build/JOP40D ) AppleWebKit/534.30 ( KHTML , like Gecko ) Version/4.0 Mobile Safari/534.30 ... `` ` I think the part `` GET http : //www.v2ex.com/t/102665 # reply9 HTTP/1.1 '' is abnormal , and it will cause a server error . BTW , I do n't think 302 redirect is an `` onFailure '' , : )
Run on current thread if no looper is present in Async response __EoT__ The implementation before essentially means that you ca n't use this library from short-lived threads . It also starts a looper on a thread not owned by the HTTP library , which is unexpected . 1 ) What it would effectively mean is that if you wanted to make an HTTP request from a short-lived thread , you would never receive a response . The expectation of an Async library is that even if the parent thread dies , you would still receive a response . 2 ) Declaring a looper inside is very problematic and unexpected behavior . The following fix does the following : - If there is a looper present , the runnable will be run on that thread . Thus , for long-lived threads , you can expect the runnable to be executed on the calling thread . - If the looper is not present , the runnable will be run on the current thread ( I assume a thread from the current HTTP thread pool ) .
Added few useful methods __EoT__ Enable put int and long data directly into urlParams Send String response to onFailure if parseResponse ( ) returns String Add cancelAllRequests method
Added few useful methods __EoT__ Enable put int and long data directly into urlParams Send String response to onFailure if parseResponse ( ) returns String Add cancelAllRequests method
Added few useful methods __EoT__ Enable put int and long data directly into urlParams Send String response to onFailure if parseResponse ( ) returns String Add cancelAllRequests method
fixing artifactId for the snapshot build in the readme __EoT__
Add @ Override where needed , fix possible NPE . __EoT__
Define reusable String 's , beautify source a bit . __EoT__
Encoding of the RequestParams __EoT__ Hi , RequestParams use UTF-8 to encode the params : `` ` private HttpEntity createFormEntity ( ) { try { return new UrlEncodedFormEntity ( getParamsList ( ) , HTTP.UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { return null ; // Actually can not happen when using utf-8 } } `` ` I need my data to have a different encoding when sent to the server . Could you allow for a custom encoding in the Params ?
JsonHttpResponseHandler throws NullPointerException when run in loop __EoT__ JsonHttpResponseHandler is throwing a NullPointerException when it is run in a loop . The standard AsyncHttpResponseHandler does not . JsonHttpResponseHandler code : `` ` java public class RefreshLoopTask extends AsyncTask < String , String , String > { @ Override protected String doInBackground ( String ... nothing ) { try { while ( true ) { String url = `` http : //echo.jsontest.com/key/value/one/two '' ; AppRestClient.get ( url , null , new JsonHttpResponseHandler ( ) { @ Override public void onSuccess ( JSONObject res ) { Log.d ( `` logger '' , `` succ - `` + res.toString ( ) ) ; } @ Override public void onFailure ( Throwable e , JSONObject res ) { Log.d ( `` logger '' , `` fail - `` + res.toString ( ) ) ; } @ Override public void onFinish ( ) { Log.d ( `` logger '' , `` finis '' ) ; } } ) ; Thread.sleep ( 5000 ) ; } } catch ( InterruptedException e ) { RefreshLoopTask t = new RefreshLoopTask ( ) ; t.execute ( ) ; } return null ; } } `` ` Log output :
JsonHttpResponseHandler throws NullPointerException when run in loop __EoT__ JsonHttpResponseHandler is throwing a NullPointerException when it is run in a loop . The standard AsyncHttpResponseHandler does not . JsonHttpResponseHandler code : `` ` java public class RefreshLoopTask extends AsyncTask < String , String , String > { @ Override protected String doInBackground ( String ... nothing ) { try { while ( true ) { String url = `` http : //echo.jsontest.com/key/value/one/two '' ; AppRestClient.get ( url , null , new JsonHttpResponseHandler ( ) { @ Override public void onSuccess ( JSONObject res ) { Log.d ( `` logger '' , `` succ - `` + res.toString ( ) ) ; } @ Override public void onFailure ( Throwable e , JSONObject res ) { Log.d ( `` logger '' , `` fail - `` + res.toString ( ) ) ; } @ Override public void onFinish ( ) { Log.d ( `` logger '' , `` finis '' ) ; } } ) ; Thread.sleep ( 5000 ) ; } } catch ( InterruptedException e ) { RefreshLoopTask t = new RefreshLoopTask ( ) ; t.execute ( ) ; } return null ; } } `` ` Log output :
divide by zero - onProgress __EoT__ Sometimes I get this error for unimplemented onProgress : < pre > < code > custom onProgress contains an error java.lang.ArithmeticException : divide by zero at com.loopj.android.http.AsyncHttpResponseHandler.onProgress ( AsyncHttpResponseHandler.java:183 ) at com.loopj.android.http.AsyncHttpResponseHandler.handleMessage ( AsyncHttpResponseHandler.java:286 ) at com.loopj.android.http.AsyncHttpResponseHandler $ ResponderHandler.handleMessage ( AsyncHttpResponseHandler.java:136 ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:137 ) at android.app.ActivityThread.main ( ActivityThread.java:5062 ) at java.lang.reflect.Method.invokeNative ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:515 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:779 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:595 ) at dalvik.system.NativeStart.main ( Native Method ) < /code > < /pre > I fix it in < code > AsyncHttpResponseHandler < /code > < pre > public void onProgress ( int bytesWritten , int totalSize ) { if ( totalSize > 0 ) { Log.d ( LOG_TAG , String.format ( `` Progress % d from % d ( % d ) '' , bytesWritten , totalSize , ( bytesWritten / totalSize ) * 100 ) ) ; } else { Log.d ( LOG_TAG , String.format ( `` Progress % d from UNKNOWN '' , bytesWritten ) ) ; } } < /pre > and < pre > byte [ ] getResponseData ( HttpEntity entity
divide by zero - onProgress __EoT__ Sometimes I get this error for unimplemented onProgress : < pre > < code > custom onProgress contains an error java.lang.ArithmeticException : divide by zero at com.loopj.android.http.AsyncHttpResponseHandler.onProgress ( AsyncHttpResponseHandler.java:183 ) at com.loopj.android.http.AsyncHttpResponseHandler.handleMessage ( AsyncHttpResponseHandler.java:286 ) at com.loopj.android.http.AsyncHttpResponseHandler $ ResponderHandler.handleMessage ( AsyncHttpResponseHandler.java:136 ) at android.os.Handler.dispatchMessage ( Handler.java:102 ) at android.os.Looper.loop ( Looper.java:137 ) at android.app.ActivityThread.main ( ActivityThread.java:5062 ) at java.lang.reflect.Method.invokeNative ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:515 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:779 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:595 ) at dalvik.system.NativeStart.main ( Native Method ) < /code > < /pre > I fix it in < code > AsyncHttpResponseHandler < /code > < pre > public void onProgress ( int bytesWritten , int totalSize ) { if ( totalSize > 0 ) { Log.d ( LOG_TAG , String.format ( `` Progress % d from % d ( % d ) '' , bytesWritten , totalSize , ( bytesWritten / totalSize ) * 100 ) ) ; } else { Log.d ( LOG_TAG , String.format ( `` Progress % d from UNKNOWN '' , bytesWritten ) ) ; } } < /pre > and < pre > byte [ ] getResponseData ( HttpEntity entity
How to match a response with a specific request __EoT__ I 'm using a static AsyncHttpClient as suggested and sending multiple HTTP posts and receiving responses on an anonymous class . The problem is that when a request comes back I do n't know how to tie it back to the original request . For instance , in a caching situation , when I send a post and receive a 200 OK I need to be able to know which request that response is for so I can mark it as successfully sent .
always executed onFailure when file uploading __EoT__ `` ` public void uploadFile ( final AdapterData data , final int positionThread ) { final boolean [ ] fail = { true } ; Photo photo = data.getPhoto ( ) ; String sourceFileUri = photo.getImagePath ( ) ; File sourceFile = new File ( sourceFileUri ) ; if ( ! sourceFile.isFile ( ) ) { activity.runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { Toast.makeText ( activity , getString ( R.string.file_not_found ) , Toast.LENGTH_SHORT ) .show ( ) ; } } ) ; kickFromStack ( data ) ; return ; } RequestParams params = null ; final AsyncHttpClient client = new AsyncHttpClient ( ) ; try { params = new RequestParams ( ) ; params.put ( `` file '' , sourceFile ) ; params.put ( `` date_time '' , String.valueOf ( photo.getDateTime ( ) ) ) ; params.put ( `` image_name '' , photo.getImageName ( ) ) ; params.put ( `` image_type '' , String.valueOf ( photo.getImageType ( ) ) ) ; params.put ( `` latitude '' , String.valueOf ( photo.getGpsLatitudeCoordinate ( ) ) ) ; params.put ( `` longtitude '' , String.valueOf ( photo.getGpsLongitudeCoordinate (
ClientProtocolException on image upload after setting proxy __EoT__ `` ` client.setProxy ( host , port , username , password ) ; RequestParams params = new RequestParams ( ) ; ... ... .. params.put ( `` file '' , new ByteArrayInputStream ( fileContent ) , `` picture.jpg '' , `` image/jpg '' ) ; client.post ( URL , params , new AsyncHttpResponseHandler ( ) { .. .. } `` ` gives the following error `` ` 10-25 20:46:14.179 : W/System.err ( 19762 ) : org.apache.http.client.ClientProtocolException 10-25 20:46:14.234 : W/System.err ( 19762 ) : at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:557 ) 10-25 20:46:14.234 : W/System.err ( 19762 ) : at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:487 ) 10-25 20:46:14.234 : W/System.err ( 19762 ) : at com.loopj.android.http.AsyncHttpRequest.makeRequest ( AsyncHttpRequest.java:72 ) 10-25 20:46:14.234 : W/System.err ( 19762 ) : at com.loopj.android.http.AsyncHttpRequest.makeRequestWithRetries ( AsyncHttpRequest.java:90 ) 10-25 20:46:14.234 : W/System.err ( 19762 ) : at com.loopj.android.http.AsyncHttpRequest.run ( AsyncHttpRequest.java:52 ) 10-25 20:46:14.234 : W/System.err ( 19762 ) : at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:444 ) 10-25 20:46:14.234 : W/System.err ( 19762 ) : at java.util.concurrent.FutureTask $ Sync.innerRun ( FutureTask.java:306 ) 10-25 20:46:14.234 : W/System.err ( 19762 ) : at java.util.concurrent.FutureTask.run ( FutureTask.java:138 ) 10-25 20:46:14.234 : W/System.err ( 19762 ) :
ByteArrayBuffer __EoT__ Why not use `` buffer.toByteArray ( ) '' instead of `` buffer.buffer ( ) '' in line 449 of `` AsyncHttpResponseHandler.java '' ?
Thread creation failed . __EoT__ When pushing thousands of images to download got ` java.lang.OutOfMemoryError : thread creation failed ` ` CachedThreadPool ` could be the cause .
Provide easy way to subclass and implement custom JSON parsing __EoT__ Provide class ( modify JsonHttpResponseHandler ) to easily integrate Jackson JSON , GSON and other libraries in subclass manner .
CalledFromWrongThreadException __EoT__ Hi , i 'm using your latest commit because i need to work with self-signed certificates ( thanks for that feature , finally ! = ) ) Since the upgrade from 1.4.3 , i 'm getting this Exception when i try to hide a View that 's being displayed at onStart ( ) and hidden in onFinish ( ) `` ` Thread [ < 16 > Thread-13769 ] ( Suspended ( exception ViewRootImpl $ CalledFromWrongThreadException ) ) < VM does not provide monitor information > ViewRootImpl.checkThread ( ) line : 5908 ViewRootImpl.requestChildFocus ( View , View ) line : 2765 PhoneWindow $ DecorView ( ViewGroup ) .requestChildFocus ( View , View ) line : 617 ActionBarOverlayLayout ( ViewGroup ) .requestChildFocus ( View , View ) line : 617 FrameLayout ( ViewGroup ) .requestChildFocus ( View , View ) line : 617 ScrollView ( ViewGroup ) .requestChildFocus ( View , View ) line : 617 ScrollView.requestChildFocus ( View , View ) line : 1388 LinearLayout ( ViewGroup ) .requestChildFocus ( View , View ) line : 617 EditText ( View ) .handleFocusGainInternal ( int , Rect ) line : 4412 EditText ( View ) .requestFocusNoSearch ( int , Rect
Proxy Authentication __EoT__ setproxy function should also accept username password if requires
static field in __EoT__ I have a question that why define the `` mAllowedContentTypes '' with **static** modifier at BinaryHttpResponseHandler.java ？
Add upload progress , minimize memory usage and fix failure events __EoT__ Fixes issue 118 in particular , but also 10 , 127 , 154 and possibly others .
null and consequently crash on RetryHandler __EoT__ in `` ` if ( retry ) { // resend all idempotent requests HttpUriRequest currentReq = ( HttpUriRequest ) context.getAttribute ( ExecutionContext.HTTP_REQUEST ) ; String requestType = currentReq.getMethod ( ) ; retry = ! requestType.equals ( `` POST '' ) ; } `` ` currentReq returned is null and so the the currentReq.getMethod ( ) crashs , leaving my application on a blocking state due to the fact that im waiting on the listeners to be invoked . This happens for example if my Device is on Wi-Fi but with no internet connectivity
android-async-http is powerful , can you release it with maven ? __EoT__ Hi , loopj . android-async-http is powerful , can you release it with maven ? you can read this topic as following . https : //docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide # SonatypeOSSMavenRepositoryUsageGuide-7a.1.POMandsettingsconfig
How to set the http request port to another value ? __EoT__ I 'd like to configure the port to another value . I want to set the port to 3000 , but I noticed that this value 80 is hardcoded .
NullPointerException : Status code 204 No Content __EoT__ > java.lang.NullPointerException > at org.json.JSONTokener.nextCleanInternal ( JSONTokener.java:112 ) > at org.json.JSONTokener.nextValue ( JSONTokener.java:90 ) > at com.loopj.android.http.JsonHttpResponseHandler.parseResponse ( JsonHttpResponseHandler.java:81 ) > at com.loopj.android.http.JsonHttpResponseHandler.handleSuccessMessage ( JsonHttpResponseHandler.java:67 ) > at com.loopj.android.http.AsyncHttpResponseHandler.handleMessage ( AsyncHttpResponseHandler.java:173 ) > at com.loopj.android.http.AsyncHttpResponseHandler $ 1.handleMessage ( AsyncHttpResponseHandler.java:85 ) > at android.os.Handler.dispatchMessage ( Handler.java:99 ) > at android.os.Looper.loop ( Looper.java:150 ) > at android.app.ActivityThread.main ( ActivityThread.java:4385 ) > at java.lang.reflect.Method.invokeNative ( Native Method ) > at java.lang.reflect.Method.invoke ( Method.java:507 ) > at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:849 ) > at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:607 ) > at dalvik.system.NativeStart.main ( Native Method )
Can add Basic Auth , but can not remove it __EoT__ There is a mechanism to allow users to add credentials . Added in 1.4.0 . `` ` java /** * Sets basic authentication for the request . Uses AuthScope.ANY . This is the same as * setBasicAuth ( 'username ' , 'password ' , AuthScope.ANY ) * @ param username * @ param password */ public void setBasicAuth ( String user , String pass ) { AuthScope scope = AuthScope.ANY ; setBasicAuth ( user , pass , scope ) ; } /** * Sets basic authentication for the request . You should pass in your AuthScope for security . It should be like this * setBasicAuth ( `` username '' , '' password '' , new AuthScope ( `` host '' , port , AuthScope.ANY_REALM ) ) * @ param username * @ param password * @ param scope - an AuthScope object * */ public void setBasicAuth ( String user , String pass , AuthScope scope ) { UsernamePasswordCredentials credentials = new UsernamePasswordCredentials ( user , pass ) ; this.httpClient.getCredentialsProvider ( ) .setCredentials ( scope , credentials ) ; } `` ` Since the library provides convenience methods
Additional Information in AsyncHttpResponseHandler __EoT__ It 's posible I 'm missing something , but I do n't see anyway to get any additional information bout the request 's response . I 'm specifically needing two things : - **HTTP Status Code in both onSuccess and onError** : Casting the throwable in onError to HttpResponseException will let me call getStatusCode ( ) , but this really is n't the cleanest way to go about it - **Response bodies in onError** : RESTful API 's frequently send back a response message , along with an HTTP error code . **Bonus** : A way to fetch HTTP Response headers in both methods .
org.apache.http.NoHttpResponseException : The target server failed to respond __EoT__ `` ` [ org.apache.http.impl.conn.DefaultResponseParser.parseHead ( DefaultResponseParser.java:85 ) , org.apache.http.impl.io.AbstractMessageParser.parse ( AbstractMessageParser.java:174 ) , org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader ( AbstractHttpClientConnection.java:179 ) , org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader ( DefaultClientConnection.java:235 ) , org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader ( AbstractClientConnAdapter.java:259 ) , org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse ( HttpRequestExecutor.java:279 ) , org.apache.http.protocol.HttpRequestExecutor.execute ( HttpRequestExecutor.java:121 ) , org.apache.http.impl.client.DefaultRequestDirector.execute ( DefaultRequestDirector.java:421 ) , org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:555 ) , org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:487 ) , com.loopj.android.http.AsyncHttpRequest.makeRequest ( AsyncHttpRequest.java:74 ) , com.loopj.android.http.AsyncHttpRequest.makeRequestWithRetries ( AsyncHttpRequest.java:93 ) , com.loopj.android.http.AsyncHttpRequest.run ( AsyncHttpRequest.java:55 ) , java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:444 ) , java.util.concurrent.FutureTask $ Sync.innerRun ( FutureTask.java:306 ) , java.util.concurrent.FutureTask.run ( FutureTask.java:138 ) , java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1088 ) , java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:581 ) , java.lang.Thread.run ( Thread.java:1019 ) ] `` ` From time to time after the upgrade from 1.4.1 to 1.4.2 the emergence org.apache.http.NoHttpResponseException : The target server failed to respond
Could not make POST with file and BasicAuth __EoT__ Trying to make a POST request with file upload to a script which needs basic authentication : `` ` Java RequestParams params = new RequestParams ( ) ; params.put ( `` image '' , new ByteArrayInputStream ( data ) , `` picture.jpg '' , `` image/jpg '' ) ; AsyncHttpClient client = new AsyncHttpClient ( ) ; client.setBasicAuth ( `` guest '' , '' password '' ) ; client.post ( `` http : //example.com/auth/image.php '' , params , new AsyncHttpResponseHandler ( ) { ... } ) ; `` ` I 'm getting this error : `` ` 08-26 13:46:13.242 : W/System.err ( 7116 ) : org.apache.http.client.ClientProtocolException 08-26 13:46:13.277 : W/System.err ( 7116 ) : at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:557 ) 08-26 13:46:13.277 : W/System.err ( 7116 ) : at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:487 ) 08-26 13:46:13.277 : W/System.err ( 7116 ) : at com.loopj.android.http.AsyncHttpRequest.makeRequest ( AsyncHttpRequest.java:73 ) 08-26 13:46:13.277 : W/System.err ( 7116 ) : at com.loopj.android.http.AsyncHttpRequest.makeRequestWithRetries ( AsyncHttpRequest.java:92 ) 08-26 13:46:13.277 : W/System.err ( 7116 ) : at com.loopj.android.http.AsyncHttpRequest.run ( AsyncHttpRequest.java:54 ) 08-26 13:46:13.277 : W/System.err ( 7116 ) : at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:444 ) 08-26 13:46:13.277 : W/System.err (
AsyncHttpClient : added setMaxRetries method ; __EoT__ fixed a typo ; sry for the noise . it just bothered me . I see no reason not to expose this functionality . especially on wireless , connections you may want to limit or increase the number of retry attempts . https : //github.com/loopj/android-async-http/issues/29 cheers
Add CookieViewView __EoT__ Extension to Android VideoView . Adding session cookie header to request .
Response string charset option __EoT__ The XML response of the web service I need is encoded in ISO-8859-1 . I experienced false characters with no way for me to handle or convert the response string properly since UTF-8 is hardcoded . The charset has to be set when the response string is built . I simply added a class variable for the charset to the AsyncHttpResponseHandler . The default is still UTF-8 , but now there 's an option to set the charset via a setter . I did not add another constructor with a charset-string as a parameter ( yet ? ) to keep it simple .
Update AsyncHttpResponseHandler.java __EoT__ stop forward when run into exception .
added POST method using HttpEntity parameters __EoT__
Fix crash in RetryHandler __EoT__ It is possible for context.getAttribute ( ... ) to return null , so we have to check currentReq before we call getMethod ( ) on it . Without this fix the HttpClient seems to hang forever and onFinish ( ) is never called in the AsyncHttpHandlers .
Support request params during http delete request __EoT__ I found there was hard to add request params during using http delete method , so I added it . I have tested and pass on my requirement scenario . Thank you .
Add a method for setting the proxy __EoT__ `` ` /** * Sets the Proxy * @ param hostname the hostname ( IP or DNS我· name ) * @ param port the port number . -1 indicates the scheme default port . */ public void setProxy ( String hostname , int port ) { final HttpHost proxy = new HttpHost ( hostname , port ) ; final HttpParams httpParams = this.httpClient.getParams ( ) ; httpParams.setParameter ( ConnRoutePNames.DEFAULT_PROXY , proxy ) ; } `` ` Usage : `` ` AsyncHttpClient client = new AsyncHttpClient ( ) ; client.setProxy ( `` 10.0.0.172 '' ,80 ) ; client.get ( `` http : //www.google.com '' , new AsyncHttpResponseHandler ( ) { @ Override public void onSuccess ( String response ) { System.out.println ( response ) ; } } ) ; `` `
Not following redirects __EoT__ Thanks for the great project ! This pull request also fixes this issue : https : //github.com/loopj/android-async-http/issues/145 Had to do it , as auto following redirects really screws up my current 's app workflow . Followed the suggestion from [ this ] ( http : //stackoverflow.com/a/1354387/113507 ) thread , and it works perfectly ( 300s will trigger failures ) . Cheers , - Daniel
added HEAD request capabilities __EoT__ addresses issue https : //github.com/loopj/android-async-http/issues/146 sample : added to TwitterRestClient as seen in the [ docs ] ( http : //loopj.com/android-async-http/ ) : `` ` java import com.loopj.android.http . * ; public class TwitterRestClient { private static final String BASE_URL = `` http : //api.twitter.com/1/ '' ; private static AsyncHttpClient client = new AsyncHttpClient ( ) ; // //new public static void head ( final String url , final RequestParams params , final AsyncHttpResponseHandler responseHandler ) { client.head ( getAbsoluteUrl ( url ) , params , responseHandler ) ; } //new // public static void get ( String url , RequestParams params , AsyncHttpResponseHandler responseHandler ) { client.get ( getAbsoluteUrl ( url ) , params , responseHandler ) ; } public static void post ( String url , RequestParams params , AsyncHttpResponseHandler responseHandler ) { client.post ( getAbsoluteUrl ( url ) , params , responseHandler ) ; } private static String getAbsoluteUrl ( String relativeUrl ) { return BASE_URL + relativeUrl ; } } `` ` usage : `` ` java TwitterRestClient.head ( `` statuses/public_timeline.json '' , null , new AsyncHttpResponseHandler ( ) { @ Override public void onSuccess ( int statusCode , Header [
add new catch statement for ConnectTimeoutException __EoT__ Currently when ConnectTimeoutException happened , it will just throw it and caller can not get this from responseHandler . I just added a new Catch statement to catch the ConnectTimeoutException so that the caller can get more specific error message .
Adding FileAsyncHttpResponseHandler __EoT__ Hi , I ran into issues when I tried to download big files ( mp3 files ) . The request stopped in the middle of the download , probably because of a OutOfMemoryError . The files had size over 12Mo . To fix this bug , I created a FileAsyncHttpResponseHandler . This handler writes directly the body of the request in a file specified by the class constructor . Like this , the ram is n't overloaded . I based my class on the BinaryAsyncHttpResponseHandler 's file . Hope it will help !
Update the sendResponseMessage with a protected modifier and fix a spelling error . __EoT__ Planning on using this library for a larger project and may be submitting more patches in the future . Just wanted to get this small fix in and see how it goes . I updated the sendResponseMessage with the protected modifier so subclasses could override it 's functionality . Basically a few of us are running into a situation where we need access to the raw HttpResponse object to get at the response headers and status code . If we can override this method we can subclass AsyncHttpResponseHandler and get at those values .
Overloaded RequestParams.put ( ) method for adding integer param __EoT__ Hi , There is no put ( ) method for adding integer param without casting it to string before passing as an argument to ` put ( String arg0 , String arg1 ) ` It would be much easier to pass straight integer value . Before : ` put ( `` ParamName '' , String.valueOf ( 1234 ) ) ; ` After : ` put ( `` ParamName '' , 1234 ) ; ` Patch attached .
code logic error in PersistentCookieStore __EoT__ in method `` public void clear ( ) { } '' of class PersistentCookieStore , the code `` cookies.clear ( ) ; '' should be placed in the end of the method . otherwise the cookies in cookiePrefs wo n't be cleared .
Add protected access modifier to fields in SyncHttpClient __EoT__ I 'm working on a project where I need to extend and override some of the methods in the SyncHttpClient class . The _result_ field and the _responseHandler_ field are not accessible to my child class because the access modifiers are private and default , respectively . For now , I 've modified my local copy of your project to change both to protected so that extending classes can use them . Please make a simple mod to the SyncHttpClient class : `` ` java protected String result ; protected AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler ( ) { ... } `` `
Response headers __EoT__ Cleanup of old pull request https : //github.com/loopj/android-async-http/pull/160 . Added response headers to onSuccess ( in a backwards compatible fashion ) for those that need them .
typo on sample Twitter Client code __EoT__ https : //github.com/loopj/android-async-http/blob/master/examples/TwitterRestClient.java both call client.get
Bug with onFailure at JsonHttpResponseHandler __EoT__ I think there are a bug at line 104 of JsonHttpResponseHandler.java . At this line calls the deprecated version of onFailure method ( with only one parameter ) and this force you to override this 3 methods : public void onFailure ( Throwable e , JSONObject errorResponse ) { } public void onFailure ( Throwable e , JSONArray errorResponse ) { } and public void onFailure ( Throwable error ) { } when you want to use JsonHttpResponseHandler instead of only two . Thanks .
Idemponent requests should be checked before whilte list in the RetryHandler __EoT__ Currently if an exception was thrown in the white list , event it 's a post request , the client still retry to re-post that request . It happens when SocketTimeoutException occurs . < pre > if ( executionCount > maxRetries ) { // Do not retry if over max retry count retry = false ; } else if ( exceptionBlacklist.contains ( exception.getClass ( ) ) ) { // immediately cancel retry if the error is blacklisted retry = false ; } else if ( exceptionWhitelist.contains ( exception.getClass ( ) ) ) { // immediately retry if error is whitelisted retry = true ; } else if ( ! sent ) { // for most other errors , retry only if request has n't been fully // sent yet retry = true ; } else { // resend all idempotent requests HttpUriRequest currentReq = ( HttpUriRequest ) context.getAttribute ( ExecutionContext.HTTP_REQUEST ) ; String requestType = currentReq.getMethod ( ) ; retry = ( ! requestType.equals ( `` POST '' ) ) ; } < /pre > The code above should be changed into this < pre > if (
onFailure getting called twice while using JsonHttpResponseHandler __EoT__ My onFailure method is getting called twice when I get a ConnectException . Looking at the code , it looks like this is because : In JsonHttpResponseHandler:92 super.handleFailureMessage ( e , responseBody ) calls onFailure ( Throwable error , String content ) And also further down , In JsonHttpResponseHandler:102 , 105 calls onFailure ( Throwable error , String content ) explicitly . Ideally , onFailure should be called only once . May be JsonHttpResponseHandler : handleFailureMessage ( ) need not call the super method . Please fix . Or shall I submit a patch ?
Remove trailing slash from site URL __EoT__ # # Motivation ( required ) Since # 2218 links to CSS and secondary pages were broken due to the trailing slash . This removes it and also removes the cdn_url config as having the primary url pointing to facebook.github.io meant the frescolib.org domain disappeared for subsequent pages . # # Test Plan ( required ) Running jekyll locally .
Fix site after enabling SSL __EoT__ Thanks for submitting a PR ! Please read these instructions carefully : - [ X ] Explain the **motivation** for making this change . - [ X ] Provide a **test plan** demonstrating that the code is solid . - [ X ] Match the **code formatting** of the rest of the codebase . - [ X ] Target the ` master ` branch # # Motivation ( required ) Fix website # # Test Plan ( required ) Eyes
Do not cache unknown format images to EncodedMemoryCache __EoT__ # # Motivation optimize # 1413 # 675 BUG reproduce step： 1. connect to a Portal WiFi , we got a HTTP 200 code and html response . fresco cache the data to EncodedMemoryCache 2. user login the wifi or change to another connectable WIFI and enter the page again , the image still can not be load success due to the wrong memory cache hit . 3. user must restart the app or browse other more pictures to trim the corrupt data from memory cache , then it will restore to normal status . To optimize the user experience , we should not cache the unknown image format data to EncodedMemoryCache . Once the network become available , the image will reload success .
fix bug when using DownSample and RegionDecoder together __EoT__ # # Motivation To fix the bug discribed in issue [ 2201 ] ( https : //github.com/facebook/fresco/issues/2201 ) # # Test Plan The Image can not show correctly when using Resize and RegionDecoder together with ` downsample ` setting to ` true ` . Here I change the ` targetWidth ` and ` targetHeight ` with region decoder to fix the bug . whe ` setDownsampleEnable ` is not set to ` true ` or using default value . Resize is a process of pipeline before decoding ( only for JPEG ) . so the region is not the same with the former . but this can be set in custom decoder .
Add cache key for ImageCacheStatsTracker 's onDiskCacheHit __EoT__ # # Motivation ( required ) ImageCacheStatsTracker is used for tracking caching status like disk or encoded memory . The onBitmapCacheHit , onMemoryCacheHit and onStagingAreaHit methods all provide the cache key param , from which we can get the request url . However , the onDiskCacheHit method does not provide the cache key param . # # Test Plan ( required ) All unit tests passed .
Supplement heif header suffixes __EoT__ # # Motivation ( required ) Some heif header suffixes missed , cause some heif image can not load successfully , such as https : //nokiatech.github.io/heif/content/images/autumn_1440x960.heic . # # Test Plan ( required ) Load the image https : //nokiatech.github.io/heif/content/images/autumn_1440x960.heic , then check whether load successfully .
libwebp updated to 1.0.0 __EoT__ # # Motivation ( required ) Our security check tool found the CVE problem in libwebp . I think it was a false positive as the related problem was fixed on 0.5.2 . It is up to you to decide if it worth it to update to 1.0.0 . # # Test Plan ( required ) Make sure that unit tests pass .
Update powered_by.yml __EoT__ Added Degoo as app using Fresco .
Add image ‘ s origin info to DebugControllerOverlayDrawable __EoT__ # # Motivation if many images display on screen , too many logs output . It 's hard to debug an image is in memory cache or disk cache . If the DebugControllerOverlayDrawable show this info will be helpful . # # Test Plan < img width= '' 206 '' alt= '' sfafs '' src= '' https : //user-images.githubusercontent.com/3580391/43150324-35183a9e-8f9c-11e8-83a4-bdeb40046dbd.png '' >
[ ROUND ] fix webp add round draw out of bound __EoT__ # # Motivation ( required ) When I add a OVER_COLOR Round to webP Drawable , the overColor draw out of bound and start blinking . # # # Before ! [ before ] ( https : //user-images.githubusercontent.com/8406296/41187170-7dd1d748-6bd6-11e8-8871-1e5047d3eff4.png ) A close look : ! [ before1 ] ( https : //user-images.githubusercontent.com/8406296/41187171-87acbc56-6bd6-11e8-8494-2e6d1b18dacd.png ) # # # After ! [ after ] ( https : //user-images.githubusercontent.com/8406296/41187173-8eaab9c2-6bd6-11e8-9184-c5870891e05d.png ) A close look : ! [ after1 ] ( https : //user-images.githubusercontent.com/8406296/41187178-95b36214-6bd6-11e8-9f99-84539f557557.png ) # # Test Plan ( required ) Add roundedCornerRadius to SimpleDraweeView which plays webP .
[ NDK ] Fix NDK settings __EoT__ Thanks for submitting a PR ! Please read these instructions carefully : - [ x ] Explain the **motivation** for making this change . - [ x ] Provide a **test plan** demonstrating that the code is solid . - [ x ] Match the **code formatting** of the rest of the codebase . - [ x ] Target the ` master ` branch # # Motivation ( required ) What existing problem does the pull request solve ? Fix build failed occurred by ndk settings ( [ Application.mk ] ( https : //developer.android.com/ndk/guides/application_mk ) ) Remove armeabi support ( Remove from NDK r17 ) `` ` > Task : imagepipeline : ndk_build_bitmaps FAILED A problem was found with the configuration of task ' : imagepipeline : ndk_build_bitmaps ' . Registering invalid inputs and outputs via TaskInputs and TaskOutputs methods has been deprecated and is scheduled to be removed in Gradle 5.0 . - File ' ... /fresco/imagepipeline/src/main/jni/bitmaps ' specified for property ' $ 1 ' is not a file . Android NDK : APP_PLATFORM not set . Defaulting to minimum supported version android-14 . Android NDK : WARNING : APP_STL gnustl_static is
Fix bad link to post-processor.md __EoT__ Fix Post Processor link from FAQs leading to 404 .
PooledByteBuffer.read ( ) does n't return int . __EoT__ # # # Description According to its javadoc , ` com.facebook.common.memory.PooledByteBuffer # read ( int , byte [ ] , int , int ) ` should return int for number of bytes copied . However this method returns void . # # # Reproduction Problem in source code . # # # Solution Change ` com.facebook.common.memory.PooledByteBuffer # read ( int , byte [ ] , int , int ) ` to make it return int , and its implementation com.facebook.imagepipeline.memory.NativePooledByteBuffer . # # # Additional Information * Fresco version : 1.8.1 * Platform version : Not platform specific issue
okhttp3 may not build after Fresco sources update __EoT__ # # # Description Build from sources complains and outputs errors ( even after clean project ) : missing okhttp3 after this commit ( switch from compile to implementation ) : https : //github.com/facebook/fresco/commit/b83a71b9d27cd3d95ef59cdaa291d89b6a09c27a # diff-68af0e80447eb282f6a40fa64a9b16f7 - https : //github.com/facebook/fresco/blob/06fe3719a3a3c659438b6c25a8008945e67156a0/imagepipeline-backends/imagepipeline-okhttp3/build.gradle # L7 # # # Workaround switch back to compile : ` compile `` com.squareup.okhttp3 : okhttp : $ { OKHTTP3_VERSION } '' ` Clean and build , then switch back to : ` implementation `` com.squareup.okhttp3 : okhttp : $ { OKHTTP3_VERSION } '' ` # # # Additional Information Not a bug - Workaround * Fresco version : up to https : //github.com/facebook/fresco/commit/b83a71b9d27cd3d95ef59cdaa291d89b6a09c27a # diff-68af0e80447eb282f6a40fa64a9b16f7 * Gradle version : 4.1 * Android studio version : 3.0.1
WebP with alpha on API 17 __EoT__ I 'm using ` compile 'com.facebook.fresco : webpsupport:0.10.0 ' ` to support transparent webp images on devices < 18 API ( API 18 is when native support was added to framework ) . But on some devices on **API 17** ( for example Huawei Ascend G700 ) I 'm facing this weird bug : [ screenshot ] ( http : //i.imgur.com/las5poh.png ) ( for the reference , it should look like [ this ] ( http : //i.imgur.com/rFqZiR0.png ) ) . These webp images are from [ official google samples ] ( https : //developers.google.com/speed/webp/gallery2 # side-by-side_comparison ) ( WebP-lossy with alpha ) . Is there some workaround about this ?
Thumbnail of video from Android document provider does not show __EoT__ # # # Description Video thumbnail can not be rendered via ` SimpleDraweeView # setImageURI ` if the content uri is like : ` content : //com.android.providers.media.documents/document/video % 3A160 ` # # # Reproduction My app allows user to choose a file from Android document provider . The Intent is constructed by this way : `` ` .java public static Intent getChooseMediaIntent ( String type ) { Intent intent = new Intent ( Intent.ACTION_GET_CONTENT , MediaStore.Video.Media.EXTERNAL_CONTENT_URI ) ; intent.setType ( type ) ; // type is `` video/* '' here return intent ; } `` ` The returned uri is ` content : //com.android.providers.media.documents/document/video % 3A160 ` . However , when I use ` SimpleDraweeView # setImageURI ` to render the video thumbnail , it should blank . # # # Solution The root cause as I found out is within ` LocalVideoThumbnailProducer # getLocalFilePath ` . For the uri ` content : //com.android.providers.media.documents/document/video % 3A160 ` this method will return null . I 've sent a PR # 1970 # # # Additional Information * Fresco version : 1.5.0 * Platform version : Android 7.1.1 on OnePlus 5
New docs for v1.4.0 __EoT__ * Updated documentation * Removed obsolete content * Added videos and screenshots ! * Fixed issues
Android Studio 2.2.2 After the introduction of the XML version of the 0.10.1 property without prompt __EoT__ Android Studio 2.2.2 After the introduction of the XML version of the 0.10.1 property without prompt http : //share.weiyun.com/678deb081fceabb0f111400eca9c0d13
Build fails with clang++ : error : unknown argument : '-fno-weak ' __EoT__ From GCC documentation : -fno-weak Do not use weak symbol support , even if it is provided by the linker . By default , G++ uses weak symbols if they are available . This option exists only for testing , and should not be used by end-users ; it results in inferior code and has no benefits . This option may be removed in a future release of G++ . Let 's not use it .
Comparison demo crash when select Volley + network __EoT__ # # # Description `` ` E/AndroidRuntime : FATAL EXCEPTION : main Process : com.facebook.samples.comparison , PID : 4529 java.util.ConcurrentModificationException at java.util.HashMap $ HashIterator.nextEntry ( HashMap.java:851 ) at java.util.HashMap $ ValueIterator.next ( HashMap.java:879 ) at com.android.volley.toolbox.ImageLoader $ 4.run ( ImageLoader.java:464 ) at android.os.Handler.handleCallback ( Handler.java:751 ) at android.os.Handler.dispatchMessage ( Handler.java:95 ) at android.os.Looper.loop ( Looper.java:154 ) at android.app.ActivityThread.main ( ActivityThread.java:6119 ) at java.lang.reflect.Method.invoke ( Native Method ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:886 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:776 ) `` ` # # # Reproduction Select Volley and Network in the Comparison demo application # # # Additional Information * Fresco version : 1.0.1 * Platform version : 5.1 - Xiaomi Redmi Note 3 , 7.0 - Android Emulator
v0.10.0 Fresco with OkHttp v0.10.0 is leaking connections when some fetches produce 404 errors __EoT__ I have been using Fresco 0.9.0 for a while with the OkHttp 0.9.0 network fetcher and everything has been fine . However , after upgrading to v0.10.0 for both Fresco and the OkHttp backend , I am seeing errors like this on occasion : `` ` 05-02 12:20:53.653 13097-14210/com.appname W/OkHttpClient : A connection to < URL_REMOVED > was leaked . Did you forget to close a response body ? `` ` This only happens in a certain scenario . I have some debug code that deliberately mangles some of my fetch URLs to test 404 handing , and when that code is enabled , I see the connection leaks as shown above . If I disable the mangling code , I see no leaks . If I change the debug code to mangle 100 % of the URLs instead of 90 % , this also works with no leaks ( surprisingly ) . My concern is that when I get legitimate 404 errors occurring in the wild ( rather than faking them like this ) , they will be leaking connections which may eventually prevent
64-bit ARM and x86_64 architecture support ( NB : not yet fully tested ! ) __EoT__ Needed for the recently released Galaxy S6 , among a few other models . The crash you 'd see would be something like : `` ` E/AndroidRuntime ( 5325 ) : java.lang.UnsatisfiedLinkError : dalvik.system.PathClassLoader [ DexPathList [ [ zip file `` /data/app/com.joistapp.android.joist.alpha-1/base.apk '' ] , nativeLibraryDirectories= [ /data/app/com.joistapp.android.joist.alpha-1/lib/arm64 , /vendor/lib64 , /system/lib64 ] ] ] could n't find `` libgnustl_shared.so '' `` ` - Added the x86_64 and arm64-v8a architectures . - Fixed pointer-length disagreement cast build failures in gifimage and webp . I followed the guidance given at http : //developer.android.com/training/articles/perf-jni.html . Unfortunately , I lack a 64-bit ARM device , and the x86_64 emulator is not cooperating with me at the moment , so the best I 've done is test for cursory regression in the context of my own app on a 32-bit device ( which , I 'll note , does not use either GIF or WebP ) .
Custom banner in debugger console __EoT__ Hi . Currently there is no way to change the banner inside of the console . I would love to customize that . I 've implemented some additional api exclusively for debugging console via JS bindings . In order to make it easy to use what I want to do is to print some sort of welcome message with help on what is exposed in the console directly and how to use it . I 've tried to just do printing into the console but this is not happening until user does not sends anything to the console . Meanwhile banner is always printed beforehand/
No inspect button are appear __EoT__ I followed the tutorial [ here ] ( https : //facebook.github.io/react-native/docs/debugging.html ) , but I cant inspect . The device is a emulator and am using the Ubuntu 16.04 . I have the server running and everything looks ok , but the option to inspect never appears . ! [ screenshot from 2017-01-08 01-55-03 ] ( https : //cloud.githubusercontent.com/assets/952303/21747161/9909d7d2-d545-11e6-98f6-b125e49da6a8.png )
Update to 1.4.3-SNAPSHOT __EoT__
Fix extranneous boxing and also fix use of binarySearch __EoT__ Related to commit 37e615ed293ab49073f57b37e51fdcc6334cf919
Fix ObjectMapper 's treatment of static fields __EoT__ We should not be setting static fields from JSON data , or serializing them into JSON data . This prevents Stetho from working with Android Studio 's Instant Run since it injects some stuff into there . This can manifest itself as a blank Elements tab , as well as no incoming data on any of the other tabs .
Update to gradle 2.2.2 __EoT__ Android Studio is very persistent about nagging about this .
stetho_open.py should respect ANDROID_ADB_SERVER_PORT __EoT__ This change now uses ANDROID_ADB_SERVER_PORT when connecting to adb , if a numeric value is specified . Otherwise the default port ( 5037 ) is used .
Ability to add Stetho protocol/domain library extensions __EoT__ Chrome protocol calls are designed to be coupled to ` ChromeDevtoolsDomain ` implementations and it is impossible to add more functionality to existing domains/modules . For example there is a ` Database ` class that has methods : ` getDatabaseTableNames ` and ` executeSQL ` . Because of ` MethodDispatcher ` implementation and [ dispatch table map ] ( https : //github.com/facebook/stetho/blob/master/stetho % 2Fsrc % 2Fmain % 2Fjava % 2Fcom % 2Ffacebook % 2Fstetho % 2Finspector % 2FMethodDispatcher.java # L39 ) , the calls will look for specific class name and for method as [ defined in protocol ] ( https : //code.google.com/p/chromium/codesearch # chromium/src/third_party/WebKit/Source/devtools/protocol.json & l=1668 ) . This is very coupled which is right for low level protocol wrapping . But , this limits the ability to extend and add new functionality to already covered domains . Check this screenshot . I had to make some not healthy implementations to make it work . The **Web SQL** tab shows all Android and custom made content providers . Since Android content providers like _Calendar , Contacts , ... _ are n't accessible through raw sqlite database , I had to create
Ability to add Stetho protocol/domain library extensions __EoT__ Chrome protocol calls are designed to be coupled to ` ChromeDevtoolsDomain ` implementations and it is impossible to add more functionality to existing domains/modules . For example there is a ` Database ` class that has methods : ` getDatabaseTableNames ` and ` executeSQL ` . Because of ` MethodDispatcher ` implementation and [ dispatch table map ] ( https : //github.com/facebook/stetho/blob/master/stetho % 2Fsrc % 2Fmain % 2Fjava % 2Fcom % 2Ffacebook % 2Fstetho % 2Finspector % 2FMethodDispatcher.java # L39 ) , the calls will look for specific class name and for method as [ defined in protocol ] ( https : //code.google.com/p/chromium/codesearch # chromium/src/third_party/WebKit/Source/devtools/protocol.json & l=1668 ) . This is very coupled which is right for low level protocol wrapping . But , this limits the ability to extend and add new functionality to already covered domains . Check this screenshot . I had to make some not healthy implementations to make it work . The **Web SQL** tab shows all Android and custom made content providers . Since Android content providers like _Calendar , Contacts , ... _ are n't accessible through raw sqlite database , I had to create
pac修改建议 __EoT__ < ! -- pac建议将最后一句由 return match ? 'PROXY 127.0.0.1:9999 ' : 'DIRECT ' ; 修改为 return match ? 'PROXY 127.0.0.1:9999 ; DIRECT ' : 'DIRECT ' ; 本机测试成功。 -- > # # # 问题描述 ( 必要 ) pac接管代理，在程序关闭时会导致百度盘相关网页无法打开， 建议将最后一句由 return match ? 'PROXY 127.0.0.1:9999 ' : 'DIRECT ' ; 修改为 return match ? 'PROXY 127.0.0.1:9999 ; DIRECT ' : 'DIRECT ' ; 本机测试成功。 # # # 版本号 ( 必要 ) 3.12 # # # 操作系统 ( 必要 ) MacOS # # # 相关截图 # # # 相关日志
Update en-US.js __EoT__
README.md Update & Reformat __EoT__ # # Changes : 1 . Multiple copywriting improvements , make the wording more formal . 1 . Reformat the whole ` README.md ` , make it into better style , and fixed several incorrect markdown grammar useage . 1 . Add a fantastic render poster at the top of the ` README.md ` , make it looks cooler . 1 . Upload screenshots which were contained in the ` README.md ` to ` uploads.cc ` , avoid abuse of the ` GitHub Pages ` service . # # Notices : 1 . The download part of the ` README.md ` , I 've make it into my opensource project [ HXCO Get ] ( https : //github.com/hxco/Get ) , which is a simple but wonderful app downloader , it can download over 60 apps with its latest version . Now ` ProxyEE Down ` is also supported ( duo to the official site download API ) . Please try [ https : //get.soft.org/proxyeedown ] ( https : //get.soft.org/proxyeedown ) - I would like to use my project in here to present the user a better interface when downloading . 1 . I 've looked
V3.0 __EoT__ Update zh-TW.js
刚开始下载就显示已完成 __EoT__ 链接 https : //raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer.exe
Adedd Glow to status bar handler press state __EoT__ Added glow effect to press state for drag handler image
jellybean __EoT__
jellybean __EoT__
Added quaternion rotation methods to android.opengl.Matrix __EoT__ Based on the formula described at http : //en.wikipedia.org/wiki/Rotation_matrix # Quaternion
Update master __EoT__ I 'll do this over at r.android.com , although it 's easier to comment and edit here on github ... In any event , the getLayoutInflator method needs some work . The null check that was added does not prevent NPE if onCreateDialog returns null . Also , is there a break statement missing in the switch ?
Update master __EoT__ I 'll do this over at r.android.com , although it 's easier to comment and edit here on github ... In any event , the getLayoutInflator method needs some work . The null check that was added does not prevent NPE if onCreateDialog returns null . Also , is there a break statement missing in the switch ?
Update tools/aapt/ResourceTable.cpp __EoT__ Fix for Issue 24912 http : //code.google.com/p/android/issues/detail ? id=24912
Corrected `` Home '' translation in proper context __EoT__ previous translation was literaly `` homepage ''
Added better documentation to the getBaseStationLatitude ( ) and getBaseStationLongitude ( ) methods __EoT__ Added better documentation to the getBaseStationLatitude ( ) and getBaseStationLongitude ( ) methods to indicate the units for latitude and longitude . Unlike the Android Location API methods , latitude and longitude here are not decimal degrees but instead 0.25 seconds due to a more obscure 3GPP standard . The current Javadocs on the Android developer page do not indicate the units for latitude and longitude , making it very difficult for developers to interpret the output of these methods . This commit adds clear documentation to these methods .
Added better documentation to the getBaseStationLatitude ( ) and getBaseStationLongitude ( ) methods __EoT__ Added better documentation to the getBaseStationLatitude ( ) and getBaseStationLongitude ( ) methods to indicate the units for latitude and longitude . Unlike the Android Location API methods , latitude and longitude here are not decimal degrees but instead 0.25 seconds due to a more obscure 3GPP standard . The current Javadocs on the Android developer page do not indicate the units for latitude and longitude , making it very difficult for developers to interpret the output of these methods . This commit adds clear documentation to these methods .
Added better documentation to the getBaseStationLatitude ( ) and getBaseStationLongitude ( ) methods __EoT__ Added better documentation to the getBaseStationLatitude ( ) and getBaseStationLongitude ( ) methods to indicate the units for latitude and longitude . Unlike the Android Location API methods , latitude and longitude here are not decimal degrees but instead 0.25 seconds due to a more obscure 3GPP standard . The current Javadocs on the Android developer page do not indicate the units for latitude and longitude , making it very difficult for developers to interpret the output of these methods . This commit adds clear documentation to these methods .
Problems building 3.0 __EoT__ I have switched to EventBus 3.0 today and got an exception while compiling . I use the [ Subscriber Index method ] ( http : //greenrobot.org/eventbus/documentation/subscriber-index/ ) . The exception is the following : `` ` java java.lang.ClassCastException : com.sun.tools.javac.code.Type $ TypeVar can not be cast to javax.lang.model.type.DeclaredType at org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor.checkForSubscribersToSkip ( EventBusAnnotationProcessor.java:171 ) at org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor.process ( EventBusAnnotationProcessor.java:97 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor ( JavacProcessingEnvironment.java:794 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs ( JavacProcessingEnvironment.java:705 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment.access $ 1800 ( JavacProcessingEnvironment.java:91 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment $ Round.run ( JavacProcessingEnvironment.java:1035 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing ( JavacProcessingEnvironment.java:1176 ) at com.sun.tools.javac.main.JavaCompiler.processAnnotations ( JavaCompiler.java:1170 ) at com.sun.tools.javac.main.JavaCompiler.compile ( JavaCompiler.java:856 ) at com.sun.tools.javac.main.Main.compile ( Main.java:523 ) at com.sun.tools.javac.api.JavacTaskImpl.doCall ( JavacTaskImpl.java:129 ) at com.sun.tools.javac.api.JavacTaskImpl.call ( JavacTaskImpl.java:138 ) at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute ( JdkJavaCompiler.java:45 ) at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute ( JdkJavaCompiler.java:33 ) at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.delegateAndHandleErrors ( NormalizingJavaCompiler.java:101 ) at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute ( NormalizingJavaCompiler.java:50 ) at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute ( NormalizingJavaCompiler.java:36 ) at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute ( CleaningJavaCompilerSupport.java:34 ) at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute ( CleaningJavaCompilerSupport.java:25 ) at org.gradle.api.tasks.compile.JavaCompile.performCompilation ( JavaCompile.java:157 ) at org.gradle.api.tasks.compile.JavaCompile.compile ( JavaCompile.java:139 ) at org.gradle.api.tasks.compile.JavaCompile.compile ( JavaCompile.java:93 ) at com.android.build.gradle.tasks.factory.AndroidJavaCompile.compile ( AndroidJavaCompile.java:39 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.gradle.internal.reflect.JavaMethod.invoke ( JavaMethod.java:75 ) at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory $
Problems building 3.0 __EoT__ I have switched to EventBus 3.0 today and got an exception while compiling . I use the [ Subscriber Index method ] ( http : //greenrobot.org/eventbus/documentation/subscriber-index/ ) . The exception is the following : `` ` java java.lang.ClassCastException : com.sun.tools.javac.code.Type $ TypeVar can not be cast to javax.lang.model.type.DeclaredType at org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor.checkForSubscribersToSkip ( EventBusAnnotationProcessor.java:171 ) at org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor.process ( EventBusAnnotationProcessor.java:97 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor ( JavacProcessingEnvironment.java:794 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs ( JavacProcessingEnvironment.java:705 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment.access $ 1800 ( JavacProcessingEnvironment.java:91 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment $ Round.run ( JavacProcessingEnvironment.java:1035 ) at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing ( JavacProcessingEnvironment.java:1176 ) at com.sun.tools.javac.main.JavaCompiler.processAnnotations ( JavaCompiler.java:1170 ) at com.sun.tools.javac.main.JavaCompiler.compile ( JavaCompiler.java:856 ) at com.sun.tools.javac.main.Main.compile ( Main.java:523 ) at com.sun.tools.javac.api.JavacTaskImpl.doCall ( JavacTaskImpl.java:129 ) at com.sun.tools.javac.api.JavacTaskImpl.call ( JavacTaskImpl.java:138 ) at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute ( JdkJavaCompiler.java:45 ) at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute ( JdkJavaCompiler.java:33 ) at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.delegateAndHandleErrors ( NormalizingJavaCompiler.java:101 ) at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute ( NormalizingJavaCompiler.java:50 ) at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute ( NormalizingJavaCompiler.java:36 ) at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute ( CleaningJavaCompilerSupport.java:34 ) at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute ( CleaningJavaCompilerSupport.java:25 ) at org.gradle.api.tasks.compile.JavaCompile.performCompilation ( JavaCompile.java:157 ) at org.gradle.api.tasks.compile.JavaCompile.compile ( JavaCompile.java:139 ) at org.gradle.api.tasks.compile.JavaCompile.compile ( JavaCompile.java:93 ) at com.android.build.gradle.tasks.factory.AndroidJavaCompile.compile ( AndroidJavaCompile.java:39 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.gradle.internal.reflect.JavaMethod.invoke ( JavaMethod.java:75 ) at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory $
ThreadMode enum does n't use standard enum naming conventions __EoT__ The enums in ThreadMode.java are : PostThread , MainThread , BackgroundThread , Async but Java conventions would have them be : POST_THREAD , MAIN_THREAD , BACKGROUND_THREAD , ASYNC http : //docs.oracle.com/javase/tutorial/java/javaOO/enum.html '' Because they are constants , the names of an enum type 's fields are in uppercase letters . ''
Suggested Proguard config in HOWTO.md obfuscates array onEvents __EoT__ Problem : Current HOWTO.md suggests a Proguard line as such : `` ` -keepclassmembers class ** { public void onEvent* ( ** ) ; } `` ` If an registered object has for example 2 methods like : `` ` public void onEvent ( Client client ) { } public void onEvent ( Client [ ] clients ) { } `` ` the second method gets removed by proguard because the *\* does not match primitive arrays . A **\* in the parameter match of the proguard config will match the Client [ ] type and keep the method around after proguard has run . Ref : http : //proguard.sourceforge.net/manual/usage.html
The name of method ( unubscribeByEventType ) omit s , it should be unsubscribeByEventType __EoT__
Fatal Exception : java.lang.NoClassDefFoundError android/telephony/CellInfoGsm __EoT__ Hi , On specific mobiles eventbus crashes with following error . Fatal Exception : java.lang.NoClassDefFoundError android/telephony/CellInfoGsm de.greenrobot.event.SubscriberMethodFinder.findSubscriberMethods Caused by java.lang.ClassNotFoundException dalvik.system.BaseDexClassLoader.findClass ( BaseDexClassLoader.java:61 ) java.lang.Class.getDeclaredMethods ( Class.java:703 ) de.greenrobot.event.SubscriberMethodFinder.findSubscriberMethods ( SubscriberMethodFinder.java:75 ) de.greenrobot.event.EventBus.register ( EventBus.java:163 ) de.greenrobot.event.EventBus.registerSticky ( EventBus.java:151 ) Looks like findSubscriberMethods is trying to access methods which are marked as @ TargetApi ( 17 ) while the phone is using api 16 . Hence eventbus is not able to find those classes which are not available in api 16 . Looks like a bug . Is there any workaround ?
EventBusAnnotationProcessor should use SourceVersion.latest ( ) __EoT__ Currently it uses : `` ` java @ SupportedSourceVersion ( SourceVersion.RELEASE_6 ) `` ` This will result in a warning if the project uses a compilation target bigger then 6 : Warning : Supported source version 'RELEASE_6 ' from annotation processor 'de.greenrobot.event.annotationprocessor.EventBusAnnotationProcessor ' less than -source '1.8' You should tell you are compatible with the latest source version instead : `` ` java @ Override public SourceVersion getSupportedSourceVersion ( ) { return SourceVersion.latest ( ) ; } `` `
StickyEvent not subscribed via BaseEventType __EoT__ # # # Current Status 1 . I 'm using EventBus 2.0.2 2 . I have `` RefreshEvent '' class which is extending `` BaseEvent '' . 3 . And I registered current activity to get that sticky event like this . `` ` java EventBus.getDefault ( ) .registerSticky ( this ) ; `` ` # # # Here 's the question . 1. this works . `` ` java public void onEvent ( RefreshEvent event ) { } `` ` 1. but , this doens't work . `` ` java public void onEvent ( BaseEvent event ) { } `` ` I looked into the source code . and here are some lines from EventBus.java @ line 255 . `` ` java if ( sticky ) { Object stickyEvent ; synchronized ( stickyEvents ) { stickyEvent = stickyEvents.get ( eventType ) ; } if ( stickyEvent ! = null ) { postToSubscription ( newSubscription , stickyEvent , Looper.getMainLooper ( ) == Looper.myLooper ( ) ) ; } } `` ` When ` public void onEvent ( BaseEvent event ) { } ` is declared , the eventType is `` BaseEvent '' , not
Check if an event has a subscriber __EoT__ Hi , This is an enhancement more than an issue . I 'm in a situation where I need to know if a specific event has a subscriber . Using a method like EventBus.getDefault ( ) .hasSubscriber ( Class < ? > ) . Is this something you could include in future relases ? Many thanks .
Use contains ( ) rather than looping __EoT__ This is in reference to the subscribe method where you `` for ( Subscription subscription : subscriptions ) '' it would be better to just do subscriptions.contains ( newSubscription ) right ? Using the syntactic sugar for loop is a tiny performance hit in Android anyway ... http : //developer.android.com/training/articles/perf-tips.html # Loops ( last line of section ) , there was also a presentation I saw somewhere where they said the syntactic sugar for loop also uses more memory .
Subscribers are invoked for all events instead of registered events __EoT__ Hello , I 'm integrating this library into my own project and I 'm running across a very bizarre issue that causes an event handler to be registered for all events without me specifying as such . Specifically , I have a class Foo which is derived from some other class ( which does n't have any `` onEvent '' methods ) which subscribes to events for SomeEnum . `` ` public enum SomeEnum ( ) { // Nothing fancy } public class Foo extends SomeClassWithNoOnEvent { ... public void onEvent ( SomeEnum someEnum ) { /* Handler logic */ } ... } `` ` On the same EventBus , I register another class which has nothing to do with Foo . `` ` public class Bar { ... public void onEvent ( SomeType someType ) { /* Handler logic */ } } `` ` When I post an instance of `` SomeType '' , EventBus attempts to invoke Bar ( correctly ) and Foo 's onEvent even though I never signed up for it . `` ` Could not dispatch event : class com.foo.Bar to subscribing class class
Possibility to disable the 'No subscribers registered for event ' log messages __EoT__ When posting an event that currently has no subscribers EventBus will log a 'No subscribers registered for event ' message . This should be configurable , or even better : be disabled by default .
Fixed object leak in unregister ( ) __EoT__ The subscriber was n't being removed from the map when it was being unregistered , either for all events or if there were no more events it had been subscribed to .
Database.isOpen ( ) __EoT__ It would be great if the Database interface exposed the ` .isOpen ( ) ` method of the delegate . I 'm dealing with an app that uses AccountManager and has separate databases for each user . When an account is deleted , a callback deletes the underlying database , but if the app is still running , when my Activity resumes it needs to check if the database is still open . I can do it by getting the raw database and then casting it ( to one of two implementation classes , depending on if it 's encrypted or not ) but it seems like adding ` .isOpen ( ) ` to the interface should be straightforward . I 'd be happy to submit a pull request for it if the idea is approved . Thanks .
fixed a typo in the comment of QueryBuilder.offset ( ) __EoT__
Crash on checkThread ( ) __EoT__ After some investigation of a crash we are seeing in our app , we would like to share some information . The stacktrace is the following : > de.greenrobot.dao.DaoException : Method may be called only in owner thread , use forCurrentThread to get an instance for this thread > at de.greenrobot.dao.query.AbstractQuery.checkThread ( SourceFile:80 ) > at de.greenrobot.dao.query.AbstractQuery.setParameter ( SourceFile:70 ) > at de.greenrobot.dao.query.AbstractQueryWithLimit.setParameter ( SourceFile:48 ) > at de.greenrobot.dao.query.Query.setParameter ( SourceFile:30 ) > setParameter > setParameter This is happening mostly on RIM devices . ` AbstractQueryData ` 's ` forCurrentThread ( ) ` is using ` Process.myTid ( ) ` and this method might return ` 0 ` . There was an attempt to fix this problem in https : //github.com/greenrobot/greenDAO/issues/171 and the ticket was closed saying it was fixed with https : //github.com/greenrobot/greenDAO/commit/013af9c4c4ee76af304b3b35f50588a7e6d68f63 While that fix might have worked for Robolectric , the issue mentioned by @ dcowley is real and it is still there . Can this be revised ?
Various typos in entity class methods __EoT__ There seems to be some typos in the Entity.java file . On line 547 the method is called init3ndPass ( ) and on line 498 , we have a method called init2nPassNamesWithDefaults . Other methods with similar names are correct such as init3rdPassRelations and init2ndPassIndexNamesWithDefaults .
Bug in SqlUtils.java : select statements do not have quotes around table names . __EoT__ When I changed the name of a table to TRANSACTION an Sqlite error occurred within the load ( key ) method . The problem is with the SqlUtils.createSqlSelect ( ) method in DaoCore.java . The word TRANSACTION is a keyword , and the generated statement in the SqlUtils.createSqlSelect ( ) method did not put single quotes around it . It should add quotes like this : .append ( `` ' '' ) .append ( tablename ) .append ( `` ' '' ) , which works . It 's odd because greenDao puts quotes around other names and identifiers everywhere else .
incorrect behaviour of prepared Query object for some data types __EoT__ < b > sample code : < /b > < code > WhereCondition whereSomeEq = Properties.IsActive.eq ( Boolean.TRUE ) ; Query query = someDao.queryBuilder ( ) .where ( whereSomeEq ) .build ( ) ; query.setParameter ( 0 , Boolean.TRUE ) ; List results = query.list ( ) ; < /code > < b > expected result : < /b > in my case , not empty list of some objects < b > real result : < /b > empty list , because < code > Query.setParameter ( int , Object ) < /code > sets any object as < code > String < /code > without any convertations like this : < code > WhereCondition.PropertyCondition.checkValueForType ( Property , Object ) < /code >
getPkProperty ( ) returns always 'null ' __EoT__ Why is it that : `` ` Entity language = schema.addEntity ( `` Language '' ) ; language.addLongProperty ( `` id '' ) .primaryKey ( ) ; // Prints : 'null' System.out.println ( language.getPkProperty ( ) ) ; `` ` but : `` ` Entity language = schema.addEntity ( `` Language '' ) ; Property language ID = language .addLongProperty ( `` id '' ) .primaryKey ( ) .getProperty ( ) ; // Prints : 'Property id of Language' System.out.println ( languageID ) ; `` ` The [ documentation ] ( http : //greendao-orm.com/javadoc/greendao-generator/de/greenrobot/daogenerator/Entity.html # getPkProperty % 28 % 29 ) says : > ... From the name I assumed that it would give me a valid primary-key property , or did I get something wrong ?
getPkProperty ( ) returns always 'null ' __EoT__ Why is it that : `` ` Entity language = schema.addEntity ( `` Language '' ) ; language.addLongProperty ( `` id '' ) .primaryKey ( ) ; // Prints : 'null' System.out.println ( language.getPkProperty ( ) ) ; `` ` but : `` ` Entity language = schema.addEntity ( `` Language '' ) ; Property language ID = language .addLongProperty ( `` id '' ) .primaryKey ( ) .getProperty ( ) ; // Prints : 'Property id of Language' System.out.println ( languageID ) ; `` ` The [ documentation ] ( http : //greendao-orm.com/javadoc/greendao-generator/de/greenrobot/daogenerator/Entity.html # getPkProperty % 28 % 29 ) says : > ... From the name I assumed that it would give me a valid primary-key property , or did I get something wrong ?
Changing URL so tests can run in any order __EoT__ # # What is the purpose of the change JCacheFactoryTest tests fail when run in a different order . This fix changes the port of the URL for testJCacheGetExpired so the two tests ' caches do not map to the same location . # # Brief changelog dubbo-filter/dubbo-filter-cache/src/test/java/org/apache/dubbo/cache/support/jcache/JCacheFactoryTest.java
[ Dubbo-1566 ] add checkstyle rule to check import order __EoT__ # # What is the purpose of the change Add checkstyle rule to check import order # # Brief changelog According to ` dubbo_codestyle_for_idea.xml ` , ` org.apache.dubbo ` should be the first import and spereate with other imports with blank line . Add a checkstyle rule to check this in CI and also fix all files which does n't meet the requirement . # # Verifying this change CI pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [
Fixing flaky test in ChangeTelnetHandlerTest __EoT__ # # What is the purpose of the change Test ChangeTelnetHandlerTest.testChangeServiceNotExport fails when run after the ones in ReferenceCountExchangeClientTest even when there ’ s no bug in the code . Tests in ReferenceCountExchangeClientTest open new ports and servers in DubboProtocol , and tests in testChangeServiceNotExport implicitly assume no such new ports and servers . The changes ensures ReferenceCountExchangeClientTest closes all the newly opened ports and servers after all tests finish running . # # Brief changelog dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ReferenceCountExchangeClientTest.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject
[ DUBBO-2757 ] : Fix the bug that ReferenceBean refers service more than once when debugging . __EoT__ # # What is the purpose of the change Fix issue # 2757 that ReferenceBean refers service more than once when debugging . please visit http : //t.cn/EAhta27 for more detail # # Brief changelog dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
Provider should disable mock configuration . __EoT__ mock configuration should be disabled on provider side .
[ DUBBO-2489 ] MockClusterInvoker provides local forced mock，I tested it locally , but it does n't work __EoT__ # # What is the purpose of the change fix https : //github.com/apache/incubator-dubbo/issues/2489 # # Brief changelog dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractMethodConfig.java dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractInterfaceConfigTest.java dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction
[ Dubbo- typo ] fix typo __EoT__ # # What is the purpose of the change Fix nettyServerHandler typo . # # Brief changelog 1. org.apache.dubbo.remoting.transport.netty4.NettyServerHandler # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or
Add 'forks ' config into xml config __EoT__ issue : https : //github.com/apache/incubator-dubbo/issues/2427
Simplify the code of StringUtils to make it more graceful . __EoT__ # # What is the purpose of the change Simplify the code of StringUtils to make it more graceful . # # Brief changelog Modified files : dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java dubbo-common/src/test/java/org/apache/dubbo/common/utils/StringUtilsTest.java New Files : dubbo-common/src/main/java/org/apache/dubbo/common/utils/ArrayUtils.java dubbo-common/src/test/java/org/apache/dubbo/common/utils/ArrayUtilsTest.java
Fixing flaky tests in PortTelnetHandlerTest __EoT__ # # What is the purpose of the change Tests in PortTelnetHandlerTest fail when ran after the ones in DubboProtocolTest even when there ’ s no bug in the code . Tests in DubboProtocolTest open new ports and servers in DubboProtocol , and tests in PortTelnetHandlerTest implicitly assume no such new ports and servers . The changes ensures DubboProtocolTest closes all the newly opened ports and servers after all tests finish running , so later tests in PortTelnetHandlerTest do not fail . # # Brief changelog dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocolTest.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each
code format __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please remember to
enhance comments __EoT__ # # What is the purpose of the change enhance comments for ServiceBean # # Brief changelog dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed ,
[ Dubbo-2678 ] [ For Master ] Add ability to turn off SPI auto injection , special support for Object type . __EoT__ # # What is the purpose of the change Fix problem reported in https : //github.com/apache/incubator-skywalking/issues/1769 # # Brief changelog * Add Inject annotation * Printing log instead of throwing Exception in SpringExtensionFactory # # Verifying this change ExtensionLoaderTest.testInjectExtension Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how
optimize ExtensionLoader and ServiceAnnotationBeanPostProcessor some code segment __EoT__ # # What is the purpose of the change optimize code detail 1. replace ServiceAnnotationBeanPostProcessor.registerServiceBean ( ... ) log.isInfoEnabled to log.isWarnEnabled 2. simplify ExtensionLoader.createAdaptiveExtensionClassCode ( ) some code segment # # Brief changelog 1. dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java 2. dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your
【Unit Test】FailbackRegistry Test : recover method __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed
重构 ServiceBean 的 isDelay 方法，使其更符合语义 __EoT__ isDelay 方法目前返回值如下： - true : delay == null || delay == -1，表示不延迟导出服务 - false : delay > 0，表示延迟导出服务 我觉得 isDelay 方法返回值如下时，更合理一些： - true : 延迟导出服务 - false : 无需延迟导出服务 # # What is the purpose of the change Fix the wrong meaning of the method isDelay
polish the code for pull request 2658 __EoT__ # # What is the purpose of the change polish the code for https : //github.com/apache/incubator-dubbo/pull/2658 # # Brief changelog dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/AbstractTimerTask.java dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeClient.java dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeServer.java dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeartbeatTimerTask.java dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/ReconnectTimerTask.java dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeartBeatTaskTest.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross
Optimize heartbeat and reconnect task . __EoT__ Optimize heartbeat and reconnect task . 1.Use hashedWheelTimer . 2.Distinguish between reconnect and heartbeat . 3.Increase inspection cycle . related issue : https : //github.com/apache/incubator-dubbo/issues/2537
[ version 2.7.0 ] remove the StaticContext class and refactor the code related to Async __EoT__ # # What is the purpose of the change The class StaticContext is a Map which place anything to it and it will leave design risks if StaticContext is used easily and everywhere . # # Verifying this change - remove the class StaticContext - fix the testcases - refactor the part of using StaticContext which is mainly about Async
Optimize REGISTRIES field in AbstractRegistryFactory . __EoT__ 这里REGISTRIES在使用的时候都会先加锁，不存在多线程安全的问题，所以建议把ConcurrentHashMap改成HashMap，提高运行效率。 issue ： # 2685
fix pom for protostuff serialization __EoT__ # # What is the purpose of the change fix pom for protostuff serialization # # Brief changelog dubbo-all/pom.xml dubbo-bom/pom.xml dubbo-dependencies-bom/pom.xml dubbo-distribution/pom.xml dubbo-serialization/dubbo-serialization-protostuff/pom.xml # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the
[ Dubbo-2578 ] Remove author info __EoT__ Remove author info from RoundRobinLoadBalance
[ Dubbo-2683 ] Fix typo error in FAQ __EoT__ fix typo error in FAQ # # What is the purpose of the change change `` Dubbo support to specify '' to `` Dubbo supports specifying '' in FAQ # # Brief changelog change `` Dubbo support to specify '' to `` Dubbo supports specifying '' in FAQ # # Verifying this change NA Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does ,
enhance pull request 2618 __EoT__ # # What is the purpose of the change follow up for pull request 2618 # # Brief changelog dubbo-serialization/dubbo-serialization-protobuf/src/main/resources/META-INF.dubbo.internal/org.apache.dubbo.common.serialize.Serialization dubbo-serialization/dubbo-serialization-protostuff/pom.xml dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectInput.java dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffSerialization.java dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/Wrapper.java dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/utils/WrapperUtils.java dubbo-serialization/dubbo-serialization-protostuff/src/main/resources/META-INF.dubbo.internal/org.apache.dubbo.common.serialize.Serialization dubbo-serialization/dubbo-serialization-test/pom.xml dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffPersonOkTest.java dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffSerializationTest.java dubbo-serialization/pom.xml # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when
[ Dubbo-1983 ] Support Protobuf Serialization __EoT__ # # What is the purpose of the change close # 1983 # # Brief changelog This Protobuf support is based on [ Protostuff ] ( https : //github.com/protostuff/protostuff ) , so we do n't need to write proto files by hand . And this PR is based on @ vangoleo 's demo [ here ] ( https : //github.com/vangoleo/incubator-dubbo/tree/protobuf ) . Maybe some benchmarks will be helpful , and I will add them later . # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful
remove ServiceClassHolder and use the ApplicationModel replacedly __EoT__ # # What is the purpose of the change remove ServiceClassHolder which was created for only REST and use the ApplicationModel replacedly # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If
Code format __EoT__ # # What is the purpose of the change Optimize the code style of dubbo . # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change
解决与quartz集成报错问题 __EoT__ quartz初始化的Bean没有beanName，beanName=null，走这段代码的时候报空指针了。 org.springframework.boot.autoconfigure.quartz.AutowireCapableBeanJobFactory类的createJobInstance方法中使用this.beanFactory.initializeBean ( jobInstance , null ) ; 初始化的Bean，其beanName=null。 # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or
【Code Optimization】Optimize the doSelect method of RandomLoadBalance __EoT__ … of invoke of the getWeight method of the AbstractLoadBalance # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency
Our customized serialization id exceeds the maximum limit , now it can not work on 2.6.2 anymore . __EoT__ 前提： 我们自定义了序列化方式，serialization.getContentTypeId ( ) == 88 超出计算的最大值。 按照ExchangeCodec的逻辑，这个值最大允许32。 88在服务端经过计算，变成24，无法获取到序列化方式。 在2.6.0版本时，获取序列化方式，采用兼容处理 CodecSupport.java代码如下： `` ` public static Serialization getSerialization ( URL url ) { return ExtensionLoader.getExtensionLoader ( Serialization.class ) .getExtension ( url.getParameter ( Constants.SERIALIZATION_KEY , Constants.DEFAULT_REMOTING_SERIALIZATION ) ) ; } public static Serialization getSerialization ( URL url , Byte id ) { Serialization result = getSerializationById ( id ) ; if ( result == null ) { result = getSerialization ( url ) ; } return result ; } `` ` 上述代码会从SPI接口，根据url获取的参数，进一步获取。 在2.6.2版本时，获取序列化方式更改，根据id获取不到则抛出异常 `` ` public static Serialization getSerialization ( URL url , Byte id ) throws IOException { Serialization serialization = getSerializationById ( id ) ; String serializationName = url.getParameter ( Constants.SERIALIZATION_KEY , Constants.DEFAULT_REMOTING_SERIALIZATION ) ; // Check if `` serialization id '' passed from network matches the id on this side ( only take effect for JDK serialization ) , for security purpose . if ( serialization == null || ( ( id == 3 || id == 7 || id == 4 ) & & ! ( serializationName.equals ( ID_SERIALIZATIONNAME_MAP.get ( id ) ) ) ) ) { throw new
[ Dubbo -fix annotation bug ] Fix @ Reference bug __EoT__ # # What is the purpose of the change fix issue : https : //github.com/apache/incubator-dubbo/issues/2522 & https : //github.com/apache/incubator-dubbo/issues/2194 # # Brief changelog 1 . ` org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor # generateReferenceBeanCacheKey ` fix caching issues # # Verifying this change All test should be passed . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x
prototype for issue2570 __EoT__ …pring framework is absent # # What is the purpose of the change a prototype for issue # 2570 # # Brief changelog dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/initializer/DubboContextListener.java dubbo-config/dubbo-config-spring/src/main/resources/META-INF/web-fragment.xml # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the
Jacoco aggregate report __EoT__ # # What is the purpose of the change JaCoCo Maven goals used to work on single modules only : Tests are executed within the module and contributed coverage only to code within the same module . Dubbo is a multi module project which combine by api and their implements , current configuration is not suitable for Dubbo . Coverage reports were created for each module separately . In order to get right test coverage , we can use new goal ` maven goal jacoco : report-aggregate ` . This report aggregates coverage data across Maven modules . # # Brief changelog Change maven configuration . # # Verifying this change CI pass and coverage increase .
Optimize RoundRobinLoadBalance __EoT__ # # What is the purpose of the change fix : https : //github.com/apache/incubator-dubbo/issues/2578 # # Brief changelog Optimize RoundRobinLoadBalance # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed
[ Enhancement ] the algorithm of load issue on Windows __EoT__ @ alphatan -- - My research of this problem . According to [ this answer ] ( https : //stackoverflow.com/a/28751028/5671078 ) of the question `` Alternate of getSystemLoadAverage ( ) for Windows ? `` , the method ` getSystemLoadAverage ` of java.lang.management.OperatingSystemMXBean would return ` -1 ` in ` Windows ` . It 'd be suggested to use ` com.sun.management.OperatingSystemMXBean ` and its ` getSystemCpuLoad ( ) ` and ` getProcessCpuLoad ( ) ` instead .
Issue2583 __EoT__ # # What is the purpose of the change fix # 2583 # # Brief changelog dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/model/ApplicationModel.java dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Offline.java dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Online.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed ,
Remove unuse class . __EoT__ Remove unuse class . * DelegateExporter.java * DelegateInvoker.java
add javadoc to dubbo-all module __EoT__ `` ` < profiles > < profile > < id > release < /id > < build > < plugins > < plugin > < artifactId > maven-javadoc-plugin < /artifactId > < version > $ { maven_javadoc_version } < /version > < executions > < execution > < id > attach-javadoc < /id > < goals > < goal > jar < /goal > < /goals > < configuration > < doclint > none < /doclint > < /configuration > < /execution > < /executions > < configuration > < includeDependencySources > true < /includeDependencySources > < dependencySourceIncludes > < dependencySourceInclude > com.alibaba : dubbo-* < /dependencySourceInclude > < dependencySourceExclude > com.alibaba : hessian-* < /dependencySourceExclude > < /dependencySourceIncludes > < show > public < /show > < charset > UTF-8 < /charset > < encoding > UTF-8 < /encoding > < docencoding > UTF-8 < /docencoding > < links > < link > http : //docs.oracle.com/javase/7/docs/api < /link > < /links > < /configuration > < /plugin > < /plugins > < /build > < /profile > < /profiles > `` ` master and 2.6.x both need to add , for master ,
update lastest version to 2.6.4 __EoT__ # # What is the purpose of the change update lastest version to 2.6.4 # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new
[ Dubbo fix unit test ] fix registry unit test failed __EoT__ # # What is the purpose of the change fix registry unit test failed # # Brief changelog ` org.apache.dubbo.registry.support.AbstractRegistryFactoryTest # testRegistryFactoryIpCache ` refer here : https : //github.com/apache/incubator-dubbo/issues/2545 # # Verifying this change ci passed . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify
Optimize leastActiveSelect and weight test case __EoT__ Now the select is select a random one when there are several least active invokers and all of them are in warm up . After this pr , it will select also by weight and warm up . And fix a bug when two invoker 's active is same and weight not same . issue : https : //github.com/apache/incubator-dubbo/issues/904
A empty directory dubbo-config/dubbo-config-spring/src/test/resources/work after package source tgz __EoT__ The souce package contains a directory 'dubbo-config/dubbo-config-spring/src/test/resources/work ’ while the tag didn ’ t have . I guess it ’ s a temp directory generated by some unit tests , so I think it can be fixed within the next release .
org.apache.dubbo.common.utils.ConfigUtils # loadProperties ( java.lang.String , boolean , boolean ) miss windows scene __EoT__ # # # Environment * Dubbo version : dubbo-2.6.4 * Operating System version : windows 10 * Java version : JDK1.8 When run the testcase ( com.alibaba.dubbo.config.AbstractInterfaceConfigTest # checkApplication1 ) in windows environment , It will be wrong . So It should add scene judgement in windows environment ( org.apache.dubbo.common.utils.ConfigUtils # loadProperties ( java.lang.String , boolean , boolean ) , Line 220 ) . `` ` java if ( fileName.startsWith ( `` / '' ) ) { `` `` change to `` ` java if ( fileName.startsWith ( `` / '' ) ||fileName.matches ( `` ^ [ A-z ] : \\\\\\S+ $ '' ) ) { `` `` the testcase ( com.alibaba.dubbo.config.AbstractInterfaceConfigTest # checkApplication1 ) will go well .
code format __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please remember to
rm java 9 and 10 on travis __EoT__ # # What is the purpose of the change fix # 2558 , rm java 9 and 10 on travis # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency
JDK11 master ut failed __EoT__ `` ` 2018-09-19 03:25:53,034 WARN [ org.apache.dubbo.remoting.exchange.support.DefaultFuture : received ] - [ DUBBO ] The timeout response finally returned at 2018-09-19 03:25:53.034 , response Response [ id=1039 , version=null , status=20 , event=false , error=null , result=RpcResult [ result=Lower , exception=null ] ] , channel : /172.17.0.6:49932 - > /172.17.0.6:9010 , dubbo version : 2.7.0-SNAPSHOT , current host : 172.17.0.6 Tests run : 7 , Failures : 0 , Errors : 1 , Skipped : 0 , Time elapsed : 4.319 sec < < < FAILURE ! - in org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest testDubboProtocolWithMina ( org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest ) Time elapsed : 1.315 sec < < < ERROR ! org.apache.dubbo.rpc.RpcException : Invoke remote method timeout . method : enumlength , provider : dubbo : //127.0.0.1:9010/org.apache.dubbo.rpc.protocol.dubbo.support.DemoService ? client=mina , cause : Waiting server-side response timeout by scan timer . start time : 2018-09-19 03:25:51.798 , end time : 2018-09-19 03:25:53.032 , client elapsed : 0 ms , server elapsed : 1234 ms , timeout : 1000 ms , request : Request [ id=1039 , version=2.0.2 , twoway=true , event=false , broken=false , data=RpcInvocation [ methodName=enumlength , parameterTypes= [ class [ Lorg.apache.dubbo.rpc.protocol.dubbo.support.Type ; ] , arguments= [ [ Lorg.apache.dubbo.rpc.protocol.dubbo.support.Type ; @ 60e0cfe6
JDK10 master ut failed __EoT__ `` ` Running org.apache.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandlerTest Tests run : 6 , Failures : 0 , Errors : 1 , Skipped : 0 , Time elapsed : 0.129 sec < < < FAILURE ! - in org.apache.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandlerTest testList ( org.apache.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandlerTest ) Time elapsed : 0.02 sec < < < ERROR ! org.apache.dubbo.rpc.RpcException : Fail to start server ( url : dubbo : //127.0.0.1:20885/demo ? channel.readonly.sent=true & codec=dubbo & heartbeat=60000 ) Failed to bind NettyServer on /127.0.0.1:20885 , cause : Address already in use at org.apache.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandlerTest.testList ( ListTelnetHandlerTest.java:120 ) Caused by : org.apache.dubbo.remoting.RemotingException : Failed to bind NettyServer on /127.0.0.1:20885 , cause : Address already in use at org.apache.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandlerTest.testList ( ListTelnetHandlerTest.java:120 ) Caused by : java.net.BindException : Address already in use `` ` https : //api.travis-ci.org/v3/job/430398157/log.txt
Remove getSpringContext ( ) from org.apache.dubbo.config.spring.ServiceBean __EoT__ org.apache.dubbo.config.spring.ServiceBean # getSpringContext looks like a hack , we need to remove it .
Support for caching null values __EoT__ # # 优化缓存括展，支持缓存null值 当前CacheFilter存在无法缓存null值问题 但是某些rpc接口被设计成可能返回空值（比如跟据用户名查询用户信息接口，如果查询不到，返回null） # # 增加一个内部类包装待缓存的数据 static class ValueWrapper { private final Object value ; public ValueWrapper ( Object value ) { this.value = value ; } public Object get ( ) { return this.value ; } } # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify
解决了代码规范问题：在if/else/for/while/do语句中必须使用大括号 __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please remember to add
set ut timeout to 3000 __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed ,
Dubbo 's ExtensionLoader may be ca n't find custom Extension __EoT__ # # # Environment * Dubbo version : 2.6.3 * Operating System version : mac OS * Java version : 1.8 # # # Steps to reproduce this issue Dubbo通过 ExtensionLoader 加载各种SPI的实现，但是findClassLoader可能无法发现自定义SPI扩展点。 dubbo ExtensionLoader 代码： private void loadFile ( Map < String , Class < ? > > extensionClasses , String dir ) { String fileName = dir + type.getName ( ) ; try { Enumeration < java.net.URL > urls ; ClassLoader classLoader = findClassLoader ( ) ; if ( classLoader ! = null ) { urls = classLoader.getResources ( fileName ) ; } else { urls = ClassLoader.getSystemResources ( fileName ) ; } ... ... } private static ClassLoader findClassLoader ( ) { return ExtensionLoader.class.getClassLoader ( ) ; } 可以看到 ExtensionLoader 使用的是本身class所在的ClassLoader load 文件，当我们自定义的SPI扩展点和dubbo不在同一个classloader就会导致无法被load，这属于SPI的经典问题，可参考：https : //www.ibm.com/developerworks/cn/java/j-lo-classloader/index.html # minor1.5 建议修改为 org.springframework.util.ClassUtils 中更合理的实现方式： public static ClassLoader getDefaultClassLoader ( ) { ClassLoader cl = null ; try { cl = Thread.currentThread ( ) .getContextClassLoader ( ) ; } catch ( Throwable ex ) { // Can not access thread context ClassLoader - falling back ... } if ( cl == null ) { // No thread context class loader - >
Fix typos in serialization unit tests __EoT__ # # What is the purpose of the change Fix typos in serialization unit tests : persion - > person # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency
typo : leastIndexs- > leastIndexes __EoT__ # # What is the purpose of the change typo : leastIndexs- > leastIndexes # # Brief changelog typo : leastIndexs- > leastIndexes in org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance
fix some xsd error __EoT__ # # What is the purpose of the change 1. fix some xsd issue by adding schema location so it can pass xsd validation 2. web fragment can not have '- ' in its name ; change it to '_' Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a
change unit test port __EoT__ # # What is the purpose of the change change unit test port # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is
code promote : move constant field to Constants class __EoT__ # # What is the purpose of the change to make to code more standard and clear Just move constant field to Constants class and `` / '' will use Constants.PROTOCOL_SEPARATOR . Thanks
add jdk11 to travis ci __EoT__ # # What is the purpose of the change add jdk11 to travis ci java11 is coming : http : //openjdk.java.net/projects/jdk/11/ # # Brief changelog .travis.yml # # Verifying this change ci success
fix stable problem for unit cases __EoT__ # # What is the purpose of the change # 2492 # 2490 # 2484 # 2482 # 2462 # 2460 # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency
Update Readme __EoT__ # # What is the purpose of the change put time-to-response badge in README # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please
Update readme __EoT__ # # What is the purpose of the change Correct some typos . # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed
fix wording issue in dubbo-issue-report-template.md __EoT__ fix some wording issue . # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or
[ Dubbo-2446 ] Fix ClassNotFoundException when load Service Interface by parent ClassLoader __EoT__ # # What is the purpose of the change fix # 2446 # # Brief changelog Service Interface 采用 Invocation Interface 的 ClassLoader 进行加载 # # Verifying this change org.apache.dubbo.common.utils.ReflectUtils org.apache.dubbo.rpc.support.RpcUtils Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more
[ Dubbo-2424 ] Fix switch-case fall through in ChannelEventRunnable __EoT__ # # What is the purpose of the change Fix # 2424 # # Brief changelog Add missing ` break ` statement in ChannelEventRunnable # run # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little
format code style __EoT__ # # What is the purpose of the change code style format to make code more standard
debug for travis __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please remember
typo in junit : simle - > simple __EoT__ # # What is the purpose of the change typo in junit : simle - > simple # # Brief changelog typo in junit : simle - > simple # # Verifying this change none Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little
remove a redundant ' > ' __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed
Fix a typo __EoT__ # # What is the purpose of the change fix a small typo : Php - > PHP # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new
[ Dubbo-2413 ] Fix StreamUtils resource leak __EoT__ # # What is the purpose of the change Fix StreamUtils resource leak # # Brief changelog Update StreamUtils.java Update StreamUtilsTest.java # # Verifying this change UT passed Fix # 2413
Readme __EoT__ # # What is the purpose of the change update eco system section for README # # Brief changelog REAME.md # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed
update README __EoT__ # # What is the purpose of the change update README , to make the quick start self-explained . # # Brief changelog README.md # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or
Minor code refactoring __EoT__ # # What is the purpose of the change Minor code refactoring , no functional change . All of them are reported by IntelliJ IDEA . # # Brief changelog * remove unnecessary null check * fix typo * code simplification * etc . # # Verifying this change It should have no functional change . Follow this checklist to help us incorporate your contribution quickly and easily : - [ ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why .
if to switch case __EoT__ # # What is the purpose of the change to improve efficiency # # Brief changelog org.apache.dubbo.common.compiler.support.ClassUtils
typo : prvoiderService- > providerService ; connectSkiped- > connectSkipped __EoT__ # # What is the purpose of the change typo # # Brief changelog prvoiderService- > providerService ; connectSkiped- > connectSkipped # # Verifying this change none Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist .
Enable checkstyle and rat plugin for travis CI __EoT__ # # What is the purpose of the change Enable checkstyle and rat plugin for travis CI # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist .
Update several documentation links __EoT__ # # What is the purpose of the change Update several outdated link in README.md . # # Brief changelog Update README.md
fix travis cov __EoT__ # # What is the purpose of the change fix travis code coverage problem # # Brief changelog .travis.yml # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is
Direct return when the server goes down unnormally . __EoT__ Keep the unfinished request in every channel . When the server goes down un-normally , return the unfinished requests directly . The current way is to wait until timeout . issue : https : //github.com/apache/incubator-dubbo/issues/2184
[ Dubbo- support tag router feature ] Add a new Router implement -- TagRouter __EoT__ # # What is the purpose of the change Support tag router feature for dubbo . # # # some pain points ! [ isolation by feature ] ( https : //user-images.githubusercontent.com/11485990/43990937-2c4087c6-9d95-11e8-8e77-8d2b0b2418b0.png ) - fact1 : some applications changed at the same time in different branch , like A , B , C . - fact2 : some applications did n't change , but deploy repeatedly，like D , E . - fact3 : if a new feature need to be tested , all 5 application need to be deployed . - fact4 : isolation by feature is not friendly to parallel development . # # # use tag ! [ isolation by tag ] ( https : //user-images.githubusercontent.com/11485990/43990957-8b0508f4-9d95-11e8-8373-e522df81a227.png ) - fact : changed applications are incremental deployment # # # some cases ! [ some cases ] ( https : //user-images.githubusercontent.com/11485990/43990971-d7d709d4-9d95-11e8-8646-5275a8579953.png ) # # # usage - consumer `` ` RpcContext.getContext ( ) .setAttachment ( `` request.tag '' , '' red '' ) ; `` ` i suggest you can use filter or SPI to set this attachment , notice that RpcContext is bound to
supplemental change for pull request 1973 __EoT__ # # What is the purpose of the change supplemental change for PR # 1973 # # Brief changelog - add necessary content in LICENSE - move utility method from StringUtils to ClassHelper # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock
HashedWheelTimer __EoT__ HashedWheelTimer to check timeout future The class about HashedWheelTimer is from netty which with header like : `` ` /* * Copyright 2012 The Netty Project * * The Netty Project licenses this file to you under the Apache License , * version 2.0 ( the `` License '' ) ; you may not use this file except in compliance * with the License . You may obtain a copy of the License at : * * http : //www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing , software * distributed under the License is distributed on an `` AS IS '' BASIS , WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the * License for the specific language governing permissions and limitations * under the License . */ `` ` It will decrease circulate times compared to the old way .
java.lang.NoClassDefFoundError in com.alibaba : dubbo-rpc-thrift , due to dependency conflict issue __EoT__ # # # Environment * Dubbo version : com.alibaba : dubbo-rpc-thrift : jar:2.6.2 * Operating System version : Windows * Java version : Jdk 1.7 # # # Descirption Hi , there are two versions of **org.apache.httpcomponents : httpcore : jar** exist in com.alibaba : dubbo-rpc-thrift , and only **org.apache.httpcomponents : httpcore : jar:4.1.3** can be loaded during packaging process based on `` nearest wins strategy '' . However , **class org.apache.http.util.Args** only included in **org.apache.httpcomponents : httpcore : jar:4.4.6 : compile** which is shadowed by Maven . When your project referencing the missing class , java.lang.NoClassDefFoundError will be thrown . # # # Dependency tree `` ` com.alibaba : dubbo-rpc-thrift : jar:2.6.2 +- com.alibaba : dubbo-rpc-api : jar:2.6.2 : compile +- org.apache.thrift : libthrift : jar:0.8.0 : compile | +- org.slf4j : slf4j-api : jar:1.7.25 : compile ( version managed from 1.5.8 ) | +- commons-lang : commons-lang : jar:2.5 : compile | +- org.apache.httpcomponents : httpclient : jar:4.5.3 : compile ( version managed from 4.1.2 ) | | +- ( org.apache.httpcomponents : httpcore : jar:4.4.6 : compile - **omitted for conflict with 4.1.3** ) | |
replace the method httpclient which is annotated with “ @ Deprecated ” __EoT__
add log4j2 extension __EoT__ # # What is the purpose of the change # 1713 to add log4j2 for dubbo . # # Brief changelog add log4j2 framework . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or
When using telnet `` invoke '' method , if there is a [ null ] param , the response always be [ null ] __EoT__ dubbo > invoke com.alibaba.dubbo.demo.DemoService.sayHello ( null ) // null as parameter null reason : InvokeTelnetHandler.isMatch ( Class < ? > [ ] types , List < Object > args ) ... } else if ( ReflectUtils.isPrimitive ( arg.getClass ( ) ) ) { // there should judge arg is null first 原因： InvokeTelnetHandler.isMatch ( Class < ? > [ ] types , List < Object > args ) 中判断arg的类型时未做null值判断 , arg.getClass ( ) 抛出了空指针异常
Increase availability , make @ Adaptive try default extension when the specified one could n't be found . __EoT__ Take the following case : `` ` java @ SPI ( `` nop '' ) public interface DynamicConfigurationFactory { @ Adaptive ( { `` key1 '' , `` key2 '' } ) DynamicConfiguration getDynamicConfiguration ( URL url ) ; } `` ` `` ` properties zookeeper=org.apache.dubbo.config.dynamic.support.archaius.ArchaiusDynamicConfigurationFactory archaius=org.apache.dubbo.config.dynamic.support.archaius.ArchaiusDynamicConfigurationFactory apollo=org.apache.dubbo.config.dynamic.support.apollo.ApolloDynamicConfigurationFactory nop=org.apache.dubbo.config.dynamic.support.nop.NopDynamicConfigurationFactory `` ` 1 . Give a URL : `` ` dubbo : //0.0.0.0/xxx.DemoService ? key2=notexists `` ` There is no extension named ` notexists ` , so it will throw an IllegalStateException . But with this PR , getAdaptiveExtension ( ) will return the ` nop ` extension by default .
Qos enhancement __EoT__ # # What is the purpose of the change Serval qos enhancement # # Brief changelog * Not to accept foreign ip by default . * Log if fail to start qos server . # 2046 * Fix typo . * Simplify dubbo.xsd and sync with compatible version . # # Verifying this change Tested locally . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ X ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why
remote dubbo-all javadoc plugin __EoT__ # # What is the purpose of the change 1. remote dubbo-all javadoc plugin 2. add license info to test source file # # Brief changelog dubbo-all/pom.xml **/src/test/ # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency
change travis ci configuration __EoT__ # # What is the purpose of the change change travis ci configuration # # Brief changelog .travis.yml # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is
wrong default value defined on org.apache.dubbo.config.annotation.Reference # retries __EoT__ org.apache.dubbo.config.annotation.Reference # retries should have the default value consistent with Constants # DEFAULT_LOADBALANCE , which should be 2 instead of 0 .
Unit Test for dubbo-registry/dubbo-registry-api __EoT__ Sub-task of # 1690
Baiji 269 team 9 add unit test __EoT__ # # What is the purpose of the change fix issue # 2177 Team 9 Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please
FailoverClusterInvoker 使用泛化调用时，拿取正确的方法名称。 __EoT__ 修复使用FailoverCluster泛化调用时因为methodName得不到配置的重试次数 # 2108 # # What is the purpose of the change 使用FailoverCluster进行泛化调用 , FailoverClusterInvoker可以根据泛化的具体方法得到配置的重试次数。
Judge null for key and value in attachment in RpcContextFilter . __EoT__ Judge null for key and value in attachment in RpcContextFilter . If not , NullPointerException will be thrown in RpcContextFilter in some case . Fix # 2127 : https : //github.com/apache/incubator-dubbo/issues/2127 # issuecomment-408344327
[ Dubbo-2191 ] add timeout config to zookeeper client __EoT__ # # What is the purpose of the change Add timeout config for zookeeper registry Fix # 2191 Close # 1743 # # Brief changelog Read timeout config from url and set to client # # Verifying this change CI pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test
uniform module directory names __EoT__ # # What is the purpose of the change uniform module directory names # # Brief changelog renamed : all/pom.xml - > dubbo-all/pom.xml renamed : bom/pom.xml - > dubbo-bom/pom.xml renamed : dependencies-bom/pom.xml - > dubbo-dependencies-bom/pom.xml renamed : distribution/pom.xml - > dubbo-distribution/pom.xml renamed : distribution/src/assembly/bin-release.xml - > dubbo-distribution/src/assembly/bin-release.xml renamed : distribution/src/assembly/source-release.xml - > dubbo-distribution/src/assembly/source-release.xml modified : pom.xml # # Verifying this change run ` mvn clean install ` , success . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is
解析用户定义的URL时，当前太过粗暴，做下优雅调整 __EoT__ 目前程序支持配置不包含协议头的地址。 问题场景：有时候url已经配置好了 ‘ ? backup ’ ，只是没有写协议头。此时如果再一次按照原方案解析，会多拼接出来backup这样的错误信息，而且报的错误不明显，根本不知道哪里做了如上配置，需要查看dubbo实现逻辑才能推断该怎么配置这一段。 本次升级建议：如果在url中，有程序处理拼接的url参数 ‘ ? ’ 的，直接不做任何处理。 ( ‘ ? ’ 在当前逻辑里是拼接backup用的特殊符号。 ) 问题示例： 127.0.0.1:2181 ? backup=127.0.0.1:2182,127.0.0.1:2183 -- > 127.0.0.1:2181 ? backup=127.0.0.1:2182 ? backup=127.0.0.1:2183
ConsistentHashLoadBalance selectForKey can optimization __EoT__ Map.Entry < Long , Invoker < T > > entry = virtualInvokers.tailMap ( hash , true ) .firstEntry ( ) ; ==》 Map.Entry < Long , ` Invoker < T > > entry = virtualInvokers.ceilingEntry ( hash ) ;
Fix variable name __EoT__ # # What is the purpose of the change fix variable name # # Brief changelog fix routerkey routerKey # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is
Add compatible class for com.alibaba.dubbo.config.XXXConfig __EoT__ ApplicationConfig ReferenceConfig ServiceConfig ...
solve compatible issue with dubbo 2.5.9 , 2.5.10 __EoT__ # # What is the purpose of the change related to # 2174 Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please remember to add integration-test
[ Dubbo-2064 ] Ipv6 support __EoT__ # # What is the purpose of the change Add ipv6 support for Dubbo # 2064 # # Brief changelog * Support parsing ipv6 address in url * Support ipv6 multicast network * ipv6 support is available if ` java.net.preferIPv6Addresses ` is set to ` true ` # # Verifying this change How to test ipv6 support : dubbo-demo-provider.xml `` ` xml < beans xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : dubbo= '' http : //dubbo.apache.org/schema/dubbo '' xmlns= '' http : //www.springframework.org/schema/beans '' xsi : schemaLocation= '' http : //www.springframework.org/schema/beans http : //www.springframework.org/schema/beans/spring-beans-4.3.xsd http : //dubbo.apache.org/schema/dubbo http : //dubbo.apache.org/schema/dubbo/dubbo.xsd '' > < ! -- provider 's application name , used for tracing dependency relationship -- > < dubbo : application name= '' demo-provider '' / > < ! -- use multicast registry center to export service -- > < dubbo : registry address= '' multicast : //FF02:0:0:0:0:0:0 : FC:1234 '' / > < ! -- use dubbo protocol to export service on port 20880 -- > < dubbo : protocol name= '' dubbo '' port= '' 20880 '' / > < ! -- service implementation , as same as regular local
fix dubbo-rpc-http resouces setting name __EoT__ # # What is the purpose of the change fix dubbo-rpc-http resouces setting name # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant
fix subscription when enable monitor __EoT__ # # What is the purpose of the change same fix on monitor in 2.7.x because there is bug which willl block shutdown progress in 2.5.x and it was fixed in 2.6.3. related : # 2110 Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when
Annotation activate compatible __EoT__ # # What is the purpose of the change support @ Activate for compatible # # Brief changelog # # Verifying this change unit tests pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change
fix typos in ContextFilter.java __EoT__ fix typos # # What is the purpose of the change fix typos in ContextFilter.java line : 48 # # Brief changelog change from ` mreged ` to ` merged ` # # Verifying this change no Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when
change the log level __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please
[ Dubbo-1765 ] Fix ReferenceBean initialization issue __EoT__ # # What is the purpose of the change Fixed a bug described in [ Dubbo-1765 ] ( https : //github.com/apache/incubator-dubbo/issues/1765 ) If the provider is temporarily unavailable , the reference bean initialization will failed with exception . However , the initialized flag will be set to true , which will cause spring to hold a NULL_OBJECT cache . The subsequent call will always get a null instance . This change will allow the consumer to obtain the correct instance when provider become available . # # Brief changelog - Set initialized=false in ReferenceConfig when provider is not available . # # Verifying this change unit test passed Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request
Optimize a case in two thread call reconnect method . __EoT__ Add reconnection lock to control only one thread can can reconnect method . This will avoid problem in this case : Thread A reconnecting , and success , then send msg . Thread B reconnecting but invoke disconnect . Then the Thread A will send msg fail because of Thread B 's disconnecting call . The issue is here : https : //github.com/apache/incubator-dubbo/issues/944
GenericService. $ invoke Parameter support problem __EoT__ char [ ] type parameter support issues . Use Dubbo version : V2.6.2 ( consumer and provider versions are the same ) Use Protocol : dubbo Use Serialize : hessian2 Consumer debug information : ! [ image ] ( https : //user-images.githubusercontent.com/3387548/42010363-e944cb86-7ac0-11e8-8c27-6695d8f2681b.png ) ! [ image ] ( https : //user-images.githubusercontent.com/3387548/42016165-1b7e2e1e-7add-11e8-8e71-ad1b30a635e5.png ) Provider code : `` ` public String sayHello ( long [ ] num , int [ ] arg , char [ ] name ) ; `` ` Provider error : `` ` 2018-06-28 10:45:02.377 [ DubboServerHandler-192.168.6.47:20880-thread-102 ] ERROR com.alibaba.dubbo.rpc.filter.ExceptionFilter - [ DUBBO ] Got unchecked and undeclared exception which called by 192.168.6.47. service : com.jiuyescm.dubbo.test.api.MyClassService , method : sayHello , exception : java.lang.ClassCastException : java.lang.String can not be cast to [ C , dubbo version : 2.6.2 , current host : 192.168.6.47 java.lang.ClassCastException : java.lang.String can not be cast to [ C at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod ( Wrapper1.java ) ~ [ dubbo-2.6.2.jar:2.6.2 ] at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory $ 1.doInvoke ( JavassistProxyFactory.java:47 ) ~ [ dubbo-2.6.2.jar:2.6.2 ] at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke ( AbstractProxyInvoker.java:76 ) ~ [ dubbo-2.6.2.jar:2.6.2 ] at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke ( DelegateProviderMetaDataInvoker.java:52 ) ~ [ dubbo-2.6.2.jar:2.6.2 ] at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke ( InvokerWrapper.java:56 ) ~ [ dubbo-2.6.2.jar:2.6.2 ] at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke
[ dubbo-parent ] Fix demo code error in readme file __EoT__ correting the demo code in readme # # What is the purpose of the change correting the demo code in readme # # Brief changelog correting the demo code in readme # # Verifying this change Verified . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your
Remove pom element linkXRef __EoT__ # # What is the purpose of the change Fix the error `` Element linkXRef is not allowed here '' reported by Intellij IDEA 2018.1.6 ( Utimate Edition ) . The linkXRef element is n't defined as parameter in the `` check '' goal but in the `` checkstyle '' goal and the `` checkstyle-aggregate '' goal , according to the plugin.xml of maven-checkstyle-plugin:3.0.0 . See https : //maven.apache.org/plugins/maven-checkstyle-plugin/plugin-info.html for details . # # Brief changelog Remove the linkXRef element in root pom . # # Verifying this change CI passed Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the
[ issue-303 ] add the tag corethreads to the complex tag < dubbo : protocol > in dubbo.xsd __EoT__ # # What is the purpose of the change Add the missing tag corethreads to the complex tag < dubbo : protocol > in dubbo.xsd and relative code , with the unit test case
[ Dubbo - unit test coverage ] dubbo-common Unit test coverage __EoT__ # # What is the purpose of the change unit test coverage , refer : https : //github.com/apache/incubator-dubbo/issues/1680 # # Brief changelog dubbo-common ( beanutil & bytecode & compiler & extension ) . # # Verifying this change ci passed Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary
Optimize code style . __EoT__ The ExchangeChannel will be used in a inner class . Optimize it to final .
[ dubbo-2072 ] : need javadoc and articles for spring annotation use . __EoT__ # # What is the purpose of the change dubbo # 2072 : need javadoc and articles for spring annotation use . # # Brief changelog dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Service.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction ,
need javadoc and articles for spring annotation use . __EoT__ we need to add javadoc for all Dubbo 's spring annotations . Plus , we also need to provide more comprehensive tutorial to show how to use Dubbo with Spring . For example : `` ` java ** * Service * * @ export */ @ Documented @ Retention ( RetentionPolicy.RUNTIME ) @ Target ( { ElementType.TYPE } ) @ Inherited public @ interface Service { Class < ? > interfaceClass ( ) default void.class ; String interfaceName ( ) default `` '' ; String version ( ) default `` '' ; String group ( ) default `` '' ; String path ( ) default `` '' ; boolean export ( ) default false ; String token ( ) default `` '' ; boolean deprecated ( ) default false ; boolean dynamic ( ) default false ; String accesslog ( ) default `` '' ; int executes ( ) default 0 ; boolean register ( ) default true ; int weight ( ) default 0 ; String document ( ) default `` '' ; int delay ( ) default 0 ; String local ( ) default `` '' ; String
@ Service ( register=false ) is not work __EoT__ - [ * ] I have searched the [ issues ] ( https : //github.com/apache/incubator-dubbo/issues ) of this repository and believe that this is not a duplicate . - [ * ] I have checked the [ FAQ ] ( https : //github.com/apache/incubator-dubbo/wiki/FAQ ) of this repository and believe that this is not a duplicate . * Dubbo version : 2.6.2 * Operating System version : CentOS 7 * Java version : 1.8 @ Service ( interfaceClass = DubboSwaggerService.class , protocol = `` rest '' , register = false ) register is not work @ Documented @ Retention ( RetentionPolicy.RUNTIME ) @ Target ( { ElementType.TYPE } ) @ Inherited public @ interface Service { Class < ? > interfaceClass ( ) default void.class ; String interfaceName ( ) default `` '' ; String version ( ) default `` '' ; String group ( ) default `` '' ; String path ( ) default `` '' ; boolean export ( ) default false ; String token ( ) default `` '' ; boolean deprecated ( ) default false ; boolean dynamic ( ) default false ; String accesslog ( ) default
bugfix init reference dead lock __EoT__ # # What is the purpose of the change # 2052 dubbo 整合spring boot 的时候死锁， # # Brief changelog dubbo-config/dubbo-config-spring/org/apache/dubbo/config/spring/extension/SpringExtensionFactory # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or
rename log file from alibaba to custom-access __EoT__ # # What is the purpose of the change rename log file from alibaba to custom-access # # Brief changelog dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/AccessLogFilterTest.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the
[ Dubbo-1696 ] Enhance the test coverage part-17 : dubbo-rpc/dubbo-rpc-injvm module __EoT__ # # What is the purpose of the change Enhance the test coverage part-17 : dubbo-rpc/dubbo-rpc-injvm module # # Brief changelog Enhance the test coverage part-17 : dubbo-rpc/dubbo-rpc-injvm module # # Verifying this change test coverage enhance in codecov.io fixed # 1696
[ Dubbo-1698 ] Enhance the test coverage part-19 : dubbo-rpc/dubbo-rpc-thrift module __EoT__ # # What is the purpose of the change [ Dubbo-1698 ] Enhance the test coverage part-19 : dubbo-rpc/dubbo-rpc-thrift module # # Brief changelog [ Dubbo-1698 ] Enhance the test coverage part-19 : dubbo-rpc/dubbo-rpc-thrift module # # Verifying this change test coverage enhance in codecov.io fixed # 1698
[ Dubbo- unit test class not found ] fix class not found `` hi '' __EoT__ # # What is the purpose of the change fix unit test ` DubboInvokerAvilableTest & DubboLazyConnectTest ` class not found `` hi '' # # Brief changelog 1 . Replace url path `` hi '' to `` org.apache.dubbo.rpc.protocol.dubbo.IDemoService '' 2 . Move `` org.apache.dubbo.rpc.protocol.dubbo.IDemoService '' to the top # # Verifying this change unit test passed Follow this checklist to help us incorporate your contribution quickly and easily : - [ ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough
add README for compatible module __EoT__ # # What is the purpose of the change add README # # Brief changelog dubbo-compatible/README.md # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed ,
update README __EoT__ # # What is the purpose of the change update README # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please remember to add
[ Dubbo-1695 ] Enhance the test coverage part-16 : dubbo-rpc/dubbo-rpc-api module __EoT__ # # What is the purpose of the change add unit test Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed ,
[ dubbo-1689 ] : Enhance the test coverage part-10 : dubbo-plugin module __EoT__ # # What is the purpose of the change issue # 1689 : Enhance the test coverage part-10 : dubbo-plugin module # # Brief changelog dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little
[ Dubbo-1986 ] optimize redis connection release __EoT__ # # What is the purpose of the change Secure release of redis connections # 1986 # # Brief changelog Secure release of redis connections # # Verifying this change RedisProtocol.java Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when
[ dubbo-1689 ] : Enhance the test coverage part-10 : dubbo-plugin module __EoT__ # # What is the purpose of the change issue # 1689 : Enhance the test coverage part-10 : dubbo-plugin module # # Brief changelog dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/Server.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/protocol/QosProtocolWrapperTest.java # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock
[ dubbo-1689 ] : Enhance the test coverage part-10 : dubbo-plugin module __EoT__ # # What is the purpose of the change issue # 1689 : Enhance the test coverage part-10 : dubbo-plugin module # # Brief changelog dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OfflineTest.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/OnlineTest.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/QuitTest.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/TestRegistryFactory.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/util/CommandHelperTest.java dubbo-plugin/dubbo-qos/src/test/resources/META-INF/services/org.apache.dubbo.registry.RegistryFactory # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify
Enhance the test coverage part-10 : dubbo-plugin module __EoT__ Add unit test to dubbo-plugin module
fix # 1925 __EoT__ # # What is the purpose of the change fix # 1925 # # Brief changelog remove redundant comparison # # Verifying this change remove redundant comparison Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant
Fix a bug when the provider write a throwable into aysnc context __EoT__ * fix a bug when the provider write a throwable into aysnc context * sth doc * simple code
Enhancing IDE support for custom spring namespace elements ( dubbo ) __EoT__ when we add dubbo configuration in xml file , the IDE ( like IntelliJ ) starts warning me about ` Custom Spring Beans ` not being parsed . There is a quick fix for it , but it pops back as soon as any changes are made . It ’ s just a warning , everything will work fine at runtime . But annoying nonetheless .
fix old groupId __EoT__ # # What is the purpose of the change fix old groupId # # Brief changelog dubbo-remoting/dubbo-remoting-p2p/pom.xml # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please
[ dubbo-1689 ] : Enhance the test coverage part-10 : dubbo-plugin module __EoT__ # # What is the purpose of the change # 1689 : Enhance the test coverage part-10 : dubbo-plugin module # # Brief changelog dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/CommandContextFactoryTest.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/CommandContextTest.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/GreetingCommand.java dubbo-plugin/dubbo-qos/src/test/resources/META-INF/services/org.apache.dubbo.qos.command.BaseCommand # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic
[ Dubbo-1694 ] add test for p2p and zookeeper __EoT__ # # What is the purpose of the change add unit test for p2p remoting module add unit test for zookeeper remoting module # # Brief changelog this is part one for # 1694 , still working on p2p remoting module to add more test . # # Verifying this change CI Pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does ,
reformat the code style __EoT__ # # What is the purpose of the change reformat the code style for qos module # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change
Repackage to org apache __EoT__ # # What is the purpose of the change Repackage to org apache # # Brief changelog Repackage to org apache # # Verifying this change All test cases are pass . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist .
add an ExpiryCache for CacheFilter __EoT__ ExpiryCache - With the characteristic of expiration time
Enhance the test coverage part-10 : dubbo-plugin module __EoT__ Add unit test to dubbo-plugin module
[ dubbo-1920 ] remove commons-lang3 dependency __EoT__ # # What is the purpose of the change issue # 1920 : remove commons-lang3 dependency # # Brief changelog dependencies-bom/pom.xml dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/StringUtils.java dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/StringUtilsTest.java dubbo-plugin/dubbo-qos/pom.xml dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/textui/TKv.java dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/textui/TLadder.java dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/textui/TTable.java dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/textui/TTree.java # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better
java.net.BindException happens when delay-expose-service is enabled . __EoT__ when delayed exposing service is enabled : `` ` xml < dubbo : service delay= '' 5000 '' / > `` ` it is possible to have multiple services try to expose at the same time , therefore lead to java.net.BindException .
添加method class缓存 __EoT__ 在高并发情况下（QPS大于1000），RPC调用发起线程validation操作阻塞在 ` Class.forName ( methodClassName , false , Thread.currentThread ( ) .getContextClassLoader ( ) ) ` 上，特别是在与spring boot一起使用时，TomcatEmbeddedWebappClassLoader加载methodClass通常是耗时操作，不使用分组的情况下methodClass通常不存在
add java10 in travis dot yml __EoT__ # # What is the purpose of the change add add java10 in travis dot yml https : //github.com/apache/incubator-dubbo/issues/1521 # # Brief changelog .travis.yml pom.xml # # Verifying this change ci pass
[ Dubbo-1330 ] Fix Support MetaspaceSize and MaxMetaspaceSize vm args in java8+ __EoT__ # # What is the purpose of the change see # 1330 - Support ` MetaspaceSize ` and ` MaxMetaspaceSize ` in java8+ # # Brief changelog In linux and windows I use shell or batch to get java version by ` java -fullversion ` , you can see it in commit . In the commit , you can find I use ` JAVA_8_VERSION= '' 180 '' ` to compare java vesion . The reasion is that java version naming rule change in java 9 . > ` java -fullversion ` output example - in jdk1.7 - > java full version `` 1.7.0_79-b15 '' - in jdk1.7 - > java full version `` 1.8.0_152-b16 '' - in jdk9 - > java full version `` 9.0.4+11 '' I find many ` dos ` symbol in ` start.sh ` , if you run ` start.sh ` in linux , it may be a problem . I use ` dos2unix ` cmd to format the file . # # Verifying this change Test result in windows - jdk9 ! [ image ] ( https : //user-images.githubusercontent.com/6828647/35967816-01b849a4-0cfd-11e8-8ca9-a29e45a15cff.png ) - jdk1.8 !
Support protocol config for reference annotation __EoT__ # # What is the purpose of the change support protocol config for reference annotation # # Brief changelog support protocol config for reference annotation # # Verifying this change com.alibaba.dubbo.config.spring.beans.factory.annotation.AnnotationPropertyValuesAdapterTest Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency
[ dubbo-config ] parameter is an object of annotation class , it does n't have actual effect to invoke the key method of parameter object here , so we can delete the line of code ! __EoT__ # # What is the purpose of the change XXXXX # # Brief changelog XXXXX # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [
Fix a failed unit test on Windows __EoT__ # # What is the purpose of the change fix a failed unit test on windows # # Brief changelog IOUtilsTest.java 中 使用 System.lineSeparator ( ) 替换 \n # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross
unit test for UrlUtils __EoT__ # # What is the purpose of the change # 1682 : Enhance the test coverage part-4 : dubbo-common/src/main/java/com/alibaba/dubbo/common/status ( store|threadpoolutils ) modules # # Brief changelog dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/UrlUtilsTest.java # # Verifying this change XXXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency
Enhance the test coverage part-4 : dubbo-common/src/main/java/com/alibaba/dubbo/common/status ( store|threadpoolutils ) modules __EoT__ Add unit test , modules : dubbo-common/src/main/java/com/alibaba/dubbo/common/status dubbo-common/src/main/java/com/alibaba/dubbo/common/store dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool dubbo-common/src/main/java/com/alibaba/dubbo/common/utils
support placeholders in properties . __EoT__ # # What is the purpose of the change In the case of spring boot . https : //docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html # boot-features-external-config-placeholders-in-properties `` ` properties app.name=MyApp app.description= $ { app.name } is a Spring Boot application # # this configuration is failure dubbo.application.name= $ { app.name } `` ` `` ` java Caused by : java.lang.IllegalStateException : ApplicationConfig.application == null at com.alibaba.dubbo.config.AbstractConfig.appendParameters ( AbstractConfig.java:245 ) at com.alibaba.dubbo.config.AbstractConfig.appendParameters ( AbstractConfig.java:180 ) at com.alibaba.dubbo.config.ReferenceConfig.init ( ReferenceConfig.java:303 ) at com.alibaba.dubbo.config.ReferenceConfig.get ( ReferenceConfig.java:163 ) at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildReferenceBean ( ReferenceAnnotationBeanPostProcessor.java:352 ) at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.access $ 100 ( ReferenceAnnotationBeanPostProcessor.java:61 ) at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor $ ReferenceFieldElement.inject ( ReferenceAnnotationBeanPostProcessor.java:323 ) at org.springframework.beans.factory.annotation.InjectionMetadata.inject ( InjectionMetadata.java:88 ) at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.postProcessPropertyValues ( ReferenceAnnotationBeanPostProcessor.java:88 ) ... 26 more Caused by : java.lang.IllegalStateException : ApplicationConfig.application == null at com.alibaba.dubbo.config.AbstractConfig.appendParameters ( AbstractConfig.java:230 ) `` `
start.sh脚本问题 __EoT__ start.sh脚本中有三处使用ps命令的地方：第一处是ps -ef ~~~，第二处和第三处是ps -f ~~~。 但是ps -f并不能查出进程，我们在生产环境都统一改成了ps -ef，请问这里是不是有点小问题？ 执行命令日志如下： [ afei @ jtcrtvdra35 ~ ] $ ps -f | grep java afei 30036 28792 0 14:53 pts/1 00:00:00 grep -- color java [ afei @ jtcrtvdra35 ~ ] $ [ afei @ jtcrtvdra35 ~ ] $ ps -ef | grep java afei 325 1 0 Apr11 ? 11:43:37 java ... ... afei 1406 1 0 May18 ? 02:20:11 java ... ... ... ...
Enchance test coverage of dubbo cluster module __EoT__ # # What is the purpose of the change # 1679 Enhance the test coverage part-1 : dubbo-cluster module # # Brief changelog add some test case # # Verifying this change ci pass
unit test for ReflectUtils __EoT__ # # What is the purpose of the change # 1682 : Enhance the test coverage part-4 : dubbo-common/src/main/java/com/alibaba/dubbo/common/status ( store|threadpoolutils ) modules # # Brief changelog dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ReflectUtils.java dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ReflectUtilsTest.java # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency
deprecated hessian1 and move hessian-lite to dubbo group __EoT__ As dubbo does not use hessian1 , we need to delete it in hessian-lite . But consider compatibility , it 's recommended to deprecated it , and in next major release version , delete it . In addition , hessian-lite is a single module , it 's also recommended to move it to dubbo group from dubbo codebase .
After the dubbox merge , can we integrate the swagger UI to generate the API documentation for the rest protocol ? __EoT__ dubbo version : ` 2.6.1 ` > dubbox 合并进来后，如何使用swagger来生成rest协议的api文档？或者说，集成swagger UI进来的大致思路是什么呢？ > After the dubbox merge , how do you use the swagger to generate the API documentation for the rest protocol ? Or , what 's the general idea of integrating the swagger UI ?
unit test for common-utils __EoT__ # # What is the purpose of the change # 1682 : Enhance the test coverage part-4 : dubbo-common/src/main/java/com/alibaba/dubbo/common/status ( store|threadpoolutils ) modules # # Brief changelog dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/NetUtils.java dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/PojoUtils.java dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/LRUCacheTest.java dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/NamedThreadFactoryTest.java dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/NetUtilsTest.java dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/PojoUtilsTest.java # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better
Enhance the test coverage part-4 : dubbo-common/src/main/java/com/alibaba/dubbo/common/status ( store|threadpoolutils ) modules __EoT__ Add unit test , modules : dubbo-common/src/main/java/com/alibaba/dubbo/common/status dubbo-common/src/main/java/com/alibaba/dubbo/common/store dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool dubbo-common/src/main/java/com/alibaba/dubbo/common/utils
Restore the bug that attachment has not been updated in the RpcContext when the Dubbo built-in retry mechanism is triggered __EoT__ # # What is the purpose of the change Restore the bug that attachment has not been updated in the RpcContext when the Dubbo built-in retry mechanism is triggered . We found that when Dubbo through Filter to Provider traceId and spanId ( transfer access to distributed tracking parameters used by the system ) , when the trigger Consumer Dubbo retry mechanism , Provider ( response but at the Consumer end of overtime ) the data is always the first call to traceId and spanId ( Consumer in retry timeout the RpcContext.getContext ( .SetAttachment ) ( String key , String value ) set up a new traceId and spanId did not pass in the past ) . This bug desc also same as https : //github.com/alibaba/dubbo/issues/513 # # Brief changelog Restore the bug that attachment has not been updated in the RpcContext when the Dubbo built-in retry mechanism is triggered # # Verifying this change When modified , when the Dubbo retry mechanism is triggered , the new RpcContext attachments can be passed to Provider as desired . Follow
some minor adjustment __EoT__ # # What is the purpose of the change 1.change variable name 2.change compare
[ Dubbo-1684 ] add unit test for dubbo spring config __EoT__ # # What is the purpose of the change Add test for dubbo spring config module Close # 1684 # # Brief changelog + ignore AnnotationBean in codecov + replace junit.framework.Assert ; to org.junit.Assert ; + add unit test # # Verifying this change CI Pass somehow even master branch fail in my fork repo ... I guess travis ci has some issue . Hope pull request CI can pass in dubbo repo travis ci . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line
[ Dubbo-1693 ] Enhance the test coverage part-14 __EoT__ # # add unit test [ # 1693 ] ( https : //github.com/apache/incubator-dubbo/issues/1693 ) dubbo-remoting/dubbo-remoting-mina dubbo-remoting/dubbo-remoting-netty dubbo-remoting/dubbo-remoting-netty4 # # Brief changelog - add unit test for netty4 - modified some test code # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction
Enhance the test coverage part-4 : dubbo-common/src/main/java/com/alibaba/dubbo/common/status ( store|threadpoolutils ) modules __EoT__ Add unit test , modules : dubbo-common/src/main/java/com/alibaba/dubbo/common/status dubbo-common/src/main/java/com/alibaba/dubbo/common/store dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool dubbo-common/src/main/java/com/alibaba/dubbo/common/utils
update CXF to latest version and add test case for webservice protocol __EoT__ # # What is the purpose of the change update CXF to latest version 3.2.4 and add test case for webservice protocol # # Brief changelog update CXF to latest version 3.2.4 and add test case for webservice protocol # # Verifying this change 1.Running test case 2.Verifying # 1560
Typo of destory __EoT__ branch : master , version : 2.6.2-SNAPSHOT RegistryDirectory , line 562 < img width= '' 943 '' alt= '' image '' src= '' https : //user-images.githubusercontent.com/6971152/40523539-abfd7142-6008-11e8-8296-791017c9d511.png '' > ProtocolConfig # destory ( ) , line 457 Fix : destory - > destroy
Use InternalThreadLocal in consumer side __EoT__ Change ThreadFactory for consumer side which is to use InternalThreadLocal in RpcContext .
dbindex support in redis __EoT__
CacheFilter , when value is null , it will throw NPE ( if use ehcache for jcache ) , why not check null here __EoT__ com.alibaba.dubbo.cache.filter.CacheFilter when value is null , it will throw NPE ( if use ehcache for jcache ) , why not check null here ? if the value is null , maybe we have no need to cache it . ` package com.alibaba.dubbo.cache.filter ; public class CacheFilter implements Filter { private CacheFactory cacheFactory ; public void setCacheFactory ( CacheFactory cacheFactory ) { this.cacheFactory = cacheFactory ; } public Result invoke ( Invoker < ? > invoker , Invocation invocation ) throws RpcException { if ( cacheFactory ! = null & & ConfigUtils.isNotEmpty ( invoker.getUrl ( ) .getMethodParameter ( invocation.getMethodName ( ) , Constants.CACHE_KEY ) ) ) { Cache cache = cacheFactory.getCache ( invoker.getUrl ( ) .addParameter ( Constants.METHOD_KEY , invocation.getMethodName ( ) ) ) ; if ( cache ! = null ) { String key = StringUtils.toArgumentString ( invocation.getArguments ( ) ) ; if ( cache ! = null & & key ! = null ) { Object value = cache.get ( key ) ; if ( value ! = null ) { return new RpcResult
dubbo schema compatibility __EoT__ In the upcoming release ` 2.6.2 ` , the schema namespace is changed from http : //code.alibabatech.com/schema/dubbo to http : //dubbo.apache.org/schema/dubbo . This will lead to compatibility issue . We need to address this issue in the next release like this : 1. introduce the original dubbo.xsd in META-INF/compat 2. change spring.schemas to : `` ` properties http\ : //dubbo.apache.org/schema/dubbo/dubbo.xsd=META-INF/dubbo.xsd http\ : //code.alibabatech.com/schema/dubbo/dubbo.xsd=META-INF/compat/dubbo.xsd `` ` 3. change spring.handlers to : `` ` properties http\ : //dubbo.apache.org/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler http\ : //code.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler `` `
dubbo schema compatibility __EoT__ In the upcoming release ` 2.6.2 ` , the schema namespace is changed from http : //code.alibabatech.com/schema/dubbo to http : //dubbo.apache.org/schema/dubbo . This will lead to compatibility issue . We need to address this issue in the next release like this : 1. introduce the original dubbo.xsd in META-INF/compat 2. change spring.schemas to : `` ` properties http\ : //dubbo.apache.org/schema/dubbo/dubbo.xsd=META-INF/dubbo.xsd http\ : //code.alibabatech.com/schema/dubbo/dubbo.xsd=META-INF/compat/dubbo.xsd `` ` 3. change spring.handlers to : `` ` properties http\ : //dubbo.apache.org/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler http\ : //code.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler `` `
Enhance the test coverage part-4 : dubbo-common/src/main/java/com/alibaba/dubbo/common/status ( store|threadpoolutils ) modules __EoT__ Add unit test , modules : dubbo-common/src/main/java/com/alibaba/dubbo/common/status dubbo-common/src/main/java/com/alibaba/dubbo/common/store dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool dubbo-common/src/main/java/com/alibaba/dubbo/common/utils
make unit test stable __EoT__ # # What is the purpose of the change make thread-pool unit test stable # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed
Fix bug in InternalThreadLocal and provides unit test __EoT__ - Fix bug in InternalThreadLocal which cause a execption in method removeAll - Provide unit test for InternalThreadLocal
Thread pool unit test __EoT__ # # What is the purpose of the change unit test for package com.alibaba.dubbo.common.threadpool # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed
unit test for SimpleDataStore __EoT__ # # What is the purpose of the change unit test for SimpleDataStore # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed ,
New threadLocal provides more performance . __EoT__ Faster ThreadLocal impl in internal use * Used in RpcContext ` s LOCAL field . * Compatible traditional ThreadLocal . * Faster get than the traditional ThreadLocal .
unit test for com.alibaba.dubbo.common.status.support __EoT__ # # What is the purpose of the change unit test for com.alibaba.dubbo.common.status.support # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed ,
Extracting public code to the parent class __EoT__ Extracting public code to the parent class
clean up : finish unit test for config-api __EoT__ # # What is the purpose of the change finish unit test for config-api module , remove useless classes and move class into right packages . # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little
[ Dubbo-1687 ] Add unit tests for dubbo-filter-validation module __EoT__ # # What is the purpose of the change Add unit tests for dubbo-filter-validation module , in order to increase the overall test coverage . more details , please refer to # 1687
add test for monitor module __EoT__ # # What is the purpose of the change Add unit test for monitor module Close # 1688 # # Brief changelog Add test for dubbo-monitor-api Add test for dubbo-monitor-default # # Verifying this change CI PASS https : //travis-ci.org/diamondblack/incubator-dubbo/builds/375168584 Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction
[ Dubbo-1254 ] Upgrade tomcat version to 8.5.31 # 1254 __EoT__ # # What is the purpose of the change Upgrade tomcat version to 8.5.31 , which fix # 1254 # # Brief changelog * Upgrade tomcat version to 8.5.31 * Remove dependency to tomcat-embed-logging-juli since it is no longer needed . # # Verifying this change Unit test passed . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how ,
unit test for ServiceConfig __EoT__ # # What is the purpose of the change unit test for ServiceConfig # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change
Such logic already exists in findAnnotationName __EoT__ # # What is the purpose of the change Such logic already exists in findAnnotationName.Remove duplicate code # # Brief changelog ExtensionLoader Remove logical repeat code # # Verifying this change 1.start DubboDemoProvider 2.start DubboDemoConsumer Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better
fix hessian-lite spelling mistake __EoT__ # # What is the purpose of the change fix hessian-lite spelling mistake # # Brief changelog Only TestCases are changed # # Verifying this change testcase all pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist .
unit test for RegistryConfigTest __EoT__ # # What is the purpose of the change unit test for RegistryConfigTest # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change
[ Dubbo-1744 ] Enable tcp no delay for netty 3 server implementation __EoT__ # # What is the purpose of the change Fix # 1744 # # Brief changelog Enable ` TCP_NODELAY ` for netty 3 server implementation # # Verifying this change The accepted channel 's socket in server side returns true when calling java.net.Socket # getTcpNoDelay Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why .
Config api unit test __EoT__ # # What is the purpose of the change part of unit test for config-api module # # Brief changelog unit test for config-api module # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist
Extension of LoadBalance ( a small suggestion for loadbalance policy when there 's less than 2 providers ) __EoT__ 暴露1个或者2个服务时 , 无法扩展到SPI- > LoadBalance ... .能否将逻辑抽象到abstractLoadBalance，毕竟1个的默认选择，和2个的退化轮询也属于选择负载的方向，也能方便重写性扩展，有助于筛选参数和自定义筛选invokers。这样C端扩展点也将会更灵活
unit test for dubbo-config-api __EoT__ # # What is the purpose of the change unit test for AbstractMethodConfig , AbstractReferenceConfig , AbstractServiceConfig # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new
checkMultiExtension in com.alibaba.dubbo.config.AbstractInterfaceConfig should be in setter instead of getter __EoT__ checkMultiExtension in com.alibaba.dubbo.config.AbstractInterfaceConfig should be in setter instead of getter `` ` java @ Parameter ( key = Constants.INVOKER_LISTENER_KEY , append = true ) public String getListener ( ) { checkMultiExtension ( InvokerListener.class , `` listener '' , listener ) ; return listener ; } public void setListener ( String listener ) { this.listener = listener ; } `` `
[ Dubbo-1681 ] add test for dubbo common module __EoT__ # # What is the purpose of the change Improve unit test for common module . `` ` dubbo-common/src/main/java/com/alibaba/dubbo/common/concurrent dubbo-common/src/main/java/com/alibaba/dubbo/common/io dubbo-common/src/main/java/com/alibaba/dubbo/common/json dubbo-common/src/main/java/com/alibaba/dubbo/common/logger `` ` Close # 1681 # # Brief changelog + Add test for concurrent , io and logger . + Json module is deprecate since last year , ignore it in codecov config # # Verifying this change CI Pass https : //travis-ci.org/diamondblack/incubator-dubbo/builds/372700464 Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description
[ Dubbo-1687 ] Enhance test coverage for dubbo filter __EoT__ # # What is the purpose of the change Add more unit tests to increase test coverages for dubbo filter module more details , please refer to # 1687 Thanks !
dispatcher : execution __EoT__ Dubbo官方的说法是：dispatcher配置为execution时候 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行。 但是我在源码中却没有发现其处理逻辑，相反其与all几乎一样，除了在默认的executor找不到时候会去找另外executor和捕捉了异常。 所以具体的execution到底是怎么生效的呢
[ Dubbo-1659 ] Optimize_hessian_desr_performance __EoT__ # # What is the purpose of the change compare with hessian4 ( 4.0.37 ) and figure out why hessian4 ( 4.0.37 ) performs much better than hessian-lite ( 3.2.2 ) in deserialization . # # Brief changelog Hessian2Input # # Verifying this change unit test pass performance test pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ]
Add test coverage check for pull request and set threshold as 0.1 % __EoT__ # # What is the purpose of the change Add test coverage check for pull request # # Brief changelog + modify codecov configuration for pull request only + set threshold as 0.1 % + reviewed https : //codecov.io/gh/apache/incubator-dubbo/pulls . for small change , the coverage change is round 0.01 % -- 0.06 % . As discussed in mail list , considering small change , I put threshold as 0.1 % # # Verifying this change Codecov config is valid . ! [ image ] ( https : //user-images.githubusercontent.com/659135/39284500-30d6fbba-4946-11e8-991a-d759b8235c4e.png )
update NOTICE __EoT__ # # What is the purpose of the change update content of NOTICE # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed
use mockito to replace easymock and jmockit __EoT__ # # What is the purpose of the change use mockito to replace easymock # # Brief changelog Remove dependency for easymock and jmockit Add dependency for mockito Migrate easymock test to mockito test base on mockito doc ( https : //github.com/mockito/mockito/wiki/Mockito-vs-EasyMock ) # # Verifying this change CI Pass ( https : //travis-ci.org/diamondblack/incubator-dubbo/builds/371112027 )
Spring Framework / Spring Boot Enhancements __EoT__ # # What is the purpose of the change * Bugfix : Legacy Spring annotation-driven issues on placeholder . * Refactor : The binder for Dubbo 's config beans in order to adapter for Spring Framework and Spring Boot 1.x/2.0 * Enhancement : Extraction of the Ops methods for Spring Boot Acutator # # Brief changelog * [ Enhancement ] placeholder supports on Dubbo Annotation # 1317 * [ Enhancement ] Add configuration properties of binder for Dubbo 's config beans # 1464 * [ Enhancement ] Dubbo Config Bindings supports customized DataBinder # 1278 * [ Refactor ] ReferenceAnnotationBeanPostProcessor add Ops methods # 1277 # # Verifying this change Run test-cases Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the
[ DUBBO-9 ] add apache-rat-plugin to check asf license header __EoT__ # # What is the purpose of the change add apache-rat-plugin to check asf license header for https : //issues.apache.org/jira/browse/DUBBO-9 As discussed in the [ mail list ] ( https : //lists.apache.org/list.html ? dev @ dubbo.apache.org:2018-3 : How % 20to % 20add % 20Apache % 20license % 20head % 20to % 20the % 20files % 20of % 20hessian-lite % 20sub % 20project ) , the hessian_lite sub-project is excluded from check # # Brief changelog add missed asf license headers # # Verifying this change CI pass
Method extraction & Unnecessary code remove & Typo fix __EoT__ - Break old `` loadFile '' into pieces , improve readability . - Remove some unnecessary code . - Some typo fix . In conclusion , this change has no actual effects , just some code improvement .
[ Dubbo-monitor ] change monitor log level __EoT__ # # What is the purpose of the change fix # 1439 # # Brief changelog change monitor log level to **Debug** # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the
Mirror improvement for test cases in dubbo-rpc-api module __EoT__ # # What is the purpose of the change In dubbo-rpc-api module : 1 . Since junit.framework.Assert are deprecated since Junit 4 and other test case classes in this module have already use org.junit.Assert for instead , it is necessary to update related codes in StatItemTest and RpcUtilsTest . 2 . Make codes more easy to read # # Brief changelog In dubbo-rpc-api module : 1 . Use org.junit.Assert instead of junit.framework.Assert ( @ Deprecated since Junit 4 ) 2 . Use assertTrue and other assert methods through static import to make codes easier to read # # Verifying this change Test cases run with success
add more unit test for registry modules __EoT__ # # What is the purpose of the change add more unit test for registry modules # # Brief changelog + add embedded redis to support redis registry unit test + add unit test for zookeeper registry + add unit test for Multicast registry # # Verifying this change CI Pass
[ Dubbo-Config ] replace by Constants . __EoT__ # # What is the purpose of the change Do n't direct use String . # # Brief changelog Replace by Constants in ServiceConfig # # Verifying this change pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist
exclude dubbo-demo when calc coverage __EoT__ # # What is the purpose of the change Exclude ` dubbo-demo ` project when calc coverage # # Brief changelog Add ignore config for codecov # # Verifying this change CI Passs
Inaccessible xml schema __EoT__ In the demo code we have dubbo-demo-provider.xml `` ` xml < ? xml version= '' 1.0 '' encoding= '' UTF-8 '' ? > < beans xmlns= '' http : //www.springframework.org/schema/beans '' xmlns : xsi= '' http : //www.w3.org/2001/XMLSchema-instance '' xmlns : dubbo= '' http : //code.alibabatech.com/schema/dubbo '' xsi : schemaLocation= '' http : //www.springframework.org/schema/beans http : //www.springframework.org/schema/beans/spring-beans.xsd http : //code.alibabatech.com/schema/dubbo http : //code.alibabatech.com/schema/dubbo/dubbo.xsd '' > < dubbo : application name= '' demo-provider '' / > < dubbo : registry address= '' multicast : //224.5.6.7:1234 '' / > < dubbo : protocol name= '' dubbo '' port= '' 20880 '' / > < dubbo : service interface= '' com.alibaba.dubbo.demo.DemoService '' ref= '' demoService '' / > < bean id= '' demoService '' class= '' com.alibaba.dubbo.demo.provider.DemoServiceImpl '' / > < /beans > `` ` The schema location ` http : //code.alibabatech.com/schema/dubbo/dubbo.xsd ` is not accessible currently . It is not a problem using Intellij IDEA since it will find it automatically in the packaged jar file . However if we are using Eclipse , the following error message will occur : `` ` cvc-complex-type.2.4.c : The matching wildcard is strict , but no declaration can be found for
Upgrade spring version to 4.3.16.RELEASE . __EoT__ # # What is the purpose of the change Upgrade spring version . # # Brief changelog Upgrade spring version to 4.3.16.RELEASE # # Verifying this change UT passed . Follow this checklist to help us incorporate your contribution quickly and easily : - [ ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new
when use dubbo mock , it will not print producer exception stack in at warn level logger __EoT__ I found miss producer exception stack log when i use dubbo mock function . It is hard for me to troubleshot . And then debug found producer exception will throw in function FailoverClusterInvoker.doInvoke ( ) and be catch in com/alibaba/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java:80 ! [ image ] ( https : //user-images.githubusercontent.com/6905006/38197721-3d7ba2f4-36bc-11e8-9bb1-3ca39e2eadc4.png ) but it show me print exception stack log use info ( ) after logger.isWarnEnabled ( ) . As we all know , log level equal or below warn , isWarnEnabled ( ) is return true , so it will ok if we use info level , but not at warn . so why we use info ( ) after isWarnEnabled ( ) ? thx for @ kimmking follow-up
[ dubbo-1521 ] add java 9 in travis yml __EoT__ # # What is the purpose of the change add java9 in ci # # Brief changelog use jacoco fix reflection issue # # Verifying this change ci pass coverage in codecov.io close # 1521
[ Dubbo-1510 ] dubbo monitor missing parameters __EoT__ fix # 1510 # # What is the purpose of the change 1. dubbo monitor collection missing the ` group ` ` version ` ` dubbo ` parameters 2. dubbo monitor interval default set to 60s and ca n't override by outside setting # # Brief changelog 1. dubbo monitor parameters add ` group ` , ` version ` , ` dubbo ` parameters 2. monitor interval can be override by outside setting # # Verifying this change XXXX
Extension : Eager Thread Pool __EoT__ A thread pool that can provide faster processing speeds when there are more tasks ( of course it consumes more resources ) * When the number of tasks exceeds the core size , a new thread is first started to execute the task instead of putting it into the queue . * When the number of tasks is lower than the core size for a long time , the core size threads are maintained and redundant threads are recycled . * Compared to the fixed pool：When there are more tasks , provide more workers to handle the tasks . * Compared to the cached pool：The task queue in the cached pool is actually a SynchronousQueue and does not have the ability to cache tasks . * Whether to fail fail or put into a queue when a thread runs out：Both are feasible and need to consider which way should be applied according to the business scenario . Delayed scenarios are not allowed . Failfast is more reasonable than queues . However , if there is a certain tolerance for delays , queues are more reasonable than failfast . * Reference : Tomcat 's thread
remove the method with the same function but the different name in Ne… __EoT__ Remove a method named getLogHost which has the same function with getLocalHost .
update travis_wait 30 __EoT__ update travis_wait 30min to prevent travis timeout # # What is the purpose of the change update travis_wait 30min to prevent travis timeout # # Brief changelog update travis_wait 30min to prevent travis timeout # # Verifying this change only affect ci Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little
[ Dubbo-1513 ] add checkstyle with basic rule __EoT__ # # What is the purpose of the change Add checkstyle plugin . Apply some basic checkstyle rule like AvoidStarImport , OuterTypeFilename . Also add file header check for Apache License . Close # 1513 # # Brief changelog Apply checkstyle maven plugin in parent pom file . Only active in jdk 1.8 and above . ` checkstyle-header.txt ` is header file which every file should has it . There are some rule should apply according to https : //github.com/apache/incubator-dubbo/blob/master/CONTRIBUTING.md # code-conventions for example . line length must less than 120 . But current files need fix . There are too many work for this . We can have separate task for them later . # # Verifying this change CI Pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes
Remove unnecessary StringBuilder __EoT__ Relates to # 1378 .
Remove unnecessary StringBuilder __EoT__ Relates to # 1378 .
typo fix __EoT__ fix some typos .
update pom license , scm , maillists , issuemanagement , add DISCLAIMER __EoT__ # # What is the purpose of the change Update pom for into apache incubator , partial fix for this issue : https : //issues.apache.org/jira/projects/DUBBO/issues/DUBBO-7 ? filter=allopenissues # # Brief changelog 1. update pom.xml license 2. update scm , mailLists , issueManagement , organization 3. add DISCLAIMER # # Verifying this change All unit tests are pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what
add unit test for remoting module __EoT__ # # What is the purpose of the change Increase unit test coverage for remoting module # # Brief changelog + add test for remoting-netty4 and remoting-grizzly + use NetUtils to get free port for ` JettyHttpBinderTest ` and ` TomcatHttpBinderTest ` + add curator-test library to fix zookeeper test # # Verifying this change CI pass
Fix typo for remoting module __EoT__ # # What is the purpose of the change Fix typo from ` Disconnectd ` to ` Disconnected ` Fix typo from ` trimemdLen ` to ` trimmedLen `
update readme __EoT__ # # What is the purpose of the change update project info in readme
Locale deserialize 'zh-hant_CN ' __EoT__ ` zh-hant_CN ` will convert to ` zh_HANT_cn ` Locale include ( language , country , variant ) , Locale.toString ( ) use '\_ ' to split then ` { language } _ { country } _ ( { variant } _ # | # ) { script } - { extensions } ` but Jackson deserialize Locale use '- ' or '\_ ' : ( code : [ LocaleHandle.readResolve ( ) ] ( https : //github.com/alibaba/dubbo/blob/master/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/LocaleHandle.java # L63 ) [ iana language-tags ] ( https : //www.iana.org/assignments/language-tags/language-tags.xml # Mark_Davis ) `` ` zh-Hant Chinese , in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-CN PRC Mainland Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-HK Hong Kong Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-MO Macao Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-SG Singapore Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-TW Taiwan Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] `` ` [ rfc4647 language lookup ] ( https : //tools.ietf.org/html/rfc4647 # section-3.4 ) `` ` Example of a Lookup Fallback Pattern Range to match : zh-Hant-CN-x-private1-private2 1.
Update ServiceConfig.java __EoT__ replace string by Constants # # What is the purpose of the change do n't direct use String . # # Brief changelog replace string by Constants # # Verifying this change passed
comments in URL class are incorrect __EoT__ # # What is the purpose of the change correct the comments in URL class # # Brief changelog correct the protocol description for file url # # Verifying this change correct the protocol description for file url
Update DemoServiceImpl.java __EoT__ 修改一个小小的微不足道的问题。 # # What is the purpose of the change XXXXX # # Brief changelog XX # # Verifying this change XXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change is committed , please remember to add
add ASF license head __EoT__ # # What is the purpose of the change add apache license # # Brief changelog Files that do not contain ` `` Apache Software Foundation '' ` strings # # Verifying this change use ` shell script ` to find files that do not contain ` `` Apache Software Foundation '' ` strings： `` ` cd dubbo find . -type f -ctime 0| xargs grep -L `` Apache Software Foundation '' `` `
Update Readme to add English & Chinese doc link __EoT__ add d English & Chinese doc link # # What is the purpose of the change add English & Chinese doc link in readme # # Brief changelog add English & Chinese doc link in readme
add ASF license head __EoT__ # # What is the purpose of the change add apache license # # Brief changelog Files that do not contain ` `` Apache Software Foundation '' ` strings # # Verifying this change use ` shell script ` to find files that do not contain ` `` Apache Software Foundation '' ` strings： `` ` cd dubbo find . -type f -ctime 0| xargs grep -L `` Apache Software Foundation '' `` `
merge issue 1401 to 2.5.x __EoT__ # # What is the purpose of the change merge # 1401 to 2.5.x branch .fix number type is lost in yaml config file # # Brief changelog modified files in # 1401 # # Verifying this change CI pass
Fix typo __EoT__ Fix the typo of ProviderConsumerRegTable.registerConsuemr .
fix heartbeat spelling error __EoT__ # # What is the purpose of the change fix heartbeat spelling error
When using method level cache , no matter what i config , it 's always LruCache . __EoT__ consumer配置： < dubbo : reference id= '' demoService '' check= '' false '' interface= '' com.alibaba.dubbo.demo.DemoService '' > < dubbo : method name= '' sayHello '' timeout= '' 60000 '' **cache= '' threadlocal '' **/ > < /dubbo : reference > 在执行的过程中，我们发现其实并不会创建ThreadlocalCache，而是用的LruCache，原因是在 ! [ image ] ( https : //user-images.githubusercontent.com/14085645/36060257-e63276f2-0e80-11e8-9da7-36e41c7ef23a.png ) 可以看到，当将cache配置在方法上而不是服务上的时候，传入的url只有 '' method.cache '' 参数而没有 '' cache '' 参数，但是CacheFactory $ Adaptive这个类并没有作区分。
Locale deserialize 'zh-hant_CN ' __EoT__ ` zh-hant_CN ` will convert to ` zh_HANT_cn ` Locale include ( language , country , variant ) , Locale.toString ( ) use '\_ ' to split then ` { language } _ { country } _ ( { variant } _ # | # ) { script } - { extensions } ` but Jackson deserialize Locale use '- ' or '\_ ' : ( code : [ LocaleHandle.readResolve ( ) ] ( https : //github.com/alibaba/dubbo/blob/master/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/LocaleHandle.java # L63 ) [ iana language-tags ] ( https : //www.iana.org/assignments/language-tags/language-tags.xml # Mark_Davis ) `` ` zh-Hant Chinese , in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-CN PRC Mainland Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-HK Hong Kong Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-MO Macao Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-SG Singapore Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] zh-Hant-TW Taiwan Chinese in traditional script [ Mark_Davis ] [ Mark_Davis_2 ] `` ` [ rfc4647 language lookup ] ( https : //tools.ietf.org/html/rfc4647 # section-3.4 ) `` ` Example of a Lookup Fallback Pattern Range to match : zh-Hant-CN-x-private1-private2 1.
update readme to add some details __EoT__ update readme to add some details # # What is the purpose of the change update readme to add some details # # Brief changelog update readme to explain dubbo-ops project and user/admin manuals . # # Verifying this change update readme to explain dubbo-ops project and user/admin manuals .
fix number type is lost in yaml config file __EoT__ # # What is the purpose of the change # 1399 fix number type is lost in yaml config file # # Brief changelog Remove String type filter when read yaml file data # # Verifying this change Run referenced unit test
fix hessian lite test case fail bug __EoT__ # # What is the purpose of the change refactor hessian_lite test case # # Brief changelog ` hessian-lite/src/test/ ` test case modify # # Verifying this change `` ` cd hessian-lite/ mvn test verify if success `` ` or ` travis ci ` run success
[ DUBBO- merged pr has bug ] __EoT__ @ see https : //github.com/alibaba/dubbo/pull/1375 This branch will lead to failure of the deserialization error .
[ Dubbo-ci failed ] fixed travis-ci failed because of test cases . __EoT__ # # What is the purpose of the change fixed travis-ci failed because of test cases . see : com.alibaba.dubbo.rpc.protocol.thrift.AbstractTest # # Brief changelog dubbo-rpc-thrift/src/test/java/com/alibaba/dubbo/rpc/protocol/thrift/AbstractTest.java `` ` java - static final int PORT = 30660 ; + protected int PORT = NetUtils.getAvailablePort ( ) ; + TServerTransport serverTransport ; + protected void init ( ) throws Exception { - TServerTransport serverTransport = new TServerSocket ( PORT ) ; + + serverTransport = new TServerSocket ( PORT ) ; + try { + if ( serverTransport ! = null ) { + // release port if used + serverTransport.close ( ) ; + } + } catch ( Exception e ) { + // ignore + } `` ` # # Verifying this change should start ci test Follow this checklist to help us incorporate your contribution quickly and easily : - [ ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just
Fix hessian2 serialized short , byte is converted to int bug __EoT__ Fix hessian2 serialized short , byte is converted to int bug for example : if we test deserialize mode 'Hessian2StringShortType' ` public class Hessian2StringShortType implements Serializable { Map < String , Short > stringShortMap ; Map < String , Byte > stringByteMap ; Map < String , PersonType > stringPersonTypeMap ; public Hessian2StringShortType ( ) { } } public class PersonType implements Serializable { String name ; int age ; double money ; short p1 ; byte p2 ; List < Short > p3 ; public PersonType ( String name , int age , double money , short p1 , byte p2 , List < Short > p3 ) { this.name = name ; this.age = age ; this.money = money ; this.p1 = p1 ; this.p2 = p2 ; this.p3 = p3 ; } @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) ! = o.getClass ( ) ) return false ; PersonType type = ( PersonType ) o ; return age == type.age & & Double.compare (
Collection.isEmpty ( ) should be used to test for emptiness __EoT__ # # What is the purpose of the change Polish : use Collection.isEmpty ( ) # # Brief changelog Using Collection.size ( ) to test for emptiness works , but using Collection.isEmpty ( ) makes the code more readable and can be more performant . The time complexity of any isEmpty ( ) method implementation should be O ( 1 ) whereas some implementations of size ( ) can be O ( n ) . # # Verifying this change XXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject
[ Dubbo-1283 ] Ensure we can build Dubbo on Java 9 __EoT__ # # What is the purpose of the change Fix # 1283 Ensure we can build Dubbo on Java 9 # # Brief changelog 1 . Update maven-javadoc-plugin version 2 . Disable doclint by default and adapt to new maven-javadoc-plugin format 3 . Update fastjson version # # Verifying this change - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your
shutdownhook ca n't unregister instances . __EoT__ shutdownhook的时候不会执行FailbackRegistry的unregister方法。 首先，FailbackRegistry定义了一个全局的destroyed，默认值是false。 然后，shutdownhook在destroy之前会首先判断一下这个变量的状态，但是canDestroy就会把它置为true。 @ Override public void destroy ( ) { if ( ! canDestroy ( ) ) { return ; } super.destroy ( ) ; try { retryFuture.cancel ( true ) ; } catch ( Throwable t ) { logger.warn ( t.getMessage ( ) , t ) ; } } 最后，在真正执行unregister的时候，这个destroyed就会变成true被return掉了，导致FailbackRegistry的unregistry并不会被执行。 @ Override public void unregister ( URL url ) { if ( destroyed.get ( ) ) { return ; } super.unregister ( url ) ; ... } 我看这个代码是8月30号修复issue # 568的时候加的，这是个bug，还是有其他的考虑吗？还是我缺少配置？
dubbo async invoke occur timout exception , but indeed within the timeout . dubbo version 2.5.7 __EoT__ com.alibaba.dubbo.remoting.TimeoutException : Waiting server-side response timeout . start time : 2018-01-30 19:02:11.956 , end time : 2018-01-30 19:02:13.186 , client elapsed : 0 ms , server elapsed : 1230 ms , timeout : 5000 ms , request : Request [ id=4470 , version=2.0.0 , twoway=true , event=false , broken=false , data=RpcInvocation [ methodName=mock , parameterTypes= [ class mock ] , arguments= [ mock [ mock= [ 4063 ] ] ] , attachments= { async=true , path=mock , id=2189 , interface=mock , version=1.0.0 , timeout=5000 , group=offline } ] ] , channel : /172.19.155.23:57001 - > /10.4.225.73:20880 at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get ( DefaultFuture.java:136 ) at com.alibaba.dubbo.rpc.protocol.dubbo.FutureAdapter.get ( FutureAdapter.java:73 ) at com.mock ( mock.java:197 ) at com.mock $ 1.run ( mock.java:554 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1149 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:624 ) at java.lang.Thread.run ( Thread.java:748 )
add config for travis ci fail when test case fail __EoT__ # # What is the purpose of the change add config for travis ci fail when test case fail # # Brief changelog update .travis.yml # # Verifying this change When one unit test case fail , travis CI should get red ( fail )
Enhancement for graceful shutdown __EoT__ # # What is the purpose of the change 目前不管是用的最多的2.5.3版本还是最新的2.5.7版本，亲自测试在不设置重试机制下是无法做到优雅停机的，这次改动主要是修改一点点代码，加上可配置的等待时间，就能简单的做到 “ 不开启重试也能优雅停机 ” 。 其主要实现机制就是在【provider断连注册中心之后，关闭应答之前】和【consumer移除掉invoker后，关闭client之前】这两个阶段加入可配置的等待时间，目前亲测可以做到不配置重试也能优雅停机。 # # Brief changelog modified : dubbo-common/src/main/java/com/alibaba/dubbo/common/Constants.java modified : dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ProtocolConfig.java modified : dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/protocol/AbstractInvoker.java modified : dubbo-rpc/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboInvoker.java modified : dubbo-rpc/dubbo-rpc-thrift/src/main/java/com/alibaba/dubbo/rpc/protocol/thrift/ThriftInvoker.java # # Verifying this change XXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better
Fix some potential security holes in previous versions __EoT__ More details will be published here after release .
2.5.9 Annotation Enhancement and Bugfix __EoT__ # # What is the purpose of the change Annotation Enhancement and bugfix # # # Bugfix * ` @ DubboComponentScan ` is not compatible Spring @ Service completely # 1120 # # # Enhancement * ` ReferenceBean ` should be exposable for production-ready features # 1121 * ` DubboConfigConfiguration ` 's Single and Multiple to be public classes # 1122 # # # Break Change * change the prefixes of properties when @ EnableDubboConfig binds multiple Config Bean # 1141 # # Verifying this change Run use-tests
Parameter validation exception changed to RpcException.BIZ_EXCEPTION . __EoT__ # # What is the purpose of the change 1、避免使用重试机制时，参数检验异常信息有可能丢失（重试时只记录最后一次异常，最后一次有可能是网络原因，会覆盖参数检验异常） 2、使用重试机制时，减少重试次数 # # Brief changelog 参数检验异常改为RpcException的BIZ_EXCEPTION异常，参数检验信息应该是业务信息 # # Verifying this change 在FailoverClusterInvoker中，执行 `` ` catch ( RpcException e ) { if ( e.isBiz ( ) ) { // biz exception . throw e ; } le = e ; } `` ` 时会直接抛出参数检验异常，不用再多次重试 Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . -
The rest protocol should support configuration of the network request packet size . __EoT__ dubbo-rpc-rest/src/main/java/com/alibaba/dubbo/rpc/protocol/rest/NettyServer.java 具体见： [ https : //github.com/sdcuike/dubbo-rpc-rest/blob/d8b7ab6e23e6122e8834f7a97cfeed38f39f37d8/src/main/java/com/alibaba/dubbo/rpc/protocol/resteasy/NettyServer.java ] ( https : //github.com/sdcuike/dubbo-rpc-rest/blob/d8b7ab6e23e6122e8834f7a97cfeed38f39f37d8/src/main/java/com/alibaba/dubbo/rpc/protocol/resteasy/NettyServer.java ) 中文注释部分 不知道是不是有待完善这个功能。
Change the default zookeeper client from ` zkclient ` to ` curator ` . __EoT__
修改telnet协议默认编码 __EoT__ 默认编码应该和dubbo : protocol中对默认编码的设定保持一致，以消除不必要的认识误区，给开发增加调试成本。
获取Serializer和Deserializer时，高并发情况下线程block __EoT__ SerializerFactory是从hession中移植过来的类，之前版本的_cachedSerializerMap、_cachedDeserializerMap和_cachedTypeDeserializerMap均为hashmap，获取Serializer（getSerializer方法）和Deserializer时，锁住整个hashmap，锁粒度太大。现在改成ConcurrentHashMap。 hessian 4.0.38中也已经将这两个hashmap替换为ConcurrentHashMap。
获取Serializer和Deserializer时，高并发情况下线程block __EoT__ SerializerFactory是从hession中移植过来的类，之前版本的_cachedSerializerMap、_cachedDeserializerMap和_cachedTypeDeserializerMap均为hashmap，获取Serializer（getSerializer方法）和Deserializer时，锁住整个hashmap，锁粒度太大。现在改成ConcurrentHashMap。 hessian 4.0.38中也已经将这两个hashmap替换为ConcurrentHashMap。
add codecov test coverage rate statistics component __EoT__ add codecov test coverage component - we can get : 1 ) the test coverage rate of the entire project 2 ) coverage rate change of every PR - dubbo code master should do： 1 ) login https : //travis-ci.org/ and add dubbo repository to https : //travis-ci.org/ ( it seems done ) 2 ) login https : //codecov.io/ and add dubbo repository to https : //codecov.io/ examples : https : //github.com/lovepoem/codecov-travis-maven-test https : //github.com/lovepoem/codecov-travis-maven-test/pull/3
I18N effort for dubbo code base , dubbo-admin __EoT__ # 1044
I18N effort for dubbo code base , dubbo-admin __EoT__ # 1044
I18N effort for dubbo-cluster __EoT__ # 1044
Add apache licence __EoT__ # # What is the purpose of the change I18N effort for dubbo code base - hessian-lite # 1075 # # Brief changelog * All comments of the codes in hessian-lite module
I18N effort for dubbo code base - dubbo-test module __EoT__
I18N effort for dubbo code base - dubbo __EoT__
KAFKA-7412 : onComplete should not reassign ` metadata ` variable __EoT__ The Java doc for ` InterceptorCallback # onComplete ` says that exactly one of the arguments ( metadata and exception ) will be non-null . However , the commitment will be broken when TimeoutException is encountered since the code reassigns a new-created RecordMetadata object to variable ` metadata ` . The solution is to leave ` metadata1 ` unchanged and pass a new RecordMetadata instance to ` onAcknowledgement ` . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7165 : Retry the BrokerInfo registration into ZooKeeper __EoT__ The following is a proposal when the ZooKeeper session has changed and the Broker tries to register himself into ZooKeeper . Currently , this throws a ` NodeExistsException ` since a Broker with the same id got registered previously into Zookeeper . **Assuming Broker id = 1** - If a Broker using this patch retries to register himself into ZooKeeper and the previous ZooKeeper session was not the one that registers the Broker ( another Broker with the same id did ) , the Broker wo n't be allowed to register and a ` NodeExistsException ` will be generated . - If a Broker using this patch retries to register himself into ZooKeeper and the previous ZooKeeper session was the one that registers the Broker , the ephemeral node will be deleted from ZooKeeper and re-created by the Broker . - If a Broker **not** using this patch retries to register himself into ZooKeeper and the previous ZooKeeper session was not the one that registers the Broker ( another Broker with the same id did ) , the Broker wo n't be allowed to register and a ` NodeExistsException ` will
KAFKA-7537 : Avoid sending full UpdateMetadataRequest to existing brokers in the cluster on broker changes to reduce controller memory footprint __EoT__ Currently when brokers join/leave the cluster without any partition states changes , controller will send out UpdateMetadataRequests containing the states of all partitions to all brokers . But for existing brokers in the cluster , the metadata diff between controller and the broker should only be the `` live_brokers '' / '' offline_replicas '' info . Only the brokers with empty metadata cache need the full UpdateMetadataRequest . Sending the full UpdateMetadataRequest to all brokers can place nonnegligible memory pressure on the controller side , especially for large clusters with many brokers and a large number of partitions . Let 's say in total we have N brokers , M partitions in the cluster and we want to add 1 brand new broker in the cluster . With RF=2 , the memory footprint per partition in the UpdateMetadataRequest is ~200 Bytes . In the current controller implementation , if each of the N RequestSendThreads serializes and sends out the UpdateMetadataRequest at roughly the same time ( which is very likely the case ) , we will end up using
KAFKA-7559 : Correct standalone system tests to use the correct external file __EoT__ This fixes the Connect standalone system tests . See branch builder : https : //jenkins.confluent.io/job/system-test-kafka-branch-builder/2021/ **_This should be backported to the ` 2.0 ` branch_** , since that 's when the tests were first modified to use the external property file . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : KStreams SuppressionDurabilityIntegrationTest should set StreamsConfig.STATE_CONFIG_DIR . __EoT__ This sets StreamsConfig.STATED_DIR_CONFIG to temp directory in KStreams SuppressionDurabilityIntegrationTest , to match StreamsTestUtils . This is a similar fix to # 5826 .
KAFKA-7561 : Increase stop_timeout_sec to make ConsoleConsumerTest pass __EoT__ KAFKA-7561 : Increase stop_timeout_sec to make ConsoleConsumerTest pass https : //issues.apache.org/jira/browse/KAFKA-7561 Tests are failing in ducktape for the ConsoleConsumerTest . While the test itself is passing , it ends up in a failed state due to the consumer failing to shutdown in time . This is blocking the 2.1 release currently and I would like to get it into the 2.1 branch . However I 'm not sure why the consumer is taking extra time to shut down . Viewing the consumer logs did not show a large amount of time between starting and finishing shutdown in the passing case . I believe there is some extra time being introduced establishing the connection to the docker container . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist
KAFKA-7568 ; Return leader epoch in ListOffsets response __EoT__ As part of KIP-320 , the ListOffsets API should return the leader epoch of any fetched offset . We either get this epoch from the log itself for a timestamp query or from the epoch cache if we are searching the earliest or latest offset in the log . When handling queries for the latest offset , we have elected to choose the current leader epoch , which is consistent with other handling ( e.g . OffsetsForTimes ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add try/finally block to close adminclient in DelegationTokenEndToEndAuthorizationTest __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Improve ReplicationQuotasTest # shouldThrottleOldSegments ( ) test… __EoT__ I 've seen this test fail with `` ` java.lang.AssertionError : Throttled replication of 6352ms should be < 6000ms `` ` I think a possible cause to that might be that it starts counting the time it took for replication before the replication itself has started . ` createServer ( ) ` initializes ZK and other systems before it starts up the replication thread . I ran the test 25 times locally both ways . Average ` throttledTook ` before the change : 5341.75 Mean ` throttledTook ` after the change : 5256.92 Note that those are the results from ` ./gradlew core : test -- tests kafka.server.ReplicationQuotasTest.shouldThrottleOldSegments ` . I 've noticed that if I run the whole test class ` ReplicationQuotasTest ` , the ` throttledTook ` is close ~4100
KAFKA-7567 ; Clean up internal metadata usage for consistency and extensibility __EoT__ This patch has two objectives to improve metadata handling logic and testing : 1 . We want to reduce dependence on the public object ` Cluster ` for internal metadata propagation since it is not easy to evolve . As an example , we need to propagate leader epochs from the metadata response to ` Metadata ` , but it is not straightforward to do this without exposing it in ` PartitionInfo ` since that is what ` Cluster ` uses internally . By doing this change , we are able to remove some redundant ` Cluster ` building logic . 2 . We want to make the metadata handling in ` MockClient ` simpler and more consistent . Currently we have mix of metadata update mechanisms which are internally inconsistent with each other and do not match the implementation in ` NetworkClient ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7515 : Trogdor - Add Consumer Group Benchmark Specification __EoT__ https : //issues.apache.org/jira/browse/KAFKA-7515 # # # Changes * Add new ` consumerGroup ` field to ` ConsumeBenchSpec ` . * Changes the ` activeTopics ` field format in ` ConsumeBenchSpec ` . * ` activeTopics ` is a list of strings and now supports three notations for each value * 'foo ' - denotes a topic name 'foo' * **single-range notation** 'foo [ 1-2 ] - gets expanded to two topics - 'foo1 ' and 'foo2 ' * **double-range notation** 'foo [ 1-2 ] [ 1-2 ] - gets expanded to two topics with two partitions each . topic 'foo1 ' with partitions 1 and 2 , topic 'foo2 ' with partitions 1 and 2 This ConsumeBenchWorker now supports three cases : 1 . When we want to manually assign partitions and use a random , new consumer group . ( activeTopics contains at least one value with the new double-range notation ( e.g foo [ 1-2 ] [ 1-2 ] ) , consumerGroup is undefined ) - consumer uses the specific partitions ( and all partitions for topics who did not have in a second range ) via KafkaConsumer
MINOR : Various code cleanups in core and clients __EoT__ - Removed unused imports - Use string interpolations instead of concatenations # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7413 : Replace slave terminology with follower in website __EoT__ Replace slave terminology with follower in website Issue [ KAFKA-7413 ] ( https : //issues.apache.org/jira/browse/KAFKA-7413 )
MINOR : remove duplicated code in ConsumerPerformance __EoT__ In ` consume ` method , the consumer subscribes the topic as expected , so there is no need to do the same thing ahead of this method call . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Reduce intermittent test failures for testMarksPartitionsAsOfflineAndPopulatesUncleanableMetrics and make log cleaner tests more efficient __EoT__ As seen in https : //builds.apache.org/job/kafka-pr-jdk11-scala2.12/239/testReport/junit/kafka.log/LogCleanerIntegrationTest/testMarksPartitionsAsOfflineAndPopulatesUncleanableMetrics/ This test sometimes fails because of passing the 15 second timeout . Inspecting the error message from the build failure , we see that this timeout happens in the ` writeDups ( ) ` calls which call ` roll ( ) ` . `` ` [ 2018-10-23 15:18:51,018 ] ERROR Error while flushing log for log-1 in dir /tmp/kafka-8190355063195903574 with offset 74 ( kafka.server.LogDirFailureChannel:76 ) java.nio.channels.ClosedByInterruptException ... at kafka.log.Log.roll ( Log.scala:1550 ) ... at kafka.log.AbstractLogCleanerIntegrationTest.writeDups ( AbstractLogCleanerIntegrationTest.scala:132 ) ... `` ` After investigating , I saw that this test would call ` Log # roll ( ) ` around 60 times every run . Increasing the ` segmentSize ` config to ` 5120 ` reduces the ` Log # roll ( ) ` calls to 4 per test . I saw that most other LogCleaner tests also call ` roll ( ) ` ~90 times , so I 've changed the default to be ` 5120 ` . I 've also made the one test which requires a smaller segmentSize to set it via the args
MINOR : KStreams SuppressScenarioTest should set StreamsConfig.STATE_DIR_CONFIG . __EoT__ This sets StreamsConfig.STATED_DIR_CONFIG in KStreams SuppressScenarioTest , as with StreamsTestUtils . I have deliberately avoided using StreamsTestUtils as this test sets bogus config parameters , but still fails if the default STATE_DIR_CONFIG does not exist .
KAFKA-7534 : Error in flush calling close may prevent underlying store from closing __EoT__ Calling the ` CachingKeyValueStore # close ( ) ` method first calls ` CachingKeyValueStore.flush ( ) ` . If there is an exception thrown during the ` flush ` call , the underlying store is not closed . Subsequently , another task ca n't open the RocksDB store and receives a ` No locks available ` exception . I added a unit test that fails with the proposed fix . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KIP-368 : Allow SASL Connections to Periodically Re-Authenticate __EoT__ The adoption of KIP-255 : OAuth Authentication via SASL/OAUTHBEARER in release 2.0.0 creates the possibility of using information in the bearer token to make authorization decisions . Unfortunately , however , Kafka connections are long-lived , so there is no ability to change the bearer token associated with a particular connection . Allowing SASL connections to periodically re-authenticate would resolve this . In addition to this motivation there are two others that are security-related . First , to eliminate access to Kafka for connected clients , the current requirement is to remove all authorizations ( i.e . remove all ACLs ) . This is necessary because of the long-lived nature of the connections . It is operationally simpler to shut off access at the point of authentication , and with the release of KIP-86 : Configurable SASL Callback Handlers it is going to become more and more likely that installations will authenticate users against external directories ( e.g . via LDAP ) . The ability to stop Kafka access by simply disabling an account in an LDAP directory ( for example ) is desirable . The second motivating factor for re-authentication
MINOR : Remove unused commitSync in ConsoleConsumer __EoT__ Dead code is confusing . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Simplify handling of KafkaProducer serializer overrides __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Make ControllerIntegrationTest less flaky __EoT__ ` ControllerIntegrationTest # waitUntilControllerEpoch ` sometimes fails with the following error : `` ` java.util.NoSuchElementException : None.get at scala.None $ .get ( Option.scala:347 ) at scala.None $ .get ( Option.scala:345 ) at kafka.controller.ControllerIntegrationTest $ $ anonfun $ waitUntilControllerEpoch $ 1.apply $ mcZ $ sp ( ControllerIntegrationTest.scala:312 ) at kafka.utils.TestUtils $ .waitUntilTrue ( TestUtils.scala:779 ) at kafka.controller.ControllerIntegrationTest.waitUntilControllerEpoch ( ControllerIntegrationTest.scala:312 ) at kafka.controller.ControllerIntegrationTest.testEmptyCluster ( ControllerIntegrationTest.scala:51 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.junit.runners.model.FrameworkMethod $ 1.runReflectiveCall ( FrameworkMethod.java:50 ) at org.junit.internal.runners.model.ReflectiveCallable.run ( ReflectiveCallable.java:12 ) at org.junit.runners.model.FrameworkMethod.invokeExplosively ( FrameworkMethod.java:47 ) at org.junit.internal.runners.statements.InvokeMethod.evaluate ( InvokeMethod.java:17 ) at org.junit.internal.runners.statements.RunBefores.evaluate ( RunBefores.java:26 ) at org.junit.internal.runners.statements.RunAfters.evaluate ( RunAfters.java:27 ) at org.junit.runners.ParentRunner.runLeaf ( ParentRunner.java:325 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:78 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:57 ) at org.junit.runners.ParentRunner $ 3.run ( ParentRunner.java:290 ) at org.junit.runners.ParentRunner $ 1.schedule ( ParentRunner.java:71 ) at org.junit.runners.ParentRunner.runChildren ( ParentRunner.java:288 ) at org.junit.runners.ParentRunner.access $ 000 ( ParentRunner.java:58 ) at org.junit.runners.ParentRunner $ 2.evaluate ( ParentRunner.java:268 ) at org.junit.internal.runners.statements.RunBefores.evaluate ( RunBefores.java:26 ) at org.junit.internal.runners.statements.RunAfters.evaluate ( RunAfters.java:27 ) at org.junit.runners.ParentRunner.run ( ParentRunner.java:363 ) at `` ` I think that ensuring the controllerEpoch is defined ( by
MINOR : buffer should ignore caching __EoT__ When the buffer size config is set to 0 , Streams invokes ` withCachingDisabled ` in all registered stores . Previously , we did n't expect this method to be called on the suppression buffer , but since it can be under valid circumstances , we should just ignore it rather than throwing an exception . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix docs typo __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Prohibit setting StreamsConfig commit.interval.ms to a negative value __EoT__ Prohibit setting StreamsConfig ` commit.interval.ms ` to a negative value to avoid possible ambiguity of what it indicates . So far , setting the property to a negative value can be used to turn off periodic offset-commit by ` StreamThread ` . With this change , that will no longer work . Instead of using a negative value , ` LONG.MAX_VALUE ` can be used to achieve the almost same thing . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Less restrictive assertion in flaky BufferPool test __EoT__ We are routinely seeing CI failures from an assertion in ` testBlockTimeout ( ) ` , which relies on the interaction between ( de ) allocations against a producer BufferPool , across multiple threads . I reproduced the failed assertion in my local build at a rate of 2 % ( N=100 ) : `` ` java assertTrue ( `` available memory '' + pool.availableMemory ( ) , pool.availableMemory ( ) > = 9 & & pool.availableMemory ( ) < = 10 ) ; `` ` Here 's a summary of the test history : - ( https : //github.com/apache/kafka/pull/1304 ) KAFKA-3648 ; maxTimeToBlock in BufferPool.allocate should be enforced - Ensured timeout was properly checked and iterated during a blocked allocation . - Added the test 's deferred deallocations . - ( https : //github.com/apache/kafka/pull/2659 ) KAFKA-4840 : BufferPool errors can cause buffer pool to go into a bad state - Ensured proper cleanup of blocked allocation requests given an exception . - Added assertion in question . This patch decreases the lower bound for expected available memory , as thread scheduling entails that a variable amount of deallocation happens
MINOR : Remove redundant try block in LogCleaner __EoT__
KAFKA-7505 : Process incoming bytes on write error to report SSL failures __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7513 : Fix timing issue in SaslAuthenticatorFailureDelayTest __EoT__ Reduce tick interval of the mock timer and avoid large timer increments to avoid hitting idle expiry on the client-side before delayed close is processed by the server . Also reduce poll interval in the server to make the test complete faster ( since delayed close is only processed when poll returns ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update Streams Scala API for addition of Grouped __EoT__ While working on the documentation updates I realized the Streams Scala API needs to get updated for the addition of ` Grouped ` Added a test for ` Grouped.scala ` ran all ` streams-scala ` tests and ` streams ` tests # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7496 : KafkaAdminClient # describeAcls should handle invalid filters gracefully __EoT__
MINOR : Doc changes for KIP-312 __EoT__ Documentation changes for adding overloaded ` StreamsBuilder ( java.util.Properties props ) ` method in KIP-312 # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7223 : Suppression documentation __EoT__ Add documentation for KIP-328 : Suppression # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7080 and KAFKA-7222 : Cleanup overlapping KIP changes __EoT__ - KIP-319 and KIP-328 overlap and we can remove non-released deprecates methods - add upgrade docs for KIP-319
MINOR : Fixed KAFKA-6764 ; Update usage for console-consumer whitelist option __EoT__ *Fix for [ KAFKA-6764 ] ( https : //issues.apache.org/jira/browse/KAFKA-6764 ) . * - With group-id , always subscribe ( ) and auto-assign . Seek based on partition/offset config ( Not sure if seek should be supported by console-consumer when a group-id is specified . Because assign ( ) and subscribe ( ) ca n't be used together for the same topic-consumer-group combination ) . - Without group-id ( Auto Commit Offset is always disabled ) : - Partition/Offset specified , then assign . - Partition/Offset not specified , then subscribe . Correct if I am wrong . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : doc changes for KIP-372 __EoT__ Documentation changes for KIP-372 - Adding ` Grouped ` - Deprecating ` Serialized ` - Adding ` withNamed ` to ` Joined ` - Naming repartition topics # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Doc changes for KIP-324 __EoT__ Documentation changes for adding KIP-324 ` AdminClient.metrics ( ) ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix non-deterministic streams-scala tests __EoT__ Stop using current system time by default , as it introduces non-determinism . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : updates docs for KIP-358 __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7498 : Remove references from ` common.requests ` to ` clients ` __EoT__ Add ` CreatePartitionsRequest.PartitionDetails ` similar to ` CreateTopicsRequest.TopicDetails ` to avoid references from ` common.requests ` to ` clients ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fixes on streams upgrade test __EoT__ 1 . In ` test_upgrade_downgrade_brokers ` , allow duplicates to happen . 2 . In ` test_version_probing_upgrade ` , grep the generation numbers from brokers at the end , and check if they can ever be synchronized . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6195 : Resolve DNS aliases in bootstrap.server __EoT__ Change described in KIP-235 https : //cwiki.apache.org/confluence/display/KAFKA/KIP-235 % 3A+Add+DNS+alias+support+for+secured+connection I license the work to the Apache Kafka project under the project 's open source license .
MINOR : Streams Update for KIP-330 / KIP-356 __EoT__ KIP-330 / 356 are very trivial changes so I merged them together in one PR . A couple of other changes : * bump up the version number , and use templates in the upgrade section for the latest version . * reordered some of the API changes for 2.0 to after the 2.1 section . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7485 : Wait for truststore update request to complete in test __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7482 : LeaderAndIsrRequest should be sent to the shutting down broker __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6863 Kafka clients should try to use multiple DNS resolved IP __EoT__ * Implementation of KIP-302 * Based on the new client configuration ` client.dns.lookup ` a Selector can use InetAddress.getAllByName to find all IPs and iterates over them when they fail to connect * Only use IPv4 or IPv6 addresses * Unit test Co-authored-by : Edoardo Comar < ecomar @ uk.ibm.com > Co-authored-by : Mickael Maison < mickael.maison @ gmail.com > On attempting to connect to a resolved IP that does not respond , there appears to be a 75 second timeout - this is reflected in the unit test . If the resolved IP refuses the connection the selector would move the next IP quickly Note that we also fixed ` SelectorTst.testConnectionRefused ( ) ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7475 - capture remote address on connection authetication errors , and log it __EoT__ Signed-off-by : radai-rosenblatt < radai.rosenblatt @ gmail.com > *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7277 : default implementation for new window store overloads __EoT__ Removes the necessity for every store implementation to provide identical , trivial overrides . Also , helps ensure that stores wo n't forget to validate the ` Instant ` inputs . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : AbstractIndex.close should unmap __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix remaining core , connect and clients tests to pass with Java 11 __EoT__ - SslFactoryTest should use SslFactory to create SSLEngine - Use Mockito instead of EasyMock in ` ConsoleConsumerTest ` as one of the tests mocks a standard library class and the latest released EasyMock version ca n't do that when Java 11 is used . - Avoid mocking ` ConcurrentMap ` in ` SourceTaskOffsetCommitterTest ` for similar reasons . As it happens , mocking is not actually needed here . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix broken standalone ReplicationQuotasTestRig test __EoT__ - Fix ZkUtils . getReassignmentJson to return valid json string - Allow new file creation in ReplicationQuotasTestRig test # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4514 : Add Codec for ZStandard Compression __EoT__ Hello . This PR resolves [ KAFKA-4514 : Add Codec for ZStandard Compression ] ( https : //issues.apache.org/jira/browse/KAFKA-4514 ) . Please have a look when you are free . Since I am a total newbie of Apache Kafka , feel free to point out the deficiencies . Add to the feature itself , I have a question : **Should we support an option for ZStandard compression level ? ** According to [ ZStandard official documentation ] ( https : //github.com/facebook/zstd/blob/dev/lib/zstd.h ) , it supports compression level of 1 ~ 22 . Because of that , [ Hadoop added a new configuration option named `` io.compression.codec.zstd.level '' , whose default value is 3 ] ( https : //issues.apache.org/jira/browse/HADOOP-13578 ) . In this PR , I configured the compression level to 1 as a temporary one but wondering following problems : - Should we provide a configurable option ? - Would it better to change the default value , from 1 to another one ? I am looking forward to your advice . Thanks .
KAFKA-7483 : Allow streams to pass headers through Serializer . __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove redundant ` if ` condition . __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3097 : Update docs to mention PrincipalType `` User '' is case sensitive __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7198 : Enhance KafkaStreams start method javadoc . __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix small spelling error __EoT__ Fixing a small spelling error in Javadoc for ` StatefulProcessorNode ` For testing , I ran the streams test suite . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7478 : Reduce default logging verbosity in OAuthBearerLoginModule __EoT__ The default ` OAuthBearerLoginModule ` is too noisy . My reasoning is that : - Successful logins should be shown in ` DEBUG ` - DEBUG should not be too noisy either - Login aborted should be in ` DEBUG ` since authentication failures are always logged
KAFKA-7215 : Improve LogCleaner Error Handling __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * - Catch ` KafkaStorageException ` whose cause is ` IOException ` in ` CleanerThread # clean ( ) ` 's delete part . Properly mark the directory which caused the IOException as `` offline '' - Catch any exceptions raised during log cleaning and mark the partition which caused it as `` uncleanable '' . The log cleaner does not attempt to clean said partitions afterwards - Introduce new config - ` max.uncleanable.partitions ` . After X unclean partitions in the same log directory , mark the log directory as offline ( assuming it is a disk problem ) *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * KIP : https : //cwiki.apache.org/confluence/display/KAFKA/KIP-346+-+Improve+LogCleaner+behavior+on+error JIRA : https : //issues.apache.org/jira/browse/KAFKA-7215 Some notes and troubles : I had to create a mock ` LogCleanerManagerMock ` , because
KAFKA-7462 : Make token optional for OAuthBearerLoginModule __EoT__ OAuthBearerLoginModule is used both on the server-side and client-side ( similar to login modules for other mechanisms ) . OAUTHBEARER tokens are client credentials used only on the client-side to authenticate with servers , but the current implementation requires tokens to be provided on the server-side even if OAUTHBEARER is not used for inter-broker communication . Tokens should be optional for server-side login context to allow brokers to be configured without a token when OAUTHBEARER is not used for inter-broker communication . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix typo in Resource in org.apache.kafka.trogdor __EoT__ I fixed 2 typos in org.apache.kafka.trogdor.agent.Agent org.apache.kafka.trogdor.coordinator.Coordinator There were missing `` c '' in Resource , as you can see in commit . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7484 : fix suppression integration tests __EoT__ The test data is based at time 0 ( aka 1970 ) , but the broker was started at time ` now ` . This caused the log cleaner to delete the test data if the tests took slightly too long , despite its generous default configuration . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
HOTFIX : Compilation error in GroupMetadataManagerTest __EoT__ Accidentally broke after merging KAFKA-7395 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7395 ; Add fencing to replication protocol ( KIP-320 ) __EoT__ This patch contains the broker-side support for the fencing improvements from KIP-320 . This includes the leader epoch validation in the ListOffsets , OffsetsForLeaderEpoch , and Fetch APIs as well as the changes needed in the fetcher threads to maintain and use the current leader epoch . The client changes from KIP-320 will be left for a follow-up . One notable change worth mentioning is that we now require the read lock in ` Partition ` in order to read from the log or to query offsets . This is necessary to ensure the safety of the leader epoch validation . Additionally , we forward all leader epoch changes to the replica fetcher thread and go through the truncation phase . This is needed to ensure the fetcher always has the latest epoch and to guarantee that we can not miss needed truncation if we missed an epoch change . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6914 : Set parent classloader of DelegatingClassLoader same as the worker 's __EoT__ The parent classloader of the DelegatingClassLoader and therefore the classloading scheme used by Connect does not have to be fixed to the System classloader . Setting it the same as the one that was used to load the DelegatingClassLoader class itself is more flexible and , while in most cases will result in the System classloader to be used , it will also work in othr managed environments that control classloading differently ( OSGi , and others ) . The fix is minimal and the mainstream use is tested via system tests .
KAFKA-7467 : NoSuchElementException is raised because controlBatch is … __EoT__ …empty This patch adds checks before reading the first record of a control batch . If the batch is empty , it is treated as having already been cleaned . In the case of LogCleaner this means it is safe to discard . In the case of ProducerStateManager it means it should n't cause state to be stored because the relevant transaction has already been cleaned . In the case of Fetcher , it just preempts the check for an abort . In the case of GroupMetadataManager , it does n't process the offset as a commit . The patch also adds isControl to the output of DumpLogSegments . Changes were tested with unit tests , except the DumpLogSegments change which was tested manually . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add topic config to PartitionsSpec __EoT__
MINOR : clarify usage of stateful processor node __EoT__ In recent PRs , we have been confused about the proper usage of StatefulProcessorNode ( # 5731 , # 5737 ) This change disambiguates it . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix generic type of ProcessorParameters __EoT__ In unrelated recent work , I noticed some warnings about the missing type parameters on ProcessorParameters . While investigating it , it seems like there was a bug in the creation of repartition topics . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7415 ; Persist leader epoch and start offset on becoming a leader __EoT__ This patch ensures that the leader epoch cache is updated when a broker becomes leader with the latest epoch and the log end offset as its starting offset . This guarantees that the leader will be able to provide the right truncation point even if the follower has data from leader epochs which the leader itself does not have . This situation can occur when there are back to back leader elections . Additionally , we have made the following changes : 1 . The leader epoch cache enforces monotonically increase epochs and starting offsets among its entry . Whenever a new entry is appended which violates requirement , we remove the conflicting entries from the cache . 2 . Previously we returned an unknown epoch and offset if an epoch is queried which comes before the first entry in the cache . Now we return the smallest . For example , if the earliest entry in the cache is ( epoch=5 , startOffset=10 ) , then a query for epoch 4 will return ( epoch=4 , endOffset=10 ) . This ensures that followers ( and consumers
HOT-FIX : Fix broken links __EoT__ Found several broken links in the docs , mostly in ` streams-concepts ` For testing , I ran kafka-site locally with these changes . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7223 : Add name config to Suppressed __EoT__ KIP-372 ( allow naming all internal topics ) was designed and developed concurrently with suppression . Since suppression introduces a new internal topic , it also needs to be nameable . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Docs on state store instantiation __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7223 : Make suppression buffer durable __EoT__ This is Part 4 of suppression ( durability ) Part 1 was # 5567 ( the API ) Part 2 was # 5687 ( the tests ) Part 3 was # 5693 ( in-memory buffering ) Implement a changelog for the suppression buffer so that the buffer state may be recovered on restart or recovery . As of this PR , suppression is suitable for general usage . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7223 : In-Memory Suppression Buffering __EoT__ This is Part 3 of suppression . Part 1 was # 5567 ( the API ) Part 2 was # 5687 ( the tests ) Implement a non-durable in-memory buffering strategy for suppression . As of this changeset , the suppression API is fully functional . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7406 : Name join group repartition topics __EoT__ This PR has the changes required to implement KIP-372 . 1 . Name repartition topics for Joins 2 . Name repartition topics for Grouping operations 3 . For optimizations where repartition nodes are reduced or merged the topic name of the **_first_** repartition node to be merged is used as the topic name for the new optimized repartition node . 4 . Added the ` Grouped ` class 5 . Deprecated the ` Serialized ` class 6 . Updated Joined to accept a ` name ` parameter for naming repartition topics if required . 6 . Updated KStream.groupBy , KStream.groupByKey , KTable.groupBy methods to accept a ` Grouped ` instance and deprecated methods taking a ` Serialized ` parameter . Also , our approach when optimizing repartition topic is to **_always_** use the first repartition topic to get merged even if the user has elected to not name any repartition topics . This approach should make the new topology compatible with existing applications . However , an application reset may be required as all data may not have been consumed from existing repartition topics . I 've added tests for the following
KAFKA-7459 : Use thread-safe Pool instead of non-thread-safe mutable.HashMap for requestRateInternal __EoT__ After KAFKA-6514 , we add API version as a tag for the RequestsPerSec metric but in the implementation , we use the non-threadsafe mutable.HashMap to store the version - > metric mapping without any protection ( https : //github.com/apache/kafka/pull/4506/files # diff-d0332a0ff31df50afce3809d90505b25R357 ) . This can mess up the data structure and cause unexpected behavior ( https : //github.com/scala/bug/issues/10436 ) . This PR changes requestRateInternal to use the thread-safe Pool instead . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : do n't log config during unit tests __EoT__ The StreamsConfig class by default prints its configuration values during construction . This is valuable at runtime as a record of the actual configuration , but during unit testing , it results in excessive output . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7223 : internally provide full consumer record during restore __EoT__ The Suppression buffer stores the full record context , not just the key and value , so its changelog/restore loop will also need to preserve this information . This change is a precondition to that , creating an option to register a state restore callback to receive the full consumer record . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3514 : Upgrade Documentation __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7454 : Use lazy allocation for SslTransportLayer buffers __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7453 : Expire registered channels not selected within idle timeout __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7409 : Validate topic configs prior to topic creation __EoT__ KAFKA-7409 : Validate topic configs prior to topic creation https : //issues.apache.org/jira/browse/KAFKA-7409 Values for ` message.format.version ` and ` log.message.format.version ` should be verfied before topic creation or config change . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7437 ; Persist leader epoch in offset commit metadata __EoT__ This patch implements the changes described in KIP-320 for the persistence of leader epoch information in the offset commit protocol . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix broken link in security.html __EoT__ In section `` Authentication using SASL/Kerberos '' the link to Configuring Kafka Clients is broken *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7223 : add tests in preparation for suppression __EoT__ This is Part 2 of suppression . Part 1 was https : //github.com/apache/kafka/pull/5567 In an effort to control the scope of the review , this PR is just the tests for buffered suppression . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7403 : Follow-up fix for KAFKA-4682 ( KIP-211 ) to correct some edge cases __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Upgrade to Jackson 2.9.7 __EoT__ This contains important fixes : https : //github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.7 # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7223 : Suppress API with only immediate emit __EoT__ Part 1 of the suppression API . * add the DSL ` suppress ` method and config objects * add the processor , but only in `` identity '' mode ( i.e. , it will forward only if the suppression spec says to forward immediately ) * add tests # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7430 : Improve Transformer interface JavaDoc __EoT__ This PR improves the JavaDoc of the transformer interface . See https : //issues.apache.org/jira/browse/KAFKA-7430 for more details .
MINOR : fix build from f1f71921 __EoT__ Merging https : //github.com/apache/kafka/commit/f1f719211e5f28fe5163e65dba899b1da796a8e0 broke the scala 2.12 build . This fixes it . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7216 : Ignore unknown ResourceTypes while loading acl cache __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ KAFKA-6923 ] Refactoring Serializer/Deserializer __EoT__ This is the implementation of KIP-336 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ KAFKA-7379 ] [ streams ] send.buffer.bytes should be allowed to set -1 in KafkaStreams __EoT__ # # # What changes were proposed in this pull request ? ` atLeast ( 0 ) ` in ` StreamsConfig ` , ` ProducerConfig ` and ` ConsumerConfig ` were replaced by ` SEND_BUFFER_LOWER_BOUND ` and ` RECEIVE_BUFFER_LOWER_BOUND ` from ` CommonClientConfigs ` . # # # How was this patch tested ? Three unit tests were added to ` KafkaStreamsTest ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : increase number of unique keys for Streams EOS system test __EoT__ Increasing the number of unique keys , to increase likelihood that the test exposes KAFKA-7192
KIP-363 Make FunctionConversions deprecated __EoT__ As pointed out in this comment https : //github.com/apache/kafka/pull/5539 # discussion_r212380648 the object ` FunctionConversions ` is only of internal use and therefore should be private to the lib only so that we can do changes without going through KIP like this one . KIP : https : //cwiki.apache.org/confluence/display/KAFKA/KIP-363 % 3A+Make+FunctionConversions+private @ guozhangwang @ vvcephei @ mjsax @ debasishg and whoever wants to join the party 😄
KAFKA-7388 equal sign in property value for password __EoT__ Changing limit of split to 2 values , to only split to key and value . if split and value is empty , also throw error . * Added test to check feature with delimiter ( equal sign ) in different pos * deleted test that enforced no multiple equal signs in properties * added tests for password overrides with symbols # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7414 ; Out of range errors should never be fatal for follower __EoT__ This patch fixes the inconsistent handling of out of range errors in the replica fetcher . Previously we would raise a fatal error if the follower 's offset is ahead of the leader 's and unclean leader election is not enabled . The behavior was inconsistent depending on the message format . With KIP-101/KIP-279 and the new message format , upon becoming a follower , the replica would use leader epoch information to reconcile the end of the log with the leader and simply truncate . Additionally , with the old format , the check is not really bulletproof for detecting data loss since the unclean leader 's end offset might have already caught up to the follower 's offset at the time of its initial fetch or when it queries for the current log end offset . With this patch , we simply skip the unclean leader election check and allow the needed truncation to occur . When the truncation offset is below the high watermark , a warning will be logged . This makes the behavior consistent for all message formats and removes a scenario
MINOR : log and fail on missing task in Streams __EoT__ A system test failed unexpectedly when Streams attempted to process a record for which it had no task . It 's not clear how this happened , and the logs do n't contain enough information , so we 'll just log more information and still fail . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7280 : Synchronize consumer fetch request/response handling __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Enable ignored upgrade system tests - trunk __EoT__ Removed ` ignore ` annotations from the upgrade tests . This PR includes the following changes for updating the upgrade tests : 1 . Uploaded new versions ` 0.10.2.2 ` , ` 0.11.0.3 ` , ` 1.0.2 ` , ` 1.1.1 ` , and ` 2.0.0 ` ( in the associated scala versions ) to kafka-packages 2 . Update versions in ` version.py ` , ` Dockerfile ` , ` base.sh ` 3 . Added new versions to ` StreamsUpgradeTest.test_upgrade_downgrade_brokers ` *_including_* version ` 2.0.0 ` 4 . Added new versions ` StreamsUpgradeTest.test_simple_upgrade_downgrade ` test *_excluding_* version ` 2.0.0 ` 1 . Version ` 2.0.0 ` is excluded from the streams upgrade/downgrade test as ` StreamsConfig ` needs an update for the new version , requiring a KIP . Once the community votes the KIP in , a minor follow-up PR can be pushed to add the ` 2.0.0 ` version to the upgrade test . 5 . Fixed minor bug in ` kafka-run-class.sh ` for classpath in upgrade/downgrade tests across versions . Follow on PRs for ` 0.10.2x ` , ` 0.11.0x ` , ` 1.0.x ` , `
MINOR : Insure that KafkaStreams client is closed if test fails __EoT__ ` KafkaStreams ` instances must be closed even if we did not call ` # start ( ) ` . Some additional Java8 cleanup . Call for review any of @ guozhangwang @ bbejeck @ vvcephei
MINOR : Update minimum required Gradle version __EoT__ After commit f123d2f18c55b1cf2edb452aeb87e6ad0743c292 , the minimum required gradle version changed to 4.7 This is due to the use of ` isJava11Compatible ( ) ` in build.gradle . It was introduced in version 4.7 ( https : //github.com/gradle/gradle/blob/master/subprojects/base-services/src/main/java/org/gradle/api/JavaVersion.java # L172-L180 ) cc @ ijuma @ lindong28
KAFKA-7394 ; OffsetsForLeaderEpoch supports topic describe access __EoT__ As part of KIP-320 , allow OffsetsForLeaderEpoch requests with Topic Describe permission . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6926 : Simplified some logic to eliminate some suppressions of NPath complexity checks __EoT__ Modified several classes ' ` equals ` methods and simplified a complex method to reduce the NPath complexity so they could be removed from the checkstyle suppressions that were required with the [ recent move to Java 8 and upgrade of Checkstyle ] ( https : //github.com/apache/kafka/pull/5046 ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : KafkaAdminClient code cleanup __EoT__ This is just some minor cleanup of KafkaAdminClient , in particular Java 8 compatible code simplification . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3514 , Documentations : Add out of ordering in concepts . __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3514 : Part III , Refactor StreamThread main loop __EoT__ 1 . Refactor the StreamThread main loop , in the following : * Fetch from consumer and enqueue data to tasks . * Check if any tasks should be enforced process . * Loop over processable tasks and process them for N iterations , and then check for 1 ) commit , 2 ) punctuate , 3 ) need to call consumer.poll * Even if there is not data to process in this iteration , still need to check if commit / punctuate is needed * Finally , try update standby tasks . 2 . Add an optimization to only commit when it is needed ( i.e . at least some process ( ) or punctuate ( ) was triggered since last commit ) . 3 . Found and fixed a ProducerFencedException scenario : producer.send ( ) call would never throw a ProducerFencedException directly , but it may throw a KafkaException whose `` cause '' is a ProducerFencedException . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ]
KAFKA-7396 Materialized , Serialized , Joined , Consumed and Produced with implicit Serdes __EoT__ We want to make sure that we always have a serde for all Materialized , Serialized , Joined , Consumed and Produced . For that we can make use of the implicit parameters in Scala . KIP : https : //cwiki.apache.org/confluence/display/KAFKA/KIP-365 % 3A+Materialized % 2C+Serialized % 2C+Joined % 2C+Consumed+and+Produced+with+implicit+Serde
KAFKA-7044 : Fix Fetcher.fetchOffsetsByTimes and NPE in describe consumer group __EoT__ ` kafka-consumer-groups -- describe -- group ... ` can result in NullPointerException for two reasons : 1 ) Fetcher.fetchOffsetsByTimes ( ) may return too early , without sending list offsets request for topic partitions that are not in cached metadata . 2 ) ` ConsumerGroupCommand.getLogEndOffsets ( ) ` and ` getLogStartOffsets ( ) ` assumed that endOffsets ( ) /beginningOffsets ( ) which eventually call Fetcher.fetchOffsetsByTimes ( ) , would return a map with all the topic partitions passed to endOffsets ( ) /beginningOffsets ( ) and that values are not null . Because of ( 1 ) , null values were possible if some of the topic partitions were already known ( in metadata cache ) and some not ( metadata cache did not have entries for some of the topic partitions ) . However , even with fixing ( 1 ) , endOffsets ( ) /beginningOffsets ( ) may return a map with some topic partitions missing , when list offset request returns a non-retriable error . This happens in corner cases such as message format on broker is before 0.10 , or maybe in cases of
MINOR : Remove deprecated Resource class constructor usage __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Use LATEST_1_1 instead of V_1_1_0 in quota_test __EoT__ Opening a separate PR against trunk for changes in quota_test.py to use latest 1.1 release , so that it could also be merged to previous branches . The original PR was against 2.0 which also added installing 1.1 : : https : //github.com/apache/kafka/pull/5632 . Will decide separately which bug releases we should install for system tests in 2.0 branch . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Mark new Scala streams tests as integration tests ( KIP-270 follow-up ) __EoT__ KIP-270 added some integration tests , but they were not marked with the appropriate annotation and bloat the ` unitTest ` target . This annotates them properly so we get faster unit tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Code cleanup of 'clients ' module __EoT__ Cleanup involves * Removing redundant / unnecessary code * Fixing typos * Simplifying code when possible * Refactoring to use lambda expressions in some places # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7286 : Avoid getting stuck loading large metadata records __EoT__ If a group metadata record size is higher than offsets.load.buffer.size , loading offsets and group metadata from __consumer_offsets would hang forever . This was due to a buffer being too small to fit any message bigger than the maximum configuration . If this happens , temporarily use a buffer that can fit the large records and move on .
KAFKA-7385 : Fix log cleaner behavior when empty batches are retained __EoT__ With idempotent producers , we may leave empty batches in the log during log compaction . When filtering the data , we keep track of state like ` maxOffset ` and ` maxTimestamp ` of filtered data . This patch ensures we maintain this state correctly for the case when only empty batches are left in ` MemoryRecords # filterTo ` . Without this patch , we did not initialize ` maxOffset ` in this edge case which led us to append data to the log with ` maxOffset ` = -1L , causing the append to fail and log cleaner to crash .
MINOR : Move common out of range handling into AbstractFetcherThread __EoT__ This patch removes the duplication of the out of range handling between ` ReplicaFetcherThread ` and ` ReplicaAlterLogDirsThread ` and attempts to expose a cleaner API for extension . It also adds a mock implementation to facilitate testing and several new test cases . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Enable topic deletion in test configs __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7117 : Support AdminClient API in AclCommand ( KIP-332 ) __EoT__ - Update AclCommandTest - update docs - Remove deprecated KafkaPrincipal.fromString ( ) usage # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Tidy up pattern type comparisons , remove unused producer-id __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update README to mention the minimum required gradle version to 4.6 __EoT__ After # 5602 we need Gradle 4.6 as minimum required version . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix Transient test failure SslTransportLayerTest.testNetworkThreadTimeRecorded __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7372 : Upgrade Jetty for preliminary Java 11 and TLS 1.3 support __EoT__ `` Jetty 9.4.12 includes compatibility for JDK 11 . Additionally , TLS 1.3 support has been implemented . While full functionality for new JDK features is not yet supported , this release has been built and tested for compatibility with the latest releases from Oracle . `` : http : //dev.eclipse.org/mhonarc/lists/jetty-announce/msg00124.html Also added an upgrade note as some ciphers are now disabled by default . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7326 : KStream.print ( ) should flush on each line for PrintStream __EoT__ https : //issues.apache.org/jira/browse/KAFKA-7326 PrintForeachAction should flush for PrintStream after printing the line . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7369 ; Handle retriable errors in AdminClient list groups API __EoT__ We should retry when possible if ListGroups fails due to a retriable error ( e.g . coordinator loading ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : single Jackson serde for PageViewTypedDemo __EoT__ Previously , we depicted creating a Jackson serde for every pojo class , which becomes a burden in practice . There are many ways to avoid this and just have a single serde , so we 've decided to model this design choice instead . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Next round of fetcher thread consolidation __EoT__ Pull the epoch request build logic up to ` AbstractFetcherThread ` . Also get rid of the ` FetchRequest ` indirection . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6950 : Delay response to failed client authentication to prevent potential DoS issues ( KIP-306 ) __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add verifiable_producer.properties template file __EoT__ Having the settings for VerifiableProducer be split up in a separate template file makes them clearer , easier to edit , easier to extend and keeps them consistent with the other implementations ( e.g ` console_consumer ` ) /* Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . */ Tested it locally by running the system tests
KAFKA-7338 : Specify AES-128 default encryption type for Kerberos tests __EoT__ Java 11 enables ` aes128-cts-hmac-sha256-128 ` and ` aes256-cts-hmac-sha384-192 ` by default . These are not supported in earlier versions of Java and not supported by Apache DS libraries used by MiniKdc . To ensure that the default kerberos configuration used by Kafka integration and system tests work with all versions of Java 8 and above , configure ` default_tkt_enctypes ` and ` default_tgs_enctypes ` to use ` aes128-cts-hmac-sha1-96 ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Use StoreBuilder.name ( ) for node name __EoT__ Initially , I wanted to make sure the name for the ` StateStoreNode ` was unique . But we ensure name uniqueness in with following steps 1. we create store names by appending a number from an incrementing counter 2. if an attempt is made to add a state store with an existing name a TopologyException is thrown . With that in mind , it will be more clear to use the ` StoreBuilder.name ( ) ` instead . For testing , I ran the existing streams unit tests # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Minor : Fix the NPE happening in closing KafkaServer __EoT__ If server fails to connect to zk , the kafkaScheduler will be null when closing the kafka server . The NPE wo n't hurt kafka since the exception is swallowed . ` kafka.zookeeper.ZooKeeperClientTimeoutException : Timed out waiting for connection while in state : CONNECTING at kafka.zookeeper.ZooKeeperClient. $ anonfun $ waitUntilConnected $ 3 ( ZooKeeperClient.scala:225 ) at scala.runtime.java8.JFunction0 $ mcV $ sp.apply ( JFunction0 $ mcV $ sp.java:12 ) at kafka.utils.CoreUtils $ .inLock ( CoreUtils.scala:251 ) at kafka.zookeeper.ZooKeeperClient.waitUntilConnected ( ZooKeeperClient.scala:221 ) at kafka.zookeeper.ZooKeeperClient. < init > ( ZooKeeperClient.scala:95 ) at kafka.zk.KafkaZkClient $ .apply ( KafkaZkClient.scala:1581 ) at kafka.server.KafkaServer.createZkClient $ 1 ( KafkaServer.scala:348 ) at kafka.server.KafkaServer.initZkClient ( KafkaServer.scala:372 ) at kafka.server.KafkaServer.startup ( KafkaServer.scala:202 ) at kafka.server.KafkaServerStartable.startup ( KafkaServerStartable.scala:38 ) at kafka.Kafka $ .main ( Kafka.scala:75 ) at kafka.Kafka.main ( Kafka.scala ) [ 2018-07-06 05:51:27,036 ] INFO shutting down ( kafka.server.KafkaServer ) [ 2018-07-06 05:51:27,042 ] WARN ( kafka.utils.CoreUtils $ ) java.lang.NullPointerException at kafka.server.KafkaServer. $ anonfun $ shutdown $ 6 ( KafkaServer.scala:579 ) at kafka.utils.CoreUtils $ .swallow ( CoreUtils.scala:86 ) at kafka.server.KafkaServer.shutdown ( KafkaServer.scala:579 ) at kafka.server.KafkaServer.startup ( KafkaServer.scala:329 ) at kafka.server.KafkaServerStartable.startup ( KafkaServerStartable.scala:38 ) at kafka.Kafka $ .main ( Kafka.scala:75 ) at
KAFKA-7269 : Add docs for KStream.merge __EoT__ As discussed in KAFKA-7269
KAFKA-7310 : Fix testUnsupportedCiphers to work with Java 11 __EoT__ Java 11 supports TLS 1.3 which has different cipher names than previous TLS versions so the simplistic way of choosing ciphers is not guaranteed to work . Fix it by configuring the context to use TLS 1.2 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7134 : KafkaLog4jAppender - Appender exceptions are propagated t… __EoT__ …o caller Handling ignoreExceptions property in KafkaLog4jAppender *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7324 : NPE due to lack of SASLExtensions in SASL/OAUTHBEARER __EoT__ Set empty extensions if null is passed in . Signed-off-by : Ron Dagostino < rndgstn @ gmail.com >
KAFKA-7287 : Set open ACL permissions for old consumer znode path __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7128 : Follower has to catch up to offset within current leader epoch to join ISR __EoT__ If follower is not in ISR , it has to fetch up to start offset of the current leader epoch . Added unit test to verify this behavior . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Correct folder for package object scala __EoT__ This package was not in the right folder compare to the package statement at the top of the file
KAFKA-7139 Support to exclude the internal topics in kafka-topics.sh … __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove unused compressionType parameter from TestUtils.produceMessages __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fixing broken link in protocol docs __EoT__ Co-authored-by : Mickael Maison < mickael.maison @ gmail.com > Co-authored-by : Gantigmaa Selenge < tina.selenge @ gmail.com > # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7240 : -total metrics in Streams are incorrect __EoT__ Changes : * Add ` org.apache.kafka.streams.processor.internals.metrics.CumulativeCount ` analogous to ` Count ` , but not a ` SampledStat ` * Use ` CumulativeCount ` for -total metrics in streams instead of ` Count ` Testing strategy : * Add a test in StreamsMetricsImplTest which fails on old , incorrect behavior The contribution is my original work and I license the work to the project under the project 's open source license . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-5975 : No response when deleting topics and delete.topic.enable=false __EoT__ This PR implements [ KIP-322 ] ( https : //cwiki.apache.org/confluence/pages/viewpage.action ? pageId=87295558 ) .
MINOR : restructure Windows to favor immutable implementation __EoT__ In # 5510 , I added an unsafe ( but probably fine in practice ) equals/hashCode to the Windows hierarchy . I believe that this approach is better since : * It includes no non-deprecated mutable state in equals/hashCode * It avoids the subclass-return-type builder issues * It restricts the public interface to only the things that need to be known about all Windows . That is , all Windows need to offer a ` gracePeriodMs ( ) ` . They do *not* all need to offer a builder method to set it . See ` UnlimitedWindows ` , for which `` grace period '' is nonsense . It does not need to allow setting it , and it can return ` 0 ` , which is always correct . In contrast , consider ` UnlimitedWindows # until ( long ) ` , which has to throw a runtime exception because the interface unnecessarily requires this method to be implemented . In general , this PR sets a direction in which , once we drop the deprecated members from ` Windows ` , all the members will be abstract , and
Fix Streams Scala foreach recursive call __EoT__ Due to lack of conversion to kstream Predicate , existing foreach method in KStream.scala would result in StackOverflowError . This PR fixes the bug and adds testing for it .
kafkatest : Make JAAS config configurable via template variables __EoT__ Currently , the only way to add a new variable to the ` jaas.conf ` template file is to directly edit the path the config is constructed by adding new keyword arguments . This was n't necessarily a big problem , since you 'd only need edit the ` security_config.py ` file as JAAS settings should come from the security settings . Now , with the addition of [ KIP-342 ] ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-342 % 3A+Add+support+for+Custom+SASL+extensions+in+OAuthBearer+authentication ) , the OAuthBearer JAAS config supports arbitrary values in the form of SASL extensions . I thought it would be nice if we could make adding arbitrary values to the JAAS config in tests as painless as possible for future tests . # # # Future work The same problem to a lesser extent exists in the ` .properties ` template files for consumer/producer . That one can easily be worked around , since ducktape attaches a class ' variables to the template file ( https : //github.com/confluentinc/ducktape/blob/d7226d83aa11538765d352f69bbf75e0c27e6304/ducktape/template.py # L34 ) We can see this being used in multiple tests : * https : //github.com/apache/kafka/blob/3511e904effbfb74fa54c26467477863b7f730c0/tests/kafkatest/services/mirror_maker.py # L81 - variables used in `
KAFKA-7225 : Corrected system tests by generating external properties file __EoT__ Fix system tests from earlier # 5445 by moving to the ` ConnectSystemBase ` class the creation & cleanup of a file that can be used as externalized secrets in connector configs . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Return correct instance of SessionWindowSerde __EoT__ - minor javadoc cleanups . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : eliminate warnings from KafkaProducerTest __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : use method references instead of anonymus classes in Errors __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix side-effecting nullary methods warning in JsonValueTest __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6343 Documentation update in OS-level tuning section : add vm.ma… __EoT__ Documentation update in OS-level tuning section : add vm.max_map_count bullet point # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : only split at first occurrence of '= ' __EoT__ This is a fix to # 5226 to account for config properties that have an equal char in the value . Otherwise if there is one equal char in the value the following error occurs : `` ` dictionary update sequence element # XX has length 3 ; 2 is required `` ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Small refactorings on KTable joins __EoT__ WDYT ? @ vvcephei @ guozhangwang
KAFKA-7063 : Update documentation to remove references to old producers and consumers __EoT__
Minor : set task to null at the end of shouldWrapProducerFencedExceptionWithTaskMigragedExceptionInSuspendWhenCommitting __EoT__ Noticed the following in test output : `` ` org.apache.kafka.streams.processor.internals.StreamTaskTest > shouldWrapProducerFencedExceptionWithTaskMigragedExceptionInSuspendWhenCommitting STANDARD_OUT [ 2018-08-20 17:30:10,706 ] ERROR task [ 0_0 ] Could not close task due to the following error : ( org.apache.kafka.streams.processor.internals.StreamTask:660 ) java.lang.NullPointerException at org.apache.kafka.streams.processor.internals.RecordCollectorImpl.close ( RecordCollectorImpl.java:252 ) at org.apache.kafka.streams.processor.internals.StreamTask.suspend ( StreamTask.java:538 ) at org.apache.kafka.streams.processor.internals.StreamTask.close ( StreamTask.java:656 ) at org.apache.kafka.streams.processor.internals.StreamTaskTest.cleanup ( StreamTaskTest.java:176 ) `` ` This PR adds null check for producer in RecordCollectorImpl # close . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Improved configurations formatting __EoT__ Fixed a few formatting issues in the configurations # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6753 : Updating the OfflinePartitions count only when necessary __EoT__ Instead of updating the offline partitions count blindly after processing any event in the controller , this patch maintains the offline partitions count in a variable inside the PartitionStateMachine , and only updates it when necessary . This will be the first step in optimizing the KafkaController # updateMetrics function . Testing done : 1 . Added new test methods for the new way of updating offline partitions count . 2 . The new logic has been used inside LinkedIn in production for a few months without any problem . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5891 : Proper handling of LogicalTypes in Cast __EoT__ Currently logical types are dropped during Cast Transformation . This patch fixes this behaviour . # # # Committer Checklist ( excluded from commit message ) - [ X ] Verify design and implementation - [ X ] Verify test coverage and CI build status - [ X ] Verify documentation ( including upgrade notes )
KAFKA-6312 Add documentation about kafka-consumer-groups.sh 's ability… __EoT__ … to set/change offsets KIP-122 added the ability for kafka-consumer-groups.sh to reset/change consumer offsets , at a fine grained level . There is documentation on it in the kafka-consumer-groups.sh usage text . There is no such documentation on the kafka.apache.org website . We should add some documentation to the website , so that users can read about the functionality without having the tools installed . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-7278 ; replaceSegments ( ) should not call asyncDeleteSegment ( ) for segments which have been removed from segments list __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6835 : Enable topic unclean leader election to be enabled without controller change __EoT__
KAFKA-7298 ; Raise UnknownProducerIdException if next sequence number is unknown __EoT__ If the only producer state left in the log is a transaction marker , then we do not know the next expected sequence number . This can happen if there is a call to DeleteRecords which arrives prior to the writing of the marker . Currently we raise an OutOfOrderSequence error when this happens , but this is treated as a fatal error by the producer . Raising UnknownProducerId instead allows the producer to check for truncation using the last acknowledged sequence number and reset if possible . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7210 : Add a system test to verify the log compaction __EoT__ - Update TestLogCleaning tool to use Java consumer and rename as LogCompactionTester - Enable log compaction in System tests - Remove configs with values same as server defaults from `` kafka.properties '' template file . - Update the kafka.py logic to handle the duplicates between kafka.properties and server_prop_overides .
MINOR : Change order of Property Check To Avoid NPE __EoT__ The ` InternalStreamsBuilder # maybePerformOptimizations ` should change the order of how it checks for ` Topology_OPTIMIZATION ` to avoid an NPE . For testing , I added a test that results in an NPE without the provided fix and ran the existing set of streams tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update test to wait for final value to reduce flakiness updated test method for multiple keys __EoT__ Updated two integration tests to use ` IntegrationTestUtils # waitUntilFinalKeyValueRecordsReceived ` to eliminate flaky test results . Also , I updated ` IntegrationTestUtils # waitUntilFinalKeyValueRecordsReceived ` method to support having results with the same key present with different values . For testing , I ran the current suite of streams tests # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6998 : Disable Caching when max.cache.bytes are zero . __EoT__ 1 . As titled , add a ` rewriteTopology ` that 1 ) sets application id , 2 ) maybe disable caching , 3 ) adjust for source KTable . This optimization can hence be applied for both DSL or PAPI generated Topology . 2 . Defer the building of globalStateStores in ` rewriteTopology ` so that we can also disable caching . But we still need to build the state stores before ` InternalTopologyBuilder.build ( ) ` since we should only build global stores once for all threads . 3 . Added withCachingDisabled to StoreBuilder , it is a public API change . 4 . [ Optional ] Fixed unit test config setting functionalities , and set the necessary config to shorten the unit test latency ( now it reduces from 5min to 3.5min on my laptop ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7299 : Batch LeaderAndIsr requests for AutoLeaderRebalance __EoT__ Currently , in KafkaController.checkAndTriggerAutoLeaderRebalance ( ) , we call onPreferredReplicaElection ( ) one partition at a time . This means that the controller will be sending LeaderAndIsrRequest one partition at a time . It would be more efficient to call onPreferredReplicaElection ( ) for a batch of partitions to reduce the number of LeaderAndIsrRequests . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7296 ; Handle coordinator loading error in TxnOffsetCommit __EoT__ We should check TxnOffsetCommit responses for the COORDINATOR_LOADING_IN_PROGRESS error code and retry if we see it . Additionally , if we encounter an abortable error , we need to ensure that pending transaction offset commits are cleared . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7119 : Handle transient Kerberos errors on server side __EoT__ Do n't report retriable Kerberos errors on the server-side as authentication failures to clients . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7285 : Create new producer on each rebalance if EOS enabled __EoT__ - close producer on suspend ( ) if EOS enabled - create new producer on resume ( ) if EOS enabled # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : ( re ) add equals/hashCode to *Windows __EoT__ These were removed in b3771ba22acad7870e38ff7f58820c5b50946787 because they were incorrect and believed unused . In retrospect , they are in the public interface , so it might be better to just provide correct implementations . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7288 : Fix for SslSelectorTest.testCloseConnectionInClosingState __EoT__ Ensure that sends are completed before waiting for channel to be closed based on idle expiry , since channel will not be expired if added to ready keys in the next poll as a result of pending sends . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6761 : Reduce streams footprint part IV add optimization __EoT__ This PR adds the optimization of eliminating multiple repartition topics when the ` KStream ` resulting from a key-changing operation executes other methods using the new key and reduces the repartition topics to one . Note that this PR leaves in place the optimization for re-using a source topic as a changelog topic for source ` KTable ` instances . I 'll have another follow-up PR to move the source topic optimization to a method within ` InternalStreamsBuilder ` so it can be performed in the same area of the code . Additionally , the current value of ` StreamsConfig.OPTIMIZE ` is ` all ` and we 'll need to have another KIP to change the value to ` 2.1 ` . An integration test ` RepartitionOptimizingIntegrationTest ` which asserts the same results for an optimized topology with one repartition topic as the un-optimized version with four repartition topics . More tests will be added , but I wanted to get reviews on the approach now . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test
MINOR : Use explicit construction of clients in IntegrationTestHarness __EoT__ Pre-initialization of clients in IntegrationTestHarness is a cause of significant confusion and additionally has resulted in a bunch of inconsistent client creation patterns . This patch requires test cases to create needed clients explicitly and makes the creation logic more consistent . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7169 : Validate SASL extensions through callback on server side __EoT__
KAFKA-7119 : Handle transient Kerberos errors as non-fatal exceptions __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7222 : Add Windows grace period __EoT__ Part I of KIP-238 : * add grace period to Windows * deprecate retention/maintainMs and segmentInterval from Windows * record expired records in the store with a new metric * record late record drops as a new metric instead of as a `` skipped record '' # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Clean up to avoid errors in dynamic broker config tests __EoT__ Clean up cached instances in dynamic broker config on broker shutdown to avoid spurious session expiry errors in tests which restart broker . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Make regular expressions into static __EoT__ @ ijuma I made a new PR after several rebases and merges of trunk . It 's the same as this : https : //github.com/apache/kafka/pull/5042 except only 1 commit . This should improve performance , as in-place means that the regex has to be compiled again each time the code path is traversed . Which is not performant . A nice writeup on this topic can be found here : https : //softwareengineering.stackexchange.com/questions/216320/java-regex-patterns-compile-time-constants-or-instance-members And it 's also recommended in Joshua Bloch 's `` Effective Java 3rd Edition '' ( Item 6 : Avoid creating unnecessary objects ) # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status ( Are there code coverage reports ? ) - [ x ] Verify documentation ( including upgrade notes )
KAFKA-7284 : streams should unwrap fenced exception __EoT__ Unwrap the ` ProducerFencedException ` in ` RecordCollectorImpl ` so it can be caught and converted to a ` TaskMigratedException ` instead of triggering a shutdown . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7266 : Fix MetricsTest.testMetrics flakiness by increasing batch… __EoT__ The test ` kafka.api.MetricsTest.testMetrics ` has been failing intermittently in kafka builds . The particular failure is in the ` MessageConversionsTimeMs ` metric assertion : `` ` java.lang.AssertionError : Message conversion time not recorded 0.0 `` ` The test would intermittently fail because the conversion time took less than 1 millisecond . Such conversion time is reported as zero by the metric . There has been work done previously ( https : //github.com/apache/kafka/pull/4681 ) to combat the flakiness of the test and while it has improved it , the test still fails sometimes . Locally , this test failed 5 times out of 25 . # # # Changes Increase the record size and use compression - both will slow down message conversion enough to have it be above 1ms . Locally this test has not failed in 200 runs and counting
MINOR : Simplify replica fetcher ( step one ) __EoT__ With the removal of ` ConsumerFetchetThread ` , we can start simpifying the fetcher thread code . This is a possible first step . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add spotlessScalaCheck dependency to streams-scala test task __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5638 : Improve the Required ACL of ListGroups API ( KIP-231 ) __EoT__ [ KIP-231 ] ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-231 % 3A+Improve+the+Required+ACL+of+ListGroups+API ) # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7140 : Remove deprecated poll usages __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6966 : Extend TopologyDescription.Sink to return TopicNameExtractor __EoT__ This is an update ` TopologyDescription.Sink ` and ` TopologyDescription.Source ` . The original intent for ` TopologyDescription ` was to provide users with an interface to perform runtime checking of Topologies . However , ` TopologyDescription ` has relied too heavily on returning strings as representations of various inner components of Topologies such as topics , topic pattern , etc . This PR instead changes the return types to that of the underlying object and relies on the ` toString ( ) ` method of these objects to maintain their human readable representations . More details are outlined in this PR 's corresponding [ KIP ] ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-321 % 3A+Update+TopologyDescription+to+better+represent+Source+and+Sink+Nodes ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7250 : switch scala transform to TransformSupplier __EoT__ # 5468 introduced a breaking API change that was actually avoidable . This PR re-introduces the old API as deprecated and alters the API introduced by # 5468 to be consistent with the other methods * also , fixed misc syntax problems # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fixed log in Topology Builder . __EoT__ - addressed some warnings shown by Intellij https : //github.com/JetBrains/intellij-community/blob/master/plugins/InspectionGadgets/src/inspectionDescriptions/ToArrayCallWithZeroLengthArrayArgument.html # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4950 : Fix ConcurrentModificationException on assigned-partitions metric __EoT__ Code change : - prevent ` java.util.ConcurrentModificationException ` being thrown when fetching the consumer coordinator assigned-partitions metric value from a ` MetricsReporter ` ( e.g . a reporter exporting metrics periodically running in a separate thread ) because of a race condition by using a volatile field for storing the number of assigned partitions : `` ` java.util.ConcurrentModificationException : null at java.util.LinkedHashMap $ LinkedHashIterator.nextNode ( LinkedHashMap.java:719 ) at java.util.LinkedHashMap $ LinkedKeyIterator.next ( LinkedHashMap.java:742 ) at java.util.AbstractCollection.addAll ( AbstractCollection.java:343 ) at java.util.HashSet. < init > ( HashSet.java:119 ) at org.apache.kafka.common.internals.PartitionStates.partitionSet ( PartitionStates.java:66 ) at org.apache.kafka.clients.consumer.internals.SubscriptionState.assignedPartitions ( SubscriptionState.java:293 ) at org.apache.kafka.clients.consumer.internals.ConsumerCoordinator $ ConsumerCoordinatorMetrics $ 1.measure ( ConsumerCoordinator.java:880 ) ... at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:511 ) at java.util.concurrent.FutureTask.runAndReset ( FutureTask.java:308 ) at java.util.concurrent.ScheduledThreadPoolExecutor $ ScheduledFutureTask.access $ 301 ( ScheduledThreadPoolExecutor.java:180 ) at java.util.concurrent.ScheduledThreadPoolExecutor $ ScheduledFutureTask.run ( ScheduledThreadPoolExecutor.java:294 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1149 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:624 ) at java.lang.Thread.run ( Thread.java:748 ) `` ` - new unit test to reproduce the issue and detect potential future regression I am using a volatile field on ` SubscriptionState ` rather than changing the ` PartitionStates.map ` field to some thread safe ` LinkedHashMap `
KAFKA-7158 : Add unit test for window store range queries __EoT__ While debugging the reported issue , I found that our current unit test lacks coverage to actually expose the underlying root cause . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix Streams scala format violations __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix minikdc cleanup in system tests __EoT__ The original way of stopping the minikdc process sometimes misfires because the process arg string is very long , and ` ps ` is not able to find the correct process . Using the ` kill_java_processes ` method is more reliable for finding and killing java processes . Signed-off-by : Arjun Satish < arjun @ confluent.io > # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Fix a typo in delegation.token.expiry.time.ms docs __EoT__ although it is obvious from the property name . Was : > val DelegationTokenExpiryTimeMsDoc = `` The token validity time in seconds before the token needs to be renewed . Default value 1 day . '' Proposed : > val DelegationTokenExpiryTimeMsDoc = `` The token validity time in **mili**seconds before the token needs to be renewed . Default value 1 day . '' # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7250 : fix transform function in scala DSL to accept TranformerS… __EoT__ …upplier Restructuring scala DSL transform function to accept TransformerSupplier instead of a single instance of Transformer that was shared across tasks . Updated scaladoc . Added a unit test to ensure created topology corresponds to equivalent java definition . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : log AdminClient configs __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7252 : fix Streams docs state.dir __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Fixed Spelling . __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7142 : fix joinGroup performance issues __EoT__ Reduce joinGroup time complexity from O ( N ) to O ( 1 ) Trace the number of `` awaiting join members '' , and the number of members that support each protocol . So that , we do n't need to count the members in GroupMetadata .notYetRejoinedMembers ( ) , and do n't need to calculate set intersection in GroupMetadata .supportsProtocols ( ) , making the 2 operations O ( 1 ) instead of O ( N ) .
KAFKA-7169 : Custom SASL extensions for OAuthBearer authentication mechanism __EoT__ Excuse the number of commits - AFAIA they 're all squashed together in the end so it should be okay
MINOR : clean up window store interface to avoid confusion __EoT__ The existing interface and javadoc on window store are confusing and slightly misleading about the roles of the ` windowSize ` parameter to the store and the ` timestamp ` parameter of ` WindowStore # put ` . * clarify the parameters * deprecate ` WindowStore # put ( ) ` . This variant is confusing . It 's almost certainly not the right thing to use for anyone , since it still inserts the record at a timestamp , and it 's ( currently ) undefined what the timestamp will be . In practice , this is always the record timestamp , which is again , unlikely to be correct for time window stores . If that is the intent , callers can easily supply the record timestamp themselves . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : close producer instance in AbstractJoinIntegrationTest __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add Timer to simplify timeout bookkeeping __EoT__ This is an attempt to find a better pattern for blocking methods with a timeout . We currently do a lot of bookkeeping for timeouts which is both error-prone and distracting . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Require final variables in Streams __EoT__ Streams code style requires the ` final ` modifier when applicable . Rather than leaning on the reviewers to notice and nitpitck this issue , we can use checkstyle to enforce it . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : improve JavaDocs for Streams PAPI WordCountExample __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7231 ; Ensure NetworkClient uses overridden request timeout __EoT__ Fixed incorrect use of default timeout instead of the argument explicitly passed to ` newClientRequest ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Implement toString ( ) in config validator classes __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6761 : Construct Physical Plan using Graph , Reduce streams footprint part III __EoT__ Sorry for the massive PR , but at this point , it 's very difficult to break up into smaller parts now that we are building the logical and physical plan . It 's worth noting at the moment this PR does not include optimizations to help with the review burden , the 4th PR will include an optimization for repartition topics and re-using source topics as changelogs for KTables The specific changes in this PR from the second PR include 2 . Changed the types of graph nodes to names conveying more context 2 . Build the entire physical plan from the graph , after ` StreamsBuilder.build ( ) ` is called . Other changes are addressed directly as review comments on the PR . Testing consists of using all existing streams tests to validate building the physical plan with graph # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7161 : check invariant : oldValue is in the state __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove 1 minute minimum segment interval __EoT__ * new minimum is 0 , just like window size * refactor tests to use smaller segment sizes as well # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6999 : Document read-write lock usage of caching enabled stores __EoT__ Add description for the deadlock vulnerability of ` ReadOnlyKeyValueStore ` .
[ MINOR ] Improve consumer logging on LeaveGroup __EoT__
KAFKA-7192 Follow-up : update checkpoint to the reset beginning offset __EoT__ 1 . When we reinitialize the state store due to no CHECKPOINT with EOS turned on , we should update the checkpoint to consumer.seekToBeginnning ( ) / consumer.position ( ) to avoid falling into endless iterations . 2 . Fixed a few other logic bugs around needsInitializing and needsRestoring . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Kafka 6432 : make index lookup more cache friendly __EoT__ Do a binary lookup at the end of index first , as the end section of the index is more likely to be in the page cache than the median part of the index
KAFKA-7192 : Wipe out if EOS is turned on and checkpoint file does not exist __EoT__ 1 . As titled and as described in comments . 2 . Modified unit test slightly to insert for new keys in committed data to expose this issue . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Caching layer should forward record timestamp __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5886 : Introduce delivery.timeout.ms producer config ( KIP-91 ) __EoT__ This change is based on @ sutambe 's change https : //github.com/apache/kafka/pull/3849 earlier . primary changes in this pr : 1 . In RecordAccumulator.java , use ` inFlightBatches ` to track the in-flight batches , instead of using ` soonToExpireInFlightsBatches ` to only track the soon-to-expire batches . With this change , in RecordAccumulator.expiredBatches , we check both ` inFlightBatches ` and ` batches ` to find the expired batches . 2 . Fixed the test failures in SenderTest.java and RecordAccumulatorTest.java .
KAFKA-7144 : Fix task assignment to be even __EoT__ This PR now justs removes the check in ` TaskPairs.hasNewPair ` that was causing the task assignment issue . This was done as we need to further refine task assignment strategy and this approach needs to include the statefulness of tasks and is best done in one pass vs taking a `` patchy '' approach . Updated current tests and ran locally # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : internal config objects should not be logged __EoT__ ` StreamsPartitionAssigner ` and ` InternalTopicManager ` create config objects for internal usage only . Those config objects should not log their setting , because they do n't reflect the actual used config . This can be confusing to uses as different log entries show different config values and the internal once always show default configs ( could give the impression that user overwrites are not respected ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove TopicAndPartition usage from tests __EoT__ - also replace TopicAndPartition with TopicPartition in MetadataCache # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7193 : Use ZooKeeper IP address in streams tests to avoid timeouts __EoT__ ZooKeeper client from version 3.4.13 does n't handle connections to ` localhost ` very well . If ZooKeeper is started on 127.0.0.1 on a machine that has both ipv4 and ipv6 and a client is created using ` localhost ` rather than the IP address in the connection string , ZooKeeper client attempts to connect to ipv4 or ipv6 randomly with a fixed one second backoff if connection fails . Use ` 127.0.0.1 ` instead of ` localhost ` in streams tests to avoid intermittent test failures due to ZK client connection timeouts if ipv6 is chosen in consecutive address selections . Also add note to upgrade docs for 2.0.0 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Close ZooKeeperClient if waitUntilConnected fails during construction __EoT__ This has always been an issue , but the recent upgrade to ZooKeeper 3.4.13 means that it is also an issue when an unresolvable ZK address is used , causing some tests to leak threads . The change in behaviour in ZK 3.4.13 is that no exception is thrown from the ZooKeeper constructor in case of an unresolvable address . Instead , ZooKeeper tries to re-resolve the address hoping it becomes resolvable again . We eventually throw a ` ZooKeeperClientTimeoutException ` , which is similar to the case where the the address is resolvable , but ZooKeeper is not reachable . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-6897 : Prevent producer from blocking indefinitely after close __EoT__ After successful completion of KafkaProducer # close , it is possible that an application calls KafkaProducer # send . If the send is invoked for a topic for which we do not have any metadata , the producer will block until ` max.block.ms ` elapses - we do not expect to receive any metadata update in this case because Sender ( and NetworkClient ) has already exited . It is only when RecordAccumulator # append is invoked that we notice that the producer has already been closed and throw an exception . If ` max.block.ms ` is set to Long.MaxValue ( or a sufficiently high value in general ) , the producer could block awaiting metadata indefinitely . This patch makes sure ` Metadata # awaitUpdate ` periodically checks if the network client has been closed , and if so bails out as soon as possible . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add registerController method to KafkaZkClient… __EoT__ and change KafkaController to use this instead of lower level zk calls . As minor cleanup , remove InZk postfixes from registerBrokerInZk and updateBrokerInfoInZk . As ` checkedEphemeralCreate ` is not used any more from outside of KafkaZkClient it 's visibility was also reduced ControllerIntegrationTest already covers this functionality well , it validates the refactor . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Change `` no such session ID '' log to debug __EoT__ The metric will give us good information about the number of evictions per second , so we do n't need the INFO log .
MINOR : Fix incorrect print in KafkaProducer __EoT__ The print of timeout ms is not correctly formatted .
MINOR : Append or create file in FileStreamSinkTask __EoT__ In FileStreamSinkTask we need to create the file it does n't exist . A recent change from ` new FileOutputStream ` to ` Files.newOutputStream ` missed the ` CREATE ` flag additionally to ` APPEND `
KAFKA-7185 : Allow empty resource name when matching ACLs __EoT__
MINOR : Add thread dumps if broker node can not be stopped __EoT__ In system tests , it is useful to have the thread dumps if a broker can not be stopped using SIGTERM . Signed-off-by : Arjun Satish < arjun @ confluent.io >
KAFKA-5037 Follow-up : move Scala test to Java __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7141 : ConsumerGroupCommand should describe group assignment eve… __EoT__ …n with no offsets committed . https : //issues.apache.org/jira/browse/KAFKA-7141 Currently , if a consumer group never commits offsets , ConsumerGroupCommand can not describe it at all even if the member assignment is valid . Instead , the tool should be able to describe the group information showing empty current_offset and LAG . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3702 : Change log level of SSL close_notify failure __EoT__ SslTransportLayer currently closes the SSL engine and logs a warning if ` close_notify ` message canot be sent because the remote end closed its connection . This tends to fill up broker logs , especially when using clients which close connections immediately . Since this log entry is not very useful anyway , it would be better to log at debug level . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove deprecated ZkUtils usage from EmbeddedKafkaCluster __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7182 : SASL/OAUTHBEARER client response missing % x01 seps __EoT__ The format of the SASL/OAUTHBEARER client response is defined in RFC 7628 Section 3.1 as follows : kvsep = % x01 key = 1* ( ALPHA ) value = * ( VCHAR / SP / HTAB / CR / LF ) kvpair = key `` = '' value kvsep client-resp = ( gs2-header kvsep *kvpair kvsep ) / kvsep ; ; gs2-header = See RFC 5801 ( Section 4 ) The SASL/OAUTHBEARER client response as currently implemented in OAuthBearerSaslClient sends the valid gs2-header `` n , , '' but then sends the `` auth '' key and value immediately after it , like this : String.format ( `` n , ,auth=Bearer % s '' , callback.token ( ) .value ( ) ) This does not conform to the specification because there is no % x01 after the gs2-header , no % x01 after the auth value , and no terminating % x01 . The code should instead be as follows : String.format ( `` n , ,\u0001auth=Bearer % s\u0001\u0001 '' , callback.token ( ) .value ( ) ) Similarly , the parsing of the client response in OAuthBearerSaslServer , which
KAFKA-3514 : Remove min timestamp tracker __EoT__ 1 . Remove MinTimestampTracker and its TimestampTracker interface . 2 . In RecordQueue , keep track of the head record ( deserialized ) while put the rest raw bytes records in the fifo queue , the head record as well as the partition timestamp will be updated accordingly . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4994 : Remove findbugs suppression for OffsetStorageWriter __EoT__ Remove findbugs suppression for OffsetStorageWriter because it is no longer needed .
MINOR : improve docs version numbers __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove references to version 1.2 in docs __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : remove unused MeteredKeyValueStore __EoT__ - remove MeteredKeyValueStore - rename MeteredKeyValueByteStore to MeteredKeyValueStore - code cleanup ( Java8 and others ) - removed usage of deprecated ` KafkaMetric # value ( ) ` - merged ` InnerMeteredKeyValueStore ` into ` MeteredKeyValueStore ` and removed ` TypeConverter ` interface
KAFKA-7168 : Treat connection close during SSL handshake as retriable __EoT__ SSL ` close_notify ` from broker connection close is processed as an ` SSLException ` while unwrapping the final message when the I/O exception due to remote close is processed . This should be handled as a retriable ` IOException ` rather than a non-retriable ` SslAuthenticationException ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Updated Quickstart to mention log.dirs __EoT__ The default server.properties file now contains the log.dirs setting and not log.dir anymore . Co-authored-by : Mickael Maison < mickael.maison @ gmail.com > Co-authored-by : Katherine Farmer < kfarme3 @ uk.ibm.com > # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
HOTFIX : Minor web docs fixes on message header __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix broken Javadoc of [ AbstractIndex|OffsetIndex ] __EoT__ In the javadoc of ` AbstractIndex ` and ` OffsetIndex ` , thrown ` Exception ` s are not imported .
KAFKA-7103 : Use bulkloading for RocksDBSegmentedBytesStore during init __EoT__ This PR uses bulk loading for recovering RocksDBWindowStore , same as RocksDBStore . Will perform unit test and integration test . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4041 : Update ZooKeeper to 3.4.13 __EoT__ This includes a fix for ZOOKEEPER-2184 ( Zookeeper Client should re-resolve hosts when connection attempts fail ) , which fixes KAFKA-4041 . Updated a couple of tests as unresolvable addresses are now retried until the connection timeout . Cleaned up tests a little . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : update release.py __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Kafka 6884 consumer group command should use new admin client __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * - ConsumerGroupCommand is updated to use the new AdminClient . *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * - Executed existing unit tests : DescribeConsumerGroupTest , DeleteConsumerGroupTest , DeleteConsumerGroupsTest , ResetConsumerGroupOffsetTest ) , ListConsumerGroupTest - Created a kafka-console-consumer & manually verified `` bin/kafka-consumer-groups.sh -- bootstrap-server localhost:9092 -- describe -- group 1 `` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update Jetty to 9.4.11 __EoT__ This includes important fixes : http : //dev.eclipse.org/mhonarc/lists/jetty-announce/msg00122.html # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Added description for zookeeper.connect __EoT__ This setting allows specifying a chroot so we documented it . Co-authored-by : Mickael Maison < mickael.maison @ gmail.com > Co-authored-by : Katherine Farmer < kfarme3 @ uk.ibm.com > # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Print exception stack traces in ConsumerGroupCommand . __EoT__ When an exception is caught in ConsumerGroupCommand command line utility it does not print the stack trace , this could lead to crucial information regarding the error to not be displayed to the user . More specifically , when misconfiguring consumer configuration the user will only see the message : `` ` Error : Executing consumer group command failed due to Failed to construct kafka consumer `` ` This happens since [ the code which instantiates this exception ] ( https : //github.com/apache/kafka/blob/2.0.0-rc0/clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java # L795 ) does not add all relevant information in the message but rather in the `` cause '' member . In order to find out the issue I had to compile Kafka and debug this code to find out that the error was due to a misconfiguration of the consumer : `` ` Caused by : org.apache.kafka.common.config.ConfigException : request.timeout.ms should be greater than session.timeout.ms and fetch.max.wait.ms `` ` Suggested change is to simply print the stack traces since this is a command line utility ( same as the error is printed in the line preceding this one ) . This will provide the user with the
MINOR : Tighten FileRecords size checks to prevent overflow __EoT__ Add some additional size validation to prevent overflows when using ` FileRecords ` . This may help us detect the cause of KAFKA-7130 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Proposal to use Scalafmt with the Scala files __EoT__ This eliminates the different people 's opinion on coding style and makes the codebase consistant . I put arbitrary rules , let me know your thoughts . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Use FetchRequest v8 and ListOffsetRequest v3 in ReplicaFetcherThread __EoT__ If inter.broker.protocol.version is 2.0-IV1 or newer . Also fixed ListOffsetRequest so that v2 is used , if applicable . Added a unit test that verifies that we use the latest version of the various requests by default . Included a few minor tweaks to make testing easier . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7136 : Avoid deadlocks in synchronized metrics reporters __EoT__ We need to use the same lock for metric update and read to avoid NPE and concurrent modification exceptions . Sensor add/remove/update are synchronized on ` Sensor ` since they access lists and maps that are not thread-safe . Reporters are notified of metrics add/remove while holding ( ` Sensor ` , ` Metrics ` ) locks and reporters may synchronize on the reporter lock . Metric read may be invoked by metrics reporters while holding a reporter lock . So read/update can not be synchronized using ` Sensor ` since that could lead to deadlock . This PR introduces a new lock in Sensor for update/read . Locking order : `` ` - Sensor # add : Sensor - > Metrics - > MetricsReporter - Metrics # removeSensor : Sensor - > Metrics - > MetricsReporter - KafkaMetric # metricValue : MetricsReporter - > Sensor # metricLock - Sensor # record : Sensor - > Sensor # metricLock `` ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [
MINOR : Avoid conflicting versions of org.apache.mina for MiniKdc deps __EoT__ We have updated ` apacheda ` to a newer version that uses ` mina-core-2.0.18 ` while ` apacheds ` uses ` mina-core-2.0.16 ` . Since these are used only for testing using ` MiniKdc ` , it would be better to use the versions from ` apacheds ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix standby stream time __EoT__ # 5253 broke standby restoration for windowed stores . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7101 : Consider session store for windowed store default configs __EoT__ 1. extend ` isWindowStore ` to consider session store as well . 2. extend the existing unit test accordingly . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7080 : replace numSegments with segmentInterval __EoT__ See also KIP-319 . Replace number-of-segments parameters with segment-interval-ms parameters in various places . The latter was always the parameter that several components needed , and we accidentally supplied the former because it was the one available . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Close timing window in SimpleAclAuthorizer startup __EoT__ ZooKeeper listener for change notifications should be created before loading the ACL cache to avoid timing window if acls are modified when broker is starting up . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Minor : fix javadocs of StreamsConfig and ValueTransformerWithKey __EoT__ Those doc errors are explicit . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6986 : Export Admin Client metrics through Stream Threads __EoT__ KAFKA-6986 : Export Admin Client metrics through Stream Threads We already exported producer and consumer metrics through KafkaStreams class : https : //github.com/apache/kafka/pull/4998 It makes sense to also export the Admin client metrics . I did n't add a separate unittest case for this . Let me know if it 's needed . This is my first contribution , feel free to point out any mistakes that I did . @ abbccdda
MINOR : Use kill_java_processes when killing ConsoleConsumer process __EoT__ kill_java_processes uses jcmd instead of grep for find pids , which is more reliable . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7111 : Log error connecting to node at a higher log level __EoT__ There were cases where the broker would return an unresolve-able address ( e.g broker inside a docker network while client is outside ) and the client would not log any information as to why it is timing out , since the default log level does not print ` DEBUG ` messages . Changing this log level will enable easier troubleshooting in such circumstances . This change does not change the logs shown on transient failures like a broker failure , judging from my local tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7028 : Properly authorize custom principal objects __EoT__ Previously , it would compare two different classes ` KafkaPrincipal ` and the custom class , which would always return false because of the implementation of ` KafkaPrincipal # equals ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Ensure heartbeat last poll time always updated __EoT__ We need to ensure that the last poll time is always updated when the user call ` poll ( Duration ) ` . This patch fixes a bug in the new KIP-266 timeout behavior which would cause this to be skipped if the coordinator could not be found while the consumer was in an active group . Note that I 've also fixed some type inconsistencies for various timeouts . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7097 VerifiableProducer does not work properly with -- message-create-time argument __EoT__ Currently create time is interpreted as integer . This PR makes the tool accept long values . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Store metrics scope , total metrics __EoT__ 1 . Rename metrics scope of rocksDB window and session stores ; also modify the store metrics accordingly with guidance on its correlations to ` metricsScope ` . 2 . Add the missing ` total ` metrics for per-thread , per-task , per-node and per-store sensors . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6809 : Count inbound connections in the connection-creation metric __EoT__ Previously , the connection-creation metric only accounted for opened connections **from** the broker . This change extends it to account for received connections . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7104 : Consistent leader 's state in fetch response __EoT__ Do not update LogReadResult after it is initially populated when returning fetches immediately ( i.e . without hitting the purgatory ) . This was done in https : //github.com/apache/kafka/pull/3954 as optimization so that followers get most recent high watermark and log start offset . However , since many things can happen ( like deleting old segments and advancing log start offset ) between initial creation of LogReadResult and the update , we can hit issues like log start offset in fetch response being higher than the last offset in fetched records . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : update consumer javadoc for position method __EoT__
KAFKA-7091 : AdminClient should handle FindCoordinatorResponse errors __EoT__ - Update KafkaAdminClient implementation to handle FindCoordinatorResponse errors - Remove scala AdminClient usage from core and streams tests # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Avoid FileInputStream/FileOutputStream __EoT__ They rely on finalizers ( before Java 11 ) , which create unnecessary GC load . The alternatives are as easy to use and do n't have this issue . Also use ` FileChannel ` directly instead of retrieving it from ` RandomAccessFile ` whenever possible since the indirection is unnecessary . Finally , add a few ` try/finally ` blocks . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : KIP-211 Follow-up __EoT__ Updates the description of ` offsets.retention.minutes ` config , and fixes an upgrade note . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6591 : Move super user check before ACL matching __EoT__ Currently the check whether a user as a super user in SimpleAclAuthorizer is performed only after all other ACLs have been evaluated . Since all requests from a super user are granted we do n't really need to apply the ACLs . This commit returns true if the user is a super user before checking ACLs , thus bypassing the needless evaluation effort .
MINOR : Fix timing issue in advertised listener update test __EoT__ Wait for produce to fail before updating listener to avoid send succeeding after the listener update . Also use different topics in tests with connection failures where one is expected to fail and the other is expected to succeed . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Avoid using a big lock in pool # getAndMaybePut __EoT__ Avoid using a big createLock in pool # getAndMaybePut by using the ConcurrentHashMap # computeIfAbsent function .
MINOR : Fix expected output in Streams quickstart __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6978 : make window retention time strict __EoT__ Enforce window retention times strictly : * records for windows that are expired get dropped * queries for timestamps old enough to be expired immediately answered with ` null ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : temporarily ignore system test until I can fix it __EoT__ # 5253 broke this test . We are working on a fix . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Cleanup threads in integration tests __EoT__ Leftover threads doing network I/O can interfere with subsequent tests . Add missing shutdown in tests and include admin client in the check for leftover threads . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4682 : Revise expiration semantics of consumer group offsets ( KIP-211 - Part 1 ) __EoT__ The implementation of [ expiration semantics for unsubscribed topics ] ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-211 % 3A+Revise+Expiration+Semantics+of+Consumer+Group+Offsets # KIP-211 : ReviseExpirationSemanticsofConsumerGroupOffsets-UnsubscribingfromaTopic ) will be done in a separate PR . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7082 : Concurrent create topics may throw NodeExistsException __EoT__ This is an unexpected exception so ` UnknownServerException ` is thrown back to the client . This is a minimal change to make the behaviour match ` ZkUtils ` . This is better , but one could argue that it 's not perfect . A more sophisticated approach can be tackled separately . Added a concurrent test that fails without this change . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Upgrade to Gradle 4.8.1 __EoT__ Maven Central dropped support for all versions but TLS 1.2 , so dependency resolution fails if Gradle builds run with JDK 7 . 2.0 and trunk require JDK 8 , but every other version is affected . Gradle 4.8.1 fixes the issue by enabling TLS 1.2 by default even when JDK 7 is used . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update version for doc to 2.0.0 __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7072 : clean up segments only after they expire __EoT__ Significant refactor of Segments to use stream-time as the basis of segment expiration . Previously Segments assumed that the current record time was representative of stream time . In the event of a `` future '' event ( one whose record time is greater than the stream time ) , this would inappropriately drop live segments . Now , Segments will provision the new segment to house the future event and drop old segments only after they expire . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6546 : Use LISTENER_NOT_FOUND_ON_LEADER error for missing listener __EoT__ For metadata request version 6 and above , use a different error code to indicate missing listener on leader broker to enable diagnosis of listener configuration issues . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6697 ; JBOD configured broker should not die if log directory is invalid __EoT__ Currently JBOD configured broker will still die on startup if dir.getCanonicalPath ( ) throws IOException . We should mark such log directory as offline and broker should still run if there is good disk . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6938 : Add headers support in new api section __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Kafka_7064 - bug introduced when switching config commands to ConfigResource __EoT__ Fix for [ KAFKA-7064 ] ( https : //issues.apache.org/jira/browse/KAFKA-7064 ) I some how managed to get the Ids wrong when copying them from request.Resource to ConfigResource.Type , even though I double checked . : -/ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-2983 : Remove Scala consumers and related code __EoT__ - Removed Scala consumers ( ` SimpleConsumer ` and ` ZooKeeperConsumerConnector ` ) and their tests . - Removed Scala request/response/message classes . - Removed any mention of new consumer or new producer in the code with the exception of MirrorMaker where the new.consumer option was never deprecated so we have to keep it for now . The non-code documentation has not been updated either , that will be done separately . - Removed a number of tools that only made sense in the context of the Scala consumers ( see upgrade notes ) . - Updated some tools that worked with both Scala and Java consumers so that they only support the latter ( see upgrade notes ) . - Removed ` BaseConsumer ` and related classes apart from ` BaseRecord ` which is used in ` MirrorMakerMessageHandler ` . The latter is a pluggable interface so effectively public API . - Removed ` ZkUtils ` methods that were only used by the old consumers . - Removed ` ZkUtils.registerBroker ` and ` ZKCheckedEphemeral ` since the broker now uses the methods in ` KafkaZkClient ` and no-one else should
KAFKA-7012 : Do n't process SSL channels without data to process __EoT__ Avoid unnecessary processing of SSL channels when there are some bytes buffered , but not enough to make progress . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7067 : Include connector configs added in KIP-297 and KIP-298 in the system test assertion __EoT__ The new connector configs added in KIP-297 and KIP-298 would need to be updated in the connect_rest_test.py so that the expected results match the actual . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Do not require request timeout be larger than session timeout __EoT__ This check was left over from the old consumer logic in which the join group was bound by the session timeout . Since we use a custom timeout for JoinGroup , this restriction no longer makes sense . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6761 : Construct logical Streams Graph in DSL Parsing __EoT__ This version is a WIP and intentionally leaves out some additional required changes to keep the reviewing effort more manageable . This version of the process includes 1 . Cleaning up the graph objects to reduce the number of parameters and make the naming conventions more clear . 2 . Intercepting all calls to the ` InternalToplogyBuilder ` and capturing all details required for possible optimizations and building the final topology . This PR does not include writing out the current physical plan , so no tests included . The next PR will include additional changes to building the graph and writing the topology out without optimizations , using the current streams tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6805 : Enable broker configs to be stored in ZK before broker start __EoT__ Support configuration of dynamic broker configs in ZooKeeper before starting brokers using ConfigCommand . This will allow password configs to be encrypted and stored in ZooKeeper , without requiring clear passwords in server.properties to bootstrap the broker first . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : provide an example for deserialization exception handler __EoT__ Also added a paragraph from data types to link to the example code . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7048 NPE when creating connector __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix Vagrant VM setup __EoT__ Starting up the VMs with ` vagrant/vagrant-up.sh ` fails with : `` ` == > worker1 : + git clone -q https : //github.com/confluentinc/kibosh.git == > worker1 : fatal : destination path 'kibosh ' already exists and is not an empty directory . `` `
HOTFIX : remove sub-module 'kafka ' __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7021 : Update upgrade guide section for reusing source topic __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ MINOR ] Fix chunked down-conversion behavior when no valid batch exists after conversion __EoT__ We might decide to drop certain message batches during down-conversion because older clients might not be able to interpret them . One such example is control batches which are typically removed by the broker if down-conversion to V0 or V1 is required . This patch makes sure the chunked down-conversion implementation is able to handle such cases . Credit to @ omkreddy for reporting this issue , providing logs and a reproducible test case . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7010 : Rename ResourceNameType to PatternType __EoT__ Fix for [ KAFKA-7010 ] ( https : //issues.apache.org/jira/browse/KAFKA-7010 ) . The initial PR for KIP-290 # 5117 added a new ` ResourceNameType ` , which was initially a field on ` Resource ` and ` ResourceFilter ` . However , follow on PRs have now moved the name type fields to new ` ResourcePattern ` and ` ResourcePatternFilter ` classes . This means the old name is no longer valid and may be confusing . The PR looks to rename the class to a more intuitive ` resource.PatternType ` . @ cmccabe also requested that the current ` ANY ` value for this class be renamed to avoid confusion . ` PatternType.ANY ` currently causes ` ResourcePatternFilter ` to bring back all ACLs that would affect the supplied resource , i.e . it brings back literal , wildcard ACLs , and also does pattern matching to work out which prefix acls would affect the resource . This is very different from the behaviour of ` ResourceType.ANY ` , which just means the filter ignores the type of resources . ` ANY ` is to be renamed to ` MATCH ` to disambiguate
MINOR : Use ListOffsets request instead of SimpleConsumer in LogOffsetTest __EoT__ Included a few clean-ups related to unused variables in tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Use KafkaConsumer in GetOffsetShell __EoT__ This does the minimal amount of work so that the tool relies on public non-deprecated APIs ( i.e . it no longer relies on Scala clients code ) . Additional improvements ( not included here ) have been proposed via KIP-308 . There are a few other PRs that touch this class with overlapping goals : - https : //github.com/apache/kafka/pull/2891 - https : //github.com/apache/kafka/pull/3051 - https : //github.com/apache/kafka/pull/3320 One of them remains relevant in the context of KIP-308 , but the others have been superseded . I included the authors of the 3 PRs as co-authors . Co-authored-by : Arseniy Tashoyan < tashoyan @ gmail.com > Co-authored-by : Vahid Hashemian < vahidhashemian @ us.ibm.com > Co-authored-by : Mohammed Amine GARMES Co-authored-by : Ismael Juma < ismael @ juma.me.uk > # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6975 : Fix fetching from non-batch-aligned log start offset __EoT__ It is possible that log start offset may fall in the middle of the batch after AdminClient # deleteRecords ( ) . This will cause a follower starting from log start offset to fail fetching ( all records ) . Use-cases when a follower will start fetching from log start offset includes : 1 ) new replica due to partition re-assignment ; 2 ) new local replica created as a result of AdminClient # AlterReplicaLogDirs ( ) ; 3 ) broker that was down for some time while AdminClient # deleteRecords ( ) move log start offset beyond its HW . Added two integration tests : 1 ) Produce and then AdminClient # deleteRecords ( ) while one of the followers is down , and then restart of the follower requires fetching from log start offset ; 2 ) AdminClient # AlterReplicaLogDirs ( ) after AdminClient # deleteRecords ( ) # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6711 : GlobalStateManagerImpl should not write offsets of in-memory stores in checkpoint file __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7030 : Add configuration to disable message down-conversion ( KIP-283 ) __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Replace test usages of ClientUtils.fetchTopicMetadata with BaseRequestTest __EoT__ For tests that are not testing the old consumers functionality . As part of this , consolidate ` TopicMetadataTest ` into ` MetadataRequestTest ` . Finally , remove ` ProducerBounceTest ` which has no tests left in it . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7050 : Decrease default consumer request timeout to 30s __EoT__ This patch changes the default ` request.timeout.ms ` of the consumer to 30 seconds . Additionally , it adds logic to ` NetworkClient ` to set timeouts at the request level . We use this to handle the special case of the JoinGroup request , which may block for as long as the value configured by ` max.poll.interval.ms ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6860 : Fix NPE in Kafka Streams with EOS enabled __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6749 : Fixed TopologyTestDriver to process stream processing guarantee as exactly once __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6749 Fixed Stream processing topologies which are configured to use EXACTLY_ONCE processing guarantee can be tested with the ` TopologyTestDriver ` . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : code cleanup follow up for KAFKA-6906 __EoT__ Intellij warned that the condition of the ` if ` will always be ` false ` -- thinking about this , it makes sense . After refactoring the code in KAFKA-6906 and moving the EOS-part out of the ` commitOffsetNeeded ` block L433-440 cover this case already and we can remove redundant code . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6474 : Rewrite tests to use new public TopologyTestDriver [ part 2 ] __EoT__ This PR is a further step towards the complete replacement of ` KStreamTestDriver ` with ` TopologyTestDriver ` . * Add task , processorTopology , and globalTopology access to TopologyTestDriverAccessor * Add condition to prevent NPE in ProcessorContextImpl * Refactor : - KTableFilterTest - KTableSourceTest - KTableMapValuesTest - KTableImplTest . edit : To simplify the review process some straightforward changes were moved to another [ PR ] ( https : //github.com/apache/kafka/pull/5052 ) .
MINOR : Remove unnecessary old consumer usage in tests and other clean-ups __EoT__ - Update some tests to use the Java consumer . - Remove ignored ` ProducerBounceTest.testBrokerFailure ` . This test is flaky and it has been superseded by ` TransactionBounceTest ` . - Use non-blocking poll for consumption methods in ` TestUtils ` . This is a step on the road to remove the old consumers . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : follow-up test for create topic acl ( KIP-277 ) __EoT__ Check handling of a Metadata Request with a mix of existing and non-existing topics . The particular codepath was not exercised by a test in the original PR . @ ijuma fixed the code path on merge This small testcase covers that Co-authored-by : Edoardo Comar < ecomar @ uk.ibm.com > Co-authored-by : Mickael Maison < mickael.maison @ gmail.com > *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : remove duplicate jfreechart definition __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6979 : Add default.api.timeout.ms to KafkaConsumer ( KIP-266 ) __EoT__ Adds a configuration that specifies the default timeout for KafkaConsumer APIs that could block .
KIP-297 : MINOR : move FileConfigProvider to provider subpackage __EoT__ This moves FileConfigProvider to the org.apache.common.config.provider package to more easily isolate provider implementations going forward . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6782 : solved the bug of restoration of aborted messages for GlobalStateStore and KGlobalTable __EoT__
KAFKA-7023 : Add unit test __EoT__ Add a unit test that validates after restoreStart , the options are set with bulk loading configs ; and after restoreEnd , it resumes to the customized configs # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Clean up __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7029 : Update ReplicaVerificationTool to use Java Consumer __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
[ MINOR ] Use SL4J string interpolation instead of string concatenation __EoT__
KAFKA-7021 : Reuse source based on config __EoT__ This PR actually contains two changes : 1 ) leverage on the TOPOLOGY_OPTIMIZATION config to `` adjust '' the topology internally to reuse the source topic . 2 ) fixed a long dangling bug that whenever source topic is reused as changelog topic , write the checkpoint file for the consumed offset , this is done by union the ` ackedOffset ` from the producer , plus the ` consumed ` offset from the consumer , note we will priori ackedOffset since the same topic may show up in both ( think about repartition topic ) , by doing this the consumed offset from source topics can be treated as checkpointed offset when reuse happens . 3 ) added a few unit and integration tests with / wo the reusing , and make sure the restoration , standby task , and internal topic creation behaviors are all correct . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Relax Unsupported Version check on BrokerCompatibilityTest __EoT__ In BrokerCompatibilityTest.java , when older versioned broker is used ( 0.10.1 , 0.10.2 ) , LIST_OFFSET is not supported as well . Hence in the verification phase , there is a possibility that consumer hit the UnsupportedVersionException earlier than Streams actually hits it : `` ` rg.apache.kafka.common.errors.UnsupportedVersionException : The broker does not support LIST_OFFSETS with version in range [ 2,3 ] . The supported range is [ 0,1 ] . `` ` While the test is waiting for `` ` ATAL : An unexpected exception org.apache.kafka.common.errors.UnsupportedVersionException : Can not create a v0 FindCoordinator request because we require features supported only in 1 or later . `` ` Call seek with specific offset would avoid sending LIST_OFFSET . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6906 : Fixed to commit transactions if data is produced via wall clock punctuation __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6906 Fixed ` StreamTask ` to commit transactions if the data is produced via wall-clock punctuation too . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7023 : Move prepareForBulkLoad ( ) call after customized RocksDBConfigSetter __EoT__ *Summary options.prepareForBulkLoad ( ) and then use the configs from the customized customized RocksDBConfigSetter . This may overwrite the configs set in prepareBulkLoad call . The fix is to move prepareBulkLoad call after applying configs customized RocksDBConfigSetter . *Summary of testing strategy ( including rationale ) Unit test , test on dev environment on recovery time . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7005 : Remove duplicate resource class . __EoT__ Fix for [ KAFKA-7005 ] ( https : //issues.apache.org/jira/browse/KAFKA-7005 ) . This is a follow-on change requested as part of the initial PR for KIP-290 # 5117 . @ cmccabe requested that the ` resource.Resource ` class be factored out in favour of ` ConfigResource ` to avoid confusion between all the ` Resource ` implementations . cc @ cmccabe , @ junrao # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6800 : Update SASL/PLAIN and SCRAM docs to use KIP-86 callbacks __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5697 : Use nonblocking poll in Streams __EoT__ Make use of the new ` Consumer # poll ( Duration ) ` to avoid getting stuck in ` poll ` when the broker is unavailable . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6264 : Log cleaner thread may die on legacy segment containing messages whose offsets are too large __EoT__ Split log segments on index offset overflow . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7006 - remove duplicate Scala ResourceNameType in preference to… __EoT__ remove duplicate Scala ResourceNameType in preference to in preference to Java ResourceNameType . See [ KAFKA-7006 ] ( https : //issues.apache.org/jira/browse/KAFKA-7006 ) . This is follow on work for KIP-290 and PR # 5117 , which saw the Scala ResourceNameType class introduced . I 've added tests to ensure AclBindings ca n't be created with ResourceNameType.ANY or UNKNOWN . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes ) @ junrao , @ cmccabe - this is a follow on PR for KIP-290 .
MINOR : remove duplicate map in StoreChangelogReader __EoT__ This is a follow up to # 5013 . The end offset for each partition is already maintained correctly in ` endOffsets ` within ` initialize ( ) ` ; thus , the introduced ` updatedEndOffsets ` is redundant -- we missed this during review . Thanks to @ guozhangwang for pointing out . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Upgrade Gradle to 4.8 and bug fix updates for other deps __EoT__ In addition to Gradle , updated snappy , owasp-dependency-check , apache directory service api . Gradle 4.8 fixes a fatal issue when building with Java 11 , but full support is coming in 4.9 or later . Manually tested that ` jarAll ` and importing into IntelliJ works , relying on PR build for the rest . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6538 : Changes to enhance ByteStore exceptions thrown from RocksDBStore with more human readable info __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6538 Enhanced exceptions thrown from ` RocksDBStore ` with corresponding information for which key/value the operation failed in the wrapping stores ( KeyValueStore , WindowedStored , and SessionStore ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6935 : Add config for allowing optional optimization __EoT__ Adding configuration to ` StreamsConfig ` allowing for making topology optimization optional . Added unit tests are verifying default values , setting correct value and failure on invalid values . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : need to update system test version after version bump __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6967 : TopologyTestDriver does not allow pre-populating state stores that have change logging __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6993 : Fix defective documentations for KStream/KTable methods __EoT__ 1 . Fix the documentation of following methods , e.g. , making more detailed description for the overloaded methods : - KStream # join - KStream # leftJoin - KStream # outerJoin - KTable # filter - KTable # filterNot - KTable # mapValues - KTable # transformValues - KTable # join - KTable # leftJoin - KTable # outerJoin 2 . ( trivial ) with possible new type - > with possibly new type .
MINOR : Bump version to 2.1.0-SNAPSHOT __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KIP-290 Prefixed ACLs __EoT__ [ KIP-290 ] ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-290 % 3A+Support+for+wildcard+suffixed+ACLs ) / [ KAFKA-6841 ] ( https : //issues.apache.org/jira/browse/KAFKA-6841 ) This PR supersedes https : //github.com/apache/kafka/pull/5079 . ( As I lack rights to push to that PR ) . Still to do ( can be done in this or another PR ) : - [ x ] Doc updates , including upgrade.html - [ x ] AclCommand updates a.k.a . kafka-acls.sh - [ x ] Remove internal use of deprecated constructors , ( want to make sure the tests pass using legacy first ) - [ x ] Performance improvements in the SimpleAclAuthorizer.getMatchingAcls , ( which currently visits every resource ) . The following outstanding items have been moved to additional Jiras or deemed unnecessary . See https : //github.com/apache/kafka/pull/5117 # issuecomment-395066985 . - Remove duplicate Java ` Resource ` class . - Remove duplicate Scala ` Resource ` class . - Remove duplicate Scala ` ResourceNameType ` class and just Java one . - Use single ` /kafka-acl-changes ` path and store ResourceNameType a JSON Value . - Potentially replacing ` Resource ` in ` AclBinding ` with ` ResourceFilter ` or a ` ResourceMatcher `
KAFKA-6726 : Fine Grained ACL for CreateTopics ( KIP-277 ) __EoT__ * Handling CreateTopicsRequest now requires Create auth on Topic resource and does not require Create on Cluster * AclCommand -- producer option adjusted * Existing Unit and Integration tests adjusted accordingly https : //issues.apache.org/jira/browse/KAFKA-6726 https : //cwiki.apache.org/confluence/display/KAFKA/KIP-277+-+Fine+Grained+ACL+for+CreateTopics+API Co-authored-by : Edoardo Comar < ecomar @ uk.ibm.com > Co-authored-by : Mickael Maison < mickael.maison @ gmail.com > # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5588 : Remove deprecated new-consumer option for tools __EoT__ Removed the deprecated `` -- new-consumer '' option for all consumer based tools . This option was already deprecated in the previous version so it can be removed in the coming new 2.0.0 major version . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : docs should point to latest version __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ KAFKA-6730 ] Simplify State Store Recovery __EoT__
MINOR : add regression tests for KTable mapValues and filter __EoT__ Add some regression tests in the style of # 5075 to prove the soundness of other changes made in # 4919 # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6750 : Add listener name to authentication context ( KIP-282 ) __EoT__ Co-authored-by : Edoardo Comar ecomar @ uk.ibm.com Co-authored-by : Mickael Maison mickael.maison @ gmail.com This KIP adds the String value of the ListenerName used for the connection to the AuthenticationContext . This allows PrincipalBuilders to retrieve this value and build different Principal based on the source of the connection . This is especially interesting in deployments where inter-broker traffic is on a different network/listener than user traffic or when the same protocol is used by several listeners . The change in itself is mostly `` plumbing '' as the listener name needs to be passed from ` ChannelBuilders ` all the way down to all classes implementing ` AuthenticationContext ` . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-6938 : Add documentation for accessing Headers on Kafka Streams Processor API __EoT__ Adding documentation to access Processor Context on Processor API .
KAFKA-6813 : return to double-counting for count topology names __EoT__ # 4919 unintentionally changed the topology naming scheme . This change returns to the prior scheme . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix bug in AdminClient node reassignment following connection failure __EoT__ We added logic to reassign nodes in ` callToSend ` after a connection failure , but we do not handle the case when there is no node currently available to reassign the request to . This can happen when using ` MetadataUpdateNodeIdProvider ` if all of the known nodes are blacked out awaiting the retry backoff . To fix this , we need to ensure that the call is added to ` pendingCalls ` if a new node can not be found . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5523 : Remove ReplayLogProducer tool __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove usages of ` scala.collection.JavaConversions ` , and some typo fixes __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
HOTFIX : Fix compilation error in ConsumerPerformance __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6743 ConsumerPerformance fails to consume all messages __EoT__ # # ConsumerPerformance fails to consume all messages on topics with large number of partitions due to a relatively short default polling loop timeout ( 1000 ms ) that is not reachable and modifiable by the end user . # # # Demo Create a topic of 10 000 partitions , send a 50 000 000 of 100 byte records using kafka-producer-perf-test and consume them using kafka-consumer-perf-test ( ConsumerPerformance ) . You will likely notice that the number of records returned by the kafka-consumer-perf-test is many times less than expected 50 000 000 . This happens due to specific ConsumerPerformance implementation . As the result , in some rough cases it may take a long enough time to process/iterate through the records polled in batches , thus , the time may exceed the default hardcoded polling loop timeout and this is probably not what we want from this utility . # # # Possible options 1 ) Increasing polling loop timeout in ConsumerPerformance implementation . It defaults to 1000 ms and is hardcoded , thus can not be changed but we could export it as an OPTIONAL kafka-consumer-perf-test parameter to enable it
MINOR : Fix JMX serialization by reverting # 5011 __EoT__ A recent change returns an anonymous inner class which retains a reference to the outer class , KafkaMbean , which is not serializable . This commit reverts # 5011 as a proper fix needs to probably do serialization lazily as well by overriding ` readObject ` and ` writeObject ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6955 : Use Java AdminClient in DeleteRecordsCommand __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : Use thread name and task for sensor name __EoT__ Changes to keep the operation name as is and make the sensor name unique . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6973 : TopicCommand should verify topic-level config __EoT__ KAFKA-6973 : https : //issues.apache.org/jira/browse/KAFKA-6973 Specifying an invalid config other than ` CreateTime ` or ` LogAppendTime ` will cause broker restarting to fail . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix table outer join test __EoT__ *In the class test KTableImplTest the method shouldThrowNullPointerOnOuterJoinWhenMaterializedIsNull is testing the wrong method* # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6936 : Implicit Materialized for aggregates __EoT__ In # 4919 we propagate the SerDes for each of these aggregation operators . As @ guozhangwang mentioned in that PR : > reduce : inherit the key and value serdes from the parent XXImpl class . > count : inherit the key serdes , enforce setting the Serdes.Long ( ) for value serdes . > aggregate : inherit the key serdes , **do not set for value serdes internally** . Although it 's all good for ` reduce ` and ` count ` , it is quiet unsafe to have ` aggregate ` without ` Materialized ` given . In fact I do n't see why we would not give a ` Materialized ` for the ` aggregate ` since the result type will always be different ( otherwise use ` reduce ` ) and also the value Serde is simply not propagated . This has been discussed previously in a broader PR before but I believe for ` aggregate ` we could pass implicitly a ` Materialized ` the same way we pass a ` Joined ` , just to avoid the stupid case . Then if the user wants to
KAFKA-6927 : Message down-conversion causes Out Of Memory on broker __EoT__ Implementation for lazy down-conversion in a chunked manner for efficient memory usage during down-conversion . This pull request is mainly to get initial feedback on the direction of the patch . The patch includes all the main components from KIP-283 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add upgrade notes for new consumer poll __EoT__ Added upgrade notes for the new poll ( ) API . I also added a few small cleanups from # 4855 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4936 : Add dynamic routing in Streams __EoT__ 1 . Add the proposed APIs as described in https : //cwiki.apache.org/confluence/display/KAFKA/KIP-303 % 3A+Add+Dynamic+Routing+in+Streams+Sink . 2 . Modify StreamPartitioner # partition to include topic name along with this change , since now it is less reasonable to ignore the topic name since it may not be pre-known . 3 . Update TopologyDescription # Sink implementation : when the topic name is static , print the topic name , otherwise print the dynamic topic name extractor class name . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6957 make InternalTopologyBuilder accessible from AbstractStrea… __EoT__ Currently , the AbstractStream class defines a copy-constructor that allow to extend KStream and KTable APIs with new methods without impacting the public interface . However adding new processor or/and store to the topology is made throught the internalTopologyBuilder that is not accessible from AbstractStream subclasses defined outside of the package ( package visibility ) .
MINOR : Remove duplicate code which is invoked twice __EoT__ *More detailed description of your change* I have removed the logic that unnecessarily calls cache.remove twice . *Summary of testing strategy* I have confirmed that there is no problem by executing Unit Test of NamedCache . ` ./gradlew -Dtest.single=NamedCacheTest streams : test ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ KAFKA-6608 ] Add timeout parameter to methods which retrieves offsets __EoT__ Currently , this PR is based off of what was agreed upon in KIP-266 . For further information , please look in this link : https : //cwiki.apache.org/confluence/pages/viewpage.action ? pageId=75974886
MINOR : Reduce commit time on test __EoT__ Reduce on commit time in the test . The test fails as it ca n't read all sent messages within 30 seconds , I 've reduced commit interval to help mitigate timing . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6916 : Refresh metadata in admin client if broker connection fails __EoT__ Refresh metadata if broker connection fails so that new calls are sent only to nodes that are alive and requests to controller are sent to the new controller if controller changes due to broker failure . Also reassign calls that could not be sent . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update consumer javadocs __EoT__
KAFKA-5697 : prevent poll ( ) from blocking forever __EoT__ Add the new stricter-timeout version of ` poll ` proposed in KIP-266 . The pre-existing variant ` poll ( long timeout ) ` would block indefinitely for metadata updates if they were needed , then it would issue a fetch and poll for ` timeout ` ms for new records . The initial indefinite metadata block caused applications to become stuck when the brokers became unavailable . The existence of the timeout parameter made the indefinite block especially unintuitive . This PR adds ` poll ( Duration timeout ) ` with the semantics : 1. iff a metadata update is needed : 1. send ( asynchronous ) metadata requests 2. poll for metadata responses ( counts against timeout ) - if no response within timeout , **return an empty collection immediately** 2. if there is fetch data available , **return it immediately** 3. if there is no fetch request in flight , send fetch requests 4. poll for fetch responses ( counts against timeout ) - if no response within timeout , **return an empty collection** ( leaving async fetch request for the next poll ) - if we get
Minor : Remove the unused declaration __EoT__ The issue is reported by the code analysis ( intellij ) . Just do some garden works . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-2951 : Add a testcase to verify produce , consume with acls for topic/group wildcard resources . __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Fixed ConsumerOffset # path __EoT__ consumer offset path in zookeeper should be ` s '' /consumers/ $ { group } /offsets/ $ { topic } / $ { partition } '' ` instead of ` s '' /consumers/ $ { group } /offset/ $ { topic } / $ { partition } '' ` . Added ` s ` to the word ` offset ` .
[ KAFKA-6930 ] Update KafkaZkClient debug log __EoT__ [ KAFKA-6930 | Update KafkaZkClient debug log ] ( https : //issues.apache.org/jira/browse/KAFKA-6930 ) # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Use reflection for signal handler and do not enable it for IBM JDK __EoT__ The Signal classes are not available in the compile classpath if ` -- release ` is used so we use reflection as a workaround . As part of that moved the code to Java and added a simple unit test . Also disabled the signal handler if the IBM JDK is being used due to KAFKA-6918 . Manually tested shutdown via ctrl+c and verified that the message is printed . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-2061 : Offer a -- version flag to print the kafka version __EoT__ Add version option to command line tools to print Kafka version
MINOR : Fix transiently failing consumer group admin integration test __EoT__ Since the producer is using retries=0 , we need to await topic creation before sending any records . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6850 : Add Record Header support to Kafka Streams Processor API ( KIP-244 ) __EoT__ Proposal to add support for Headers on Streams Processor API , discussed on KIP-244 . KIP documentation : https : //cwiki.apache.org/confluence/display/KAFKA/KIP-244 % 3A+Add+Record+Header+support+to+Kafka+Streams
MINOR : AdminClient consumer group domain objects should have public constructors __EoT__ These constructors should be public to allow users to write test cases using them . We follow a similar pattern for the other domain objects that we expose in ` AdminClient ` ( e.g . ` TopicDescription ` ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove unnecessary conditional in KafkaAdminClient to fix checkstyle __EoT__ It was introduced in 70a506b98 shortly before e70a191d303 was merged . The latter updates checkstyle and the new version is stricter . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4423 : Drop support for Java 7 ( KIP-118 ) and update deps __EoT__ * Set -- source , -- target and -- release to 1.8 . * Build Scala 2.12 by default . * Remove some conditionals in the build file now that Java 8 is the minimum version . * Bump the version of Jetty , Jersey and Checkstyle ( the newer versions require Java 8 ) . * Fixed issues uncovered by the new version if Checkstyle . * A couple of minor updates to handle an incompatible source change in the new version of Jetty . * Add dependency to jersey-hk2 to fix failing tests caused by Jersey upgrade . * Update release script to use Java 8 and to take into account that Scala 2.12 is now built by default . * While we 're at it , bump the version of Gradle , Gradle plugins , ScalaLogging , JMH and apache directory api . * Minor documentation updates including the readme and upgrade notes . A number of Streams Java 7 examples can be removed subsequently . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and
MINOR : Ignore test_broker_type_bounce_at_start system test __EoT__ test_broker_type_bounce_at_start tries to validate that when the controller is down , the streams client will always fail trying to create the topic ; with the current behavior of admin client it is actually not always true : the actual behavior depends on the admin client internals as well as when the controller becomes unavailable during the leader assign partitions phase . I 'd suggest at least ignore this test for now until the admin client has more stable ( personally I 'd even suggest removing this test as its coverage benefits is smaller than its introduced issues to me ) . Also adding a few more log4j entries as a result of investigating this issue . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Reduce required disconnect message frequency __EoT__ Due to https : //github.com/apache/kafka/pull/4644 the consumer connector logs will be much more clean with fewer `` broker may not be available '' entries . We need to reduce the required frequency from 100 to a smaller number . I 've thought about reducing to just 1 , but it may still be transient ( i.e . even if broker is starting up you may see a few entries ) so I reduced it to 10 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6868 : Fix buffer underflow and expose group state in the consumer groups API __EoT__ * The consumer groups API should expose group state . This information is needed by administrative tools and scripts that access consume groups . * The partition assignment will be empty when the group is rebalancing . Fix an issue where the adminclient attempted to deserialize this empty buffer . * Remove nulls from the API and make all collections immutable . * DescribeConsumerGroupsResult # all should return a result as expected , rather than Void * Add Builder classes for MemberDescription and ConsumerGroupDescription , so that we can easily add new fields later without having a large number of constructors . * Fix exception text for GroupIdNotFoundException , GroupNotEmptyException . It was being filled in as '' The group id The group id does not exist was not found '' and similar . * Add integration test
Fix type inference on joins and aggregates on Scala API __EoT__ The type inference does n't currently work for the join functions in Scala as it does n't know yet the types of the given ` KStream [ K , V ] ` or ` KTable [ K , V ] ` . The fix here is to curry the joiner function . I personally prefer this notation but this also means it differs more from the Java API . I believe the diff with the Java API is worth in this case as it 's not only solving the type inference but also fits better the Scala way of coding ( ex : ` fold ` ) . Moreover any Scala dev will bug and spend little time on these functions trying to understand why the type inference is not working and then get frustrated to be obliged to be explicit here where it 's not harmful to be inferred . The change is fairly straight forward but is also breaking , the good news is that we did n't release the Scala API yet , so this is perfect time to do this change . This would also
KAFKA-6729 : Follow up ; disable logging for source KTable . __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6905 : Document that Transformers may be re-used by Streams __EoT__ This is a follow-up to # 5022 which added documentation to the Processor interface . This commit adds similar documentation to Transformer and ValueTransformer . Also , s/processor/transformer/ in the close ( ) docs .
KAFKA-6917 : Process txn completion asynchronously to avoid deadlock __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5697 : Revert streams wakeup __EoT__ The wakeup-based strategy caused more problems than it solved , so we 'll instead focus on KIP-266 . Revert commit 2d8049b . Keep the metrics addition and the new test util . Also keep the tests for shutdown , although they must be ignored until ` poll ( Duration ) ` is done in the scope of KIP-266 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
HOTFIX : Move Conusmed to o.a.k.streams.kstream __EoT__ ` Consumed ` was mis-placed . I 've moved it to ` kstream ` and added one statement in the upgrade guide . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6729 : Reuse source topics for source KTable 's materialized store 's changelog __EoT__ 1 . In InternalTopologyBuilder # topicGroups , which is used in StreamsPartitionAssignor , look for book-kept ` storeToChangelogTopic ` map before creating a new internal changelog topics . In this way if the source KTable is created , its source topic stored in ` storeToChangelogTopic ` will be used . 2 . Added unit test ( confirmed that without 1 ) it will fail ) . 3 . MINOR : removed TODOs that are related to removed KStreamBuilder . 4 . MINOR : removed TODOs in StreamsBuilderTest util functions and replaced with TopologyWrapper . 5 . MINOR : removed ` StreamsBuilderTest # testFrom ` as it is already covered by ` TopologyTest # shouldNotAllowToAddSourcesWithSameName ` , plus it requires ` KStreamImpl.SOURCE_NAME ` which should be a package private field of the ` KStreamImpl ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Use Set instead of List for list of topics __EoT__ ` Set ` make sense here since we do n't care about the order and we do n't want duplicates . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : add missing parameter ` processing.guaratees ` to Streams docs __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix broken links in streams doc __EoT__ Need to be cherry-picked to older versions as well . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6905 : Document that Processors may be re-used by Streams __EoT__
MINOR : doc change for deprecate removal __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6896 : Add producer metrics exporting in KafkaStreams.java __EoT__ We would like to also export the producer metrics from ` StreamThread ` just like consumer metrics , so that we could gain more visibility of stream application . The approach is to pass in the ` threadProducer ` into the StreamThread so that we could export its metrics in dynamic . Note that this is a pure internal change that does n't require a KIP , and in the future we also want to export admin client metrics . A followup KIP for admin client will be created once this is merged .
MINOR : Ensure sensor names are unique in Kafka Streams __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
HOTFIX : RegexSourceIntegrationTest needs to cleanup shared output topic __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR - Fix typo in Streams Dev Guide __EoT__ Changed value in table from ` null ( tombstone ) ` to ` null `
Count fix and Type alias refactor in Streams Scala API __EoT__ Provide a tiny helper for creating Materialized with implicit Serdes . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6394 : Add a check to prevent misconfiguration of advertised listeners __EoT__
KAFKA-5965 : Remove Deprecated AdminClient from Streams Resetter Tool __EoT__ Removed usage of deprecated AdminClient from StreamsResetter No additional tests are required . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Rename RecordFormat to RecordVersion __EoT__ Also include a few clean-ups : * Method/variable/parameter renames to make them consistent with the class name * Return ` ApiVersion ` from ` minSupportedFor ` * Use ` values ` to remove some code duplication * Reduce duplication in ` ApiVersion ` by introducing the ` shortVersion ` method and building the versions map programatically * Avoid unnecessary ` regex ` in ` ApiVersion.apply ` * Added scaladoc to a few methods Some of these were originally discussed in : https : //github.com/apache/kafka/pull/4583 # pullrequestreview-98089400 Added a test for ` ApiVersion.shortVersion ` . Relying on existing tests for the rest since there is no change in behaviour . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6894 : Improve err msg when explicitly connecting processor to global store __EoT__ I 've improved the error message when explicitly trying to connect a processor to a global store as in this example : `` ` builder.globalTable ( `` supersteps '' , Consumed.with ( Serdes.Integer ( ) , Serdes.Long ( ) ) , Materialized. < Integer , Long , KeyValueStore < Bytes , byte [ ] > > as ( `` superstepStore '' ) .withKeySerde ( Serdes.Integer ( ) ) .withValueSerde ( Serdes.Long ( ) ) ) ; stream.transform ( ( TransformerSupplier < K , Tuple3 < Integer , VV , Map < K , Message > > , KeyValue < Integer , Long > > ) InitialTransformer : :new , `` superstepStore '' ) ; `` `
KAFKA-6893 : Create processors before starting acceptor in SocketServer __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Fix typo in ConsumerRebalanceListener JavaDoc __EoT__ This is just a minor typo in the javadoc . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove deprecated valueTransformer.punctuate __EoT__ Also removed the InternalValueTransformerWithKey / Supplier which is used to mock away the deprecated punctuate function . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update dynamic broker configuration doc for truststore update __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6870 Concurrency conflicts in SampledStat __EoT__ see [ KAFKA-6870 ] ( https : //issues.apache.org/jira/browse/KAFKA-6870 ) for more details . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6813 : Remove deprecated APIs in KIP-182 , Part II __EoT__ 1 . Remove the deprecated StateStoreSuppliers , and the corresponding Stores.create ( ) functions and factories : only the base StateStoreSupplier and MockStoreSupplier were still preserved as they are needed by the deprecated TopologyBuilder and KStreamBuilder . Will remove them in a follow-up PR . 2 . Add TopologyWrapper.java as the original InternalTopologyBuilderAccessor was removed , but I realized it is still needed as of now . 3 . Minor : removed StateStoreTestUtils.java and inline its logic in its callers since now with StoreBuilder it is just a one-liner . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6878 Switch the order of underlying.init and initInternal __EoT__ This is continuation of # 4978 . From Guozhang : `` ` I think to fix this issue , in init we could consider switching the steps of 1 and 2 : initInternal ( context ) ; underlying.init ( context , root ) ; since volatile boolean open = false ; it should be sufficient . In this case the check on step 3 ) will fail if underlying.init is not completed and we will throw InvalidStateStoreException . `` ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6299 . Fix AdminClient error handling when metadata changes __EoT__ AdminClient should only call Metadata # requestUpdate when needed . When AdminClient gets a NOT_CONTROLLER error , it should refresh its metadata and retry the request , rather than making the end-user deal with NotControllerException . Move AdminClient 's metadata management outside of NetworkClient and into AdminMetadataManager . This will make it easier to do more sophisticated metadata management in the future , such as implementing a NodeProvider which fetches the leaders for topics . Rather than manipulating newCalls directly , the AdminClient service thread now drains it directly into pendingCalls . This minimizes the amount of locking we have to do , since pendingCalls is only accessed from the service thread .
KAFKA-6878 NPE when querying global state store not in READY state __EoT__ Check whether cache is null before retrieving from cache . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA 6673 - Implemented missing override equals method __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6834 : Handle compaction with batches bigger than max.message.bytes __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix TRACE logging in ReplicaManager __EoT__
KAFKA-6292 : Improved FileLogInputStream batch position checks in order to avoid type overflow related errors __EoT__ Basically , my change was very simple - switch from sum operations to subtraction to avoid type casting in checks and type overflow during FlieLogInputStream work , especially in cases where property ` log.segment.bytes ` was set close to the ` Integer.MAX_VALUE ` and used as a ` position ` inside ` nextBatch ( ) ` function . All related Unit tests are working as intended . No new tests ( probably ) required .
MINOR : add equals ( ) /hashCode ( ) for Produced/Consumed __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6879 ; Invoke session init callbacks outside lock to avoid deadlock __EoT__ Fixes a deadlock between the controller 's ` beforeInitializingSession ` callback which holds the zookeeper client initialization lock while awaiting completion of an asynchronous event which itself depends on the same lock . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Make Serdes less confusing in Scala __EoT__ This is the corresponding PR of https : //github.com/lightbend/kafka-streams-scala/pull/70 Serdes are confusing in the Scala wrapper : 1 ) We have wrappers around ` Serializer ` , ` Deserializer ` and ` Serde ` which are not very useful . 2 ) We have Serdes in 2 places ` org.apache.kafka.common.serialization.Serde ` and in ` com.lightbend.kafka.scala.streams.DefaultSerdes ` , instead we should be having only one place where to find all the Serdes . I wanted to do this PR before the release as this is a breaking change . This should n't add more so the current tests should be enough . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-6813 : Remove deprecated APIs in KIP-182 , Part I __EoT__ I 'm breaking KAFKA-6813 into a couple of `` smaller '' PRs and this is the first one . It focused on : 1 . Remove deprecated APIs in KStream , KTable , KGroupedStream , KGroupedTable , SessionWindowedKStream , TimeWindowedKStream . 2 . Also found a couple of overlooked bugs while working on them : 2.a ) In KTable.filter / mapValues without the additional parameter indicating the materialized stores , originally we will not materialize the store . After KIP-182 we mistakenly diverge the semantics : for KTable.mapValues it is still the case , for KTable.filter we will always materialize . 2.b ) In XXStream/Table.reduce/count , we used to try to reuse the serdes since their types are pre-known ( for ` reduce ` it is the same types for both key / value , for ` count ` it is the same types for key , and ` Long ` for value ) . This was somehow lost in the past refactoring . 2.c ) We are enforcing to cast a ` Serde < V > ` to ` Serde < VR > ` for XXStream / Table.aggregate
KAFKA-6628 : RocksDBSegmentedBytesStoreTest does not cover time window serdes __EoT__ Updated RocksDBSegmentedBytesStoreTest class to include time window serdes
KAFKA-6871 : KStreams Scala API : incorrect Javadocs and misleading parameter name __EoT__ See PR title . This is a minor fix . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6474 : Rewrite tests to use new public TopologyTestDriver [ cleanup ] __EoT__ This implements the suggestions made after the previous [ PR ] ( https : //github.com/apache/kafka/pull/4832 ) for KAFKA-6474 was merged . The majority of changes deals with using try-with-resources and a new method in ` StreamsTestUtils ` to set the test properties and instantiate the ` TopologyTestDriver ` , thus allowing the removal of the cumbersome ` @ Before ` and ` @ After ` methods . I also replaced ` stringSerde ` and ` intSerde ` variables with ( almost equally succinct ) inline calls to ` Serdes.String ( ) ` and ` Serdes.Integer ( ) ` . * Add method to create test properties to StreamsTestUtils * Make TopologyTestDriver protected constructor package-private * Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver * Cleanup : - GlobalKTableJoinsTest - KGroupedStreamImplTest - KGroupedTableImplTest - KStreamBranchTest - KStreamFilterTest - KStreamFlatMapTest - KStreamFlatMapValuesTest - KStreamForeachTest - KStreamGlobalKTableJoinTest - KStreamGlobalKTableLeftJoinTest - KStreamImplTest - KStreamKStreamJoinTest - KStreamKStreamLeftJoinTest - KStreamGlobalKTableLeftJoinTest - KStreamKTableJoinTest - KStreamKTableLeftJoinTest - KStreamMapTest - KStreamMapValuesTest - KStreamPeekTest - StreamsBuilderTest - KStreamSelectKeyTest - KStreamTransformTest - KStreamTransformValuesTest - KStreamWindowAggregateTest - KTableForeachTest
MINOR : Build and code sample updates for Kafka Streams DSL for Scala __EoT__ Several build and documentation updates were required after the merge of [ KAFKA-6670 : Implement a Scala wrapper library for Kafka Streams ] ( https : //github.com/apache/kafka/pull/4756 ) . # # Encode Scala major version into ` streams-scala ` artifacts . To differentiate versions of the ` kafka-streams-scala ` artifact across Scala major versions it 's required to encode the version into the artifact name before its published to a maven repository . This is accomplished by following a similar release process as kafka core , which encodes the Scala major version and then runs the build for each major version of Scala supported . **This is considered standard practice when releasing Scala libraries** , but is not handled for us automatically with the basic Scala for Gradle support . After this change you can generate and install the ` kafka-streams-scala ` artifact into the local maven repository : `` ` $ ./gradlew -PscalaVersion=2.11 install $ ./gradlew -PscalaVersion=2.12 install `` ` Which results in the following files generated : `` ` /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12 /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/maven-metadata-local.xml /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT/kafka-streams-scala_2.12-2.0.0-SNAPSHOT-sources.jar /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT/maven-metadata-local.xml /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT/kafka-streams-scala_2.12-2.0.0-SNAPSHOT-test-sources.jar /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT/kafka-streams-scala_2.12-2.0.0-SNAPSHOT.pom /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT/kafka-streams-scala_2.12-2.0.0-SNAPSHOT-test.jar /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT/kafka-streams-scala_2.12-2.0.0-SNAPSHOT-javadoc.jar /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT/kafka-streams-scala_2.12-2.0.0-SNAPSHOT-scaladoc.jar /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.12/2.0.0-SNAPSHOT/kafka-streams-scala_2.12-2.0.0-SNAPSHOT.jar /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.11 /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.11/maven-metadata-local.xml /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.11/2.0.0-SNAPSHOT /home/seglo/.m2/repository/org/apache/kafka/kafka-streams-scala_2.11/2.0.0-SNAPSHOT/kafka-streams-scala_2.11-2.0.0-SNAPSHOT-test.jar
MINOR : Remove KafkaStreams # toString __EoT__ Remove the deprecated KafkaStreams # toString function . Also override toString ( ) for internal classes for debugging purposes . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6844 : Call shutdown on GlobalStreamThread after all StreamThreads have stopped __EoT__ Moved the shutdown of ` GlobalStreamThread ` to after all ` StreamThread ` instances have stopped . There can be a race condition where shut down is called on a ` StreamThread ` then shut down is called on a GlobalStreamThread , but if StreamThread is delayed in shutting down , the GlobalStreamThread can shutdown first . If the StreamThread tries to access a GlobalStateStore before closing the user can get an exception stating `` ..Store xxx is currently closed `` Tested by running all current streams tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Removed deprecated schedule function __EoT__ While working on this , I also refactored the MockProcessor out of the MockProcessorSupplier to cleanup the unit test paths . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6761 : Part 1 of 3 ; Graph nodes __EoT__ This PR supersedes PR # 4654 as it was growing too large . All comments in that PR should be addressed here . I will attempt to break the PRs for the topology optimization effort into 3 PRs total and will follow this general plan : 1 . This PR only adds the graph nodes and graph . The graph nodes will hold the information used to make calls to the ` InternalTopologyBuilder ` when using the DSL . Graph nodes are stored in the ` StreamsTopologyGraph ` until the final topology needs building then the graph is traversed and optimizations are made at that point . There are no tests in this PR relying on the follow-up PR to use all current streams tests , which should suffice . 2 . PR 2 will intercept all DSL calls and build the graph . The ` InternalStreamsBuilder ` uses the graph to provide the required info to the ` InternalTopologyBuilder ` and build a topology . The condition of satisfaction for this PR is that all current unit , integration and system tests pass using the graph . 3 .
KAFKA-6857 : Leader must always reply with undefined offset if undefined leader epoch requested __EoT__ The leader must explicitly check if requested leader epoch is undefined , and return undefined offset so that the follower can fall back to truncating to high watermark . Otherwise , if the leader also is not tracking leader epochs , it may return its LEO , which will the follower to truncate to the incorrect offset . Added unit test to verify the behavior . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6854 : Handle batches deleted during log cleaning of logs with txns __EoT__ Log cleaner grows buffers when ` result.messagesRead ` is zero . This contains the number of filtered messages read from source which can be zero when transactions are used because batches may be discarded . Log cleaner incorrectly assumes that messages were not read because the buffer was too small and attempts to double the buffer size unnecessarily , failing with an exception if the buffer is already ` max.message.bytes ` . Additional check for discarded batches has been added to avoid growing buffers when batches are discarded . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6853 : ZooKeeperRequestLatencyMs is incorrect __EoT__ ResponseMetadata.responseTimeMs is always 0 or negative .
KAFKA-6829 : Retry commits on unknown topic or partition __EoT__ For the UNKNOWN_TOPIC_OR_PARTITION error , we could change the consumer 's behavior to retry after this error . While this is a rare case since the user would not commit offsets for topics unless they had been able to fetch from them , but this does n't really handle the situation where the broker has n't received any metadata updates . Updated unit tests # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6657 : Add StreamsConfig prefix for different consumers __EoT__ This pull request is for jira [ 6657 ] ( https : //issues.apache.org/jira/browse/KAFKA-6657 ) . The KIP proposal is [ here ] ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-276+Add+StreamsConfig+prefix+for+different+consumers ) Added unit tests for new ` getGlobalConsumerConfigs ` API and make sure existing restore consumer tests are passing .
MINOR : Removed unused imports in a few tests __EoT__ Removed unused imports in : - core/src/test/scala/unit/kafka/network/SocketServerTest.scala - core/src/test/scala/unit/kafka/server/DelegationTokenRequestsOnPlainTextTest.scala - core/src/test/scala/unit/kafka/server/DelegationTokenRequestsWithDisableTokenFeatureTest.scala *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6526 : Enable unclean leader election without controller change __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6810 : Enable dynamic update of SSL truststores __EoT__ Enable broker 's SSL truststores to be dynamically updated using ConfigCommand in the same way as keystores are updated . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix sasl.jaas.config doc string __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3417 : Wrap reporter calls in try/catch blocks __EoT__
KAFKA-6535 : Set default retention ms for Streams repartition topics to Long.MAX_VALUE __EoT__ add new default value ( RETENTION_MS_CONFIG = Long.MAX_VALUE ) and fix unit tests
KAFKA-6785 : Add Trogdor documentation __EoT__
MINOR : Fix Trogdor tests , partition assignments __EoT__
MINOR : Fix streams web doc configs tables __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Column style fix to streams page __EoT__ Similar changes to this PR for Apache Kafka site - https : //github.com/apache/kafka-site/pull/136 *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
HOTFIX : rename run_test to execute in streams simple benchmark __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Pin pip to 9.0.3 as 10 is not compatible with system pip __EoT__ If not pinned , the following error will happen : Traceback ( most recent call last ) : File `` /usr/bin/pip '' , line 9 , in < module > from pip import main ImportError : can not import name main Testing : Ran tests/docker/run_tests.sh and it works instead of getting above error . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove deprecated streams config __EoT__ Removed the following : `` zookeeper.connect '' , `` key.serde '' , `` value.serde '' , `` timestamp.extractor '' # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : use jdk8 to build/run system tests __EoT__ java 7 is way past expired and the debian installer packages are no longer available . Also upgrade ami to latest ubuntu/trusty 14 amd64 as old one is not available . Tested by running ./vagrant/vagrant-up.sh successfully .
MINOR : Fixes for streams system tests __EoT__ This PR fixes some regressions introduced into streams system tests and sets the upgrade tests to ignore until PR # 4636 is merged as it has the fixes for the upgrade tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix NamedCache metrics in Streams __EoT__ * Fixes a bug in which all NamedCache instances in a process shared one parent metric . * Also fixes a bug which incorrectly computed the per-cache metric tag ( which was undetected due to the former bug ) . * Drop the ` StreamsMetricsConventions # xLevelSensorName ` convention in favor of ` StreamsMetricsImpl # xLevelSensor ` to allow ` StreamsMetricsImpl ` to track thread- and cache-level metrics , so that they may be cleanly declared from anywhere but still unloaded at the appropriate time . This was necessary right now so that the ` NamedCache ` could register a thread-level parent sensor to be unloaded when the thread , not the cache , is closed . * The above changes made it mostly unnecessary for the ` StreamsMetricsImpl ` to expose a reference to the underlying ` Metrics ` registry , so I did a little extra work to remove that reference , including removing inconsistently-used and unnecessary calls to ` Metrics # close ( ) ` in the tests . The existing tests should be sufficient to verify this change . # # # Committer Checklist ( excluded from commit
HOTFIX : ListConsumerGroupsResult should use KafkaFuture __EoT__ We accidentally changed this # 4884 . The public API should use ` KafkaFuture ` and not ` KafkaFutureImpl ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6826 avoid range scans when forwarding values during aggregation __EoT__ @ guozhangwang
MINOR : Bump version to 2.0.0-SNAPSHOT __EoT__ I proposed last year that the June/July release should be 2.0.0 to allow us to : * Bump the minimum Java version to 8 * Remove the deprecated Scala clients # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6796 ; Fix surprising UNKNOWN_TOPIC error from requests to non-replicas __EoT__ Currently if the client sends a produce request or a fetch request to a broker which is n't a replica , we return UNKNOWN_TOPIC_OR_PARTITION . This is a bit surprising to see when the topic actually exists . It would be better to return NOT_LEADER to avoid confusion . Clients typically handle both errors by refreshing metadata and retrying , so changing this should not cause any change in behavior on the client . This case can be hit following a partition reassignment after the leader is moved and the local replica is deleted . To validate the current behavior and the fix , I 've added integration tests for the fetch and produce APIs . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6376 : Document skipped records metrics changes __EoT__ Document the metrics changes in https : //github.com/apache/kafka/commit/ed51b2cdf5bdac210a6904bead1a2ca6e8411406 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Disabled flaky DynamicBrokerReconfigurationTest.testAddRemoveSslListener __EoT__ test until fixed . https : //issues.apache.org/jira/browse/KAFKA-6824 for the build failures due to this test . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix formatting in -- new-consumer deprecation warning __EoT__ Added space between sentences , to make the text look nicer . All unit tests and integrations tests pass after the change . **Before : ** `` ` $ bin/kafka-consumer-groups.sh -- new-consumer -- bootstrap-server localhost:9092 -- list The [ new-consumer ] option is deprecated and will be removed in a future major release.The new consumer is used by default if the [ bootstrap-server ] option is provided . Note : This will not show information about old Zookeeper-based consumers . `` ` **After : ** `` ` $ bin/kafka-consumer-groups.sh -- new-consumer -- bootstrap-server localhost:9092 -- list The [ new-consumer ] option is deprecated and will be removed in a future major release . The new consumer is used by default if the [ bootstrap-server ] option is provided . Note : This will not show information about old Zookeeper-based consumers . `` ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6815 `` default.production.exception.handler '' default value is not specified in doc __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6815 in KafkaStreams config , default.deserialization.exception.handler is LogAndFailExceptionHandler but , document has 30000ms
MINOR : Elaborate meaning of last offset in javadocs __EoT__ Signed-off-by : Arjun Satish < arjun @ confluent.io > *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Use distinct consumer groups in dynamic listener tests __EoT__ Dynamic listener tests should use distinct consumer groups to ensure there are no committed offsets . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5253 : Fixed KStreamTestDriver to handle streams created with patterns __EoT__ https : //issues.apache.org/jira/browse/KAFKA-5253 Fixed ` KStreamTestDriver # sourceNodeByTopicName ` to handle streams created with patterns . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix kafka-run-class for Java 10 __EoT__ We need to match to the end of the line to make it work with Java 10 as explained in the expanded comment . Tested manually for all supported versions : `` ` shell echo $ ( ... /jdk1.8.0_152.jdk/Contents/Home/bin/java -version 2 > & 1 | sed -E -n 's/ . * version `` ( [ 0-9 ] * ) . * $ /\1/p ' ) 1 echo $ ( ... /jdk-9.0.4.jdk/Contents/Home/bin/java -version 2 > & 1 | sed -E -n 's/ . * version `` ( [ 0-9 ] * ) . * $ /\1/p ' ) 9 echo $ ( ... /jdk-10.jdk/Contents/Home/bin/java -version 2 > & 1 | sed -E -n 's/ . * version `` ( [ 0-9 ] * ) . * $ /\1/p ' ) 10 echo $ ( ... /jdk-10.0.1.jdk/Contents/Home/bin/java -version 2 > & 1 | sed -E -n 's/ . * version `` ( [ 0-9 ] * ) . * $ /\1/p ' ) 10 `` ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status
MINOR : Retry setting aligned time until set __EoT__ In the ` AbstractResetIntegrationTest ` we can have a transient error when setting the time for the test where the new time is less than the original time , for those cases we should catch the exception and re-try setting the time once versus letting the test fail . For testing , ran the entire streams test suite . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6802 : Improved logging for missing topics during task assignment __EoT__ If users do n't create all topics before starting a streams application , they could get unexpected results . For example , sharing a state store between sub-topologies where one input topic is not created ahead time results in log message that that `` Partition X is not assigned to any tasks '' does not give any clues as to how this could have occurred . Also , this PR changes the log level from ` INFO ` to ` WARN ` when metadata does not have partitions for a given topic . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6775 : Fix the issue of without init super class 's __EoT__ Some anonymous classes of ` AbstractProcessor ` did n't initialize their superclass . This will not set up ` ProcessorContext context ` at ` AbstractProcessor ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6772 : Load credentials from ZK before accepting connections __EoT__ Start processing client connections only after completing KafkaServer initialization to ensure that credentials are loaded from ZK into cache before authentications are processed . Acceptors are started earlier so that bound port is known for registering in ZK . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6054 : Update Kafka Streams metadata to version 3 __EoT__ - adds Streams upgrade tests for 1.1 release
MINOR : Add line break so example command is readable without scrolling __EoT__ Line explaining how to remove topic level config is too long , thus the containing div becomes scrollable . Depending on browser this is either clumsy or invisible . Change-Id : If79515da36df6fcb24b6429ab325aaede0e589e3 *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6376 : preliminary cleanup __EoT__ General cleanup of Streams code , mostly resolving compiler warnings and re-formatting . The regular testing suite should be sufficient . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6770 : Add New Protocol Versions to 1.1.0 documentation __EoT__ 1.1 introduced 2 new versions to existing API keys : - DescribeConfigs v1 - Fetch v7 The 3rd new field of FetchRequest v7 is called ` forgetten_topics_data ` . Can we fix the typo in the field name or is it considered public API now ? *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6650 : Allowing transition to OfflineReplica state for replicas without leadership info __EoT__ A partially deleted topic can end up with some partitions having no leadership info . For the partially deleted topic , a new controller should be able to finish the topic deletion by transitioning the rogue partition 's replicas to OfflineReplica state . This patch adds logic to transition replicas to OfflineReplica state whose partitions have no leadership info . Added a new test method to cover the partially deleted topic case . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Minor : Log the exception thrown by Selector.poll __EoT__ The error merits careful logging . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6727 fix broken Config hashCode ( ) and equals ( ) __EoT__ Fix for [ KAFKA-6727 ] ( https : //issues.apache.org/jira/browse/KAFKA-6727 ) . Current implementation stores reference to ` entries ` wrapped in ` Collections.unmodifiableCollection ` , which breaks ` hashCode ` and ` equals ` . From [ Java docs ] ( https : //docs.oracle.com/javase/7/docs/api/java/util/Collections.html # unmodifiableCollection\ ( java.util.Collection\ ) ) > The returned collection does not pass the hashCode and equals operations through to the backing collection , but relies on Object 's equals and hashCode methods . Contribution is my own original work and I license the work to the project under the project 's open source license .
MINOR : Mention that -1 disables retention by time __EoT__ Just a doc clarification so no tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6771 . Make specifying partitions more flexible __EoT__
KAFKA-6696 Trogdor should support destroying tasks __EoT__ KAFKA-6696 Trogdor should support destroying tasks Implement destroying tasks and workers . This means erasing all record of them on the Coordinator and the Agent . Workers should be identified by unique 64-bit worker IDs , rather than by the names of the tasks they are implementing . This ensures that when a task is destroyed and re-created with the same task ID , the old workers will be not be treated as part of the new task instance . Fix some return results from RPCs . In some cases RPCs were returning values that were never used . Attempting to re-create the same task ID with different arguments should fail . Add RequestConflictException to represent HTTP error code 409 ( CONFLICT ) for this scenario . If only one worker in a task stops , do n't stop all the other workers for that task , unless the worker that stopped had an error .
KAFKA-6611 , PART II : Improve Streams SimpleBenchmark __EoT__ 1 . SimpleBenchmark : 1.a Do not rely on manual num.records / bytes collection on atomic integers . 1.b Rely on config files for num.threads , bootstrap.servers , etc . 1.c Add parameters for key skewness and value size . 1.d Refactor the tests for loading phase , adding tumbling-windowed count . 1.e For consumer / consumeproduce , collect metrics on consumer instead . 1.f Force stop the test after 3 minutes , this is based on empirical numbers of 10M records . 2 . Other tests : use config for kafka bootstrap servers . 3. streams_simple_benchmark.py : only use scale 1 for system test , remove yahoo from benchmark tests . Note that the JMX based metrics is more accurate than the manually collected metrics . For example : `` ` Module : kafkatest.benchmarks.streams.streams_simple_benchmark_test Class : StreamsSimpleBenchmarkTest Method : test_simple_benchmark Arguments : { `` scale '' : 3 , `` test '' : `` streamcount '' } -- -- { `` Streams Count Performance [ records/latency/rec-sec/MB-sec counted ] 0 '' : `` 3691724/180042/20504.79332600171/20.64996886468678\n '' , `` Streams Count Performance [ records/latency/rec-sec/MB-sec counted ] 1 '' : `` 3337273/180037/18536.595255419717/18.667835797999594\n '' ,
KAFKA-6058 : Refactor consumer API result return types __EoT__ Refactored the return types in consumer group APIs the following way : `` ` Map < TopicPartition , KafkaFuture < Void > > DeleteConsumerGroupsResult # deletedGroups ( ) Map < TopicPartition , KafkaFuture < ConsumerGroupDescription > > DescribeConsumerGroupsResult # describedGroups ( ) KafkaFuture < Collection < ConsumerGroupListing > > ListConsumerGroupsResult # listings ( ) KafkaFuture < Map < TopicPartition , OffsetAndMetadata > > ListConsumerGroupOffsetsResult # partitionsToOffsetAndMetadata ( ) `` ` 1 . For DeleteConsumerGroupsResult and DescribeConsumerGroupsResult , for each group id we have two round-trips to get the coordinator , and then send the delete / describe request ; I leave the potential optimization of batching requests for future work . 2 . For ListConsumerGroupOffsetsResult , it is a simple single round-trip and hence the whole map is wrapped as a Future . 3 . ListConsumerGroupsResult , it is the most tricky one : we would only know how many futures we should wait for after the first listNode returns , and hence I constructed the flattened future in the middle wrapped with the underlying map of futures . 3.a Another big change I made is , we do not return
KAFKA-6234 : Increased timeout value for lowWatermark response to avoid test failing occasionally __EoT__ Increase timeout to fix flaky integration test testLogStartOffsetCheckpoint .
MINOR : Disable failing testDescribeConsumerGroupOffsets test case __EoT__ Temporarily ignore this failing test until the fix is merged in # 4856 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6592 : ConsoleConsumer should support WindowedSerdes __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6592 Have Console consumer support TimeWindowedDeserializer/SessionWindowedDeserializer by adding new parameters ` default.windowed.key.serde.inner ` and ` default.windowed.value.serde.inner ` . An example would be like this : ` ... -- property value.deserializer=org.apache.kafka.common.serialization.StringDeserializer -- property key.deserializer=org.apache.kafka.streams.kstream.TimeWindowedDeserializer -- default.windowed.key.serde.inner org.apache.kafka.common.serialization.Serdes\ $ StringSerde ` When key/value.deserializer is not TimeWindowedDeserializer or SessionWindowedDeserializer , specifying ` default.windowed.key.serde.inner ` or ` default.windowed.value.serde.inner ` takes no effect . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : make Sensor # add idempotent __EoT__ This change makes adding a metric to a sensor idempotent . That is , if the metric is already added to the sensor , the method returns with success . The current behavior is that any attempt to register a second metric with the same name is an error . Testing strategy : There is a new unit test covering this behavior # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6773 ; Allow offset commit/fetch/describe with empty groupId __EoT__ We had a regression in # 4788 which caused the offset commit/fetch/describe APIs to fail if the groupId was empty . This should be allowed for backwards compatibility . I 've added a test case to ensure that we do not miss this again in the future . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR Fix AsyncProducerTest bug that hits when logging is turned up __EoT__ AsyncProducerTest gets an error about an incorrect mock when the logging level is turned up . Instead of using a mock , just create a real SyncProducerConfig object , since the object is simple to create .
MINOR : Fix doc - ` FileMessageSet ` was replaced by ` FileRecords ` __EoT__ ` FileMessageSet ` no longer existed . It was already replaced by ` FileRecords ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6447 : Add Delegation Token Operations to KafkaAdminClient ( KIP-249 ) __EoT__ - Update unit and integration tests # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6752 : Enable unclean leader election metric __EoT__
KAFKA-4883 : handle NullPointerException while parsing login modue control flag __EoT__
MINOR : Move creation of quota callback to ensure single instance __EoT__ Move creation of quota callback instance out of KafkaConfig constructor to ` QuotaFactory.instantiate ` to avoid creating a callback instance for every KafkaConfig since we create temporary KafkaConfigs during dynamic config updates . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Make [ Config ] Resource.toString ( ) consistent with existing code __EoT__ The toString ( ) for ConfigResource was using { } instead of ( ) which is inconsistent with the existing toStrings in the code , while toString for Resource was using a mix of ( and } .
Kafka-6693 : Added consumer workload to Trogdor __EoT__ Added consumer only workload to Trogdor . The topics must already be pre-populated . The spec lets the user request topic pattern and range of partitions to assign to [ startPartition , endPartition ] . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6768 ; Transactional producer may hang in close with pending requests __EoT__ This patch fixes an edge case in producer shutdown which prevents ` close ( ) ` from completing due to a pending request which will never be sent due to shutdown initiation . I have added a test case which reproduces the scenario . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Java 10 fixes so that the build passes __EoT__ * Upgrade EasyMock to 3.6 which adds support for Java 10 by upgrading to ASM 6.1.1 . * Ensure that Jacoco is truly disabled for the ` core ` project . This was the original intent , since it 's in Scala , but it had not been achieved . This is important because the Jacoco agent fails when it tries to instrument the classes compiled by scalac with Java 10 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove magic number and extract Pattern instance from method as class field __EoT__ * Remove magic number * Extract Pattern instance from method as class field * Add ` @ Override ` declare # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-6688 . The Trogdor coordinator should track task statuses __EoT__
MINOR : Mention leader in a few follower/controller log messages __EoT__ I noticed these while debugging an issue recently . I have a bigger refactoring of the Controller and state change logs in progress , but these do n't have to wait for that . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-6054 : Fix upgrade path from Kafka Streams v0.10.0 __EoT__
KAFKA-6576 : Configurable Quota Management ( KIP-257 ) __EoT__ Enable quota calculation to be customized using a configurable callback . See KIP-257 for details . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Trogdor : Added commonClientConf and adminClientConf to workload specs __EoT__ Currently , WorkerUtils will be able to create topics when there is no security . To be able to work with secure kafka , WorkerUtils.createTopic ( ) needs to be able to take security configs . This PR adds commonClientConf field to both producer bench and roundtrip workload specs so that users can specify security and other common configs once for producer/consumer and adminClient . Also added adminClientConf field to workload specs so that users can specify adminClient specific configs if they want to . For completeness , added consumerConf and producerConf to roundtrip workload spec . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6748 : double check before scheduling a new task after the punctuate call __EoT__ The first commit is a new test , illustrating the problem . The second commit fixes the problem . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update max.connections.per.ip.overrides config docs __EoT__ - Add a validation check to make sure max.connections.per.ip.overrides is configured when max.connections.per.ip is set zero .
KAFKA-6741 : Disable Selector 's idle connection timeout in testNetworkThreadTimeRecorded ( ) test __EoT__
KAFKA-6694 : The Trogdor Coordinator should support filtering task responses __EoT__
KAFKA-4292 : Configurable SASL callback handlers __EoT__ Implementation of KIP-86 : https : //cwiki.apache.org/confluence/display/KAFKA/KIP-86 % 3A+Configurable+SASL+callback+handlers
Minor : Don ’ t send the DeleteTopicsRequest for the invalid topic names __EoT__ The invalid topic name is already handled locally so it is unnecessary to send the DeleteTopicsRequest . This PR adds a count to MockClient for testing . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix streams test-utils dependencies __EoT__ Follow-up to @ ewencp 's PR # 4816 ( a fix of my # 4760 ) . Break the cycle on the other side so that ` : streams : test-utils ` can declare a regular dependency on ` : streams ` . To test that we do n't re-introduce the bug that # 4816 fixed , do the following : `` ` ./gradlew clean installAll releaseTarGzAll tar -- list -f ./core/build/distributions/kafka_2.11-1.2.0-SNAPSHOT.tgz | grep 'class' `` ` That latter command should return only the following ( instead of 580 class files ) : `` ` kafka_2.11-1.2.0-SNAPSHOT/bin/kafka-run-class.sh kafka_2.11-1.2.0-SNAPSHOT/bin/windows/kafka-run-class.bat `` ` # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ MINOR ] refactor return value __EoT__ remove if clause to return boolean value
MINOR : Add Timed wait to SslTransportLayerTest.testNetworkThreadTimeRecorded __EoT__
KAFKA-5674 : max.connections.per.ip minimum should be 0 __EoT__
MINOR : Fix partition loading checks in GroupCoordinator __EoT__ In the group coordinator , we currently we check whether the partition is owned before checking whether it is loading . Since loading is a prerequisite for partition ownership , it means that it is not actually possible to see the COORDINATOR_LOAD_IN_PROGRESS error . The impact is mostly harmless : while loading the group , the client may send unnecessary FindCoordinator requests to rediscover the coordinator . I 've fixed the bug and restructured the code to enable testing . In the process of fixing this bug , I made the following minor changes : 1 . We now verify valid groupId in all request handlers . 2 . Currently if the coordinator is loading when a SyncGroup is received , we 'll return NOT_COORDINATOR . I 've changed this to return REBALANCE_IN_PROGRESS since the rebalance state will have been lost on coordinator failover . This effectively forces the consumer to rejoin the group , which seems preferable over unnecessarily rediscovering the coordinator . 3 . I added a check for the COORDINATOR_LOAD_IN_PROGRESS handler in SyncGroup . Although we do not currently return this error , it seems reasonable that we
KAFKA-6731 : waitOnState should check the state to be the target start . __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6731 KafkaStreams.waitOnState ( ) should check the state to be the given one instead of the hard-coded ` NOT_RUNNING ` . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6732 __EoT__ The link to processor topology on write-streams.html is redirecting to 404 error . Links which result in 404 : referred from https : //kafka.apache.org/11/documentation/streams/developer-guide/write-streams.html Broken : https : //kafka.apache.org/11/documentation/streams/concepts.html # streams-concepts https : //kafka.apache.org/documentation/streams/concepts.html # streams-concepts
MINOR : refactor error message of task migration __EoT__ In the stream thread capture of the TaskMigration exception , print the task full information in WARN . In other places only log as INFO , plus additional context information . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4914 : Partition re-assignment tool should check types before pe… __EoT__ …rsisting state in ZooKeeper Prior to this , there have been instances where invalid data was allowed to be persisted in ZooKeeper , which causes ClassCastExceptions when a broker is restarted and reads this type-unsafe data . Adds basic structural and type validation for the reassignment JSON via introduction of Scala case classes that map to the expected JSON structure .
KAFKA-6630 : Speed up the processing of TopicDeletionStopReplicaResponseReceived events on the controller __EoT__ This patch tries to speed up the inefficient functions identified in Kafka-6630 by grouping partitions in the ControllerContext.partitionReplicaAssignment variable by topics . Hence trying to find all replicas for a topic wo n't need to go through all the replicas in the cluster . Passed all tests using `` gradle testAll '' # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ KAFKA-6707 ] The default value for config of Type.LONG should be *L __EoT__ [ https : //issues.apache.org/jira/browse/KAFKA-6707 ] ( https : //issues.apache.org/jira/browse/KAFKA-6707 ) The default value for config of Type.LONG should be *L
[ KAFKA-6702 ] Wrong className in LoggerFactory.getLogger method __EoT__ [ https : //issues.apache.org/jira/browse/KAFKA-6702 ] ( https : //issues.apache.org/jira/browse/KAFKA-6702 ) [ KAFKA-6702 ] Wrong className in LoggerFactory.getLogger method
MINOR : Ignoring tests using old versions of Streams until KIP-268 is merged __EoT__ Ignoring tests in ` streams_upgrade_test.py ` and ` streams_multiple_rolling_upgrade_test.py ` until KIP-268 is merged . Kicked off system test build of all streams tests - https : //jenkins.confluent.io/job/system-test-kafka-branch-builder/1581/ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Downgrade to Gradle 4.5.1 __EoT__ There is a regression in Gradle 4.6 that causes ` testAll ` ( but not ` test ` ) to fail : https : //github.com/gradle/gradle/pull/4680 ` ./gradlew testAll ` works after this change . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : change exception.getMessage to toString __EoT__ In many places of Streams we use exception.getMessage ( ) , but for some exceptions the message is null , making it harder to trouble shoot . Propose to change them to toString ( ) to maintain the exception name at least ; in some places we choose to even print out the stack trace . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Depend on streams : test-utils for streams and examples tests __EoT__ Link : streams : test-utils as a test dependency for : streams and : streams : examples , avoiding a circular dependency . Testing strategy : the project should build . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6724 ConsumerPerformance resets offsets on every startup __EoT__ # # # Remove consumer offset reset on startup # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6716 : Should close the ` discardChannel ` in completeSend __EoT__ KAFKA-6716 : Should close the ` discardChannel ` in completeSend https : //issues.apache.org/jira/browse/KAFKA-6716 Should close the ` discardChannel ` in MockSelector # completeSend *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Update Jackson to 2.9.5 __EoT__ Just another bug fix release in the 2.9.x series . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove dead code in LogCleaner.validateReconfiguration __EoT__ Also tweak condition to be closer to error message . No behaviour change , so no tests needed . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6473 : Add MockProcessorContext to public test-utils __EoT__ We are adding a public testing utility to make it easier to unit test Processor implementations . See KIP-267 ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-267 % 3A+Add+Processor+Unit+Test+Support+to+Kafka+Streams+Test+Utils ) . The testing for this change is in this commit . There are behavioral and unit tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix ReassignPartitionsClusterTest.testHwAfterPartitionReassignment test __EoT__
MINOR : Fix flaky standby task test __EoT__ The standby-task test failed due to standby task distribution not be exactly equal . I think this will be the case from time to time , so I 've updated test to make sure the standby task assignment count is not zero I tested this by running the system test on branch builder 25 times all tests passed - http : //confluent-kafka-branch-builder-system-test-results.s3-us-west-2.amazonaws.com/2018-03-23 -- 001.1521845338 -- bbejeck -- MINOR_fix_flaky_standy_task_test -- c3054e9/report.html # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6052 : Fix the request retry issue ( on Windows ) in InterBrokerSendThread __EoT__ This resolves the issue detected on Windows . It 's a follow-up to the investigation done by @ hachikuji ( details on the JIRA ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6710 : Remove Thread.sleep from LogManager.deleteLogs __EoT__ ` Thread.sleep ` in ` LogManager.deleteLogs ` potentially blocks a scheduler thread for up to ` log.segment.delete.delay.ms ` with a default value of a minute . This PR skips delete when the first log is not yet ready to be deleted , freeing the scheduler thread . Logs are then deleted on the next delete iteration . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : remove extraneous double initialization of Stats.index __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix potential resource leak in FileOffsetBackingStore __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * Ran unit tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6637 : Avoid divide /zero error with segment.ms set to zero __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6637 This patch enforces a minimum value of 1 for the user-custom ` segment.ms ` . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Java 9/10 fixes , gradle and minor deps update __EoT__ - Added dependencies so that Trogdor and Connect work with Java 9 and 10 - Updated Jacoco to 0.8.1 so that it works with Java 10 - Updated Gradle to 4.6 - A few minor version bumps ( not related to Java9/10 fixes ) I tested manually that we can run ` ./gradlew test ` with Java 10 after these changes . There are test failures as EasyMock and PowerMock will have to be updated to use a newer ASM version . But compiling successfully and most tests passing is progress . : ) I also tested manually that Trogdor can be started with Java 10 . It previously failed with a ClassNotFoundError . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-6683 ; Ensure producer state not mutated prior to append __EoT__ We were unintentionally mutating the cached queue of batches prior to appending to the log . This could have several bad consequences if the append ultimately failed or was truncated . In the reporter 's case , it caused the snapshot to be invalid after a segment roll . The snapshot contained producer state at offsets higher than the snapshot offset . If we ever had to load from that snapshot , the state was left inconsistent , which led to an error that ultimately crashed the replica fetcher . The fix required some refactoring to avoid sharing the same underlying queue inside ` ProducerAppendInfo ` . I have added test cases which reproduce the invalid snapshot state . I have also made an effort to clean up logging since it was not easy to track this problem down . One final note : I have removed the duplicate check inside ` ProducerStateManager ` since it was both redundant and incorrect . The redundancy was in the checking of the cached batches : we already check these in ` Log.analyzeAndValidateProducerState ` . The incorrectness was the handling of sequence
KAFKA-6611 : PART I , Use JMXTool in SimpleBenchmark __EoT__ 1 . Use JmxMixin for SimpleBenchmark ( will remove the self reporting in # 4744 ) , only when loading phase is false ( i.e . we are in fact starting the streams app ) . 2 . Reported the full jmx reported metrics in log files , and in the returned data only return the max values : this is because we want to skip the warming up and cooling down periods that will have lower rate numbers , while max represents the actual rate at full speed . 3 . Incorporates two other improves to JMXTool : https : //github.com/apache/kafka/pull/1241 and https : //github.com/apache/kafka/pull/2950 # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Rolling bounce upgrade fixed broker system test __EoT__ This introduces a system test where we do a rolling bounce upgrade of streams application instances against a fixed broker version . Each broker version starting with ` 0.10.2 ` up to ` trunk ` is tested . Streams applications start at ` 0.10.2 ` and do rolling upgrades up to ` trunk ` then do rolling downgrades back to ` 0.10.2 ` . This PR also includes a new utility class for Streams systems tests ` StreamsTest ` which extends ` KafkaTest ` and provides some convenience methods for working with ` VerifiableProducer ` and ` VerfiiableConsumer ` and validating results in log files . There are other system tests ` streams_standby_replica_test.py ` and ` streams_broker_down_resilience_test.py ` using common functionality that can be pulled out and extend the ` StreamsTest ` class instead . I 'll do that in a follow-on PR . EDIT : Since the base class ` StreamsTest ` only exists in this PR so far , I 've refactored the other tests as mentioned above . I tested this by running branch builder https : //jenkins.confluent.io/job/system-test-kafka-branch-builder/1430/ # # # Committer Checklist ( excluded from commit
KAFKA-6659 : Improve error message if state store is not found __EoT__ Update the exception message thrown to state about the state store not found and suggest checking store has been connected to the processor .
MINOR : remove obsolete warning in StreamsResetter __EoT__
MINOR : Remove acceptor creation in network thread update code __EoT__ Fix dynamic addition of network threads to only create new Processor threads and not the Acceptor . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Updated SASL Authentication Sequence Docs __EoT__ Reworded the SASL Authentication sequence to update it to > = 1.0.0 Co-authored-by : Edoardo Comar < ecomar @ uk.ibm.com > Co-authored-by : Mickael Maison < mickael.maison @ gmail.com > *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Trogdor 's ProducerBench does not fail if topics exists __EoT__ Added configs to ProducerBenchSpec : topicPrefix : name of topics will be of format topicPrefix + topic index . If not provided , default is `` produceBenchTopic '' . partitionsPerTopic : number of partitions per topic . If not provided , default is 1. replicationFactor : replication factor per topic . If not provided , default is 3 . The behavior of producer bench is changed such that if some or all topics already exist ( with topic names = topicPrefix + topic index ) , and they have the same number of partitions as requested , the worker uses those topics and does not fail . The producer bench fails if one or more existing topics has number of partitions that is different from expected number of partitions . Added unit test for WorkerUtils -- for existing methods and new methods . Fixed bug in MockAdminClient , where createTopics ( ) would over-write existing topic 's replication factor and number of partitions while correctly completing the appropriate futures exceptionally with ` TopicExistsException ` .
KAFKA-6680 : Fix issues related to Dynamic Broker configs __EoT__ - Fix kafkaConfig initialization if there are no dynamic configs defined in ZK . - update DynamicListenerConfig.validateReconfiguration ( ) to check new Listeners must be subset of listener map
MINOR : Pass a streams config to replace the single state dir __EoT__ This is a general change and is re-requisite to allow streams benchmark test with different streams tests . For the streams benchmark itself I will have a separate PR for switching configs . Details : 1 . Create a `` streams.properties '' file under PERSISTENT_ROOT before all the streams test . For now it will only contain a single config of state.dir pointing to PERSISTENT_ROOT . 2 . For all the system test related code , replace the main function parameter of state.dir with propsFilename , then inside the function load the props from the file and apply overrides if necessary . 3 . Minor fixes . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : KafkaFutureImpl # addWaiter should be protected __EoT__ KafkaFutureImpl # addWaiter should be protected , just like KafkaFuture # addWaiter . As described in KIP-218 , whenComplete is the public API , not addWaiter .
MINOR : improve trogdor commandline __EoT__ Allow -c as a synonym for -- agent.config and -- coordinator.config . Allow -n as a synonym for -- node-name . Add an example trogdor.conf file .
KAFKA-6676 : Ensure Kafka chroot exists in system tests and use chroot on one test with security parameterizations __EoT__ Ensures Kafka chroot exists in ZK when starting KafkaService so commands that use ZK and are executed before the first Kafka broker starts do not fail due to the missing chroot . Also uses chroot with one test that also has security parameterizations so Kafka 's test suite exercises these combinations . Previously no tests were exercising chroots . To validate , I kicked off a [ test run ] ( https : //jenkins.confluent.io/job/system-test-kafka-branch-builder/1483/ ) of the sanity_checks ( which include the chroot-ed test as well as some non-chroot-ed tests ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6486 : Implemented LinkedHashMap in TimeWindows __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fix flaky Streams EOS system test __EoT__
KAFKA-6530 : Use actual first offset of message set when rolling log segment __EoT__ Use the exact first offset of message set when rolling log segment . This is possible to do for message format V2 and beyond without any performance penalty , because we have the first offset stored in the header . This augments the fix made in KAFKA-4451 to avoid using the heuristic for V2 and beyond messages . Added unit tests to simulate cases where segment needs to roll because of overflow in index offsets . Verified that the new segment created in these cases uses the first offset , instead of the heuristic in use previously . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : remove unnecessary null checks __EoT__ Remove unnecessary null check in StringDeserializer , MockProducerInterceptor and KStreamImpl .
KAFKA-6658 : Fix RoundTripWorkload and make k/v generation configurable __EoT__ Make PayloadGenerator an interface which can have multiple implementations : constant , uniform random , sequential . Allow different payload generators to be used for keys and values . This change fixes RoundTripWorkload . Previously RoundTripWorkload was unable to get the sequence number of the keys that it produced .
KAFKA-6454 : Allow timestamp manipulation in Processor API __EoT__ implements KIP-251
MINOR : Allow users to specify 'if-not-exists ' when creating topics while testing __EoT__ Would like to be able to add the ` -- if-not-exists ` flag when creating topics during setup in some of our tests ; this small change adds that option to ` KafkaService ` in ` services/kafka/kafka.py ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6663 : Doc for ` GlobalKTable ` should be corrected . __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6663 Doc should be refined to express the fact that GlobalKTable should be able to consume all the partitions of the input topic . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Trogdor should not assume an agent co-located with the controller __EoT__
MINOR : Streams system test fixes/updates __EoT__ Some changes required to get the Streams system tests working via Docker To test : `` ` bash TC_PATHS= '' tests/kafkatest/tests/streams '' bash tests/docker/run_tests.sh `` ` That command will take about 3.5 hours , and should pass . Note there are a couple of ignored tests . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6106 : Postpone normal processing of tasks until restoration of all tasks completed __EoT__ Once all the state stores are restored , then the processing of tasks takes place . This approach will reduce the time taken to restore the state stores as single thread is used to restore the state and process the task . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix incorrect expression for KTable in stream doc . __EoT__ In dsi-api.html , when reading from Kafka to a KTable , the doc says : > In the case of a KStream , the local KStream instance of every application instance will be populated with data from only a subset of the partitions of the input topic . Collectively , across all application instances , all input topic partitions are read and processed . where ` Kstream ` here is not correct . They should be ` KTable ` . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6656 ; Config tool should return non-zero status code on failure __EoT__ We should propagate exceptions when altering or describing configs in order to ensure that the command fails with a non-zero status . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Avoid nulls when deserializing Trogodor JSON __EoT__
KAFKA-6653 : Complete delayed operations even when there is lock contention __EoT__ If there is lock contention while multiple threads check if a delayed operation may be completed ( e.g . a produce request with acks=-1 ) , the threads perform completion only if the lock is free , to avoid deadlocks . This leaves a timing window when an operation becomes ready to complete after another thread has acquired the lock and performed the check for completion , but not yet released the lock . The PR adds an additional flag to ensure that the operation is completed in this case . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4831 : add documentation for KIP-265 __EoT__ This is based on top of https : //github.com/apache/kafka/pull/4685 so should only be merged after that one . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Improve Trogdor client logging . __EoT__ AgentClient and CoordinatorClient should have the option of logging failures to custom log4j objects . There should also be builders for these objects , to make them easier to extend in the future .
KAFKA-3978 ; highwatermark should always be positive __EoT__ Partition highwatermark may become -1 during partition reassignment . The bug was fixed and validated with unit test in this patch . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove unused server exceptions __EoT__
KAFKA-6634 : Delay starting new transaction in task.initializeTopology __EoT__ 1 . As titled , not starting new transaction since during restoration producer would have not activity and hence may cause txn expiration . 1.a . Also delay starting new txn in resuming until initializing topology . 2 . Fixed a minor bug , that when resuming process hits a migration exception , we should remove that task from the running list if possible . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : add DEFAULT_PORT for Trogdor Agent and Coordinator __EoT__ Add a DEFAULT_PORT constant for the Trogdor Agent and Coordinator .
MINOR : Streams doc example should not close store __EoT__
MINOR : Use large batches in metrics test so that conversion time > = 1ms __EoT__ Retry conversion time test with larger batches to make ` MetricsTest.testMetrics ` more stable since conversion time may be < 1ms ( reported as zero ) with small batches . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6024 Move validation in KafkaConsumer ahead of acquireAndEnsure… __EoT__ In several methods , parameter validation is done after calling acquireAndEnsureOpen ( ) in Kafka Consumer : public void seek ( TopicPartition partition , long offset ) { acquireAndEnsureOpen ( ) ; try { if ( offset < 0 ) throw new IllegalArgumentException ( `` seek offset must not be a negative number '' ) ; Since the value of parameter would not change per invocation , it seems performing validation ahead of acquireAndEnsureOpen ( ) call would be better . Lost access to branch in the following PR . Basically incorporating the feedback from this . https : //github.com/apache/kafka/pull/4109
KAFKA-6624 ; Prevent concurrent log flush and log deletion __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix incorrect JavaDoc ( type mismatch ) __EoT__ Omitting the type would lead to a compilation error , because if the method is not parametrized , the type parameter of Serde would be Object , instead of Long and String . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Kafka 3368 __EoT__ Added Message set / Record set documentation to protocol.html . Also added short description of new types used in 0.11
MINOR : Fix wrong message in ` bin/kafka-run-class.sh ` . __EoT__ To build jar you need to specify ` scalaVersion ` instead of ` scala_version ` . https : //github.com/apache/kafka/blob/8df96a4119a5d46372eecdceb916f80dd073338a/gradle/dependencies.gradle # L34 # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6560 : Add docs for KIP-261 __EoT__ This should be part of the original PR but missing . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Revert to ZooKeeper 3.4.10 due to ZOOKEEPER-2960 __EoT__ It 's a critical bug that only affects the server , but we do n't have an easy way to use 3.4.11 for the zookeeper client only . For reference the upgrade to ZooKeeper 3.4.11 was done via 2652565d429138c58 . Testing strategy : relying on existing tests and reverted a change to a test to pass with 3.4.10 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove code duplication + excessive space __EoT__ Removing code duplication and excessive space /cc @ mjsax @ guozhangwang # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Reduce ZK reads and ensure ZK watch is set for listener update __EoT__ Ensures that ZK watch is set for each live broker for listener update notifications in the controller by invoking ` pathExists ` since a watch is registered only if ` exists ` or ` getData ` is invoked after ` registerZNodeChangeHandler ` . Also avoids reading all brokers from ZooKeeper when a broker metadata is modified by passing in brokerId to ` BrokerModifications ` and reading only the updated broker . The existing listener update test verifies both these changes . Earlier , the test did not detect missing watch for the last broker since metadata of all brokers were read from ZK ( adding a watch for all ) when any broker was updated . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Tag AWS instances with Jenkins build url __EoT__ This will allow us to trace leaked instances back to the job , so that we can figure out what happened and fix the leak . Testing : Verified Jenkins build URL is set on the AWS instances when running system tests . Backporting : Can this be backported to 0.10.2 ? The oldest branch we can backport the better . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6622 - fix performance issue in parsing consumer offsets __EoT__ ` batch.baseOffset ` is an expensive operation ( even says so in its javadoc ) , and yet was called for every single record in the batch . this means that for N records in a gzipped batch , the entire batch will be unzipped N times . we 've seen this take up to 3 hours for relatively small clusters . here 's an example : https : //ibb.co/b9eGq7
Added Payload class Trogdor to describe producer payload __EoT__ Added a class that generates producer payload ( key and value ) . Makes sure that the values are populated to target a realistic compression rate ( 0.3 - 0.4 ) if compression is used . The generated payload is deterministic and can be replayed from a given position . For now , all generated values are constant size , and key types can be configured to be either null or 8 bytes . Added messageSize parameter to producer spec , that specifies produced key + message size .
KAFKA-4831 : Extract WindowedSerde to public APIs __EoT__ Now that we have augmented WindowSerde with non-arg parameters , extract it out as part of the public APIs so that users who want to I/O windowed streams can use it . This is originally introduced by @ vitaly-pushkar This PR grows out to be a much larger one , as I found a few tech debts and bugs while working on it . Here is a summary of the PR : 1 . Public API changes ( I will propose a KIP after a first round of reviews ) : * Add TimeWindowedSerializer , TimeWindowedDeserializer , SessionWindowedSerializer , SessionWindowedDeserializer into o.a.k.streams.kstream . The serializers would implemented an internal ` WindowedSerializer ` interface for the serializeBaseKey function used in 3 ) below . * Add WindowedSerdes into o.a.k.streams.kstream . The reason to now add them into o.a.k.clients 's Serdes is that it then needs dependency of streams . * Add `` default.windowed.key.serde.inner '' and `` default.windowed.value.serde.inner '' into StreamsConfig , used when `` default.key.serde '' is specified to use time or session windowed serde . Note this requires the serde class , not the type class . 2 . Consolidated serde format
MINOR : Fix record conversion time in metrics __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove unused local variable __EoT__ Remove unused local variable . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : clean stateDirectory in TopologyTestDriver __EoT__ * Specifically , on TopologyTestDriver # close ( ) * Allow the test driver to clean up any persistant files that may have been written by a state store in the topology . * Add a test verifying that persistent state does get cleaned up . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6560 : [ FOLLOW-UP ] do n't deserialize null byte array in window store fetch __EoT__ If the result of a fetch from a Window Store results in a null byte array we should return null rather than passing it to the serde to deserialize . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Error messages and comments had a typo in a config name . The correct … __EoT__ …config name is transaction.max.timeout.ms I built the site docs and the javadocs , and verified that the docs have the right config name . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Skip sending fetches/offset lookups when awaiting the reconnect backoff __EoT__ Logging can get spammy during the reconnect blackout period because any requests we send to ` ConsumerNetworkClient ` will immediately be failed when ` poll ( ) ` returns . This patch checks for connection failures prior to sending fetches and offset lookups and skips sending to any failed nodes . Test cases added for both . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5660 Do n't throw TopologyBuilderException during runtime __EoT__ KAFKA-5660 Do n't throw TopologyBuilderException during runtime Created this PR and after closing https : //github.com/apache/kafka/pull/4605 due to conflicts .
KAFKA-6615 ; Add scripts for DumpLogSegments __EoT__ Add bash and windows scripts for ` kafka.tools.DumpLogSegments ` . I verified the bash script manually . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : do not start processor for bounce-at-start __EoT__ Do not start the processor for test_broker_type_bounce_at_start ; only start it after the broker has been shutdown . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6039 : Improve task assignor load balance __EoT__ Sorts TaskIds on first assignment evenly distributing tasks by ` topicGroupId ` should help with evening the load of work across topologies . This PR is an initial `` strawman '' approach which will be followed up ( at a later date YTBD ) by scoring or assigning weight to processing nodes to ensure even processing distribution . Added a new test to existing unit test . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Complete inflight requests in correct order on disconnect __EoT__ NetworkClient should use FIFO order when completing inflight requests following a disconnect . I 've added new unit tests for ` InFlightRequests ` and ` NetworkClient ` which verify completion order . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6054 : Code cleanup to prepare the actual fix for an upgrade path __EoT__ Small change in decoding version 1 metadata : do n't upgrade to version 2 automatically
KAFKA-6593 ; Fix livelock with consumer heartbeat thread in commitSync __EoT__ Contention for the lock in ConsumerNetworkClient can lead to a livelock situation in which an active commitSync is unable to make progress because its completion is blocked in the heartbeat thread . The fix is twofold : 1 ) We change ConsumerNetworkClient to use a fair lock to reduce the chance of each thread getting starved . 2 ) We eliminate the dependence on the lock in ConsumerNetworkClient for callback completion so that callbacks will not be blocked by an active poll ( ) . I 've left this as a WIP patch since I am still considering test cases . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : remove unnecessary semicolon __EoT__ Just removing an unnecessary semicolon . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix javadoc typo __EoT__ This is just a minor typo in the javadoc . This contribution is my original work and that I license the work to the project under the project 's open source license . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6534 : Enforce a rebalance in the next poll call when encounter task migration __EoT__ The fix is in two folds : 1 ) For tasks that 's closed in ` closeZombieTask ` , their corresponding partitions are still in ` runningByPartition ` so those closed tasks may still be returned in ` activeTasks ` and ` standbyTasks ` . Adding guards on the returned tasks and if they are closed notify the thread to trigger rebalance immediately . 2 ) When triggering a rebalance , un-subscribe and re-subscribe immediately to make sure we are not dependent on the background heartbeat thread timing . 3 ) Some minor changes on log4j . More specifically , I moved the log entry of ` closeZombieTask ` to its callers with more context information and the action going to take . I can re-produce the issue with EosIntegrationTest may hand-code the heartbeat thread to GC , and confirmed this patch fixed the issue . Unfortunately this test can not be added to AK since currently we do not have ways to manipulate the heartbeat thread in unit tests . # # # Committer Checklist ( excluded from commit message ) - [ ]
MINOR : Rename stream partition assignor to streams partition assignor __EoT__ This is a straight-forward change that make the name of the partition assignor to be aligned with Streams . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6057 : Users forget ` -- execute ` in the offset reset tool __EoT__ Add a small warning note when the user does not use the -- execute flag .
MINOR : fixes lgtm.com warnings __EoT__
KAFKA-6590 : Fix bug in aggregation of consumer fetch bytes and counts metrics __EoT__ records-consumed-rate fetch metric shows different value than aggregated topic-level records-consumed-rate metrics . Looks like a typo when reporting bytes and records in Fetcher class .
MINOR : Fix typo in MockProducer JavaDoc __EoT__ `` ` java @ { link java.util.concurrent.Future Future & lt ; RecordMetadata & gt ; } `` ` should be `` ` java { @ link java.util.concurrent.Future Future & lt ; RecordMetadata & gt ; } `` ` instead .
MINOR : wait for broker startup for system tests __EoT__ Starting up a Kafka cluster with multiple nodes can lead to a race condition if an application wants to create a topic but not all brokers are available yet . For example : `` ` org.apache.kafka.streams.errors.StreamsException : Could not create topic SmokeTest-cntByCnt-repartition . at ... Caused by : java.util.concurrent.ExecutionException : org.apache.kafka.common.errors.InvalidReplicationFactorException : Replication factor : 3 larger than available brokers : 2. at ... Caused by : org.apache.kafka.common.errors.InvalidReplicationFactorException : Replication factor : 3 larger than available brokers : 2 . `` ` This should be fixed by making sure all brokers are registered at ZK before creating topics .
MINOR : Revert incompatible behavior change to consumer reset tool __EoT__ This patch reverts the removal of the -- execute option in the offset reset tool and the change to the default behavior when no options were present . These changes were introduced in KIP-171 , but they are not compatible with previous releases . We should at least give users a deprecation window for incompatible changes . Test cases were not actually validating that offsets were committed when the -- execute option was present , so I have fixed that and added basic assertions for the dry-run behavior . I also removed some duplicated test boilerplate . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6578 : Changed the Connect distributed and standalone main method to log all exceptions __EoT__ Any exception thrown by calls within a ` main ( ) ` method are not logged unless explicitly done so . This change simply adds a try-catch block around most of the content of the distributed and standalone ` main ( ) ` methods . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix ConcurrentModificationException in TransactionManager __EoT__ Fix a ConcurrentModificationException in TransactionManager # shouldResetProducerStateAfterResolvingSequences . The fix is to use an Iterator rather than a Java foreach loop . When using a Java foreach loop , the collection can not be modified , because the for-each loop hides the iterator .
MINOR : Refactor cleanupGroupMetadata __EoT__ Refactoring avoids the need to call this method with a infinity as current time to remove all group offsets ( when manually deleting the group ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix Streams-Broker-Compatibility system test __EoT__
COSMETIC : Reading configuration fields from ProducerConfig class __EoT__ Reading the configuration field names from ProducerConfig class and taking the key and value serializer names from class name directly instead of hardcoding *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6573 : Update brokerInfo in KafkaController on listener update __EoT__ Update KafkaController.brokerInfo when listeners are updated since this value is used to register the broker in ZooKeeper if there ZK session expires . Also added test to verify values in ZK after session expiry . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add docs for ReplicationBytesInPerSec and ReplicationBytesOutPerSec __EoT__ Add docs for the ReplicationBytesInPerSec and ReplicationBytesOutPerSec metrics . These metrics were introduced in KIP-153 ( KAFKA-5194 ) but the docs were not updated . Built site-docs , and viewed them in a web browser to confirm . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : Restore scanning for super types of Connect plugins __EoT__ Enabling scans for super types in reflections is required in order to discover Connect plugins . Smoke tests , system tests , and manual testing . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4651 : improve test coverage of stores __EoT__ Working on increasing the coverage of stores in unit tests . Started with ` InMemoryKeyValueLoggedStore ` ! [ screen shot 2018-02-09 at 1 15 11 pm ] ( https : //user-images.githubusercontent.com/199238/36044796-c7ddf31e-0da1-11e8-87a5-1d6727a5fe4d.png ) ! [ screen shot 2018-02-09 at 1 24 38 pm ] ( https : //user-images.githubusercontent.com/199238/36044805-cd1bc23e-0da1-11e8-9b57-8f8bfa0a21ea.png ) # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix logger name override __EoT__ This regressed during the log4j - > scalalogging change . Added unit tests , one of which failed before the fix . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5624 : Add expiry check to sensor.add ( ) methods __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6554 ; Missing lastOffsetDelta validation before log append __EoT__ Add validation checks that the offset range is valid and aligned with the batch count prior to appending to the log . I 've added several unit tests to verify the various invalid cases . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix bug introduced by adding batch.size without default in FileStreamSourceConnector __EoT__ https : //github.com/apache/kafka/pull/4356 added ` batch.size ` config property to ` FileStreamSourceConnector ` but the property was added as required without a default in config definition ( ` ConfigDef ` ) . This results in validation error during connector startup . Unit tests were added for both ` FileStreamSourceConnector ` and ` FileStreamSinkConnector ` to avoid such issues in the future . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6568 ; The log cleaner should check the partition state before r… __EoT__ …emoving it from the inProgress map . The log cleaner should not naively remove the partition from in progress map without checking the partition state . This may cause the other thread calling ` LogCleanerManager.abortAndPauseCleaning ( ) ` to hang in definitely . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Enable deep-iteration to print data in DumpLogSegments __EoT__ Enable deep-iteration option when print-data-log is enabled in ` DumpLogSegments ` . Otherwise data is not printed . System test was wrongly reporting that data was lost since no payloads were printed . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6536 : Adding versions for japicmp-maven-plugin and maven-shade-plugin in __EoT__ quickstart *Added versions to japicmp-maven-plugin and maven-shade-plugin in quickstart pom.xml . Previously these versions were missing and the latest versions of the plugins were automatically being used . I have explicitly set the version of each plugin to their latest . *
MINOR : Fix Streams EOS system tests __EoT__ - avoid loosing log/stdout/stderr files on restart - reenable tests
KAFKA-6424 : QueryableStateIntegrationTest # queryOnRebalance should accept raw text __EoT__ * Remove to .toLowerCase in word count stream * Add method to read text from file , and move text to resources file * Minor cleanup : change argument order in assertEquals # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : Fix typos in kafka.py __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : make it more explicit that poll ( ) call is needed for the callback to run __EoT__ @ hachikuji
Cached hashCode of a Node instance since it is immutable __EoT__ ` Node ` structure is immutable so it is possible to cache ` hashCode ` of a ` Node ` instance as it 's done in the ` TopicPartition ` class . Faced with the producer performance degradation in case of high load and large number of brokers ( 100 ) , topics ( 150 ) and partitions ( 350 ) . Made several diagnostic records with the java flight recorder and found that the method ` HashSet : :contains ` in [ ` RecordAccumulator : :ready ` ] ( https : //github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/RecordAccumulator.java # L423 ) takes about 40 % of the whole time of the application . It is caused by re-calculating a hash code of a [ leader ] ( https : //github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/RecordAccumulator.java # L433 ) ( ` Node ` instance ) for every [ batch entry ] ( https : //github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/RecordAccumulator.java # L429 ) . The cached hash code solved this issue and the corresponding time of ` HashSet : :contains ` in ` RecordAccumulator : :ready ` decreased to ~2 % .
KAFKA-6517 : Avoid deadlock in ZooKeeperClient during session expiry __EoT__ ` ZooKeeperClient ` acquires ` initializationLock # writeLock ` to establish a new connection while processing session expiry WatchEvent . ` ZooKeeperClient # handleRequests ` acquires ` initializationLock # readLock ` , allowing multiple batches of requests to be processed concurrently , but preventing reconnections while processing requests . At the moment , ` handleRequests ` holds onto the readLock throughout the method , even while waiting for responses and inflight requests to complete . But responses can not be delivered if event thread is blocked on the writeLock to process session expiry event . This results in a deadlock . During broker shutdown , the shutdown thread is also blocked since it needs the readLock to perform ` ZooKeeperClient # unregisterStateChangeHandler ` , which can not be acquired if a session expiry had occurred earlier since this thread gets queued behind the event handler thread waiting for writeLock . This PR fixes the issue by limiting locking in ` ZooKeeperClient # handleRequests ` to just the non-blocking send , so that session expiry handling does n't get blocked . # # # Committer Checklist ( excluded from commit message
MINOR : Resuming Tasks should not be initialized twice __EoT__ additionally : removes race condition in StreamThreadTest plus cleanup
KAFKA-6512 : Discard references to buffers used for compression __EoT__ ` ProducerBatch ` retains references to ` MemoryRecordsBuilder ` and can not be freed until acks are received . Removing references to buffers used for compression after records are built will enable these to be garbage collected sooner , reducing the risk of OOM . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
HOTFIX : Fix lgtm.com alerts ( dead code and out-of-bounds error ) __EoT__ This fixes two alerts flagged on [ lgtm.com ] ( https : //lgtm.com ) for Apache Kafka . 1 . This [ dead code alert ] ( https : //lgtm.com/projects/g/apache/kafka/snapshot/6abe9363dbc8d7295055865233071ef51dce1f3a/files/tools/src/main/java/org/apache/kafka/trogdor/rest/RestExceptionMapper.java ? sort=name & dir=ASC & mode=heatmap & excluded=false # xbfc4f8e26024a8f4:1 ) where ` InvalidTypeIdException ` indirectly extends ` JsonMappingException ` . The flagged condition with the type test appears after the type test for the latter and thus makes its body dead . I opted to change the order of the tests . Please let me know if this is the intended behavior . 2 . The second commit addresses this [ out-of-bounds alert ] ( https : //lgtm.com/projects/g/apache/kafka/snapshot/6abe9363dbc8d7295055865233071ef51dce1f3a/files/clients/src/main/java/org/apache/kafka/common/security/kerberos/KerberosRule.java ? sort=name & dir=ASC & mode=heatmap & excluded=false # x40b686b508503559:1 ) . More alerts can be found [ here ] ( https : //lgtm.com/projects/g/apache/kafka/alerts/ ) . Note that my colleague Aditya Sharad addressed some of those in the now outdated # 2939 . @ mjsax I do n't know any committers here , apart from you , so maybe you could have a look ? How are you doing by the way ? Long time no see ...
KAFKA-6364 : second check for ensuring changelog topic not changed during restore __EoT__ Added a second check for race condition where store changelog topic updated during restore , but not if a KTable changelog topic . This will be tricky to test , but I wanted to push the PR to get feedback on the approach . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6397 : Consumer should not block setting positions of unavailable partitions __EoT__ Prior to this patch , the consumer always blocks in poll ( ) if there are any partitions which are awaiting their initial positions . This behavior was inconsistent with normal fetch behavior since we allow fetching on available partitions even if one or more of the assigned partitions becomes unavailable _after_ initial offset lookup . With this patch , the consumer will do offset resets asynchronously , which allows other partitions to make progress even if the initial positions for some partitions can not be found . I have added several new unit tests in ` FetcherTest ` and ` KafkaConsumerTest ` to verify the new behavior . One minor compatibility implication worth mentioning is apparent from the change I made in ` DynamicBrokerReconfigurationTest ` . Previously it was possible to assume that all partitions had a fetch position after ` poll ( ) ` completed with a non-empty assignment . This assumption is no longer generally true , but you can force the positions to be updated using the ` position ( ) ` API which still blocks indefinitely until a position is available . Note
HOTFIX : Fix reset integration test hangs on busy wait __EoT__ 1 . Found two root causes of the failure : a ) appID is not set at constructor time and hence causing the condition method to fail , 2 ) class static properties are only populated once and hence when SSL tests are executed before non-SSL tests , the later will fail . 2 . A bunch of log4j improvements along the debugging experience . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ KAFKA-5996 ] JsonConverter generates Mismatching schema DataException __EoT__
MINOR : more details in error message descriptions __EoT__
KAFKA-6511 : Corrected list parsing logic __EoT__ Corrected the parsing of invalid list values . A list can only be parsed if it contains elements that have a common type , and a map can only be parsed if it contains keys with a common type and values with a common type . This should only be merged to ` trunk ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Use enum for close mode in Selector instead of two booleans __EoT__ Minor follow-up update for KAFKA-6529 # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Code cleanup __EoT__ - Used arrays directly instead of constructing List while getting storeNames - Used proper Integer identifier in the Log . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : typos in KStream javadoc __EoT__ with - > which
MINOR : Add a new system test for resilience __EoT__ Rolling hard-kill and restart streams with broker temporarily unavailable and make sure the restarting can still be successful eventually . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6472 - Fix WordCount example code error __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6472 - related https : //github.com/apache/kafka-site/pull/126 CC : @ guozhangwang
MINOR : Fixed typos in KGroupedTable Javadoc __EoT__ Two more fixes for you all to consider . Thank you .
KAFKA-5944 : Unit tests for handling SASL authentication failures in clients __EoT__
KAFKA-6552 : “ entity_type ” not exactly in description of kafka-configs.sh __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5550 __EoT__ Changed call to use the overload of ConnectSchema.validate method with the field name passed in . Ensure that field in put call is not null .
KAFKA-3625 : TopologyTestDriver must process output for wall-clock-time punctuations and on close ( ) __EoT__
KAFKA-6529 : Stop file descriptor leak when client disconnects with staged receives __EoT__ If an exception is encountered while sending data to a client connection , that connection is disconnected . If there are staged receives for that connection , it is tracked to process those records . However , if the exception was encountered during processing a ` RequestChannel.Request ` , the ` KafkaChannel ` for that connection is muted and wo n't be processed . Add the channel to failed sends so the connection is cleaned up on those exceptions . This stops the leak of the memory for pending requests and the file descriptor of the TCP socket . Only flag channel as failed send when an exception is encountered while actually attempting to send something . Other socket interactions don't count . Test that a channel is closed when an exception is raised while writing to a socket that has been closed by the client . Since sending a response requires acks ! = 0 , allow specifying the required acks for test requests in SocketServerTest.scala . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation -
KAFKA-6501 : Dynamic broker config tests updates and metrics fix __EoT__ 1 . Handle listener-not-found in MetadataCache since this can occur when listeners are being updated . To avoid breaking clients , this is handled in the same way as broker-not-available so that clients retry 2 . Set retries=1000 for listener reconfiguration tests to avoid transient failures when metadata cache has not been updated 3 . Remove IdlePercent metric when Processor is deleted , add test 4 . Reduce log segment size used during reconfiguration to avoid timeout while waiting for log rolling 5.Test markPartitionsForTruncation after fetcher thread resize # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3625 : add docs for Kafka Streams test-utils ( follow up ) __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add missing generics and surpress warning annotations __EoT__
MINOR : improve security docs for Kafka Streams __EoT__
MINOR : Move processor response queue into Processor __EoT__ Small refactor which moves the processor response queue into the Processor object itself . This simplifies the logic for dequeuing a response for sending and also eliminates the response listeners collection which was only used to wakeup the Processor after a new response had been enqueued . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add missing imports to 'Hello Kafka Streams ' examples __EoT__ Without those imports examples does not compile .
KAFKA-6362 : maybeAutoCommitOffsetsAsync should try to discover coordinator __EoT__ Currently , ` maybeAutoCommitOffsetsAsync ` may not retry to find out coordinator even after the coordinator goes back to service . As a result , all asynchronous offset commits will fail . This patch refines ` maybeAutoCommitOffsetsAsync ` to have it periodically retry the coordinator discovering . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
HOTFIX : broken javadoc links in streams web docs __EoT__ Our javadoc links in developer guide are broken , inspired by https : //github.com/apache/kafka-site/pull/127 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update jetty , jackson , gradle and jacoco __EoT__ - Gradle update adds support for Java 10 - Jacoco update adds support for Java 9 - Jackson bug fix update adds more serialization robustness checks - Jetty bug fix update Relying on existing tests for verification . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6405 : Fix incorrect comment in MetadataUpdater __EoT__ The comment for 'handleDisconnection ' says it can return true or false , but the return type is void . `` ` java /** * If ` request ` is a metadata request , handles it and return ` true ` . Otherwise , returns ` false ` . * * This provides a mechanism for the ` MetadataUpdater ` implementation to use the NetworkClient instance for its own * requests with special handling for disconnections of such requests . * @ param destination */ void handleDisconnection ( String destination ) ; `` ` change to `` ` java /** * Handle disconnections for metadata requests . * * This provides a mechanism for the ` MetadataUpdater ` implementation to use the NetworkClient instance for its own * requests with special handling for disconnections of such requests . * @ param destination */ void handleDisconnection ( String destination ) ; `` `
MINOR : Update TupleForwarder comment __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6519 : Reduce log level for normal replica fetch errors __EoT__ Out of range errors are common in replica fetchers and not an indication of a problem . Therefore we should reduce the log level . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add attributes ` processedKeys ` and ` processedValues ` to MockProcessorSupplier __EoT__ This would allow for easier testing of topologies using the following pattern : `` ` Scala // in Scala val builder = new KStreamBuilder val stream : KStream [ K , V ] = builder.stream ( KSerde , VSerde , topic ) val processedStream : KStream [ K , VR ] = createTopology ( stream , builder ) val processorSupplier = new MyMockProcessorSupplier [ K , VR ] processedStream.process ( processorSupplier ) val streamDriver = new MyKStreamTestDriver ( builder , TestUtils.tempDirectory ( ) ) streamDriver.setTime ( 0L ) streamDriver.process ( topic , somethingK , somethingV ) streamDriver.flushState ( ) val results = ( processorSupplier.processedKeys zip processorSupplier.processedValues ) .toMap results ( expectedK ) should be ( expectedVR ) `` ` Without breaking any existing tests that rely on the ` processed ` ` ArrayList ` . Of course it 's not as elegant as rewriting the logic here , as we 're ( almost ) duplicating the information in the ` processed ` array . @ guozhangwang any thoughts ?
MINOR : update upgrade notes for Streams API ; message format 0.10 requiered __EoT__
KAFKA-6367 : StateRestoreListener use actual last restored offset for restored batch __EoT__ Use the last actual restored offset for the ` StoreRestoreListener.onBatchRestored ` method . Probably should update the docs to inform users this could include gaps in sequence due to commit markers . Updated existing tests # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6532 : Reduce impact of delegation tokens on public interfaces __EoT__ Keep delegation token implementation internal without exposing implementation details to pluggable classes : 1 . KafkaPrincipal # tokenAuthenticated must always be set by SaslServerAuthenticator so that custom PrincipalBuilders can not override . 2 . Replace o.a.k.c.security.scram.DelegationTokenAuthenticationCallback with a more generic ScramExtensionsCallback that can be used to add more extensions in future . 3 . Separate out ScramCredentialCallback ( KIP-86 makes this a public interface ) from delegation token credential callback ( which is internal ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4750 : Bypass null value and treat it as deletes __EoT__ Here is the new rule for handling nulls : * in the interface store , put ( key , null ) are handled normally and value serde applied to null . * in the inner most store , null bytes after serialization will always be treated as deletes . * in the interface store , if null bytes get returned in get ( key ) , serde will be avoided and null object will be returned . More changes : * Update javadocs , add unit tests accordingly ; augment MockContext to set serdes for the newly added tests . * Fixed a discovered bug which is exposed by the newly added tests . * Use the new API to remove all old APIs in the existing state store tests . * Remove SerializedKeyValueIterator since it is not used any more . This is originally contributed by @ evis . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : exchange redundant Collections.addAll with parameterized constructor __EoT__ This issue is a rework to the outdated ticket created earlier ( https : //github.com/apache/kafka/pull/2707 ) . This issue was created because original branch was already removed . Basic static analysis . What was accomplished : - exchanged redundant Collections.addAll with parameterized constructor - exchange manual copy to collection with Collections.addAll call
KAFKA-6504 : Fix creation of a sensor to be specific to a metric group so it is not shared __EoT__ This change ensures that when sensors are created , they are specific to a metric group . Previously the sensors were being shared between metric groups , causing incorrect metrics .
KAFKA-6528 : Fix transient test failure in testThreadPoolResize __EoT__ Add locking to access ` AbstractFetcherThread # partitionStates ` during dynamic thread update . Also make testing of thread updates that trigger retries more resilient . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Improve log4j messaging __EoT__ Fix log4j formatting for a couple of log entries , plus include key information in the exception message # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Removed explicit class checks for PolicyViolationException __EoT__ PolicyViolationException is a subclass of ApiException , and the handling was identical # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6246 : Dynamic update of listeners and security configs __EoT__ Dynamic update of listeners as described in KIP-226 . This includes : - Addition of new listeners with listener-prefixed security configs - Removal of existing listeners - Password encryption - sasl.jaas.config property for broker 's JAAS config prefixed with listener and mechanism name # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6494 ; ConfigCommand update to use AdminClient for broker configs __EoT__ Use new AdminClient for describing and altering broker configs using ConfigCommand . Broker quota configs as well as other configs will continue to be processed directly using ZooKeeper until KIP-248 is implemented . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : KIP-229 Follow-up __EoT__ This PR includes * Minor fix to command line output message * Relevant documentation update # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6487 : ChangeLoggingKeyValueBytesStore does not propagate delete __EoT__ The ` ChangeLoggingKeyValueBytesStore ` used to write null to its underlying store instead of propagating the delete , which has two drawbacks : - an iterator will see null values - unbounded memory growth of the underlying in-memory keyvalue store The fix will just propagate the delete instead of performing put ( key , null ) . The changes to the tests : - extra test whether the key is really gone after delete by calling the ` approximateEntries ` on the underlying store . This number is exact because we know the underlying store in the test is of type ` InMemoryKeyValueStore ` - extra test to check a delete is logged as < key , null > ( the existing test would also succeed if the key is just absent ) While also updating the corresponding tests of the ` ChangeLoggingKeyValueStore ` I noticed the class is nowhere used anymore so I removed it from the source code for clarity .
KAFKA-6378 KStream-GlobalKTable null KeyValueMapper handling __EoT__ For KStream-GlobalKTable joins let ` null ` ` KeyValueMapper ` results indicate no match For KStream-GlobalKTable joins , a ` KeyValueMapper ` is used to derive a key from the stream records into the ` GlobalKTable ` . For some stream values there may be no valid reference to the table stream . This patch allows developers to use ` null ` return values to indicate there is no possible match . This is possible in this case since ` null ` is never a valid key value for a ` GlobalKTable ` . Without this patch , providing a ` null ` value caused the stream to crash on Kafka 1.0 . I added unit tests for KStream-GlobalKTable left and inner joins , since they were missing . I also covered this additional scenario where ` KeyValueMapper ` returns ` null ` to insure it is handled correctly . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6499 : Do not write offset checkpoint file with empty offset map __EoT__ * In Checkpoint.write ( ) , if the offset map passed in is empty , skip the writing of the file which would only contain version number and the empty size . From the reading pov , it is the same as no file existed . * Add related unit tests . * Minor fixes on log4j messages . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ MINOR ] : Bump trunk versions to 1.2-SNAPSHOT __EoT__
MINOR : Fix brokerId passed to metrics reporters __EoT__ Remove caching of brokerId in DynamicBrokerConfig constructor since it is called before KafkaConfig is fully initialized . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6138 Simplify StreamsBuilder # addGlobalStore __EoT__ deprecated StreamsBuilder # addGlobalStore and InternalStreamsBuilder # addGlobalStore add new StreamsBuilder # addGlobalStore and InternalStreamsBuilder # addGlobalStore without sourceName and processorName as parameter generate sourceName and processorName by using InternalStreamsBuilder # newProcessorName *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KIP-229 : DeleteGroups API __EoT__ This PR implements [ KIP-229 ] ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-229 % 3A+DeleteGroups+API ) . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6323 : punctuate with WALL_CLOCK_TIME triggered immediately __EoT__ This is the only way I found to fix the issue without altering the API . @ mihbor @ mjsax the contribution is my original work and I license the work to the project under the project 's open source license
KAFKA-4969 : Attempt to evenly distribute load of tasks __EoT__ This PR is an initial attempt to evenly distribute tasks with heavy processing across clients using a somewhat naive approach . The rationale is by making sure each task is not comprised entirely of the same ` topicGroupId ` s , then if there is one sub-topology doing heavy processing and another sub-topology that is relatively light , the processing load is somewhat evenly distributed . This process only looks at active tasks ; standby tasks are not given this consideration as we can end up in a state where clients have the same task assignments i.e [ aT1 , sT2 ] [ aT2 , sT1 ] . We plan to do a follow-on task at a later date where we weigh tasks with state stores to distribute tasks with state stores evenly . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6418 : AdminClient should handle empty or null topic names better __EoT__ AdminClient should return an InvalidTopicException when the topic name supplied by an AC user is empty or null . Previously , the client would try to serialize these invalid topic names , and the whole batch request would fail , including unrelated topics . Also add a unit test .
KAFKA-6166 : Update javadoc for streams config __EoT__ This PR piggy-back a few different javadoc changes : 1 . KIP-220 : add admin client prefix . 2 . Clarify on user customized configs . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6243 : Enable dynamic updates of broker metrics reporters __EoT__ Dynamic metrics reporter updates described in KIP-226 . This includes : - Addition and removal of metrics reporters - Reconfiguration of custom metrics reporter configs - Tests for metrics reporter updates at default cluster-level and as per-broker config for testing # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6166 : Streams configuration requires consumer . and producer . in order to be read __EoT__ * Implement method to get custom properties * Add custom properties to getConsumerConfigs and getProducerConfigs * Add tests # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-6148 : ClassCastException in connectors that include kafka-clients __EoT__ Exclusion for packages that need not be loaded in isolation needs to be extended to all the ` org.apache.kafka ` packages ( that do not belong to transforms and the other whitelisted packages ) . Most notably , this refers to any classes in ` kafka-clients ` package . Given this exclusion and the fact that scanning for yet another type of package would increase the scanning time , issuing a warning as well any time a Connect plugin wrongfully includes such a dependency does not seem straightforward at this point . I 'm issuing this PR with the `` ignore '' functionality at the moment . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6464 : Fix Base64URL encode padding issue under JRE 1.7 __EoT__ The org.apache.kafka.common.utils.Base64 class defers Base64 encoding/decoding to the java.util.Base64 class beginning with JRE 1.8 but leverages javax.xml.bind.DatatypeConverter under JRE 1.7 . The implementation of the encodeToString ( bytes [ ] ) method returned under JRE 1.7 by Base64.urlEncoderNoPadding ( ) blindly removed the last two trailing characters of the Base64 encoding under the assumption that they would always be the string `` == '' but that is incorrect ; padding can be `` = '' , `` == '' , or non-existent . This commit fixes that problem . The commit also adds a Base64.urlDecoder ( ) method that defers to java.util.Base64 under JRE 1.8+ but leverages javax.xml.bind.DatatypeConverter under JRE 1.7 . Finally , there is a unit test to confirm that encode/decode are inverses in both the Base64 and Base64URL cases . Signed-off-by : Ron Dagostino < rndgstn @ gmail.com >
KAFKA-3625 : Add public test utils for Kafka Streams __EoT__ - add new artifact test-utils - add TopologyTestDriver - add MockTime , TestRecord , add TestRecordFactory This PR requires a KIP and is WIP . DO NOT MERGE . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix Javadoc Issues __EoT__ This PR mainly fixes some broken links and invalid references in the clients Javadoc
MINOR : Fix MetadataResponse # toStruct serialization for null leaders __EoT__ In MetadataResponse deserialization , if the partition leader key is set to -1 , the leader is set to null . The MetadataResponse # toStruct code should handle this correctly as well . RequestResponseTest should test this as well .
DOCU : Add authorizer.class.name to the security section in documentation __EoT__ The section _7.4 Authorization and ACLs_ in Kafka documentation describes how to use ACLs . But it does n't seem to contain the most important part - configuring the Authorizer . That might be a bit confusing for the users . This PR adds this to the documentation .
MINOR : Changed javadoc on KafkaConsumer # endOffsets to mention end offset for… __EoT__ Existing javadoc fails to mention that endOffsets returns zero for empty TopicPartitions . Just added that important little tidbit to save developers ' time .
[ MINOR ] Fix comment on how to consume __consumer_offsets __EoT__
do n't call the zookeeper host strings URLs __EoT__ I spent a few minutes trying to guess what the scheme part might be . Documentation would be better if it does n't say it is expecting [ a format it is n't expecting ] [ url-syntax ] . [ url-syntax ] : https : //en.wikipedia.org/w/index.php ? title=URL & oldid=777577354 # Syntax
Add missing backslash __EoT__ There 're missing backslash when running the quick start tutorial .
MINOR : update upgrade notes with regard to KIP-149 __EoT__
MINOR : Fix typo in log __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4991 : Resolve findbugs warnings in KerberosLogin __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-4897 : Add pause method to ShutdownableThread __EoT__ - Use newly added pause method in LogCleaner and ControllerChannelManager classes - Remove LogCleaner , Cleaner exclusions from findbugs-exclude.xml # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : LogCleanerManager.cleanableOffsets should create objects … __EoT__ …for dirty non-active segments only when ` log.cleaner.min.compaction.lag.ms ` is greater than 0 With ` log.cleaner.min.compaction.lag.ms ` 's default value of 0 , there is no need to hold heap objects for those dirty non-active segments . This could reduce the heap size and also avoid the unnecessary monitor lock retrieval . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update consumer group command documentation with newly supported options __EoT__ With KIP-175 released as of 1.0.0 there are a number of consumer group command options that can be used to describe a consumer group . This PR updates the documentation on consumer group command to mention those options . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix typo in consumer group command error __EoT__ The error message lists ' -- reset-offset ' as one of the possible options , but the option is in fact called ' -- reset-offsets ' . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Add a Validator for NonNull configurations and remove redundant null checks on lists __EoT__ Return an empty list instead of null to make handling these easier
KAFKA-6462 : fix unstable ResetIntegrationTest __EoT__
KAFKA-6461 TableTableJoinIntegrationTest is unstable if caching is enabled __EoT__ In test output , NPE is observed on the following line in apply ( ) method : `` ` if ( value.equals ( expected ) ) { `` ` We should check that value is not null before calling equals ( ) # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6241 : Enable dynamic updates of broker SSL keystore __EoT__ Enable dynamic broker configuration ( see KIP-226 for details ) . Includes - Base implementation to allow specific broker configs and custom configs to be dynamically updated - Extend DescribeConfigsRequest/Response to return all synonym configs and their sources in the order of precedence - Extend AdminClient to alter dynamic broker configs - Dynamic update of SSL keystores # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : increase timeout for unstable KTableSourceTopicRestartIntegrationTest __EoT__
MINOR : update docs with regard to improved resilience of Kafka Streams __EoT__
KAFKA-6366 : Fix stack overflow in consumer due to many offset commits during coordinator disconnect __EoT__ When the coordinator is marked unknown , we explicitly disconnect its connection and cancel pending requests . Currently the disconnect happens before the coordinator state is set to null , which means that callbacks which inspect the coordinator state will see it still as active . If there are offset commit requests which need to be cancelled , each request callback will inspect the coordinator state and attempt to mark the coordinator dead again . In the worst case , if there are many pending offset commit requests that need to be cancelled , this can cause a stack overflow . To fix the problem , we need to set the coordinator to null prior to cancelling pending requests . I have added a test case which reproduced the stack overflow with many pending offset commits . I have also added a basic test case to verify that callbacks for in-flight or unsent requests see the coordinator as unknown which prevents them from attempting to resend . Note that I have also included some minor cleanups which I noticed along the way . #
MINOR : fixes a typo in a comment in config/server.properties __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : additional check to follower fetch handling __EoT__ add check to KafkaApis add unit test specific to follower fetch update tool developed with @ mimaison # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Adding Streams Use cases anchor __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes ) It is just adding link PR for easy sharing of streams use cases . I am not doing any test coverage or verifying documentation
KAFKA-6456 JavaDoc clarification for SourceTask # poll ( ) __EoT__ Making clear that implementations of poll ( ) should n't block indefinitely in order to allow the task instance to transition to PAUSED state . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix error message in KafkaConfig validation __EoT__ This error message contradicts the documentation of the individual properties , their default values and of course how Kafka really works . Although equality is not a desired configuration , I decided to include it in the error message as the check itself allows equality .
MINOR : Fix typo in KafkaConsumer javadoc __EoT__
MINOR : Improve internal topic integration test __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR need to get a new transformer for each get ( ) call . ca n't share'em __EoT__ @ jeyhunkarimov @ mjsax @ guozhangwang # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6382 : Make ProducerConfig and ConsumerConfig constructors public __EoT__
MINOR : fix typo __EoT__ Fix typo on Streams page
Menu updates and navigation __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6096 : Add multi-threaded tests for group coordinator , txn manager __EoT__
KAFKA-6422 Mirror maker will throw null pointer exception when the message value is null __EoT__ when enable trace level log in mirror maker , if the message value is null . it will throw null pointer exception and shutdown the mirror maker .
Updating docs for streams app reset tool __EoT__ Following up https : //github.com/apache/kafka/pull/4159 # issuecomment-354942083 Updating documentation for Streams Application Resetter Tool : * Added upgrade notes that StreamsResetter API has been updated . * Describe options to reset offsets for input-topics in Tool docs .
KAFKA-6363 : Use MockAdminClient for any unit tests that depend on Adm… __EoT__ * Implement MockAdminClient.deleteTopics * Use MockAdminClient instead of MockKafkaAdminClientEnv in StreamsResetterTest * Rename MockKafkaAdminClientEnv to AdminClientUnitTestEnv * Use MockAdminClient instead of MockKafkaAdminClientEnv in TopicAdminTest * Rename KafkaAdminClient to AdminClientUnitTestEnv in KafkaAdminClientTest.java * Migrate StreamThreadTest to MockAdminClient *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : Improve exception messages when state stores can not be accessed . __EoT__ The messages were previously identical which is a bit of a pain since you have to track down line numbers to see exactly why the exception happened . The messages are also confusing and I think misleading in the first case , where the issue likely is n't that the state store actually moved just that a rebalance is in progress . Hopefully these are clearer and provide a bit more debugging info . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Catch JsonMappingException subclass __EoT__ ` InvalidTypeIdException ` can not be catched currently
KAFKA-6311 : Expose Kafka cluster ID in Connect REST API ( KIP-238 ) __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * Simple unit tests sufficiently exercise the behavior . In fact , this addition increases coverage since ` RootResource ` was not previously unit tested . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix concurrency bug in MetadataCache and Metadata request when listeners inconsistent __EoT__ - Add missing locking/volatile in MetadataCache.aliveEndPoint - Fix topic metadata not to throw BrokerNotAvailableException when listeners are inconsistent . Add test verifying the fix . As part of this fix , renamed Broker methods to follow Map convention where the ` get ` version returns ` Option ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6298 - Line numbers on log messages are incorrect __EoT__ Modified LogContext.KafkaLogger to add support for location aware logging . If LocationAwareLogger is not available then fallback to the Logger .
KAFKA-6383 : complete shutdown for CREATED StreamThreads __EoT__ When transitioning StreamThread from CREATED to PENDING_SHUTDOWN free up resources from the caller , rather than the stream thread , since in this case the stream thread was never actually started . In KakfaStreams.close , shut down the streams threads from the close thread . StreamThread.shutdown may now block , so call this from the close thread so that the timeout is honored . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6318 : StreamsResetter should return non-zero return code on error __EoT__ If users specify a non-existing topic as input parameter , StreamsResetter only prints out an error message that the topic was not found , but return code is still zero . We should return a non-zero return code for this case .
KAFKA-6391 ensure topics are created with correct partitions BEFORE building the… __EoT__ ensure topics are created with correct partitions BEFORE building the metadata for our stream tasks First ensureCoPartitioning ( ) on repartitionTopicMetadata before creating allRepartitionTopicPartitions # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6269 : KTable restore fails after rebalance __EoT__ - If more records are left when restoration is completed , return offset of next record - added integration test to verify behavior vs unit test as hard to mock all relevant behavior for all moving parts . - updated unit test # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5368 : Add test for skipped-records metric __EoT__ - adding a missing test for KAFKA-5368
KAFKA-6383 : complete shutdown for CREATED StreamThreads __EoT__ When transitioning StreamThread from CREATED to PENDING_SHUTDOWN free up resources from the caller , rather than the stream thread , since in this case the stream thread was never actually started . In KakfaStreams.close , shut down the streams threads from the close thread . StreamThread.shutdown may now block , so call this from the close thread so that the timeout is honored . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Replace Arrays.asList with Collections.singletonList where possible . __EoT__ Replacement PR for # 4226 where I screwed up the git merges . This is something I did after my working hours , I would ask people reviewing this do the same , do n't take time for this during your work hours . It 's not actual functionality , it is an internal rewrite based on suggestions provided by the static code analysis built into the Intellij IDE . I try to keep such a PR as limited as possible , for clarity of reading . ========== In places where Arrays.asList ( ) is given exactly 1 argument , replace it with Collections.singletonList ( ) . Internally , this is a smaller object , so it uses a bit less memory at runtime . An important thing to note is that you can not add anything to such a list . So if it is returned through a method into a random ` List < > ` object , performing ` add ( ) ` on it will throw an exception . I checked every usage of all replaced instances , they 're only ever returned to be read
KAFKA-6307 mBeanName should be removed before returning from JmxReporter # removeAttribute ( ) __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ MINOR ] Where possible , introduce EnumMap . __EoT__ Very simple PR , introduce EnumMap in 2 places of the code . EnumMap : https : //docs.oracle.com/javase/7/docs/api/java/util/EnumMap.html EnumMap is meant to be used when the key of a Map is an Enum . From the documentation : > Enum maps are represented internally as arrays . This representation is extremely compact and efficient . Should use less memory per instance and also be faster in lookup .
MINOR : Fixed clusterId reference in Metadata . __EoT__ - Fixed clusterId reference in Metadata . - Fixed log message with respective error in KerberosLogin . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Use TopicPartition in ConsumerGroupCommand instead of TopicAndPartition where possible __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-5772 Improve Util classes __EoT__ Done for https : //issues.apache.org/jira/browse/KAFKA-5772 Utils with static methods should not be instantiated , hence marking the classes ` final ` and adding a ` private ` constructor . this is consistent w/ some of the Util classes , such as ` ByteUtils ` , see : https : //github.com/apache/kafka/blob/d345d53e4e5e4f74707e2521aa635b93ba3f1e7b/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java # L29-L31
KAFKA-6390 : Update ZooKeeper to 3.4.11 , Gradle and other minor updates __EoT__ Updates : - Gradle , gradle plugins and maven artifact updated - Bug fix updates for ZooKeeper , Jackson , EasyMock and Snappy Not updated : - RocksDB as it often causes issues , so better done separately - args4j as our test coverage is weak and the update was a feature release Also fixed scala-reflect version to match scala-library . Release notes for ZooKeeper 3.4.11 : https : //zookeeper.apache.org/doc/r3.4.11/releasenotes.html A notable fix is improved handling of UnknownHostException : https : //issues.apache.org/jira/browse/ZOOKEEPER-2614 Manually tested that IntelliJ import and build still works . Relying on existing test suite otherwise . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6320 : move ZK metrics in KafkaHealthCheck to ZookeeperClient __EoT__ * Moved metrics in KafkaHealthCheck to ZookeeperClient . * Converted remaining ZkUtils usage in KafkaServer to ZookeeperClient and removed ZkUtils from KafkaServer . * Made the re-creation of ZooKeeper during ZK session expiration with infinite retries . * Added unit tests for all new methods in KafkaZkClient . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-5895 Gradle 3.0+ is needed on the build __EoT__ As discussed in [ KAFKA-5895 ] ( https : //issues.apache.org/jira/browse/KAFKA-5895 ) , this trivial PR is simply adding a hint that Gradle 3.0+ is now needed
MINOR : Use GitHub git repo for push by default __EoT__ GitBox ( write support for the GItHub git repository ) has been enable as per : https : //issues.apache.org/jira/browse/INFRA-15676 # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
let kafka support `` commit offset after consuming '' __EoT__ Kafka Of Original Version do not support `` commit offset after consuming '' , when kafka.consumer.ConsumerIterator [ K , V ] .next ( ) return a MessageAndMetadata , which consumed offset is already being set , and commit thread maybe commit this offset before `` consuming process finished '' , when jvm restart or being down，this msg will not be consumed next time
let kafka support `` commit offset after consuming '' __EoT__ Kafka Of Original Version do not support `` commit offset after consuming '' , when kafka.consumer.ConsumerIterator [ K , V ] .next ( ) return a MessageAndMetadata , which consumed offset is already being set , and commit thread maybe commit this offset before `` consuming process finished '' , when jvm restart or being down，this msg will not be consumed next time
KAFKA-294 __EoT__ This issue can be caused by a non-existing path but also a misunderstanding from the config file . A short example will help the user .
[ iOS ] Restore recursive lock and add some comments . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24
[ Core ] Let affine types of `` scroller '' , `` list '' , `` waterfall '' match Rend… __EoT__ …erList logic . Autodetect subclass when registering a component and register its affine type . First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After
[ iOS ] fix video component show control 's bug __EoT__ fix video component show control 's bug .
[ WEEX-656 ] [ iOS ] WeexDemo Supporting iPhone XS Max and XR __EoT__
[ iOS ] Fix ios mutlithread related issues . Refactor WXThreadSafeMutabl… __EoT__ …eXXX containers . First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- --
[ iOS ] add userinfo to bundle loader failed error message . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于
[ WEEX-484 ] [ iOS ] Failure of parsing transform parameter when in third-party __EoT__ Failure of parsing transform parameter when in third-party
[ iOS ] Do not layout if non css style is updated such as 'transform ' b… __EoT__ …y updateStyle . First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you
[ iOS ] fix image slide bug __EoT__
[ jsfm ] add event support without binding to Element __EoT__
* [ Android ] Update version to 0.19 __EoT__
* [ android ] Update devtool version __EoT__
* [ android ] Update devtool version __EoT__
[ iOS ] Fix spelling error . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至 Apache 基金会 届时我们会使用新的
[ WEEX-648 ] [ iOS ] native batch for dom operations generating from JavaScript __EoT__ introduce a native batch for dom operations generating from JavaScript wrap a series of dom operations with beginBatch and endBatch directives , when every V-sync signal comes , we try to ensure that the operations between beginBatch and endBatch can be performed in current V-sync , this policy can drop frames maybe , for our policy dropping frames , we only allow 20 frames at most . see Android policy pull request # 1647 feature:648
[ WEEX-648 ] [ Android ] native batch for dom operations generating from JavaScript __EoT__ introduce a native batch for dom operations generating from JavaScript wrap a series of dom operations with beginBatch and endBatch directives , when every V-sync signal comes , we try to ensure that the operations between beginBatch and endBatch can be performed in current V-sync , this policy can drop frames maybe , for our policy dropping frames , we only allow 20 frames at most . see iOS pull request https : //github.com/apache/incubator-weex/pull/1644 feature:648
[ WEEX-612 ] [ android ] Fixed after input component default set a string… __EoT__ [ WEEX-612 ] Fixed after input component default set a string on android platform , and then remove it , not trigger input event . see more here https : //issues.apache.org/jira/browse/WEEX-612 Bug:612
* [ Android ] Fix iconfont refresh problem __EoT__ Refresh the text node when iconfont download finished .
* [ Android ] Fix layout problem for position : absolute __EoT__ Fix layout problem for item with position : absolute style and align-item : center in its parent . http : //dotwe.org/vue/016485161d20f06bf1060af9ca66db4b
[ iOS ] Fix crash if observer is removed twice . Change some variables t… __EoT__ …o static . First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your
[ WEEX-651 ] [ Android ] fix data not bind when non-recyclable item is lazy in list __EoT__
[ WEEX-650 ] [ Android ] fix appear & disappear problem of items in scroller __EoT__ There are two problem fixed in this situation . 1 . When a scroller is shown by sliding up a list , appear events of the item in scroller can not be fired . This is caused by the scroller component in Android only fires appear / disappear event when scrolling exclude the time that scroller is attached / detached to window . 2 . The logic that check a view is visible in scroller component is defective , because in the time of call check method , the view may not in screen but it will show after this tick .
[ iOS ] Invalidate of WXComponentManager should be invoked in component… __EoT__ … thread . First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- --
* [ android ] Fix input disable can not slide __EoT__
[ WEEX-651 ] [ Android ] fix list unable to slide when sticky item has events __EoT__
[ WEEX-649 ] [ Android ] add ` isBundleRequest ` flag to requestParams when downLoadBundle __EoT__ add ` isBundleRequest ` flag to requestParams when downLoadBundle
[ WEEX-646 ] [ Android ] fix loading disappear when refresh more than one time __EoT__
[ WEEX-644 ] [ Android ] fix transform origin not right when animating with Animatio… __EoT__
[ WEEX-643 ] [ Android ] fix image flash in sticky item __EoT__
[ iOS ] Catch exception 'NSInternalInconsistencyException ' , reason : 'Mis… __EoT__ …sing cell for newly visible row 8 ' . It 's a iOS bug , It disappear after iOS11.2 . . https : //github.com/mahaiyannn/TableViewExceptionDemo.git is the reproduction demo First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is
[ WEEX-642 ] [ iOS ] fix wxpageRatio not report & & report createInstaceContext failed info __EoT__ - fix wxPageRatio not report - add instanceId to weexContext , if fucn ` createInstanceContext ` failure ，then we will know which instance has problem
[ iOS ] Add keyboardSize in `` keyboard '' event . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24
[ iOS ] Protect stream module arguments . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至 Apache 基金会
[ iOS ] Only use __enable_native_promise__ option when explicitly set i… __EoT__ …n config . First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- --
[ jsfm ] upgrade js framework to v0.29.0 __EoT__ + Decide whether to use promise polyfill by environment variable ( # 1609 ) + Upgrade weex-vue-framework to v2.5.16-weex.5 + Support init and reset timer functions of ` next-tick.js ` within Vue . ( https : //github.com/Hanks10100/vue/pull/12 )
merge libweexjss __EoT__ https : //issues.apache.org/jira/browse/WEEX-641 1.remove append '\0 ' 2.use string to take str from wtf 3.Add timerTask at the end of the queue 4. createInstance failed if string size is zero
[ core ] fix bugs in data render mode __EoT__
[ core ] release char* to jni after using __EoT__
[ jsfm ] Decide whether to use promise polyfill by environment variable __EoT__
[ WEEX-638 ] [ Android ] fix attacheCurrentThread crash __EoT__ https : //issues.apache.org/jira/browse/WEEX-638 [ WEEX-638 ] [ Android ] fix attacheCurrentThread crash fix attacheCurrentThread crash Bug : WEEX-638
[ WEEX-637 ] [ Android ] merge jss.so __EoT__ https : //issues.apache.org/jira/browse/WEEX-637 [ WEEX-637 ] [ Android ] merge jss.so merge jss.so to fix recycle-list problems Bug : WEEX-637
Fix div in list which cause weexcore render objects not ordered . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于
[ iOS ] Project fix , remove invalid files . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至
[ core ] fix use c++_static compile error on Android __EoT__
[ iOS ] remove render_document.cpp from sdk __EoT__
[ core ] [ Android ] fix NPE and decode error in opcode __EoT__
[ core ] fix opcode rax parser error __EoT__
Merge 0927 bugfixes __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至 Apache 基金会 届时我们会使用新的 GitHub 仓库：https : //github.com/apache/incubator-weex
[ WEEX-633 ] [ core ] bugfix dom module register error and '\xxxxxx ' error __EoT__
[ WEEX-586 ] [ Android ] Revert Weex Render High Performance Cross Platform __EoT__ [ WEEX-586 ] [ Android ] Revert Weex Render High Performance Cross Platform
[ WEEX-634 ] [ Android ] fix old performance record time __EoT__ - record renderUnixTimeOrigin use ` WXUtils.getFixUnixTime ( ) ` to replace ` System.currentTimeMillis ( ) `
[ core ] fix fire event bug when refresh in data render __EoT__
[ WEEX-632 ] [ Android ] Update jss to fix some bugs __EoT__ https : //issues.apache.org/jira/browse/WEEX-632 [ WEEX-632 ] [ Android ] Update jss to fix some bugs Update jss to fix some bugs Bug : WEEX-632
merge libweexjss.so to appache __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至 Apache 基金会 届时我们会使用新的 GitHub 仓库：https :
[ iOS ] Protect animation module . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至 Apache 基金会 届时我们会使用新的
[ WEEX-631 ] [ Android ] fix ListComponent column gap problem __EoT__
[ WEEX-630 ] [ core ] fix data render dom diff error __EoT__
[ Core ] Build error on iOS . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至 Apache 基金会
Fix leaks crashes 0927 __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至 Apache 基金会 届时我们会使用新的 GitHub 仓库：https :
[ jsfm ] Upgrade js framework to v0.28.0 __EoT__ Upgrade js framework to v0.28.0 with following changes : * Enhance the destroy logic of document and element . ( https : //github.com/apache/incubator-weex/pull/1529 ) * Add more debug logs for vdom operation . ( https : //github.com/apache/incubator-weex/pull/1531 ) * Update the module white-list to latest .
[ WEEX-586 ] [ Android ] Weex Render High Performance Cross Platform Render __EoT__ [ WEEX-586 ] [ Android ] Weex Render High Performance Cross Platform Render
[ iOS ] fix data render in renderview interface __EoT__
[ core ] fix data render bug __EoT__
[ WEEX-622 ] [ iOS ] record jsservice name to context & & modify white scre… __EoT__ - record service name to context , so if exception , we know which service has problem - report white screen error , if createInstane error & & never add view - report contextName
[ iOS ] add render_action_call_native_module.cpp file to sdk __EoT__
[ iOS ] Pass pageURL to external image loader . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至
[ iOS ] Generate build time and time stamp when build . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于
[ iOS ] add js_common_function.cc file to sdk __EoT__
[ WEEX-625 ] [ iOS ] hotpatch jsframework & & support JSFrameworkLoadProtocol __EoT__ hotpatch jsframework & & support JSFrameworkLoadProtocol
[ iOS ] Add getLanguageSync for local , and fix original getLanguage met… __EoT__ …hod . First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . --
[ WEEX-627 ] [ core ] data render support opcode __EoT__
* [ android ] Fix getLanguage __EoT__
[ WEEX-623 ] [ Android ] pageName check and revert interaction time top10 … __EoT__ - before render time , check pagename , if isempty , try set activityname - revert interaction countdown top10 logic - report white screen error if createInstance error
[ WEEX-626 ] [ core ] [ Android ] replace StringCache with JNIEnv : :NewStringUTF __EoT__
[ core ] fix iOS malloc.h not find __EoT__
[ WEEX-585 ] [ iOS ] recycle list bugfix __EoT__ This pr is about fixing some bugs of recycle list . - recycle list may splash when push data . - recycle list can not show list length . - ...
[ WEEX-616 ] [ iOS ] scroller support borderRadius __EoT__ Now , scroller support borderRadius you can try demo here : http : //dotwe.org/vue/f6c6f96361e20fce021d52bb6b89b3ac also , you can try demo : http : //rax.alibaba-inc.com/playground/9fffa56f-0c61-40df-a147-3602aa0541ca
[ Core ] Refactor . Fix memory leak and border pixel scale . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex
use gnustl_static instead of c++_static , reimplement utf16 convert to… __EoT__ … utf8 https : //issues.apache.org/jira/browse/WEEX-621 First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ x ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support .
[ WEEX-624 ] [ Android ] add condition to prevent calling jni method when so or jfm not ready __EoT__
keep pageIndex if pageEnabled seted __EoT__ https : //issues.apache.org/jira/browse/WEEX-619 [ WEEX-619 ] [ Android ] Keep Page index if pageEnabled is enabled Keep Page index if pageEnabled is enabled Bug : WEEX-619
[ jsfm ] Upgrade js framework to v0.28.0 __EoT__ Upgrade js framework to v0.28.0 with following changes : * Enhance the destroy logic of document and element . ( https : //github.com/apache/incubator-weex/pull/1529 ) * Add more debug logs for vdom operation . ( https : //github.com/apache/incubator-weex/pull/1531 ) * Update the module white-list to latest .
[ Core ] Refactor . Adapt for scroller nested in scroller . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于
[ jsfm ] Add more debug logs for vdom operation __EoT__ Notable changes : * Move log level check to ` shared/utils.js ` . * Add more debug logs for * ` createBody ` * ` createElement ` * ` appendChild ` * ` insertAfter ` * ` insertBefore ` * ` removeChild ` * ` addEvent ` * ` removeEvent ` * ` fireEvent ` * ` destroy ` The log level can be controlled by native SDK , and those debug logs will NOT be print in the release version .
[ jsfm ] Enhance the destroy logic of document and element __EoT__ Notable changes : + Recursively destroy all nodes within the ` nodeMap ` while destroying a ducument . + Manually remove all props in ` node.destroy ( ) ` , even if it may not exist . + Tweak code style and eslint .
[ WEEX-615 ] [ iOS ] apm data improvement __EoT__ * [ iOS ] fix fsrender time , report oldFsTime , and newFsTime * [ iOS ] modify interaction time ( ignore count done top10 ) , bad case :2s later addelement * [ iOS ] modify reportErrorKey `` degrade_error '' - > '' degrad_error '' * [ iOS ] report pageName , if not set pagename or url , try use vc name
* [ Android ] Downgrade to h5 if unsatisfiedLinked error happened __EoT__ Fix Crash due to unsatisfiedLinked , downgrade to h5 if unsatisfiedLinked error happened
[ core ] fix setViewPort not valid problem __EoT__
[ Core ] Refactor . Avoid invalid cell/header height . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至
[ WEEX-609 ] [ iOS ] apm monitor logic modify __EoT__ * [ iOS ] add instance id info when exec in globalContext ` WXBridgeContext.m ` * [ iOS ] interactionTime should not calculate rootcomponent
[ WEEX-608 ] [ Android ] apm monitor logic modify __EoT__ * [ Android ] deprece old white screen check logic * [ Android ] set flag to excptionReporter when embed receive exception * [ Android ] check empty sceen by action
[ WEEX-607 ] [ iOS ] [ weex monitor improvement __EoT__ * [ iOS ] rename WXInstanceApm.m - > WXApmForInstance.m * [ iOS ] img size & & write screen & & monitor download faild * [ iOS ] emptyscreen check , bad case fix ( destroy but js not excute ) * [ iOS ] request type add
[ WEEX-606 ] [ Android ] fix monitor data __EoT__ * [ Android ] writescreen check limit stage and 3s js execute time * [ Android ] add writescreen swtich * [ Android ] monitor download failed * [ Android ] when download success , report download stage
[ iOS ] Add page stop event and custom pageSize ability to Scroller __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex
[ WEEX-558 ] [ Android ] Font file url compatible with ' and `` __EoT__ issue : https : //issues.apache.org/jira/browse/WEEX-558 use costumer fontFace like this : `` ` const domModule = weex.requireModule ( 'dom ' ) domModule.addRule ( 'fontFace ' , { 'fontFamily ' : `` iconfont2 '' , 'src ' : `` url ( 'http : //at.alicdn.com/t/font_1469606063_76593.ttf ' ) '' } ) `` ` double quotes is outside for font file url , it will make an error with lint . when set as this , the font face does not work with android : `` ` 'src ' : 'url ( `` http : //at.alicdn.com/t/font_1469606063_76593.ttf '' ) ' `` ` it cause by [ FontDO ] ( https : //github.com/apache/incubator-weex/blob/master/android/sdk/src/main/java/com/taobao/weex/utils/FontDO.java # 76 )
* [ Android ] Fix build problem of apache release __EoT__ Fix build problem of apache release by removing gradle wrapper .
[ iOS ] Fix on iOS9 , text can not be deleted when exceeds maxLength . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support .
[ WEEX-599 ] [ iOS ] add apm record isEnd flag __EoT__ add apm record isEnd flag
[ WEEX-593 ] [ iOS ] image can not show correct borderRadius __EoT__ fix image can not show correct borderRadius
[ iOS ] Avoid exceptionHandler be invoked by self and cause stackoverflow . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex
[ WEEX-598 ] [ iOS ] slider component can not request gesture stoppropagation __EoT__ fix slider component can not request gesture stoppropagation bug you can try demo here http : //rax.alibaba-inc.com/playground/49323390-3a43-4f0e-a169-6f048bd0edb3
Refactorings __EoT__
Ability to add Http status code to Response.success __EoT__ When writing tests using Retrofit , it would be great if there were a way to set the `` success '' Http status code in order to verify functionality of other status codes , like 204 no content .
Small tweaks while doing other work . __EoT__
More accurately name call adapter local list . __EoT__
Bump to latest Jackson to avoid CVE . __EoT__ Closes # 2657
Encapsulate more behavior inside ServiceMethod . __EoT__
Bump Jackson version a bit . __EoT__ This avoids a vulnerability on older 2.7 versions . Figured a minor bump was easier than some arbitrary patch version on 2.7 . 2.9 is latest but I do n't see much reason to `` force '' it . Closes # 2657 .
Do n't conflate downstream disposal with upstream cancel . __EoT__ Since Call instances can be canceled externally , re-using that state for disposed means that some results were not delivered . Closes # 2656 .
Initial JAXB converter factory . __EoT__ We probably want to add options to make it strict , or to change the defaults and make it strict by default and optionally lenient . We can do that in follow-up . This works . https : //github.com/square/retrofit/issues/2277
Handle Errors in OkHttpCall . __EoT__ If an Error is thrown while creating a request , handle it the same as a RuntimeException . Closes # 2507 .
Add Scala Future adapter . __EoT__ Closes # 2517 .
Add Retrofit.Builder.adapterFactories ( ) . __EoT__ Adds a sister API to ` Retrofit.Builder.converterFactories ( ) ` for adapter factories . Follow-up to # 2471 .
Add Retrofit.Builder.converterFactories ( ) . __EoT__ Addresses # 2471 . The default converters are now added in ` Builder.build ( ) ` and removed when copying the existing set into the builder in ` newBuilder ( ) ` .
Single linkable __EoT__ Pretty simple . Makes ` Single ` a javadoc link like the rest of em
Order of attributes in POST request __EoT__ The Amazon S3 REST API requires the attributes in a POST request to be submitted in a specific order ( i.e . the key field needs to go before the file field ) . I understand that the official JSON specification suggests that the order of attributes should not matter in a transmission . However , given the above requirement , can retrofit support a manual , explicit ordering of attributes when putting together a POST request ? Thanks !
Add @ Raw or similiar to avoid convertig body stream to byte [ ] in Response object __EoT__ Hey there , first of all thanks for providing Retrofit ! It 's an amazing framework that impressively simplifies calling REST-APIs ! We use it in one of our server application to communicate with another remote server to download binary data ( i.e . files ) from there using Response as return type for the interface method . Our server operates as a proxy and copies the response.getBody ( ) .in ( ) to the the user requesting resources . This approach works as expected , but has a performance flaw . At the moment Retrofit converts every Response body stream to a byte array ( see RestAdapter.java ) : `` ` java if ( type.equals ( Response.class ) ) { // Read the entire stream and replace with one backed by a byte [ ] response = Utils.readBodyToBytesIfNecessary ( response ) ; if ( methodInfo.isSynchronous ) { return response ; } return new ResponseWrapper ( response , response ) ; } `` ` If you just want to proxy the stream , converting to a byte [ ] first can result
PATCH method support __EoT__ The ` PATCH ` method can be used to only edit some properties of a resource , instead of overwriting it as ` PUT ` does . Unfortunately , Retrofit does n't offer support for ` PATCH ` requests . Are there any plans of adding this request method ?
Add set `` encode '' property to GsonConverter __EoT__ Could be great if the GsonConverter object had the property `` encode '' instead using UTF-8 hardcoded string . This property will be use in toBody method and also in charset property inside mimeType .
NPE when Content-Type header missing __EoT__ I 'm getting an NPE when debug is on and I receive a server response without a ` Content-Type ` header . This response `` ` < -- - HTTP 403 https : //route53.amazonaws.com/hostedzone/ABCDEF/rrset ( 96ms ) null : HTTP/1.1 403 Forbidden Date : Mon , 27 May 2013 04:22:07 GMT Content-Length : 152 x-amzn-RequestId : fe46c618-c684-11e2-b977-934c36c18aa7 `` ` Causes this exception : `` ` Caused by : java.lang.NullPointerException : mimeType at retrofit.mime.TypedByteArray. < init > ( TypedByteArray.java:40 ) at retrofit.Utils.readBodyToBytesIfNecessary ( Utils.java:60 ) at retrofit.RestAdapter.logAndReplaceResponse ( RestAdapter.java:345 ) at retrofit.RestAdapter.access $ 1200 ( RestAdapter.java:106 ) at retrofit.RestAdapter $ RestHandler.invokeRequest ( RestAdapter.java:241 ) ... 29 more `` `
Header Parameters __EoT__ I 'd like to be able to set one or more headers . In this case , it is a logout command . I 've also run into this for apis that incorrectly expect ` Content-Type ` sent on GET commands without payload . Ex . `` ` @ DELETE ( `` /Session '' ) void logout ( @ Header @ Name ( `` Auth-Token '' ) String token ) ; `` ` I can write support for this , but wanted to check first if you have other ideas .
Header Parameters __EoT__ I 'd like to be able to set one or more headers . In this case , it is a logout command . I 've also run into this for apis that incorrectly expect ` Content-Type ` sent on GET commands without payload . Ex . `` ` @ DELETE ( `` /Session '' ) void logout ( @ Header @ Name ( `` Auth-Token '' ) String token ) ; `` ` I can write support for this , but wanted to check first if you have other ideas .
Header Parameters __EoT__ I 'd like to be able to set one or more headers . In this case , it is a logout command . I 've also run into this for apis that incorrectly expect ` Content-Type ` sent on GET commands without payload . Ex . `` ` @ DELETE ( `` /Session '' ) void logout ( @ Header @ Name ( `` Auth-Token '' ) String token ) ; `` ` I can write support for this , but wanted to check first if you have other ideas .
HUAWEI mLastSrvView leak happens on M __EoT__ See https : //github.com/square/leakcanary/issues/1094 # issuecomment-430948602
add inspector for window reachability __EoT__
Fix crash when leaktrace size is 1 __EoT__ Fixes # 1075
Exclude AccessibilityNodeInfo on API 27 __EoT__ Fixes # 1070
Updating template : plz latest + cleanup __EoT__
cleanups __EoT__
Fixed crash of DisplayLeakService when AnalysisReport is too big __EoT__ Fixes Issues # 1067 and most likely # 1049 . When ` AnalysisReport ` is too big to fit ` Binder ` transaction , ` DisplayLeakService ` can not start . To fix this problem LeakCanary now saving AnalysisResult on the storage and loads it in ` DisplayLeakService ` . Also , added button `` Grow ` AnalysisReport ` to more than 1MB '' to sample app to simulate such leak . It simply makes very long ( 1000 entries ) reference chain which leads to ` AnalysisReport ` object size more than 1MB ( Binder buffer size is 1MB ) .
Always enable DisplayLeakActivity when leakcanary is enabled __EoT__ Feedback shows that people get confused when the icon goes missing because no leak has been found yet . They want to be able to go , see there 's nothing leaking , and be reassured . Fixes # 1115
Fix LeakCanary toasting __EoT__ - Prior attempts to get it to work with the application context turned out to be buggy . - This makes LeakCanary use whatever the current resumed activity is , if any . - If there is no resumed activity , then the toast is n't displayed . This supersedes # 1080
fix the wrong word __EoT__
Extended TextView # mLastHoveredView exclusion to O . __EoT__ mLastHoveredView is still leaking on Samsung devices with Marshmallow and Nougat ( EDIT : also on Oreo ) . Tested on Galaxy Tab A 10.1 ( SM-P580 ) and Galaxy Tab S3 ( SM-T825 ) . CLA signed .
Add nullability annotations to public API __EoT__ Adds nullability annotations to the public API in the ` leakcanary-android ` module , which improves Kotlin support . This changeset alters : - Android Gradle Plugin bumped to ` 3.2.0-rc03 ` ( the ` UnknownNullness ` lint inspection was only introduced in ` 3.2.0-alpha10 ` ) - Enables [ Kotlin interoperability checks ] ( https : //android.github.io/kotlin-guides/interop.html # command-line-builds ) for the ` leakcanary-android ` module Points of discussion : - I 've avoided adding annotations to the other android library modules which have public classes , as that would require adding the support library , and I 'm unfamiliar with the project 's architecture . If that 's not an issue , I can update the PR to annotate those classes also - I 've avoided making ` UnknownNullness ` fail the build , as the plan was only to add annotations to the public API surface - The Gradle plugin version might need to be bumped to ` v3.2.0 ` once that 's released To test this change I auto-converted the sample project to Kotlin and ensured that passing null to public methods on the ` LeakCanary ` class resulted
Exclude ViewLocationHolder # mRoot in Android on P+ __EoT__ Bug report : https : //issuetracker.google.com/issues/112792715 Introduced in https : //github.com/aosp-mirror/platform_frameworks_base/commit/86b326012813f09d8f1de7d6d26c986a909de894 Resolves # 1081
Add the FOREGROUND_SERVICE permission for Android P __EoT__ Per https : //developer.android.com/preview/behavior-changes # fg-svc , this permission is now required to start a foreground service . Otherwise , it crashes .
Use a foreground Service so that the background work can run on O+ __EoT__ Fixes issue # 846 Note , I still want to test this further , but this fix should work . Thanks !
InputMethodManager leak , references android.view.inputmethod.InputMethodManager.mLastSrvView __EoT__ i think this can be added into ` INPUT_METHOD_MANAGER__SERVED_VIEW ` ` AndroidExcludedRefs ` `` ` * com.xxx.xxxActivity has leaked : * GC ROOT android.view.inputmethod.InputMethodManager $ ControlledInputConnectionWrapper.mParentInputMethodManager * references android.view.inputmethod.InputMethodManager.mLastSrvView * references com.android.internal.policy.DecorView.mContentRoot * references android.widget.LinearLayout.mContext * leaks com.xxx.xxxActivity instance * Retaining : 5.2 KB . * Reference Key : 205ef3bd-e25c-4ef0-bf11-a3376570a444 * Device : HUAWEI HUAWEI VTR-AL00 VTR-AL00 * Android Version : 7.0 API : 24 LeakCanary : 1.5.4 74837f0 * Durations : watch=5007ms , gc=174ms , heap dump=1693ms , analysis=193453ms `` `
Bug report : HahaHelper.extendsThread ( ClassObj clazz ) can not get Inherited classes __EoT__ The `` clazz '' should be replace by parentClass . static boolean extendsThread ( ClassObj clazz ) { boolean extendsThread = false ; ClassObj parentClass = clazz ; while ( parentClass.getSuperClassObj ( ) ! = null ) { if ( **_clazz_**.getClassName ( ) .equals ( Thread.class.getName ( ) ) ) { extendsThread = true ; break ; } parentClass = parentClass.getSuperClassObj ( ) ; } return extendsThread ; }
Replace icon with an adaptative one __EoT__ I created an adaptative icon so it looks better on recent Android versions . I have included the sketch file . Here 's what it looks like ! [ leak_canary_icon ] ( https : //user-images.githubusercontent.com/517070/35509052-f8c28c2c-04f2-11e8-8a8f-ac6d8d9e2633.gif ) We need to remember to update the [ ** '' Icon and label '' ** ] ( https : //github.com/square/leakcanary/wiki/Customizing-LeakCanary # icon-and-label ) section in the Wiki to reflect the change .
Memory leak caused by Samsung 's SemEmergencyManager __EoT__ Discussion started in # 740
Do n't rely on the no-op library in unit tests : it only worked because we got classpath-lucky __EoT__ lmk if this seems right and I 'll update the README to link to the sample fixes # 807
Do n't rely on the no-op library in unit tests : it only worked because we got classpath-lucky __EoT__ lmk if this seems right and I 'll update the README to link to the sample fixes # 807
Leak in UserManager __EoT__ Leak is the following one : In com.jeuxvideo:3.0-debug:56 . - com.jeuxvideo.ui.activity.BlockActivity has leaked : - GC ROOT static android.os.UserManager.sInstance - references android.os.UserManager.mContext - references android.app.ContextImpl.mOuterContext - leaks com.jeuxvideo.ui.activity.BlockActivity instance - Reference Key : 6d26c0d6-9b26-453c-9f99-917f7ef23896 - Device : LGE google Nexus 4 occam - Android Version : 5.0 API : 21 - Durations : watch=5100ms , gc=242ms , heap dump=8939ms , analysis=42898ms I think this happened after I came back from sharing a content .
EditText Blink causes memory leak in AlertDialog and DialogFragment __EoT__ See AOSP issue 188551 : https : //code.google.com/p/android/issues/detail ? id=188551 Can be avoided by calling setCursorVisible ( false ) in the dismiss ( ) method of the Dialog .
resource name causes a gradle build error when using 1.3.0-beta1 __EoT__ Gradle fails to build when using the newly released gradle:1.3.0-beta1 tools dependency . The error occurs on 'mergeDebugResources ' for the resource located at /res/drawable-hdpi/__leak_canary_icon.png with the following `` Error : File-based resource names must start with a lowercase letter '' .
EditText Blink causes memory leak in AlertDialog and DialogFragment __EoT__ See AOSP issue 188551 : https : //code.google.com/p/android/issues/detail ? id=188551 Can be avoided by calling setCursorVisible ( false ) in the dismiss ( ) method of the Dialog .
LeakCanary in Unit Test Artifact __EoT__ Hi . I got NPE when i run test using **Unit Test build variants** . Do you have any best practice to do this ? `` ` java.lang.NullPointerException at com.squareup.leakcanary.internal.LeakCanaryInternals.isInServiceProcess ( LeakCanaryInternals.java:130 ) at com.squareup.leakcanary.LeakCanary.isInAnalyzerProcess ( LeakCanary.java:146 ) at com.squareup.leakcanary.LeakCanary.install ( LeakCanary.java:48 ) at com.squareup.leakcanary.LeakCanary.install ( LeakCanary.java:37 ) at com.vidio.android.VidioApplication.onCreate ( VidioApplication.java:18 ) at org.robolectric.internal.ParallelUniverse.setUpApplicationState ( ParallelUniverse.java:131 ) at org.robolectric.RobolectricTestRunner.setUpApplicationState ( RobolectricTestRunner.java:431 ) at org.robolectric.RobolectricTestRunner $ 2.evaluate ( RobolectricTestRunner.java:224 ) at org.junit.runners.ParentRunner.runLeaf ( ParentRunner.java:325 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:78 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:57 ) at org.junit.runners.ParentRunner $ 3.run ( ParentRunner.java:290 ) at org.junit.runners.ParentRunner $ 1.schedule ( ParentRunner.java:71 ) at org.junit.runners.ParentRunner.runChildren ( ParentRunner.java:288 ) at org.junit.runners.ParentRunner.access $ 000 ( ParentRunner.java:58 ) at org.junit.runners.ParentRunner $ 2.evaluate ( ParentRunner.java:268 ) at org.robolectric.RobolectricTestRunner $ 1.evaluate ( RobolectricTestRunner.java:168 ) at org.junit.runners.ParentRunner.run ( ParentRunner.java:363 ) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass ( JUnitTestClassExecuter.java:86 ) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute ( JUnitTestClassExecuter.java:49 ) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass ( JUnitTestClassProcessor.java:69 ) at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass ( SuiteTestClassProcessor.java:48 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:497 ) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch ( ReflectionDispatch.java:35 ) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch ( ReflectionDispatch.java:24 ) at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch ( ContextClassLoaderDispatch.java:32 ) at org.gradle.messaging.dispatch.ProxyDispatchAdapter $ DispatchingInvocationHandler.invoke ( ProxyDispatchAdapter.java:93 ) at
Add special case to ignore Binder leaks __EoT__ The Android OS will retain a reference to ` Binder ` after a ` Service ` is unbound . This adds logic to ignore any paths where a ` Binder ` is at a root . We can not simply add ` Binder ` to ` ExcludedRef ` because there could be legitimate leaks where the ` Binder ` is n't the root .
# 268 Make AndroidWatchExecutor delay configurable __EoT__ This PR allows library clients to configure the time until a reference is considered a memory leak just as @ pyricau suggested in his latest message in # 268 .
FATAL EXCEPTION : LeakCanary-Heap-Dump Failure during heap dump ; check log output for details __EoT__ `` ` FATAL EXCEPTION : LeakCanary-Heap-Dump java.lang.RuntimeException : Failure during heap dump ; check log output for details at dalvik.system.VMDebug.dumpHprofData ( Native Method ) at dalvik.system.VMDebug.dumpHprofData ( VMDebug.java:305 ) at android.os.Debug.dumpHprofData ( Debug.java:948 ) at com.squareup.leakcanary.AndroidHeapDumper.dumpHeap ( AndroidHeapDumper.java:69 ) at com.squareup.leakcanary.RefWatcher.ensureGone ( RefWatcher.java:122 ) at com.squareup.leakcanary.RefWatcher $ 5.run ( RefWatcher.java:103 ) at android.os.Handler.handleCallback ( Handler.java:730 ) at android.os.Handler.dispatchMessage ( Handler.java:92 ) at android.os.Looper.loop ( Looper.java:137 ) at android.os.HandlerThread.run ( HandlerThread.java:61 ) `` `
# 159 Renamed resources leading with `` __ '' __EoT__ Build tools `` 1.3.0 rc1 '' changed the rules for resources . This commit simply removes the lead `` __ '' from the offending resources in the project .
resource name causes a gradle build error when using 1.3.0-beta1 __EoT__ Gradle fails to build when using the newly released gradle:1.3.0-beta1 tools dependency . The error occurs on 'mergeDebugResources ' for the resource located at /res/drawable-hdpi/__leak_canary_icon.png with the following `` Error : File-based resource names must start with a lowercase letter '' .
resource name causes a gradle build error when using 1.3.0-beta1 __EoT__ Gradle fails to build when using the newly released gradle:1.3.0-beta1 tools dependency . The error occurs on 'mergeDebugResources ' for the resource located at /res/drawable-hdpi/__leak_canary_icon.png with the following `` Error : File-based resource names must start with a lowercase letter '' .
Let leakcanary-android-no-op minSDK = 8 to support more device . __EoT__ A lot of APPs still support API Level 8 . I think I would be better to support API Level 8 in ` leakcanary-android-no-op ` .
Add APIs to configure the client 's default call timeout . __EoT__ This is n't independently configured in an interceptor like the other timeouts because it 's already started by the time the interceptors run .
Make the nested BasicAuthInterceptor static __EoT__
Add basic auth interceptor recipe __EoT__ # 4335
Remove colon when scheme missing in builder toString __EoT__
CipherSuite init speedup __EoT__ Refactoring CipherSuite to speed up initialisation . # 4337
Allow incomplete url builder tostring __EoT__ toString is useful for debug even when incomplete
Non Null return types __EoT__ For discussion , this avoids a warning in kotlin clients IIUC . The existing parameter solution does n't work here . `` ` @ javax.annotation.ParametersAreNonnullByDefault package okhttp3 ; `` ` Advice ?
A mechanism for adding non-ASCII headers __EoT__ As suggested in https : //github.com/square/okhttp/issues/4283 # issuecomment-423703475 .
Conscrypt 1.3 with TLSv1.3 __EoT__ Testing of TLS 1.3 with Conscrypt
TLSv13 official __EoT__
okhttp3.internal.http.HttpHeaders # parseChallenges does not handle authentication header with only scheme __EoT__ ~If you e. g. have ` Proxy-Authenticate : Basic ` which is a valid value , the method will not work properly , because of ` int index = header.indexOf ( ' ' ) ; if ( index == -1 ) continue ; ` , which means the method only works properly if there is a space in the header value.~ ( For ` Basic ` auth ` realm ` indeed is required ) This also breaks ` okhttp3.Response # challenges ` and ` okhttp3.JavaNetAuthenticator # authenticate ` .
MockWebserver fix for IPv6 addresses __EoT__ surround IPv6 addresses with [ ] to make a valid URI https : //github.com/square/okhttp/issues/4225
Shutdown MockWebServer after response __EoT__ New SocketPolicy to shutdown MockWebServer after response . More details in # 4227
NullPointerException if default ProxySelector is null __EoT__ Here the test : `` ` java private final MockWebServer server = new MockWebServer ( ) ; @ Before public void setUp ( ) throws Exception { server.start ( ) ; } @ After public void tearDown ( ) throws Exception { server.shutdown ( ) ; } @ Test public void nullDefaultProxySelector ( ) throws Exception { server.enqueue ( new MockResponse ( ) .setBody ( `` abc '' ) ) ; ProxySelector.setDefault ( null ) ; OkHttpClient client = defaultClient ( ) .newBuilder ( ) .build ( ) ; Request request = new Request.Builder ( ) .url ( server.url ( `` / '' ) ) .build ( ) ; Response response = client.newCall ( request ) .execute ( ) ; assertEquals ( `` abc '' , response.body ( ) .string ( ) ) ; } `` ` And the result : `` ` java Aug 25 , 2018 4:36:39 PM okhttp3.mockwebserver.MockWebServer $ 2 execute INFORMATION : MockWebServer [ 57774 ] starting to accept connections Aug 25 , 2018 4:36:39 PM okhttp3.mockwebserver.MockWebServer $ 2 acceptConnections INFORMATION : MockWebServer [ 57774 ] done accepting connections : socket closed Aug 25 , 2018 4:36:39 PM okhttp3.SocksProxy
Test for file not found in post body __EoT__ https : //github.com/square/okhttp/issues/4135
support java 8 u181 __EoT__ Nothing obvious in http : //www.oracle.com/technetwork/java/javase/2col/8u181-bugfixes-4479408.html that will require a new release One SSL change for https : //bugs.java.com/view_bug.do ? bug_id=JDK-8170035 , but does n't affect alpn-boot classes
Possible JDK 11 fixes __EoT__ Putting this up for discussion and reference , I 'll raise this as a JDK bug and see fi the change is deliberate
Avoid conscrypt dep __EoT__
Update Headers.addAll doc . __EoT__
Add headerBuilder.addAll ( headers ) method __EoT__ For quickly adding common headers https : //github.com/square/okhttp/issues/3923
HTTP Logging interceptor breaks EventListener __EoT__ As reported here https : //github.com/square/okhttp/issues/4094
Android 4 and Java 1.7 prefer TLSv1.2 provider __EoT__ Public ( unpaid version ) of Java 1.7u80 supports TLSv1.2 only via a different provider . Newer paid version u95 support a system property ( jdk.tls.client.protocols ) , and u131 defaults to supporting TLSv1.2 https : //www.java.com/en/configure_crypto.html # enableTLSv1_2
Update cloudflare GET example __EoT__ https : //developers.cloudflare.com/1.1.1.1/dns-over-https/wireformat/
DNS over HTTPS __EoT__ DNS over HTTPS DRAFT-11 implementation https : //github.com/square/okhttp/issues/3969 https : //tools.ietf.org/html/draft-ietf-doh-dns-over-https-11
Additional error checking for SSE __EoT__ @ JakeWharton Not sure where this is at , feel free to ignore this if you have already covered . But kicked the tyres of this with Facebook live video comments feed and 401 errors were coming back as immediate close instead of any sort of error . Also for Kotlin clients , all params were nullable .
Move conscrypt NONE checks internal to Handshake __EoT__ Based on https : //github.com/square/okhttp/issues/3973 , looks like this can still happen
Add EventSource type and first HTTP test . __EoT__
Make toString output match field name __EoT__
Fix another Error Prone bad timezone error __EoT__
Ensure discarded HTTP/2 data frames free flow-control space . __EoT__ https : //github.com/square/okhttp/issues/3915
Use header delay instead of body delay before status line __EoT__ As noted in https : //github.com/square/okhttp/issues/4006 header delay is ignored for HTTP 1.1 responses , instead body delay is used twice .
Use header delay instead of body delay before status line __EoT__ As noted in https : //github.com/square/okhttp/issues/4006 header delay is ignored for HTTP 1.1 responses , instead body delay is used twice .
Confirm we handle too many leading zeros in IPv6 addresses __EoT__
Release the connection when an Authenticator throws an exception . __EoT__ Closes : https : //github.com/square/okhttp/issues/3872
Fixed flaky CallTest.cancelImmediatelyAfterEnqueue . __EoT__ Closes : https : //github.com/square/okhttp/issues/3854
Do not alter connection flow-control window on SETTINGS frame . __EoT__ This might have been a difference between SPDY and HTTP/2 . Reviewing the HTTP/2 spec , only a WINDOWS_UPDATE frame can change the flow-control window for a connection .
OkHttpClient.cache ( ) is nullable . __EoT__
Restricted ciphers __EoT__ new restricted ciphers spec and one additional supported cipher
Avoid flaky test using pushExecutor after shutdown __EoT__
Readme : Update version , add ProGuard for Conscrypt __EoT__ For OkHttp 3.10.0
ConscryptPlatform platform should not globally configure Conscrypt.setUseEngineSocketByDefault __EoT__ What kind of issue is this ? - [ x ] Bug report . ` ConscryptPlatform.buildIfSupported ( ) ` globally sets ` Conscrypt.setUseEngineSocketByDefault ( true ) ` , which causes HttpUrlConnections used across the jvm to behave differently ( connections external to okhttp , okhttp itself works fine ) . In my case I 'm seeing socket timeouts causing tests to fail where there are n't problems with ` setUseEngineSocketByDefault ` disabled . Proposed Fix : We can invoke ` Conscrypt.setUseEngineSocket ( SSLSocketFactory , true ) ` on the ` SSLSocketFactory ` instance rather than setting global configuration .
gh-1019 : Implemented prior knowledge approach to h2c __EoT__ Needs a unit test , but I wanted to get the idea out there of how easy this _could_ be . An Address 's List < Protocol > comes from the initial configuration . If someone specifies the H2C protocol in that list , then we assume prior knowledge since it requires users to specify the protocol in their configuration . I tried to wire a boolean attribute through the constructor chain , but that got really gross . This seemed like an easier approach with a lot fewer changes in code .
Dont System.exit the test runner __EoT__ Blame any uncaught exceptions on the last test to run
Release writer threads when the connection is shut down . __EoT__ Otherwise these threads stick around forever . Yikes .
Unexpected pongs should n't interfere with our ping interval . __EoT__ Rather than tracking how many have been received , just track whether we're still awaiting a reply .
Fail HTTP/2 connections if the pong is not received . __EoT__ This removes the Ping abstraction from our http2 package . This was written as if it were a public API , but never exposed to any callers but tests . Removing it makes it easier to lock down how pings are used . This also removes the NullServer class , replacing it with a new SocketPolicy on MockWebServer . The new SocketPolicy , STALL_SOCKET_AT_START , allows us to do TLS and negotiate an HTTP/2 connection without actually building a proper Http2Connection and without responding to pings . The behavior in HTTP/2 connections is modeled after our behavior in web sockets . We count outgoing pings , incoming pongs , and confirm that the pongs are keeping up . If later we make this policy more sophisticated we can track the changes in both places . Closes : https : //github.com/square/okhttp/issues/3261
First step towards HTTP/2 automatic pings . __EoT__ This changes the executor services in HTTP/2 connection to split up listener executors ( of which there may be many threads ) from writer executors ( of which there is one per connection ) . This adds a scheduled executor job to send pings on an interval . We do n't yet fail the connection if pongs are not received . For follow-up there 's some work to remove exising APIs to send pings through the HTTP/2 APIs . These are unused and make it awkard to confirm that only the automatic pings are being replied to . See https : //github.com/square/okhttp/issues/3261
Fix swapped name and value tests . __EoT__ ` ofMapRejectsNullCharInName ` was checking for null in the value , and ` ofMapRejectsNullCharInValue ` was checking for null in the name .
First step towards HTTP/2 automatic pings . __EoT__ This changes the executor services in HTTP/2 connection to split up listener executors ( of which there may be many threads ) from writer executors ( of which there is one per connection ) . This adds a scheduled executor job to send pings on an interval . We do n't yet fail the connection if pongs are not received . For follow-up there 's some work to remove exising APIs to send pings through the HTTP/2 APIs . These are unused and make it awkard to confirm that only the automatic pings are being replied to . See https : //github.com/square/okhttp/issues/3261
Fix swapped name and value tests . __EoT__ ` ofMapRejectsNullCharInName ` was checking for null in the value , and ` ofMapRejectsNullCharInValue ` was checking for null in the name .
Fix Builder.proxy doc __EoT__ Should have been part of 38d570a
Fail web sockets if the pong is not received __EoT__ There are several options for when to expect the pong response . I've chosen to overload the ping interval . This seems reasonable because the ping interval is the maximum amount of time that should elapse before a connection failure is detected . Closes : https : //github.com/square/okhttp/issues/3227
Do n't hold a lock on the connection when writing settings . __EoT__ This breaks our concurrency rules . Fortunately it 's only academic ; only MockWebServer ever writes settings , and it only does so in very specialized tests .
The EventListener API still is n't final __EoT__
Encode more characters when using addQueryParameter ( ) . __EoT__ Though it 's good for OkHttp to retain the user 's provided encoding , we should be encoding more characters than we are when the user provides us with unencoded data . Closes : https : //github.com/square/okhttp/issues/3235
More lenient test involving logging __EoT__ Results in https : //github.com/square/okhttp/pull/3857 showed that logging can be affected by prior state .
Add doc for Request.Builder.removeHeader . __EoT__ to note multiple headers may be removed .
Handle 100 ( Continue ) HTTP response gracefully regardless of whether it was requested/expected __EoT__ I created a failing test for issue # 3628 ( first commit ) - or rather changed the previous ` serverRespondsWithUnsolicited100Continue ` test that asserts that the 100 response would just be returned to the user . I also tried to implement a solution , i.e . make OkHttp send the response body again if a response with code 100 was received ( second commit ) . When testing it with a real-world server in our app where the problem previously occurred , the issue also seems to be fixed . **However** , after the request where the server sent the 100 response , the next HTTP request ( in this case it 's a GET ) returns a 403 Forbidden error . I suspect this has something to do with the HTTP connection being in an inconsistent state so that it can not be reused . But I do n't really understand why this should be the case here ( the client has sent the request body and read the response , so the request should in principle be done , right ? )
Conscrypt Support __EoT__ Not necessarily for landing , testing what would be required . At minimum waiting for a final 1.0.0 release would be prudent . 5 test bugs still to resolve , not yet clear if they are in okhttp main , okhttp test assumptions or conscrypt . Any feedback welcome . Tested with JDK8 without alpn-boot in the bootclasspath `` ` 16:46 $ ./oksocial -i -- debug https : //graph.facebook.com/robots.txt /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/bin/java 16:46:36.433 Platform : ConscryptPlatform ... protocol h2 tls TLS_1_2 cipher TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 HTTP/1.1 200 `` ` I 'm getting an error when shutting down the client , but I suspect that could be a conscrypt issue .
Transfer to/from FileChannel directly from Buffer . __EoT__
Use UnsafeCursor to XOR web socket data . __EoT__
Move MockWebServer 's internal package to not collide with OkHttp 's . __EoT__ Hoping this may prevent problems with the Java Platform Module System .
Build javadoc and source jars in normal build __EoT__ Build javadoc and sources in normal build for travis instead of waiting for post build script
fix javadoc link __EoT__ Before `` ` [ ERROR ] /Users/yschimke/workspace/okhttp/okhttp/src/main/java/okhttp3/Credentials.java:29 : warning : no @ param for username [ ERROR ] public static String basic ( String username , String password ) { [ ERROR ] ^ [ ERROR ] /Users/yschimke/workspace/okhttp/okhttp/src/main/java/okhttp3/Protocol.java:99 : error : incorrect use of inline tag [ ERROR ] * @ link https : //www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml [ ERROR ] ^ [ ERROR ] [ ERROR ] Command line was : /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/bin/javadoc @ options @ packages [ ERROR ] [ ERROR ] Refer to the generated Javadoc files in '/Users/yschimke/workspace/okhttp/okhttp/target/apidocs ' dir . `` ` After `` ` [ WARNING ] /Users/yschimke/workspace/okhttp/okhttp/src/main/java/okhttp3/Credentials.java:29 : warning : no @ param for username [ WARNING ] public static String basic ( String username , String password ) { [ WARNING ] ^ [ INFO ] Building jar : /Users/yschimke/workspace/okhttp/okhttp/target/okhttp-3.10.0-SNAPSHOT-javadoc.jar `` `
Update deploy_snapshot.sh to compile tests and Version.java but not run __EoT__
Check for invalid index to avoid IOOBE __EoT__ Avoid any externally noticeable RuntimeExceptions due to bad server data
Use manifest entry for java 9 module name __EoT__
Build Provider through the Platform __EoT__ The SSL Provider may not always be the default one e.g . for Android ( GMS ) or Conscrypt , so move this logic in to the internal Provider API .
Reset stream after a rollover __EoT__
Log gzipped bodies when HttpLoggingInterceptor is used as a NetworkInterceptor __EoT__ Makes HttpLoggingInterceptor decompress and log the body of a response which is gzip encoded when used as a networkInterceptor ( where previously it just logged that an encoded body was seen ) . This is useful in the case where you want to log both any redirects which occur during the call and the response bodies . Fixes issue # 3780 ( My first time touching any of the okio stuff directly - very happy to hear if I 've missed a better way to do something )
Add new JDK versions __EoT__
Do not count web sockets toward per-host limit . __EoT__ Closes # 3801 .
Mark some EventListener parameters as non-null . __EoT__ These look like accidents , but it 's very possible I missed some context on why these were nullable .
Rename userName parameter to username in Credentials __EoT__
OkHostnameVerifier : Do n't fall back to CN verification . __EoT__ The use of Common Name was deprecated in RFC 2818 ( May 2000 ) , section 3.1 : > Although the use of the Common Name is existing practice , it is > deprecated and Certification Authorities are encouraged to use the > dNSName instead . In 2017 , Chrome 58 , Firefox 48 , and Opera 45 web browsers removed this fallback , with Chrome leaving it configurable for enterprise deployments ( see https : //www.chromestatus.com/feature/4981025180483584 ) . Android is removing it in http : //r.android.com/581382 .
Define all HTTP2 error codes __EoT__ None
Retry-After support __EoT__ Two effective changes - Support for 503 , with 0 Retry-After meaning retry automatically - Check with 408 , and do n't do automatic retry if there is a delay
Settings id is unsigned short __EoT__ settings is an unsigned short , no observable external change but useful if debugging with experimental settings . https : //http2.github.io/http2-spec/ # rfc.section.11.3.p.1
avoid using invalid sessions __EoT__ These checks are a bit redundant , and originally came from the conscrypt branch . We should avoid using the session if there was a failure . I think I 'm checking effectively the same thing three times .
improve timeout documentation __EoT__
Document max websocket buffer __EoT__
Update to new Gradle dependency configurations __EoT__ Signed-off-by : shaishavgandhi05 < shaishgandhi @ gmail.com >
Temp Testing : WebSocket close __EoT__
Missing @ Nullable __EoT__ Just got a NPE from kotlin : )
304 Not Modified overrides Content-Encoding and breaks cache __EoT__ One of our clients uses the android version of okhttp and runs into the following issue : Our api used to respond the content without gzip . The response is cached on the clients with corresponding etags . Now our api returns the content with `` Content-Encoding : gzip '' , even in case of 304 Not Modified . okhttp fails with : `` ` java.io.EOFException at okio.RealBufferedSource.require ( RealBufferedSource.java:60 ) at okio.GzipSource.consumeHeader ( GzipSource.java:114 ) at okio.GzipSource.read ( GzipSource.java:73 ) at okio.RealBufferedSource.request ( RealBufferedSource.java:67 ) at okio.RealBufferedSource.rangeEquals ( RealBufferedSource.java:408 ) at okio.RealBufferedSource.rangeEquals ( RealBufferedSource.java:392 ) at okhttp3.internal.Util.bomAwareCharset ( Util.java:449 ) at okhttp3.ResponseBody.string ( ResponseBody.java:174 ) at okhttp3.CacheTest.previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding ( CacheTest.java:1048 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:483 ) at org.junit.runners.model.FrameworkMethod $ 1.runReflectiveCall ( FrameworkMethod.java:50 ) at org.junit.internal.runners.model.ReflectiveCallable.run ( ReflectiveCallable.java:12 ) at org.junit.runners.model.FrameworkMethod.invokeExplosively ( FrameworkMethod.java:47 ) at org.junit.internal.runners.statements.InvokeMethod.evaluate ( InvokeMethod.java:17 ) at org.junit.internal.runners.statements.RunBefores.evaluate ( RunBefores.java:26 ) at org.junit.internal.runners.statements.RunAfters.evaluate ( RunAfters.java:27 ) at okhttp3.internal.io.InMemoryFileSystem $ 1.evaluate ( InMemoryFileSystem.java:45 ) at org.junit.rules.ExternalResource $ 1.evaluate ( ExternalResource.java:48 ) at org.junit.rules.ExternalResource $ 1.evaluate ( ExternalResource.java:48 ) at org.junit.rules.RunRules.evaluate ( RunRules.java:20 ) at
Assertion error super careful __EoT__ This ca n't happen but obviously does . Be super tolerant as we want to always get the root cause on these dodgy phone JVMs . https : //github.com/square/okhttp/issues/3595 # issuecomment-345655811
Add workaround for https : //issuetracker.google.com/issues/63649622 __EoT__ This fixes # 3438
256kB header limit __EoT__ Two main goals - Do n't allow a malicious server to flood a client - Turn these hangs into clear failures , e.g . `` no header line received within X characters : content starting 'XXXXXXXXX ' ''
Platform cleanup - move trust manager building internal __EoT__
Fix some strict Javadoc HTML rules in EventListener __EoT__
Add a prerelease warning to EventListener __EoT__
Add 'of ' to Connection JavaDoc . __EoT__ Small typo in JavaDoc . Fixing causes a bit of line overflow .
Add tests to demonstrate events bugs __EoT__
Close all Response in samples __EoT__
The WebSocketWriter is single-threaded . __EoT__ We were synchronizing to permit multiple writer threads . But that was a carry-over from the previous design where we supported multiple writer threads . With the current implementation only one thread writes at a time . This synchronization was not necessary .
Fix a race in WebSocketHttpTest . __EoT__ We were assuming on a client failure the server would n't have any further events . But it will get a failure if we give it a moment . This was causing some test flakiness .
Do n't report connectionAcquired until actually connected . __EoT__ Currently our implementation acquires the connection early so that we have something to close if the call is canceled . Event listeners are simpler if they only get a connectionAcquired event once the connection has been actually established .
Recover from an already-allocated connection that restricts new streams . __EoT__ This is an edge case that can occur with HTTP/2 . Since multiple requests use the same connection , it 's possible for one request to flag the connection as bad during a follow-up request . https : //github.com/square/okhttp/issues/3521
Fix MockWebServer handling of 'Expect : 100 Continue ' __EoT__ Previously we 'd skip the request body unless the socket policy was EXPECT_CONTINUE . Closes : https : //github.com/square/okhttp/issues/3498
Omit the message from MockWebServer 's HTTP/2 : status header __EoT__ This was a bug carried over from SPDY . Closes : https : //github.com/square/okhttp/issues/3484
Update some comments to point at current RFCs __EoT__ https : //github.com/square/okhttp/issues/930
Crash early if any interceptor is null . __EoT__ Closes : https : //github.com/square/okhttp/issues/3514
New API , Chain.call ( ) returns the in-flight call . __EoT__ Interceptors could use this to detect if the call has been canceled , or cancel the call , or do other things .
Do n't log a protocol when it is unknown . __EoT__ Closes : https : //github.com/square/okhttp/issues/3395
Do n't call callEnd until after the responseBody is done __EoT__
Do n't fire events for Web Sockets . __EoT__ We probably want to support this , but at the moment it is n't yet tested . Turn it off until we get something we really like .
Move all failures into connectFailed and callFailed . __EoT__ I think applications might be simple by tracking successful events separately from failure events .
IOException instead of Throwable in EventListener API __EoT__
Add missing fail ( ) to RealWebSocketTest __EoT__
More debug for possible but unlikely assertion failures __EoT__ Excluding any *impossible* scenarios - retain root cause to aid users in debugging without raising an issue .
Remove WebSocket API support for optional close code __EoT__ close ( 0 , null ) still supported internally on WebSocketWriter.close , but no longer supported on public API .
Rename fetchStart/fetchEnd to callStart/callEnd . __EoT__
Allow using a charset other than UTF-8 for creating urlencoded form bodies . __EoT__ This is useful when accessing a web server you do n't control which receives form data encoded in a charset other than UTF-8 ( e.g . ISO-8859-1 ) . To use this you pass an encoding to FormBody.Builder constructor . The constructor is used so it 's clear you should n't switch encodings in the middle of building a form body . The result is undefined is a character can not be encoded in the specified charset ( as the result of Java 's String.getBytes ( charset ) is also undefined in that case .
Test event listeners on request body failures __EoT__
minor cleanup of EventListener formatting __EoT__ Follow up from comments on reviews
Update JavaDoc for WebSocketListener __EoT__
Handle h2 vs http/1.1 event ordering differences __EoT__
Event docs __EoT__
Mark remaining @ Nullable arguments in EventListener . __EoT__
Honor retryOnConnectionFailure on a client request timeout . __EoT__ Also limit the number of retry attempts . This functionality is consistent with how Chrome handles 408 's presently . Closes : https : //github.com/square/okhttp/issues/3483
Complete EventListener __EoT__ Call all methods in EventListener . Adds proxy to connectEnd to allow matching to start event unambiguously . Test EventListener fails fast for unmatched end event . Make RecordingEventListener a top level class . n.b . Ordering of ResponseBodyEvent needs to be addressed in another PR . Currently it can be delayed by client not consuming output , even if all bytes have been read off the wire .
Check for DSP to enable ALPN . __EoT__ Checks to see if DSP is present . If it is , ALPN can be used on Android 4.x devices which facilitates HTTP/2 use . Addresses # 3485
Travis : Remove the duplicate addons directive __EoT__
JDK 8u141 & 8u144 Compatibility __EoT__ Per [ this comment ] ( https : //github.com/jetty-project/jetty-alpn/commit/d58174d8924eda832f22606d68abaf879f4553fa # commitcomment-23304619 ) & reply from @ sbordet , pom.xml was modified for jdk8u141 , and tests succeeded . An update today to 8u144 and subsequent test with u144 's profile also successfully tested . My completed CLA form was submitted about five minutes ago .
Fill out documentation for EventListener __EoT__ Fill out documentation clearing up the semantics of the EventListener API Things to call out - I 've defined fetchStart/End to be from enqueue/execute to caller closing the Response body . - There is no easy hook in request/response ( Header|Body ) ( Start|End ) except implicit ordering . All useful classes e.g . StreamAllocation are internal . - There is no event to signify when OkHttp really starts processing , or has handed off the response to the caller .
Consider all routes when looking for candidate coalesced connections . __EoT__ Previously we 'd only look at one route at a time . If DNS returned results in random order it would lower our chances of finding a coalesced connection . Now we consider all routes at once which hopefully improves our chances .
Added new method ConnectTimeout ( ) on Interceptor.Chain __EoT__
Fix ` response ` parameter nullability __EoT__
Add support for connect start/end events . __EoT__ I 've altered the signatures of the connect start and end methods . Notably : - Changed from ` InetAddress ` and ` port ` to ` InetSocketAddress ` . Was just easier to pull this off the route , but do n't have strong feelings on this one . - Add ` Proxy ` to connectStart . I thought this might be useful for people using proxies . - Changed to use ` Protocol ` on connectEnd . This is already a public type and felt easier to work with .
Add missing test for MockResponse setHeaders __EoT__ Discovered missing test while looking at # 2512
New method , withReadTimeout ( ) , on Interceptor.Chain __EoT__
Avoid android specific code for TrustRootIndex __EoT__ Split out Android TrustRootIndex into AndroidPlatform only code , avoid executing on other platforms
NetworkSecurityPolicy is not honored on Android API 23 __EoT__ I tried to block cleartext HTTP requests from my app by setting ` usesCleartextTraffic ` in my manifest file . When I set ` android : usesCleartextTraffic= '' false '' ` , the ` isCleartextTrafficPermitted ( ) ` function in Android 's ` NetworkSecurityPolicy ` is returning ` false ` as expected . However , as I use OKHTTP in my application , HTTP calls are _not_ blocked with this configuration . I looked into OKHTTP 's code . The problem seems to have been introduced in this PR : https : //github.com/square/okhttp/pull/2686 . As of that PR , ` AndroidPlatform.java ` tries to call ` isCleartextTrafficPermitted ( ) ` with a string argument ( [ this spot ] ( https : //github.com/square/okhttp/blob/parent-3.7.0/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java # L155 ) ) , even though passing an argument is only supported as of API 24 ( see : [ Android 's docs ] ( https : //developer.android.com/reference/android/security/NetworkSecurityPolicy.html ) ) . It then throws ` ClassNotFoundException ` , goes to ` super.isCleartextTrafficPermitted ` , which always returns ` true ` . This means any device on API 23 ( Marshmallow ) would n't be able to block
Javadoc only : Update javadoc on Call to encourage closing the Response… __EoT__ … Response ( and underlying response body )
Bug : Response.body ( ) returning null __EoT__ According to [ this comment ] ( https : //github.com/square/okhttp/blob/6014ab9752cff344a0baf57eb7626d98ca1d3401/okhttp/src/main/java/okhttp3/Response.java # L168 ) the ` Response.body ( ) ` method may never return null . As can be seen in this [ gist ] ( https : //gist.github.com/JemarJones/fcce225de6a4d59025c4011f4f06395b ) , there are cases in which this method can return null . I think this comment either needs to be updated to be more accurate , or the functionality should be updated to match the claim made in the comment .
Exception message from Headers uses Arabic-Indic numerals for character position in some Arabic locales __EoT__ # Problem When there is an invalid character in an HTTP header set via ` Headers.Builder ` , the exception that is thrown indicates the position of the offending character using [ Hindu-Arabic numbers ] ( https : //en.wikipedia.org/wiki/Hindu % E2 % 80 % 93Arabic_numeral_system ) when the locale is ` ar_EG ` , Arabic ( Egypt ) . e.g . ` java.lang.AssertionError : Unexpected char 0x668 at ٢٥ in header value : Custom Http Client 1.0.0/٨ ` Since the exception message itself is in English , I would expect any numeric values to be displayed in Western Arabic numbers . # Details For some locales with the Arabic language , Android will default to displaying numbers using Arabic-Indic numerals when you use code like ` String.format ( `` % d '' , 3 ) ` I tested this with okhttp-2.5.0 on desktop JVM as well as Android 6.x and 4.1.2 , but the same formatting code exists in okhttp-3 . # Test case Note that I was unable to reproduce the behaviour using javac 1.8.0_60 on Mac OS X , and only on Android
Forbid cleartext if Android ’ s NetworkSecurityPolicy says so __EoT__ We can ask [ NetworkSecurityPolicy ] ( https : //developer.android.com/reference/android/security/NetworkSecurityPolicy.html ) if the device permits cleartext . If it doesn ’ t , we can strip that ConnectionSpec from the client ’ s configuration .
redirect for PROFIND request issues GET request __EoT__ see code in ` com.squareup.okhttp.internal.http.HttpEngine # followUpRequest ` `` ` java case HTTP_MULT_CHOICE : case HTTP_MOVED_PERM : case HTTP_MOVED_TEMP : case HTTP_SEE_OTHER : // Does the client allow redirects ? if ( ! client.getFollowRedirects ( ) ) return null ; String location = userResponse.header ( `` Location '' ) ; if ( location == null ) return null ; HttpUrl url = userRequest.httpUrl ( ) .resolve ( location ) ; // Do n't follow redirects to unsupported protocols . if ( url == null ) return null ; // If configured , do n't follow redirects between SSL and non-SSL . boolean sameScheme = url.scheme ( ) .equals ( userRequest.httpUrl ( ) .scheme ( ) ) ; if ( ! sameScheme & & ! client.getFollowSslRedirects ( ) ) return null ; // Redirects do n't include a request body . Request.Builder requestBuilder = userRequest.newBuilder ( ) ; if ( HttpMethod.permitsRequestBody ( userRequest.method ( ) ) ) { requestBuilder.method ( `` GET '' , null ) ; requestBuilder.removeHeader ( `` Transfer-Encoding '' ) ; requestBuilder.removeHeader ( `` Content-Length '' ) ; requestBuilder.removeHeader ( `` Content-Type '' ) ; } `` ` Thus ,
Attempt to invoke virtual method 'void java.net.Socket.close ( ) ' on a null object reference __EoT__ I try to check fix for Can not cancel async post/get requests . # 1779 and got null pointer exception . Trace : java.lang.NullPointerException : Attempt to invoke virtual method 'void java.net.Socket.close ( ) ' on a null object reference at com.squareup.okhttp.Connection.closeIfOwnedBy ( Connection.java:147 ) at com.squareup.okhttp.OkHttpClient $ 1.closeIfOwnedBy ( OkHttpClient.java:75 ) at com.squareup.okhttp.internal.http.HttpEngine.disconnect ( HttpEngine.java:577 ) at com.squareup.okhttp.Call.cancel ( Call.java:122 ) Steps to reproduce are described in # 1779 . But there is one detail : When i am trying to connect to not started server , i got onFailure as expected . But a little bit later i invoke call.cancel ( ) for that failed call . The code in Connection.java ( lines 174-175 ) closes the socket and makes it nullable : Util.closeQuietly ( socket ) ; socket = null ;
Keep track of failures during negotiation for debugging __EoT__ When performing TLS fallback , add previous exceptions to later ones as suppressed exceptions to help when debugging negotiation issues . Results in output like this : SSLv3-only server , SSLv3 disabled : `` ` Caused by : javax.net.ssl.SSLHandshakeException : javax.net.ssl.SSLProtocolException : SSL handshake aborted : ssl=0xb81a4178 : Failure in SSL library , usually a protocol error error:14077102 : SSL routines : SSL23_GET_SERVER_HELLO : unsupported protocol ( external/openssl/ssl/s23_clnt.c:714 0xb089cdf4:0x00000000 ) at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake ( OpenSSLSocketImpl.java:448 ) at com.squareup.okhttp.internal.http.SocketConnector.connectTls ( SocketConnector.java:103 ) at com.squareup.okhttp.Connection.connect ( Connection.java:143 ) at com.squareup.okhttp.Connection.connectAndSetOwner ( Connection.java:185 ) at com.squareup.okhttp.OkHttpClient $ 1.connectAndSetOwner ( OkHttpClient.java:128 ) at com.squareup.okhttp.internal.http.HttpEngine.nextConnection ( HttpEngine.java:341 ) at com.squareup.okhttp.internal.http.HttpEngine.connect ( HttpEngine.java:330 ) at com.squareup.okhttp.internal.http.HttpEngine.sendRequest ( HttpEngine.java:248 ) at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.execute ( HttpURLConnectionImpl.java:433 ) at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getResponse ( HttpURLConnectionImpl.java:384 ) at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getInputStream ( HttpURLConnectionImpl.java:231 ) at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getInputStream ( DelegatingHttpsURLConnection.java:210 ) at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getInputStream ( HttpsURLConnectionImpl.java:25 ) at TryConnect.main ( TryConnect.java:19 ) ... 7 more Suppressed : javax.net.ssl.SSLHandshakeException : javax.net.ssl.SSLProtocolException : SSL handshake aborted : ssl=0xb81a4178 : Failure in SSL library , usually a protocol error error:14077102 : SSL routines : SSL23_GET_SERVER_HELLO : unsupported protocol ( external/openssl/ssl/s23_clnt.c:714 0xb089cdf4:0x00000000 ) ... 21 more Caused by : javax.net.ssl.SSLProtocolException : SSL handshake aborted :
Allow DELETE Request Body , Ensure Sane Behavior . __EoT__ fix # 605
NPE on proxySelector.select __EoT__ Somehow ` proxySelector ` was null during a test run . `` ` java List < Proxy > proxyList = proxySelector.select ( uri ) ; `` ` `` ` Tests run : 6 , Failures : 0 , Errors : 0 , Skipped : 0 , Time elapsed : 0.003 sec - in com.squareup.okhttp.RequestTest Running com.squareup.okhttp.CallTest Exception in thread `` OkHttp Dispatcher '' java.lang.NullPointerException at com.squareup.okhttp.internal.http.RouteSelector.resetNextProxy ( RouteSelector.java:175 ) at com.squareup.okhttp.internal.http.RouteSelector. < init > ( RouteSelector.java:88 ) at com.squareup.okhttp.internal.http.HttpEngine.connect ( HttpEngine.java:262 ) at com.squareup.okhttp.internal.http.HttpEngine.sendRequest ( HttpEngine.java:207 ) at com.squareup.okhttp.Call.getResponse ( Call.java:205 ) at com.squareup.okhttp.Call.access $ 200 ( Call.java:36 ) at com.squareup.okhttp.Call $ AsyncCall.execute ( Call.java:143 ) at com.squareup.okhttp.internal.NamedRunnable.run ( NamedRunnable.java:33 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1145 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:615 ) at java.lang.Thread.run ( Thread.java:744 ) Exception in thread `` OkHttp Dispatcher '' java.lang.NullPointerException at com.squareup.okhttp.internal.http.RouteSelector.resetNextProxy ( RouteSelector.java:175 ) at com.squareup.okhttp.internal.http.RouteSelector. < init > ( RouteSelector.java:88 ) at com.squareup.okhttp.internal.http.HttpEngine.connect ( HttpEngine.java:262 ) at com.squareup.okhttp.internal.http.HttpEngine.sendRequest ( HttpEngine.java:207 ) at com.squareup.okhttp.Call.getResponse ( Call.java:205 ) at com.squareup.okhttp.Call.access $ 200 ( Call.java:36 ) at com.squareup.okhttp.Call $ AsyncCall.execute ( Call.java:143 ) at com.squareup.okhttp.internal.NamedRunnable.run ( NamedRunnable.java:33 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1145 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:615 ) at
SpdyConnectionTest.pushPromiseStream is flaky __EoT__ `` ` pushPromiseStream ( com.squareup.okhttp.internal.spdy.SpdyConnectionTest ) Time elapsed : 0.027 sec < < < FAILURE ! java.lang.AssertionError : expected : < [ : method : GET , : scheme : https , : authority : squareup.com , : path : /cached ] > but was : < [ : status : 200 ] > at org.junit.Assert.fail ( Assert.java:88 ) at org.junit.Assert.failNotEquals ( Assert.java:743 ) at org.junit.Assert.assertEquals ( Assert.java:118 ) at org.junit.Assert.assertEquals ( Assert.java:144 ) at com.squareup.okhttp.internal.spdy.SpdyConnectionTest.pushPromiseStream ( SpdyConnectionTest.java:1466 ) `` `
CallTest is flaky __EoT__ Not getting the exception messages back that we 're expecting . `` ` Failed tests : CallTest.canceledBeforeResponseReadSignalsOnFailure_HTTP_2:944- > canceledBeforeResponseReadSignalsOnFailure:939 expected : < [ Canceled ] > but was : < [ stream was reset : CANCEL ] > CallTest.canceledBeforeResponseReadSignalsOnFailure_SPDY_3:949- > canceledBeforeResponseReadSignalsOnFailure:939 expected : < [ Canceled ] > but was : < [ stream was reset : CANCEL ] > CallTest.canceledBeforeResponseReadSignalsOnFailure:939 expected : < [ Cancel ] ed > but was : < [ Socket clos ] ed > `` `
SpdyConnection clears the old settings without merging with the new server settings causing the window size always set as -1 __EoT__ When debugging an issue with client requests hanging on SpdyStream.waitUntilWritable ( ) , we found that the window size is set as -1 in SpdyStream.java at line : this.bytesLeftInWriteWindow = connection.peerSettings.getInitialWindowSize ( ) ; After tracing down the issue , the problem turned out to be line 662 of https : //github.com/square/okhttp/blob/master/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java , where peerSettings is cleared without merging with the new settings . This has caused any later SpdyStream always uses an –1 as the initial window size , and the bug has also caused the new window size settings not get propagated to existing SpdySteam ( s ) .
Allow DELETE Request Body , Ensure Sane Behavior __EoT__ The RFC is unclear in this regard as it only specifies that this should invalidate the cache entry ( if any ) . Refs https : //github.com/square/retrofit/issues/426
Unexpected SocketTimeoutException __EoT__ Using version : 1.3.0 release , obtained from http : //mvnrepository.com/artifact/com.squareup.okhttp/okhttp Stack trace : `` ` Caused by : java.net.SocketTimeoutException at com.squareup.okhttp.internal.spdy.SpdyStream $ SpdyDataInputStream.waitUntilReadable ( SpdyStream.java:472 ) at com.squareup.okhttp.internal.spdy.SpdyStream $ SpdyDataInputStream.read ( SpdyStream.java:405 ) at com.squareup.okhttp.internal.http.UnknownLengthHttpInputStream.read ( UnknownLengthHttpInputStream.java:39 ) at java.io.InputStream.read ( InputStream.java:163 ) at java.util.zip.InflaterInputStream.fill ( InflaterInputStream.java:198 ) at java.util.zip.InflaterInputStream.read ( InflaterInputStream.java:152 ) at java.util.zip.GZIPInputStream.read ( GZIPInputStream.java:167 ) at libcore.io.Streams.readFully ( Streams.java:81 ) at java.io.DataInputStream.readInt ( DataInputStream.java:124 ) etc ... But note that just readInt ( ) was called . `` ` The problem here is that a simple DataInputStream.readInt ( ) triggers a SocketTimeoutException even though it should n't - the network is good ( wifi ) and the server is responsive . Digging into this issue , I have localized the issue to code inside ` com.squareup.okhttp.internal.spdy.SpdyStream.SpdyDataInputStream.receive ( InputStream in , int byteCount ) ` : `` ` [ ... ] // Some code here . // Fill the buffer without holding any locks . First fill [ limit..buffer.length ) if that // wo n't overwrite unread data . Then fill [ limit..pos ) . We ca n't hold a lock , otherwise // writes will be blocked until reads complete . if (
HpackDraft05.Reader fails to read the compressed headers written with HpackDraft05.Writer __EoT__ To repro the bug , feed HpackDraft05.Writer writeHeaders ( ) method with the following request headers and use HpackDraft05.Reader to try read out the headers . `` ` `` headers '' : [ { `` name '' : `` : host '' , `` value '' : `` www.facebook.com '' } , { `` name '' : `` accept-encoding '' , `` value '' : `` gzip , deflate , sdch '' } , { `` name '' : `` accept-language '' , `` value '' : `` en-US , en ; q=0.8 , ro ; q=0.6 '' } , { `` name '' : `` user-agent '' , `` value '' : `` Mozilla/5.0 ( Macintosh ; Intel Mac OS X 10_7_5 ) AppleWebKit/537.36 ( KHTML , like Gecko ) Chrome/31.0.1650.63 Safari/537.36 '' } , { `` name '' : `` : path '' , `` value '' : `` /ajax/pagelet/generic.php/SidebarNavigationPagelet ? data= % 7B % 7D & __user=1820231647 & __a=1 & __dyn=7n8a9EAMNoBUSt2u5KIGKaExEW9JeK9y9VpbGiWFa & __req=o & __rev=1037057 '' } , { `` name '' : `` accept '' , `` value '' : `` */* '' } ,
Blocking API for Request & Response __EoT__ These were created with the async API in mind , but a synchronous API is pretty obvious : `` ` Request request = new Request.Builder ( ) .url ( `` http : //square.com/ '' ) .build ( ) ; Response response = client.execute ( request , receiver ) ; String bodyString = response.body ( ) .string ( ) ; `` ` We should build this .
Fix JettyNpnProvider.invoke ( ) to pick the right protocol __EoT__ At the moment we 're picking the wrong protocol when the server 's protocols list is empty . This causes us to speak ` HTTP-draft-09/2.0 ` to a server that does n't expect it .
Fix JettyNpnProvider.invoke ( ) to pick the right protocol __EoT__ At the moment we 're picking the wrong protocol when the server 's protocols list is empty . This causes us to speak ` HTTP-draft-09/2.0 ` to a server that does n't expect it .
Refactor SPDY code to use ByteString for headers . __EoT__
Send post request , content-length is not set __EoT__ Send a post request , the content-length header is not set , this cause an error from spdy server . Is this known issue ?
GZIP encoded cache responses __EoT__ I 'm using OkHttp as HTTP Client in Retrofit with transparent gzip compression . Everything works fine until a request hits the cache ( ` OkHttp-Response-Source : CONDITIONAL_CACHE 304 ` ) . Then I 'm receiving a gzipped InputStream instead of a uncompressed one . If I look into the cache files , the cached response is actually gzipped , but as the Content-Encoding header is stripped from the response , ` ResponseHeaders # isContentEncodingGzip ( ) ` evaluates to false which causes ` HttpEngine # initContentStream ( InputStream ) ` to return the raw stream and not a GZIPInputStream . Is this the intended behavior ?
Remember failed routes __EoT__ We are n't very smart about not making the same mistake twice when it comes to route failures . Suppose we get 2 IP addresses corresponding to datacenter EAST and datacenter WEST . If we attempt to connect to EAST and it fails , we do n't remember that failure for subsequent connection attempts . Each OkHttpClient 's RouteSelector should know about routes that have previously failed and try them last .
Add Picasso.newBuilder ( ) __EoT__ Closes # 1750
Fix recycled Bitmap check . __EoT__ fixes the sample app crashing at start .
Updates SourceBufferingInputStream to conform to InputStream contract __EoT__
Fix network tests that would fail silently . __EoT__ If these assertions failed , they would only go to the default uncaught exception handler because they were not made on the main thread .
Add a flag to always transform remote images with thumbor when set . __EoT__
Fix fit ( ) deferred loading for re-sized views __EoT__ Fix issue : https : //github.com/square/picasso/issues/1446 Picassos fit ( ) will only defer loading when either the height or the width is 0 , this does not work well with re-used and re-measured Views . This fix additionally checks if a layout has been requested for the given ImageView when deferring and also will not start loading until layout has been done .
suppress warning : drawable has unresolved theme attributes . __EoT__ Fixed warning on adding ` animated-vector ` as a placeholder . Following is warning shows up due to ` context.getResources ( ) .getDrawable ( placeholderResId ) ` in **RequestCreator** . `` ` 12-06 13:46:57.057 17455-17455/com.example.debug W/Resources : Drawable com.example.debug : drawable/circular_animation has unresolved theme attributes ! Consider using Resources.getDrawable ( int , Theme ) or Context.getDrawable ( int ) . java.lang.RuntimeException at android.content.res.Resources.getDrawable ( Resources.java:797 ) at com.squareup.picasso.RequestCreator.getPlaceholderDrawable ( RequestCreator.java:741 ) at com.squareup.picasso.RequestCreator.into ( RequestCreator.java:729 ) at com.squareup.picasso.RequestCreator.into ( RequestCreator.java:666 ) at com.example.app.dashboard.home.adapter.TrendingProductsAdapter.onBindViewHolder ( TrendingProductsAdapter.java:51 ) at com.example.app.dashboard.home.adapter.TrendingProductsAdapter.onBindViewHolder ( TrendingProductsAdapter.java:28 ) at android.support.v7.widget.RecyclerView $ Adapter.onBindViewHolder ( RecyclerView.java:6508 ) at android.support.v7.widget.RecyclerView $ Adapter.bindViewHolder ( RecyclerView.java:6541 ) at android.support.v7.widget.RecyclerView $ Recycler.tryBindViewHolderByDeadline ( RecyclerView.java:5484 ) at android.support.v7.widget.RecyclerView $ Recycler.tryGetViewHolderForPositionByDeadline ( RecyclerView.java:5750 ) at android.support.v7.widget.RecyclerView $ Recycler.getViewForPosition ( RecyclerView.java:5589 ) at android.support.v7.widget.RecyclerView $ Recycler.getViewForPosition ( RecyclerView.java:5585 ) at android.support.v7.widget.LinearLayoutManager $ LayoutState.next ( LinearLayoutManager.java:2231 ) at android.support.v7.widget.LinearLayoutManager.layoutChunk ( LinearLayoutManager.java:1558 ) at android.support.v7.widget.LinearLayoutManager.fill ( LinearLayoutManager.java:1518 ) at android.support.v7.widget.LinearLayoutManager.onLayoutChildren ( LinearLayoutManager.java:610 ) at android.support.v7.widget.RecyclerView.dispatchLayoutStep2 ( RecyclerView.java:3719 ) at android.support.v7.widget.RecyclerView.onMeasure ( RecyclerView.java:3135 ) at android.view.View.measure ( View.java:22002 ) at android.view.ViewGroup.measureChildWithMargins ( ViewGroup.java:6580 ) at android.widget.LinearLayout.measureChildBeforeLayout ( LinearLayout.java:1514 ) at android.widget.LinearLayout.measureVertical ( LinearLayout.java:806 ) at android.widget.LinearLayout.onMeasure ( LinearLayout.java:685 )
Migrate from Fest to Truth __EoT__ Fixes # 1592 . They are very similar APIs . For the most part , only import changes and minor substitution of equivalent methods were needed ( e.g . ` containsOnly ` for ` containsExactly ` , ` contains ( entry ( ) ) ` for ` containsEntry ( ) ` ) . Some notable bits : - Assertions can not be chained in Truth ( design decision from the Truth team ) . Thus , chained assertions were split in multiple individual assertions . - Fest 's ` Assertions.fail ` was substituted with JUnit 's ` Assert.fail ` . - Truth ’ s ` MapSubject ` doesn ’ t have a ` containsValue ` method so I used ` Map.containsValue ` to assert its value . **Note** : I had to upgrade the AGP from version 3.0-beta2 to 3.0-beta7 in order to work in AS 3.0 beta7 ( current ) . Moreover , using this version of the AGP also required upgrading build tools from version 26.0.1 to 26.0.2 .
Fix fit ( ) deferred loading for re-sized views __EoT__ Fix issue : https : //github.com/square/picasso/issues/1446 Picassos fit ( ) will only defer loading when either the height or the width is 0 , this does not work well with re-used and re-measured Views . This fix additionally checks if a layout has been requested for the given ImageView when deferring and also will not start loading until layout has been done .
Can not show image from assets folder __EoT__ I follow guide to load image from assets : Picasso.with ( context ) .load ( new File ( `` /thumb/101.jpg '' ) ) .into ( imageView ) ; But get this error : 12-16 11:40:33.805 : E/JHEAD ( 22889 ) : ca n't open '/thumb/101.jpg' Do I use wrong path of image in assets ? Or any reason make image can not be loaded ? Thank you for your support .
.fit ( ) wo n't work with layout_alignTop + Right + Bottom + Left on a ListView __EoT__ Example project reproducing the issue : https : //github.com/jonasfa/picasso-bug Steps to reproduce : 1 . Create a layout with a root RelativeLayout , and an ImageView child with layout_align* : [ example ] ( https : //github.com/jonasfa/picasso-bug/blob/master/app/src/main/res/layout/bug_item.xml ) 2. create an Adapter providing this layout and picasso.load ( url ) .fit ( ) .into ( imageView ) **Expected result : ** the image is loaded and shown **Actual result : ** the image does n't show
Dispatcher $ NetworkBroadcastReceiver never unregistered __EoT__ The NetworkBroadcastReceiver in the the Dispatcher is never unregistered . Should n't this be done in ` shutdown ( ) ` ?
Is there a reason Bitmap filtering is turned off ? __EoT__ I 've looked through previous issues trying to see if anyone has asked this ... Is there a reason the filter option in Bitmap.createBitmap ( ) is set to false ? Setting it to true significantly reduces aliasing artefacts when scaling images . Obviously there is the trade-off of extra work for the CPU but the results are just way better with filtering on . See BitmapHunter.java , line 313 , last argument : `` ` Java Bitmap.createBitmap ( result , drawX , drawY , drawWidth , drawHeight , matrix , false ) ; `` `
Scale memory and disk cache sizes . __EoT__ Memory cache now has a ceiling of 20MB . Also fixes a logic error for looking up the large memory class when the large heap flag was set . Disk cache now scales between 5MB and 50MB , favoring 2 % of the storage space on the target filesystem . Closes # 4 . @ swankjesse @ dnkoutso
