[ v2 ] [ iOS ] Remove OCMock files from being compiled into pod __EoT__ I am assuming that OCMock is a test only dependency and should not be included into the compiled pod which fails to compile .
[ V2 ] [ iOS ] topBar.bottomTab.badge not showing in 2.0.2598 __EoT__ badge is set but not showing . downgraded to 2.0.2442 and is working . -- - # # # Environment * React Native Navigation version : 2.0.2598 * React Native version : 0.57.2 * Platform ( s ) ( iOS , Android , or both ? ) : iOS ( Android is working ) * Device info ( Simulator/Device ? OS version ? Debug/Release ? ) : Simulator
[ v2 ] Typescript : Adds ` id ` and ` passProps ` to OptionsTopBarTitle.component __EoT__ Useful when using custom component with ` id ` and ` passProps ` properties in OptionsTopBarTitle . Fix typescript error TS2345 : Argument of type ' { topBar : { title : { component : { name : any ; alignment : `` center '' ; passProps : { ... } ; } ; } ; } ; } ' is not assignable to parameter of type 'Options ' .
Detached options from presenters , design improvments for LayoutProtocol __EoT__ - Detached options object state from presenters - Created homogeneous constructors for Parent View Controllers . ( RNNParentProtocol )
[ BREAKING ] Top bar options changes __EoT__ - Removed ` topBar.transparent ` - Added transparent color support for ` topBar.background.color ` - Moved ` topBar.translucent ` to ` topBar.background.translucent ` - Moved ` topBar.blur ` to ` topBar.background.blur `
Support styling on back button on iOS __EoT__ This resolves # 3454 and resolves # 3731 We can now specify : `` ` js Navigation.setDefaultOptions ( { topBar : { backButton : { color : `` red '' , fontFamily : `` Nunito-SemiBold '' , fontSize : 18 , title : `` boo '' } } } ) ; `` `
[ V2 ] Allow TopBar - > Background - > Clip To Bounds option __EoT__ ** For iOS only # 3890
[ V2 ] Fix order of ` registerComponentWithRedux ` arguments in Third Party documentation __EoT__ The actual ` registerComponentWithRedux ` function definition is the following : `` ` registerComponentWithRedux ( componentName , getComponentClassFunc , ReduxProvider , reduxStore ) { return this.componentRegistry.registerComponent ( componentName , getComponentClassFunc , ReduxProvider , reduxStore ) ; } `` ` Note the order of ` store ` and ` provider ` are the opposite as shown in the original documentation . This will fix it , but it 's worth mentioning that v1 has the order shown in the original documentation , so it would be nice to keep the parameter order the same in v2 . I also capitalized Provider as it is a React Component .
Bottom tabs disappear on pop operation in some scenarios __EoT__ When screen is hiding bottomTabs , in this case bottomTabs also disappear on previous screen `` ` Navigation.push ( 'screenWithBottomTabs ' ) ... Navigation.push ( 'screenHidingBottomTabs ' ) ... Navigation.showModal ( 'modalUponTheScreen ' ) ... await Navigation.pop ( 'screenHidingBottomTabs ' ) ; Navigation.dismissModal ( 'modalUponTheScreen ' ) ; `` ` So in this case bottom tabs unexpectedly disappear from the 'screenWithBottomTabs ' . This reproduces only on iOS and only in if you are poping the screen before the modal .
Fix missing closing brace in docs __EoT__
[ V2 ] Better side menu visibility test __EoT__ Seems like CENTERED_TEXT_HEADER is always visible so the test was not actually checking properly if the side menu closed properly .
Add helpful 3a step to Installing.md for ios __EoT__ Some extra help concerning a common issue that occurs with fresh install of Xcode + react native 0.56. https : //github.com/react-community/create-react-native-app/issues/316 # issuecomment-351371080 Both myself and a colleague encountered this same issue on fresh installs following the steps in the documentation , so I think it is worth a note here .
Duplicate headers copy fix __EoT__
Unmount title view when corresponding child component is unmounted __EoT__ Currently TopBar title component , background and buttons are unmounted when a new screen is pushed to the stack . This causes a bug when props are passed to these components as props are cleared when child components unmount . When navigating back to a screen which passed props to the component , the are missing as the component is recreated in native but props were already cleared in Js . This commit fixes this bug only for title components .
Prevent user interaction until animation stopped on Android 's left button __EoT__ When change a left button 's id from ` back ` to ` cancel ` , the event for click is still ` back ` in the animation duration . That is to say , click the button that seems to have became a ` x ` will still pop the screen . So I think it 's necessary to prevent user interaction in the duration to prevent unexpected interactions .
[ v2 ] [ Android ] Add sideMenu height and width options for consistency with IOS __EoT__ Dear Maintainers , Thanks for the awesome library . Hereby my pull request for adding height and width options for Android . The width option already worked for IOS and this PR makes it consistent . The options can be set in sideMenu for left and/or right , i.e . : ` options { sideMenu : { left : { width : 200 } } . ` It is a minor change in SideMenuOptions and SideMenuController . Nevertheless , I 've added unit tests to SideMenuControllerTest . I also ran yarn test-all without any issues . Please let me know if any changes are necessary . Cheers , Derk
Android : Fix an issue with incorrect Lightbox measurments . __EoT__ Due to a race condition , the height and width of the Lightbox screen may be read too early , resulting in a zero-width or height lightbox . Addresses Content of lightbox not displayed # 2288
[ BREAKING ] Event registry rework __EoT__ - Events will NOT be automatically called on components . Instead , all events must be registered ( and later ` .remove ( ) ` ) through ` Navigation.events ( ) ... ` - ~Combined all component lifecycle events into ` registerComponentLifecycleListener ` ~ - ~TODO : add componentDidMount , componentWillUnmount events~ - For ease of use you can call ` this.subscription = Navigation.events ( ) .bindComponent ( this ) ` from inside your component 's constructor and all methods will be automatically triggered just for this component - ~Do n't forget to ` this.subscription.remove ( ) ` on componentWillUnmount~ this is optional now . RNN cleans the listeners whenever the component is unmounted ( you can still call ` remove ` yourself when needed )
[ v2 ] Expose public method to find VC __EoT__ Maybe there is a better way of doing this ? I need an public method to retrieve a VC by componentId . The use case I have , is to be able to find current VC 's navigationController and push external component **as-is** into it . Using the external component feature does not work in this case , and finding current presented VC with ` [ UIApplication sharedApplication ] ` is not working . For example : `` ` objc RCT_EXPORT_METHOD ( openURL : ( NSString * ) url componentId : ( NSString * ) componentId ) { // Get UIViewController from ReactNativeNavigation by componentId UIViewController *vc = [ ReactNativeNavigation findViewController : componentId ] ; SFSafariViewController *safariVC = [ [ SFSafariViewController alloc ] initWithURL : [ [ NSURL alloc ] initWithString : url ] ] ; [ vc.navigationController presentViewController : safariViewController animated : YES ] ; } `` `
Reject promise on dismissOverlay with wrong componentId __EoT__
Side menu width option __EoT__ `` ` options : { sideMenu : { left : { width : 100 } } } `` `
[ v2 ] [ iOS ] iPhone X splash screen problem __EoT__ I 'm trying to configure the splash screen for my app via Xcode , but there is a problem when I open the app on the iPhone X. I configured the LaunchImage on Xcode as follows : < img width= '' 585 '' alt= '' captura de tela 2018-06-21 as 12 10 28 '' src= '' https : //user-images.githubusercontent.com/2624768/41728106-5b4b8c58-754c-11e8-918b-ea017327cead.png '' > When I launch the app on the iPhone X , the solid orange image appears for a while , but suddenly changes to the logo before showing the single screen app . I tested different image combinations and found out that it uses the iPhone X image first , then it changes to the iPhone Portrait 2x iOS 7+ and fallbacks to iPhone Portrait 1x if the latter does n't exist . As the image is smaller , it appears stretched . ! [ bug ] ( https : //user-images.githubusercontent.com/2624768/41728908-5654e6ac-754e-11e8-8516-925a6ae09b28.gif ) -- - # # # Environment * React Native Navigation version : 2.0.2275 * React Native version : 0.55.1 * Platform ( s ) ( iOS , Android , or both ? ) : iOS *
Test jest html reporter __EoT__
Smarter set root __EoT__
Implemented test for public constructor __EoT__ Will help make sure the constructor is not made private by mistake
fixed a bug modal viewController was not deallocated when to call dis… __EoT__ Fixed a bug that modal viewcontroller was not unregistered when to call dismissAllModals . related PR : https : //github.com/wix/react-native-navigation/pull/2255/files Before merging # 2255 , the controller is always unregistered . After merging # 2255 , the controller is often unregistered . So the dismissed controller was not deallocated .
Fixes NPE when initializing twice __EoT__ When refreshing multiple times , the asynchronous process that creates React Navigation causes a crash . Looking at the code , there was a lint warning as the context that was being used might be null ( as it 's being recreated ) . This PR addresses the issue by passing the freshly created process and checking for flag before emitting event
fix android rooBackgroundImage support __EoT__ fix https : //github.com/wix/react-native-navigation/pull/3051
Reference to function confusing and unnecessary __EoT__ Removed reference to - ( BOOL ) application : ( UIApplication * ) application ... The way it 's worded makes it seem like you only need to overwrite what 's in the function , not the entire file 's code .
[ v2 ] Restore layout params for bottom tabs children __EoT__ PR # 2658 removed layout params from the child views , which causes component children to receive zero width . Stack children work since they don ’ t need the layout params .
V1 [ iOS/Android ] Feature/async dismiss modal __EoT__ ATM , when we call dismissAllModal we can not be sure when all modals are really dismissed . I 've a very simple use case in my app : - I 've several opened modals ( 2 ) - When a condition is reached , I need to dismiss these 2 modals and display a new one Before this patch , I managed this use case with a simple timeout ( ) but it was not pretty safe and bug prone . Now , I just have to ` await dismissAllModal ( ) ` before runing ` showModal ( ) ` again . This feature is done for both Android and iOS . iOS : On the native side , async stuff was already done . Just edited the JS function to use async / await . Android : Nothing was done for that . I added some promise stuff , it works pretty well in my app but do n't know if it 's the best way to achieve that .
Add note about Android left button icon constraint __EoT__
Add splash screen tutorial to third-party-lib-support document page . __EoT__ Add [ this ] ( https : //medium.com/ @ pqkluan/how-to-implement-splash-screen-in-react-native-navigation-ee2184a1a96 ) tutorial article to [ this ] ( https : //wix.github.io/react-native-navigation/ # /third-party-libraries-support ) document page .
Orientation android __EoT__
Bottom tabs visible __EoT__
Set layout params on views pushed to stack __EoT__ Closes # 2685
Fix EmptyStackException __EoT__ Fix the below EmptyStackException `` ` java java.util.EmptyStackException : null at java.util.Stack.peek ( Stack.java:57 ) at com.reactnativenavigation.screens.ScreenStack.peek ( ScreenStack.java:240 ) at com.reactnativenavigation.layouts.SingleScreenLayout.getCurrentScreen ( SingleScreenLayout.java:323 ) at com.reactnativenavigation.views.SnackbarAndFabContainer $ 1.run ( SnackbarAndFabContainer.java:70 ) at com.reactnativenavigation.views.FloatingActionButtonCoordinator $ 2.onAnimationEnd ( FloatingActionButtonCoordinator.java:78 ) at com.reactnativenavigation.views.FloatingActionButtonAnimator $ 2.onAnimationEnd ( FloatingActionButtonAnimator.java:96 ) at android.view.ViewPropertyAnimator $ AnimatorEventListener.onAnimationEnd ( ViewPropertyAnimator.java:1135 ) at android.animation.ValueAnimator.endAnimation ( ValueAnimator.java:1239 ) at android.animation.ValueAnimator $ AnimationHandler.doAnimationFrame ( ValueAnimator.java:766 ) at android.animation.ValueAnimator $ AnimationHandler $ 1.run ( ValueAnimator.java:801 ) at android.view.Choreographer $ CallbackRecord.run ( Choreographer.java:894 ) at android.view.Choreographer.doCallbacks ( Choreographer.java:696 ) at android.view.Choreographer.doFrame ( Choreographer.java:628 ) at android.view.Choreographer $ FrameDisplayEventReceiver.run ( Choreographer.java:880 ) at android.os.Handler.handleCallback ( Handler.java:822 ) at android.os.Handler.dispatchMessage ( Handler.java:104 ) at android.os.Looper.loop ( Looper.java:207 ) at android.app.ActivityThread.main ( ActivityThread.java:5811 ) at java.lang.reflect.Method.invoke ( Method.java ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:791 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:681 ) `` `
V2 custom top bar __EoT__ `` ` options : { topBar : { titleViewComponent : 'componentName ' // centered ( on iOS ) , wraps content . titleViewComponentAlignment : 'center ' / 'fill' } } options : { topBar : { componentName : 'componentName ' , // Overrides ` customTitleViewName ` . Fills viewport . Overrides buttons backgroundComponentName : 'componentName' } } `` `
Add support for prefersLargeTitles in iOS 11 __EoT__ Fixes # 1643
V2 bottom tabs styles __EoT__
fix ( start app ) : show red screen in case an error is thrown while star… __EoT__ …ting the app
Adding preferredContentSize __EoT__ So while building an iPad application using this navigation library i have come across the need to set the size on controllers presented through modalPresentationStyle = formSheet . Though currently we do n't have any prop that allows you to do so . Obviously this is iOS specific but i think some other people would like some flexibility in this regard . example : `` ` javascript Navigation.showModal ( { screen : action $ .screen , title : action $ .title , animationType : 'slide-up ' , navigatorStyle : { modalPresentationStyle : 'formSheet ' , preferredContentSize : { width : 790 , height : 560 } } , passProps : action $ .props } ) `` `
V2 overlays __EoT__
Fix failing android e2e __EoT__
[ docs ] Linkify parameter types __EoT__
[ docs ] Change heading depth __EoT__
V2 navigation bars e2e __EoT__
fixed toggle tabs bug __EoT__
Top tabs android2 __EoT__
[ Android ] TopTabs font family __EoT__ Added topTabTextFontFamily option so the font family of TopTabs can be set from JS now . Resolves : # 2146 , # 1784
V2 e2e Test IDs __EoT__
V2 nested __EoT__
Fix missing props __EoT__
Do n't pass custom button props over the bridge __EoT__ This fix allows to pass unserializable props to custom buttons , such as navigator or functions .
Do n't pass custom button props over the bridge __EoT__ This fix allows to pass unserializable props to custom buttons , such as navigator or functions .
Register multiple navigatorEventListeners __EoT__ This commit adds ability to register multiple navigator event listeners : navigator.addOnNavigatorEvent ( func ) navigator.removeOnNavigatorEvent ( func ) Event listeners are removed when the screen the navigator is bound to is unmounted , calling ` removeOnNavigatorEvent ` is n't mandatory . As this api conflicts with the current api , addOnNavigatorEvent ca n't be used in a screen where setOnNavigatorEvent was used before . closes # 2157
Fix issues with Android BackHandler __EoT__ Fix issues with Android BackHandler listeners not getting called , not allowing to override the back functionality from the JS side relates to # 1765
Customize tab badge color __EoT__ # Customize tab badge color # # # Before : ( default color ) ! [ screen shot 2017-09-26 at 1 38 46 pm ] ( https : //user-images.githubusercontent.com/18464392/30872347-1f5215a0-a2c0-11e7-8e02-c64bc24706ed.png ) # # # After : ( with orange color ) ! [ screen shot 2017-09-26 at 2 41 30 pm ] ( https : //user-images.githubusercontent.com/18464392/30875126-da0e72d2-a2c8-11e7-923f-6d0900c9c1f1.png )
Update README.md __EoT__
Bug fixed - the UIScrollView will break on iOS10 when building by XCode9 __EoT__ This only happens when you are using react-native @ 0.48.3 , and build your APP by XCode9 . When you run your APP in iOS10 or below , it will throw ` unrecognized selector ` error . The new iOS11 has new design on StatusBar which behaves weird on UIScrollView , so that the react-native team added this new selector to fix it . This PR will help to address this problem when you are also using the amazing ` react-native-navigation ` . Here 's the error details : > Terminating app due to uncaught exception 'NSInvalidArgumentException ' , reason : '- [ RCTCustomScrollView setContentInsetAdjustmentBehavior : ] : unrecognized selector sent to instance 0x7ffab9891a00' Reference : https : //github.com/facebook/react-native/issues/15957 https : //github.com/wix/react-native-navigation/issues/1886
V2 options applying refactoring __EoT__
added tabBarHidden property to navigatorStyle __EoT__ In ios ` tabBarHidden ` is not working and required bunch of js hack to getting the desire thing to work . Based on my observation ` tabBarHidden ` was never implemented for navigatorStyle and I simply added that functionality .
[ iOS ] add backButtonImage to app style __EoT__ in order to custom the default back button arrow image with provided image
V2 Orientation __EoT__
IOS back gesture not working __EoT__ After i updated RNN to 2.0.0-experimental.256 , swipe gesture to pop screen on IOS is not working anymore . I tried to add `` disabledBackGesture : false , '' ( wich should be default to false anyway ) but no luck . Any suggestion ? -- - # # # Environment * React Native Navigation version : 2.0.0-experimental.256 * React Native version : 0.43.0-rc.4 * Platform : IOS ( both simulator/device and debug/release )
V2 status bar blur ios __EoT__
add v2 link to readme __EoT__
Add font size support on title bar for android __EoT__ enable navBarTextFontSize in appStyle , for example `` ` javascript appStyle : { navBarTextFontSize : 12 } `` `
[ iOS ] Prefer use of view controller hierarchy to display lightbox __EoT__ | Before | After | | -- -- - | -- -- - | | ! [ lightbox-actionsheetios ] ( https : //user-images.githubusercontent.com/1051453/27753021-d7c54642-5db1-11e7-9428-434bea455d84.gif ) | ! [ lightbox-actionsheetios-fixed ] ( https : //user-images.githubusercontent.com/1051453/27753026-db508704-5db1-11e7-8111-8087737dda32.gif ) | This fixes issues with other React Native views which rely on the view controller hierarchy .
Fixed BottomTabs height being calculated twice __EoT__ BottomTabs height is currently being calculated twice in Android making the hide animation not work in all cases
Set BottomTab colours only if needed __EoT__ Fixes # 1411 Each time a color attribute is set in AHBottomNavigation , all items in the BottomTabs are recreated . If a badge is set , it is animated each time items are recreated . This behaviour can even be seen in the gifs in the repo https : //github.com/aurelhubert/ahbottomnavigation
Reformat code __EoT__
Align FAB to screen when BottomTabs are hidden __EoT__
Example __EoT__
Set leftButton color when calling setStyle __EoT__ fixes # 1181
Add v2 docs path __EoT__
Send willDisappear and didDisappear on modal dismiss __EoT__ also report type as ScreenChangedEvent instead of navBarButtonPress . closes # 1144
added missing ' , ' on example code __EoT__
Create v1tov2diff.md __EoT__
Matrix evaluator __EoT__
Support custom font in the Menu items . __EoT__
propose cleaner , more familiar usage patterns __EoT__ This PR modifies the example app to encourage/propose a usage pattern that is more familiar to React Native developers , feels less invasive , and better highlights some of the power of this solution by showing how it can be used to create a clean separation of concerns between multiple modules in the same application . - The app is initialized with a navigator that knows what tabs/drawers to create , and imports modules that provide a single function that registers their screens . These modules might even be npm modules , developed in different repositories and by entirely separate teams . The modules ' only responsibility to the navigator is that they namespace their screen names to ensure uniqueness and that they export a function that registers all their pushable screens . - A screen 's implementation should look like a regular React Native ` Component ` . A developer working on a project using react-native-navigation should feel at home immediately and adoption should n't feel like a lot of change . The README does n't seem very scary , but looking at the example made me kind of wrinkle my
Resolve rnn from npm __EoT__
static navigationStyle - title __EoT__
New Documentation __EoT__ Temporary url : http : //rnn-docs.junedomingo.com/ # / Docs : https : //github.com/junedomingo/react-native-navigation/tree/docsify/docs
remove `` react-redux '' from package.json __EoT__
iOS orientation __EoT__ support orientation change in iOS . Usage : * When calling ` startSingleScreenApp ` or ` startTabBasedApp ` , pass ` appStyle ` object with the requested orientation : `` ` js Navigation.startTabBasedApp ( { tabs : createTabs ( ) , appStyle : { orientation : 'portrait ' // Available values : portrait , landscape , auto } } ) ; `` ` * When showing a modal , in ` navigatorStyle ` passed in ` showModal ` : `` ` js this.props.navigator.showModal ( { title : `` Modal '' , screen : `` example.ModalScreen '' , navigatorStyle : { orientation : 'landscape' } } ) ; `` ` Any other use cases that are n't mention above will be ignored .
Change screenChange eventName key to id __EoT__
Feature/view lifecycle __EoT__ Adds view lifecycle events to RCCViewController , this allows each screen to listen in for the standard willAppear , didAppear , willDissapear , didDissapear events which can be used for multiple things , but we have mainly used for refreshing tabs when they are shown .
Update README.md - Minimum supported RN version is 0.40 __EoT__
Expose onConfigurationChanged in ActivityCallbacks . __EoT__ I need it to integrate https : //github.com/yamill/react-native-orientation .
Add onRequestPermissionsResult to ActivityCallbacks __EoT__
[ android ] Add option for scrollable top tabs __EoT__ Small changes to enable scrollable top tabs in android
expose navigation handleDeepLink as a static method __EoT__
update .gitignore added # VSCODE section __EoT__
dismissInAppNotification support on android . __EoT__ Add .dismissInAppNotification on android . - Separate hide and show animations . - Implement a little bit of throttling around successive calls to .showInAppNotification
rightButtons not getting passed through to native code __EoT__ Fixed an issue where rightButtons defined on the screen parameters were overwritten by parameters defined on the Screen component itself .
Fixing props in showInAppNotification __EoT__ As discussed in https : //github.com/wix/react-native-navigation/pull/644
Sends a nav event whenever the sideMenu button is clicked . ( Android ) __EoT__ Just an effort to get around this : https : //github.com/wix/react-native-navigation/issues/616
Corrected screenId to screenID __EoT__
set result.topBarElevationShadowEnabled true in AppStyle __EoT__
Add Support for all common color formats on Android __EoT__ closes # 454
Search android __EoT__
Intermittent test failure in Throttling pattern __EoT__ See https : //travis-ci.org/iluwatar/java-design-patterns/builds/278878833
SonarQube update __EoT__ Hi , About 6 months ago , we renamed SonarQube.com to SonarCloud . The URL of the service changed from https : //sonarqube.com to https : //sonarcloud.io . I am contacting you because we noticed that you are still using the old URL ( sonarqube.com ) to point to the service when you run analyses . Typically , this is set through the `` sonar.host.url '' property in your build scripts , or in your CI tool configuration ( like an end-point in VSTS or a global config in Jenkins ) . In a few months , we are going to drop the old URL to keep only https : //sonarcloud.io . You probably want to take a look at this early to prevent any futur errors in your build jobs . Also , if you are using Travis as your CI engine to trigger the analyses , I suggest that you take a look at our [ Travis Add-on ] ( https : //docs.travis-ci.com/user/sonarcloud/ ) . Relying on this add-on would allow to not be impacted by potential similar changes in the future . Hope you enjoy the service ! Best regards , Fabrice Bellingard |
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Aggregator ( EIP ) __EoT__
Aggregator ( EIP ) __EoT__
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Unit of Work pattern __EoT__ http : //martinfowler.com/eaaCatalog/unitOfWork.html
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
Partial Response pattern __EoT__ Pattern where an API lets clients specify the structure of the response . http : //yaoganglian.com/2013/07/01/partial-response/
SonarQube reports bugs __EoT__ The project is automatically scanned with SonarQube . The static code analysis reports several blocker and critical level issues that should be fixed . https : //sonarcloud.io/project/issues ? id=com.iluwatar % 3Ajava-design-patterns & resolved=false & severities=BLOCKER % 2CCRITICAL & types=BUG
Auto-start animated drawables __EoT__ Add auto-start of animated drawables in ` .showImageOnLoading ` .
Stop using weak references for cache __EoT__ According to Android Developers site : > Note : In the past , a popular memory cache implementation was a SoftReference or WeakReference bitmap cache , however this is not recommended . Starting from Android 2.3 ( API Level 9 ) the garbage collector is more aggressive with collecting soft/weak references which makes them fairly ineffective . In addition , prior to Android 3.0 ( API Level 11 ) , the backing data of a bitmap was stored in native memory which is not released in a predictable manner , potentially causing an application to briefly exceed its memory limits and crash . Replace weak references with strong ones for new Android versions .
Possible bug in getImageSizeScaleTo __EoT__ in file/class ImageLoader line : we have `` ` int height = params.height ! = LayoutParams.WRAP_CONTENT ? 0 : imageView.getHeight ( ) ; // Get actual image height `` ` should n't it be ? `` ` int height = params.height == LayoutParams.WRAP_CONTENT ? 0 : imageView.getHeight ( ) ; // Get actual image height `` `
ImageLoadingListener for multiple view __EoT__ Can I use one ImageLoadingListener for multiple imageviews. ? . onLodingComplete I want to set border to particular imageview . but ImageLoadingListener does not send any view . I have another way to do this stuff by setting different-different ImageLoadingListener for all view .
Possible problems with bitmap recycle on JB . Colorspace option for decoding . __EoT__ I 've encountered a problem ( in my project ) while doing createScaled + recycle old on jelly bean , so you may encounter similar problem in UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageDecoder.java you should call recycle only if sourcebitmap ! = rescaledbitmap , since android sdk may return the same bitmap if the size is suitable . createScaledBitemp supposed to work this way but only implemented for real on jelly bean . also I would suggest to add an option to decode using 565 colorspace , if you do n't need transparency it uses half of the memory
Possible problems with bitmap recycle on JB . Colorspace option for decoding . __EoT__ I 've encountered a problem ( in my project ) while doing createScaled + recycle old on jelly bean , so you may encounter similar problem in UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageDecoder.java you should call recycle only if sourcebitmap ! = rescaledbitmap , since android sdk may return the same bitmap if the size is suitable . createScaledBitemp supposed to work this way but only implemented for real on jelly bean . also I would suggest to add an option to decode using 565 colorspace , if you do n't need transparency it uses half of the memory
Display images in Widgets __EoT__ Hi , How can the ImageLoader be used to load images on an application widget ? Because the displayImage method takes an ImageView as parameter and in a widget we have to use RemoteViews . Thanks . Regards , M
'Out of memory ' on images with a specific resolution __EoT__ In a photo gallery application I am working on , I noticed that on images of a certain resolution ( 2272x1704 ) the application went 'out of memory ' . The problem was that this particular size of images and the size of the display used ( 1280x800 ) caused the method computeImageScale ( ) in the ImageDecoder class to return 1 instead of an appropriate scale factor . Changing the condition in the while loop of this method from AND to OR solved the problem .
ImageLoader log message not formatted __EoT__ In ImageLoader displayImage ( ) method , log string LOG_LOAD_IMAGE_FROM_MEMORY_CACHE is not formatted which leads to placeholder ( % s ) appearing in logs , instead of cache related information . `` ` java Bitmap bmp = configuration.memoryCache.get ( memoryCacheKey ) ; if ( bmp ! = null & & ! bmp.isRecycled ( ) ) { Log.i ( TAG , LOG_LOAD_IMAGE_FROM_MEMORY_CACHE ) ; imageView.setImageBitmap ( bmp ) ; } else { listener.onLoadingStarted ( ) ; if ( imageLoadingExecutor.isShutdown ( ) ) { imageLoadingExecutor = Executors.newFixedThreadPool ( configuration.threadPoolSize ) ; } `` ` I 'm not sure what you thought should be there , but I 'm using memoryCacheKey now . `` ` java Log.i ( TAG , String.format ( LOG_LOAD_IMAGE_FROM_MEMORY_CACHE , memoryCacheKey ) ) ; `` `
Field softMap in Cache visibility __EoT__ Зачем поле softMap объявлено protected ? Даже если нужен доступ у наследников ( в данном случае я думаю не нужен ) лучше написать модификатор private и добавить protected метод getCache
Maintain strong reference to PoolStats for Micrometer gauges __EoT__ Micrometer 's gauges were breaking after the ` PoolStats ` object they weakly referenced was garbage collected . This change holds a strong reference to the ` PoolStats ` object in ` MicrometerMetricsTracker ` to avoid this issue . See http : //micrometer.io/docs/concepts # _why_is_my_gauge_reporting_nan_or_disappearing I noticed that the HikariCP gauges were showing ` NaN ` for their value sometime after application startup . The recently added documentation in Micrometer linked above helped me track down the issue .
Can HikariCP offer new `` suspend '' function that can immediately throw `` suspend “ exception . __EoT__ # # # # Environment `` ` HikariCP version : x.x.x JDK version : 1.8.0_111 Database : oracle Driver version : 2.3.13 `` ` New request : Current `` suspend '' function will block application when application calls getConnection method , which can cause whole application crashes。 Can HikariCP offer new `` suspend '' function that can immediately throw `` suspend “ exception . In some cases when database is in mantainance , we need suspend datasource temporarily which make application can still run database-fail-tolerant bussiness . Currently Only Weblogic 's datasource `` suppend '' function meets this need . -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - *Have you searched the CLOSED issues already ? How about checking [ stackoverflow ] ( https : //stackoverflow.com/search ? q=HikariCP ) ? *
test that FastList : :clear ( ) sets all elements to null __EoT__ ` com.zaxxer.hikari.util.FastList : :clear ( ) ` sets the ` size ` variable to ` 0 ` and also sets all the elements in the ` FastList ` to ` null ` . However , ` com.zaxxer.hikari.util.TestFastList : :testClear ( ) ` only checks that ` size ` is ` 0 ` . This PR changes ` testClear ( ) ` to also check that all elements in the list are set to ` null ` after calling ` clear ( ) ` .
Removed some maturity wrinkles : ) __EoT__ 1. isConnectionAlive ( ) if connection is invalid/broken , avoid delay caused by calls ( and probably more exception ) on connection to be closed . 2. getConection ( ) removed dead code . poolEntry is always null if connectionBag.borrow ( ) throws InterruptedException . probably metricsTracker.recordBorrowTimeoutStats ( startTime ) ; and metricsTracker.recordConnectionTimeout ( ) are same/ should be one call ?
Add the thread name to potential leak detection warnings . __EoT__ Thread names are often modified to include context information like session details in complex multithreaded systems . Even when they have n't the thread name can give vital clues to link potential leaks to other information in a log file like request details or exceptions that may have occurred earlier .
HikariConfig # setDriverClassName ClassLoader precedence is backwards __EoT__ We provide bundled reference JDBC driver jars for our customers that use open source databases but allow them to upload and use their own version at runtime . We recently discovered that this is n't working as expected and tracked it down to the code in HikariConfig # setDriverClassName ( ) : public void setDriverClassName ( String driverClassName ) { Class < ? > driverClass = null ; try { driverClass = this.getClass ( ) .getClassLoader ( ) .loadClass ( driverClassName ) ; LOGGER.debug ( `` Driver class found in the HikariConfig class classloader { } '' , this.getClass ( ) .getClassLoader ( ) ) ; } catch ( ClassNotFoundException e ) { ClassLoader threadContextClassLoader = Thread.currentThread ( ) .getContextClassLoader ( ) ; if ( threadContextClassLoader ! = null & & threadContextClassLoader ! = this.getClass ( ) .getClassLoader ( ) ) { try { driverClass = threadContextClassLoader.loadClass ( driverClassName ) ; LOGGER.debug ( `` Driver class found in Thread context class loader { } '' , threadContextClassLoader ) ; } catch ( ClassNotFoundException e1 ) { LOGGER.error ( `` Failed to load class of driverClassName { } in either of HikariConfig class
Support default schema in configuration __EoT__ There is an option to select a default _catalog_ in HikariConfig , but none for selecting a default _schema_ . Could it be possible ? The option to set the schema in ` java.sql.Connection ` has been added in **Java 7** : [ Connection.setSchema ( ... ) ] ( http : //docs.oracle.com/javase/7/docs/api/java/sql/Connection.html # setSchema ( java.lang.String ) ) FYI , for setting _catalog_ there is in [ Connection.setCatalog ( ... ) ] ( http : //docs.oracle.com/javase/7/docs/api/java/sql/Connection.html # setCatalog ( java.lang.String ) ) in JDK .
Introduce factory for leak detection tasks __EoT__ This change splits off a ProxyLeakTaskFactory from the ProxyLeakTask class so that scheduling the task is done after its constructor completes . This prevents publishing the tasks `` this '' reference during construction . See [ `` Safe construction techniques '' by Brian Goetz ] ( https : //www.ibm.com/developerworks/java/library/j-jtp0618/index.html ) .
Connection.getMetaData ( ) causes Hikari to return dirty connections __EoT__ # # # # Environment `` ` HikariCP version : 2.6.1 JDK version : 1.8.0_121 Database : PostgreSQL 9.5.5 Driver version : 42.0.0.jre7 `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - ` ProxyConnection.markCommitStateDirty ( ) ` is not getting invoked when ` Connection.getMetaData ( ) ` methods are invoked . As a result , dirty connections ( in mid-transaction ) are being handed over to unrelated threads and causing runtime failures . Repro steps : 1 . Get a connection from the pool . Set ` autoCommit ` to false and invoke ` Connection.getMetaData ( ) .getTables ( null , `` PUBLIC '' , `` % '' , null ) ` . Under the hood , this fires the following SQL query : `` ` SELECT NULL AS TABLE_CAT , n.nspname AS TABLE_SCHEM , c.relname AS TABLE_NAME , CASE n.nspname ~ '^pg_ ' OR n.nspname = 'information_schema ' WHEN true THEN
update mockito-core version to 2.1.0 __EoT__
Check the correct sql state and error code when unwrapping the except… __EoT__ …ion chain .
Consider relaxing the check between dataSourceClassName and driverClassName __EoT__ If one sets both these properties , they 'll get : `` ` Caused by : java.lang.IllegalArgumentException : can not use driverClassName and dataSourceClassName together . at com.zaxxer.hikari.HikariConfig.validate ( HikariConfig.java:770 ) ~ [ HikariCP-2.4.7.jar : na ] `` ` See https : //github.com/spring-projects/spring-boot/issues/6568 As you are aware already , Spring Boot will automatically set the ` driverClassName ` value . This is a convenience for the user : we detect the driver based on the jdbc url . Once Spring Boot has initialized the ` HikariDataSource ` , it can further be tuned via our ` spring.datasource.hikari ` configuration namespace . Considering it makes sense that someone set url/driver/user/pass and then after changes his mind and set ` dataSourceClassName ` , how about relaxing that check so that the last set wins ? If the user defines a ` spring.datasource.hikari.data-source-class-name ` , that value will be used rather than the driver class name that was set automatically . The reason I am asking here rather than trying to fix that on our side is that I have no guarantee that this will happen : as a user you could create a
java.util.concurrent.atomic.AtomicInteger can not be cast to java.lang.String error when using HikariCP with certain third party libraries __EoT__ Hi 2.4.4 introduced feature that generates unique poolIds by storing AtomicInteger in System.getProperties . While nice feature , this broke some of our applications that used libraries that expected all system properties to be Strings , such as Typesafe Config and Ivy . Not sure how it could be fixed while keeping this functionality , I would create PR if i had any ideas.. `` ` java.lang.ClassCastException : java.util.concurrent.atomic.AtomicInteger can not be cast to java.lang.String at org.apache.ivy.core.settings.IvySettings.addAllVariables ( IvySettings.java:589 ) at org.apache.ivy.core.settings.IvySettings.addAllVariables ( IvySettings.java:583 ) at org.apache.ivy.core.settings.IvySettings.addSystemProperties ( IvySettings.java:303 ) at org.apache.ivy.core.settings.IvySettings. < init > ( IvySettings.java:298 ) at org.apache.ivy.core.settings.IvySettings. < init > ( IvySettings.java:218 ) at sbt.IvySbt.sbt $ IvySbt $ $ settings $ lzycompute ( Ivy.scala:71 ) at sbt.IvySbt.sbt $ IvySbt $ $ settings ( Ivy.scala:69 ) at sbt.IvySbt.ivyLockFile $ lzycompute ( Ivy.scala:119 ) at sbt.IvySbt.ivyLockFile ( Ivy.scala:119 ) at sbt.IvySbt.withDefaultLogger ( Ivy.scala:65 ) at sbt.IvySbt.withIvy ( Ivy.scala:127 ) at sbt.IvySbt.withIvy ( Ivy.scala:124 ) at sbt.IvySbt $ Module.withModule ( Ivy.scala:155 ) at sbt.IvyActions $ .makePom ( IvyActions.scala:94 ) at sbt.Classpaths $ $ anonfun $ 36.apply ( Defaults.scala:1059 ) at sbt.Classpaths $ $
URGENT : Unusual system clock change detected , soft-evicting connections from pool . __EoT__ Brett , I saw a ton of connections from a particular host last night ... `` ` dgcs= # select distinct usename , application_name , client_addr , count ( * ) from pg_stat_activity where client_addr = '10.101.152.33 ' group by usename , application_name , client_addr order by client_addr , usename ; usename | application_name | client_addr | count -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -- -+ -- -- -- - analytics_rw | | 10.101.152.33 | 289 catalog_rw | | 10.101.152.33 | 192 dgwatch_rw | | 10.101.152.33 | 40 member_rw | | 10.101.152.33 | 508 wps_processor_rw | | 10.101.152.33 | 200 ( 5 rows ) `` ` This morning , come to find the following in the log files every hour or so ... `` ` 2016-01-25 21:09:15,498 WARN [ a3808e51-ff45-4d72-b5de-7efdd973ec27 ] [ Hikari housekeeper ( pool 1-MemberConnectionPool ) ] [ pool.HikariPool ] - 1-MemberConnectionPool - Unusual system clock change detected , soft-evicting connections from pool . 2016-01-25 21:09:17,948 WARN [ a3808e51-ff45-4d72-b5de-7efdd973ec27 ] [ Hikari housekeeper (
URGENT : Unusual system clock change detected , soft-evicting connections from pool . __EoT__ Brett , I saw a ton of connections from a particular host last night ... `` ` dgcs= # select distinct usename , application_name , client_addr , count ( * ) from pg_stat_activity where client_addr = '10.101.152.33 ' group by usename , application_name , client_addr order by client_addr , usename ; usename | application_name | client_addr | count -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -- -+ -- -- -- - analytics_rw | | 10.101.152.33 | 289 catalog_rw | | 10.101.152.33 | 192 dgwatch_rw | | 10.101.152.33 | 40 member_rw | | 10.101.152.33 | 508 wps_processor_rw | | 10.101.152.33 | 200 ( 5 rows ) `` ` This morning , come to find the following in the log files every hour or so ... `` ` 2016-01-25 21:09:15,498 WARN [ a3808e51-ff45-4d72-b5de-7efdd973ec27 ] [ Hikari housekeeper ( pool 1-MemberConnectionPool ) ] [ pool.HikariPool ] - 1-MemberConnectionPool - Unusual system clock change detected , soft-evicting connections from pool . 2016-01-25 21:09:17,948 WARN [ a3808e51-ff45-4d72-b5de-7efdd973ec27 ] [ Hikari housekeeper (
HikariProxyCallableStatement is missing overriden default method causing SQLFeatureNotSupportedException __EoT__ Hi , When running HikariCP on Java8 , ` HikariProxyCallableStatement ` class is missing overriden definition of methods from ` CallableStatement ` interface : - ` registerOutParameter ( String parameterName , SQLType sqlType ) ` - ` registerOutParameter ( String parameterName , SQLType sqlType , int scale ) ` - ` registerOutParameter ( String parameterName , SQLType sqlType , String typeName ) ` All of them are marked as default , hence are not generated by ` JavassistProxyFactory ` . This is causing a ` SQLFeatureNotSupportedException ` if any one of the methods is called on HikaruCP prepared statement despite the fact that method itself is implemented in particular ` CallableStatement ` .
FastList iterator method called by Tomcat __EoT__ The Tomcat 's ThreadLocal leak detection calls the [ FastList # iterator ( ) ] ( https : //github.com/brettwooldridge/HikariCP/blob/e96612281bf1159f28ad4789a275307780606e8e/src/main/java/com/zaxxer/hikari/util/FastList.java # L209 ) method which throws an ` UnsupportedOperationException ` . `` ` if ( o instanceof Collection < ? > ) { Iterator < ? > iter = ( ( Collection < ? > ) o ) .iterator ( ) ; try { while ( iter.hasNext ( ) ) { Object entry = iter.next ( ) ; if ( loadedByThisOrChild ( entry ) ) { return true ; } } } catch ( ConcurrentModificationException e ) { log.warn ( sm.getString ( `` webappClassLoader '' , clazz.getName ( ) , getContextName ( ) ) , e ) ; } } `` ` Here : [ WebappClassLoaderBase.java # L2197 ] ( https : //github.com/apache/tomcat/blob/121ed33653eccf40da190fee5afcd622046e60af/java/org/apache/catalina/loader/WebappClassLoaderBase.java # L2197 ) This is not blocking but it logs a stack trace in WARN which is painful in case of integration tests with Tomcat embeded . `` ` 18:05:21.109 [ main ] WARN o.a.c.loader.WebappClassLoaderBase - Failed to check for ThreadLocal references for web application [ /385e17eb-91b5-4e5d-9bbb-ada975375489 ] java.lang.UnsupportedOperationException : null at com.zaxxer.hikari.util.FastList.iterator ( FastList.java:209 ) ~ [ HikariCP-2.4.1.jar : na
Should ProxyStatement.getResultSet ( ) always return the same instance ? __EoT__ Hi , currently ProxyStatement.getResultSet ( ) returns a new ( proxy ) instance for each call . However , JDBC drivers seem to usually return the same instance . For code which rely on object identity on Statement.getResultSet ( ) , behavior might be altered . I know that relying on ResultSet identiy is usually a bad thing - but there might be valid use cases , e.g . when using further ( development-time ) jdbc proxy instances which wrap the ones from HikariCP . I could not find a statement within the JDBC 's javadoc/spec regarding this . So this is more a question ( than a bug report ) if this can be changed that way to minimize artifacts introduced by HikariCP .
Make java.beans optional ( or not used ) __EoT__ Zipkin uses a base docker image that derives ` FROM delitescere/java:8 ` This is a JRE , not a JDK , specifically Zulu JRE compact3 profile . That profile does not include the ` java.beans ` package . It looks like this is implicitly used by ` HikariConfig ` when debug logging is enabled . Can it not ? : ) `` ` query_1 | ERR [ 20150910-12:42:31.819 ] ThriftQueryService : Caused by java.lang.NoClassDefFoundError : java/beans/IntrospectionException query_1 | ERR [ 20150910-12:42:31.819 ] ThriftQueryService : at com.zaxxer.hikari.HikariConfig.logConfiguration ( HikariConfig.java:827 ) query_1 | ERR [ 20150910-12:42:31.819 ] ThriftQueryService : at com.zaxxer.hikari.HikariConfig.validate ( HikariConfig.java:782 ) query_1 | ERR [ 20150910-12:42:31.819 ] ThriftQueryService : at com.zaxxer.hikari.HikariDataSource.getConnection ( HikariDataSource.java:94 ) -- snip -- `` `
[ 2.4.x ] Ensure closed connections returned to pool __EoT__ If an exception occurs while closing a connection 's open statements ( e.g . NullPointerException due to concurrent close of statement with connection ) , the connection was not returned to the pool . We now check for this possibility and ensure the connection is returned to the pool .
Improved keep alive query handling __EoT__ Judging from the try-with-resources and the small scope , we are not interested in the ResultSet . ( NB : I originally fixed this on 2.3.x , read that you rather want fixes on the dev branch , so forward ported it but saw it was fixed already , so good on you ! I just propose this as a better fix , do with it what you want )
no MBean interface __EoT__ Just finished implementing HikariCP in an app to replace BoneCP . The pool configures and runs successfully , but as soon as I try and turn on the JMX monitoring , I see the following . [ 2015-06-27 12:00:56.756 ] [ WARN ] HikariMBeanElf - Unable to register management beans . javax.management.NotCompliantMBeanException : com.zaxxer.hikari : type=PoolConfig ( ZC_DBA ) mbean has no MBean interface for class com.zaxxer.hikari.HikariDataSource at com.caucho.jmx.AbstractMBeanServer.createMBean ( AbstractMBeanServer.java:441 ) at com.caucho.jmx.AbstractMBeanServer.registerMBean ( AbstractMBeanServer.java:415 ) at com.zaxxer.hikari.pool.HikariMBeanElf.registerMBeans ( HikariMBeanElf.java:67 ) at com.zaxxer.hikari.pool.BaseHikariPool. < init > ( BaseHikariPool.java:170 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:60 ) at com.zaxxer.hikari.pool.HikariPool. < init > ( HikariPool.java:48 ) at com.zaxxer.hikari.HikariDataSource. < init > ( HikariDataSource.java:80 ) at com.zaneray.foundation.dbconnection.HikariCPPool.connect ( HikariCPPool.java:79 ) [ 12:00:53.700 ] { main } Windows 8.1 6.3 amd64 [ 12:00:53.700 ] { main } Java ( TM ) SE Runtime Environment 1.8.0_45-b15 , UTF-8 , en And this is using the most recent 2.3.8 release . ( edit ) I suppose this could simply be an issue with an outdated version of Resin also , not the pool or the JVM
Improvements __EoT__ Some improvements . Nothing particularly big , but still useful ( I hope ) . WDYT ?
Version 2.3.6 fails with : Driver with class name org.hsqldb.jdbcDriver was not found among registered drivers __EoT__ Hi , With version 2.3.4 everything works fine . But as soon as I upgrade to 2.3.6 the pool is unable to find the HSQLDB jdbc driver . Thanks for looking into this . Best regards , Ulf Ekström
Allow MetricsTracker to be set/updated/overwritten after the pool was created ? __EoT__ In follow-up of issue # 112 , it would be nice if the MetricsTracker could be set after that the BaseHikariPool ( ) is constructed . In our project ( https : //bitbucket.org/beforeach/across-standard-modules/src/0e73c0beb971bac0e363eddb49a337996790d7b4/metric-module/src/main/java/com/foreach/across/modules/metrics/config/DataSourceMetricModuleConfiguration.java ? at=spring-data ) we are writing a spring module which `` injects '' metrics if HikariDataSources are found . We would be autowiring the datasources and if they are HikariDataSource instances , set the MetricsTracker accordingly . However , we have a bit of a catch-22 . DataSources in the across framework are initialized very early in the bootstrap ( because it applies liquibase installers and whatnot ) . It would be impossible for our MetricRegistry module to create a bean before that ( because the modules are bootstrapped after datasources are bootstrapped ) . To cut a long story short , it would be nice if the MetricsTracker could also be changed/updated after the pool was created ( without having to expose the pool explicitly of course ) Right now we have this hackerish code which seems to work `` okay '' as a test ( but of course will fail `` isRecordMetrics ''
Codahale metrics and JNDI config __EoT__ I have two questions regarding metrics in Hikari : - We are using Tomcat 's JNDI to configure a Hikari data source on production . Is there a way to specify a metrics registry there ? If not how would I obtain a handle to HikariDataSource/HikariConfig so I could set the metrics registry programmatically ? - The metrics registry instance we use in our application is actually a subclass of the Yammer Metrics/Codahale Metrics registry class . And in the setMetricRegistry in AbstractHikariConfig there is a check : if ( metricRegistry ! = null & & ! metricRegistry.getClass ( ) .getName ( ) .contains ( `` MetricRegistry '' ) ) { throw new IllegalArgumentException ( `` Class must be an instance of com.codahale.metrics.MetricRegistry '' ) ; } I 'm a bit puzzled as to why we have a check like this that does n't seem very robust .
Why ca n't InitializationFailFast=true be used with MinimumIdle=0 ? __EoT__ I 'm developing a desktop application that occasionally connects to a database . I would like to use HikariCP to cache connections , but keep no pool of idle connections . I tried setting MinimumIdle=0 , but then I get no immediate feedback if the end-user enters an invalid username/password . Why is isInitializationFailFast ( ) only called in fillPool ( ) ? Could it be called in the catch ( ) block of addConnection ( ) and throw the RuntimeException from there ? Or is it possible to add some kind of handler for exceptions thrown in addConnection ( ) to determine if the Exception is temporary ( eg . network issues ) or permanent ( eg . username invalid ) ?
com.zaxxer.hikari.HikariDataSource.unwrap ( Class < T > ) does not return this __EoT__ The aforementioned method does not return ` this ` if this is an instance of the argument class . I would need to unwrap the HikariDataSource instance from a wrapper but I ca n't easily do it right now .
Wrong Properties iteration in PropertyBeanSetter __EoT__ In ` com.zaxxer.hikari.util.PropertyBeanSetter.setTargetFromProperties ( Object , Properties ) ` you 're using ` java.util.Hashtable.entrySet ( ) ` to iterate over properties , but you should rather use ` java.util.Properties.propertyNames ( ) ` or ` java.util.Properties.stringPropertyNames ( ) ` , otherwise you will lose default properties specified at construction time with ` java.util.Properties.Properties ( Properties ) ` . This also applies to ` com.zaxxer.hikari.util.PropertyBeanSetter.copyProperties ( Properties ) ` , which uses ` java.util.Hashtable.keySet ( ) ` .
NoClassDefFoundError after upgrading to 2.2.0 __EoT__ Just upgraded to ` HikariCP 2.2.0 ` using sbt and when compiling I get these warnings : `` ` [ warn ] Class com.codahale.metrics.MetricRegistry not found - continuing with a stub . [ warn ] Class com.codahale.metrics.MetricRegistry not found - continuing with a stub . [ warn ] Class com.codahale.metrics.MetricRegistry not found - continuing with a stub . `` ` and when I try to create a connection pool I get this stack trace : `` ` [ info ] Exception encountered when attempting to run a suite with class name : testing.schemas.generatedSchemas *** ABORTED *** [ info ] java.lang.NoClassDefFoundError : Lcom/codahale/metrics/MetricRegistry ; [ info ] at java.lang.Class.getDeclaredFields0 ( Native Method ) [ info ] at java.lang.Class.privateGetDeclaredFields ( Class.java:2575 ) [ info ] at java.lang.Class.getDeclaredFields ( Class.java:1908 ) [ info ] at com.zaxxer.hikari.HikariConfig.copyState ( HikariConfig.java:757 ) [ info ] at com.zaxxer.hikari.HikariDataSource. < init > ( HikariDataSource.java:74 ) -- -snip -- - [ info ] Cause : java.lang.ClassNotFoundException : com.codahale.metrics.MetricRegistry [ info ] at java.net.URLClassLoader $ 1.run ( URLClassLoader.java:372 ) [ info ] at java.net.URLClassLoader $ 1.run ( URLClassLoader.java:361 ) [ info ] at java.security.AccessController.doPrivileged ( Native Method ) [ info ] at java.net.URLClassLoader.findClass (
Close connectons async . __EoT__ Why : When db goes down , it can cause HikariCP to block on getConnection more than the allowed connectionTimeout , depending on jdbc driver timeout setting . In some cases , this could be a long time . Added a test that shows this behaviour . The test will fail w/o the changes to HikariPool .
Possible Race Condition on Shutdown __EoT__ Hi , Continuing on from the forums , thought I might as well open an issue for tracking purposes . I 'm seeing this now and again when I shutdown ( ctrl+c ) my Spring application ( using HikariCP as the datasource provider ) : `` ` [ 2014-07-30 18:06:55.004 ] [ ] [ DEVELOPMENT ] [ WARN ] [ com.zaxxer.hikari.pool.HikariPool ] [ 279 ] - Internal accounting inconsistency , totalConnections=-2 java.lang.Exception : null at com.zaxxer.hikari.pool.HikariPool.closeConnection ( HikariPool.java:279 ) [ HikariCP-2.0.1.jar : na ] at com.zaxxer.hikari.pool.HikariPool.releaseConnection ( HikariPool.java:221 ) [ HikariCP-2.0.1.jar : na ] at com.zaxxer.hikari.proxy.ConnectionProxy.close ( ConnectionProxy.java:343 ) [ HikariCP-2.0.1.jar : na ] at com.zaxxer.hikari.util.PoolUtilities.quietlyCloseConnection ( PoolUtilities.java:18 ) [ HikariCP-2.0.1.jar : na ] at com.zaxxer.hikari.pool.HikariPool.lambda $ abortActiveConnections $ 5 ( HikariPool.java:478 ) [ HikariCP-2.0.1.jar : na ] at com.zaxxer.hikari.pool.HikariPool $ $ Lambda $ 63/633170599.accept ( Unknown Source ) [ HikariCP-2.0.1.jar : na ] at java.util.stream.ForEachOps $ ForEachOp $ OfRef.accept ( ForEachOps.java:183 ) [ na:1.8.0_11 ] at java.util.ArrayList $ ArrayListSpliterator.forEachRemaining ( ArrayList.java:1359 ) [ na:1.8.0_11 ] at java.util.stream.AbstractPipeline.copyInto ( AbstractPipeline.java:512 ) [ na:1.8.0_11 ] at java.util.stream.ForEachOps $ ForEachTask.compute ( ForEachOps.java:290 ) [ na:1.8.0_11 ] at java.util.concurrent.CountedCompleter.exec ( CountedCompleter.java:731 ) [ na:1.8.0_11 ] at java.util.concurrent.ForkJoinTask.doExec
PropertyBeanSetter fails to set DataSource # url for some databases __EoT__ Slightly older versions of H2 provide JdbcDataSource # setURL , but not JdbcDataSource # setUrl . That was corrected in a recent revision , however it will cause issues for many Hibernate users . Could PropertyBeanSetter # setTargetFromProperties be improved to handle crappy JDBC impls ? ; ) I 'm including a workaround in hibernate-hikaricp , for now . Thanks !
NullPointerException within HikariDataSource.shutdown ( ) __EoT__ I have a encountered a NullPointerException using the close method of HikariDataSource ( 1.3.2 ) when using it as a spring bean . Following use case . A declared a HikariCP data source as a spring bean in Java config manner . Here is the code : `` ` java @ Bean ( destroyMethod = `` close '' ) public HikariDataSource dataSource ( @ Value ( `` $ { db.name } '' ) String databaseName , @ Value ( `` $ { db.user } '' ) String user , @ Value ( `` $ { dashboard.db.pass } '' ) String password , @ Value ( `` $ { db.login.timeout.sec } '' ) int loginTimeoutSec , @ Value ( `` $ { db.connect.timeout.ms } '' ) final int connectionTimeoutMs , @ Value ( `` $ { db.max.pool.size } '' ) final int maxPoolSize , @ Value ( `` $ { db.min.pool.size } '' ) final int minPoolSize , @ Value ( `` $ { db.test.query } '' ) final String connectionTestQuery , @ Value ( `` $ { db.acq.inc } '' ) final int acquireIncrement ) throws SQLException { MysqlDataSource mysqlDataSource = new MysqlDataSource (
使用 setEnableAutoLoadmore 属性 , 快速上拉多次footer 没有隐藏 __EoT__ refreshLayout.setEnableAutoLoadmore ( false ) ; //开启自动加载功能（非必须） 在基本的功能使用 ( BasicUsingActivity ) 中 注释 setEnableAutoLoadmore ( false ) 连续快速上拉会出现加载控件还在显示
Directory Bug __EoT__ The correct pattern to make a directory is : ` if ( ! dir.mkdirs ( ) & & ! dir.isDirectory ( ) ) { error } ` mkdirs checks for exists so the exists check is redundant .
Provide OSGi Metadata in Manifest __EoT__ To make it possible to use the lib without any extra work inside OSGi it would be good to include OSGi Metadata in the Manifest . Since this is ignored for no OSGi environments it wont disturb other users . I 'll provide a PR for this .
Another EDIFACT related bug in the DataMatrix encoder __EoT__ I believe [ this ] ( https : //github.com/nu-book/zxing-cpp/pull/25/commits/ec2e5c6feb81c7b5d26be59d65a6ff43394cffd7 ) issue is also existing in this JAVA code base .
Update ZXing.NET project link __EoT__ The ZXing.NET project is originally hosted on CodePlex , but Microsoft shut down the site recently , then the developer moved it to GitHub . So I update the link .
Fix some typos __EoT__
Java-SE CommandLineRunner no longer accepts files with spaces in path __EoT__ `` ` ... /java ... .j2se.CommandLineRunner `` /some space directory/file.png '' Exception in thread `` main '' com.beust.jcommander.ParameterException : `` [ Main class ] '' : could n't convert `` /some space directory/file.png '' to a RFC 2396 and RFC 2732 compliant URI at com.beust.jcommander.converters.URIConverter.convert ( URIConverter.java:41 ) at com.beust.jcommander.converters.URIConverter.convert ( URIConverter.java:31 ) at com.beust.jcommander.JCommander.convertValue ( JCommander.java:1305 ) at com.beust.jcommander.JCommander.parseValues ( JCommander.java:767 ) at com.beust.jcommander.JCommander.parse ( JCommander.java:282 ) at com.beust.jcommander.JCommander.parse ( JCommander.java:265 ) at com.beust.jcommander.JCommander. < init > ( JCommander.java:210 ) at com.google.zxing.client.j2se.CommandLineRunner.main ( CommandLineRunner.java:52 ) `` ` Possibly connected to # 539
Incorrect Code 93 decoding __EoT__ I wanted to use the zxing readers to check the encoding of barcodes in [ Okapi ] ( https : //github.com/woo-j/OkapiBarcode/ ) . However , I think I may have found a bug in zxing -- the following image , which encodes `` ( ) * , { } ~ '' using Code 93 , decodes as `` ( ) * , EGH '' in zxing . My physical barcode scanner reads `` ( ) * , { } ~ '' , as does Okapi . ! [ special-characters-with-ctrl-3 ] ( https : //cloud.githubusercontent.com/assets/178883/8790571/34f50d54-2f1d-11e5-9f45-1fc13ac2e41c.png )
Custom search format URL not properly filled in __EoT__ In an example like https : //my.own.website/index.php ? f= % f & t= % t & s= % s only % s seems to be replaced right now . At least one problem is that the code calls ` String.replace ( ) ` to replace ` % f ` , but then uses a regex ; it should call ` String.replaceFirst ( ) ` . It also seems to be replacing in the wrong String in another case -- the input string instead of the custom search URL string .
Possible crash in crossCheckDiagonal function of QRCode __EoT__ We have a crash report when using zxing in our app . It seems to have a crash in crossCheckDiagonal function . When I review the code , I find the following code may cause the problem : -- - // Start counting up , left from center finding black center mass int i = 0 ; while ( startI - i > = 0 & & image.get ( centerJ - i , startI - i ) ) { stateCount [ 2 ] ++ ; i++ ; } -- - I think this line : while ( startI - i > = 0 & & image.get ( centerJ - i , startI - i ) ) { should change to this while ( ( startI - i > = 0 ) & & ( centerJ - i > = 0 ) & & matrix.get ( centerJ - i , startI - i ) ) { I am not sure if it is right or can it can fix this problem .
Code39 - problems with vertical lines near the barcode margin __EoT__ Hi all , first of all , thank you for the good work : the zxing library is nearly perfect , but I 've had strange issues when trying to decode a barcode placed near vertical lines which , I guess , mimick another character of the barcode . So , the barcode is not recognized at all . I'v tried other product ( i.e. , JavaBar ) and it recognizes the barcode without any problem . I attach a sample image . ! [ 57 ] ( https : //f.cloud.github.com/assets/6940240/2408747/95744660-aaa1-11e3-8bed-8a0c66e944fc.jpg ) What could I do to make zxing ignore that lines ? thank you Maurizio
Validation for custom search URL fails __EoT__ The validation code for the custom search URL in PreferencesFragment seems to pass the user input to the URL class without removing the placeholders ( % s etc ) . Unfortunately this seems to yield a syntax error on KitKat as % s is not a valid escape code and thus prevents the use of a custom search URL . If I replace the % with % 25 ( escaped % ) the URL is accepted but the Barcode contents does not get inserted . Test case : KitKat on Galaxy S4 URL rejected : https : //www.google.com/search ? q= % s URL accepted but not working : https : //www.google.com/search ? q= % 25s Inserting the rejected URL directly into the preferences file ( as root ) works as expected . Possible solution : Substitution of the placeholders with an empty string prior to the validation .
Support for Code B FNC characters __EoT__ I have a need to generate FNC characters for a scanner we are using . Previously the Code128Writer would crash for FNC characters , even though they were allowed in the input string . It correctly would set Code B , but if one of the ESCAPE_FNC_\* characters were present , it would crash with an ArrayOutOfBoundsException since the escape characters were not in the mapping array . I 've added the mapping to the correct Code B characters . Unless I 'm missing something there are n't any lot of tests around Code128Writer . I 've added a test case and exercised the Code B code . It 's not exhaustive but it tests my use case . I 'd appreciate direction on what should be tested here - my knowledge of barcodes is pretty much the Wikipedia article .
Invalid UPC_E leads to StringIndexOutOfBoundsException in ResultParser.parseResult __EoT__ I get several stack like the following : 01-23 22:10:43.724 : E/AndroidRuntime ( 28903 ) : java.lang.StringIndexOutOfBoundsException : length=1 ; regionStart=1 ; regionLength=6 01-23 22:10:43.724 : E/AndroidRuntime ( 28903 ) : at java.lang.String.startEndAndLength ( String.java:593 ) 01-23 22:10:43.724 : E/AndroidRuntime ( 28903 ) : at java.lang.String.getChars ( String.java:902 ) 01-23 22:10:43.724 : E/AndroidRuntime ( 28903 ) : at com.google.zxing.oned.UPCEReader.convertUPCEtoUPCA ( UPCEReader.java:124 ) 01-23 22:10:43.724 : E/AndroidRuntime ( 28903 ) : at com.google.zxing.client.result.ProductResultParser.parse ( ProductResultParser.java:51 ) 01-23 22:10:43.724 : E/AndroidRuntime ( 28903 ) : at com.google.zxing.client.result.ProductResultParser.parse ( ProductResultParser.java:28 ) 01-23 22:10:43.724 : E/AndroidRuntime ( 28903 ) : at com.google.zxing.client.result.ResultParser.parseResult ( ResultParser.java:87 ) While this stack comes from calling ResultParser.parseResult with an effectively invalid UPC_E ( as it has only 1 char while I understand an UPC_E should have 8 chars ) , I also encountered an equivalent issue with a decoded UPC_E . If it is expected to throy , I guess it should be handled at most in ResultParser.parseResult as this method should then try the next Parser .
2.3.0 __EoT__
Update README.md __EoT__ added missing `` ) ''
update to compileSdkVersion 25 + few other minor upgrades __EoT__ please let me know if there is anything else you 'd like upgraded . FYI I was unable to build the project with ` ./gradlew build ` until I commented out ` apply plugin : 'com.github.dcendents.android-maven ' ` & ` install { ... } ` not sure if something with my setup or if this should be noted in readme . EDIT : Figured out issue , I needed to upgrade maven plugin as well
2.x : Call the doOn { Dispose|Cancel } handler at most once __EoT__ This PR makes sure the ` doOnDispose ` , ` doOnCancel ` and ` doOnLifecycle ` execute their cancellation handler once . Resolves : # 6268 .
2.x : Update Creating Observables docs __EoT__ This PR adds a link to the ` generate ` section to the outline and fixes a broken image link . Relates to : # 6260
Inline SubscriptionHelper.isCancelled ( ) __EoT__ Addresses https : //github.com/ReactiveX/RxJava/pull/6258 # discussion_r228725602
2.x : Fix cancel/dispose upon upstream switch for some operators __EoT__ This PR extends the ` SubscriptionArbiter ` to optionally allow or disallow cancelling the current ` Subscription ` if it is replaced by a new one . Some operators do not need to cancel the current ` Subscription ` : ` concat ` , ` concatMap ` , ` repeat ` , ` repeatWhen ` , ` retry ` and ` retryWhen ` . In addition ` repeatWhen ` and ` retryWhen ` were cancelling when the handler sequence itself terminated . The code has been updated to disconnect the upstream upon the completion/failure but before signaling the handler . The Reactive Streams specification also disallows synchronous cancellation after the terminal event anyway . Others may actually need to cancel , such as ` Timeout ` . ` Observable ` s do n't have a specific arbiter , they use the ` DisposableHelper ` methods and the relevant ones were changed to ` replace ( ) ` instead of the disposing ` set ` call . Some tests actually checking if the dispose/cancel happens and had to be updated . The ` Flowable.delaySubscription ( Publisher ) ` also used
2.x : Add explanation text to Undeliverable & OnErrorNotImplemented exs __EoT__ This PR adds detailed error message to the ` UndeliverableException ` and ` OnErrorNotImplementedException ` as they are the most common exception-related questions around . # # # # UndeliverableException > The exception could not be delivered to the consumer because it has already canceled/disposed the flow or the exception has nowhere to go to begin with . Further reading : https : //github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0 # error-handling | ` < original exception message > ` # # # # OnErrorNotImplementedException > The onError handler in the subscribe ( ) method is not provided . Please specify it to avoid this type of exception . Further reading : https : //github.com/ReactiveX/RxJava/wiki/Error-Handling | ` < original exception message > `
2.x : Update Mathematical and Aggregate Operators docs __EoT__ This PR updates the ` Mathematical-and-Aggregate-Operators.md ` wiki page as per issue # 6132 : - Remove obsolete operators - Link to the [ RxJava2Extensions ] ( https : //github.com/akarnokd/RxJava2Extensions ) project - Add examples The page now follows the structure that was defined in # 6131 . __Question__ : Should __Available in__ in the *Mathematical Operators* section be renamed to something else ( e.g . __Defined for__ ) , because the operators are not part of the core RxJava operators ?
2.x : Expand Creating-Observables.md wiki __EoT__ This PR expands and updates the ` Creating-Observables.md ` wiki page to 2.x terminology and feature set . This also serves as a discussion basis about how to detail the various operators . The PR suggests the following structure : - Top outline with links to the family of operators - Each operator lists : - an availability list for the various reactive types : ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png ) available , ! [ image ] ( https : //raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png ) not available - ReactiveX documentation link if available - Short description - Example , named as ` operator example ` so that the heading generated can be linked to directly ( i.e. , ` Creating-Observables.md # justexample ` . Related tracking issue : # 6132
2.x : Improve Completable.delay operator internals __EoT__ This PR improves the ` Completable.delay ( ) ` operator internals , reducing allocation and indirection .
Make it explicit that throttleWithTimout is an alias of debounce __EoT__ The documentation implies that these two methods are somewhat different . Fixing that confusion , as discussed in # 6043 : - Made the descriptions of these methods the same - Mentioned that it is an alias in the first paragraphs of ` throttleWithTimeout ` javadoc comments - Removed the links to third-party websites
Update DESIGN.md __EoT__ I 've just read the DESIGN.md and noticed some things that I could do to improve the quality of the DESIGN.md . So as a result of my `` proofreading '' I mainly : - Added periods at the ending of some sentences . - Did case matching of certain types and terms . e.g . ` OnSubscribe ` - > ` onSubscribe ` OR flowable - > ` Flowable ` . Hope it helps ! : smile :
2.x : Improve Observable.takeUntil __EoT__ This PR upgrades the ` Observable.takeUntil ` to a newer algorithm ( the ` Flowable ` version is up-to-date ) . Some unit test remnants from the v1 era were upgraded too as the new algorithm no longer disposes the source or other if they terminate on their own ( the Reactive Streams specification does n't allow that anyway ) .
2.x : Dedicated { Single|Maybe } .flatMap { Publisher|Observable } & andThen ( Observable|Publisher ) implementations __EoT__ This PR implements the following operators directly instead of conversions between base types : - ` Single.flatMapObservable ` - ` Maybe.flatMapObservable ` - ` Maybe.flatMapPublisher ` - ` Completable.andThen ( Observable ) ` - ` Completable.andThen ( Publisher ) ` The ` Single.flatMapPublisher ` was reimplemented in # 6021 already .
2.x : readme : mention 1.x eol ; 2.x snapshot javadoc url __EoT__ Small update to the ` README.md ` : - 1.x end-of-life notice - link to the snapshot Javadocs
2.x : deprecate getValues ( ) in Subjects/Processors __EoT__ This PR deprecates the ` getValues ( ) ` and ` getValues ( T [ ] ) ` methods in ` AsyncSubject ` , ` BehaviorSubject ` , ` AsyncProcessor ` and ` BehaviorProcessor ` . These methods were remnants of an early 2.x API design where ` Subject ` itself had these methods for the sake of ` ReplaySubject ` and ` SerializedSubject ` and thus every other subject type had to implement them . The listed subjects and processors above have at most one value accessible via ` getValue ( ) ` which can then be assigned to an array index manually if needed .
2.x : Fix Flowable.take to route post-cancel errors to RxJavaPlugins.onError __EoT__ This PR makes sure errors emitted by the upstream just after the ` Flowable.take ` has received the specified amount of items get routed to ` RxJavaPlugins.onError ` . ` Observable.take ( ) ` and ` Flowable.limit ( ) ` were already doing this . Added unit tests to verify the behavior across the board .
AppendOnlyLinkedArrayList # forEachWhile is not breaking iteration properly __EoT__ ` AppendOnlyLinkedArrayList # forEachWhile ( NonThrowingPredicate ) ` was ` break ` -ing from inner loop instead of ` return ` -ing when predicate returned ` true ` . This caused iteration to continue with items from the next array bucket .
2.x : Allow @ SchedulerSupport on constructors . __EoT__ Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload . In both cases I 'd want to slam ` @ SchedulerSupport ` on it so it can be handled properly by static analysis as well .
fix typo ` ingored ` __EoT__ just fix few typos . Thank you for contributing to RxJava . Before pressing the `` Create Pull Request '' button , please consider the following points : - [ x ] Please give a description about what and why you are contributing , even if it 's trivial . Just fix typos . - [ x ] Please include the issue list number ( s ) or other PR numbers in the description if you are contributing in response to those . Just typo fix , I assume an issue is unnecessary . - [ x ] Please include a reasonable set of unit tests if you contribute new code or change an existing one . If you contribute an operator , ( if applicable ) please make sure you have tests for working with an ` empty ` , ` just ` , ` range ` of values as well as an ` error ` source , with and/or without backpressure and see if unsubscription/cancellation propagates correctly . No .
2.x : Fix Completable.toMaybe ( ) @ return javadoc . __EoT__ Current javadoc : `` ` java @ return a { @ link Maybe } that emits a single item T or an error . `` ` But in reality , converting ` Maybe ` to ` Completable ` should never emit ` item T ` .
2.x : Fix the extra retention problem in ReplaySubject __EoT__ In the bounded buffers of ` ReplaySubject ` , the head reference may retain one extra item when the trimming happens . Nulling out this reference is not possible at this point because old consumers may be still walking through the underlying linked list of nodes . However , replacing a head with the same next pointer ( which is always not null if value is not null ) but no value will eventually let the value get GCd . This cleanup does n't happen on every ` onNext ` because it doubles the node allocation and thus the overhead . This PR modifies the code so that terminal events do perform this head swapping and introduces the ` ReplaySubject.cleanupBuffer ( ) ` method to allow the user to perform the head swapping while the ` ReplaySubject ` is not yet terminated and the cleanup is needed . If this type of change is accepted , the ` ReplayProcessor ` can also be refitted . For the ` replay ( ) ` operators , the terminal cleanup can be implemented but the on demand cleanup ca n't as there is
2.x : Fix window ( Observable|Callable ) upstream handling __EoT__ This PR fixes the upstream handling in ` Observable.window ( ObservableSource ) ` and ` Observable.window ( Callable < ObservableSource > ) ` operators to make sure if both the main output and the inner windows have been disposed , the upstream is also disposed . Fixes # 5881 . *Remark : * There are a couple of ` w ! = null ` checks showing up as partially covered . In theory , with the right interleaving , ` w ` can become ` null ` , but unfortunately the usual ` TestHelper.race ( ) ` testing is unlikely to trigger that case . There would be a higher chance with 3 threads ( one disposing , one completing the main and one completing the inner window ) but the current CI is effectively 1.5 - 2 cores/threads that tend to not produce a thorough interleaving .
2.x : Add Flowable.concatMapCompletable { DelayError } operator __EoT__ This PR adds the ` Flowable.concatMapCompletable ` and ` Flowable.concatMapCompletableDelayError ` operators as requested by # 4853 . The marbles will be updated in a separate PR .
2.x : Improve the JavaDoc of the other lift ( ) operators __EoT__ Improve the JavaDoc of the ` { Observable | Maybe | Single | Completable } .lift ( ) ` operator , adapting the text from # 5863 .
2.x : Add efficient concatWith ( Single|Maybe|Completable ) overloads __EoT__ This PR adds specialized overloads to the ` concatWith ` operator in ` Flowable ` and ` Observable ` . If accepted , the marbles will be updated in a separate PR . Related : # 5350 .
2.x : Detail distinct ( ) & distinctUntilChanged ( ) in JavaDoc __EoT__ The PR clarifies the comparison and retention behavior of the ` distinct ` and ` distinctUntilChanged ` operators ( in both ` Flowable ` and ` Observable ` ) .
2.x : add error handling section to merge ( ) operator docs __EoT__ This PR adds the **Error handling** JavaDoc section to the other ` merge ` operators throughout the base reactive classes . Note though that the following ` mergeDelayError ` methods do n't exist yet : - ` Maybe.mergeDelayError ( Publisher , int ) ` - ` Single.mergeDelayError ( * ) ` ( ` * ` all variants of their respective ` merge ` methods are missing ) These can be added in a separate PR and do n't require implementing new operators but to configure existing ones with ` delayError == true ` .
Remove apostrophe to correct grammar . __EoT__ - [ x ] Please give a description about what and why you are contributing , even if it 's trivial . This pull request corrects a minor grammar issue in the README . In this case we want the 3rd person present form of `` let '' , not the contraction `` let us '' . - [ x ] Please include the issue list number ( s ) or other PR numbers in the description if you are contributing in response to those . n/a - [ x ] Please include a reasonable set of unit tests if you contribute new code or change an existing one . If you contribute an operator , ( if applicable ) please make sure you have tests for working with an ` empty ` , ` just ` , ` range ` of values as well as an ` error ` source , with and/or without backpressure and see if unsubscription/cancellation propagates correctly . n/a
2.x : Fix JavaDoc wording of onTerminateDetach __EoT__ A missing ` nulls ` word from ` Flowable.onTerminateDetach ` and ` Observable.onTerminateDetach ` JavaDoc . The other types have this word already . Related : # 5782 .
2.x : Improve BehaviorProcessor JavaDoc __EoT__ A [ StackOverflow ] ( https : //stackoverflow.com/q/47982511/61158 ) question prompted me to look at ` BehaviorProcessor ` to find it quite lacking of a detailed JavaDoc . This PR adds sentences and examples ( I could think of ) to it that explain the available features and behavior of this ` Processor ` implementation . If the sentences are reviewed , the ` BehaviorSubject ` will be updated with the applicable information ( i.e. , everything minus backpressure related sentences ) .
2.x : Improve JavaDoc of retryWhen ( ) operators __EoT__ This PR improves the Javadoc of the ` retryWhen ` operators in the 5 base classes , adds example to handling an asynchronous source with delay where an early ` onComplete ` may cause unexpected terminations otherwise . Related : # 5772 .
2.x : Improve Javadocs of flatMapSingle and flatMapMaybe __EoT__ Clarify that ` flatMapSingle ` and ` flatMapMaybe ` merge in no particular order and fix the copy-paste error from ` flatMapCompletable ` as they have values to merge , not just waiting . Related : [ StackOverflow question ] ( https : //stackoverflow.com/questions/47176437/rxjava-2-observable-flatmapsingle-clarification )
2.x : Add missing license headers __EoT__ ` FixLicenseHeaders ` is currently failing when run locally ( it 's skipped on CI ) .
2.x : fix assertValueSequence reversed error message __EoT__ The error message/variable names in ` TestBaseConsumer.assertValueSequence ` was reversed : if more items were expected , it said `` Fewer '' and vice versa .
Add assertValueAt ( int , value ) to TestObserver __EoT__ I found myself frequently writing tests that want to check that an observable emitted a certain value second or third , but I do n't care what the first or other values one , so ` assertValues ( Object ... ) ) ` is more brittle . This PR implements an ` assertValueAt ( index , value ) ` method , similar to ` assertValue ( value ) ` . Tests are also added .
2.x : make withLatestFrom conditional subscriber , test cold consumption __EoT__ This PR adjusts # 5494 by converting the ` withLatestFrom ` operators into conditional subscribers and adds unit tests that verify a cold source is consumed fully if there is no event ( s ) from the other source ( s ) . ( Also there was a missing space before the bracked and the new unit test name had the ` test ` prefix . )
2.x : small note on Maybe.defaultIfEmpty regarding toSingle __EoT__ Ths PR replaces # 5485 regarding the issue of # 5480 because our javadoc validation did not allow that type of wording ( i.e. , mentioning ` Single ` when the method signature is not related to it ) .
2.x : Removing commented code from tests __EoT__ Hi , In this PR I 'm removing commented code from tests as it 's generally considered as bad practice . Part of this code is even not available in the current RxJava API . It does not resolve all of the issues like that , but only part of them . I did n't want to create PR with more changes because it will be harder to review . Rest of the similar issues could be resolved in the future PRs . Regards , Piotr
2.x : Replace duplicate calling method setAccessible on the same object in FunctionsTest class . __EoT__ I would like to add unit tests to my project and decided to watch tests in this repository . During reviewing testing class < code > FunctionsTest < /code > I watch duplicated calling method < code > setAccessible ( true ) < /code > at the same object .
2.x : fix periodic scheduler purging config not honored __EoT__ The ` SchedulerPoolFactory ` did not act properly on the system properties setup . Reported on StackOverflow : https : //stackoverflow.com/q/44717193/61158
2.x : fix/clarify the Observable class ' javadoc __EoT__ This PR rewords the javadoc of the ` Observable ` class a bit and adds a couple of extra clarifying sentences .
2.x Single.delay documentation and implementation inconsistent __EoT__ The documentation for Single.delay says that success or error signals will be delayed by the specified amount , but in fact errors are not delayed , only successes . I have no opinion on which one should be correct - I ran into it when mocking out the response for an incomplete backend to test a loading/error UI , e.g . ` Single.error ( ... ) .delay ( 3 , TimeUnit.SECONDS ) ` , and found that my errors never had a delay . It seems that Observable has both options , with a version of the method that has a boolean flag ` delayError ` . https : //github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/Single.java # L1636 https : //github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/internal/operators/single/SingleDelay.java # L66
DefaultObserver javadoc example fix __EoT__ The example in the javadoc of ` DefaultObserver ` is not compiling , ` DefaultObserver ` is not a ` Disposable ` . This PR updates the javadoc to provide a compiling example .
2.x : make SingleMap not allow map function return null __EoT__ Found code like below can works `` ` Single.just ( `` 1234 '' ) .map ( s - > null ) .subscribe ( s - > { System.out.println ( s ) ; } ) ; `` ` Because Single # just not allow null , so prevent mapper return null .
More nullability annotations __EoT__ Added nullability annotations to : - Disposables - Observers and some others
2.x : fix Flowable.toList ( ) onNext/cancel race __EoT__ This PR fixes the ` NullPointerException ` that can happen because ` cancel ` nulls out the value and ` onNext ` simply dereferences that value in ` FlowableToList ` . Reported in # 5246 .
2.x : Fix wrong comments in Functions.java “ Function3 ” - > “ BiFunction ” __EoT__ I 'm using this library in my company ( KakaoBank in Korea ) and interested in this library.. so I read whole code these days . I feel really thanks for all people who make awesome library and I just wanted to contribute this library .
2.x : cleanup based on IntelliJ 2017.1 inspections __EoT__ This PR is the result of running IntelliJ inspections on the code : - replace ` unsubscribe ` with ` cancel ` and ` dispose ` in the main classes to better match the 2.x terminology - write out a couple of local variables - remove unnecessary ` return ` and ` continue ` statements - remove unnecessary variable writes - remove unnecessary and unused fields - add ` final ` to some fields - fix typos
2.x : improve the documentation of Schedulers utility class . __EoT__ This PR improves the javadoc of the ` io.reactivex.schedulers.Schedulers ` utility class plus adds a missing ` SchedulerSupport ` constant for the ` single ( ) ` scheduler . Let me know if something needs further explanation ( or some new case needs explanation ) . Related : # 5145 .
2.x : add resilient versions of parallel map ( ) , filter ( ) & doOnNext ( ) __EoT__ This PR adds 2 new overloads to ` ParallelFlowable ` operators ` map ` , ` filter ` and ` doOnNext ` to enable per item error handling in case the main function fails with some exception . `` ` java Flowable.range ( 0 , 2 ) .parallel ( 1 ) .map ( v - > 1 / v , ParallelFailureHandling.SKIP ) .sequential ( ) .test ( ) .assertResult ( 1 ) ; `` ` The new ` ParallelFailureHandling ` has some default enumeration values to handle the common cases . In addition , the ` BiFunction ` overload allows bounded retries and/or conditional handling of failures . Related : # 5128 .
2.x : fix window ( ) with time+size emission problems __EoT__ The ` window ( ) ` operator overload with time and size bound did n't work correctly when some windows were terminated by the timeout and others by the size . This PR fixes : - the case when the operator restarts the time windows when the size bound is reached , - leaking of the worker , - the item counter not reset to zero when the time bound is reached , - periodic window bound stopped working after the first window . Related # 5104 ( again ) .
2.x : fix flatMap emitting the terminal exception indicator on cancel __EoT__ This PR fixes the case when ` Flowable.flatMap ` and ` Observable.flatMap ` would emit the ` ExceptionHelper.TERMINTED ` indicator exception to downstream due to emission-cancellation race . Reported on [ StackOverflow ] ( http : //stackoverflow.com/questions/42580195/what-is-the-meaning-of-no-further-exceptions ) .
2.x : fix LambdaObserver not cancelling the upstream __EoT__ The ` LambdaObserver ` did n't cancel the upstream when its ` onSubscribe ` and ` onNext ` callbacks crashed . Also reported on the mailing list : > Dave Smith : When I am using an operator in Observable that calls subscribe ( forEach as a example ) and the onNext function throws an Exception the underlying class ( LambdaObserver ) marks the subscription disposed but does not notify upstream that is is disposed . What is the reason for this ? The ` LambdaSubscriber ` was working correctly . Both received unit tests to ensure the correct behavior .
2.x : fix Observable.zip to dispose eagerly __EoT__ This PR fixes ` Observable.zip ` to dispose the sources outside the serialization loop , just like ` Flowable.zip ` does . This allows cancellation even if the serialization loop is busy/blocking inside an ` onNext ` emission . In addition , a unit test was added to ` Observable.zip ` as well . Reported in # 5111 .
2.x : fix Maybe.concat ( ) subscribe-after-cancel , verify others __EoT__ This PR fixes ` Maybe.concatX ` subscribing to the next source when the downstream cancelled the ` Flowable ` sequence from its ` onNext ` . This resulted in executing the subscription side-effects of the source to be immediately cancelled when it called ` onSubscribe ` on concat 's ` MaybeObserver ` . In addition , tests were added to verify the other types do n't have this kind of a problem . Related # 5100 .
2.x : RxJavaPlugin.get/setXXX generics ? __EoT__ For unit tests I frequently bump into the restrictiveness of `` ` java RxJavaPlugins.setErrorHandler ( Consumer < Throwable > handler ) ; `` ` I would like the signature to be `` ` java RxJavaPlugins.setErrorHandler ( Consumer < ? super Throwable > handler ) ; `` ` There are many more methods in ` RxJavaPlugins ` that could support lower and upper bounded wildcards . Can I make these changes ?
2.x : fix replay ( ) cancel/dispose NPE __EoT__ This PR fixes both ` Flowable.replay ( ) ` and ` Observable.replay ( ) ` throwing a ` NullPointerException ` if the connection is disconnect before the upstream calls ` onSubscribe ` on the connection being established . In practice , this requires an async cancellation to happen through ` refCount ( ) .unsubscribeOn ( ) ` for example . The validation tests simulate this by not calling ` onSubscribe ` until the synchronous connect/disconnect happens . Reported in # 5060 .
2.x : RxJavaPlugin.get/setXXX generics ? __EoT__ For unit tests I frequently bump into the restrictiveness of `` ` java RxJavaPlugins.setErrorHandler ( Consumer < Throwable > handler ) ; `` ` I would like the signature to be `` ` java RxJavaPlugins.setErrorHandler ( Consumer < ? super Throwable > handler ) ; `` ` There are many more methods in ` RxJavaPlugins ` that could support lower and upper bounded wildcards . Can I make these changes ?
2.x : document ( internal ) SimpleQueue __EoT__ The interface was missing javadoc on its methods .
Add StackOverflow links __EoT__ Add StackOverflow links to Readme . Also trigger CI for codecov.io integration check .
2.x : ExecutorScheduler.scheduleDirect to report isDisposed on complete __EoT__ This PR makes the ` Disposable ` returned by the ` ExecutorScheduler.scheduleDirect ( ) ` report ` isDisposed ` ` true ` if the task has actually finished , which should now be consistent with the ` Worker ` behavior of other schedulers . Reported in # 5004 .
2.x : assertNever ( T value ) / assertNever ( Predicate < T > valuePredicate ) __EoT__ This pull request adds to any class extending `` ` BaseConsumerTest `` ` the ability to assert that a given value was not emitted by the observable it was subscribed to , either with `` ` assertNever ( T value ) `` ` or `` ` assertNever ( Predicate < T > valuePredicate ) `` `
Fixed a typo and other cosmetics issues . __EoT__ Fixed a small typo in README.md .
2.x : fix publish ( Function ) not replenishing its queue __EoT__ I was working on converting the [ Monte Carlo PI benchmark ] ( http : //swave.io/usage/show-off/monte-carlo-pi.html ) to RxJava 2 and it turned out I forgot to replenish the internal queue of ` publish ( Function ) ` in case the upstream was not sync-fuseable . This PR fixes the replenishment problem for non-fused and async-fused sources by requesting after 75 % consumption . In addition , if an inner subscriber cancelled while it was at request 0 , the other inner subscribers might not have resumed draining . I 've also fixed two unit tests with wrong timeout unit of measure that randomly failed the tests on a slow machine or travis ( # 4902 ) .
Use t instead of value to allow for IDE naming __EoT__ Naming the value ` t ` instead of ` value ` allows the IntelliJ to intelligently name the variable based on the type when autocompleting . Before : `` ` Single.just ( new Dog ( ) ) .subscribe ( new SingleObserver < String > ( ) { @ Override public void onSubscribe ( Disposable d ) { } @ Override public void onSuccess ( Dog value ) { } @ Override public void onError ( Throwable e ) { } } ) ; `` ` After : `` ` Single.just ( new Dog ( ) ) .subscribe ( new SingleObserver < String > ( ) { @ Override public void onSubscribe ( Disposable d ) { } @ Override public void onSuccess ( Dog dog ) { } @ Override public void onError ( Throwable e ) { } } ) ; `` `
2.x : Fix typo in DisposableHelper __EoT__ Fixed a typo in DisposableHelper . ` curren ` - > ` current `
2.x : FlowableScanSeed - prevent multiple terminal events __EoT__ This PR * prevents multiple terminal events being emitted when the scan function throws * prevents processing of a later ` onNext ` if the previous ` onNext ` processing resulted in an error emission * increases coverage to 100 % of ` FlowableScanSeed `
Remove empty list item from ` io.reactivex.package-info.java ` __EoT__
2.x : Rename BackpressureStrategy.NONE to MISSING __EoT__ As discussed in # 4643 .
2.x : Remove some unused fields __EoT__ Remove some unused fields that are either - present in their parent class - not set
2.x : coverage , minor fixes , cleanup 10/19-2 __EoT__ - Improve coverage of a few ` Observable ` operators - move some classes into their solo user parent class - ` checkDisposed ` now calls ` dispose ` / ` cancel ` twice to have better conditional coverage of those methods
2.x - improve timer javadoc __EoT__ Make it clearer what gets emitted ( 0L ) .
2. : Fix flatMapX over-cancellation in case of an inner error __EoT__ A non-delayed error set the cancellation flag and thus any subsequent drain would just quit instead of delivering the error . ( And while I 'm at it , I 'll try to figure out a way to not get killed by OOMKiller ) . Reported in # 4684 .
2.x : Do n't wrap with CompositeException when there is only one error __EoT__
2.x : Fix Generics T [ ] in Zip & CombineLatest __EoT__ Fixes # 4524 Test for combineLatest fill follow
2.x : add Reactive-Streams TCK infrastructure and couple of tests __EoT__ This PR sets up the build to run TestNG tests as well and adds the Reactive-Streams TCK to allow validating our operators . Included tests are : ` just ` , ` fromArray ` , ` fromIterable ` , ` concat ` , ` merge ` . Note that the TCK tests for invalid ` request ( ) ` amount which , according to the spec , should be reported to the running ` Subscriber ` via ` onError ` . Unfortunately , this is a very expensive requirement ( requiring half-serialization all the time ) and we are not going to support it in RxJava 2 . Negative requests are bugs in operators and should be fixed , we only provide a notification about such situations in the ` RxJavaPlugins.onError ` for those who want to check for such errors . Therefore , the ` FlowableTCK ` has been added with does the required behavior by the TCK and can be used as ` FlowableTCK.wrap ( flowable ) ` when returning from the TCK 's ` createPublisher ( long ) ` .
2.x : Add Disposable Observer for Maybe , Completable & Single __EoT__ Also any reason the Dispoable is called ` s ` ? Is it still from the Subscription time ? Fixes # 4501
2.x : Implement ObservableHide for also masking the Disposable . __EoT__
2.x : switch to throwing Action , switchMapDelayError , other cleanup __EoT__ Notable changes : - Replace the use of ` Runnable ` in the base reactive types to ` Action ` whose ` run ` method can throw a checked exception . - Fix javadoc referencing 1.x types no longer available . - The ` switchMap ` operator has been enhanced to support delaying errors . - Update ` concat ( Iterable ) ` to use ` concatMapDelayError ` because Iterable ca n't throw just anytime but on the boundary , reducing the per-element overhead . - ` FlowableEmitter ` has been enhanced with a ` serialize ( ) ` method that serializes calls to ` onXXX ` methods . - Factored out ` FlowableEmitter.Cancellable ` into ` io.reactivex.functions ` as it will be used by the other base reactive types with their ` XEmitter ` implementations . - Added ` AtomicThrowable ` with convenience methods that use ` ExceptionHelper ` 's terminal atomics with ` Throwable ` s .
2.x : sync Javadoc of Observable ( copy & adjust Flowable 's ) __EoT__ This PR adds Javadoc to ` Observable ` by mainly copying and adjusting ` Flowable ` 's documentation . In addition , the method set was synced as well and placeholders added for unported 1.x operators . The drill is the same as before : after CI , I merge this and reviewers can post PRs with necessary fixes .
2.x : Switch ( almost ) all remaining chain operators to ObservableWithUpstream . __EoT__
2.x : Rename create to unsafeCreate , add `` safe '' create methods . __EoT__ This is a proposal to solve # 4255 but for 2.x and closes # 4286 built around one goal : make the ` create ` methods actually usable by developers ! Currently the advice given to most developers using 1.x is avoid ` create ` unless you are absolutely 100 % sure you understand backpressure and cancellation , and even then avoid it if possible . This method is a trap that most new developers fall into . _The method is named `` create '' , after all , so it must be how I create these things ! _ I want to make that statement not only correct , but advisable ( at least when the still-convenient `` from '' methods are not suitable , such as when wrapping callback-based APIs ) . Because ` Observable ` , ` Single ` , and ` Completable ` are backpressure-free , this amounts to just suppressing downstream notifications when disposed . This does n't seem too controversial . The most controversial part is that I have renamed ` Flowable.fromAsync ` to ` Flowable.create ` thus making
2.x : Inline generic-free runnable and long consumer method . __EoT__
2.x : Elide ObservableWrapper for empty and never . __EoT__
2.x : add dedicated concat for array of publishers __EoT__ This PR adds a dedicated ` concat ` implementation that works with the source array . The main benefit is that there is no need to serialize emissions because the source array ca n't throw ( unlike ` concatMap ` where there could be an onError from the main source while an inner source is running ) . Plus , there is a new ` concatArrayDelayError ` version .
2.x : test sync + cleanup __EoT__ - More unit tests ported ; - ` TestObserver ` cleanup and sync with ` TestSubscriber ` ; - fix travis to run with Java 7 instead of 8 ; - added AnimalSniffer ; - cleaned up ` combineLatest ` , introduced ` combineLatestDelayError ` ; - test names are as in 1.x , please do n't complain about the ` test ` prefix in the method names !
2.x : enable fuseable sources , adjust operators __EoT__ - adds an operator ` hide ` to allow hiding and breaking optimizations - update ` filter ` to support fusions : queue and conditional - ` range ` now supports fusion : sync-queue and conditional - ` fromArray ` now supports fusion : sync-queue and conditional - ` fromIterable ` now supports fusion : sync-queue and conditional - enhanced ` TestSubscriber ` methods to return this - allows chaining the assertions - extended ` TestSubscriber ` to act as a consumer for queue-fusion - introduced ` FlowableSource ` as an intermediate type for operators : allows discovering the upstream in a standard way , allows the IDE to generate a constructor with a source value . - added ` BasicQueueSubscription ` that locks down unused ` Queue ` methods plus is a container for an atomic long value useful for request/wip tracking .
2.x : Simplify boolean disposables which run code on dispose . __EoT__
2.x : prepare the operator-fusion enhancement __EoT__ This PR adds 3 operator-fusion related interfaces : - ` QueueSubscription ` will support fusion for ` Flowable ` - avoid creating queues , avoid cost of multiple enqueue-dequeue , reduce ` request ( ) ` overhead - ` QueueDisposable ` will support fusion for ` Observable ` - avoid creating queues , avoid cost of multiple enqueue-dequeue - ` ScalarCallable ` - indicate a scalar constant source In addition ` ConditionalSubscriber ` is marked and will be moved to the new package and its method renamed to ` tryOnNext ` . Unlike Reactor-Core ( and Rsc ) , there is no ` Fuseable ` marker interface . The ability of fusing is indicated by calling ` onSubscribe ` with the above ` QueueX ` enabled instances and then called back via ` requestFusion ` . This allows having less duplicated code compared to Reactor/Rsc - at the cost of usually one extra field to store the ` QueueX ` value that may be null .
2.x : Normalize request validation using SubscriptionHelper . __EoT__
2.x : Merge SerialDisposable and MultipleAssignmentDisposable . __EoT__ Closes # 4057 although does n't address the name of the class .
2.x : Update conversion method name to reflect new base type names . __EoT__
2.x : Publish code coverage results to codecov.io __EoT__ Same as # 4046 except the badge link .
Improve README.MD by adding links to the source files of @ Beta and @ Experimental __EoT__ There are no links to the annotations mentioned above in the documentation and this makes their source unaccessible a bit .
Class BlockingObservable < T > doc comments __EoT__ Perhaps the doc comments can say that you should avoid using these operators except for quick testing and demos since they void the whole idea of asynchrony . - ` forEach ( Action1 < ? super T > onNext ) ` , last ( ) , ... Should we say anything about the fact it throws the exception if the source emits ` onError ` ?
Javadoc Links to Rx.Net __EoT__ ( and where applicable otherwise ) Should we remove all links to Rx .NET since that will be taken care of in the offline docs for the operators ? Ha , ha , the .NET docs should point to the RxJava ones .
onBackpressureXXX __EoT__ Change onBackpressureDrop to same style as onBackpressureBuffer . onBackpressureBuffer ( ) Instructs an Observable that is emitting items faster than its observer can consume them to buffer these items indefinitely until they can be emitted . onBackpressureDrop ( ) Use this operator when the upstream does not natively support backpressure and you wish to drop onNext when unable to handle further events .
Minimize library size __EoT__ Hey , I am thinking about using the library in an android app , but the library size is close to 1mb . I saw that the unit tests are being packaged with the production code , is there any reason for that ? Would be possible to reduce the library size ?
Operator : Count __EoT__ http : //msdn.microsoft.com/en-us/library/hh229470 ( v=vs.103 ) .aspx
Rx Schedulers __EoT__ Implementation of Rx Schedulers ( http : //msdn.microsoft.com/en-us/library/hh242963 ( v=vs.103 ) .aspx ) ... probably to go into the rx.concurrency package ( https : //github.com/Netflix/RxJava/tree/master/rxjava-core/src/main/java/rx/concurrency ) .
Update androidx ver . __EoT__ 🎉
workaround to convert java String to kotlin String in argument parameter __EoT__ ref : https : //github.com/permissions-dispatcher/PermissionsDispatcher/issues/427 .
Update KotlinPoet to 1.0.0-RC1 __EoT__
Add type parameter support __EoT__ see # 119 # TODO - [ x ] # 121 blocks this pull request - [ x ] Test cases for CAMERA - [ x ] Test cases for V13
[ bugfix ] patch failed when specifying the process name __EoT__ patch failed when specifying the process name in < application > tag .
use provided instead of compile , so at apk , there is no nothing about anno-lib __EoT__ anno-lib no need for compile into project , because at annotation processor , it will generate Application Class
debug下打补丁包异常 __EoT__ java.nio.BufferOverflowException at java.nio.Buffer.nextPutIndex ( Buffer.java:521 ) at java.nio.HeapByteBuffer.put ( HeapByteBuffer.java:169 ) at com.tencent.tinker.android.dex.io.DexDataBuffer.writeByte ( DexDataBuffer.java:548 ) at com.tencent.tinker.android.dex.Leb128.writeUnsignedLeb128 ( Leb128.java:146 ) at com.tencent.tinker.android.dex.io.DexDataBuffer.writeUleb128 ( DexDataBuffer.java:597 ) at com.tencent.tinker.android.dex.io.DexDataBuffer.writeDebugInfoItem ( DexDataBuffer.java:782 ) at com.tencent.tinker.android.dex.Dex $ Section.writeDebugInfoItem ( Dex.java:823 ) at com.tencent.tinker.commons.dexpatcher.algorithms.patch.DebugInfoItemSectionPatchAlgorithm.writePatchedItem ( DebugInfoItemSectionPatchAlgorithm.java:115 ) at com.tencent.tinker.commons.dexpatcher.algorithms.patch.DebugInfoItemSectionPatchAlgorithm.writePatchedItem ( DebugInfoItemSectionPatchAlgorithm.java:30 ) at com.tencent.tinker.commons.dexpatcher.algorithms.patch.DexSectionPatchAlgorithm.doFullPatch ( DexSectionPatchAlgorithm.java:260 ) at com.tencent.tinker.commons.dexpatcher.algorithms.patch.DexSectionPatchAlgorithm.execute ( DexSectionPatchAlgorithm.java:207 ) at com.tencent.tinker.commons.dexpatcher.DexPatchApplier.executeAndSaveTo ( DexPatchApplier.java:372 ) at com.tencent.tinker.commons.dexpatcher.DexPatchApplier.executeAndSaveTo ( DexPatchApplier.java:397 ) at com.tencent.tinker.build.decoder.DexDiffDecoder.onAllPatchesEnd ( DexDiffDecoder.java:220 ) at com.tencent.tinker.build.decoder.ApkDecoder.patch ( ApkDecoder.java:123 ) at com.tencent.tinker.build.patch.Runner.tinkerPatch ( Runner.java:65 ) at com.tencent.tinker.build.patch.Runner.run ( Runner.java:48 ) at com.tencent.tinker.build.patch.Runner.gradleRun ( Runner.java:41 ) at com.tencent.tinker.build.patch.Runner $ gradleRun.call ( Unknown Source ) at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall ( CallSiteArray.java:48 ) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call ( AbstractCallSite.java:113 ) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call ( AbstractCallSite.java:125 ) at com.tencent.tinker.build.gradle.task.TinkerPatchSchemaTask.tinkerPatch ( TinkerPatchSchemaTask.groovy:84 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.gradle.internal.reflect.JavaMethod.invoke ( JavaMethod.java:75 ) at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory $ StandardTaskAction.doExecute ( AnnotationProcessingTaskFactory.java:228 ) at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory $ StandardTaskAction.execute ( AnnotationProcessingTaskFactory.java:221 ) at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory $ StandardTaskAction.execute ( AnnotationProcessingTaskFactory.java:210 ) at org.gradle.api.internal.AbstractTask $ TaskActionWrapper.execute ( AbstractTask.java:621 ) at org.gradle.api.internal.AbstractTask $ TaskActionWrapper.execute ( AbstractTask.java:604 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction ( ExecuteActionsTaskExecuter.java:80 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions ( ExecuteActionsTaskExecuter.java:61 ) at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute ( ExecuteActionsTaskExecuter.java:46 ) at
Upgrade apk-parser version __EoT__ Resolve issue https : //github.com/Tencent/tinker/issues/54 and https : //github.com/Tencent/tinker/issues/85
sonic的崩溃日志 __EoT__ 我们在使用sonic的过程，收到一条这样的崩溃日志 ! [ image ] ( https : //user-images.githubusercontent.com/1501761/31330297-6b7b0a4e-aca3-11e7-987d-9a5dbff69a3d.png ) 感觉是SonicSession的onClose方法中的sessionConnection对象为null造成的。 ! [ image ] ( https : //user-images.githubusercontent.com/1501761/31330359-abedca94-aca3-11e7-8734-7b63b2b64c9c.png )
Refactor realm tests to use single settings __EoT__ Many realm tests were written to use separate setting objects for '' global settings '' and `` realm settings '' . Since # 30241 there is no distinction between these settings , so these tests can be cleaned up to use a single Settings object .
Add parent-aggregation to parent-join module __EoT__ This is a first try at implementing the parent-aggregation as part of the parent-join module . See # 9705 for some previous discussion about this . This is probably not fully merge-able yet , I would like to get feedback on a few points that I could not clarify myself : * For implementation I mostly do the same as the child-aggregation does with the main difference of only reporting each parent-document once as part of a bucket * Does this approach look feasible ? It seems to work for our local use-cases , but there might be edge-cases that we do not trigger or detect right now . * Is there a way to do the Map < Integer , Set < Long > > in ChildrenToParentAggregator.doPostCollection ( ) in a better way ? I expect this will create quite some memory-churn . Something like IntMap < LongSet > from Trove or HPPC would be better , but was n't sure if I can add a dependency on HPPC to the module . * new unit-tests and all other existing tests do pass , is there any other integration-style testing that we should
Open node connections asynchronously __EoT__ This is related to # 29023 . Additionally at other points we have discussed a preference for removing the need to unnecessarily block threads for opening new node connections . This commit lays the groudwork for this by opening connections asynchronously at the transport level . We still block , however , this work will make it possible to eventually remove all blocking on new connections out of the TransportService and Transport .
HLRC : add support for the clear realm cache API __EoT__ This change adds support for clearing the cache of a realm . The realms cache may contain a stale set of credentials or incorrect role assignment , which can be corrected by clearing the cache of the entire realm or just that of a specific user . Relates # 29827
Add doc section about range query for range type __EoT__ I did n't know about this mapping type until I saw it in an ES presentation . It 's only described in the Mapping section . It should also be referenced in the Range Query documentation .
NETWORK : Remove Dead Code from Netty4CorsConfig __EoT__ * Same as # 34324 for the NIO transport , the ` isNullOriginAllowed ` setting is always false
[ Tests ] Fix rare edge case in SimpleQueryStringBuilderTests __EoT__ If the random query string is `` now '' by accident _and_ we are also not setting some field names to use explicitely , then we can hit the `` mapped_date '' field from default test setup . This correctly leads to the query being was marked as not cacheable , but we assume and check so later . This change fixes this rare edge case by making sure we do n't hit the `` date '' field in this rare cases . Closes # 35183
Engine.newChangesSnapshot may cause unneeded refreshes if called concurrently __EoT__ When the engine is asked for historical operations , we check if some of the requested operations are not yet refreshed and if so we refresh before returning the operations . The refresh check is based on capturing the local checkpoint before each refresh and comparing that value to the one requested when ` newChangesSnapshot ` was called . If the requested range is above the captured local checkpoint we issue a refresh . This can currently cause unneeded extra refreshes if the method is called concurrently which may cause unwanted degradation in indexing performance . This is especially relevant for CCR where we always ask for a range below the global checkpoint . That range is guaranteed to be below the local checkpoint of the shard and one refresh is enough to serve multiple changes requests . This PR fixes this by introducing a dedicated mutex to make sure the test for whether a refresh is needed actually wait for concurrents for concurrent refreshes that were caused by another change refresh . Note that this is not a big change in semantics as refreshes are serialized by lucene anyway .
Remove use of AbstractComponent in security __EoT__ This change removes the use of AbstractComponent in the security module . The classes now declare their own loggers . Relates # 34488
Testclusters : Refactor and fix for newly added tests __EoT__ - Add tests for multi project builds and fixes to make them work . - logging and readability improovements - Will clean up the state next , to make the new ` forceStop ` method go away .
SQL : Register missing processors __EoT__ Add registration ( and tests ) for missing processors in the serialization chain . Fix # 35119
Graph : Move qa into plugin __EoT__ Move ` x-pack/qa/smoke-test-graph-with-security ` to ` x-pack/plugin/graph/qa/security ` which should make it easier to run all of the tests with a single command . It also lines up the directories more closely with newer projects like cross cluster replication .
Test : Filter out deprecated joda tzs in tests __EoT__ This commit filters out usage of deprecated tzs by tests . These are tested separately and should not require checking for warnings on any test using random timezones . closes # 34188
Add missing full stop in Bootstrap checks doc __EoT__ Fixes # 35075
Deprecate ` _source_include ` and ` _source_exclude ` url parameters __EoT__ Relates to # 22792
[ CCR ] Refactor stats APIs __EoT__ * Changed the auto follow stats to also include follow stats . * Renamed the auto follow stats api to stats api and changed its url path from ` /_ccr/auto_follow/stats ` ` /_ccr/stats ` . * Removed ` /_ccr/stats ` url path for the follow stats api , which makes the index parameter a required parameter .
[ DOCS ] Fix build due to typo in get role mappings API __EoT__ Fixed the type in the get role mappings API doco
MINOR : Remove Deadcode in NioTransport CORS __EoT__ * Same as # 34134 but for nio transport
DISCOVERY : Use Realistic Num . of Min Master Nodes __EoT__ * With all 3 nodes starting in parallel 2 nodes can win a master election and start waiting for nodes to join when started in parallel . We wait for 30s on the rest tests for the cluster health endpoint to show 3 nodes which breaks if one of the master nodes itself waits for 30s for joining nodes , waiting for 5 seconds fixes the issue and allows us to run with ` minimum master nodes < node count ` * relates # 33675
Core : Drop nodeName from AbstractComponent __EoT__ ` AbstractComponent ` is trouble because its name implies that *everything* should extend from it . It *is* useful , but maybe too broadly useful . The things it offers access too , the ` Settings ` instance for the entire server and a logger are nice to have around , but not really needed *everywhere* . The ` Settings ` instance especially adds a fair bit of ceremony to testing that is usually confusing to read . This removes the ` nodeName ` method from ` AbstractComponent ` so it is more clear where we actually need the node name . Relates to # 34488 .
remove old doc placeholder and migrate ilm docs to top-level __EoT__ Looks like we are restructuring the docs , this migrates ILM docs outside of the x-pack doc structure . This is related to the initiative to [ move x-pack cleanup to ESRestTestCase # 34530 ] ( https : //github.com/elastic/elasticsearch/issues/34530 )
HLREST : Add Clear Roles Cache API __EoT__ Add 's support to the [ Clear Roles Cache API ] ( https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-role-cache.html ) to the High Level Rest Client . Reviews should note the addition of the NodesResponseHeader utility class ( I 'm not sure it 's in the right place ) and also the fact this specific API has a weird response structure : `` ` { _nodes : { total : 2 , successful : 2 failed : 0 } , nodes : { `` id '' : { ... } } } `` ` I chose to the response object I added to have a ` getHeader ( ) ` method to return the content of the ` _nodes ` section and a ` getNodes ( ) ` method to return the node info ( mimicking the response object in ES core ) . We can also choose to fold the header into the top level response class and expose total , successful , failed and failure directly ( at the expense of the class not looking like the JSON ) / Relates to # 29827
fix ` GET _ilm ` response with uninitialized ILM metadata __EoT__ ILM would return a resource-not-found exception when requesting policies while the IndexLifecycleMetaData is not initialized . The behavior here should not be as extreme since it is not the user 's fault . This commit changes the behavior so that it succeeds and returns no policies when no policy names are explicitly specified , otherwise keep the same behavior of throwing an exception
Improve Documentation __EoT__ This is a new PR of mater branch for the old PR # 34727 > Refer to an inner class as an inner class in the documentation so it is easier to read . > Issue : # 34700
SQL : handle X-Pack or X-Pack SQL not being available in a more graceful way __EoT__ Fix for https : //github.com/elastic/elasticsearch/issues/30009 . The same error code is received when either the x-pack is not available at all , or SQL is explicitly disabled ( ` xpack.sql.enabled : false ` ) .
HLRC : Deactivate Watch API __EoT__ Relates to # 29827 There are no doc tests on this PR right now , because when I was writing them , I saw @ hub-cap 's comments on # 33988 that we 're about to merge a new way to do docs & doc tests for HLRC work . Everything else is ready for review .
SQL : Introduce support for IP fields __EoT__ Close # 32499
Adds usage data for ILM __EoT__ Currently the response from the x-pack usage API would be : `` ` '' ilm '' : { `` policy_count '' : 4 , `` policy_stats '' : [ { `` phases '' : { `` warm '' : { `` after '' : `` 0ms '' , `` actions '' : [ `` allocate '' , `` forcemerge '' ] } , `` hot '' : { `` after '' : `` 0ms '' , `` actions '' : [ `` rollover '' ] } , `` delete '' : { `` after '' : `` 2m '' , `` actions '' : [ `` delete '' ] } } } , { `` phases '' : { `` hot '' : { `` after '' : `` 0ms '' , `` actions '' : [ `` rollover '' ] } , `` delete '' : { `` after '' : `` 2m '' , `` actions '' : [ `` delete '' ] } } } , { `` phases '' : { `` warm '' : { `` after '' : `` 0ms '' , `` actions '' : [ ``
Rename testcluster extension to align with plugin name __EoT__ Previous renames did not rename the extension that allows nodes to be configured . This change does just that .
TEST : Clone replicas list when compute replication targets __EoT__ In # 34407 , we supposed to clone the list of replicas of ReplicationGroup when computing replication targets , but somehow we missed it . If we do n't clone the list , a WriteReplicationAction may use an old ReplicationTargets which consists replicas which are removed from the current list of replicas Relates # 34407 Closes # 33457
ingest : documentation for the drop processor __EoT__ part of # 33188 -- -- -- < img width= '' 765 '' alt= '' image '' src= '' https : //user-images.githubusercontent.com/976291/47112359-bce6ea80-d21b-11e8-9543-00abbe9544cd.png '' >
Make accounting circuit breaker settings dynamic __EoT__ These missed the original property making them dynamic . This fixes the issue so these can now be set at any time . Resolves # 34368
Do n't omit default values when updating routing exclusions ( # 32721 ) __EoT__ Exclusion setting ` cluster.routing.allocation.exclude._host ` default value is an empty string . * When an exclusion setting is sent with a null value the ` o.e.c.s.Setting # innerGetRaw ` API return an empty string ( probably to avoid a ` NullPointerException ` to be raised ) . * The ` o.e.c.r.a.d.FilterAllocationDecider ` class is developed to omit updates of default values for exclusion setting . * That 's why a null exclusion setting value is translated to an empty string which is equals to the exclusion default value which is configured to be ignored . A simple fix would be to not omit default values for exclusion setting and keep the ` NullPointerException ` guard . This is the purpose of this commit .
Docs - remove experimental marker from significant_text aggregation __EoT__ This is now a GA feature
[ CCR ] Make leader cluster a required argument __EoT__ This change makes it no longer possible to follow / auto follow without specifying a leader cluster . If a local index needs to be followed then ` cluster.remote . *.seeds ` should point to nodes in the local cluster . Closes # 34258
Ensure map keys can not be self referencing __EoT__ This commit improves self reference checking to map keys , as well as adds it to ingest script processing .
Security : do n't call prepare index for reads __EoT__ The security native stores follow a pattern where ` SecurityIndexManager # prepareIndexIfNeededThenExecute ` wraps most calls made for the security index . The reasoning behind this was to check if the security index had been upgraded to the latest version in a consistent manner . However , this has the potential side effect that a read will trigger the creation of the security index or an updating of its mappings , which can lead to issues such as failures due to put mapping requests timing out even though we might have been able to read from the index and get the data necessary . This change introduces a new method , ` checkIndexVersionThenExecute ` , that provides the consistent checking of the security index to make sure it has been upgraded . That is the only check that this method performs prior to running the passed in operation , which removes the possible triggering of index creation and mapping updates for reads . Additionally , areas where we do reads now check the availability of the security index and can short circuit requests . Availability in this context means that
[ HLRC ] Documentation examples cleanup __EoT__ While digging into something else I noticed that there are several WARN messages in the high-level REST client integration tests . And most of them are caused by examples in the documentation that use deprecated functionality ( i.e . specifying ` type ` in ` _search ` requests ) . While the high level rest client should support the 'deprecated ' functionality , I think that the client 's documentation must not cover such examples . This PR modifies the examples so that there are no deprecation warnings . The changes are grouped in separate commits , so it is easy to pick and choose the changes that should be adopted .
Lock down Engine.Searcher __EoT__ ` Engine.Searcher ` is non-final today which makes it error prone in the case of wrapping the underlying reader or lucene ` IndexSearcher ` like we do in ` IndexSearcherWrapper ` . Yet , there is no subclass of it yet that would be dramtic to just drop on the floor . With the start of development of frozen indices this changed since in # 34357 functionality was added to a subclass which would be dropped if a ` IndexSearcherWrapper ` is installed on an index . This change locks down the ` Engine.Searcher ` to prevent such a functionality trap .
Add Punjabi to unsupported Kerberos locales list __EoT__ Relates # 33253 and fixes another test failure similar to # 33228 .
[ CCR ] Do n't fail shard follow tasks in case of a non-retryable error __EoT__ I had to make a few unrelated changes to the ccr stats and pause APIs . In case a follower index has been removed and we keep the shard follow tasks around then we have no way to read stats from these tasks or pause them , because the requests are routed based on the follower index .
Fix spelling mistake . __EoT__ < ! -- Thank you for your interest in and contributing to Elasticsearch ! There are a few simple things to check before submitting your pull request that can help with the review process . You should delete these items from your submission , but they are here to help bring them to your attention . -- > - Have you signed the [ contributor license agreement ] ( https : //www.elastic.co/contributor-agreement ) ? Yes - Have you followed the [ contributor guidelines ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md ) ? Yes - If submitting code , have you built your formula locally prior to submission with ` gradle check ` ? Yes - If submitting code , is your pull request against master ? Unless there is a good reason otherwise , we prefer pull requests against master and will backport as needed . No - If submitting code , have you checked that your submission is for an [ OS that we support ] ( https : //www.elastic.co/support/matrix # show_os ) ? Yes - If you are submitting this code for a class then read our [ policy ] ( https : //github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md #
TEST : Fix indentation in FullClusterRestartIT __EoT__ While I was looking at # 32426 , I found that the indentation of FullClusterRestartIT # testRecovery was not correct .
Ingest Attachement : Upgrade tika to v1.19.1 __EoT__ Upgrades Apache Tika to v1.19 . Also upgrades transitive dependencies : pdfbox : 2.0.9 - > 2.0.12 poi : 3.17 - > 4.0.0' commons-compress:1.16.1 - > 1.18
HLRC : Fixing bug when getting a missing pipeline __EoT__ Changing the ` getPipeline ` API call to ignore ` 404 ` errors so that the method call ` GetPipelineResponse : :isFound ` is useful again : ) closes # 34119
Follow stats structure __EoT__ This commit modifies the follow stats API response structure to more clearly highlight meaning of the higher level fields . In particular , previously the response had a top-level key for each index . Instead , we nest the indices under an `` indices '' field which is now an array . The values in this array are objects containing two fields : `` index '' which is the name of the follower index , and `` shards '' which is an array where each value in the array is the follower stats for that shard . That is , we have gone from : `` ` { `` bar '' : [ { `` shard_id '' : 0 ... } ... ] ... } `` ` to `` ` { `` indices '' : [ { `` index '' : `` bar '' , `` shards '' : [ { `` shard_id '' : 0 ... } ... ] } ... } `` `
MINOR : Remove Dead Code from Netty4Transport __EoT__ * None of these methods are used
SCRIPTING : Terms set query expression __EoT__ * Follow up to # 33602 adding the ability to compile TermsSetQueryScript scripts with the expressions engine in the same way we support SearchScript in Expressions * Duplicated the code here for now to make the change less complex , the only difference to SearchScript is that ` _score ` and ` _value ` are not handled for TermsSetQuery
[ ML ] Label anomalies with multi_bucket_impact __EoT__ Add the multi_bucket_impact field to record results .
Docs : Wrap expert script example to fit in docs __EoT__ This slightly reworks the expert script plugin example so it fits on the page when the docs are rendered . The box in which it is rendered is not very wide so it took a bit of twisting to make it readable .
[ CCR ] Record follower index historyUUIDs __EoT__ and verify on each bulk shard operation execution that these history UUIDs did not change . The tricky bit in this change is that adds another async step to the create and follow api ( soon to be renamed to follow api ) . After the follower index has been created an its shards have started , the history UUIDs of the follower shards need be fetched and stored in the follower index 's custom metadata . The follow api ( soon to be renamed resume follow api ) will fail if follower index shard history UUIDs are missing . ( leader index shard UUIDs too ) Closes # 33956
CCR : Optimize indexing ops using seq_no on followers __EoT__ This change introduces the indexing optimization using sequence numbers in the FollowingEngine . This optimization uses the max_seq_no_updates which is tracked on the primary of the leader and replicated to replicas and followers . /cc @ martijnvg @ jasontedor
Add Ubuntu 18.04 to packaging tests __EoT__ We intend to start supporting Ubuntu 18.04 with the 6.5.0 release . This commit adds Ubuntu 18.04 to the packaging tests .
MINOR : Remove some deadcode in NodeEnv and Related __EoT__ just some random finds while researching other things
Retry fetching follower global checkpoint when it fails . __EoT__ Closes # 34016
Scripting : Reflect factory signatures in painless classloader __EoT__ It is sometimes desirable to pass a class into a script constructor that will not actually be exposed in the script whitelist . This commit uses reflection when creating the compiler to find all the classes of the factory method signature , and make the classloader that wraps lookup also expose these classes .
Unmapped aggs should not run pipelines if they delegate reduction __EoT__ ` UnmappedTerms ` / ` UnmappedSampler ` / ` UnmappedSigTerms ` aggs try to delegate reduction to a sibling object that is not unmapped . That delegated agg will run the reductions , and also reduce any pipeline aggs . But because delegation comes before running pipelines , the ` Unmapped* ` agg _also_ tries to run pipeline aggs . This causes the pipeline to run twice , and potentially double it 's output in buckets which can create invalid JSON and break when converting to maps . This fixes the issue by toggling a flag in UnmappedTerms if it delegated away reduction so that it knows not to run pipeline aggs either . Closes # 33514
Get rid of `` unused variable '' warnings __EoT__ Another clean up trying to get rid of some annoying warnings . One large group that is reasonably easy to tackle is the `` unused variable '' warnings . There are several cases were most likely want to suppress the warnings ( especially in the client documentation test where the snippets should contain unused variable names ) . Most of the things can just be deleted though .
[ DOCS ] add comment to clarify cluster name resolution __EoT__ We currently fallback to local indices whenever a remote cluster is not found , as there may still be indices / aliases with the same name . Such behaviour is lenient but needs to be kept for backwards compatibility . Clarified that in the code so we do n't forget . Relates to # 26247
SQL : Fix query translation of GroupBy with Having __EoT__ Two issues are resolved : 1 . The ` value_type ` should be long or double in case of numeric . 2 . The key label for the aggregate filter ( having ) was duplicate of an aggr key . Fixes : # 33520
TESTS : Stabilize Renegotiation Test __EoT__ * Handshake listener should be added before initiating the handshake to avoid it not running if handshake is triggered before it is added * The second ` startHandshake ` is not synchronous and a read of only 50ms may fail to trigger it entirely ( the failure can be reproduced reliably by setting the socket timeout to ` 1 ` ) = > fixed by retrying the read until the handshake finishes ( a longer timeout would 've worked too , but retrying seemed more stable ) * Closes # 33772
TEST : stop assertSeqNos if shards movement __EoT__ Currently , assertSeqNos assumes that the cluster is stable at the end of the test ( i.e. , no more shard movement ) . However , this assumption does not always hold . In these cases , we can stop the assertion instead of failing a test . Closes # 33704
Rebuild step on PolicyStepsRegistry.getStep __EoT__ This moves away from caching a list of steps for a current phase , instead rebuilding the necessary step from the phase JSON stored in the index's metadata . Relates to # 29823
upgrade to a new snapshot of Lucene 8 ( 7d0a7782fa ) __EoT__
Implement xpack.monitoring.elasticsearch.collection.enabled setting __EoT__ Resolves # 33290 . This PR implements an optional setting named ` xpack.monitoring.elasticsearch.collection.enabled ` , defaulting to ` true ` . This setting will determine whether X-Pack Monitoring ( when active overall ) should collect Elasticsearch metrics or not .
Introduce long polling for changes __EoT__ Rather than scheduling pings to the leader index when we are caught up to the leader , this commit introduces long polling for changes . We will fire off a request to the leader which if we are already caught up will enter a poll on the leader side to listen for global checkpoint changes . These polls will timeout after a default of one minute , but can also be specified when creating the following task . We use these time outs as a way to keep statistics up to date , to not exaggerate time since last fetches , and to avoid pipes being broken . Relates # 32651
[ DOCS ] Moves security reference to docs folder __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the reference content from x-pack/docs/security to docs/reference/security . NOTE : There is no code snippet testing in this content , so no changes are required to the gradle checks .
SCRIPTING : Move terms_set Context to its Own Class __EoT__ * Extracted TermsSetQueryScript * Kept mechanics close to what they were with SearchScript
Expose CCR stats to monitoring __EoT__ This commit exposes the CCR stats endpoint to monitoring collection . Relates # 30086
Bootstrap a new history_uuid when force allocating a stale primary __EoT__ This commit ensures that we bootstrap a new history_uuid when force allocating a stale primary . A stale primary should never be the source of an operation-based recovery to another shard which exists before the forced-allocation . Closes # 26712
[ ML ] Get job stats request should filter non-ML job tasks __EoT__ When requesting job stats for ` _all ` , all ES tasks are accepted resulting to loads of cluster traffic and a memory overhead . This commit correctly filters out non ML job tasks . Closes # 33515
Add put stored script support to high-level rest client __EoT__ This adds support for the put stored script API to the high level rest client . Relates to # 27205
HLRC : split ingest request converters __EoT__ In an effort to encapsulate the different clients , the request converters are being shuffled around . This splits the IngestClient request converters .
TEST : Ensure merge triggered in _recovery_source retention test __EoT__ We invoke force merge twice in the test to verify that recovery sources are pruned when the global checkpoint advanced . However , if the global checkpoint equals to the local checkpoint in the first force-merge , the second force-merge will be a noop because all deleted docs are expunged in the first merge already . We need to flush a new segment to make merge happen so we can verify that all recovery sources are pruned . CI instances : - https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+matrix-java-periodic/ES_BUILD_JAVA=java10 , ES_RUNTIME_JAVA=java10 , nodes=virtual & & linux/286/console - https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+6.x+intake/2409/console
Fix IndexMetaData loads after rollover __EoT__ When we rollover and index we write the conditions of the rollover that the old index met into the old index . Loading this index metadata requires a working ` NamedXContentRegistry ` that has been populated with parsers from the rollover infrastructure . We had a few loads that didn't use a working ` NamedXContentRegistry ` and so would fail if they ever encountered an index that had been rolled over . Here are the locations of the loads and how I fixed them : * IndexFolderUpgrader - removed entirely . It existed to support opening indices made in Elasticsearch 2.x . Since we only need this change as far back as 6.4.1 which will supports reading from indices created as far back as 5.0.0 we should be good here . * TransportNodesListGatewayStartedShards - wired the ` NamedXContentRegistry ` into place . * TransportNodesListShardStoreMetaData - wired the ` NamedXContentRegistry ` into place . * OldIndexUtils - removed entirely . It existed to support the zip based index backwards compatibility tests which we 've since replaced with code that actually runs old versions of Elasticsearch . In addition to fixing the actual problem I added
Add user-defined cluster metadata __EoT__ Adds a place for users to store cluster-wide data they wish to associate with the cluster via the Cluster Settings API . This is strictly for user-defined data , Elasticsearch makes no other other use of these settings . Closes # 33220
[ DOCS ] fix a couple of typos __EoT__ Hello , This pull request is to fix a couple of typos I spotted in the documentation . Please tell me if there is any problem with it . I also tried to run the docs-related checks but did n't succeed : `` ` $ ./gradlew -p docs check > Task : docs : integTestCluster # wait FAILED FAILURE : Build failed with an exception . * What went wrong : Execution failed for task ' : docs : integTestCluster # wait ' . > Failed to start elasticsearch : timed out after 30 seconds ... BUILD FAILED in 5m 42s 364 actionable tasks : 77 executed , 287 up-to-date `` ` Thank you .
Null completion field should not throw IAE __EoT__ null completion values should not throw IAE and be added to ignored fields @ jimczi would you mind taking a look at this PR please ? I believe all tests run via ` gradlew check ` pass now . many thanks , Tony
[ Rollup ] Fix Caps Comparator to handle calendar/fixed time __EoT__ The comparator used TimeValue parsing , which meant it could n't handle calendar time . This fixes the comparator to handle either ( and potentially mixed ) . The mixing should n't be an issue since the validation code upstream will prevent it , but was simplest to allow the comparator to handle both . Related to # 32052
Add support for `` authorization_realms '' __EoT__ Authorization Realms allow an authenticating realm to delegate the task of constructing a User object ( with name , roles , etc ) to one or more other realms . E.g . A client could authenticate using PKI , but then delegate to an LDAP realm . The LDAP realm performs a `` lookup '' by principal , and then does regular role-mapping from the discovered user . This commit includes : - authorization_realm support in the pki , ldap , saml & kerberos realms - docs for authorization_realms - checks that there are no `` authorization chains '' ( whereby `` realm-a '' delegates to `` realm-b '' , but `` realm-b '' delegates to `` realm-c '' Authorizing_realms is a platinum feature .
Integrates soft-deletes into Elasticsearch __EoT__ This PR integrates Lucene soft-deletes [ ( LUCENE-8200 ) ] ( https : //issues.apache.org/jira/browse/LUCENE-8200 ) into Elasticsearch . Highlight works in this PR include : 1 . Replace hard-deletes by soft-deletes in InternalEngine 2 . Use _recovery_source if _source is disabled or modified ( # 31106 ) 3 . Soft-deletes retention policy based on the global checkpoint ( # 30335 ) 4 . Read operation history from Lucene instead of translog ( # 30120 ) 5 . Use Lucene history in peer-recovery ( # 30522 ) These pieces were reviewed already in the feature branch but we would like to give them an extra look before pulling into the upstream . Relates # 30086 Closes # 29530 These works have been done by the whole team ; however , these individuals ( lexical order ) have significant contribution in coding and reviewing : Co-authored-by : Adrien Grand < jpountz @ gmail.com > Co-authored-by : Boaz Leskes < b.leskes @ gmail.com > Co-authored-by : Jason Tedor < jason @ tedor.me > Co-authored-by : Martijn van Groningen < martijn.v.groningen @ gmail.com > Co-authored-by : Nhat Nguyen < nhat.nguyen @ elastic.co > Co-authored-by : Simon Willnauer < simonw
Remove PROTO-serialization from IndexMetaData.Custom __EoT__ Switches IndexMetaData.Custom to the standard named serialization . Supersedes # 32683 @ jasontedor this is a version of # 32683 without any breaking changes in terms of functionality and user interface . It will require small changes in existing plugins that use IndexMetaData.Custom , but otherwise , I think there is total parity with existing implementation minus PROTO-serialization . @ tlrx could you take a look at my ( mis ) use of SPI and XContent parsers in [ ` CreateIndexRequest ` ] ( https : //github.com/elastic/elasticsearch/compare/master ... imotov : remove-proto-from-indexmetadata-custom-2 ? expand=1 # diff-9d81c9f84ef61a9dcbad958e66afb2f3R408 ) and ` PutIndexTemplateRequest ` ? Did I miss anything there ?
Add NoOps to Lucene for failed delete operations __EoT__ Today we add a NoOp to Lucene and translog if we fail to process an indexing operation . However , we are only adding NoOps to translog for delete operations . In order to have a complete history in Lucene , we should add NoOps of failed delete operations to both Lucene and translog . Relates # 29530
Update BucketUtils # suggestShardSideQueueSize signature __EoT__ ` BucketUtils # suggestShardSideQueueSize ` used to calculate the shard_size based on the number of shards . It returns now a different value only based on whether we are querying a single shard or multiple shards . This commit replaces the numberOfShards argument with a boolean that tells whether we are querying a single shard or not .
ingest : minor - update test to include dissect __EoT__ This change also includes placing the bytes processor in the correct order ( helps to avoid merge conflict when back patching processors )
Ensure to generate identical NoOp for the same failure __EoT__ We generate slightly different NoOps in InternalEngine and TransportShardBulkAction for the same failure . 1 . InternalEngine uses Exception # getFailure to generate a message without the class name . > newOp [ NoOp { seqNo=1 , primaryTerm=1 , reason='Contexts are mandatory in context enabled completion field [ suggest_context ] ' } ] 2 . TransportShardBulkAction uses Exception # toString to generate a message with the class name . > NoOp { seqNo=1 , primaryTerm=1 , reason='java.lang.IllegalArgumentException : Contexts are mandatory in context enabled completion field [ suggest_context ] ' } If a write operation fails while a replica is recovering , that replica will possibly receive two different NoOps : one from recovery and one from replication . These two different NoOps will trip ` TranslogWriter # assertNoSeqNumberConflict ` assertion . This commit makes sure that we generate the same No-Ops for the same failure . Closes # 32986
[ Rollup ] Move toBuilders ( ) methods out of rollup config objects __EoT__ This pull request removes the ` toBuilders ( ) ` methods from the rollup configuration objects . This way they do not rely on aggregation value sources anymore and do not expose a ` toBuilders ( ) ` method that is tighlty coupled to the rollup indexer .
Apply publishing to generate pom __EoT__ The esplugin no longer does this . I checked this when making that change but somehow missed this project , checked again should be no others .
Do not lose default mapper on metadata updates __EoT__ When applying index metadata updates we run through the mappings updating them if needed . Today if there is not an update to the default mapper , we can lose the default mapping . This means that , for example , if we apply a settings update to an index we will lose the default mapper . This happens because we were not guarding updating the default mapping with a check that the default mapping was updated in the metadata update . When there is no update in the metadata update , we need to continue to preserve the previous default mapping . This commit achieves this by moving the updating of the default mapping under the same guard that we use for updating the default mapping source . We add a test that fails before putting the update under a guard and now passes after moving the update under the guard . Relates # 29511
Fix a mappings update test __EoT__ This commit fixes a mappings update test . The test is broken in the sense that it passes , but for the wrong reason . The test here is testing that if we make a mapping update but do not commit that mapping update then the mapper service still maintains the previous document mapper . This was not the case long , long ago when a mapping update would update the in-memory state before the cluster state update was committed . This test was passing , but it was passing because the mapping update was never even updated . It was never even updated because it was encountering a null pointer exception . Of course the in-memory state is not going to be updated in that case , we are simply going to end up with a failed cluster state update . Fixing that leads to another issue which is that the mapping source does not even parse so again we would , of course , end up with the in-memory state not being modified . We fix these issues , assert that the result cluster state task completed successfully , and finally that
Update Google Cloud Storage Library for Java __EoT__ This commit updated the google-cloud-storage library from version 1.28.0 to version 1.40.0 . I did n't find the release notes .
Do NOT allow termvectors on nested fields __EoT__ Requesting _termvectors on a nested field or any sub-fields of a nested field returns empty results . Closes # 21625 , # 32652
Refactor Netty4Utils # maybeDie __EoT__ In our Netty layer we have had to take extra precautions against Netty catching throwables which prevents them from reaching the uncaught exception handler . This code has taken on additional uses in NIO layer and now in the scheduler engine because there are other components in stack traces that could catch throwables and suppress them from reaching the uncaught exception handler . This commit is a simple cleanup of the iterative evolution of this code to refactor all uses into a single method in ExceptionsHelper .
Add settings updater for 2 affix settings __EoT__ Today we can only have non-affix settings updated and consumed _together_ . Yet , there are usecases where two affix settings depend on each other which makes using the hard without consuming updates together . Unfortunately , there is not straight forward way to have N settings updated together in a typesafe way having 2 still serves a large portion of usecases .
Run forbidden api checks with runtimeJavaVersion __EoT__ Switching to the CLI version of the tool allows us to run it with the runtime java version . The newly introduced task just a thin wrapper over the cli args and we configure it as before from precommit . Since we only used it in one place , the extensions is no longer used as ` tasks.withType ` achieves the same goal .
conditionally update CS only if StepInfo changes __EoT__ If we are waiting on a condition to be met , and the reason it is not completed is unchanged , we find ourselves updating cluster state over and over again and kicking of the ILM listeners to re-check . This is overkill and can generate way too many cluster state updates
Move ML tests to be sub-projects of ML __EoT__ This commit moves the ML QA tests to be a sub-project of ML . The purpose of this refactoring is to enable ML developers to run : x-pack : plugin : ml : check and run the vast majority of a ML tests with a single command ( this still does not contain the ML REST tests , nor the upgrade tests ) . This simplifies local development for faster iteration .
Protect scheduler engine against throwing listeners __EoT__ There are two problems with the scheduler engine today . Both relate to listeners that throw . The first problem is that any triggered listener that throws a plain old exception will cause no additional listeners to be triggered for the event , and will also cause the scheduler to never be invoked again . This leads to lost events and is bad . The second problem is that any triggered listener that throws an error of the fatal kind will not lead to that error because caught by the uncaught exception handler . This is because the triggered listener is executed as a future task under a scheduled thread pool executor . A throwable there goes caught by the JDK framework and set as the outcome on the future task . Since we never inspect these tasks for their outcomes , nor is there a good place to do this , we have to handle these errors ourselves . To do this , we catch them and dispatch them to the uncaught exception handler via a forked thread . This is similar to our handling in Netty .
Fix assertion in AbstractSimpleTransportTestCase __EoT__ This is a follow-up to # 32956 . That commit incorrectly used assertBusy which led to a possible race in the test . This commit fixes it .
Fix some small issues in the getting started docs __EoT__ * Modified a reference to real time to match the previous line reference of realtime . * Modified eg to e.g . as it 's an abbreviation for the latin exempli gratia . * Added missing pronoun to ` _executing_filters ` section to read better .
NETWORKING : Make RemoteClusterConn . Lazy Resolve DNS __EoT__ * Lazy resolve DNS ( i.e . ` String ` to ` DiscoveryNode ` ) to not run into indefinitely caching lookup issues ( provided the JVM dns cache is configured correctly as explained in https : //www.elastic.co/guide/en/elasticsearch/reference/6.3/networkaddress-cache-ttl.html ) * Changed ` InetAddress ` type to ` String ` for that higher up the stack * Passed down ` Supplier < DiscoveryNode > ` instead of outright ` DiscoveryNode ` from ` RemoteClusterAware # buildRemoteClustersSeeds ` on to lazy resolve DNS when the ` DiscoveryNode ` is actually used ( could 've also passed down the value of ` clusterName = REMOTE_CLUSTERS_SEEDS.getNamespace ( concreteSetting ) ` together with the ` List < String > ` of hosts , but this route seemed to introduce less duplication and resulted in a significantly smaller changeset ) . * Closes # 28858
[ DOCS ] Splits the token APIs into separate pages __EoT__ The Tokens API documentation ( https : //www.elastic.co/guide/en/elasticsearch/reference/master/security-api-tokens.html ) currently contains information about multiple APIs ( get and delete ) . This PR splits that information across multiple pages , mirroring the layout of the machine learning APIs and OpenAPI output . This layout change was discussed briefly in # 32635 ( comment ) . Related to https : //github.com/elastic/elasticsearch/pull/32794 , https : //github.com/elastic/elasticsearch/pull/32825 , and https : //github.com/elastic/elasticsearch/pull/32797
HLRC : Move ML request converters into their own class __EoT__
RFC : Test that example plugins build stand-alone __EoT__ The initial goal was to write a test to make sure that build-tools can be used by plugin authors outside of our build . Example projects seemed like a good fit rather than writing dummy ones just for the test . - Add an integration test based on testKit to build the example plugins like stand alone projects - the tests injects the snapshots repo right now - an alternative would be to inject the last release version to cause dependency resolution against that . It would n't be 100 % realistic as we would build using old dependencies and current build-tools which never happens in practice , but it would result in fewer moving parts . - the snapshots does cover more ground at the cost of some confusion as these are delayed from the current build , so any new issues will introduced will surface in the next build only . - there are also some changes for making it easier to copy these examples , but it wo n't quite work yet , e.x . applying the plugin only works because of testKit . Applying the project like
Move CharArrays to core lib __EoT__ This change cleans up some methods in the CharArrays class from x-pack , which includes the unification of char [ ] to utf8 and utf8 to char [ ] conversions that intentionally do not use strings . There was previously an implementation in x-pack and in the reloading of secure settings . The method from the reloading of secure settings was adopted as it handled more scenarios related to the backing byte and char buffers that were used to perform the conversions . The cleaned up class is moved into libs/core to allow it to be used by requests that will be migrated to the high level rest client . Relates # 32332
[ ML ] Add log structure finder functionality __EoT__ This change adds a library to ML that can be used to deduce a log file 's structure given only a sample of the log file . Eventually this will be used to add an endpoint to ML to make the functionality available to end users , but this will follow in a separate change . The functionality is split into a library so that it can also be used by a command line tool without requiring the command line tool to include all server code .
Security : remove password hash bootstrap check __EoT__ This change removes the PasswordHashingBootstrapCheck and replaces it with validation on the setting itself . This ensures we always get a valid value from the setting when it is used .
Test : Fix forbidden uses in test framework __EoT__ This commit fixes existing uses of forbidden apis in the test framework and re-enables the forbidden apis check . It was previously completely disabled and had missed a rename of the forbidden apis signatures files . closes # 32772
Painless : Change fqn_only to no_import __EoT__ This changes the whitelist parameter fqn_only to no_import when specifying that a whitelisted class must have the fully-qualified-name instead of a shortcut name . This more closely correlates with Java imports , hence the rename .
[ TEST ] Select free port for Minio __EoT__ Minio does not support dynamic ports . The workaround here is to scan for a free port first . This is not foolproof , but as we do n't expect too many of these builds to run at once on the same machine , this should do the trick . Closes # 32701 and # 32208
HLRC : Add Delete License API __EoT__ Relates to # 29827
SCRIPTING : Support BucketAggScript return null __EoT__ * As explained in # 32790 , ` BucketAggregationScript ` must support ` null ` as a return value * Closes # 32790
SQL : Ignore H2 comparative tests for uppercasing/lowercasing string functions __EoT__ ES-SQL is , so far , ignoring the Locale , but we have comparative tests with H2 that are failing because of this . Still , the same queries are executed against ES-SQL alone and results asserted to be correct . We should investigate if a Locale should be used for some functions : https : //github.com/elastic/elasticsearch/issues/32603 Fixes https : //github.com/elastic/elasticsearch/issues/32589
Adds explain lifecycle API to the Rest Client __EoT__
change default indices.lifecycle.poll_interval to something sane __EoT__ This was originally set to a few seconds while prototyping things . This interval is for the scheduled trigger of policies . Policies have this extra trigger beyond just on cluster-state changes because cluster-state changes may not be happeneing in a cluster for whatever reason , and we need to continue making progress . Updating this value to be larger is reasonable since not all operations are expected to be completed in the span of seconds , but instead in minutes and hours .
[ Docs ] Light edit to docker content __EoT__ Makes docker content consistent with edits made to similar content in other books : https : //github.com/elastic/logstash/pull/9856 https : //github.com/elastic/beats/pull/7615 https : //github.com/elastic/kibana/pull/21240
Rest HL client : Add get license action __EoT__ WIP : @ nik9000 , @ hub-cap I have implemented it in the license-as-a-string style that we discussed before , but just want to make sure that we are still ok with it for this one , before polishing it off . Could you take a look when you have a chance ? Continues to use String instead of a more complex License class to hold the license text similarly to put license . Relates # 29827
[ Rollup ] Improve ID scheme for rollup documents __EoT__ Previously , we were using a simple CRC32 for the IDs of rollup documents . This is a very poor choice however , since 32bit IDs leads to collisions between documents very quickly . This PR moves Rollups over to a 128bit ID . The ID is a concatenation of all the keys in the document ( similar to the rolling CRC before ) , hashed with 128bit Murmur3 , then base64 encoded . Finally , the job ID and a delimiter ( ` $ ` ) are prepended to the ID . This guarantees that there are 128bits per-job . 128bits should essentially remove all chances of collisions , and the prepended job ID means that _if_ there is a collision , it stays `` within '' the job . **BWC notes : ** We can only upgrade the ID scheme after we know there has been a good checkpoint during indexing . We do n't rely on a STARTED/STOPPED status since we ca n't guarantee that resulted from a real checkpoint , or some other circumstance . So we only upgrade the ID after we have reached a
Tests : Add rolling upgrade tests for watcher __EoT__ These tests ensure , that the basic watch APIs are tested in the rolling upgrade tests . After initially adding a watch , the tests try to get , execute , deactivate and activate a watch . Watcher stats are tested as well , and an own java based test has been added for restarting , as that requires waiting for a state change . Closes # 31216
HLRC : Move commercial clients from XPackClient __EoT__ The commercial clients were improperly placed into XPackClient , which is a wrapper for the miscellaneous usage and info APIs . This commit moves them into the HLRC .
re-enable ILM integration tests and fix policyRegistry update bug __EoT__ This PR re-introduces our ILM integration tests with mock steps that we can control in the tests . These tests uncovered a bug where the policy-steps-registry was not being updated on newly elected masters when there were no cluster-state changes to ILM metadata . The fix layed out cleans up the registry/runner when a node is un-elected as master . It re-assigns the class variables so that the existing runner/registry instances that may be running can continue to do so in other threads , potentially .
Use hostname instead of IP with SPNEGO test __EoT__ This change updates KerberosAuthenticationIT to resolve the host used to connect to the test cluster . This is needed because the host could be an IP address but SPNEGO requires a hostname to work properly . This is done by adding a hook in ESRestTestCase for building the HttpHost from the host and port . Additionally , the project now specifies the IPv4 loopback address as the http host . This is done because we need to be able to resolve the address used for the HTTP transport before the node starts up , but the http.ports file is not written until the node is started . Closes # 32498
Logging : Make node name consistent in logger __EoT__ First , some background : we have 15 different methods to get a logger in Elasticsearch but they can be broken down into three broad categories based on what information is provided when building the logger . Just a class like : `` ` private static final Logger logger = ESLoggerFactory.getLogger ( ActionModule.class ) ; `` ` or : `` ` Loggers.getLogger ( getClass ( ) ) ; `` ` The class and settings : `` ` Loggers.getLogger ( getClass ( ) , settings ) ; `` ` Or more information like : `` ` Loggers.getLogger ( `` index.store.deletes '' , settings , shardId ) `` ` The goal of the `` class and settings '' variant is to attach the node name to the logger . Because we do n't always have the settings available , we often use the `` just a class '' variant and get loggers without node names attached . There is n't any real consistency here . Some loggers get the node name because it is convenient and some do not . This change makes the node name available to all loggers all the time
Docs : Fix README upgrade mention __EoT__ The README still mentioned Elasticsearch 1.x . This commit refers to our documentation instead and properly formats the last paragraph .
IndicesClusterStateService should replace an init . replica with an init . primary with the same aId __EoT__ In rare cases it is possible that a nodes gets an instruction to replace a replica shard that 's in ` POST_RECOVERY ` with a new initializing primary with the same allocation id . This can happen by batching cluster states that include the starting of the replica , with closing of the indices , opening it up again and allocating the primary shard to the node in question . The node should then clean it 's initializing replica and replace it with a new initializing primary . I 'm not sure whether the test I added really adds enough value as existing tests found this . The main reason I added is to allow for simpler reproduction and to double check I fixed it . I 'm open to discuss if we should keep . Closes # 32308
AbstractQueryTestCase should run without type less often __EoT__ AbstractQueryTestCase is instanciated without mapping type one third of the time . Since most of the tests are disabled when there is no type this commit modifies the probability to use rarely ( ) instead of a fixed probability .
INGEST : Fix Deprecation Warning in Script Proc . __EoT__ * Using short script form normalized to a map that used 'inline ' instead of 'source ' so a short form processor definition like : `` ` { `` script '' : `` ctx.foo= 'bar ' '' } `` ` would always warn about the following deprecation : `` ` # ! Deprecation : Deprecated field [ inline ] used , expected [ source ] `` `
[ CI ] Reactivate 3rd party tests on CI [ 2nd ] __EoT__ Initial PR # 32315 was not sufficient : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+third-party-tests/31/ It is not possible to reproduce it locally - therefore I ran CI for my branch and got green build : https : //elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+third-party-tests/33/
[ ML ] Extract persistent task methods from MlMetadata __EoT__ Move ML persistent task helper functions to the new class ` MlTasks ` Logically grouping the methods in the new ` MlTasks ` means ` MLMetadataField ` can be removed after moving the string constant to ` MlMetadata ` .
Remove unnecessary warning supressions __EoT__ These supressions are no longer needed and cause warnings themselves .
Switch full-cluster-restart to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` qa/full-cluster-restart ` project to use the new versions . It also fixes a small bug in the test for explain on the ` _all ` field that was causing it to not properly invoke ` _explain ` .
Add region ISO code to GeoIP Ingest plugin __EoT__ The @ elastic/kibana-gis team is providing [ vector layer boundaries of country subdivisions for Kibana region maps ] ( https : //www.elastic.co/elastic-maps-service ) . These subdivision layers can be joined to data in Elasticsearch via the ISO 3166-2 code . This PR adds the ISO 3166-2 region code to IP addresses when using Ingest Geoip plugin . With this enhancement , users will be able to drill down their IP logs into country subdivisions . The screenshot below is an example of a Kibana dashboard showing IP address logs from Canadian provinces , German states , and Irish counties . ! [ screen shot 2018-06-27 at 16 43 12 ] ( https : //user-images.githubusercontent.com/1638483/42055409-e67c30b4-7acb-11e8-93a6-26de67cad829.png ) For example , this is a snip of a vector layer for a state in Germany . `` ` json ... { `` type '' : `` Feature '' , `` id '' : `` Q64 '' , `` properties '' : { `` iso_3166_2 '' : `` DE-BE '' , `` label_en '' : `` Berlin '' , `` label_de '' : `` Berlin '' } , `` geometry '' : { ... } }
Enhance Parent circuit breaker error message __EoT__ This adds information about either the current real usage ( if tracking `` real '' memory usage ) or the child breaker usages to the exception message when the parent circuit breaker trips . The messages now look like : `` ` [ parent ] Data too large , data for [ my_request ] would be [ 211288064/201.5mb ] , which is larger than the limit of [ 209715200/200mb ] , usages [ request=157286400/150mb , fielddata=54001664/51.5mb , in_flight_requests=0/0b , accounting=0/0b ] `` ` Or when tracking real memory usage : `` ` [ parent ] Data too large , data for [ request ] would be [ 251/251b ] , which is larger than the limit of [ 200/200b ] , real usage : [ 181/181b ] , new bytes reserved : [ 70/70b ] `` `
Rename ranking evaluation response ` unknown_docs ` section __EoT__ Currently the ranking evaluation response contains a section called 'unknown_docs ' for each search use case in the evaluation set . It contains document ids for results in the search hits that currently do n't have a quality rating . This change renames that section to ` unrated_docs ` which reflects this purpose better .
Remove indication of future multi-homing support __EoT__ We do not support intra-cluster connections on multiple interfaces , but the documentation indicates that we will in future . In fact there is currently no plan to support this , so the forward-looking documentation is misleading . This commit - removes the misleading sentence - fixes that a transport profile affects outbound connections , not inbound ones - tidies up some nearby text
Add EC2 credential test for repository-s3 __EoT__ Add EC2 credential test for repository-s3 Relates to # 26913
[ CCR ] Improve retry mechanism when making remote calls from shard follow task __EoT__ Change the shard follow task to use a retry counter per remote call ( shard changes api , bulk shard operations api and mapping update ) instead of having a single retry counter for a single shard follow task . PR for # 31816
Enable testing in FIPS140 JVM __EoT__ JKS keystores can not be used in a FIPS 140 JVM as attempting to use one in order to init a KeyManagerFactory is not allowed . ( JKS keystore algorithms for private key encryption are not FIPS 140 approved ) This commit replaces JKS keystores in our tests with the corresponding PEM encoded key and certificates for most of key and trust configurations . JKS keystores are still used in some places as TrustManagerFactory can be init with JKS keystores . Whenever it 's not possible to refactor the test , i.e . when we are testing that we can load a JKS keystore , etc . we attempt to mute the test when we are running in FIPS 140 JVM . Testing for the JVM is naive and is based on the name of the security provider as we would control the testing infrastrtucture and so this would be reliable enough . Other cases of tests being muted are the ones that involve custom TrustStoreManagers or KeyStoreManagers , null TLS Ciphers and the SAMLAuthneticator class as we can not sign XML documents in the way we were doing . SAMLAuthenticator tests in a
Add Index UUID to ` /_stats ` Response __EoT__ * Add `` uuid '' field to each index 's section in the ` /_stats ` response * closes # 31791
Fix compile issues introduced by merge __EoT__ The build was broken due to some issues with the merging of # 32018 . A method that was public went private before the PR was merged . That did not cause a merge conflict ( so the PR was merged successfully ) . But it did cause the build to fail .
SQL : Add support for single parameter text manipulating functions __EoT__ Adds support for unary string manipulating functions : - ASCII , BIT_LENGTH , CHAR - CHAR_LENGTH , LCASE , LENGTH - LTRIM , RTRIM , SPACE , UCASE Part of https : //github.com/elastic/elasticsearch/issues/31604 .
Work around reported problem in eclipse __EoT__ The Gradle plugin https : //docs.gradle.org/current/userguide/java_gradle_plugin.html added recently adds a folder to the CP , which is not created for the eclipse import , ausing eclipse to complain .
Move build integration tests out of : buildSrc project __EoT__ This way we wo n't spend time with ` : buildSrc : check ` for all invocations of Gradle , and it will be less disruptive if integration tests fail - at least being able to import to Idea .
Switch low level rest tests to new style Requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` client/rest ` project to use the new versions .
Switch high level rest tests to new style requests __EoT__ In # 29623 we added ` Request ` object flavored requests to the low level REST client and in # 30315 we deprecated the old ` performRequest ` s . This changes all calls in the ` client/rest-high-level ` project to use the new versions .
HLREST : Bundle the x-pack protocol project __EoT__ The ` : x-pack : protocol ` project is an implementation detail shared by the xpack projects and the high level rest client and really does n't deserve its own maven coordinants and published javadoc . This change bundles ` : x-pack : protocol ` into the high level rest client . Relates to # 29827
Handle missing values in painless __EoT__ Throw an exception for ` doc [ 'field ' ] .value ` if this document is missing a value for the ` field ` . For 7.0 : This is the default behaviour from 7.0 For 6.x : To enable this behavior from 6.x , a user can set a jvm.option : ` -Des.script.exception_for_missing_value=true ` on a node . If a user does not enable this behavior , a deprecation warning is logged on start up . Motivation : The reason for this change is to correct the current situation where missing values are arbitrary handled in scripts : some types were returning ` null ` , some types were returning ` false ` , ` 0 ` or ` epoch . We wanted to standardize it . Another reason was that to make it compatible how Lucene was handling missing values in DocValues . Lucene used to have a contract that NumericDocValuesshould return 0 when the document doesn ’ t have a value . But later a bitset of documents that had a value was added and now we have iterators of only docs with a value . Closes # 29286
REST high-level client : add get index API __EoT__ Relates to # 27205 This is a followup to # 31675 . - [ x ] Requires # 31675 to be merged first .
SQL : Allow long literals __EoT__ Fix bug that caused integral literals to be only Integer ( rejecting Long ) . This commit fixes that and picks either an Integer or Long based on size . Closes # 31750
[ ML ] Fix calendar and filter updates from non-master nodes __EoT__ Job updates or changes to calendars or filters may result into updating the job process if it has been running . To preserve the order of updates , process updates are queued through the UpdateJobProcessNotifier which is only running on the master node . All actions performing such updates must run on the master node . However , the CRUD actions for calendars and filters are not master node actions . They have been submitting the updates to the UpdateJobProcessNotifier even though it might have not been running ( given the action was run on a non-master node ) . When that happens , the update never reaches the process . This commit fixes this problem by ensuring the notifier runs on all nodes and by ensuring the process update action gets the resources again before updating the process ( instead of having those resources passed in the request ) . This ensures that even if the order of the updates gets messed up , the latest update will read the latest state of those resource and the process will get back in sync . This leaves us
JDBC : Fix stackoverflow on getObject and timestamp conversion __EoT__ A fix for https : //github.com/elastic/elasticsearch/issues/31734 . Another bug-fix for a StackOverFlow error in ` getObject ` method .
Split CircuitBreaker-related tests __EoT__ ` MemoryCircuitBreakerTests ` conflates two test aspects : It tests individual circuit breakers as well as the circuit breaker hierarchy . With this commit we split those two aspects into two test classes : * Tests for individual circuit breakers stay in the current class * Other tests are moved to ` HierarchyCircuitBreakerServiceTests `
Add write*Blob option to replace existing blob __EoT__ Adds a new parameter to the ` BlobContainer # write*Blob ` methods to specify whether the existing file should be overridden or not . For some metadata files in the repository , we actually want to replace the current file . This is currently implemented through an explicit blob delete and then a fresh write . In case of using a cloud provider ( S3 , GCS , Azure ) , this results in 2 API requests instead of just 1 . This change will therefore allow us to achieve the same functionality using less API requests .
Use external version type for history ops from Lucene __EoT__ Today we use version_type INTERNAL for the history operations from Lucene index . However , this does not cover the case in which the original operation has the version type EXTERNAL and version number 0 .
add ` ignore_missing ` property to ` foreach ` processor __EoT__ **Elasticsearch version** : v5.1.1 **Description of the problem including expected versus actual behavior** : The ` foreach ` processor throws an error if the json element is not present in the document . Request to have it implement ` ignore_missing ` to resolve like what was done for other processors so that ` ignore_failure ` is not needed . See https : //github.com/elastic/elasticsearch/issues/19995 for reference .
Correct the assertion arguments order __EoT__ Minor clean up PR that fixes the order of the assertion arguments ( high level REST client project )
IndexShard should not return null stats __EoT__ IndexShard should not return null stats - empty stats or AlreadyClosedException if it 's closed is better that eliminates NPE in [ PrimaryReplicaSyncer:87 ] ( https : //github.com/elastic/elasticsearch/blob/4d7447cb5e67f2739d5edc374e9c7c3a46d414da/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java # L87 ) on closing shard as well Relates to # 30176
Allow multiple unicast host providers __EoT__ This PR introduces support for multiple host providers . This allows the settings based hosts resolver to be just be treated as any other ` UnicastHostsProvider ` . The PR also introduces the notion of a ` HostsResolver ` so that plugins such as FileBasedDiscovery do not need to create their own thread pool for resolving hosts , making it easier to add new plugins .
Core : Remove ThreadPool from base TransportAction __EoT__ Most transport actions do n't need the node ThreadPool . This commit removes the ThreadPool as a super constructor parameter for TransportAction . The actions that do need the thread pool then have a member added to keep it from their own constructor .
[ DOCS ] Creates field and document level security overview __EoT__ This PR is related to https : //github.com/elastic/stack-docs/pull/55 . It removes the redundant information from https : //www.elastic.co/guide/en/elastic-stack-overview/master/field-and-document-access-control.html
lower rollover-info version bound to 6.4 __EoT__ The RolloverInfo feature in IndexMetaData introduced by # 31144 is supported in 6.4 , this commit reflects that pending backport : https : //github.com/elastic/elasticsearch/pull/31413/
[ DOCS ] Move licensing APIs to docs __EoT__ This PR fixes code snippet testing in a few licensing APIs and moves all API pages from x-pack/docs to docs . Related to https : //github.com/elastic/elasticsearch/issues/30665
Core : Remove index name resolver from base TransportAction __EoT__ Most transport actions do n't need to resolve index names . This commit removes the index name resolver as a super constructor parameter for TransportAction . The actions that do need the resolver then have a member added to keep the resolver from their own constructor .
[ DOCS ] Fixes code snippet testing for machine learning __EoT__ This PR enables code snippet testing for more machine learning documentation . It also adds missing [ role= '' xpack '' ] qualifiers and changes the titles to sentence-case . Related to https : //github.com/elastic/elasticsearch
Fix defaults in GeoShapeFieldMapper output __EoT__ GeoShapeFieldMapper should show actual defaults instead of placeholder values when the mapping is requested with include_defaults=true . Closes # 23206
REST high-level client : add validate query API __EoT__ Relates to # 27205
Add details section for dcg ranking metric __EoT__ While the other two ranking evaluation metrics ( precicion and reciprocal rank ) already provide a more detailed output for how their score is calculated , the discounted cumulative gain metric ( dcg ) and its normalized variant are lacking this until now . Its not totally clear which level of detail might be useful for debugging and understanding the final metric calculation , but this change adds a ` metric_details ` section to REST output that contains some information about the evaluation details ( like number of unlabeled docs , normalization factor etc ) .
Uncouple persistent task state and status __EoT__ This pull request removes the relationship between the state of persistent task ( as stored in the cluster state ) and the status of the task ( as reported by the Task APIs and used in various places ) that have been confusing for some time ( # 29608 ) . In order to do that , a new ` PersistentTaskState ` interface is added . This interface represents the persisted state of a persistent task . The methods used to update the state of persistent tasks are renamed : ` updatePersistentStatus ( ) ` becomes ` updatePersistentTaskState ( ) ` and now takes a ` PersistentTaskState ` as a parameter . The ` Task.Status ` type as been changed to ` PersistentTaskState ` in all places were it make sense ( in persistent task customs in cluster state and all other methods that deal with the state of an allocated persistent task ) . Since the task status and task state are both named writeables , the change should be backward compatible and does not require extra serialization/deserialization logic . A node could deserialize the state of a persistent task as a
[ CCR ] Added more validation to follow index api . __EoT__ Relates to # 30086
Remove RestGetAllAliasesAction __EoT__ We currently have a specific REST action to retrieve all aliaes , which uses internally the get index API . This does n't seem to be required anymore though as the existing RestGetAliaesAction could as well take the requests with no indices and aliases specified . This commit removes the RestGetAllAliasesAction in favour of using RestGetAliasesAction also for requests that do n't specify indices nor aliases . Similar to # 31129 .
[ ML ] Implement new rules design __EoT__ Rules allow users to supply a detector with domain knowledge that can improve the quality of the results . The model detects statistically anomalous results but it has no knowledge of the meaning of the values being modelled . For example , a detector that performs a population analysis over IP addresses could benefit from a list of IP addresses that the user knows to be safe . Then anomalous results for those IP addresses will not be created and will not affect the quantiles either . Another example would be a detector looking for anomalies in the median value of CPU utilization . A user might want to inform the detector that any results where the actual value is less than 5 is not interesting . This commit introduces a ` custom_rules ` field to the ` Detector ` . A detector may have multiple rules which are combined with ` or ` . A rule has 3 fields : ` actions ` , ` scope ` and ` conditions ` . Actions is a list of what should happen when the rule applies . The current options include ` skip_result
Delete typos in SAML docs __EoT__ This PR just removes typos in the SAML guide
[ INGEST ] Interrupt the current thread if evaluation grok expressions take too long __EoT__ This adds a thread interrupter that allows us to encapsulate calls to org.joni.Matcher # search ( ) This method can hang forever if the regex expression is too complex . The thread interrupter in the background checks every 3 seconds whether there are threads execution the ` org.joni.Matcher # search ( ... ) ` method for longer than 5 seconds and if so interrupts these threads . Joni has checks that that for every 30k iterations it checks if the current thread is interrupted and if so returns ` org.joni.Matcher # INTERRUPTED ` PR for # 28731
LLClient : Support host selection __EoT__ Allows users of the Low Level REST client to specify which hosts a request should be run on . They implement the ` NodeSelector ` interface or reuse a built in selector like ` NOT_MASTER_ONLY ` to chose which nodes are valid . Using it looks like : `` ` Request request = new Request ( `` POST '' , `` /foo/_search '' ) ; RequestOptions options = request.getOptions ( ) .toBuilder ( ) ; options.setNodeSelector ( NodeSelector.NOT_MASTER_ONLY ) ; request.setOptions ( options ) ; ... `` ` This introduces a new ` Node ` object which contains a ` HttpHost ` and the metadata about the host . At this point that metadata is just ` version ` and ` roles ` but I plan to add node attributes in a followup . The canonical way to **get** this metadata is to use the ` Sniffer ` to pull the information from the Elasticsearch cluster . I 've marked this as `` breaking-java '' because it breaks custom implementations of ` HostsSniffer ` by renaming the interface to ` NodesSniffer ` and by changing it from returning a ` List < HttpHost >
Remove vestiges of animal sniffer __EoT__ We no longer need animal sniffer because we use JDK functionality ( introduced in JDK 9 ) to target older versions of the JDK for compilation . This functionality means that the JDK handles the problem of ensuring that we do not use JDK APIs from the version that we are compiling from that are not available in the version that we are compiling to . A previous commit removed this for the REST client ( where we target JDK 7 ) but a few traces were left behind . Relates # 29646
Pass main class by environment variable __EoT__ A previous refactoring of the CLI scripts migrated all of the CLI tools to shell to a common script , elasticsearch-cli . This approach is fine in Bash where it is easy to tear arguments apart but it does n't work so well on Windows where quoting is insane . To avoid having to tear the arguments apart to separate the first argument to elasticsearch-cli from the remaining arguments , we instead choose a strategy where we can avoid tearing the arguments apart . To do this , we will instead pass the main class by an environment variable and then we can pass the arguments straight through . This will let us avoid awful quoting issues on Windows . This is the non-Windows side of that effort and the Windows side will be in a follow-up . Relates # 31058
Cleanup nio http thread names __EoT__ This is related to # 28898 . This commit adds the acceptor thread name to the method checking if this thread is a transport thread . Additionally , it modifies the nio http transport to use the same worker name as the netty4 http server transport .
[ DOCS ] Moves X-Pack settings to docs folder __EoT__ Related to https : //github.com/elastic/elasticsearch/issues/30665 This PR moves the settings folder and its contents from x-pack/docs/en to docs/reference in the elasticsearch repo
Do not check for S3 blob to exist before writing __EoT__ Amazon S3 provides a weak consistency model ( see https : //docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html ) . From the docs ( emphasis mine ) : > Amazon S3 provides read-after-write consistency for PUTS of new objects in your S3 bucket in all regions with one caveat . **The caveat is that if you make a HEAD or GET request to the key name ( to find if the object exists ) before creating the object , Amazon S3 provides eventual consistency for read-after-write** . > Amazon S3 offers eventual consistency for overwrite PUTS and DELETES in all regions . > Updates to a single key are atomic . For example , if you PUT to an existing key , a subsequent read might return the old data or the updated data , but it will never write corrupted or partial data . In # 19749 an extra check was added before writing each blob to ensure that we would not be overriding an existing blob . Due to S3 's weak consistency model , this check was best effort . To make matters worse , however , this resulted in a HEAD
Make sure KeywordFieldMapper # clone preserves split_queries_on_whitespace . __EoT__
[ doc ] fix a typo in Create Index naming limitation __EoT__
[ ML ] [ TEST ] Fix bucket count assertion in all tests in ModelPlotsIT __EoT__ This fixes the last remaining test that was missed in # 30717 . Closes # 30715
Cross Cluster Search : preserve remote status code __EoT__ In case an error is returned when calling search_shards on a remote cluster , which will lead to throwing an exception in the coordinating node , we should make sure that the status code returned by the coordinating node is the same as the one returned by the remote cluster . Up until now a 500 - Internal Server Error was always returned . This commit changes this behaviour so that for instance if an index is not found , which causes an 404 , a 404 is also returned by the coordinating node to the client . Closes # 27461
Update readme for testing x-pack code snippets __EoT__ This PR updates the README.asciidoc with instructions for testing the code snippets in the elasticsearch/x-pack/docs directory .
Add “ took ” timing info to response for _msearch/template API __EoT__ Unlike ` _msearch ` , the ` _msearch/template ` API was missing the ` took ` timing info in the response . Under the covers the template-based version delegates to a regular msearch so we now just return the timing information from the msearch response . Closes # 30957
SQL : Remove log4j and joda from JDBC dependencies __EoT__ More cleanup of JDBC driver project Relates to # 29856
Improve allocation-disabling instructions __EoT__ Clarify the “ one minute ” in the instructions to disable the shard allocation when doing maintenance to say that it is configurable . Add a note about making sure that no rebalancing occurs until the maintenance is complete . Relates # 19739 .
Include size of snapshot in snapshot metadata __EoT__ Adds difference of number of files ( and file sizes ) between prev and current snapshot . Total number/size reflects total number/size of files in snapshot . There are inconsistent properties - `` number_of_files '' but `` total_size '' and in fact they reflect incremental change . Align all stats property names and add effective total files properties . To summarize the change : stats ( for op like ` GET /_snapshot/backup1/snapshot_2/_status ? human ` ) looks **before : ** `` ` json '' stats '' : { '' number_of_files '' : 8 , '' processed_files '' : 8 , '' total_size '' : `` 4.6kb '' , '' total_size_in_bytes '' : 4797 , '' processed_size '' : `` 4.6kb '' , '' processed_size_in_bytes '' : 4797 , '' start_time_in_millis '' : 1523882347327 , '' time '' : `` 225ms '' , '' time_in_millis '' : 225 } `` ` **after : ** `` ` json { `` stats '' : { `` incremental '' : { '' file_count '' : 8 , '' size '' : 4797 , '' size_in_bytes '' : `` 4.6kb '' } , `` processed '' :
Harmonize include_defaults tests __EoT__ This PR breaks the include_defaults functionality of the get settings API into its own test , which is skipped for mixed-mode clusters containing pre-6.4 nodes .
Limit user to single concurrent auth per realm __EoT__ This commit reworks the way our realms perform caching in order to limit each principal to a single ongoing authentication per realm . In other words , this means that multiple requests made by the same user will not trigger more that one authentication attempt at a time if no entry has been stored in the cache . If an entry is present in our cache , there is no restriction on the number of concurrent authentications performed for this user . This change enables us to limit the load we place on an external system like an LDAP server and also preserve resources such as CPU on expensive operations such as BCrypt authentication . Closes # 30355
Use remote client in TransportFieldCapsAction __EoT__ We now have a remote cluster client exposed which can talk to a given remote cluster and manages reconnects etc . This makes code more readable than using the transport layer directly .
Move persistent task registrations to core __EoT__ Persistent tasks was moved from X-Pack to core in # 28455 . However , registration of the named writables and named X-content was left in X-Pack . This change moves the registration of the named writables and named X-content into core . Additionally , the persistent task actions are no longer registered in the X-Pack client plugin , as they are already registered in ActionModule .
setCircleRadius ( 0 ) not working on v3.0.0 __EoT__ setCircleRadius ( 0 ) for lineCharts throws an error and crash the app . `` ` java.lang.IllegalArgumentException : width and height must be > 0 at android.graphics.Bitmap.createBitmap ( Bitmap.java:829 ) at android.graphics.Bitmap.createBitmap ( Bitmap.java:808 ) at android.graphics.Bitmap.createBitmap ( Bitmap.java:775 ) at com.github.mikephil.charting.renderer.LineChartRenderer.drawCircles ( LineChartRenderer.java:687 ) at com.github.mikephil.charting.renderer.LineChartRenderer.drawExtras ( LineChartRenderer.java:595 ) at com.github.mikephil.charting.charts.BarLineChartBase.onDraw ( BarLineChartBase.java:252 ) at android.view.View.draw ( View.java:16178 ) at android.view.View.updateDisplayListIfDirty ( View.java:15174 ) at android.view.View.draw ( View.java:15948 ) at android.view.ViewGroup.drawChild ( ViewGroup.java:3609 ) at android.view.ViewGroup.dispatchDraw ( ViewGroup.java:3399 ) at android.view.View.updateDisplayListIfDirty ( View.java:15169 ) at android.view.View.draw ( View.java:15948 ) `` ` Edit : Found that there is the setDrawCircles method
leftAxis.setDrawLimitLinesBehindData ( false ) ; does n't affect chart circles __EoT__ First of all , thanks for an awesome chart library . It has saved me a lot of development time . ` leftAxis.setDrawLimitLinesBehindData ( false ) ; ` does n't seem to affect the chart 's circles . I am wondering if there 's anything I need to set for the limit line to be drawn in front of the chart 's circles . Also , is there a way to decrease the thickness of the chart circle 's circumference line when increasing the circle 's radius ? Thanks . ! [ screenshot_20160301-102142 ] ( https : //cloud.githubusercontent.com/assets/5240961/13433342/6af06664-df9f-11e5-8f1a-a4ee43ecc8fb.png )
RadarChart : color filled outside bounderies in Old Android __EoT__ Hi , In Android 5.0 , just fine . Instead in **Android 4.1.2** this happens : ! [ 2016-03-19 13 07 10 ] ( https : //cloud.githubusercontent.com/assets/11578646/13898511/eb26f644-edd3-11e5-98f3-195dcba7d584.png ) Very nice library . Good job ! Thanks
LargeValueFormatter __EoT__ Debug from : String makePretty ( double number ) 1 ) Lenovo A319 ( Android 4.4.2 ) Generate value ( etc number ) for Legend X-Axis : 99999 , 199998 , 299997 2 ) Android emulator ( 4.0.3 ) & Samsung Tablet ( 5.0.2 ) : 100000 , 200000 , 300000 I will be testing continue .
NullPointerException when chart tries to highlight in bar chart __EoT__ `` ` Process : com ... .. , PID : 23804 java.lang.NullPointerException : Attempt to read from null array at com.github.mikephil.charting.highlight.BarHighlighter.getStackedHighlight ( BarHighlighter.java:108 ) at com.github.mikephil.charting.highlight.BarHighlighter.getHighlight ( BarHighlighter.java:37 ) at com.github.mikephil.charting.charts.BarChart.getHighlightByTouchPoint ( BarChart.java:97 ) at com.github.mikephil.charting.listener.BarLineChartTouchListener.performHighlightDrag ( BarLineChartTouchListener.java:382 ) at com.github.mikephil.charting.listener.BarLineChartTouchListener.onTouch ( BarLineChartTouchListener.java:157 ) at com.github.mikephil.charting.charts.BarLineChartBase.onTouchEvent ( BarLineChartBase.java:663 ) at android.view.View.dispatchTouchEvent ( View.java:8388 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2424 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2158 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2430 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2172 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2430 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2172 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2430 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2172 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2430 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2172 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2430 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2172 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2430 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2172 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2430 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2172 ) at android.view.ViewGroup.dispatchTransformedTouchEvent ( ViewGroup.java:2430 ) at android.view.ViewGroup.dispatchTouchEvent ( ViewGroup.java:2172 ) at com.android.internal.policy.impl.PhoneWindow $ DecorView.superDispatchTouchEvent ( PhoneWindow.java:2314 ) at com.android.internal.policy.impl.PhoneWindow.superDispatchTouchEvent ( PhoneWindow.java:1692 ) at android.app.Activity.dispatchTouchEvent ( Activity.java:2739 ) at android.support.v7.view.WindowCallbackWrapper.dispatchTouchEvent ( WindowCallbackWrapper.java:60 ) at android.support.v7.view.WindowCallbackWrapper.dispatchTouchEvent ( WindowCallbackWrapper.java:60 ) at com.android.internal.policy.impl.PhoneWindow $ DecorView.dispatchTouchEvent ( PhoneWindow.java:2275 ) at android.view.View.dispatchPointerEvent ( View.java:8578 ) at android.view.ViewRootImpl $ ViewPostImeInputStage.processPointerEvent ( ViewRootImpl.java:4021 )
The red line is missing , why ? __EoT__ ! [ issue ] ( https : //cloud.githubusercontent.com/assets/5269738/10572899/ac0d38e6-767e-11e5-9cad-ac66fe827ce7.png )
XValueFormatter ( level of detail ) __EoT__ MPAndroidChart nicely manages to selectively display only certain x values+labels when there are too many . In this case it would be nice if one could display different x labels depending on the number of x-labels skipped . Imagine a time scale on the x axis with values for every minute . The label for every entry would typically be the timestamp ( hour : minute ) . Now depending on how many entries you display ( a day , a week , a month ) , it does n't make sense to display hour : minute . For a week , you would rather display the day , or maybe day : hour . For a month maybe just the day . The whole thing not only depends on the number of entries provided though , but on the entries actually displayed in the viewport . I.e . when you zoom deep into a month , you may want to get the actual hour : minute labels again . It would be nice if MPAndroidChart would provide an XValueFormatter interface that would be provided with enough information so that it can calculate
java.lang.NullPointerException : Attempt to read from null array __EoT__ java.lang.NullPointerException : Attempt to read from null array at com.github.mikephil.charting.renderer.BarChartRenderer.drawHighlighted ( BarChartRenderer.java:353 ) at com.github.mikephil.charting.charts.BarLineChartBase.onDraw ( BarLineChartBase.java:226 ) when set mChart.setHighlightEnabled ( true ) ; and make a stackbarchart , clicked one stack , highlighted it , then , mChart.clear ( ) ; make a normal chart , sometimes , throws an exception .
Memory Leak in Chart.java __EoT__ There is mDrawBitmap in Chart.java , in function onSizeChanged ( ) it creates bitmap and assigned it to mDrawBitmap . if ( mDrawBitmap ! = null ) mDrawBitmap.recycle ( ) ; mDrawBitmap = Bitmap.createBitmap ( w , h , Bitmap.Config.ARGB_4444 ) ; mDrawBitmap is not used anywhere in codebase , it allocates the huge memory depending on resolution causes OOM . Steps to reproduce it from MPChartSample Add default condition in switch of getItem ( ) in SimpleChartDemo.java like default : f = PieChartFrag.newInstance ( ) ; Add return count 50 from getCount ( ) . @ Override public int getCount ( ) { return 50 ; }
with YAxisLabelPosition.INSIDE_CHART the setYOffset have no effect __EoT__ Hi , I need to show a linear chart with the visible labels on Yaxis . I want to show labels top the axis line and not over so a I try to set the Yoffset ( I see that the Xoffset property is ok ) , but it has no effect . Could you suggest me something to resolve it ? Thanks Max
LineChart initialization error __EoT__ `` ` at com.github.mikephil.charting.charts.BarLineChartBase.getScaleX ( BarLineChartBase.java:1071 ) at android.view.View.setScaleX ( View.java:10246 ) at android.view.View. < init > ( View.java:4172 ) at android.view.ViewGroup. < init > ( ViewGroup.java:491 ) at android.view.ViewGroup. < init > ( ViewGroup.java:487 ) at android.view.ViewGroup. < init > ( ViewGroup.java:483 ) at com.github.mikephil.charting.charts.Chart. < init > ( Chart.java:154 ) at com.github.mikephil.charting.charts.BarLineChartBase. < init > ( BarLineChartBase.java:118 ) at com.github.mikephil.charting.charts.LineChart. < init > ( LineChart.java:29 ) at java.lang.reflect.Constructor.newInstance ( Constructor.java : -1 ) at java.lang.reflect.Constructor.newInstance ( Constructor.java:288 ) at android.view.LayoutInflater.createView ( LayoutInflater.java:607 ) at android.view.LayoutInflater.createViewFromTag ( LayoutInflater.java:743 ) at android.view.LayoutInflater.rInflate ( LayoutInflater.java:806 ) at android.view.LayoutInflater.rInflate ( LayoutInflater.java:809 ) at android.view.LayoutInflater.inflate ( LayoutInflater.java:504 ) at android.view.LayoutInflater.inflate ( LayoutInflater.java:414 ) at [ REDACTED ] .onCreateView ( [ REDACTED ] .java:44 ) `` ` This happens when you have elevation/scale/translation/rotation set as an XML attribute on the LineChart .
Pie chart animation trasparent circle radius __EoT__ ! [ screenshot_2015-04-12-13-16-33 ] ( https : //cloud.githubusercontent.com/assets/11709402/7105388/69b51caa-e116-11e4-97f1-e059653973e6.png ) In the new version this bug appears . The transparent circle radius is drawed immediately .
LineChart - probably bug introduced with 2.0.9 __EoT__ I just tried the same chart with version 2.0.8 and 2.0.9 . In the old version , everything works perfectly but in the new version , it crashes with the appended exception . I never had problems with the old version before ... Are there any major changes that I have to take care off in my code that could make the new version not compatible any more ? `` ` java.lang.ArrayIndexOutOfBoundsException : length=0 ; index=-1 at java.util.ArrayList.get ( ArrayList.java:310 ) at com.github.mikephil.charting.buffer.CircleBuffer.feed ( CircleBuffer.java:26 ) at com.github.mikephil.charting.renderer.LineChartRenderer.drawCircles ( LineChartRenderer.java:492 ) at com.github.mikephil.charting.renderer.LineChartRenderer.drawExtras ( LineChartRenderer.java:458 ) at com.github.mikephil.charting.charts.BarLineChartBase.onDraw ( BarLineChartBase.java:236 ) at android.view.View.draw ( View.java:15507 ) at android.view.View.getDisplayList ( View.java:14401 ) at android.view.View.getDisplayList ( View.java:14443 ) at android.view.View.draw ( View.java:15221 ) at android.view.ViewGroup.drawChild ( ViewGroup.java:3340 ) at android.view.ViewGroup.dispatchDraw ( ViewGroup.java:3176 ) at android.view.View.getDisplayList ( View.java:14396 ) at android.view.View.getDisplayList ( View.java:14443 ) at android.view.View.draw ( View.java:15221 ) at android.view.ViewGroup.drawChild ( ViewGroup.java:3340 ) at android.view.ViewGroup.dispatchDraw ( ViewGroup.java:3176 ) at android.view.View.getDisplayList ( View.java:14396 ) at android.view.View.getDisplayList ( View.java:14443 ) at android.view.View.draw ( View.java:15221 ) at android.view.ViewGroup.drawChild ( ViewGroup.java:3340 ) at android.view.ViewGroup.dispatchDraw ( ViewGroup.java:3176 ) at android.view.View.getDisplayList ( View.java:14396 ) at android.view.View.getDisplayList ( View.java:14443 ) at
Line Chart - Fill Color on Screen Rotate Bug __EoT__ in 2.0.8 on screen rotation the chart would fill correctly . I am overriding orientation changes so that the activity on create is not called again via these settings in my manifest : `` ` xml android : configChanges= '' keyboardHidden|orientation|screenSize '' `` ` ! [ screen shot 2015-04-08 at 10 38 57 am ] ( https : //cloud.githubusercontent.com/assets/3689237/7047602/90eed312-dddb-11e4-92fc-34e26d1c56bc.png ) ! [ screen shot 2015-04-08 at 10 39 09 am ] ( https : //cloud.githubusercontent.com/assets/3689237/7047606/93e6e758-dddb-11e4-9c94-9f1793492712.png ) In 2.0.9 - The portrait view is the same , but the landscape fill looks like this below : ! [ screen shot 2015-04-08 at 10 45 10 am ] ( https : //cloud.githubusercontent.com/assets/3689237/7047719/5a725c04-dddc-11e4-918e-3f17a3f69ed5.png ) Here is chart code : `` ` java LineDataSet priceData = new LineDataSet ( yVal , `` Price '' ) ; priceData.setLineWidth ( 2f ) ; if ( mPriceChange > =0 ) { priceData.setColor ( getResources ( ) .getColor ( R.color.positive_green_line ) ) ; priceData.setFillColor ( getResources ( ) .getColor ( R.color.positive_green_fill ) ) ; } else { priceData.setColor ( getResources ( ) .getColor ( R.color.negative_red_line ) ) ; priceData.setFillColor ( getResources ( ) .getColor ( R.color.negative_red_fill ) )
RadarChart throws null exception in Preview mode ( Android Studio ) __EoT__ When the RadarChart is rendered in Preview mode ( isInEditMode ( ) == true ) , a null exception is thrown .
A way to disable logging __EoT__ Logging should be disabled when used in production . Logging inside onDraw ( ) especially affects performance . For proper logging behaviour , I would recommend using a small library such as Timber ( https : //github.com/JakeWharton/timber ) If I get some free time and if you are fond of this idea , I might do the necessary changes myself and do a pull request . Great charting library ! Thank you very much for contributing it .
Wrong display for negative values in BarChart __EoT__ Negative values displayed inside a BarChart ( maybe the same for other charts ) have a wrong position . See linked screenshot . There is a mistake of my side ? ( setDrawValueAboveBar is set to true ) ! [ capture ] ( https : //cloud.githubusercontent.com/assets/9135797/4593572/f836a3f2-5086-11e4-8191-7aed89fef57b.JPG )
New Issue in Pie Chart after 1.6.5 released __EoT__ Now I can not use pie chart in my app , The activity that holds the piee chart craches when try to open it . i do n't Know why , The logcat here `` ` java.lang.NullPointerException at com.github.mikephil.charting.charts.PieChart.drawCenterText ( PieChart.java:393 ) at com.github.mikephil.charting.charts.PieChart.onDraw ( PieChart.java:145 ) at android.view.View.draw ( View.java:14465 ) at android.view.View.getDisplayList ( View.java:13362 ) at android.view.View.getDisplayList ( View.java:13404 ) `` `
Setting background color has no effect __EoT__ hi , setting the background color does n't do anything . It just stays white by default in your examples . I am not getting any errors otherwise I could tell you more on that . Appreciate any feedback . By the way , charts are awesome . keep up the work .
Vertical grid line gets clipped __EoT__ ! [ qq 20140925093747 ] ( https : //cloud.githubusercontent.com/assets/4555502/4398352/82977e52-4454-11e4-8417-914fae10825c.png ) As the picture , I hope to draw 5 vertical grid lines , but in fact , it only displays 4 lines there.I read the source code in the class BarLineChartBase.java , it calls clipRect ( ) for the grid line area , but it looks like do not have enough space to draw the fifth vertical line . `` ` // make sure the graph values and grid can not be drawn outside the // content-rect int clipRestoreCount = mDrawCanvas.save ( ) ; mDrawCanvas.clipRect ( mContentRect ) ; drawHorizontalGrid ( ) ; drawVerticalGrid ( ) ; `` `
NullPointerException：com.github.mikephil.charting.charts.PieChart.prepareContentRect ( PieChart.java:322 ) __EoT__ When you do n't use the method ‘ setData ’ ，so the expception appear . So I ca n't see the graphical layout on the eclipse . I solve it like : PieChart.prepareContentRect ( ) float shift = 18f ; if ( mCurrentData ! =null ) { shift= ( ( PieData ) mCurrentData ) .getDataSet ( ) .getSelectionShift ( ) ; }
某大厂面试题 __EoT__ 题目： 一个 ` “ . ” ` 代表一个任意字母。 注意事项：可以假设所有的单词只包含小写字母 ` “ a-z ” ` 样例： `` ` java addWord ( “ bad ” ) ; addWord ( “ dad ” ) ; addWord ( “ mad ” ) ; search ( “ pad ” ) ; // return false ; search ( “ bad ” ) ; // return true ; search ( “ .ad ” ) ; // return true ; search ( “ b.. ” ) ; // return true ; `` ` 如果有并发的情况下， ` addWord ( ) ` 怎么处理？
Implemented and tested identity_n op . __EoT__ Implemented # 6180 .
DL4J Fixes __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6635 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5577 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6306 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6639 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6649 Also fixes an issue with batch norm mean/variance updates being ( incorrectly ) divided by minibatch after my recent changes there .
Spark adaptive threshold encoding __EoT__
ETL code for Spark training __EoT__ This adds : ETL code for spark training , mainly for the `` many small files '' use case ( such as images ) . In the image case , reading each image one at a time from HDFS is a potential bottleneck , and converting to DataSet is n't feasible due to the considerably greater space requirements . Thus : we pre-batch the files ( in their original format ) using FileBatch and train directly from those batches . This keeps the original file size benefits of the raw images , whilst reducing the required number of disk reads by a factor of the minibatch size .
Snapshots page polishing __EoT__
Upgrade to arrow 0.11.0 __EoT__ Local testing suggests we do n't are n't running into any API differences due to the version change , hence ( hopefully ) no code changes are required .
Correction of some ( encoding ? ) problems . __EoT__ There are some encoding problem when navigating in [ t-SNE 's page ] ( https : //deeplearning4j.org/docs/latest/deeplearning4j-nn-tsne-visualization ) on firefox : https : //screenshots.firefox.com/RYHCpR6jGFWiPFY3/deeplearning4j.org
fix typos/links __EoT__
spark+dl4j docs __EoT__
DL4J Fixes ; remove UI and Scala name suffix from parallel wrapper module __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6552 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6551 Also a fix for Nd4j.gemm validation .
upgrade Apache Lucene/Solr version from 7.4.0 to 7.5.0 __EoT__ http : //lucene.apache.org/core/7_5_0/changes/Changes.html http : //lucene.apache.org/solr/7_5_0/changes/Changes.html The lucene-solr.version pom.xml property is currently used by two modules : * deeplearning4j/deeplearning4j-dataimport-solrj * deeplearning4j/deeplearning4j-modelexport-solr
Changed DataSet.merge signature __EoT__ This small PR addresses an immediate problem I had : getRange returns an api.DataSet , which is logical since getRange is inherited from api.DataSet interface . But DataSet.merge only takes a list of DataSet . So no way to merge a dataset obtained from getRange without cast . However , there is a deeper design problem : api.DataSet references DataSet , which ruins the point of having a separate interface . I think one of the two following actions must be taken : 1 ) Replace DataSet with api.DataSet anywhere in api.DataSet , and in signatures of methods in DataSet implementing an interface method . There will be an issue with the whole interface currently implementing Iterable < DataSet > . Maybe this must be removed . Implementing Iterable < ? extends api.DataSet > is not possible . implementing Iterable < api.DataSet > would not be very consistent . Renaming DataSet with something like MemoryDataSet or some name that evokes what is specific to this class WRT other possible implementations would be good too and less confusing . 2 ) Decide that an api.DataSet is always implemented by DataSet ( which is necessarily the case right
Elephas patch __EoT__
Add failure listener for spark etc fault tolerance testing __EoT__ Adds FailureTestingListener - intended to be used for spark fault tolerance testing . i.e. , this can be used to cause executor failures at specific points during training .
ND4J indexing fixes + DL4J fix __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6341 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6327 Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/6343
GraphServer implementation __EoT__ This PR adds : - GraphServer implementation for C++ inference over the wire - Dockerfile for easy deployment of GraphServer - Java based client helper for comms over the wire
Fix parent for datavec-uberjar __EoT__
keras masking layer __EoT__ one of the more disgusting exercises out there .
Broadcastable Atan2 __EoT__ Fix for # 6154
ND4J : Remove references to RawIndexer not available on Android __EoT__ This causes issues on Android when loading models , see issue # 6150 .
Datavec : JDBC : JDBCRecordReader does not handle Null values . __EoT__ Fixing issue # 6112
Numpy integration : Adds the ability to write numpy arrays __EoT__
Tests CMakeLists change __EoT__ All tests should be automatically picked up on build .
TSNE - BarnesHutTsne fit ( ) error __EoT__ Hi , I 'm using snapshot version of DL4J ( 1.0.0-SNAPSHOT ) to generate TSNE csv but an error occurs . The vocab loaded is a classic word2vec generated file with 4693 words . code is here : https : //gist.github.com/newinai/f95d4b37660b97bf4cda092a710170c9 **Error : ** 18:33:03.411 [ main ] INFO o.deeplearning4j.plot.BarnesHutTsne - Calculating probabilities of data similarities ... 18:33:03.412 [ main ] INFO o.deeplearning4j.plot.BarnesHutTsne - Handled 0 records Exception in thread `` main '' java.lang.IndexOutOfBoundsException : Index : 0 , Size : 0 at java.util.ArrayList.rangeCheck ( ArrayList.java:657 ) at java.util.ArrayList.get ( ArrayList.java:433 ) at org.deeplearning4j.clustering.vptree.VPTree.buildFromData ( VPTree.java:194 ) at org.deeplearning4j.plot.BarnesHutTsne.computeGaussianPerplexity ( BarnesHutTsne.java:246 ) at org.deeplearning4j.plot.BarnesHutTsne.fit ( BarnesHutTsne.java:527 ) at org.deeplearning4j.plot.BarnesHutTsne.fit ( BarnesHutTsne.java:752 ) at scala.Function0 $ class.apply $ mcV $ sp ( Function0.scala:34 ) at scala.runtime.AbstractFunction0.apply $ mcV $ sp ( AbstractFunction0.scala:12 ) at scala.App $ $ anonfun $ main $ 1.apply ( App.scala:76 ) at scala.App $ $ anonfun $ main $ 1.apply ( App.scala:76 ) at scala.collection.immutable.List.foreach ( List.scala:392 ) at scala.collection.generic.TraversableForwarder $ class.foreach ( TraversableForwarder.scala:35 ) at scala.App $ class.main ( App.scala:76 )
Fix for transposed PCA on CUDA __EoT__ In [ JcublasLapack ] ( https : //github.com/deeplearning4j/deeplearning4j/blob/152a425b93700db27deb1f9be45fd78c2b13ef09/nd4j/nd4j-backends/nd4j-backend-impls/nd4j-cuda/src/main/java/org/nd4j/linalg/jcublas/blas/JcublasLapack.java # L615 ) implementation , singular value decomposition is being calculated on transposed matrices in some cases : `` ` // we should transpose & adjust outputs if M < N // cuda has a limitation , but it 's OK we know // A = U S V' // transpose multiply rules give us ... // A ' = V S ' U' `` ` However , [ PCA ] ( https : //github.com/deeplearning4j/deeplearning4j/blob/152a425b93700db27deb1f9be45fd78c2b13ef09/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/dimensionalityreduction/PCA.java # L187 ) calls this function with ` U = null ` : `` ` // Note - we do n't care about U Nd4j.getBlasWrapper ( ) .lapack ( ) .gesvd ( A , s , null , VT ) ; `` ` This leads to to a ` NullPointerException ` in [ line 630 ] ( https : //github.com/deeplearning4j/deeplearning4j/blob/152a425b93700db27deb1f9be45fd78c2b13ef09/nd4j/nd4j-backends/nd4j-backend-impls/nd4j-cuda/src/main/java/org/nd4j/linalg/jcublas/blas/JcublasLapack.java # L630 ) if ` M < N ` : `` ` vt = U.dup ( 'f ' ) ; `` ` This PR adds a UnitTest for this case and fix for the SVD implementation in JCublas backend . With CPU backend , everything looks good .
Small fixes for copyright headers and libnd4j pom.xml __EoT__
Keras tokenizer import __EoT__
SameDiff op fixes __EoT__ Can be merged if CI is happy with this . Fixes : LogEntropy bp , jaccard bp ( mostly ) , reverseSequence bp , dynamic stitch bp . Implements : LogSumExp bp , tile bp .
Shyrma multiply bp __EoT__ refine multiply_ff and correct multiply_bp
libnd4j : Consolidate builds of libraries and tests __EoT__ To run the buildnativeoperations.sh script properly from run_tests.sh , we would need a way to pass all the build options . This is an issue in the pom.xml file , where we call run_tests.sh after buildnativeoperations.sh , effectively voiding all our build options ( avx512 , etc ) . So , this patch removes the call to the buildnativeoperations.sh script from run_tests.sh , and builds the tests as part of the main build in Maven 's lifecycle . Also , the ` libnd4j.test.is.release.build ` property is now ignored and replaced by the simpler ` libnd4j.build ` property .
Fix build from earlier bad PR __EoT__
DL4J Environment Variable / System Property Cleanup __EoT__
Fix k-fold iterator , add test __EoT__ Fixes : https : //github.com/deeplearning4j/deeplearning4j/issues/5974
RL4J : Load random seed for ACPolicy from associated network __EoT__ Fixes # 5543
Add [ WIP ] prefix convention to CONTRIBUTION.md __EoT__
[ WIP ] DeepMoji attention layer __EoT__ First step towards implementing DeepMoji networks . Would make for a cool example / demo as well . Also , this layer can be registered as custom Keras import layer to import pretrained models found here : https : //github.com/bfelbo/DeepMoji Will do this as follow-up .
Fix for scalar ops __EoT__ This PR fixes issue with scalar ops , that caused failure for few gradient tests
Data type conversion fix __EoT__ Conversion for for data types .
Samediff : consistent naming convention + more docs __EoT__
[ WIP ] explicit includes and excludes for autogen methods __EoT__ handles : - [ x ] explicit white-listing of methods ( `` includes '' ) - [ x ] explicit black-listing of methods ( `` excludes '' ) - [ x ] suppress constructor data on demand - [ x ] for very large classes , use tags to split up content ( e.g . SameDiff ops )
How to show an multiChoice dialog with the option to choose none ? __EoT__ We want the user to be able to select on , many or none tags from the multiChoise dialog . But the positive button only gets activated when the user selects at least one item . Is there an option to change that ?
Create new folder in Folder Chooser Dialog __EoT__ - [ x ] I have verified there are [ no duplicate active or recent bugs , questions , or requests ] ( https : //github.com/afollestad/material-dialogs/issues ? q=is % 3Aissue+is % 3Aclosed ) - [ x ] I understand that versions below 2.0.0 will no longer be supported for updates . - [ x ] I have given my issue a non-generic title . - [ x ] I have [ read over the documentation ] ( https : //github.com/afollestad/material-dialogs/blob/master/README.md ) ( before asking questions on how to do something ) . -- - - Material Dialogs version : ` 2.0.0-alpha09 ` I was thinking that maybe an option to create a new folder option should be available in the Folder Chooser Dialog . There are many use cases in many different apps that can use this feature and including this in the builder would be a great addition to this library in my opinion
Checkbox prompt RTL support __EoT__ Hi , it is possible to set gravity and typeface to checkbox item ? check box is fixed in left side of dialog but the text gravity is changed according to language . i want the checkbox be at the right side of the dialog when language is RTL . thanks in advance .
How to disable & change color text in items ? __EoT__ - Material Dialogs version : ` 0.9.4.3 ` I have a list of options in Dialog . and sometimes one of them should disable for dialog . I use ` itemDisabledIndices ` but never work for items Dialog .
No font asset found for - ZTE BLADE devices __EoT__ This crash seems to happen only in ZTE BLADE V7 LITE phone . Fatal Exception : java.lang.IllegalArgumentException : No font asset found for at com.afollestad.materialdialogs.MaterialDialog $ Builder.typeface ( MaterialDialog.java:690 ) at com.afollestad.materialdialogs.MaterialDialog $ Builder . ( MaterialDialog.java:556 ) at com.utils.DialogManager.showLoginSignUpAlert ( DialogManager.java:57 ) at com.fragments.LoginFragment.onClick ( LoginFragment.java:120 ) at android.view.View.performClick ( View.java:5265 ) at android.view.View $ PerformClick.run ( View.java:21534 ) at android.os.Handler.handleCallback ( Handler.java:815 ) at android.os.Handler.dispatchMessage ( Handler.java:104 ) at android.os.Looper.loop ( Looper.java:207 ) at android.app.ActivityThread.main ( ActivityThread.java:5728 ) at java.lang.reflect.Method.invoke ( Method.java ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:789 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:679 ) - Material Dialogs version : ` 0.9.2.3 ` - Device OS version : ` 6.0 ` - Device Manufacturer : ` ZTE ` - Device Name : ` BLADE V7 LITE `
All radio buttons will be in unseleted state when click fast on single choice dialog list items __EoT__ - [ x ] I have verified there are no duplicate active or recent bugs , questions , or requests - [ x ] I have verified that I am using the latest version of Material Dialogs . - [ x ] I have given my issue a non-generic title . - [ x ] I have read over the documentation ( before asking questions on how to do something ) . # # # # # # Include the following : - Material Dialogs version : ` 0.9.0.0 ` - Device OS version : ` 4.4.2 ` - Device Manufacturer : ` Samsung ` - Device Name : ` Note II ` Also , please wrap Java with correct syntax highlighting . `` ` java System.out.println ( `` Hello , world ! `` ) ; `` ` # # # # # # Reproduction Steps 1 . Show single choice dialog . 2 . Click fast on list items . 3 . All radio buttons will be in unselected state . # # # # # # Expected Result ! [
FileChooserDialog makes the go up item invisible when a folder is empty __EoT__ Hi Aidan , I found a bug in your FileChooserDialog code . When a folder has null content , the Dialog makes invisible the three dots to get back to the parent folder . That 's why on [ line 49 ] ( https : //github.com/afollestad/material-dialogs/blob/master/commons/src/main/java/com/afollestad/materialdialogs/folderselector/FileChooserDialog.java # L49 ) , you should replace `` ` java return new String [ ] { } ; `` ` with `` ` java return new String [ ] { `` ... '' } ; `` ` Regards , Giuseppe Montuoro , Italy .
Android N ( SDK 24 ) instability __EoT__ It seems more to be with appcompat itself than the guesswork that the library does for colors . The dialog below should be dark . ! [ 0 ] ( https : //cloud.githubusercontent.com/assets/1243957/16122860/c6d6c21e-33b6-11e6-95ff-f27e3d47c410.png ) Setting the theme to ` Theme.LIGHT ` manually works in light/dark mode , _but the dialog ends up light , obviously , which does n't match well_ . Setting ` Theme.DARK ` , well , looks like the screenshot above , as that is of the library determining the theme itself . Below is a screenshot of this . _the above and below are not of the same dialog , but , you get the idea._ ! [ screenshot_20160616-114408 ] ( https : //cloud.githubusercontent.com/assets/1243957/16123074/a6f6e70c-33b7-11e6-89c5-2aa9d324c824.png )
Extra top padding when using customview __EoT__ Hi , Thanks for this great library . I am using cutomview to show an image inside a dialog , here is my code : `` ` java new MaterialDialog.Builder ( this ) .neutralText ( `` SNOOZE '' ) .theme ( Theme.LIGHT ) .customView ( R.layout.alarm_dlg , false ) .cancelable ( false ) ; `` ` alarm_dlg.xml : `` ` xml < ? xml version= '' 1.0 '' encoding= '' utf-8 '' ? > < LinearLayout xmlns : android= '' http : //schemas.android.com/apk/res/android '' android : orientation= '' vertical '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > < ImageView android : layout_width= '' match_parent '' android : layout_height= '' 100dp '' android : scaleType= '' centerCrop '' android : layout_marginTop= '' 0dp '' android : id= '' @ +id/imageView '' android : src= '' @ drawable/burst_landscape '' android : layout_gravity= '' top '' / > < /LinearLayout > `` ` But there is an extra top padding : ! [ extra-top-padding ] ( https : //cloud.githubusercontent.com/assets/9332653/7827690/71569e32-0454-11e5-987e-b03e8c744cc0.png ) Based on documentation , there should be no padding when using customviews and scrolling set to false . am I
To preserve string res formatting , Builder # content ( int ) impl should not use getString but getText __EoT__ If I have a resource `` ` < string name='s ' > < b > Bold < /b > < i > Italic < /i > < /string > `` ` and then I call `` ` new MaterialDialog.Builder ( context ) .content ( R.string.s ) `` ` the formattings on the string is removed , because the implementation of ` content ( ) ` is ` getString ( resId ) ` not ` getText ( resId ) ` , which preserves formatting . Implementations of AlertDialog.Builder , TextView # setText ( int ) and so on , all uses getText ( ) instead of getString ( ) .
Single choice list autoscroll __EoT__ Is there a way that the single choice item list can auto-scroll to the initially selected item ( in a large list where selected is part-way down ) ?
Fixed a typo in Verticles documentation __EoT__ Modified ` HttpServeer ` to ` HttpServer `
Add CONTENT_DISPOSITION to HttpHeaders __EoT__
Windows redeploy does not provide valid inline verticle configuration __EoT__ env : Windows 10 pro . The Java process builder now removes double quotes in process arguments ( https : //bugs.openjdk.java.net/browse/JDK-8131908 ) to conform to Windows CLI parsing https : //msdn.microsoft.com/en-us/library/17w5ykft.aspx This affects the Vert.x redeploy mode with inline configuration which contains double quotes and the JSON will not be parsed by the process created by the launcher , the Verticle will not get the expected configuration . On Windows we should escape this differently by surrounding with double quotes and using a ` \ ` char to escape inner double quotes ( _A double quotation mark preceded by a backslash ( \ '' ) is interpreted as a literal double quotation mark character ( `` ) ._ )
DnsClient : There is no option to enable the netty logger __EoT__
ClusteredEventBus racy initialization __EoT__ Hi , It seems as if there is a case in the ClusteredEventBus ( 3.5.1 ) where a NPE can appear . After trying out some different cluster manager implementations the following NPE appear from time to time on a new instance when it is being launched . This is the NPE that appears : `` ` 2018-05-11 16:14:32:531 +0200 [ vert.x-eventloop-thread-1 ] ERROR ContextImpl - Unhandled exception java.lang.NullPointerException at io.vertx.core.eventbus.impl.clustered.ClusteredEventBus.lambda $ setClusterViewChangedHandler $ 9 ( ClusteredEventBus.java:283 ) at io.vertx.core.impl.HAManager.lambda $ checkSubs $ 10 ( HAManager.java:516 ) at io.vertx.core.impl.HAManager.lambda $ runOnContextAndWait $ 11 ( HAManager.java:525 ) at io.vertx.core.impl.ContextImpl.lambda $ wrapTask $ 2 ( ContextImpl.java:339 ) at io.netty.util.concurrent.AbstractEventExecutor.safeExecute ( AbstractEventExecutor.java:163 ) at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks ( SingleThreadEventExecutor.java:404 ) at io.netty.channel.nio.NioEventLoop.run ( NioEventLoop.java:463 ) at io.netty.util.concurrent.SingleThreadEventExecutor $ 5.run ( SingleThreadEventExecutor.java:886 ) at io.netty.util.concurrent.FastThreadLocalRunnable.run ( FastThreadLocalRunnable.java:30 ) at java.lang.Thread.run ( Thread.java:748 ) `` ` Looking at the code for the ClusteredEventBus it seems as if the member `` subs '' can be null when the view changed handler is called before the ClusteredEventBus has started completely . The view changed handler is set in the constructor but the `` subs '' member is only given a value in the method ``
Improve connection exception logging __EoT__ Currently the connection base will log every error to a connection when an exception handler is not set , in particular connection RST . Let 's only log the message like previously ( pre 3.5.1 ) and the full stack trace when debug is enabled .
The HttpClient websocket connect method should call the error handler at most once __EoT__ motivation : currently connecting from the client may invoke the error handler more than one time ( the errors are reported from the underlying websocket stream ) . change : use an future in the implementation to guarantee at most one callback
HTTP/1.x server connection back-pressure management might reorder request body chunks __EoT__ As discussed [ here ] ( https : //groups.google.com/forum/ # ! topic/vertx/7EPAUv73CtY ) previously , starting with vert.x 3.5.0 I was noticing failing integration tests when uploading large ( at least a few MB ) files . The issue so far only appeared when running against mongo in a docker container or with travis ci . Downgrading to vert.x 3.4.0 seems to fix the issue . This issue does not appear on every build . I once examined the differences between the uploaded and the persisted file and it showed that about the first 1054400 bytes were correctly persisted , but subsequent bytes were corrupt . I could not find any issues with file download . Just the upload seems to encouter this issue . I have put a branch together which explicitly compares the md5 checksums of the uploaded file in addition to the actual bytes with vertx 3.5.1-SNAPSHOT [ travis available here ] ( https : //travis-ci.org/st-h/vertx-mongo-streams/jobs/309572086 ) - [ source ] ( https : //github.com/st-h/vertx-mongo-streams/tree/vertx-3.5.x ) `` ` -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
Use new SniCompletionEvent from Netty __EoT__ A solution for # 2226
HttpClientResponse executed on the a different context thread when resumed outside of its context __EoT__ I am trying to load the body of an HTTP request . However , in the data handler , I need to do stuff that is asynchronous . So I pause the stream at the beginning of the handler , and resume it when I 'm done doing my asynchronous stuff . Pseudocode : `` ` each time I receive a buffer pause the response asynchronously do something with the buffer resume the response `` ` However , it 's not working as I expect it to . `` ` val channel = Channel < Byte > ( ) val lock = Object ( ) val INITIAL = 1 val PAUSED = 2 val READING = 3 val RESUMED = 4 var state = INITIAL vertxResponse.handler { buffer - > synchronized ( lock ) { if ( state ! = INITIAL & & state ! = RESUMED ) { println ( `` Fail A '' ) } state = PAUSED vertxResponse.pause ( ) } async ( Unconfined ) { synchronized ( lock ) { if ( state ! = PAUSED ) { println ( ``
Verticle deployment failure should undeploy its children verticle __EoT__ Motivation : currently a verticle that fails its deployment although it has successfully deployment children verticles does not have its children automatically deployed although its close hooks are called . This force the developer to take care of undeploying explicitely the children verticle in this situation . Change : when a verticle fails its deployment , the deployed children verticle are undeployed
Properly fail the Verticle deployment for a verticle factory resolves with failing options __EoT__ Currently the ` DeploymentManager ` will be invoked asynchronously by a ` VerticleFactory ` and upon resolution the new deployment can throw an exception , this exception should be properly routed to the original deployment completion handler and not to the ` VerticleFactory ` itself .
KeyStoreHelper just support PKCS8 , Not support RSA private key __EoT__ ` public PrivateKey loadPrivateKey ( ) throws Exception { if ( keyValue == null ) { throw new RuntimeException ( `` Missing private key path '' ) ; } byte [ ] value = loadPems ( keyValue.get ( ) , `` **PRIVATE KEY** '' ) .get ( 0 ) ; KeyFactory rsaKeyFactory = KeyFactory.getInstance ( `` RSA '' ) ; return rsaKeyFactory.generatePrivate ( new PKCS8EncodedKeySpec ( value ) ) ; } `
Let users connect with absolute websocket urls __EoT__ As a matter of usability , the ` HttpClient ` should let users connect with absolute websocket urls ( ` ws : // ` or ` wss : // ` )
use generics to construct cluster manager __EoT__ A small modification that uses generics and the vararg param
Change the default number of dns max queries to 4 __EoT__ Motivation : currently the default number of dns max queries is 3 . By default the resolver will send 2 queries : A and AAA . When the server does not respond , there is one query left and in case of failover , only the A query is sent . Increasing the value to 4 allow to send A and AAA when failover occurs . Change : The default number of max queries is 4 instead of 3 .
Do n't call HttpServer request/ws close handler holding locks __EoT__ Motivation : currently the ServerWebSocket and HttpServerRequest close handlers are called under synchronized lock of the connection . This can create deadlocks in SockJSSocket because a SockJSSocket may uses different request/websocket ( reconnects ) and event loops . Change : when processing a Netty close event , call the close handlers in the next tick ( i.e scheduled to run on context ) .
NullPointer in sendToSubs __EoT__ Cloned from vert-x3/vertx-hazelcast # 52
Maps for Http Headers and Trailers __EoT__ Maps should be used for representing HTTP headers and trailers throughout the API
HttpClient leaves connection open on websocket request failure ( resource leak ) __EoT__ When running this code : `` ` java Vertx vertx = Vertx.vertx ( ) ; vertx.createHttpServer ( ) .requestHandler ( req - > { req.response ( ) .setStatusCode ( 200 ) ; req.response ( ) .headers ( ) .set ( `` Connection '' , `` close '' ) ; req.response ( ) .end ( ) ; } ) .listen ( 44444 ) ; vertx.createHttpClient ( ) .websocket ( 44444 , `` localhost '' , `` / '' , ws - > { System.out.println ( `` WS Unexpectedly connected '' ) ; } , t - > { System.err.println ( `` WS Connection failed '' ) ; t.printStackTrace ( ) ; } ) ; `` ` Then end result is ` WS Connection failed ` ( as expected ) but ` netstat -natp|grep :44444 ` ( in Linux ) shows the connection is still ESTABLISHED . Only closing the java process ( naturally ) gets rid of the connection . For a regular GET request : `` ` java Vertx vertx = Vertx.vertx ( ) ; vertx.createHttpServer ( ) .requestHandler ( req - > { req.response ( )
File caching implementation not thread safe __EoT__ The ` FileResolver ` implementation of caching is not thread safe . The problem occurs when the same file ( that is about to be cached ) is concurrently being read from multiple verticles . This issue can be reproduced with ` FileSystem # readFileBlocking ` , however , I believe that async implementation will yield similar results . The problem here is the following . Consider a use case , when a file is read in multiple verticles in parallel . This file does not reside in a local filesystem , and as such ` Vert.x ` will try to cache the file by moving it to the ` .vertx ` directory . 1 . First verticle that hits ` FileResolver # resolveFile ` will trigger the copying action of the resource to the designated ` .vertx ` cache directory . Only after this copy action is finished , the file will be read - thus this verticle will read _complete_ data . 2 . Every other instance that hits ` FileResolver # resolveFile ` will find the cached file during resolution - as the file is currently being copied over there
Support classpath root nested in JAR __EoT__ This is the upstream issue for vert-x3/vertx-web # 452 Allow templates to be loaded from classpath Classpath root may be a folder inside a JAR , not the JAR itself . For example , in Spring Boot , here 's the list of root URLs : `` ` 0 = { URL @ 4064 } `` jar : file : /home/tsegismont/Temp/wv/target/testwb-1.0-SNAPSHOT.jar ! / '' 1 = { URL @ 4065 } `` jar : file : /home/tsegismont/Temp/wv/target/testwb-1.0-SNAPSHOT.jar ! /BOOT-INF/classes ! / '' 2 = { URL @ 4066 } `` jar : file : /home/tsegismont/Temp/wv/target/testwb-1.0-SNAPSHOT.jar ! /BOOT-INF/lib/vertx-web-templ-freemarker-3.4.0-SNAPSHOT.jar ! / '' 3 = { URL @ 4067 } `` jar : file : /home/tsegismont/Temp/wv/target/testwb-1.0-SNAPSHOT.jar ! /BOOT-INF/lib/jackson-core-2.8.1.jar ! / '' `` ` ... and so on with all libs Note the jar root , as well as BOOT-INF/classes
Deprecate and @ GenIgnore CompositeFuture # result ( int ) in favor of CompositeFuture # resultAt ( int ) __EoT__
CompositeFuture join method __EoT__ This operation is like the ` CompositeFuture # all ` method , except that it always wait until all its futures are completed and will not fail as soon as one of its futures fails .
DatagramSocket should use unpooled buffers __EoT__ DatagramSocket copies the direct buffer to an pooled heap buffer - it should use an unpooled heap buffer instead . Workaround : use ` -Dio.netty.allocator.type=unpooled `
Flush after push promise __EoT__ Push promise should trigger a flush . When serving the request we delay the flush after the request is handled to flush one time . Otherwise we flush after writing the push promise
HttpClientMetrics # createEndpoint may be called multiple times for the same endpoint __EoT__ The implementation of ` io.vertx.core.http.impl.ConnectionManager.QueueManager # getConnQueue ` can lead to ` HttpClientMetrics # createEndpoint ` being called multiple times for the same endpoint if different threads try to use a fresh HTTP client : `` ` java ConnQueue connQueue = queueMap.get ( address ) ; if ( connQueue == null ) { connQueue = new ConnQueue ( version , this , address ) ; ConnQueue prev = queueMap.putIfAbsent ( address , connQueue ) ; if ( prev ! = null ) { connQueue = prev ; } } return connQueue ; `` ` ` HttpClientMetrics # createEndpoint ` is called from the ` ConnQueue ` constructor so a single instance of ` ConnQueue ` must be created if none is in the map . Otherwise SPI implementations my leak resources acquired in ` # createEndpoint ` as ` # closeEndpoint ` would never be called for the corresponding queue instance .
Only one certificate used in TLS handshake when using PemKeyCertOptions __EoT__ If you have a keystore file with certificate chain and you create ` NetServer ` and use ` setKeyStoreOptions ( JksOptions ) ` option , then the whole certificate chain will be sent to the client during TLS handshake . If you have a pem file with certificate chain and you create ` NetServer ` and use ` setPemKeyCertOptions ( PemKeyCertOptions ) ` option , then only the first certificate in the chain will be sent to the client during TLS handshake . The same problem exists in Vertx 3.3.0 and also when you use OpenSSL engine ( ` setSslEngine ( SSLEngine.OPENSSL ) ` option ) . And when using OpenSSL engine there is no alternative because it requires ` PemKeyCertOptions ` .
Fixed service loading of VerticleFactory from mvn exec java __EoT__ Fixes https : //github.com/eclipse/vert.x/issues/1437 .
issue # 101 : Socks 4/5 Proxy handler in NetClient __EoT__ fixes https : //github.com/vert-x3/issues/issues/101 add SOCKS proxy support to HttpClient and NetClient changed proxy options into a ProxyObject class add small socks4/5 proxy for testing move proxyOptions property to ClientOptionsBase add unit tests add missing ctx.fireXXX in VertxHandler move ProxyChannelProvider to its own package add classnotfound check to NetClientImpl add to documentation about proxy config
Enable adding netty logging handler to log HTTP requests/responses ( for debugging ) __EoT__ `` ` if ( ... ) pipeline.addLast ( `` log '' , new LoggingHandler ( ) ) `` ` Those who ever needed to debug Netty know that LoggingHandler is one of the first instruments .
redeploy= '' ant_pattern '' incorrectly checks path in Windows __EoT__ As it is right now , passing something like ` -- redeploy= '' src/**/*.java '' ` has no effect on Windows machines , i.e . no file is ever matched against this pattern since the pattern tokenizer fails to break the pattern into tokens due to the fact that ` / ` is not a file separator on Windows . Rather than modifying either the tokenizer or the matching algorithm , a possible solution would be to store the patterns ( called includes , see ` io/vertx/core/impl/launcher/commands/Watcher.java ` line ` 77 ` ) after converting between *nix and Windows file separator char , if needed . I believe a better solution would be to enforce a file separator char on the pattern , i.e . refuse to accept something like ` -- redeploy= '' src\**\*.java '' ` , only accept path patterns separated by ` / ` and then replace this with the correct OS file separator , if needed . Ant has ` / ` as its default file separator character but allows you to change it . I do n't think this is necessary . An `` enforce
Network exceptions not propagated to ruby vertical __EoT__ When using NetClient in a ruby vertical , if the address fails to resolve or the connection is refused , the exception thrown in the underlying java code is propagated as a ruby exception to the vertical . I put an open rescue in the method calls connect on the NetClient instance , and it never is called . Here is a stack trace : vertx run collector.rb Apr 27 , 2012 3:45:10 PM org.vertx.java.core.logging.impl.JULLogDelegate error SEVERE : Unhandled exception java.nio.channels.UnresolvedAddressException at sun.nio.ch.Net.checkAddress ( Net.java:85 ) at sun.nio.ch.SocketChannelImpl.connect ( SocketChannelImpl.java:597 ) at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink.connect ( NioClientSocketPipelineSink.java:134 ) at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink.eventSunk ( NioClientSocketPipelineSink.java:97 ) at org.jboss.netty.handler.stream.ChunkedWriteHandler.handleDownstream ( ChunkedWriteHandler.java:111 ) at org.jboss.netty.channel.Channels.connect ( Channels.java:642 ) at org.jboss.netty.channel.AbstractChannel.connect ( AbstractChannel.java:204 ) at org.jboss.netty.bootstrap.ClientBootstrap.connect ( ClientBootstrap.java:230 ) at org.jboss.netty.bootstrap.ClientBootstrap.connect ( ClientBootstrap.java:183 ) at org.vertx.java.core.net.impl.DefaultNetClient.connect ( DefaultNetClient.java:286 ) at org.vertx.java.core.net.impl.DefaultNetClient.connect ( DefaultNetClient.java:82 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:57 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:601 ) at org.jruby.javasupport.JavaMethod.invokeDirectWithExceptionHandling ( JavaMethod.java:559 ) at org.jruby.javasupport.JavaMethod.invokeDirect ( JavaMethod.java:404 ) at org.jruby.java.invokers.InstanceMethodInvoker.call ( InstanceMethodInvoker.java:138 ) at org.jruby.runtime.callsite.CachingCallSite.cacheAndCall ( CachingCallSite.java:342 ) at org.jruby.runtime.callsite.CachingCallSite.callBlock ( CachingCallSite.java:212 ) at org.jruby.runtime.callsite.CachingCallSite.callIter ( CachingCallSite.java:221 ) at org.jruby.ast.CallTwoArgBlockNode.interpret ( CallTwoArgBlockNode.java:62 )
Support connection close header in HttpClient __EoT__
Fix unit tests so they pass on Windows ( tested on 8.1 ) . __EoT__ Signed-off-by : Alain Penders alain @ rexorient.com
Adding subheader support for last updated times __EoT__ This was originally made to have the ability to show the last updated time underneath the the pull to refresh label . I decided to just make it a generic string for this pull request so the app can deal with formatting the date ( or displaying something else ) . Here 's the date code I was using just in case it would be preferable to restrict the user to a date : `` ` public void setUpdateTime ( Date date ) { if ( date == null ) { headerUpdateText.setVisibility ( View.GONE ) ; } else { headerUpdateText.setVisibility ( View.VISIBLE ) ; SimpleDateFormat df ; Calendar currentCal = Calendar.getInstance ( ) ; Calendar cal = Calendar.getInstance ( ) ; cal.setTime ( date ) ; if ( cal.get ( Calendar.YEAR ) == currentCal.get ( Calendar.YEAR ) & & cal.get ( Calendar.DAY_OF_YEAR ) == currentCal.get ( Calendar.DAY_OF_YEAR ) ) { df = new SimpleDateFormat ( `` ' < b > LAST UPDATED < /b > TODAY AT ' hh : mm a '' ) ; } else { df = new SimpleDateFormat ( `` ' < b > LAST UPDATED < /b
Example of extraction of selected bitmap __EoT__ It is not clear how to extract the 'selected ' bitmap . We have attacher.getDisplayRect ( ) , but its values are not defined well . Why are they floats ? Why are they sometimes negative ? It seems like top and right are relative to the original image , scaled by attacher.getScale ( ) . bottom and right are the scaled width and height of the selection . Seems like with the current code , we need to do something like ( and this is probably wrong ) : `` ` java RectF rect = attacher.getVisibleRect ( ) ; float scale = attacher.getScale ( ) ; Bitmap.createBitmap ( source , -rect.left / scale , -rect.top / scale , rect.right / scale , rect.bottom / scale ) `` ` Can we get a clear example ? I 'd also love for the library to either provide a Rect in source coordinates of what is visible , or to output a bitmap of the same . Lastly , if all that is a bad idea , then perhaps you should just recommend a fix like this to extract the image : http : //stackoverflow.com/a/4858154/719763
Set an absolute minimum scale level . Rename scale levels to convey more meaning . __EoT__ At the moment it is possible to zoom out on an image infinitely as there is no absolute minimum value for scaling . Also , the naming scheme of min/mid/max is non-obvious and does n't allow a fourth level to be set . This commit fixes these issues . This is a API-breaking change so I 'd understand if you were hesitant but I think the fact that a user can zoom out infinitely is a fairly major issue . Also , it may be worth considering adding a 5th scale level ( absolute maximum scale factor ) if you ever add the bounce back effect on the zoom in gesture . Maybe a setScaleLevels ( min , normal , doubleTap , max ) is also in order ?
Padding is ignored while determining image size __EoT__ Padding although can be set , and looks ok , for top left corner , image is scaled as if it was not set . After resize , scrolling also does n't take padding into account .
Is there any way to rotate the image ? __EoT__ I want to rotate the image by 90* , is that possible ?
Setting ScaleType via XML for PhotoView causes FC __EoT__
JSONPath后模糊匹配bug __EoT__ ` JSONPath.read ( `` { \ '' table\ '' : \ '' _order_base\ '' } '' , `` [ table LIKE 'order_base % ' ] '' ) ; ` table字段前面有_，LIKE表达式值前面没有_，期望结果不匹配，实际匹配。 看源码觉得JSONPath 1079行逻辑有问题。
反序列化不带毫秒的ISO8601日期时丢失时区信息 __EoT__ ISO8601日期可以带或不带毫秒，对于不带毫秒的日期，fastjson不识别日期中的时区标识。 示例代码： `` ` public class TestIssueXXX { @ Before public void init ( ) { JSON.DEFAULT_PARSER_FEATURE |= Feature.AllowISO8601DateFormat.mask ; } @ Test public void testBug569 ( ) { String s1 = `` { date : \ '' 2018-05-31T19:13:42+07:00\ '' } '' ; // 错误的 String s2 = `` { date : \ '' 2018-05-31T19:13:42.000+07:00\ '' } '' ; // 正确的 JSONObject json1 = JSON.parseObject ( s1 , JSONObject.class ) ; JSONObject json2 = JSON.parseObject ( s2 , JSONObject.class ) ; Assert.assertEquals ( json1.getDate ( `` date '' ) .toString ( ) , json2.getDate ( `` date '' ) .toString ( ) ) ; } } `` `
v1.2.40 反序列化float field，当field精度超过float的精度范围，结果出现负数 __EoT__ `` ` java // Bean 对象 public class User { private float age ; public float getAge ( ) { return age ; } public void setAge ( float age ) { this.age = age ; } @ Override public String toString ( ) { return `` User { `` + `` age= '' + age + ' } ' ; } } `` ` `` ` java // 反序列化代码 User user = JSON.parseObject ( `` { \ '' age\ '' : \ '' 0.9390308260917664\ '' } '' , User.class ) ; System.out.println ( user ) ; `` ` 结果： 期望结果是：**User { age=0.9390308 } ** 实际结果是：**User { age=-1.1075817 } **
com.alibaba.fastjson.util.TypeUtils类cast对Collection是否支持？ __EoT__ `` ` java @ SuppressWarnings ( { `` rawtypes '' , `` unchecked '' } ) public static < T > T cast ( Object obj , ParameterizedType type , ParserConfig mapping ) { Type rawTye = type.getRawType ( ) ; if ( rawTye == Set.class || rawTye == HashSet.class // || rawTye == TreeSet.class // || rawTye == List.class // || rawTye == ArrayList.class ) { Type itemType = type.getActualTypeArguments ( ) [ 0 ] ; ` `` ` 这里为什么不加入 || rawType == Collection.class 以支持Collection 还是说是个bug ?
反序列化后使用JSON对象获取JavaObject时，解析LocalDateTime发生错误 __EoT__ fastjson版本 : 1.2.39 测试类 : `` ` java @ Data public class TestDateClass { String name ; LocalDateTime testDateTime ; } `` ` 反序列化代码 : `` ` java @ Test public void testEnum ( ) { String test = `` { \ '' name\ '' : \ '' test\ '' , \ '' testDateTime\ '' : \ '' 2017-12-08 14:55:16\ '' } '' ; //success logger.info ( JSON.toJSONString ( JSON.parseObject ( test , TestDateClass.class ) , SerializerFeature.PrettyFormat ) ) ; //fail logger.info ( JSON.toJSONString ( JSON.parseObject ( test ) .toJavaObject ( TestDateClass.class ) , SerializerFeature.PrettyFormat ) ) ; } `` ` 结果 : `` ` java 15:14:49.374 [ main ] INFO com.my.test.TestEnum - { '' name '' : '' test '' , '' testDateTime '' : '' 2017-12-08 14:55:16 '' } com.alibaba.fastjson.JSONException : can not cast to : java.time.LocalDateTime at com.alibaba.fastjson.util.TypeUtils.castToJavaBean ( TypeUtils.java:941 ) at com.alibaba.fastjson.util.TypeUtils.cast ( TypeUtils.java:644 ) at com.alibaba.fastjson.JSON.toJavaObject ( JSON.java:971 ) at com.netease.mail.service.TestEnum.testRole ( TestEnum.java:209 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.junit.runners.model.FrameworkMethod $ 1.runReflectiveCall ( FrameworkMethod.java:50 ) at org.junit.internal.runners.model.ReflectiveCallable.run ( ReflectiveCallable.java:12 ) at org.junit.runners.model.FrameworkMethod.invokeExplosively ( FrameworkMethod.java:47 ) at
@ JSONType注解的serialzeFeatures属性无效 __EoT__ `` ` @ JSONType ( serialzeFeatures = { SerializerFeature.WriteNullStringAsEmpty , SerializerFeature.WriteMapNullValue } ) public class Apple { // @ JSONField ( serialzeFeatures = { SerializerFeature.WriteNullStringAsEmpty , SerializerFeature.WriteMapNullValue } ) private String color ; private String productCity ; private int size ; public String getColor ( ) { return color ; } public Apple setColor ( String color ) { this.color = color ; return this ; } public int getSize ( ) { return size ; } public Apple setSize ( int size ) { this.size = size ; return this ; } public String getProductCity ( ) { return productCity ; } public Apple setProductCity ( String productCity ) { this.productCity = productCity ; return this ; } @ Override public String toString ( ) { return JSON.toJSONString ( this ) ; } public static void main ( String [ ] args ) { System.out.println ( JSON.toJSONString ( new Apple ( ) ) ) ; } } `` ` 在类上加上 @ JSONType注解，注释掉字段color的注解，serialzeFeatures没生效。
增加时间戳转换对 LocalDate 和 LocalTime 的支持。 __EoT__ 增加时间戳转换对 LocalDate 和 LocalTime 的支持。
Map.Entry 反序列化异常， __EoT__ 如题目， 在序列化后，反序列化异常，异常信息如下 ` Exception in thread `` main '' com.alibaba.fastjson.JSONException : expect string at com.alibaba.fastjson.serializer.MiscCodec.deserialze ( MiscCodec.java:265 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseArray ( DefaultJSONParser.java:712 ) at com.alibaba.fastjson.serializer.CollectionCodec.deserialze ( CollectionCodec.java:120 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:626 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:348 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:316 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:230 ) at MapToJson.main ( MapToJson.java:31 ) ` 源代码如下： `` ` java Map < String , List < String > > totalMap = new HashMap < > ( ) ; for ( int i = 0 ; i < 10 ; i++ ) { List < String > list = new ArrayList < > ( ) ; for ( int j = 0 ; j < 2 ; j++ ) { list.add ( `` list '' + j ) ; } totalMap.put ( `` map '' + i , list ) ; } List < Map.Entry < String , List < String > > > mapList = new ArrayList < > ( totalMap.entrySet ( ) ) ; List < Map < String , List < String > > > mapList1 = new ArrayList < > ( ) ; mapList1.add ( totalMap ) ; String jsonString = JSON.toJSONString ( mapList1 , SerializerFeature.DisableCircularReferenceDetect
当对象中存在LocalDateTime 类型时，序列化后的json会出现不同DateFormat结果 __EoT__ 问题复现代码如下 ： // 这个配置好像并不生效 `` ` java JSON.DEFFAULT_DATE_FORMAT = `` yyyy-MM-dd HH : mm : ss '' ; TestBean test = new TestBean ( ) ; LocalDateTime time1 = LocalDateTime.now ( ) ; LocalDateTime time2 = LocalDateTime.parse ( `` 2017-09-22 15:08:56 '' , DateTimeFormatter.ofPattern ( `` yyyy-MM-dd HH : mm : ss '' ) ) ; test.setTime1 ( time1 ) ; test.setTime2 ( time2 ) ; String json = JSON.toJSONString ( test , SerializerFeature.WriteDateUseDateFormat ) ; System.out.println ( json ) ; `` ` output : { `` time1 '' : '' 2017-09-22T15:19:53.359 '' , '' time2 '' : '' 2017-09-22 15:08:56 '' } 输出的jsonString 会出现不同的格式。 这使的我在反序列化时出现困扰，需要为不同的格式制定不同的DateTimeFormatter . 目前只知道 jsonString 直接反序列化为对象时，是没有问题的，LocalDateTime 类型的字段会被正确赋值。 但是很多时候只是想取出jsonString 中的某个String 进行解析处理。我想知道这是否是一个BUG。 下面是我使用的版本 < groupId > com.alibaba < /groupId > < artifactId > fastjson < /artifactId > < version > 1.2.17 < /version >
JsonObject转为java对象（包含Timestamp）报错com.alibaba.fastjson.JSONException : can not cast to Timestamp , value : 2017-08-04 15:16:41.0 __EoT__ 数据库 Timestamp类型 字段createtime：2017-08-04 15:16:41.000000000 Policy 包含 creatime 属性的实体对象。 `` ` java List < JSONObject > policys = ps.GetPolicys ( ) ; for ( JSONObject js : policys ) { System.out.println ( `` 查询策略列表 ... ... ... ... .. '' ) ; Policy p = JSON.toJavaObject ( js , Policy.class ) ; `` ` `` ` java com.alibaba.fastjson.JSONException : can not cast to Timestamp , value : 2017-08-04 15:16:41.0 at com.alibaba.fastjson.util.TypeUtils.castToJavaBean ( TypeUtils.java:1077 ) at com.alibaba.fastjson.util.TypeUtils.cast ( TypeUtils.java:714 ) at com.alibaba.fastjson.JSON.toJavaObject ( JSON.java:945 ) at cn.com.nei.drmp.feign.controller.MainController.setTask ( MainController.java:126 ) at sun.reflect.NativeMethodAccessorImpl.invoke0 ( Native Method ) at sun.reflect.NativeMethodAccessorImpl.invoke ( NativeMethodAccessorImpl.java:62 ) at sun.reflect.DelegatingMethodAccessorImpl.invoke ( DelegatingMethodAccessorImpl.java:43 ) at java.lang.reflect.Method.invoke ( Method.java:498 ) at org.springframework.scheduling.support.ScheduledMethodRunnable.run ( ScheduledMethodRunnable.java:65 ) at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run ( DelegatingErrorHandlingRunnable.java:54 ) at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:511 ) at java.util.concurrent.FutureTask.runAndReset ( FutureTask.java:308 ) at java.util.concurrent.ScheduledThreadPoolExecutor $ ScheduledFutureTask.access $ 301 ( ScheduledThreadPoolExecutor.java:180 ) at java.util.concurrent.ScheduledThreadPoolExecutor $ ScheduledFutureTask.run ( ScheduledThreadPoolExecutor.java:294 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1142 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:617 ) at java.lang.Thread.run ( Thread.java:745 ) `` `
can not cast to Date , value : 2017-06-29T08:06:30.000+05:30 __EoT__ 使用北京时区 +08:00 转换没有问题，切换时区后，转换出现异常； com.alibaba.fastjson.JSONException : can not cast to Date , value : 2017-06-29T08:06:30.000+05:30 at com.alibaba.fastjson.util.TypeUtils.castToDate ( TypeUtils.java:327 ) at com.alibaba.fastjson.JSONObject.getDate ( JSONObject.java:286 )
com.alibaba.json.bvt.parser.deser.LocaleFieldTest中的locale.getDisplayCountry ( ) 判断可能出错 __EoT__ 在中文的windows系统上，locale.getDisplayCountry ( ) 是中国，而不是China： test_local_obj ( com.alibaba.json.bvt.parser.deser.LocaleFieldTest ) : expected : < [ China ] > but was : < [ 中国 ] > assertEquals ( `` China '' , model2.locale.getDisplayCountry ( ) ) ; 修改为 assertEquals ( Locale.CHINA.getDisplayCountry ( ) , model2.locale.getDisplayCountry ( ) ) ; 即可。
error in Jdk8DateCodec with empty string or null __EoT__ `` ` java String json= '' { \ '' ld\ '' : \ '' \ '' } '' ; or String json= '' { \ '' ld\ '' : null } '' Vo vo = JSON.parseObject ( json , Vo.class ) ; class Vo { private LocalDate ld ; get.. set .. } `` `
jsonpath 数组表达式解析错误 __EoT__ JSONPath.remove ( jsonObject , `` $ .aaa [ 0:1 ] .age '' ) ; 解析出错 JSONPath.remove ( jsonObject , `` $ .aaa [ 0,1 ] .age '' ) ; 解析出错 JSONPath.remove ( jsonObject , `` $ .aaa [ 0 ] .age '' ) ; 解析正确
kotlin中使用泛型解析的问题 __EoT__ kotlin中使用TypeReference解析数据的时候无法正确的解析.在相同的代码中 java代码是可以解析的 . 版本 : 1.2.22 java代码 `` ` java @ Test public void test ( ) { File file = new File ( `` d : \\Develop\\Android\\Projects\\cfzx素材\\city\\a.json `` ) ; String s = FilesKt.readText ( file , Charset.forName ( `` UTF-8 '' ) ) ; List < Address > addresses = JSON.parseObject ( s , new TypeReference < List < Address > > ( ) { } ) ; System.out.println ( addresses ) ; } `` ` 结果正确解析了 ! [ javaresult ] ( http : //ww4.sinaimg.cn/mw690/006gkUyGgw1fbsk4rd6l8j30or08p74i.jpg ) kotlin代码 `` ` kotlin @ Test fun test3 ( ) { val file = File ( `` d : \\Develop\\Android\\Projects\\cfzx素材\\city\\a.json `` ) val s = file.readText ( ) val addresses = JSON.parseObject ( s , object : TypeReference < List < Address > > ( ) { } ) println ( addresses ) } `` ` 结果解析失败 ! [ ktreult ] ( http : //ww3.sinaimg.cn/mw690/006gkUyGgw1fbsk6qdpxpj30dx06pwet.jpg ) 实体类 `` ` kotlin package com.cfzx.api.util ; class Address { constructor ( ) /** * name : 北京 * code : 100000 * cityArr : [ { `` name '' : '' 北京市 '' , '' code '' : '' 110000 '' , ''
转化com.google.common.collect.HashMultimap ; 为STRING错误 __EoT__ 无论里面的值是什么都转为 { `` empty '' : false }
反序列化失败注解参数deserializeUsing无效 __EoT__ public class MainTest { @ Test public void test ( ) { Mock mock = JSON.parseObject ( `` { \ '' type\ '' : \ '' boolean\ '' } '' , Mock.class ) ; Assert.assertEquals ( EnumType.BOOLEAN , mock.getType ( ) ) ; } public enum EnumType { BOOLEAN ; @ Override public String toString ( ) { return name ( ) .toLowerCase ( ) ; } } public static class Mock { @ JSONField ( serializeUsing = EnumTypeCodec.class , deserializeUsing = EnumTypeCodec.class ) private EnumType type ; public EnumType getType ( ) { return type ; } public void setType ( EnumType type ) { this.type = type ; } } public static class EnumTypeCodec implements ObjectSerializer , ObjectDeserializer { @ Override public < T > T deserialze ( DefaultJSONParser parser , Type type , Object fieldName ) { String uncasedSensitive = StringCodec.instance.deserialze ( parser , type , fieldName ) ; return ( T ) EnumType.valueOf ( uncasedSensitive.toUpperCase ( ) ) ; } @ Override public int getFastMatchToken ( ) { return JSONToken.LITERAL_STRING ; } @ Override public void write ( JSONSerializer serializer , Object object , Object fieldName , Type fieldType , int features ) throws
enum序列化需求 __EoT__ 希望fastjson提供一个配置，能够将所有的enum都按照https : //github.com/alibaba/fastjson/wiki/enum_custom_serialization ，这个issue中的方式进行（即把enum的属性和属性值序列化成一个jsonObject）序列化。
FASTJSON 对unicode编码处理的bug __EoT__ System.out.println ( JSON.toJSONString ( `` ` `` ) ) ; 打印结果为： '' \u00A0\u00A0 `` 其实我们希望打印结果为： '' `` ; 当我们调用JSON.toJSONString ( `` `` , SerializerFeature.BrowserCompatible ) ; 的时候才希望打印 '' \u00A0\u00A0 `` ` Map map=new HashMap ( ) ; map.put ( `` method '' , '' 安徽省滁州市南谯区test tomorrow I 你好 '' ) ; System.out.println ( JSON.toJSON ( map ) .toString ( ) ) ; ` 打印结果 ： { `` method '' : '' 安徽省滁州市南谯区test tomorrow I\u00A0\u00A0 你好 '' }
How to skip Exception when using JSONField ( format= '' yyyy-MM-dd '' ) __EoT__ code is : @ JSONField ( format = `` yyyy-MM-ddTHH : mm : ss.SSS '' ) but responese is : 0001-01-01T00:00:00 it will throw NumberFormatException AND stop parse remaining . ========= H O P E ========= throw and parse continuous ? thanks
JSONPath.eval 对于ip以下的path找不到 __EoT__ `` ` java String x = `` { \ '' 10.0.0.1\ '' : { \ '' region\ '' : \ '' xxx\ '' } } '' ; Object o = JSON.parse ( x ) ; System.out.println ( JSONPath.contains ( o , `` $ .10\\.0\\.0\\.1 '' ) ) ; System.out.println ( JSONPath.eval ( o , `` $ .10\\.0\\.0\\.1 '' ) ) ; System.out.println ( JSONPath.contains ( o , `` $ .10\\.0\\.0\\.1.region '' ) ) ; System.out.println ( JSONPath.eval ( o , `` $ .10\\.0\\.0\\.1.region '' ) ) ; `` ` true { `` region '' : '' xxx '' } false null
搜索出JSONObject里面某个value对应的所有PATH __EoT__ 一个JSONObject，递归遍历所有的叶子节点值，搜索出某个值对应的所有path返回，希望可以提供对应的方法直接使用 .
新版本 1.2.13 无法兼容的问题 __EoT__ 对于 JavaBeanDeserializer 的无法兼容的问题： 我看到 commit 的history https : //github.com/alibaba/fastjson/commit/0d8b086449e48a303bef16a203f696c16efe131a 修复JavaBeanDeserializer不能反序列化深层内部类的问题 但是，第113行。 ` ** String typeName = type.getTypeName ( ) ; ** ` 一段这样的代码： 而 这个方法的说明是： `` ` public interface Type { /** * Returns a string describing this type , including information * about any type parameters . * * @ implSpec The default implementation calls { @ code toString } . * * @ return a string describing this type * @ since 1.8 */ default String getTypeName ( ) { return toString ( ) ; } } `` ` since 1.8。 而我们线上服务用的jdk 的环境是1.7 的环境。 不知道加入这段代码的时候有没有考虑jdk 的版本。或者1.2.13 只支持JDK1.8+ 呢
final字段反系列化出错 __EoT__ ` Caused by : com.alibaba.fastjson.JSONException : set property error , TAG at com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue ( FieldDeserializer.java:89 ) at com.alibaba.fastjson.parser.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:641 ) at com.alibaba.fastjson.parser.JavaBeanDeserializer.deserialze ( JavaBeanDeserializer.java:97 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:682 ) at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject ( DefaultJSONParser.java:655 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:216 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:188 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:147 ) at com.alibaba.fastjson.JSON.parseObject ( JSON.java:252 ) ` > public static final String TAG = UserInfo.class.getSimpleName ( ) ; > 版本：compile 'com.alibaba : fastjson:1.1.52.android '
com.alibaba.fastjson.util.TypeUtils.castToDate有bug当转换负值long类型时 __EoT__ 当从long类型转换成Date类型时，如果long值为负数，报异常。实际new Date ( longVar ) 接受负值。
getItemViewType返回的ViewType过大时候，Cantor不能正常工作。 __EoT__ Vlayout Version：1.2.15 Tools：Android Studio 3.1 当ViewType比较小的时候没问题，但是当ViewType比较大的时候，解析出来的index和ViewType就是错误的。 测试代码： `` ` java public static void main ( String [ ] args ) { long cantor = Cantor.getCantor ( 1000052 , 0 ) ; long [ ] result = new long [ 2 ] ; Cantor.reverseCantor ( cantor , result ) ; System.out.println ( `` index = `` + result [ 1 ] + `` , type = `` + result [ 0 ] ) ; } `` ` 输出结果： `` ` java index = -2147483648 , type = -2146483596 `` `
一个方法三四百行，IDE都看不下去了 __EoT__ ! [ image ] ( https : //cloud.githubusercontent.com/assets/5166848/25601504/34bd7340-2f1f-11e7-9c74-ec30aa5d372c.png ) ! [ image ] ( https : //cloud.githubusercontent.com/assets/5166848/25601676/6857830c-2f20-11e7-969c-6b0e30886be6.png )
addAdapters 的问题 __EoT__ 假设目前有这样的需求： 列表和头部的数据分开，头部数据请求优先于列表回来，为了不阻碍展示，先创建了头部相关的 adapters 并且 setAdapters，等列表数据回来以后再 addAdapters。 把 examples 里面 VLayoutActivity 的 StaggeredGridLayoutHelper adapter 通过 addAdapters 加入，会出现下面的问题： `` ` java.lang.IllegalStateException : Can not change whether this adapter has stable IDs while the adapter has registered observers . at android.support.v7.widget.RecyclerView $ Adapter.setHasStableIds ( RecyclerView.java:5281 ) at com.alibaba.android.vlayout.DelegateAdapter.addAdapters ( DelegateAdapter.java:313 ) at com.alibaba.android.vlayout.DelegateAdapter.addAdapters ( DelegateAdapter.java:323 ) at com.alibaba.android.vlayout.example.VLayoutActivity $ 13.run ( VLayoutActivity.java:500 ) `` ` 求这种场景的使用姿势，谢谢～
StaggeredGridLayoutHelper 设置lanes超过2，item错位 __EoT__ ! [ 2017-03-09 5 58 42 ] ( https : //cloud.githubusercontent.com/assets/4254827/23745146/190caa50-04f2-11e7-8787-6c8a7fc63efa.png )
SleepingWaitStrategy causing 100 % CPU with one consumer __EoT__ I am using [ opencensus ] ( https : //github.com/census-instrumentation/opencensus-java ) , a metrics and tracing library that uses the disruptor internally . When my application is idle I experience 100 % CPU which I have traced to the single disruptor consumer thread . I am experiencing this on both my Ubuntu box and in the cloud . Ubuntu box : Ubuntu 17.10 Linux version 4.13.0-17-generic ( buildd @ lcy01-amd64-011 ) ( gcc version 7.2.0 ( Ubuntu 7.2.0-8ubuntu3 ) ) # 20-Ubuntu SMP Mon Nov 6 10:04:08 UTC 2017 java version `` 1.8.0_161 '' Java ( TM ) SE Runtime Environment ( build 1.8.0_161-b12 ) Java HotSpot ( TM ) 64-Bit Server VM ( build 25.161-b12 , mixed mode ) Cloud os : https : //cloud.google.com/container-optimized-os/docs/ I have created a minimal project that reproduces the issue : https : //github.com/matthewrj/opencensus-bug/tree/master Forcing the Opencensus library to use BlockingWaitStrategy by class path patching makes the CPU usage go to 0 % .
Extract RingBuffer interface refactoring __EoT__ It would be great to extract RingBuffer interface from com.lmax.disruptor.RingBuffer class for simplifying mocking RingBuffer during unit testing . RingBuffer class is declared as _final_ currently and ca n't be directly mocked with Mockito framework . We use additional `` wrapper '' class over RingBuffer to workaround it at the moment ( using PowerMock is not option for us )
Crash when editing an issue-comment __EoT__ Building on latest master . Clicking on ` Edit ` on an issue comment crashes the app . Steps to reproduce - 1 . Find an issue you participate in . 2 . Find your comment . Click ` Edit ` inside the Overflow menu .
Setting up a proper CI environment __EoT__ Hey @ paolorotolo If is fine for you , I 'd love to set up some CI for building and executing some tests ( that we currently do n't have but would be cool to have ) on AppIntro . Do you have preferences on this ? Otherwise , I 'd go for either Travis or Circle .
Thanks a lot PaoloRotolo ! __EoT__ I have launched my new app , and I have included your library . Thanks a lot for this great library . It gave the final finishing touch to my app . Here 's the link to my app on Playstore : [ Crypton ] ( https : //play.google.com/store/apps/details ? id=mindstorm.crypton ) Do check it out and give your reviews ! Thanks once again . Yours sincerely , Malay Satapathy
Using AppIntro __EoT__ Hy , Im using AppIntro in my app : https : //github.com/FallenRiteMonk/ludus
HystrixDashboard - does n't seem to display the right TPS __EoT__ I am using the version 1.1.2.RELEASE of turbine stream and I think the dashboard has an issue . Let me know , if I am wrong or not . Here is an example of the data that I got from the turbine stream `` ` data : { `` rollingCountFallbackFailure '' :0 , '' rollingCountFallbackSuccess '' :0 , '' propertyValue_circuitBreakerRequestVolumeThreshold '' : '' 200 '' , '' propertyValue_circuitBreakerForceOpen '' : false , '' propertyValue_metricsRollingStatisticalWindowInMilliseconds '' : '' 10000 '' , '' latencyTotal_mean '' :55 , '' type '' : '' HystrixCommand '' , '' rollingCountResponsesFromCache '' :0 , '' TypeAndName '' : '' TypeAndName= > HystrixCommand_lcs.aurora-read '' , '' rollingCountTimeout '' :0 , '' propertyValue_executionIsolationStrategy '' : '' THREAD '' , '' instanceId '' : '' lcs:08fe0c944c1c:8080 '' , '' rollingCountFailure '' :0 , '' rollingCountExceptionsThrown '' :0 , '' latencyExecute_mean '' :55 , '' isCircuitBreakerOpen '' : false , '' errorCount '' :0 , '' group '' : '' AuroraLcsCacheDao '' , '' rollingCountSemaphoreRejected '' :0 , '' latencyTotal '' : { `` 0 '' :35 , '' 25 '' :52 , '' 50 '' :69 , ''
BatchHystrixCommand has no sence and does n't collapse requests __EoT__ ` BatchHystrixCommand ` calls underlying action as many times as it 's requested and thus there is no benefit of collapse requests feature at all . Actual processing ` Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ` should be done only once for same set of request args . `` ` java @ Override protected List < Optional < Object > > run ( ) throws Exception { List < Optional < Object > > response = Lists.newArrayList ( ) ; for ( HystrixCollapser.CollapsedRequest < Object , Object > request : getCollapsedRequests ( ) ) { final Object [ ] args = ( Object [ ] ) request.getArgument ( ) ; try { response.add ( //this should be called only once for several equals args arrays , //otherwise underlying command action will be called as many times as many it was requested Optional.of ( fallbackEnabled ? processWithFallback ( args ) : process ( args ) ) ) ; } catch ( Exception ex ) { request.setException ( ex ) ; response.add ( Optional.absent ( ) ) ; } } return response ; }
Basic authentication __EoT__ I have hystrix stream setup on a public web application . It is protected by a basic authentication filter for improved security . It would be nice to have the dashboard support basic authentication .
Hystrix Javanica Error Propagation does not work correctly __EoT__ Hi , i 'm very new to Hystrix/Javanica . But i think i found a bug in error propagation : I have the following setup : `` ` //J- @ HystrixCommand ( fallbackMethod = `` getArticleModelFallback '' , ignoreExceptions = { SkuParsingFailedException.class , ModelNotFoundException.class } , commandProperties = { @ HystrixProperty ( name = `` execution.isolation.thread.timeoutInMilliseconds '' , value = `` 15000 '' ) , @ HystrixProperty ( name = `` circuitBreaker.requestVolumeThreshold '' , value = `` 1 '' ) , @ HystrixProperty ( name = `` circuitBreaker.sleepWindowInMilliseconds '' , value = `` 20000 '' ) } ) //J+ public ArticleModel getArticleModel ( final String modelSku ) throws ModelNotFoundException { final ModelSku sku ; try { sku = ModelSku.valueOf ( modelSku ) ; } catch ( final SkuParsingFailedException e ) { throw new ModelNotFoundException ( `` Bad or incorrect SKU ! `` , modelSku ) ; } final ArticleModel articleModel ; try { articleModel = articleWebService.getArticle ( sku ) ; if ( articleModel == null ) { throw new ModelNotFoundException ( modelSku ) ; } } catch ( final SOAPFaultException e ) { throw new ModelNotFoundException ( modelSku ) ; }
Infinite loop on ill-formed exceptions __EoT__ ExceptionThreadingUtility can enter an infinite loop on ill-formed Exceptions like these : private final Throwable ex1 = new Throwable ( `` Ex1 '' ) ; private final Throwable ex2 = new Throwable ( `` Ex2 '' , ex1 ) ; ex1.initCause ( ex2 ) ;
扩展词库加入英文，输入扩展英文连接另一英文，分词会报错。 __EoT__ 扩展词库加入英文，输入扩展英文连接另一英文，分词会报错。 原本以为是自定词性的问题，但将词性改为n，仍会报错 词库内容为 BENQ n 1024 BENTLEY n 1024 输入 '' BENQphone '' ; 使用标准分词 HanLP.segment ( text ) 开启debug如下： 粗分词网： 0 : [ ] 1 : [ BENQ ] 2 : [ ENQphone ] 3 : [ ] 4 : [ ] 5 : [ ] 6 : [ ] 7 : [ ] 8 : [ ] 9 : [ ] 10 : [ ] 会报出这样的错误 Exception in thread `` main '' java.lang.IllegalArgumentException : Illegal Capacity : -1 at java.util.ArrayList. < init > ( ArrayList.java:142 ) at com.hankcs.hanlp.seg.HiddenMarkovModelSegment.convert ( HiddenMarkovModelSegment.java:238 ) at com.hankcs.hanlp.seg.Viterbi.ViterbiSegment.segSentence ( ViterbiSegment.java:50 ) at com.hankcs.hanlp.seg.Segment.seg ( Segment.java:144 ) at com.hankcs.hanlp.tokenizer.StandardTokenizer.segment ( StandardTokenizer.java:39 ) at com.hankcs.hanlp.HanLP.segment ( HanLP.java:354 ) 原因是 com.hankcs.hanlp.seg.Viterbi.ViterbiSegment 中 47行 List < Vertex > vertexList = viterbi ( wordNetAll ) ; 返回结果 vertexList = [ ] vertexList.size ( ) = 1 但输入 `` BENQBENTLEYphone '' 则输出没报错，但结果不是想要的 人名角色观察： [ A 42634591 ] [ BENQ A 42634591 ] [ B L 3 ] [ ENTLEYphone A 42634591 ] [ A 42634591 ] 人名角色标注： [ /A , BENQ/A , B/L , ENTLEYphone/A , /A ] [ BENQ/n , B/nx , ENTLEYphone/nx ] 请问该如何修改才能添加英文词库呢？
Snapshot API Diffs __EoT__ `` Snapshot API Diffs from 22.0 '' should now be `` Snapshot API Diffs from 23.0 '' or just `` Snapshot API Diffs '' . https : //github.com/google/guava # snapshots
Add docs to Ordering to give guidance how to parse and understand long chains of calls __EoT__ _ [ Original issue ] ( https : //code.google.com/p/guava-libraries/issues/detail ? id=1342 ) created by **kevinb @ google.com** on 2013-03-15 at 05:18 PM_ -- - It 's very hard to figure out what Ordering.natural ( ) .nullsFirst ( ) .reverse ( ) .lexicographical ( ) .reverse ( ) .nullsLast ( ) means . We can make it a lot easier for the user by walking through how we read and interpret a few salient examples .
`` Repeat '' toggle function ( Repeat All/Repeat One ) on playlist __EoT__ I have list of videos played using ExoPlayer and I want to add Repeat button . I am using ConcatenatingMediaSource so far and I do n't know how to handle if the user changed the toggle to `` Repeat One '' or changing it back to `` Repeat All '' Thanks
Internal runtime error __EoT__ http : //stackoverflow.com/questions/24554435/exoplayer-playback-error
ExoPlayer is not sending STATE_FINISHED on some devices __EoT__ I am currently developing an application that is supposed to download a few MP4 videos and play them in an endless loop . While everything works perfectly when I run the app on my phone ( LG G2 with KitKat ) I experience a strange problem on the intended device , which is a screenless Android box that shows up as `` Unknown SoftwinerEvb '' in Android Studio . It is running Android 4.2.2 . The problem now is that on this specific device ExoPlayer does not send a STATE_FINISHED signal when the video ends . I rely on that signal to clean up that instance of ExoPlayer and move on to the next content item . From the logs it seems that everything is OK , all the other events ( STATE_PREPARING , STATE_READY , etc . ) are delivered without a problem . Occasionally , I see messages like the following in the logs : `` ` SystemClock : time going backwards : prev 7298066659940 ( ioctl ) vs now 7298066604315 ( ioctl ) , tid=32607 SystemClock : time going backwards : prev 7299786994940 ( ioctl ) vs now
Bound nextIndex on seek to be 0 < = nextIndex < = numSegments __EoT__ This helps avoid issues when seeking very close to the start and end of the track , in particular if the seek is to t=0 but the start time of the first segment is very slightly greater than 0 . If this makes sense , bounding should be applied in the following places : https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/dash/DashMp4ChunkSource.java # L174 https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/dash/DashWebmChunkSource.java # L155 https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java # L200
SmoothStream audio track language metadata is not made available __EoT__ When we request the Audio tracks on a SmoothStream stream the language attribute on the manifest xml is not made available on the _MediaFormat_ language property return from the _getTrackFormat_ method : https : //github.com/google/ExoPlayer/blob/0c060f429f459f1bac2ffa0963cadc45ce35b73a/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java # L327 It seems the language attribute is parsed and passed down to the _StreamElement_ https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java # L580 But when the MediaFormat instance is created the language property is linked to the _TrackElement_ ( not to the StreamElement ) : https : //github.com/google/ExoPlayer/blob/c9caaad50c4148a8c369816c100c170436a3d4d6/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingChunkSource.java # L417 The _TrackElement_ does not contain the language flag : https : //github.com/google/ExoPlayer/blob/master/library/src/main/java/com/google/android/exoplayer/smoothstreaming/SmoothStreamingManifest.java # L134 As a result the _getTrackFormat_ will always return a _MediaFormat_ with a language set to _null_ , even if the metadata is available on the manifest .
Player does not recover from segment requests that return a 404 __EoT__ I 'm testing with the ExoPlayer demo app , and have a few test manifests that I 've added to the HLS Samples array : `` ` new Sample ( `` 5 segments , should be normal playback '' , `` http : //solutions.brightcove.com/jwhisenant/testpages/exoplayer/hls/test-5-segments.m3u8 '' , DemoUtil.TYPE_HLS ) , new Sample ( `` 5 segments , first missing , player should recover and continue playing '' , `` http : //solutions.brightcove.com/jwhisenant/testpages/exoplayer/hls/test-first-segment-404.m3u8 '' , DemoUtil.TYPE_HLS ) , new Sample ( `` 5 segments , last missing , player should recover and complete '' , `` http : //solutions.brightcove.com/jwhisenant/testpages/exoplayer/hls/test-last-segment-404.m3u8 '' , DemoUtil.TYPE_HLS ) , `` ` Each test manifest includes 5 10-second ts segments . When I play the first Sample , it plays to completion as expected . When I play the second sample , a 404 is returned for the first segment request , as expected , but the player does not recover and play any subsequent segments . When I play the third sample , a 404 is returned for last segment request , as expected , but in this case playback stops at about 10 seconds
HashMap.Entry is a private inner class __EoT__ A simple remark on [ that ] ( https : //github.com/google/ExoPlayer/blob/dev-hls/library/src/main/java/com/google/android/exoplayer/upstream/HttpDataSource.java # L379 ) line . HashMap.Entry is a private inner class . You should use Map.Entry . When i compile my project using ExoPLayer sources i get that error `` ` java.util.HashMap.Entry is not public in java.util.HashMap ; can not be accessed from outside package `` ` Thanks
SectionHeader with withEnableSelectedMiniDrawerItemBackground ( true ) __EoT__ I basically modified the MiniDrawerActivity so that I set withEnableSelectedMiniDrawerItemBackground ( true ) and I added a sectionheader as the first draweritem . When I click an item on the minidrawer , it gets selected and the background changes accordingly . However when you rotate it , two minidrawer items gets the `` selected '' background color change .
Updating sticky footer is bugged . __EoT__ - If i init drawer like this : `` ` java .withStickyFooterDivider ( true ) .withStickyFooterShadow ( false ) `` ` After updateStickyFooterItem i get divider removed . - With same initialization if add 1 sticky item ( primary ) , updating it 's name or whole item wo n't take any effect ( debugger says DrawerUtils.getStickyFooterPositionByIdentifier ( ) returns incorrect position ( real position is incorrect minus 1 ) .
setStickyFooterSelection ( int identifier , boolean fireOnClick ) dose n't work as expected __EoT__ I think in file Drawer.java Line 456 https : //github.com/mikepenz/MaterialDrawer/blob/d94f12c3590a037d1f122d6bff0b00dab728b32a/library/src/main/java/com/mikepenz/materialdrawer/Drawer.java # L456 `` ` java public void setStickyFooterSelection ( int identifier , boolean fireOnClick ) { setStickyFooterSelectionAtPosition ( getPosition ( identifier ) , fireOnClick ) ; } `` ` should be `` ` java public void setStickyFooterSelection ( int identifier , boolean fireOnClick ) { setStickyFooterSelectionAtPosition ( getStickyFooterPosition ( identifier ) , fireOnClick ) ; } `` ` Thanks .
New Problem with RTL : ) __EoT__ ! [ screenshot_2015-08-26-21-16-10 ] ( https : //cloud.githubusercontent.com/assets/7253737/9502103/df352268-4c37-11e5-87d2-51edabf4441e.png ) ! [ screenshot_ - - - - - ] ( https : //cloud.githubusercontent.com/assets/7253737/9502102/df353276-4c37-11e5-8020-c94b165e9665.png ) I hope u understand the problem from the ScreenShots : )
RTL support for minidrawer __EoT__ sorry for my bad English but I 'm trying to set minidrawer in the right by using this command ` getWindow ( ) .getDecorView ( ) .setLayoutDirection ( View.LAYOUT_DIRECTION_RTL ) ; ` but it does n't appear
NullPointerException when adding sticky footer item programmatically __EoT__ Hi and thanks for the great library ! We 're getting strange exception when adding sticky footer items into the just created drawer - the following code `` ` java accountsSelector = new AccountHeaderBuilder ( ) .withActivity ( this ) .withHeaderBackground ( R.drawable.bg_profiles ) .build ( ) ; appDrawer = new DrawerBuilder ( ) .withActivity ( this ) .withTranslucentStatusBar ( false ) .withActionBarDrawerToggle ( false ) .withAccountHeader ( accountsSelector ) .build ( ) ; accountsSelector.addProfile ( new ProfileDrawerItem ( ) .withIcon ( getDrawableCompat ( R.drawable.pref_icon_account_setup ) ) .withName ( `` Test Acc 1 '' ) .withEmail ( `` test @ test.com '' ) , 0 ) ; appDrawer.addItem ( new SwitchDrawerItem ( ) .withCheckable ( true ) .withChecked ( true ) .withSwitchEnabled ( true ) .withName ( `` Some quick option '' ) .withIcon ( R.drawable.ic_cast_light ) .withSelectable ( false ) ) ; appDrawer.addItem ( new SwitchDrawerItem ( ) .withCheckable ( true ) .withChecked ( false ) .withSwitchEnabled ( true ) .withName ( `` Other quick option '' ) .withIcon ( R.drawable.ic_play_light ) .withSelectable ( false ) ) ; appDrawer.addItem ( new DividerDrawerItem ( ) ) ; appDrawer.addItem ( new PrimaryDrawerItem (
.withShowDrawerOnFirstLaunch causing java.lang.IllegalArgumentException __EoT__ Seems it broke in 3.1.1 . Working as expected in 3.1.0 . Here 's the full stack trace : `` ` 07-08 21:52:18.970 7960-7960/com.example.drawertest E/AndroidRuntime﹕ FATAL EXCEPTION : main java.lang.RuntimeException : Unable to start activity ComponentInfo { com.example.drawertest/com.example.drawertest.MainActivity } : java.lang.IllegalArgumentException : No drawer view found with gravity LEFT at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:2059 ) at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:2084 ) at android.app.ActivityThread.access $ 600 ( ActivityThread.java:130 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1195 ) at android.os.Handler.dispatchMessage ( Handler.java:99 ) at android.os.Looper.loop ( Looper.java:137 ) at android.app.ActivityThread.main ( ActivityThread.java:4745 ) at java.lang.reflect.Method.invokeNative ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:511 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:786 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:553 ) at dalvik.system.NativeStart.main ( Native Method ) Caused by : java.lang.IllegalArgumentException : No drawer view found with gravity LEFT at android.support.v4.widget.DrawerLayout.openDrawer ( DrawerLayout.java:1322 ) at com.mikepenz.materialdrawer.DrawerBuilder.handleShowOnFirstLaunch ( DrawerBuilder.java:1027 ) at com.mikepenz.materialdrawer.DrawerBuilder.buildView ( DrawerBuilder.java:1299 ) at com.mikepenz.materialdrawer.DrawerBuilder.build ( DrawerBuilder.java:1244 ) at com.example.drawertest.MainActivity.onCreate ( MainActivity.java:17 ) at android.app.Activity.performCreate ( Activity.java:5008 ) at android.app.Instrumentation.callActivityOnCreate ( Instrumentation.java:1079 ) at android.app.ActivityThread.performLaunchActivity ( ActivityThread.java:2023 ) at android.app.ActivityThread.handleLaunchActivity ( ActivityThread.java:2084 ) at android.app.ActivityThread.access $ 600 ( ActivityThread.java:130 ) at android.app.ActivityThread $ H.handleMessage ( ActivityThread.java:1195 ) at android.os.Handler.dispatchMessage ( Handler.java:99 ) at android.os.Looper.loop (
RTL language issue with android : gravity= '' center_vertical|left '' __EoT__ This repository search android : gravity= '' center_vertical|left '' you will find there are still few places in layout files have android : gravity= '' center_vertical|left '' in TextView . the `` left '' attribute , cause RTL language like Arabic to always align to the left , which does n't look good , it should default to the right in RTL language . my suggestion is create one more same copy of layout file , and put it in layout-ldrtl folder , with android : gravity= '' center_vertical|right ''
The account switcher can not be clicked in Lollipop when using the compact style __EoT__
Selectable SwitchDrawerItem __EoT__ Is it possible to have a SwitchDrawerItem that can be selected like a PrimaryDrawerItem if it 's tapped anywhere except the switch ? Would open up the possibility of having a drawer item that can be turned on or off , but selected to launch a fragment with finer control . For example , a notifications item that can be easily turned on or off from the drawer , but selected to control type and frequency of notifications .
Sticky Footer margin __EoT__ Hi , I implemented the new sticky footer , but the margin seems a bit off . There 's too much space between the divider and the list . I used the ` addStickyDrawerItems ( ) ` function with the array containing one ` PrimaryDrawerItem ` Screenshot , look at `` Settings '' : ! [ 2015-04-13 13 50 17 ] ( https : //cloud.githubusercontent.com/assets/3082124/7117116/05a29b02-e1f7-11e4-83c8-b129f7404487.png ) And another where I pressed the button for clarity : ! [ 2015-04-13 13 50 47 ] ( https : //cloud.githubusercontent.com/assets/3082124/7117167/5fa3e688-e1f7-11e4-8431-06a08c27be00.png )
Sticky Footer margin __EoT__ Hi , I implemented the new sticky footer , but the margin seems a bit off . There 's too much space between the divider and the list . I used the ` addStickyDrawerItems ( ) ` function with the array containing one ` PrimaryDrawerItem ` Screenshot , look at `` Settings '' : ! [ 2015-04-13 13 50 17 ] ( https : //cloud.githubusercontent.com/assets/3082124/7117116/05a29b02-e1f7-11e4-83c8-b129f7404487.png ) And another where I pressed the button for clarity : ! [ 2015-04-13 13 50 47 ] ( https : //cloud.githubusercontent.com/assets/3082124/7117167/5fa3e688-e1f7-11e4-8431-06a08c27be00.png )
Kitkat changes __EoT__ Hi , I 've made some changes on how the status bar is displayed on kitkat devices only , because kitkat already adds its own shadow and I think it conflicts with the shadows/colors this library adds . I think the first commit is the most important ( 2366bbe ) , as there was no way for the user to change this via the API . It removes the shadow on the top of the slider on android devices . I thought this was especially ugly on lists without a header image . Screenshot : Left is before , right is after change ! [ slider-statusbar-changes ] ( https : //cloud.githubusercontent.com/assets/3082124/7134876/734292a2-e2a1-11e4-9c52-0b6de3198064.png ) The second commit ( e71661c ) changes the status bar color on kitkat devices , it now uses the primary color instead of the primary dark color . This is less important , because the user could already change that color . This is how I did it in the past : ` .withStatusBarColorRes ( ( Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT ) ? R.color.primary : R.color.primaryDark ) ` Screenshot : Left is before , right is after change ! [ slider-statusbar-changes-2 ] ( https : //cloud.githubusercontent.com/assets/3082124/7134980/8aedb07a-e2a2-11e4-9432-aca1c965bbbb.png )
Request - Radio and Toggle Buttons __EoT__ Hey there @ mikepenz . Are there any plans on adding Radio and Toggle Buttons ( or Checkboxes ) to the list of supported Drawer Items ? Example from Google Play Movies ( see `` Downloaded only '' ) : http : //i.stack.imgur.com/cvCjb.png I like your Drawer a lot and would be very grateful for having this feature .
Bug - Icon Colors __EoT__ According to Material Design guidelines the icon colors should have an alpha value of 54 % ( # 000000 ) . so this color must be default color of icons : # 727272
Change theme name from AppTheme __EoT__ AppTheme seems like a bad choice of name for the theme . I think the Android Studio templates for apps uses this by default so it called confusion when all my ActionBars disappeared . A better name would be something like MaterialDrawerTheme .
Wrong names for FadeIn Animators . Missing one of four FadeIn Animators __EoT__ ` FadeInRightAnimator ` class describes ` FadeInUpAnimator ` actually , need to be renamed . Also , there is no ` FadeInRightAnimator ` , but Left , Down , Up ( after fix ) , but for Out animation there are all four animations . Update : Also ` FadeInLeftAnimator ` is ` FadeInRightAnimator ` actually : )
add a menu to copy class name . __EoT__ as for developing a xposed module need frequently copy the class name , but there is no such menu easily to copy the class name , so i added it .
Registers are not replaced in decompiled sources __EoT__ Hi , open `` ` com.segment.analytics.Analytics `` ` and browse to that method : `` ` java public com.segment.analytics.Analytics build ( ) { if ( com.segment.analytics.internal.Utils.isNullOrEmpty ( this.tag ) ) { r1.tag = r1.writeKey ; } // ... .. if ( r1.defaultOptions == null ) { r1.defaultOptions = new com.segment.analytics.Options ( ) ; } if ( r1.logLevel == null ) { r1.logLevel = com.segment.analytics.Analytics.LogLevel.NONE ; } if ( r1.networkExecutor == null ) { r1.networkExecutor = new com.segment.analytics.internal.Utils.AnalyticsNetworkExecutorService ( ) ; } if ( r1.connectionFactory == null ) { r1.connectionFactory = new com.segment.analytics.ConnectionFactory ( ) ; } if ( r1.crypto == null ) { r1.crypto = com.segment.analytics.Crypto.none ( ) ; } // ... .. `` ` I lot of references to `` ` this `` ` were not replaced APK : https : //www.apkmirror.com/apk/simple-finance-technology-corp/simple-better-banking/simple-better-banking-2-55-1-release/
FAILURE : Build failed with an exception . __EoT__ I get error while building Linux kali 4.15.0-kali3-amd64 # 1 SMP Debian 4.15.17-1kali1 ( 2018-04-25 ) x86_64 GNU/Linux [ errormsg.txt ] ( https : //github.com/skylot/jadx/files/2064339/errormsg.txt )
regression with missing plugin sonar-runner __EoT__ Hi , I 'm building from a clean chroot ( I 'm a package maintainer ) and the latest jadx HEAD fails : `` ` FAILURE : Build failed with an exception . * Where : Build file '/build/jadx-git/src/jadx-git/build.gradle ' line : 14 * What went wrong : A problem occurred evaluating root project 'jadx ' . > Plugin with id 'sonar-runner ' not found . * Try : Run with -- stacktrace option to get the stack trace . Run with -- info or -- debug option to get more log output . BUILD FAILED `` `
Nested anonymous classes variable assignment fails code generation __EoT__ Consider the following example code : `` ` java // a basic abstract class for nesting example public static abstract class BasicAbstract { public abstract void doSomething ( ) ; } public static class TestCls { private BasicAbstract inner ; public void simpleAnonymous ( ) { inner = new BasicAbstract ( ) { @ Override public void doSomething ( ) { inner = null ; } } ; } } `` ` Code gets generated correctly here . Now let 's add another level of anonymous class : `` ` java // a basic abstract class for nesting example public static abstract class BasicAbstract { public abstract void doSomething ( ) ; } public static class TestCls { private BasicAbstract outer , inner ; public void nestedAnonymous ( ) { outer = new BasicAbstract ( ) { @ Override public void doSomething ( ) { inner = new BasicAbstract ( ) { @ Override public void doSomething ( ) { inner = null ; } } ; } } ; } } `` ` Code generation fails . You can see that ` inner = null ` does n't get generated
Wrong type : PHI : __EoT__ The method 'load ' in the following sample failed to decompile with 'ERROR - Wrong type : PHI : ' import java.io.ByteArrayInputStream ; import java.io.IOException ; import java.io.InputStream ; public class ClassA { `` ` public static final class Result { private final int mCode ; public Result ( int code ) { mCode = code ; } public int getCode ( ) { return mCode ; } } public Result load ( byte [ ] data ) throws IOException { InputStream inputStream = null ; try { inputStream = getInputStream ( data ) ; decode ( inputStream ) ; return new Result ( 400 ) ; } finally { closeQuietly ( inputStream ) ; } } private InputStream getInputStream ( byte [ ] data ) throws IOException { return new ByteArrayInputStream ( data ) ; } private int decode ( InputStream inputStream ) throws IOException { return inputStream.available ( ) ; } private void closeQuietly ( InputStream is ) { try { is.close ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } } `` ` }
对 RecyclerView 进行截图问题 __EoT__ 使用 [ 此方式 ] ( https : //stackoverflow.com/a/31017673/2744948 ) 对 RecyclerView 进行截图，在 BaseQuickAdapter 的 onBindViewHolder 方法中，这行代码 ` this.convert ( holder , this.mData.get ( holder.getLayoutPosition ( ) - this.getHeaderLayoutCount ( ) ) ) ; ` 会产生 ` IndexOutOfBoundsException ` 。未添加头部，经调试 ` holder.getLayoutPosition ( ) ` 为 -1，所以 ` holder.getLayoutPosition ( ) - this.getHeaderLayoutCount ( ) ` 结果为 -1。 这里为何使用 ` holder.getLayoutPosition ( ) ` 而不用 ` positions ` 参数？ 或者你有更好的截图方案吗？
加载更多onLoadMoreComplete不起作用 __EoT__ 使用最新版本com.github.CymChad : BaseRecyclerViewAdapterHelper:2.9.18，加载更多调用onLoadMoreCompete不起作用，仍然不断调用加载更多，另外可否添加开关，关闭预加载机制，目前只有通过调用onLoadMoreEnd才能终止加载
同一个recycler设置多个adapter时候切换数据源报错 __EoT__ Process : com.tengw.aicairen , PID : 15935 java.lang.NullPointerException : Attempt to invoke interface method 'java.util.List com.chad.library.adapter.base.entity.IExpandable.getSubItems ( ) ' on a null object reference at com.chad.library.adapter.base.BaseQuickAdapter.hasSubItems ( BaseQuickAdapter.java:1640 ) at com.chad.library.adapter.base.BaseQuickAdapter.expandAll ( BaseQuickAdapter.java:1517 ) at com.chad.library.adapter.base.BaseQuickAdapter.expandAll ( BaseQuickAdapter.java:1557 ) at com.tengw.aicairen.ui.activity.FootBallActivity.initUIData ( FootBallActivity.java:129 ) at com.tengw.aicairen.ui.activity.FootBallActivity.access $ 300 ( FootBallActivity.java:48 ) at com.tengw.aicairen.ui.activity.FootBallActivity $ 3.onClick ( FootBallActivity.java:280 ) at android.view.View.performClick ( View.java:4811 ) at android.view.View $ PerformClick.run ( View.java:20136 ) at android.os.Handler.handleCallback ( Handler.java:815 ) at android.os.Handler.dispatchMessage ( Handler.java:104 ) at android.os.Looper.loop ( Looper.java:194 ) at android.app.ActivityThread.main ( ActivityThread.java:5556 ) at java.lang.reflect.Method.invoke ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:372 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:967 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:762 )
header是webView，刷新数据的时候会把webview也重新加载一次 __EoT__ 如果header是webView，刷新数据的时候会把webview也重新加载一次，会闪屏
添加多个头部，缺少返回已添加的头部下标方法 __EoT__ 添加多个头部，缺少返回已添加的头部下标方法，不好判断是否已经添加过头部，容易报已经添加过头部的错
我想请问下 怎么判断BaseQuickAdapter底部有 ( 加载状态 , 失败状态，加载完成End状态呢 ) __EoT__
使用sectionAdapter添加ItemChildClick事件没有触发？ __EoT__ 我想监听section中Head区域子元素的点击事件，但是添加了setOnRecyclerViewItemChildClickListener监听事件，并没有触发onItemChildClick流程，item区域的点击也没有进入这个流程。。
setFilename方法必须设置全路径才可以 __EoT__ setFilename方法必须设置全路径才可以，也就是说必须带上mCacheDir.getAbsolutePath ( ) ，而不是仅仅赋文件名就可以。
`` Height must have an exact value or MATCH_PARENT '' exeption in android 6 only __EoT__ Hi I 'm using this library in my project and it works fine in all android version from 4.1 to 5.1 , but in android 6 , when i set the layout_height of slidingUpPanel to a exact dimention like '160dp ' , it throw an exeption and say 'Height must have an exact value or MATCH_PARENT ' , and when i set the height to match_parent it was okay . this is my layout : < RelativeLayout android : id= '' @ +id/content '' android : layout_width= '' match_parent '' android : layout_height= '' match_parent '' > `` ` < RelativeLayout android : id= '' @ +id/scoreContainer '' android : layout_width= '' match_parent '' android : layout_height= '' wrap_content '' android : layout_alignParentTop= '' true '' android : background= '' @ drawable/purple_shadow_background '' > < LinearLayout android : id= '' @ +id/matchActivity_timer_progress_guess '' android : layout_width= '' match_parent '' android : layout_height= '' 2dp '' android : background= '' @ color/app_green1 '' android : orientation= '' horizontal '' / > < RelativeLayout android : id= '' @ +id/activity_userInfoContainer '' android : layout_width= '' wrap_content
NPE in draw ( ) when returning to Fragment with animation __EoT__ If i add custom animations when opening a Fragment from a Fragment which the ` SlidingUpPanelLayout ` is in , i get NPE in the ` draw ( ) ` method when returning to the Fragment . `` ` java.lang.NullPointerException : Attempt to invoke virtual method 'int android.view.View.getRight ( ) ' on a null object reference at com.sothree.slidinguppanel.SlidingUpPanelLayout.draw ( SlidingUpPanelLayout.java:1261 ) at android.view.View.updateDisplayListIfDirty ( View.java:15174 ) at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3585 ) at android.view.View.updateDisplayListIfDirty ( View.java:15134 ) at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3573 ) at android.view.View.updateDisplayListIfDirty ( View.java:15134 ) at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3573 ) at android.view.View.updateDisplayListIfDirty ( View.java:15134 ) at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3573 ) at android.view.View.updateDisplayListIfDirty ( View.java:15134 ) at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3573 ) at android.view.View.updateDisplayListIfDirty ( View.java:15134 ) at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3573 ) at android.view.View.updateDisplayListIfDirty ( View.java:15134 ) at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3573 ) at android.view.View.updateDisplayListIfDirty ( View.java:15134 ) at android.view.ViewGroup.recreateChildDisplayList ( ViewGroup.java:3593 ) at android.view.ViewGroup.dispatchGetDisplayList ( ViewGroup.java:3573 ) at android.view.View.updateDisplayListIfDirty ( View.java:15134 ) at android.view.ViewGroup.recreateChildDisplayList
AndroidX support in butterknife gradle plugin __EoT__ Using the ` android.useAndroidX ` property in ` gradle.properties ` file [ 1 ] to generate appcompat or androidx compatible ` R2 ` file . Closes JakeWharton/butterknife # 1300 : AndroidX support in butterknife gradle plugin [ 1 ] https : //developer.android.com/topic/libraries/support-library/androidx-overview
Port android.widget.CompoundButton to RxJava 2 . __EoT__
Fix the wrong comment . __EoT__ Hi The interface RequestListener has a wrong comment , I fixed it .
NullPointerException __EoT__ Issue happened when I scroll UI fastly . How do I fix this bug ? or avoid it . thank you . Glide verson 4.6.1 Andoird verson 6.0 Integration libraries : glide-4.6.1-full.jar ; annotation-4.6.1.jar ; Glide load Line : Glide.with ( context ) .load ( url ) .transition ( withCrossFade ( ) ) .into ( view ) ; E/AndroidRuntime ( 4263 ) : FATAL EXCEPTION : Thread-171 E/AndroidRuntime ( 4263 ) : Process : com.mgtv.tv.desktop , PID : 4263 E/AndroidRuntime ( 4263 ) : java.lang.NullPointerException : Argument must not be null E/AndroidRuntime ( 4263 ) : at com.bumptech.glide.util.Preconditions.checkNotNull ( Preconditions.java:31 ) E/AndroidRuntime ( 4263 ) : at com.bumptech.glide.util.Preconditions.checkNotNull ( Preconditions.java:25 ) E/AndroidRuntime ( 4263 ) : at com.bumptech.glide.load.model.MultiModelLoader $ MultiFetcher.onLoadFailed ( MultiModelLoader.java:141 ) E/AndroidRuntime ( 4263 ) : at com.bumptech.glide.integration.volley.VolleyStreamFetcher $ GlideRequest.parseNetworkError ( VolleyStreamFetcher.java:136 ) E/AndroidRuntime ( 4263 ) : at com.android.volley.NetworkDispatcher.parseAndDeliverNetworkError ( NetworkDis ! [ _20180207143520 ] ( https : //user-images.githubusercontent.com/15116718/35901933-3316ffe8-0c14-11e8-8321-af42da616856.jpg ) patcher.java:149 ) E/AndroidRuntime ( 4263 ) : at com.android.volley.NetworkDispatcher.run ( NetworkDispatcher.java:138 )
Improve Kotlin support for RecyclerView module __EoT__ @ sjudd Alrighty , round one ! 😄 I 'm basically going around all my libraries and adding nullability annotations everywhere to improve Kotlin type inference . This PR adds nullability annotations to the recycler view module and its dependencies . PS : about the commits in this PR , I noticed that you rebased my previous PR . Would you like me to cleanup these commits or are you fine squashing this PR ?
Fix error message __EoT__ < ! -- Make sure you 've run ` gradlew clean check jar assemble ` before commit . -- > < ! -- Do n't forget that you can always force push to your private branches to make changes . -- > < ! -- Please make sure there are no weird commits in the change set by rebasing to latest upstream . -- > < ! -- Please squash typo/checkstyle/review fix commits into the base commit . -- > # # Description < ! -- Please describe the changes you made on a high level . -- > < ! -- Make sure you reference the GitHub issue here if this change is related to one . -- > # # Motivation and Context < ! -- Why is this change required ? What problem does it solve ? -- > < ! -- If it 's fixing a bug reference it or provide repro steps . -- > < ! -- If you have any issues feel free to create the PR anyway , we 'll help to resolve them . -- >
Restart any non-running identical requests instead of ignoring them . __EoT__ Running requests are left to complete to avoid cancelling and restarting expensive operations ( network or I/O ) . Completed requests are asked to begin again , but short cut the normal request pipeline and redeliver the previously loaded resource to ensure that Targets and RequestListeners are notified as expected . Failed , cancelled , paused etc requests ( all other states ) are simply restarted . This might resolve # 2245
About bitmap recycle __EoT__ when LruMemoryCache full , LruMemoryCache remove some bitmap , these bitmap put BitmapPool , these bitmap reuse for other Bitmap Request。if these bitmap is using in ImageView , Will lead to errors ?
Implement feature addFooterView in ObservableGridView __EoT__
[ ViewPagerTabListViewFragment ] The view pager changes the sliding bar selected location with onTouch event . __EoT__ I am facing the following issue : - Using ActionBar-Tab-ViewPager activity and ViewPagerTabListViewFragment - The first child fragment works perfect - But when you swipe to the second fragment and touch any where on the fragment the Sliding Tab flickers and most of the time shifts to the next child . - Swiping reverse works fine , but while swiping forward , many times it catches the onTouch event instead of the swipe event and hence the flickring /next child selection . Check this link for the code : http : //stackoverflow.com/questions/29991358/android-observablescrollview-unexpected-touch-changes-the-child-fragment-while And here is the video of the exact issue : https : //youtu.be/0katNDIWcmg
SlidingUp improvements __EoT__ Hi ! I have an idea to improve the slidingUp . When you slide the panel must appears on the top an image with parallax effect , in this way on the finish of slide we have a FlexibleSpaceWithImage , and if you continue the scroll the image disappears like your example ! What do you think ?
Avoid bar being cut at edges __EoT__ Hi , I would like to avoid the bottombar to be cut at the left and right edges . I mean to keep every icon completely inside of the screen . Is it possible ? How can be done ? Thanks in advance and sorry for my english . ! [ image ] ( https : //cloud.githubusercontent.com/assets/17174870/21989778/7e077ade-dc0c-11e6-8f7b-d019f684551f.png )
update Readme __EoT__
Removing Android dependency from LoggerPrinter __EoT__ In order to have Logger in Android unit tests , Logger classes should not depend on Android internals , otherwise exception '' Method ... not mocked . '' will be thrown . For more info : https : //goo.gl/Cl0xu3 In this commit , instead of introducing more dependecy from other some 3rd party lib ( Appache etc ) to do the same task , code is copppied from relevant Android methods to reduce change impact .
Opening DribbbleShot for second time problem with image loading __EoT__ Hello , Thanks for this great source code : ) There is a problem when I open DesignerNewsStory for second time for an item in recycler view . I have made two screenshots for the first time and for the second time . ! [ screenshot_2015-10-31-00-25-36 ] ( https : //cloud.githubusercontent.com/assets/8733915/10860368/4bdb33fa-7f67-11e5-901c-2e99bc0c0e40.png ) ! [ screenshot_2015-10-31-00-25-43 ] ( https : //cloud.githubusercontent.com/assets/8733915/10860366/43567140-7f67-11e5-9700-2575f068a055.png ) Each time I open them I get this in my log : 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : Exception thrown during async generate 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : java.lang.IllegalArgumentException : x + width must be < = bitmap.width ( ) 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : at android.graphics.Bitmap.checkPixelsAccess ( Bitmap.java:1390 ) 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : at android.graphics.Bitmap.getPixels ( Bitmap.java:1346 ) 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : at android.support.v7.graphics.Palette $ Builder.getPixelsFromBitmap ( Palette.java:693 ) 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : at android.support.v7.graphics.Palette $ Builder.generate ( Palette.java:607 ) 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : at android.support.v7.graphics.Palette $ Builder $ 1.doInBackground ( Palette.java:664 ) 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : at android.support.v7.graphics.Palette $ Builder $ 1.doInBackground ( Palette.java:660 ) 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : at android.os.AsyncTask $ 2.call ( AsyncTask.java:288 ) 10-31 00:25:38.821 26818-3395/io.plaidapp E/Palette : at
下拉正在加载中的时候，列表的点击事件被拦截了 __EoT__ 下拉正在加载中的时候，列表的点击事件被拦截了，请问能否加一个公开方法设置是否需要拦截点击事件。 在ACTION_DOWN事件中的拦截代码： if ( mPtrIndicator.hasLeftStartPosition ( ) ) { // do nothing , intercept child event } else { dispatchTouchEventSupper ( e ) ; }
Add badge for android-gems.com __EoT__
Enable Next PTR at Once __EoT__ At current design , only after ` PtrUIHandler.onUIReset ` has been called , the next ` PTR ` can be performed . Now , I 've add a method ` setEnabledNextPtrAtOnce ` for this feature .
Missing application tag in androidmanifest causes robolectric failures __EoT__ Hello Robolectric tests are failing because when I import your library the androidmanifest does not contain an application tag . If you do n't need one then you still need to include an empty one : `` ` < application/ > `` ` This is the exception . `` ` WARNING : no system properties value for ro.build.date.utc java.lang.IllegalArgumentException : Missing required < application/ > element in .\gen-external-apklibs\in.srain.cube_ultra-ptr_1.0.7\AndroidManifest.xml at org.robolectric.AndroidManifest.parseAndroidManifest ( AndroidManifest.java:155 ) at org.robolectric.AndroidManifest.getPackageName ( AndroidManifest.java:474 ) at org.robolectric.AndroidManifest.getResourcePath ( AndroidManifest.java:517 ) at org.robolectric.AndroidManifest.getIncludedResourcePaths ( AndroidManifest.java:522 ) at org.robolectric.AndroidManifest.getIncludedResourcePaths ( AndroidManifest.java:524 ) at org.robolectric.RobolectricTestRunner.createAppResourceLoader ( RobolectricTestRunner.java:635 ) at org.robolectric.RobolectricTestRunner.getAppResourceLoader ( RobolectricTestRunner.java:627 ) at org.robolectric.internal.ParallelUniverse.setUpApplicationState ( ParallelUniverse.java:67 ) at org.robolectric.RobolectricTestRunner.setUpApplicationState ( RobolectricTestRunner.java:440 ) at org.robolectric.RobolectricTestRunner $ 2.evaluate ( RobolectricTestRunner.java:222 ) at org.junit.runners.ParentRunner.runLeaf ( ParentRunner.java:271 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:70 ) at org.junit.runners.BlockJUnit4ClassRunner.runChild ( BlockJUnit4ClassRunner.java:50 ) at org.junit.runners.ParentRunner $ 3.run ( ParentRunner.java:238 ) at org.junit.runners.ParentRunner $ 1.schedule ( ParentRunner.java:63 ) at org.junit.runners.ParentRunner.runChildren ( ParentRunner.java:236 ) at org.junit.runners.ParentRunner.access $ 000 ( ParentRunner.java:53 ) at org.junit.runners.ParentRunner $ 2.evaluate ( ParentRunner.java:229 ) at org.robolectric.RobolectricTestRunner $ 1.evaluate ( RobolectricTestRunner.java:158 ) at org.junit.runners.ParentRunner.run ( ParentRunner.java:309 ) at org.junit.runner.JUnitCore.run ( JUnitCore.java:160 ) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs ( JUnit4IdeaTestRunner.java:74 ) at
Add support for using the default parameter when defining custom names __EoT__ Fixes # 6145
Add support for Session State and Connection State listeners __EoT__ This PR adds support for receiving callbacks whenever the session state or the connection state to the server changes . The original intent of this PR was to somehow incorporate the connection state into the session state , but I had a very time reconciling the two , so for now , I 'm keeping them separate . This also aligns more closely with how they are implemented in OS/Sync . The session state can be : `` ` INACTIVE WAITING_FOR_ACCESS_TOKEN ACTIVE DYING `` ` The connection state can be : `` ` DISCONNECTED CONNECTING CONNECTED `` ` The connection states are most relevant when the Session state is ` ACTIVE ` , but it can also change while in ` DYING ` . The connection can be shared by multiple sessions ( but is n't currently AFAIK ) , which means that theoretically the Connection can report ` CONNECTED ` while the Session is ` INACTIVE ` . The object store code has been modified so if the Session is either ` INACTIVE ` or ` WAITING_FOR_ACCESS_TOKEN ` the connection will always be ` DISCONNECTED ` . # #
Test root certificates have expired __EoT__ The test certificates used in https : //github.com/realm/realm-java/blob/master/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java have expired causing the tests to fail . They need to be replaced https : //github.com/realm/realm-java/commit/1ae66530162b965e3b00588d02560c1cf530068f
Realm removeChangeListener for not valid objects __EoT__ hey i am suggesting to change the api behaivor , currently if i will try to removeChangeListener for not valid objects ( realm is closing ) the method throwing exception , why not simply ignore such cases and just print warning ?
Use standalone server project __EoT__ Move to using a standalone node project for the integration test server as it offers full flexibility with regard to controlling the server setup TODO - [ x ] Inject version of ROS from ` dependencies.list ` - [ x ] Testing - [ x ] Cleanup
Add support for automatic configurations __EoT__ Fixes # 5806 Replaces # 5813 See # 5813 for the discussion .
Add support for lists with non-null values in RealmQuery.oneOf __EoT__ Fixes # 5717
Nh/reverting ros to fix tests __EoT__
Deprecate mips __EoT__ None
Update sync to 2.0.0 __EoT__ None
Fix some performance issues when initializing the Schema __EoT__ This PR fixes some of the issues found in # 5391 **3.7.2 - Nexus 6P** 1445 1397 1345 1350 1359 Avg : 1379 **4.0.0-SNAPSHOT with proxy class fixes** 1129 1067 1054 973 1030 Avg : 1051 Savings ~25 % **4.0.0-SNAPSHOT with proxy/mediator fixes** 1115 974 939 937 950 Avg : 983 Savings ~ 29 % **4.0.0-SNAPSHOT with no-alloc/proxy/mediator fixes** 988 944 966 959 997 Avg : 971 Savings ~ 30 % 1 second to open a Realm still feels like too much though , but this was just low hanging fruits .
Make CI more reliable __EoT__ Ignore unit tests until we can fix them . Enable others
Support Partial Sync __EoT__ fixes # 5276
Enable @ ParametersAreNonnullByDefault annotation in Kotlin compiler . __EoT__
Update realm-sync to 1.10.8 __EoT__ And update object-store
Update Gradle plugins to the latest version __EoT__
Extend TestRealmObjectFileObject to support fine-grained Synthetic test class __EoT__ Tools suggested by @ beeender , to simplify RealmInteger testing . Backlink testing is a PoC
Queries on RealmList Failing ; Not Implemented __EoT__ I have a model with a many-to-many relationship , so it has a RealmList . I tried to do ` model.getTransactions ( ) .where ( ) ` , but I got a null pointer exception . Curious , I looked in the source code and found that [ RealmList.where ( ) ] ( https : //github.com/realm/realm-java/blob/ddae12c96aa9832ca5ccfb782c572a2fd37a46e4/realm/src/main/java/io/realm/RealmList.java # L131 ) is not implemented . The [ documentation ] ( http : //realm.io/docs/java/0.71.0/api/ ) says this is supposed to work . Would it be possible for someone to update documentation to match the code , or vice versa ? It 's frustrating when the documented behavior is different than the actual behavior .
Immutable RealmSchema and RealmObjectSchema __EoT__ Before this change , Realm.getSchema ( ) and DynamicRealm.getSchema ( ) both return a mutable version RealmSchema object . That would cause issue when changing the typed Realm 's schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited . After this change : Realm.getSchema ( ) returns an immutable RealmSchema object . And all RealmObjectSchema objects retrieved from that will be immutable as well .
Link to debug core lib for debug build __EoT__ This failed before when linking . It seems to be fixed after removing lto .
update Kotlin to 1.1.3-2 __EoT__
Update sync 2.0.0-rc11 __EoT__ There are some breaking changes from sync/core in this release : - Object ID column name has been renamed from __OID to ! OID Instead of hardcoding it in java , we read it from sync if it is built with sync . Otherwise hardcode it in JNI . - SortDescriptor and DistinctDescriptor are separated into two classes . Change the related JavaSortDescriptor to adapt this change . - Since core started using cmake , the openssl objects are not a part of core release anymore . Instead , it will be released to s3 independently . **DO N'T MERGE THIS before followings done ! ! ! ! ** - [ x ] https : //github.com/realm/realm-object-store/pull/467 needs to be merged first - [ x ] Update the Object Store submodule . - [ x ] Update ROS version .
Fix wrong javadoc in RealmConfiguration __EoT__ Fixes # 4916 @ realm/java
Simplify code in SyncUser.java __EoT__
Correctly reset integration tests . __EoT__ According to @ mrackwitz , we need to delete the ` realm-object-server ` directory between each integration test to correctly reset ROS ( https : //github.com/realm/realm-object-server/issues/1225 # issuecomment-308216359 ) . This error caused # 4655 to be extremely flaky . After this change , it seems to run consistently .
Upgrade to latest Sync 1.9.1 / Core 2.8.0 __EoT__
Refactor object creation into OsObject __EoT__ - Hide the addEmptyRow from java to support future stable ID . - Add bulk insertion benchmark . This wo n't be the final design of internal object creation API , when integration of OS object accessor , the internal API might be changed a bit since it does n't look nice at all -- 5 params for the JNI call to create an object with integer primary key !
Dont reset SharedRealm ptr __EoT__ - Keep the SharedRealm ptr valid when close it . To allow the is_closed checking could throw in the Object Store and it can be converted to a friendly Java exception . - Check if SharedRealm is closed when create collection iterator . Throw an ISE if it is . Fix # 4471 .
Add JNI helper class JavaGlabalRef and JavaClass __EoT__ - Added two class to help manage the jobject lifecycle . - Use a static local JavaClass for SyncManager . Since to support old/new values for object notification , we need to create java objects from JNI frequently . Clean up this part to make future work easier .
Enable listeners on RealmList __EoT__ The RealmList holds a Collection which is used for listeners . Other RealmList APIs are still calling from LinkView . - [ x ] Add tests for RealmList and RealmChangeListener .
Fix merge from 97fdf6 to master __EoT__ None
Fix tests and remove unnecessary imports and fields . __EoT__
update Kotlin used in example to 1.0.6 __EoT__ fixes # 4108 This PR requires # 4110 to be merged first . @ realm/java
Do n't use a fixed name for the ROS container __EoT__ This will allow avoiding issues when a previously running ROS container has not been closed for whatever reason . Fixes realm/ci # 61
Nh/init metadata __EoT__ This fix a native crash , when scheduling a client reset , because the ObjectStore metadata is not configure . ( note this issue does n't exist in master , because we init the metadata , when using the default UserStore - RealmUserStore )
Ignore exceptions __EoT__ If an exception is thrown in an async error handler , the app 's behaviour is highly unpredictable . We swallow the exception and log that it happens but let the app continue . Closes # 3559
Memory leak ( Row ) in Java_io_realm_internal_Table_nativeSetPrimaryKey __EoT__ I just stumbled across this while investigating a Core crash seems we 're allocating a Row on the heap https : //github.com/realm/realm-java/blob/d547fde64271229cb6bb98df30deda05faeba9ce/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp # L1508
Edited the README.md to clarify some of the `` Gottchas '' __EoT__ ... and to separate connected tests that require a server and those that do not Also raise the timeout for the connectedUnitTests from 7 to 10 seconds ( necessary for Nexus 4 , 5.1.1 )
Update core to 2.3.0 __EoT__ Also update object-store to 99570ba6e0 .
Throw correct exception for multiple logged in users __EoT__ ` SyncUser.currentUser ` should throw IllegalStateException if multiple users are logged in . @ realm/java
fix typo __EoT__ Just fixed a typo in a Javadoc comment . @ realm/java
Minor typo in ExampleRealmTest doc __EoT__
Upgrade to latest version of ObjectStore including Sync __EoT__ @ realm/java
Use debug log level for transformer __EoT__ The AS 2.2.1 seems enable info level log by default which makes the build slow in the AS . Close # 3608
Accelerate build with ccache and lcache __EoT__ See https : //github.com/beeender/lcache for source code for lcache . It is very simple right now . It identifies if the link target is cached by using checksums from command line + checksums of all input files .
fixed a bug causing ConcurrentModificationException on some Gradle 3.1 environment __EoT__ fixes # 3501 This PR changes the way to add the dependencies . ` DependencyResolutionListener ` was removed and the setter of ` syncEnabled ` property in ` RealmPluginExtension ` modifies ` compile ` dependencies instead . This worked as expected with the project provided in https : //github.com/realm/realm-java/issues/3501 # issuecomment-250413228 @ realm/java @ emanuelez
move registering NetworkStateReceiver to objectServer flavor __EoT__ fixes # 3505
Merge interactive install __EoT__ @ kneth @ kspangsege
fix unstable test __EoT__ @ realm/java
Breaking updates - lookup outcommented in table and tableview + fixes in quick benchmark tests __EoT__
Upgrade ReLinker to 1.2.2 __EoT__ None
Updatding yaml doc for java addAt __EoT__
fix unstable test __EoT__ @ realm/java
BREAKING CHANGE : Table.insert ( ) ranamed to addAt ( ) , example code and tests updated accordingly __EoT__
4 spaces indentation and Group example __EoT__
Dividing the TightDB class into `` typed '' and `` internal '' utility classes __EoT__ Currently the TightDB class contains many internal utility methods and the `` print '' method that 's used for printing the `` typed '' tables . The class needs to be divided , to isolate the low-level utilities into separate class .
Use https in javadoc links __EoT__ The realm javadoc is served via https so the links should be https too in order to avoid a mixed content blocking : https : //support.mozilla.org/en-US/kb/mixed-content-blocking-firefox
transform accesses to other model fields in model 's constructors . __EoT__ fixes # 3361 @ realm/java
revive the version check of ndk __EoT__ I wasted our time by using wrong version of NDK . To prevent us from doing the same mistakes , I revived the check of NDK version . @ realm/java
Add methods to RealmQuery to support byte arrays __EoT__ This is a PR to address issue # 3278 , which I opened yesterday . The intent of this PR is to add methods to ` RealmQuery ` which support ` byte [ ] ` fields . The original issue was only for ` equalTo ( ) ` , but if the core supports others , I 'd be happy to add them as well ( see my first comment for more info on that ) As far as I understand , these are the steps I need to take : - Add methods to ` RealmQuery.java ` - Add methods and native method signatures to ` TableQuery.java ` - Regenerate JNI header files - Add methods to ` io_realm_internal_TableQuery.cpp ` - Add tests to ` RealmQueryTests ` ( In my initial commits , I also added some to ` JNIQueryTest ` , not sure if that was needed ? )
Upgraded core to 1.4.2 __EoT__
Fix isLoaded JavaDoc __EoT__ Fixes # 3200 The exception message when accessing 'null ' object fields where a bit misleading . Exception + Javadoc have been updated . @ realm/java @ beeender
Missing transaction in threading example __EoT__ Close # 3244
Disable change listeners on IntentService __EoT__ Fixes # 2875 With this change , using any form of ChangeListener will now throw on an IntentService thread . IntentService has always been a bastard child in the sense that it is a Looper thread , but is not meant to be used as such , since the looping is just used to process the queue of jobs . - All logic around the auto-refresh feature has also been moved to the HandlerController instead of being scattered all over the place . - ` RunTestInLooperThread ` have been extended so it is now possible to define the name of the worker thread .
Check transaction state for buld insertion __EoT__ - Throws if they are not called in a transaction . - Test cases for buld insertion thread checking . - Lint warnings fix . Close # 3173
Fix some issues regarding Jenkinsfile and master __EoT__ Handle Bintray credentials and the monitoring of metrics
More GCed ref for flaky test __EoT__ None
Upgrading to core 1.2.0 . __EoT__ - Upgrading to core 1.2.0 . - Forward porting the pre-1.1.2 sort order . - Adding a microbenchmark of ` RealmResults.sort ( ) ` . By implementing string comparison for ` RealmResults.sort ( ) ` performance is degraded 20-30 per cent . @ realm/java
Avoid Table.nativeToString/nativeRowToString __EoT__ Table : :row_to_string Table : :to_string are for debugging purpose only , it calls string : :substr which might truncate an UTF-8 string at any char . Thus a crash could happend in JNI when converting to UTF-16 . This will only happen when user attach a debugger and the debugger is trying to call Table.toString . Close # 2429
Fixing many minor things . __EoT__ @ realm/java
Print path info of File : :AccessError __EoT__
Java doc for RealmResults.sort __EoT__ Close # 2710 .
Add bullet to changelog about behavior change of refresh ( ) method on Looper thread __EoT__ refs # 2681 @ realm/java
Make all methods on RealmObject and all classes in public API final __EoT__ Part of # 1594 . Merge all together in one release . @ realm/java # # Final commit note : Title : Make all methods on RealmObject and all classes in public API final We should mark all methods that should not be overridden final . We should mark all classes that should not be inherited final .
Handle PK when calling RealmSchema 's remove/rename __EoT__ - RealmSchema.remove ( ) should remove the field from PK table . - RealmSchema.rename ( ) should change the corresponding row in the PK table . Fix # 2555
Interface as supplement to extending RealmObject __EoT__ fixes # 2347 No visible performance hit according to the test I 've done ! [ image ] ( https : //cloud.githubusercontent.com/assets/1793238/14580839/dfa8e08e-03db-11e6-9a10-f89f58d95ccf.png ) _Test consist on inserting 100 objects ( ` extends RealmObject ` ) using ` realm.createObject ( AllTypes.class ) ` for ` master ` branch & 100 objects ( ` AllTypesPojo implements RealmModel ` ) for ` cm/realmmodel ` branch_
Add a test to verify that instance methods can be used in constructors __EoT__ @ realm/java
Nh/lint/grid view example __EoT__
Realm isClosed method __EoT__ Hi , i noticed there is no method to check my Realm instance is still open/valid . There is no problem when i have RealmObject somewhere because it have `` isValid '' method so i can call that . But if i have RealmResults or RealmList this validation is not available . Possible associate with https : //github.com/realm/realm-java/issues/697
Different instances with same configuration & different thread return same handler __EoT__ Different instances of Realm sharing the same configuration living in different threads should have different handlers
Document that Realm.deleteRealmFile ( ... ) can throw IllegalStateException __EoT__ Javadoc does not specify that ` Realm.deleteRealmFile ( ... ) ` throws IllegalStateException if target realm is not closed .
Brings back relative width in trace query screen __EoT__ This fixes a bug in the trace query screen and reorganizes code to more easily tell which screens need which data from the trace summary . Before : < img width= '' 1007 '' alt= '' screen shot 2018-11-01 at 4 56 19 pm '' src= '' https : //user-images.githubusercontent.com/64215/47840504-cf574b80-ddf9-11e8-8b6f-06c1198d6c53.png '' > After : < img width= '' 980 '' alt= '' screen shot 2018-11-01 at 4 55 35 pm '' src= '' https : //user-images.githubusercontent.com/64215/47840510-d41bff80-ddf9-11e8-9629-7eea8bff30d4.png '' >
Reverts skew `` uncorrection '' in index as it affects service percentages __EoT__ In # 2228 my assumption was incorrect as @ tacigar highlighted . This makes a test to ensure the logic stays the same for now .
Bump Mockito to version 2.22.0 __EoT__
Bump Assertj to version 3.11.1 __EoT__
Fixes UI to not show 0 % when all services are selected __EoT__ ! [ screen shot 2561-09-27 at 11 02 36 ] ( https : //user-images.githubusercontent.com/4723376/46122862-4ae73b00-c245-11e8-8667-b3a2b7d9b93e.png )
Upgrades the UI to Bootstrap 4 __EoT__ This PR is a WIP to upgrade the Zipkin UI to bootstrap-4 . At least it will give us a sleek UI and may be a good start when we have bandwidth to rewrite the UI . I will limit the scope of this PR is only migrate to bootstrap-4 and fix minor things . TODO : * Prune unused dependencies * Fix UI glitches ! [ screen shot 2561-08-08 at 16 58 31 ] ( https : //user-images.githubusercontent.com/4723376/43833140-fd29593a-9b33-11e8-8bfb-cd621192c29f.png ) ! [ screen shot 2561-08-08 at 16 58 49 ] ( https : //user-images.githubusercontent.com/4723376/43833142-fd845cea-9b33-11e8-9ee9-9336dcf752ab.png ) ! [ screen shot 2561-08-08 at 16 58 56 ] ( https : //user-images.githubusercontent.com/4723376/43833143-fdc578a6-9b33-11e8-83bf-b27ec7026cb0.png ) ! [ screen shot 2561-08-08 at 16 59 05 ] ( https : //user-images.githubusercontent.com/4723376/43833145-fe60a9de-9b33-11e8-8fab-0e2091529aa8.png )
Removes v1 codebase __EoT__ Fixes # 2047
Index chars limit used in ES SpanConsumer is inconsistent in docs and code __EoT__ The limit checked is 255 in the [ code ] ( https : //github.com/openzipkin/zipkin/blob/fdd5c4b6344012554756daafd3841c896d1a1ec7/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java # L122 ) and 256 in the [ docs ] ( https : //github.com/openzipkin/zipkin/tree/master/zipkin-storage/elasticsearch ) .
Deprecates EnableZipkinServer to explain custom servers are unsupported __EoT__ Especially lately , we have had a large number of people having problems with unnecessarily custom servers . Some are due to not knowing Sleuth's stream server is obviated by our rabbit support . Some are due to blogs which unfortunately recommend starting Zipkin in the IDE via a custom server . Through discussion , we decided the easiest way to let users know custom servers are unsupported is by deprecation . Deprecation shows up in the IDE and will alert those doing blogs or otherwise that they are suggesting discouraged practice . It also sends a clear signal to those who need to make custom servers that while doing so is possible , it is something the customizer needs to accept support responsibility of . See https : //github.com/openzipkin/zipkin/issues/1962 # issuecomment-375872410
Updates dependency versions __EoT__
Highlight spans with errors __EoT__ - Annotations : value must be 'error' - Binary annotations : key must be 'error' - Fixes # 1140 Here 's three screenshots that illustrate the changes : Traces view ( top is transient , bottom is critical ) : ! [ traces ] ( https : //cloud.githubusercontent.com/assets/567900/16543254/88b323de-4099-11e6-8b7c-eca266a5ce74.png ) Trace view ( spans are critical , normal , critical + error annotation , transient ) : ! [ trace ] ( https : //cloud.githubusercontent.com/assets/567900/16543257/8fdc06f8-4099-11e6-9ba5-580c0eafc0d3.png ) Trace modal : ! [ trace-modal ] ( https : //cloud.githubusercontent.com/assets/567900/16543258/976f442a-4099-11e6-8d6f-4dbd0131c622.png ) And the JSON to duplicate : `` ` [ { `` annotations '' : [ { `` endpoint '' : { `` ipv4 '' : `` 10.24.23.10 '' , `` port '' : 9411 , `` serviceName '' : `` zipkin-server '' } , `` timestamp '' : 1466977002899000 , `` value '' : `` sr '' } , { `` endpoint '' : { `` ipv4 '' : `` 10.24.23.10 '' , `` port '' : 9411 , `` serviceName '' : `` zipkin-server '' } , `` timestamp '' : 1466977002908000 , `` value '' : `` ss '' } ] , `` binaryAnnotations '' :
Defines http.route key and ensures server span name is preferred __EoT__ Especially when using http route based span names , we have to be careful to not pick a bad name . In shared spans , for example , the UI prefers server-side 's name of the service . However , we have no name priority logic , so it is arbitrary . This ensures the server 's span name wins in a race . See https : //github.com/openzipkin/zipkin/blob/9bf49aa7f77ea3eea894626439a38465786e9d90/zipkin-ui/js/component_ui/traceSummary.js # L64 See https : //github.com/openzipkin/zipkin/issues/1874
Installs Cassandra UDT keyspace only when allowed __EoT__ Tested this locally to make sure we 're all good . also re-pushed the docker test image to make sure it always installs the UDT keyspace cc @ mvallebr @ llinder @ michaelsembwever
Optimizes reference count of Span and squashes an errorprone warning __EoT__ Based on https : //www.youtube.com/watch ? time_continue=2118 & v=YLTD1GBEfwo we were a bit noisy for no good reason . Thanks @ raphw for noticing This also squashes an error-prone warning , which while was n't a bug was n't worth explaining in a suppression why it was n't .
zipkin-ui : fix jumpiness on `` more info '' button __EoT__ The `` more info '' button on the span detail view is all jumpy . Upon clicking the button , the appearing table gets squished together . This happens because the ` display ` CSS property gets set to ` block ` . Where in this case it should really be ` table ` . We can avoid the issue by wrapping the table in an extra div , as the div does not mind the ` display : block ` . The clearfix ensures the table is positioned below the `` more info '' button , fixing some more jumpiness during the sliding animation . ! [ screen shot 2017-12-16 at 22 05 05 ] ( https : //user-images.githubusercontent.com/11158255/34074349-3cb0ede2-e2ad-11e7-8eda-94fe05ed7a97.png )
Special cases single-element encoded size __EoT__ This adds a utility for deriving the size of a single-element list . This allows zipkin-reporter to defer encoding off the calling thread . See https : //github.com/openzipkin/zipkin-reporter-java/pull/84
Fixes IE which ca n't use String.endsWith __EoT__ Fixes # 1824
Guard against long strings and byte arrays when encoding spans to thr… __EoT__ The intention here is to apply some of the bounds checking logic that we do on thrift decode , to the encode phase . This will prevent malformed spans ( spans containing very long strings ) from ever being written to storage in the first place .
Allows kafka overrides via properties __EoT__ Before , you could n't override with a Properties object , which is commonly used in Kafka
In Cassandra3 storage , only use consistency level LOCAL_ONE if a local_dc has been defined , otherwise use ONE __EoT__ Also… - Mark all writes as idempotent . - Update the retry policy , honouring idempotence , consistency level , and applying appropriate back-pressure .
Allows MySQL to lazy set parentId __EoT__
Fixes autowire problem caught in server integration tests __EoT__ The ` @ ConditionalOnBean ( V2StorageComponent.class ) ` was n't preventing the rest controller from being instantiated otherwise . We have an integration test to ensure that custom servers work , and this failed . This introduces a temporary hack to make read apis return 404 when storage v2 is n't supported yet . Tested manually on mysql ( not v2 native ) and elasticsearch ( v2 native ) to make sure it works . A future change will adapt old storage apis to the degree possible . This will be done later in a patch .
Fixes AWS signature which missed colon encoding __EoT__
Adds v2 SpanStore and a bridging adapter to v1 __EoT__ This represents the minimal read apis needed for Zipkin As discussed earlier on gitter w/ @ basvanbeek , we no longer do adjustment at storage layer . Essentially , all operations are `` raw '' , which reduces the responsibility of implementors . This also midly changes the ` getTrace ` call , disallowing it from returning null ( as empty will suffice ) . This adds SpanStore which returns Call objects as opposed to replicating signatures for synchronous and asynchronous invocations . Unlike before , this does not support `` adjustments '' rather assumes they happen at a layer above storage . This decision refines the storage query api to the following : `` ` java Call < List < List < Span > > > getTraces ( QueryRequest request ) ; Call < List < Span > > getTrace ( long traceIdHigh , long traceIdLow ) ; Call < List < String > > getServiceNames ( ) ; Call < List < String > > getSpanNames ( String serviceName ) ; Call < List < DependencyLink > > getDependencies ( long endTs , long lookback ) ; ``
Removes old nullable annotation and fixes problems caught with analyzer __EoT__ This ca n't break anything at runtime because the nullable annotation removed was source retention . This makes Intellij Nullable analysis possible .
Version updates , notably spring boot and AWS sdk __EoT__
Infers type from core annotations __EoT__
Do n't use strict ID when processing dependency links ( in-memory ) __EoT__ The existing code inadvertently used strict trace IDs when looking up dependency link spans . This caused me a lot of head scratching when trying to figure out why later refactoring caused multiple links on a mixed trace .
In UI , show nothing instead of 'NaN ' for null duration __EoT__ This fixes # 1575 for me . The case where I was seeing NaN was when I had a span with two annotations with the same timestamp , like SR/SS bot at the exact same time . In this case , the server was returning a span with no duration field , so Javascript sees it as undefined .
Adding ability to listen to multiple kafka10 topics via comma separated list __EoT__ Useful for cases like span info from different environments coming from different topics , etc .
Escape HTML input __EoT__ This should fix # 1623 . Actually I have n't tried running this patch myself , I just did it in GitHub 's in-browser code editor . But I think it works .
Adds the ability to log http requests sent to Elasticsearch __EoT__ This is helpful when troubleshooting . Ex . `` ` bash STORAGE_TYPE=elasticsearch ES_HTTP_LOGGING=BASIC java -jar ./zipkin-server/target/zipkin-server-*exec.jar `` ` `` ` 2017-05-15 23:05:10.600 INFO 78150 -- - [ alhost:9200/ ... ] z.s.e.http.ElasticsearchHttpStorage : -- > GET http : //localhost:9200/ http/1.1 2017-05-15 23:05:10.617 INFO 78150 -- - [ alhost:9200/ ... ] z.s.e.http.ElasticsearchHttpStorage : < -- 200 OK http : //localhost:9200/ ( 16ms , unknown-length body ) 2017-05-15 23:05:10.624 INFO 78150 -- - [ alhost:9200/ ... ] z.s.e.http.ElasticsearchHttpStorage : -- > GET http : //localhost:9200/_template/zipkin_template http/1.1 2017-05-15 23:05:10.626 INFO 78150 -- - [ alhost:9200/ ... ] z.s.e.http.ElasticsearchHttpStorage : < -- 200 OK http : //localhost:9200/_template/zipkin_template ( 1ms , unknown-length body ) 2017-05-15 23:05:10.635 INFO 78150 -- - [ alhost:9200/ ... ] z.s.e.http.ElasticsearchHttpStorage : -- > POST http : //localhost:9200/_bulk http/1.1 ( 1756-byte body ) 2017-05-15 23:05:10.640 INFO 78150 -- - [ alhost:9200/ ... ] z.s.e.http.ElasticsearchHttpStorage : < -- 200 OK http : //localhost:9200/_bulk ( 4ms , unknown-length body ) `` `
Considers the translated table name in MySQL health checks __EoT__ Before , we did n't look for non-default schema . Now we do . Fixes # 1592
Decouples zipkin-elasticsearch-http from Elasticsearch 2.x libraries __EoT__ Formerly , the http Elasticsearch module had a hard dependency on Elasticsearch 2.x libraries . This was simply work left unfinished , as the effort to completely decouple was high . This change completes the separation of the http elasticsearch code from the prior codebase . You can now drop in ` ElasticsearchHttpStorage ` where you previously used ` ElasticsearchStorage ` . You can now use Elasticsearch without a guava or native library dependency . Server dependencies and default configuration are left unaffected except that there is no more sharing between the auto-configuration classes of the native transport vs the http transport . This means that if you make a custom server with ` zipkin-autoconfigure-storage-elasticsearch-http ` , you wo n't transitively pull in Guava or Elasticsearch 2.x libraries . The old ` HttpClientBuilder ` is now deprecated and as mentioned above , no longer used . Until it is removed , there is an optional dependency on the native code in ` zipkin-storage-elasticsearch-http ` . Beyond clutter , and increasing test duration , there 's little impact to this . Fixes # 1431
Supports backfilling timestamp for one-way spans __EoT__ Before , we only supported backfilling timestamp and duration for spans that have at least two annotations . This special cases an incomplete one-way span ( ex only cs ) , by adding its timestamp . This prevents the UI from crashing . See # 1243
Clock skew correction is now applied . __EoT__ When traces begin by SR-SS , clock skew correction was n't applied .
Do n't spam logs when RPC spans are in use . __EoT__ As mentionned in openzipkin/openzipkin.github.io # 49 , timestamp should be set on span originators . In the case of a span sent from a mid-tier server ( e.g . receiving a request from a instrumented service ) , it is not supposed to set the timestamp , leading to a log message when using cassandra as storage . This log can be only wrote when the span is an originator . It is still trying to guess the correct timestamp to cope with non-compliant tracers .
allow escape key to close modal dialogs __EoT__ An `` x '' button is also added to the dependency modals which inconsistently lacked one . On this `` tabindex '' thing : http : //stackoverflow.com/a/32912224 ref # 1277
Allows arbitrary overriding of Kafka consumer properties __EoT__ You may need to override other consumer properties than what zipkin explicitly defines . In such case , you need to prefix that property name with `` zipkin.collector.kafka.overrides '' and pass it as a CLI argument or system property . For example , to override `` overrides.auto.offset.reset '' , you can set a prefixed system property : `` ` bash $ KAFKA_ZOOKEEPER=127.0.0.1:2181 java -Dzipkin.collector.kafka.overrides.auto.offset.reset=largest -jar zipkin.jar `` ` Fixes # 1427
Adds better error message when a binary annotation key or value is unset __EoT__ When people are making instrumentation , they could accidentally leave data missing . This gives a contextual error message of which binary annotation was malformed .
Supports querying traces with mixed-length trace IDs __EoT__ Unless you only issue 128-bit traces when all applications support them , the process of updating applications from 64 to 128-bit trace IDs results in a mixed state . This mixed state is mitigated by the setting ` STRICT_TRACE_ID=false ` , explained below . Once a migration is complete , remove the setting ` STRICT_TRACE_ID=false ` or set it to true . Supporting changes are : ` SpanStore.getTrace ( long traceIdHigh , long traceIdLow ) ` ` StorageComponent.Builder.strictTraceId ( boolean strictTraceId ) `
Reduces differences between Elasticsearch 2.x and 5 __EoT__ Elasticsearch 2.x supports an alias of zero for max int whereas ES 5 does not . Also , we are needlessly converting in and out of strings . See # 1312
Fixes build by unhooking snapshot dep __EoT__
Tolerate 128bit ids in json and http api by throwing out high bits __EoT__ This bridges support for 128bit trace ids by not failing on their receipt . Basically , this throws out any hex characters to the left of the 16 needed for the 64bit trace id . See # 1262
Adds notes on compatibility with Cassandra 2.1 __EoT__
Build , publish using CircleCI __EoT__ _openzipkin/zipkin on CircleCI_ : https : //circleci.com/gh/openzipkin/zipkin Why : https : //github.com/openzipkin/zipkin/issues/1237 # # Points of interest - Support for the test-runtime-based balancing of tests CircleCI does for running tests in parallel - Caching the ` node_modules ` dir of ` zipkin-ui ` saves around 90 seconds - Overall build time is around 6-7 minutes ( about half of that on Travis ) - Release process drafted in # 1250 , still needs thinking .
Enable Cross-Origin requests on /api/v1 __EoT__ Closes # 1135 ( unless , of course , I totally misunderstood the issue 😃 )
Reduces the core jar from 272 to 188k by tuning codec and shade __EoT__ Before , we used more reflection than necessary in codec . This implied use of larger and more classes than we actually need . By slightly changing codec , and manually controlling shade , we dropped the jar size by 45 % .
Add Zipkin version to the /info endpoint __EoT__ In order to easily identify the version deployed and running , this exposes the Zipkin version from the /info endpoint . Related to # 1208 /cc @ dragontree101 Before : `` ` bash curl -s http : //localhost:9411/info | jq . { } `` ` Since we can add arbitrary properties to expose on the ` /info ` endpoint through configuration , including Maven variables ( with Maven resource filtering ) , this pull request does the following . `` ` yaml info : zipkin : version : `` @ project.version @ '' `` ` Which would show up in the ` /info ` endpoint as : `` ` json { `` zipkin '' : { `` version '' : `` 1.6.1-SNAPSHOT '' } } `` ` See [ this section ] ( http : //docs.spring.io/spring-boot/docs/1.4.0.RELEASE/reference/htmlsingle/ # production-ready-application-info ) of the Spring Boot documentation regarding this and related feature .
Updates versions , most notably spring boot 1.4 __EoT__
Documents the new ERROR annotation __EoT__ See https : //github.com/openzipkin/zipkin-api/pull/18 See https : //github.com/openzipkin/openzipkin.github.io/issues/36 See https : //github.com/openzipkin/zipkin/issues/1140
Adds properties that affect Elasticsearch index scalability __EoT__ This adds the following properties , which help control the scalability of Zipkin 's index in Elasticsearch . `` ` * ` ES_INDEX_SHARDS ` : The number of shards to split the index into . Each shard and its replicas are assigned to a machine in the cluster . Increasing the number of shards and machines in the cluster will improve read and write performance . Number of shards can not be changed for existing indices , but new daily indices will pick up changes to the setting . Defaults to 5 . * ` ES_INDEX_REPLICAS ` : The number of replica copies of each shard in the index . Each shard and its replicas are assigned to a machine in the cluster . Increasing the number of replicas and machines in the cluster will improve read performance , but not write performance . Number of replicas can be changed for existing indices . Defaults to 1 . It is highly discouraged to set this to 0 as it would mean a machine failure results in data loss . `` `
Re-open : GZIP content not inflated __EoT__ I encounter exactly the same problem as described in https : //github.com/loopj/android-async-http/issues/641 using version 1.4.8 This is caused by a bug in < code > com.loopj.android.http.AsyncHttpClient # isInputStreamGZIPCompressed < /code > : in the statement < code > int readStatus = inputStream.read ( signature ) ; < /code > where < code > signature < /code > might only be partially filled ( see javadoc http : //docs.oracle.com/javase/7/docs/api/java/io/PushbackInputStream.html # read ( byte [ ] , % 20int , % 20int ) Should check the returned byte count and re-read to fetch the 2nd byte if necessary
URL Encode didnt work __EoT__ I am trying make Http.Get with this URL : http : //enrique.elipse.com.br:8080/api/screen/ [ New page ... ] The function `` getUrlWithQueryString '' try encoding by the way `` hardcoded '' and changes url to : http : //enrique.elipse.com.br:8080/api/screen/ [ New % 20page ... ] But this didnt work . Throws the exception : java.lang.IllegalArgumentException : Illegal character in path at index 45 Why dont use `` URLEncoder.encode ( `` [ New % 20page ... ] '' , `` UTF-8 '' ) '' ? ? ? ? This function is pattern of android .
Update SyncHttpClient.java __EoT__ Fix RangeFileAsyncHttpResponseHandler unuseful with SyncHttpClient .
RequestParams NotSerializableException __EoT__ using jobqueue ( https : //github.com/path/android-priority-jobqueue ) , new job ( RequestParams params ) , throw this NotSerializableException . < code > 08-18 18:57:14.028 : E/JOBS ( 7419 ) : error while serializing object PostRequestJob 08-18 18:57:14.028 : E/JOBS ( 7419 ) : java.io.NotSerializableException : com.loopj.android.http.RequestParams ... < /code > ps : i temporarily remove .persist ( ) of configuration , run it ok .
Add 'final ' where applicable . __EoT__
BugFix : https : //github.com/loopj/android-async-http/issues/486 __EoT__ bugreport > > # 486 Just Test Like the code In GetSample.java `` ` @ Override protected void executeSample ( AsyncHttpClient client , String URL , Header [ ] headers , HttpEntity entity , AsyncHttpResponseHandler responseHandler ) { Header header = new BasicHeader ( `` Authorization '' , `` basic c2piX29mZmxpbmVtYXA6Om9mZmxpbmVtYXA= '' ) ; client.addHeader ( `` Authorization '' , `` basic c2piX29mZmxpbmVtYXA6Om9mZmxpbmVtYXA= '' ) ; client.get ( this , URL , new Header [ ] { header } , null , responseHandler ) ; } `` `
Are http connections reused by default ? __EoT__ Server is sending `` Connection : keepalive '' , still a new connection is being opened on every request . Do I need to do change some setting for this ?
Time out error __EoT__ when connection time out happened , ` onFailure ( int statusCode , Header [ ] headers , byte [ ] responseBody , Throwable error ) ` method fired and error occuer . suggest : change UnsupportedEncodingException to Exception
NPE in HTTPResponseHandler __EoT__ just pulled down the latest this morning and it is n't usable for me ... getting this error in all implementations of the library . going to try the sample now . `` ` java FATAL EXCEPTION : main java.lang.NullPointerException at java.lang.String. < init > ( String.java:276 ) at com.loopj.android.http.AsyncHttpResponseHandler.onSuccess ( AsyncHttpResponseHandler.java:225 ) at com.loopj.android.http.AsyncHttpResponseHandler.handleMessage ( AsyncHttpResponseHandler.java:347 ) at com.loopj.android.http.AsyncHttpResponseHandler $ ResponderHandler.handleMessage ( AsyncHttpResponseHandler.java:113 ) at android.os.Handler.dispatchMessage ( Handler.java:99 ) at android.os.Looper.loop ( Looper.java:130 ) at android.app.ActivityThread.main ( ActivityThread.java:3806 ) at java.lang.reflect.Method.invokeNative ( Native Method ) at java.lang.reflect.Method.invoke ( Method.java:507 ) at com.android.internal.os.ZygoteInit $ MethodAndArgsCaller.run ( ZygoteInit.java:839 ) at com.android.internal.os.ZygoteInit.main ( ZygoteInit.java:597 ) at dalvik.system.NativeStart.main ( Native Method ) `` `
Escape URLs __EoT__ I found out the hard way ( user crashes ) that URLs are not being escaped by the library . It would seem to me that this is a no brainer , but you guys may have reasons to not have done it . In case you think this is a good idea , here is a snippet we 're using to do the job - of course copied from [ stackoverflow ] ( http : //stackoverflow.com/questions/3286067/url-encoding-in-android ) `` ` java URL url = new URL ( urlString ) ; URI uri = new URI ( url.getProtocol ( ) , url.getUserInfo ( ) , url.getHost ( ) , url.getPort ( ) , url.getPath ( ) , url.getQuery ( ) , url.getRef ( ) ) ; url = uri.toURL ( ) ; client.get ( url.toString ( ) , params , responseHandler ) ; `` `
java.lang.Throwable : Explicit termination method 'end ' not called __EoT__ `` ` ERROR/StrictMode ( 11328 ) : A resource was acquired at attached stack trace but never released . See java.io.Closeable for information on avoiding resource leaks . java.lang.Throwable : Explicit termination method 'end ' not called at dalvik.system.CloseGuard.open ( CloseGuard.java:184 ) at java.util.zip.Inflater. < init > ( Inflater.java:82 ) at java.util.zip.GZIPInputStream. < init > ( GZIPInputStream.java:96 ) at java.util.zip.GZIPInputStream. < init > ( GZIPInputStream.java:81 ) at com.loopj.android.http.AsyncHttpClient $ InflatingEntity.getContent ( AsyncHttpClient.java:610 ) at org.apache.http.conn.BasicManagedEntity.getContent ( BasicManagedEntity.java:100 ) at org.apache.http.util.EntityUtils.toByteArray ( EntityUtils.java:64 ) at org.apache.http.entity.BufferedHttpEntity. < init > ( BufferedHttpEntity.java:62 ) at com.loopj.android.http.AsyncHttpResponseHandler.sendResponseMessage ( AsyncHttpResponseHandler.java:227 ) at com.loopj.android.http.AsyncHttpRequest.makeRequest ( AsyncHttpRequest.java:79 ) at com.loopj.android.http.AsyncHttpRequest.makeRequestWithRetries ( AsyncHttpRequest.java:95 ) at com.loopj.android.http.AsyncHttpRequest.run ( AsyncHttpRequest.java:57 ) at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:390 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:234 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1080 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:573 ) at java.lang.Thread.run ( Thread.java:856 ) `` `
In order to use the async in Android test cases __EoT__ In order to use the async in Android test cases `` ` public class SongAPITest extends InstrumentationTestCase { private String TAG = `` OMusicSongAPITest '' ; public void getRecommendSongs ( ) throws Throwable { final CountDownLatch signal = new CountDownLatch ( 1 ) ; runTestOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { OMusicApiService.getInstance ( ) .getRecommendSongs ( 1 , `` '' , new RecommendSongsHandler ( ) { @ Override public void onSuccess ( RecommendSongs recommendSongs ) { Log.v ( TAG , `` success '' ) ; ArrayList < Song > songs = recommendSongs.songs ; if ( ! songs.isEmpty ( ) ) { for ( Song song : songs ) { Log.v ( TAG , `` songname : `` + song.toString ( ) ) ; } } } @ Override public void onFailure ( Throwable error , String content ) { Log.e ( TAG , `` error : '' + error.toString ( ) ) ; } @ Override public void onFinish ( ) { Log.v ( TAG , `` onFinish '' ) ; signal.countDown ( ) ; } @ Override public void onStart
few automatic code refactoring/cleanup __EoT__ replace String.indexOf ( ) with contains ( ) Remove unnecessary boxing , unboxing Replace StringBuffer with StringBuilder where applicable Removed an unnecessary ; in SyncHttpClient
Callback onFailure ( ) does not call after SocketTimeoutException __EoT__ Callback onFailure ( ) does not call after SocketTimeoutException java.net.SocketTimeoutException : Read timed out at org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_read ( Native Method ) at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl $ SSLInputStream.read ( OpenSSLSocketImpl.java:788 ) at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer ( AbstractSessionInputBuffer.java:103 ) at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine ( AbstractSessionInputBuffer.java:191 ) at org.apache.http.impl.conn.DefaultResponseParser.parseHead ( DefaultResponseParser.java:82 ) at org.apache.http.impl.io.AbstractMessageParser.parse ( AbstractMessageParser.java:174 ) at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader ( AbstractHttpClientConnection.java:179 ) at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader ( DefaultClientConnection.java:235 ) at org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader ( AbstractClientConnAdapter.java:259 ) at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse ( HttpRequestExecutor.java:279 ) at org.apache.http.protocol.HttpRequestExecutor.execute ( HttpRequestExecutor.java:121 ) at org.apache.http.impl.client.DefaultRequestDirector.execute ( DefaultRequestDirector.java:421 ) at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:555 ) at org.apache.http.impl.client.AbstractHttpClient.execute ( AbstractHttpClient.java:487 ) at com.loopj.android.http.AsyncHttpRequest.makeRequest ( AsyncHttpRequest.java:74 ) at com.loopj.android.http.AsyncHttpRequest.makeRequestWithRetries ( AsyncHttpRequest.java:93 ) at com.loopj.android.http.AsyncHttpRequest.run ( AsyncHttpRequest.java:55 ) at java.util.concurrent.Executors $ RunnableAdapter.call ( Executors.java:444 ) at java.util.concurrent.FutureTask $ Sync.innerRun ( FutureTask.java:306 ) at java.util.concurrent.FutureTask.run ( FutureTask.java:138 ) at java.util.concurrent.ThreadPoolExecutor.runWorker ( ThreadPoolExecutor.java:1088 ) at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:581 ) at java.lang.Thread.run ( Thread.java:1019 )
bump okhttp3 to 3.11.0 __EoT__ # # Motivation ( required ) Bumps OkHTTP3 version to 3.11.0 or latest . # # Test Plan ( required ) Tests are passing . No change in code and tests .
Libjpeg update to 1.5.3 __EoT__ # # Motivation The libjpeg-turbo version currently distributed with Fresco has major security issues . For instance this one : https : //nvd.nist.gov/vuln/detail/CVE-2016-3616 There are more issues marked as fixed , this one has a HIGH severity rating . # # Test Plan ( required ) Run unit tests .
libpng updated to 1.6.35 . __EoT__ Last changes to the library dated by mid of Jul 2018 . The previous version of libpng has various security issues . # # Motivation Fresco distributes a pretty old version of libpng with a huge list of different security flaws : https : //nvd.nist.gov/vuln/detail/CVE-2016-3751 https : //nvd.nist.gov/vuln/detail/CVE-2016-10087 https : //nvd.nist.gov/vuln/detail/CVE-2015-8540 https : //nvd.nist.gov/vuln/detail/CVE-2015-8472 https : //nvd.nist.gov/vuln/detail/CVE-2015-8126 https : //nvd.nist.gov/vuln/detail/CVE-2015-7981 https : //nvd.nist.gov/vuln/detail/CVE-2015-0973 https : //nvd.nist.gov/vuln/detail/CVE-2014-9495 https : //nvd.nist.gov/vuln/detail/CVE-2014-0333 https : //nvd.nist.gov/vuln/detail/CVE-2013-7354 https : //nvd.nist.gov/vuln/detail/CVE-2013-7353 https : //nvd.nist.gov/vuln/detail/CVE-2013-6954 https : //nvd.nist.gov/vuln/detail/CVE-2012-3425 https : //nvd.nist.gov/vuln/detail/CVE-2011-3464 https : //nvd.nist.gov/vuln/detail/CVE-2011-3328 https : //nvd.nist.gov/vuln/detail/CVE-2011-3048 https : //nvd.nist.gov/vuln/detail/CVE-2011-3026 https : //nvd.nist.gov/vuln/detail/CVE-2011-2692 https : //nvd.nist.gov/vuln/detail/CVE-2011-2691 https : //nvd.nist.gov/vuln/detail/CVE-2011-2690 https : //nvd.nist.gov/vuln/detail/CVE-2011-2501 https : //nvd.nist.gov/vuln/detail/CVE-2011-0408 https : //nvd.nist.gov/vuln/detail/CVE-2010-2249 https : //nvd.nist.gov/vuln/detail/CVE-2010-1205 https : //nvd.nist.gov/vuln/detail/CVE-2010-0205 # # Test Plan ( required ) Run unit tests . Validate that all platforms work correctly .
Fix the way /proc/net/unix is being parsed __EoT__ dumpapp stopped working for me because /proc/net/unix has two spaces to separate state from inode when the inode length is less than the maximum inode length ( 123 vs 1234 ) . E.g . : `` ` 00000000 : 00000002 00000000 00010000 0001 01 76292 /dev/socket/cryptd 00000000 : 00000002 00000000 00010000 0001 01 3836 @ stetho_com.facebook.wakizashi_devtools_remote `` ` We should be parsing this with ` \s+ ` and not a simple space since the output date is a table that is formatted to look like columns in the print out . I tested this by running dumpapp in a situation like the one mentioned above .
修复文件大小显示问题 __EoT__ 字节的进制应该是1024
Adedd Glow to status bar handler press state __EoT__ Added glow effect to press state for drag handler image
Update build tools in travis config . __EoT__ - Use latest available SDK 24 emulator , as tests with generated sources are broken on SDK 19 emulator ( ` IllegalAccessError ` ) . - Update to v25 build tools . - Simplify some commands ( emulator script is now built-in , Gradle properly supported ) . Source : https : //github.com/googlemaps/android-maps-utils/blob/master/.travis.yml
@ Service注解中的interfaceName属性与ServiceConfig中的的属性名（interface）不一致导致无法启动 __EoT__ - [ x ] I have searched the [ issues ] ( https : //github.com/apache/incubator-dubbo/issues ) of this repository and believe that this is not a duplicate . - [ ] I have checked the [ FAQ ] ( https : //github.com/apache/incubator-dubbo/blob/master/FAQ.md ) of this repository and believe that this is not a duplicate . # # # Environment * Dubbo version : 2.6.2 * Operating System version : win7 * Java version : 1.8 @ Service注解中的interfaceName属性与ServiceConfig中的的属性名（interface）不一致，导致设置 @ Service注解的interfaceName属性时，找不到相应的setter方法，会报错无法启动服务 : `` ` org.springframework.beans.factory.BeanCreationException : Error creating bean with name 'ServiceBean : myGenericService : com.alibaba.dubbo.rpc.service.GenericService : $ { demo.service.version } ' : Error setting property values ; nested exception is org.springframework.beans.NotWritablePropertyException : Invalid property 'interfaceName ' of bean class [ com.alibaba.dubbo.config.spring.ServiceBean ] : Bean property 'interfaceName ' is not writable or has an invalid setter method . Does the parameter type of the setter match the return type of the getter ? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues ( AbstractAutowireCapableBeanFactory.java:1648 ) ~ [ spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE ] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean ( AbstractAutowireCapableBeanFactory.java:1363 ) ~ [ spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE ] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean ( AbstractAutowireCapableBeanFactory.java:580 ) ~ [ spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE ] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean ( AbstractAutowireCapableBeanFactory.java:503 ) ~ [ spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE ] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda $ doGetBean $ 0 ( AbstractBeanFactory.java:317 ) ~
[ Dubbo-2578 ] Smooth Round Robin selection __EoT__ # # What is the purpose of the change The ` Round Robin ` balancer is not smooth with weights , such as : A : B : C = 1:2:3 Will be : [ A , B , B , C , C , C , A , B , B , C , C , C , A , B , B , C , C , C , ... ... ... . ] But we want it to be : [ A , B , C , B , C , C , A , B , C , B , C , C , A , B , C , B , C , C , ... ... ... . ] which has been discuss before for performance : # 2578 # # Brief changelog reimplement ` RoundRobinLoadBalance ` and its unit test . # # Verifying this change We will get more strictly balance result in unit test . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https :
Optimize ut for serialization model . __EoT__ 1 . Integrate the unit test of the serialization module , code reuse . 2 . Remove redundant unit tests and pojo classes . 3 . Remove the useless pojo class in the common module . related issue : https : //github.com/apache/incubator-dubbo/issues/2623
Fix incorrect descriptions for dubbo-serialization module . __EoT__ Fix incorrect descriptions for dubbo-serialization module . Simple fix which does n't need test .
Fixed a minor issue with doConnect not using getConnectTimeout ( ) in NettyClient __EoT__ # # What is the purpose of the change Fixed a minor issue with doConnect not using getConnectTimeout ( ) in NettyClient Fix the minor problem that doConnect does not use getConnectTimeout ( ) in NettyClient to ensure that the connection timeout is consistent with the contents of the log output below . ( I found a minor problem with the latest dubbo version when upgrading netty3 for dubbo-2.5.3 used inside the company to netty4 . ) Fixed some problems with connectTimeout , CONNECT_TIMEOUT_KEY , timeout , and TIMEOUT_KEY being used incorrectly .
使用域名指向注册中心集群导致的单点问题 __EoT__ - [ x ] I have searched the [ issues ] ( https : //github.com/apache/incubator-dubbo/issues ) of this repository and believe that this is not a duplicate . - [ x ] I have checked the [ FAQ ] ( https : //github.com/apache/incubator-dubbo/blob/master/FAQ.md ) of this repository and believe that this is not a duplicate . # # # Environment * Dubbo version : 2.6.2 * 域名解析示例： 10.0.0.1 zk.foo.com 10.0.0.2 zk.foo.com 10.0.0.3 zk.foo.com 10.0.0.4 zk.foo.com 10.0.0.5 zk.foo.com * 注册中心：zookeeper 在生产环境中要求只能使用域名，注册中心的域名解析如示例中所示，Dubbo框架在创建注册中心时，会对域名进行解析，且只取其中一个IP，这会导致每次解析获得的IP有可能不一样，有可能出现如下问题： 1、解析获取到不一样的IP的时候，会再次创建一个注册中心实例，导致和注册中心建立多个连接。 2、如果始终解析到的是一个IP，如果该注册中心节点不可以，zookeeper客户端也没有可重试的IP，那么会导致应用与注册中心的会话失效，导致临时服务节点被删除。 下面是获取注册中心Key的代码 : https : //github.com/apache/incubator-dubbo/blob/e6b0bc8a856abd7f2d7a2e0f06ccc78dc90e2e0a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java # L88 就是在该方法中将域名解析成单一的IP，是否可以考虑将该实现换成不解析域名的方法： https : //github.com/apache/incubator-dubbo/blob/7a48fac84b14ac6a21c1bdfc5958705dd8dda84d/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java # L498-L500 将域名解析的任务交给zookeeper客户端完成，zookeeper客户端默认会将域名解析成IP列表。
Optimization unnecessary unboxing 'b.booleanValue ( ) ' and Remove invalid throws java.lang.Exception __EoT__ 1 . Optimization unnecessary unboxing 'b.booleanValue ( ) ' 2 . Remove invalid throws java.lang.Exception
Condition applicationContext ! = null is always true __EoT__ Remove invalid judgement .
[ Dubbo-2471 ] Fix invalid name issue in web-fragment.xml __EoT__ # # What is the purpose of the change Per xsd , web fragment 's name should be a valid java identifier ( can have a underscore but not a hyphen ) . # # Brief changelog change ` - ` to ` _ ` in name element in web-fragment.xml . # # Verifying this change n.a . Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull
PojoUtil realize type convert not support subclasses of 'java.util.date ' __EoT__ - [ x ] I have searched the [ issues ] ( https : //github.com/apache/incubator-dubbo/issues ) of this repository and believe that this is not a duplicate . - [ x ] I have checked the [ FAQ ] ( https : //github.com/apache/incubator-dubbo/blob/master/FAQ.md ) of this repository and believe that this is not a duplicate . # # # Environment * Dubbo version : 2.5.x , 2.6.x * Operating System version : windows 7 * Java version : jdk1.7 , jdk1.8 # # # Steps to reproduce this issue 1 . String convert to java.sql.Time 2 . String convert to java.sql.Date 3 . String convert to java.sql.Timestamp # # # Expected Result The Convert is successful and you can get the object of the converted type . # # # Actual Result Conversion failed . When the interface is called by 'jmeter-plugin-dubbo ' , it is passed into the hashmap through a generalization call . The value in the hashmap is a Date string , and an error occurred when the server accepts a type of java.sql.timestamp |Date If there is an exception , please attach the exception trace
Optimize init loadbalance . __EoT__ Optimize init loadbalance before 'doSelect ' method called Part of this pr : https : //github.com/apache/incubator-dubbo/pull/2156
Unit Test for dubbo-registry/dubbo-registry-api __EoT__ Sub-task of # 1690
Proposal for deprecated o.a.d.c.extension.Activate # before and # after __EoT__ I 've checked the whole source code , these two methods have n't be used . Instead , # order is used more frequent . More important , use these two properties for sorting is not correct . There has a issue and PR about it . See https : //github.com/apache/incubator-dubbo/issues/1926 and https : //github.com/apache/incubator-dubbo/pull/639 So , I suggest deprecating these two method on annotation Activate .
[ BUG ] Miss context path when export a rest service explicitly __EoT__ - [ x ] I have searched the [ issues ] ( https : //github.com/apache/incubator-dubbo/issues ) of this repository and believe that this is not a duplicate . - [ x ] I have checked the [ FAQ ] ( https : //github.com/apache/incubator-dubbo/wiki/FAQ ) of this repository and believe that this is not a duplicate . # # # Environment * Dubbo version : latest # # # Step to reproduce this issue 1. export a rest service DemoService with a url : rest : //127.0.0.1:4444/test/ 2. then we will get a real rest service with rest : //127.0.0.1:4444/test/DemoService 3. but when we export a rest service DemoService with a url : rest : //127.0.0.1:4444/test 4. then we will get a real rest service with rest : //127.0.0.1:4444/DemoService Those are the different results , in the second case the context path test is missing . So users use explicit exporter and invoker to call rest services , they would feel puzzled . We should fix it by modifying getContextPath method .
[ dubbo-1689 ] : Enhance the test coverage part-10 : dubbo-plugin module __EoT__ # # What is the purpose of the change issue # 1689 : Enhance the test coverage part-10 : dubbo-plugin module # # Brief changelog dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/LocalHostPermitHandlerTest.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock
Add compatible module and rename groupId to org.apache.dubbo __EoT__ # # What is the purpose of the change Add compatible module and rename groupId to org.apache.dubbo # # Brief changelog 1 . Add single module named `` dubbo-compatible '' , and support limited old extension , such Filter . 2. rename groupId to org.apache.dubbo # # Verifying this change All unit cases are pass Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how
reformat the code style __EoT__ # # What is the purpose of the change reformat the code style for qos module # # Brief changelog # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or significant change
here is a StackOverflow bug ? dubbo version 2.5.9 , FailsafeLogger.appendContextMessage ( ) > NetUtils.getLocalAddress ( ) __EoT__ ` 2018-03-07 22:24:52 Full thread dump Java HotSpot ( TM ) 64-Bit Server VM ( 24.75-b04 mixed mode ) : '' pool-2-thread-1 '' prio=10 tid=0x00007f24402a1000 nid=0x36bd in Object.wait ( ) [ 0x00007f247a161000 ] java.lang.Thread.State : WAITING ( on object monitor ) at java.lang.Object.wait ( Native Method ) - waiting on < 0x0000000742ca3ab8 > ( a java.util.HashMap ) at java.lang.Object.wait ( Object.java:503 ) at java.net.InetAddress.checkLookupTable ( InetAddress.java:1363 ) - locked < 0x0000000742ca3ab8 > ( a java.util.HashMap ) at java.net.InetAddress.getAddressesFromNameService ( InetAddress.java:1280 ) at java.net.InetAddress.getLocalHost ( InetAddress.java:1469 ) - locked < 0x0000000742ca3aa8 > ( a java.lang.Object ) at com.alibaba.dubbo.common.utils.NetUtils.getLocalAddress0 ( NetUtils.java:193 ) at com.alibaba.dubbo.common.utils.NetUtils.getLocalAddress ( NetUtils.java:180 ) at com.alibaba.dubbo.common.utils.NetUtils.getLogHost ( NetUtils.java:186 ) at com.alibaba.dubbo.common.logger.support.FailsafeLogger.appendContextMessage ( FailsafeLogger.java:40 ) at com.alibaba.dubbo.common.logger.support.FailsafeLogger.warn ( FailsafeLogger.java:101 ) at com.alibaba.dubbo.common.utils.NetUtils.getLocalAddress0 ( NetUtils.java:225 ) at com.alibaba.dubbo.common.utils.NetUtils.getLocalAddress ( NetUtils.java:180 ) at com.alibaba.dubbo.common.utils.NetUtils.getLogHost ( NetUtils.java:186 ) at com.alibaba.dubbo.common.logger.support.FailsafeLogger.appendContextMessage ( FailsafeLogger.java:40 ) at com.alibaba.dubbo.common.logger.support.FailsafeLogger.warn ( FailsafeLogger.java:101 ) at com.alibaba.dubbo.common.utils.NetUtils.getLocalAddress0 ( NetUtils.java:198 ) at com.alibaba.dubbo.common.utils.NetUtils.getLocalAddress ( NetUtils.java:180 ) at com.alibaba.dubbo.common.utils.NetUtils.getLogHost ( NetUtils.java:186 ) at com.alibaba.dubbo.common.logger.support.FailsafeLogger.appendContextMessage ( FailsafeLogger.java:40 ) at com.alibaba.dubbo.common.logger.support.FailsafeLogger.warn ( FailsafeLogger.java:101 ) at com.alibaba.dubbo.common.utils.NetUtils.getLocalAddress0 ( NetUtils.java:198 ) at com.alibaba.dubbo.common.utils.NetUtils.getLocalAddress ( NetUtils.java:180 ) at com.alibaba.dubbo.common.utils.NetUtils.getLogHost
Adding maven wrapper to Dubbo project __EoT__ Maven wrapper can help us to use same maven version to avoid some unexpected problems and helps the user who did n't install maven in their own machine to easily use maven . Fix exist issue : # 553
optimize_zk_create __EoT__ # # What is the purpose of the change optimize zk create method . if we create path /dubbo/XxxService/providers/dubbo ... . we should check it 's parent path exist or not first . but when we create path /dubbo/XxxService/providers we should check the path exist or not first . doSubscribe method invoke this every time . Can reduce the number , access to zk . # # Brief changelog AbstractZookeeperClient create . # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a
[ Dubbo-1699 ] add test for serialization api & fastjson & fst module __EoT__ # # What is the purpose of the change close # 1699 # # Brief changelog modify existing unit test delete unused files improve fastjson input logic to ignore unexpected exception # # Verifying this change ci pass https : //travis-ci.org/diamondblack/incubator-dubbo/builds/372326634 Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x
enhance comments , javadoc and logging message for ExecutionChannelHandler __EoT__ # # What is the purpose of the change a follow up for pull request https : //github.com/apache/incubator-dubbo/pull/1449 # # Brief changelog enhance comments , javadoc and logging message for ExecutionChannelHandler # # Verifying this change Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/apache/incubator-dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ x ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist # XXX ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ x ] Write necessary unit-test to verify your logic correction
add missing @ Override to classes __EoT__ # # What is the purpose of the change add missing @ Override to classes # # Brief changelog XX # # Verifying this change XXXX Follow this checklist to help us incorporate your contribution quickly and easily : - [ x ] Make sure there is a [ GITHUB_issue ] ( https : //github.com/alibaba/dubbo/issues ) filed for the change ( usually before you start working on it ) . Trivial changes like typos do not require a GITHUB issue . Your pull request should address just this issue , without pulling in other changes - one PR resolves one issue . - [ ] Format the pull request title like ` [ Dubbo-XXX ] Fix UnknownException when host config not exist ` . Each commit in the pull request should have a meaningful subject line and body . - [ x ] Write a pull request description that is detailed enough to understand what the pull request does , how , and why . - [ ] Write necessary unit-test to verify your logic correction , more mock a little better when cross module dependency exist . If the new feature or
Update readme after code transition . __EoT__ * use Apache Dubbo ( incubating ) * update official site to dubbo.incubator.apache.org
typo in ReferenceConfig __EoT__ # # # ReferenceConfig # init , at line 307 change : prifix - > prefix < img width= '' 746 '' alt= '' 1 '' src= '' https : //user-images.githubusercontent.com/6971152/35309902-a22d3ed2-00e9-11e8-9928-e394b9e3d632.png '' > # # # by the way , ReferenceConfig # setInterface , at line 476 it 's no need to cast null to String < img width= '' 903 '' alt= '' 2 '' src= '' https : //user-images.githubusercontent.com/6971152/35309908-b09e4a92-00e9-11e8-9725-8e6ff8071370.png '' >
Black list exception is replaced with no provider exception __EoT__ I know dubbo has replace the exception message 'black list ... ' with 'no provider ... ' since some version，but when i set route for consumer to add it into some blacklist , the exception message throwed by the consumer client is not 'black list ... ' but 'no provider ... ' . Although it is not a big deal , but i still wonder is there any possiablity to make the message more reasonable？
Change the default zookeeper client from ` zkclient ` to ` curator ` . __EoT__
KAFKA-7604 ; Fix flaky unit test ` testRebalanceAfterTopicUnavailableWithPatternSubscribe ` __EoT__ The problem is the concurrent metadata updates in the foreground and in the heartbeat thread . I changed the code to use ` ConsumerNetworkClient.poll ` , which enforces mutual exclusion when accessing the underlying client . I was seeing a failure rate of about 1/250 before this fix and I was not able to reproduce it with the fix . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Modify Connect service 's startup timeout to be passed via the init __EoT__ Currently , the startup timeout is hardcoded to be 60 seconds in Connect 's test service . Modifying it to be passable via init . This can safely be backported as well . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7519 Clear pending transaction state when expiration fails __EoT__ # # # # Description : *Make sure that the transaction state is properly cleared when the ` transactionalId-expiration ` task fails . Operations on that transactional id would otherwise return a ` CONCURRENT_TRANSACTIONS ` error and appear `` untouchable '' to transaction state changes , preventing transactional producers from operating until a broker restart or transaction coordinator change . * # # # # Testing : *Unit tested by verifying that having the ` transactionalId-expration ` task wo n't leave the transaction metadata in a pending state if the replica manager returns an error . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7501 : fix producer batch double deallocation when receiving message too large error on expired batch __EoT__ Kafka will try to deallocate a batch twice and throw IllegalStateException when a `` MESSAGE_TOO_LARGE '' response arrived after the inflight batch is expired . This patch fixes the issue . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update reverse lookup test to work when ipv6 not enabled __EoT__ ipv6 address is not returned by InetAddress.getAllByName if ipv6 not enabled ( e.g . in a docker container ) . Update test to work with this environment . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7223 : Add late-record metrics __EoT__ Add late record metrics , as specified in KIP-328 # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Adjust test params pursuant to KAFKA-4514 . __EoT__ https : //github.com/apache/kafka/pull/2267 Introduced support for Zstandard compression . The relevant test expects values for ` num_nodes ` and ` num_producers ` based on the ( now-incremented ) count of compression types . Passed the affected , previously-failing test : ` ducker-ak test tests/kafkatest/tests/client/compression_test.py `
KAFKA-4932 : Update docs for KIP-206 __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7477 : Improve Streams close timeout semantics __EoT__ Second part of [ KIP-358 ] ( https : //cwiki.apache.org/confluence/display/KAFKA/KIP-358 % 3A+Migrate+Streams+API+to+Duration+instead+of+long+ms+times ) . This changes based on [ previous PR discussion ] ( https : //github.com/apache/kafka/pull/5682 # discussion_r221473451 ) . Default ` close ` timeout is ` 30 seconds ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7366 : Make topic configs segment.bytes and segment.ms to take effect immediately __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6123 : Give client MetricsReporter auto-generated client.id __EoT__ The client 's ` MetricsReporter ` class currently receives the ` client.id ` field only if the user has configured it . The auto-generated ` client.id ` is not passed to the ` MetricsReporter ` . - Give auto generated ` client.id ` as a config override to ` MetricsReporter ` ( same way [ KAFKA-4756 ] ( https : //issues.apache.org/jira/browse/KAFKA-4756 ) handles it ) # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7400 : Compacted topic segments that precede the log start offse… __EoT__ …t are not cleaned up Currently we do n't delete any log segments if the cleanup policy does n't include delete . This patch changes the behavior to delete log segments that fully precede the log start offset even when deletion is not enabled . Regardless of whether delete is enabled , LogCleaner checks compact topics and LogManager checks non-compact topics . Tested with unit tests to verify that LogCleaner.cleanupOrSleep now cleans logs with cleanup.policy=compact and LogManager.cleanupLogs does n't , and that Log.deleteOldSegments deletes segments that precede the start offset regardless of the cleanup policy . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : rename InternalProcessorContext.initialized __EoT__ We named this method ` initialized ` because it marks the context as having been initialized . The downside is that it sounds more like a getter upon casual reading , which is weird since it 's ` void ` . Note also that the inverse method is already called ` uninitialize ` . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove ignored tests that hang , added new versions for EOS tests __EoT__ The ` streams_broker_compatibility_test : :test_timeout_on_pre_010_brokers ` test is ignored . The test uses broker version ` 0.9 latest ` and ` 0.8 latest ` . At one point Streams would throw a ` BrokerNotFoundException ` , but that exception is no longer thrown so this will hang forever , thus should just be removed . Also added new versions to ` test_compatible_brokers_eos_disabled ` for consistency . For testing ran branch builder https : //jenkins.confluent.io/job/system-test-kafka-branch-builder/1964/ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : cleanup some state store code __EoT__ While prototyping KIP-258 , I did some cleanup . Wanted to extract it into a separate PR .
MINOR : Increase timeout in log4j system test to avoid transient failures __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7386 : streams-scala should not cache serdes __EoT__ Currently , ` scala.Serdes.String ` , for example , invokes Serdes.String ( ) once and caches the result . However , the implementation of the String serde has a non-empty configure method that is variant in whether it 's used as a key or value serde . So we wo n't get correct execution if we create one serde and use it for both keys and values . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6859 : Do not send LeaderEpochRequest for undefined leader epochs __EoT__ If a broker or topic has a message format < 0.11 , he does not track leader epochs . LeaderEpochRequests for such will always return undefined , making the follower truncate to the highest watermark . Since there is no use to use the network for such cases , do n't send a request . # # # Notes * I am not sure whether we should even check ` brokerConfig.interBrokerProtocolVersion > = KAFKA_0_11_0_IV2 ` , since log message format is the only thing we care about and as far as I understand it is always defined * I am not fond of the subclassing in the tests for mocking the method ( and also making it protected ) but this was the cleanest solution I could come up with . Other ideas are welcome The ticket also mentions > Another example is a bootstrapping follower that does not have any leader epochs recorded , but that is handled here : https : //github.com/apache/kafka/blob/57320981bb98086a0b9f836a29df248b1c0378c3/core/src/main/scala/kafka/server/AbstractFetcherThread.scala # L127 as far as I can tell # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and
MINOR : Fix streams Scala peek recursive call __EoT__ This PR fixes the previously recursive call of Streams Scala peek # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7301 : Fix streams Scala join ambiguous overload __EoT__ ` join ` in the Scala streams API is currently unusable in ` 2.0.0 ` as reported by @ mowczare : https : //github.com/apache/kafka/pull/5019 # issuecomment-412632207 This due to an overload of it with the same signature in the first curried parameter . See compiler issue that did n't catch it : https : //issues.scala-lang.org/browse/SI-2628 I do n't see many options here : - Keeping only one ` join ` with the ` Materialized ` as implicit like we did with ` aggregate ` ... ( this PR currently implements ) - Renaming the materialized ` join ` to something like ` joinMat ` . - Uncurrying one of the 2 or both ` join ` and loosing the type inference . I will add all the needed tests once we agree on an option . The current workarounds are : - Monkey patching KTable.scala in your code with the implementation in this PR . - Rolling back to https : //github.com/lightbend/kafka-streams-scala @ debasishg @ ijuma @ guozhangwang @ mowczare Thanks
KAFKA-7308 : Fix rat and checkstyle config for Java 11 support __EoT__ Relative paths in Gradle break when the Gradle daemon is used unless ` user.dir ` can be changed while the process is running . Java 11 disallows this , so we use project paths instead . Verified that ` rat ` and ` checkstyle ` work with Java 11 after these changes . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
[ MINOR ] KAFKA-7207 : Make -rate & -total metrics documentation consistent __EoT__ https : //issues.apache.org/jira/browse/KAFKA-7207 Some sections of the ` Monitoring ` metrics documentation list out the ` -total ` metrics , and some sections do not list them out . We should make them consistent and list out the missing ` -total ` metrics . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : increase timeout values in streams tests __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3514 : Part II , Choose tasks with data on all partitions to process __EoT__ 1 . In each iteration , decide if a task is processable if all of its partitions contains data , so it can decide which record to process next . 1.a Add one exception that , if the task indeed have data on some but not all of its partitions , we only consider as not processable for some finite round of iterations . 1.b Add a task-level metric to record whenever we are forced to process a task that is only `` partially data available '' , since it may leads to non-determinism . 2 . Break the main loop on put-raw-data and process-them . Since now not all data put into the queue would be processed completely within a single iteration . NOTE that within an iteration , if a task has exhausted one of its queue it will still be processed , since we only update ` processable ` list once in each iteration , I 'm improving on this on the follow-up part III PR . 3 . Found and fixed a bug in metrics recording : the taskName and sensorName
MINOR : Producers should set delivery timeout instead of retries __EoT__ MirrorMaker should set ` delivery.timeout.ms ` instead of ` retries ` now that we have KIP-91 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix transient test failure in SslTransportLayerTest __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update build.gradle and release.py to upload streams-scala_2.12 __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Make the constructor of InMemoryKeyValueLoggedStore public __EoT__ Make the constructor of InMemoryKeyValueLoggedStore public so that it can be re-used by custom ( in-memory ) stores *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : Include quota related public interfaces to javadocs __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7076 : Prevent reading through log data for constructing producer state when using old message format __EoT__ This patch removes the need to build up producer state when the log is using V0 / V1 message format where we did not have idempotent and transactional producers yet . Also fixes a small issue where we incorrectly reported the offset index corrupt if the last offset in the index is equal to the base offset of the segment .
Minor : add exception to debug log for Sender # maybeSendTransactionalRequest __EoT__ When looking at code related to RequestHandler ( for KAFKA-7088 ) , I found that the exception was not included in DEBUG log for Sender # maybeSendTransactionalRequest This PR includes the exception in DEBUG log . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update examples / tutorials / docs with Java 8 syntax __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7066 added better logging in case of Serialisation issue __EoT__ Following the error message of : https : //github.com/apache/kafka/blob/trunk/streams/src/main/java/org/apache/kafka/streams/processor/internals/SinkNode.java # L93 Would be good if included in 2.0
KAFKA-7055 : Update InternalTopologyBuilder to throw TopologyException if a processor or sink is added with no upstream node attached __EoT__ ` InternalTopologyBuilder ` throws an exception if a sink or a processor is added without at least one upstream node , as records can not be forwarded downstream to an unconnected node . This does not prevent users from attempting to forward to unconnected nodes , but it does prevent them from attaching effectively useless downstream nodes , and the error message for forwarding to an unconnected node has been updated to be slightly more specific . ` connectProcessors ` has also been removed from ` InternalTopologyBuilder ` , as it is only used in ` KStreamImpl ` for a stream-table join and in fact connecting the stream source/processor to the join processor with appropriate ` valueGetter ` ( to retrieve values from the KTable ) is sufficient to obtain values for both sides .
MINOR : use new API timeout config in test __EoT__ The old timeout configs no longer take effect , as of 53ca52f855e903907378188d29224b3f9cefa6cb . They are replaced by the new one . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6562 : ( follow-up ) Publish `` jackson-databind '' lib as provided scope dependency in clients maven artifact __EoT__ 1. jackson-databind library is mapped as a provided library by using maven plugin configuration-to-scope mapping feature . https : //docs.gradle.org/current/javadoc/org/gradle/api/artifacts/maven/Conf2ScopeMappingContainer.html 2 . Clients using default implementation of SASL/OAUTHBEARER mechanism must provide jackson-databind library to Kafka client runtime . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-7011 - Remove ResourceNameType field from Java Resource class . __EoT__ Fix for [ KAFKA-7011 ] ( https : //issues.apache.org/jira/browse/KAFKA-7011 ) . The initial PR for KIP-290 # 5117 added a ` ResourceNameType ` field to the Java and Scala ` Resource ` classes to introduce the concept of Prefixed ACLS . This does not make a lot of sense as these classes are meant to represent cluster resources , which would not have a concept of 'name type ' . This work has not been released yet , so we have time to change it . This PR looks to refactor the code to remove the name type field from the Java ` Resource ` class . ( The Scala one will age out once KIP-290 is done , and removing it would involve changes to the ` Authorizer ` interface , so this class was not touched ) . This is achieved by replacing the use of ` Resource ` with ` ResourcePattern ` and ` ResourceFilter ` with ` ResourceFilterPattern ` . A ` ResourcePattern ` is a combination of resource type , name and name type , where each field needs to be defined . A
KAFKA-6919 : Fix for the location of the trogdor.sh executable file in the documentation __EoT__ While trying to use trogdor , I ran into this .
MINOR : Rename package ` internal ` to ` internals ` for consistency __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3665 : Enable TLS hostname verification by default ( KIP-294 ) __EoT__ Make HTTPS the default ssl.endpoint.identification.algorithm # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6760 : Responses not logged properly in controller __EoT__ Added toString ( ) to LeaderAndIsrResponse and StopReplicaResponse *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6054 : Add 'version probing ' to Kafka Streams rebalance __EoT__
Update doc of curried joins and aggregates __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove findbugs exclusion matching removed old producer __EoT__ KAFKA-6921 removed deprecated scala producer . This pull request aims to remove now unnecessary findbugs exclusion that matched one of the affected classes . Tested by running ` gradle : core : findbugsMain ` . No problems reported . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6911 : Fix dynamic keystore/truststore update check __EoT__ Fix the check , add unit test to verify the change , update DynamicBrokerReconfigurationTest to avoid dynamic keystore update in tests which are not expected to update keystores . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6474 : Rewrite tests to use new public TopologyTestDriver [ part 3 ] __EoT__ This PR is a further step towards the complete replacement of ` KStreamTestDriver ` with ` TopologyTestDriver ` . These straightforward changes were split from another [ PR ] ( https : //github.com/apache/kafka/pull/4986 ) to simplify the review process . * Refactor : - KStreamWindowReduceTest - KTableMapKeysTest - SessionWindowedKStreamImplTest - TimeWindowedKStreamImplTest
MINOR : Remove unused class __EoT__ KTableKTableLeftJoinValueGetter.java has been moved into ` KTableKTableLeftJoin ` and the class itself can be removed . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6813 : Remove deprecated APIs in KIP-182 , Part III __EoT__ 1 . Remove TopologyBuilder , TopologyBuilderException , KStreamBuilder , 2 . Completed the leftover work of https : //issues.apache.org/jira/browse/KAFKA-5660 , when we remove TopologyBuilderException . 3 . Added MockStoreBuilder to replace MockStateStoreSupplier , remove all XXStoreSupplier except StateStoreSupplier as it is still referenced in the logical streams graph . 4 . Minor : rename KStreamsFineGrainedAutoResetIntegrationTest.java to FineGrainedAutoResetIntegrationTest.java . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6361 : Fix log divergence between leader and follower after fast leader fail over __EoT__ Implementation of KIP-279 as described here : https : //cwiki.apache.org/confluence/display/KAFKA/KIP-279 % 3A+Fix+log+divergence+between+leader+and+follower+after+fast+leader+fail+over In summary : - Added leader_epoch to OFFSET_FOR_LEADER_EPOCH_RESPONSE - Leader replies with the pair ( largest epoch less than or equal to the requested epoch , the end offset of this epoch ) - If Follower does not know about the leader epoch that leader replies with , it truncates to the end offset of largest leader epoch less than leader epoch that leader replied with , and sends another OffsetForLeaderEpoch request . That request contains the largest leader epoch less than leader epoch that leader replied with . Added integration test EpochDrivenReplicationProtocolAcceptanceTest.logsShouldNotDivergeOnUncleanLeaderElections that does 3 fast leader changes where unclean leader election is enabled and min isr is 1 . The test failed before the fix was implemented . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Remove deprecated KTable # writeAs , print , foreach , to , through __EoT__ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Upgrade ZooKeeper to 3.4.12 and Scala to 2.12.6 __EoT__ ZK 3.4.12 fixes the regression that forced us to go back to 3.4.10 . Release notes : https : //issues.apache.org/jira/secure/ReleaseNote.jspa ? projectId=12310801 & version=12342040 Scala 2.12.6 fixes the issue that prevented us from upgrading to 2.12.5 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Ensure exception messages include partition/segment info when possible __EoT__ When we hit an exceptional case with an operation on a specific partition , it is always useful to know which partition the failed operation was being applied to . I did a quick pass through ` Log ` and several related components and attempted to improve the messages to ensure they include appropriate context . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : update VerifiableProducer to send keys if configured and removed StreamsRepeatingKeyProducerService __EoT__ This PR does the following : - Remove the ` StreamsRepeatingIntegerKeyProducerService ` and the associated Java class - Add a parameter to ` VerifiableProducer.java ` to enable sending keys when specified - Update the corresponding Python file ` verifiable_producer.py ` to support the new parameter . Tested by kicking off all system tests https : //jenkins.confluent.io/job/system-test-kafka-branch-builder/1677/ # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6474 : Rewrite tests to use new public TopologyTestDriver [ partial ] __EoT__ * Remove ProcessorTopologyTestDriver from TopologyTest * Fix ProcessorTopologyTest * Remove ProcessorTopologyTestDriver and InternalTopologyAccessor * Partially refactored StreamsBuilderTest but missing one test * Refactor KStreamBuilderTest * Refactor AbstractStreamTest * Further cleanup of AbstractStreamTest * Refactor GlobalKTableJoinsTest * Refactor InternalStreamsBuilderTest * Fix circular dependency in build.gradle * Refactor KGroupedStreamImplTest * Partial modifications to KGroupedTableImplTest * Refactor KGroupedTableImplTest * Refactor KStreamBranchTest * Refactor KStreamFilterTest * Refactor KStreamFlatMapTest KStreamFlatMapValuesTest * Refactor KStreamForeachTest * Refactor KStreamGlobalKTableJoinTest * Refactor KStreamGlobalKTableLeftJoinTest * Refactor KStreamImplTest * Refactor KStreamImplTest * Refactor KStreamKStreamJoinTest * Refactor KStreamKStreamLeftJoinTest * Refactor KStreamKTableJoinTest * Refactor KStreamKTableLeftJoinTest * Refactor KStreamMapTest and KStreamMapValuesTest * Refactor KStreamPeekTest and KStreamTransformTest * Refactor KStreamSelectKeyTest * Refactor KStreamTransformValuesTest * Refactor KStreamWindowAggregateTest * Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest * Refactor KTableFilterTest * Refactor KTableForeachTest * Add getter for ProcessorTopology , and simplify tests in StreamsBuilderTest * Refactor KTableImplTest * Remove unused imports * Refactor KTableAggregateTest * Fix style errors * Fix gradle build * Address reviewer comments : - Remove properties new instance - Remove extraneous line - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest - Move props.clear ( ) to
MINOR : refactor AdminClient ListConsumerGroups API __EoT__ The current Iterator-based ListConsumerGroups API is synchronous . The API should be asynchronous to fit in with the other AdminClient APIs . Also fix some error handling corner cases .
KAFKA-6677 : Fixed streamconfig producer 's maxinflight allowed when EOS Enabled . __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6677 Modified ` StreamsConfig ` Producer 's default MaxInFlight Request allowed per connection . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-3365 Add a documentation field for types and update doc generation __EoT__ Add documentation method to class Type . Implement it in primitive types and ArraysOf . Generate docs from list of types and include it in protocol.html
HOTFIX : use the new prop object in SimpleBenchmark __EoT__ Otherwise we would get NPE as the new prop does not have the bootstrap server values . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6747 Check whether there is in-flight transaction before aborting transaction __EoT__ As Frederic reported on mailing list under the subject `` kafka-streams Invalid transition attempted from state READY to state ABORTING_TRANSACTION '' , producer # abortTransaction should only be called when transactionInFlight is true . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6560 : Use single query for getters as well __EoT__ As titled , use single query for getters as a follow-up of KAFKA-6560 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6739 : Ignore the presence of headers when down-converting from V2 to V1/V0 __EoT__ Because V1/V0 message formats do not expect a header , ignore their presence when down-converting V2 messages that contain headers . Added a test-case to verify down-conversion sanity in presence of headers . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6446 : KafkaProducer should use timed version of ` await ` to avoid endless waiting __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6446 Replaced await ( ) with timed version to avoid endless waiting and refined the code to have Sender thread able to exit from infinitely connecting the ` bad ` broker . *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix encoder config to make DynamicBrokerReconfigurationTest stable __EoT__ DynamicBrokerReconfigurationTest currently assumes that passwords encoded with one secret will fail with an exception if decoded with another secret and configures an old.secret in ` setUp ` . This could potentially cause test failures if a password was incorrectly decoded with the wrong secret , since the test writes passwords encoded with the new secret directly to ZooKeeper . Since old.secret is only used in one test for verifying secret rotation , this config can be moved to that test to avoid transient failures . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Some logging improvements for debugging replication __EoT__ A few small logging improvements which help debugging replication issues . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR KAFKA-3978 followup __EoT__ We should use logStartOffset as HW offset if the current HW offset is out of range . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : fixing streams test-util compilation errors in Eclipse __EoT__ Eclipse ( 4.7.2 using jdk 1.8.0_151 ) was complaining about 3 compilation errors in streams/test-utils/src/test/java/org/apache/kafka/streams/test/ConsumerRecordFactoryTest.java all three were about generics Long/Integer mismatch The method create ( Integer ) in the type ConsumerRecordFactory < String , Integer > is not applicable for the arguments ( List < KeyValue < String , Long > > ) ConsumerRecordFactoryTest.java line 181 /test-utils/src/test/java/org/apache/kafka/streams/test Java Problem The method create ( Integer ) in the type ConsumerRecordFactory < String , Integer > is not applicable for the arguments ( List < KeyValue < String , Long > > ) ConsumerRecordFactoryTest.java line 210 /test-utils/src/test/java/org/apache/kafka/streams/test Java Problem The method create ( List < KeyValue < String , Integer > > , long , long ) in the type ConsumerRecordFactory < String , Integer > is not applicable for the arguments ( List < KeyValue < String , Long > > , long , long ) ConsumerRecordFactoryTest.java line 239 /test-utils/src/test/java/org/apache/kafka/streams/test Java Problem *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including
MINOR : Remove kafka-consumer-offset-checker.bat as follow up to patch KAFKA-… __EoT__ …3356 *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix deadlock in ZooKeeperClient.close ( ) on session expiry __EoT__ Shutdown session expiry scheduler without holding lock to avoid deadlock if scheduler thread needs to acquire write lock to process session expiry . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Add System test for standby task-rebalancing __EoT__ System test for standby replicas and rebalancing occurs within a reasonable period ( 20 seconds ) the timeout period for verification was increased due to the nature of nature of checking the rebalance . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6606 ; Ensure consumer awaits auto-commit interval after sending… __EoT__ We need to reset the auto-commit deadline after sending the offset commit request so that we do not resend it while the request is still inflight . Added unit tests ensuring this behavior and proper backoff in the case of a failure . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Fix javadoc for consumer offsets lookup APIs which do not block indefinitely __EoT__ The blocking time for these APIs is bounded by the request timeout . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR follow-up for KAFKA-6568 __EoT__ @ ijuma This is the minor follow-up patch for # 4580 to address your comments . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : Free sends in MultiSend as they complete __EoT__ Currently we hold onto all Records references in a multi-partition fetch response until the full response has completed . This can be a problem when the records have been down-converted since they will be occupying a potentially large chunk of memory . This patch changes the behavior in MultiSend so that once a Send is completed , we no longer keep a reference to it , which will allow the Records objects to be freed sooner . I have added a simple unit test to verify that sends are removed as the MultiSend progresses . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update test classes to use KafkaZkClient methods __EoT__ * Remove ZkUtils reference form ZooKeeperTestHarness * minor cleanups # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : Update log condition in JassContext.loadServerContext method __EoT__
MINOR : fix inconsistance __EoT__
[ MINOR ] Improve runtime / storage / metrics / config parts __EoT__ *More detailed description of your change , if necessary . The PR title and PR message become the squashed commit message , so use a separate comment to ping reviewers . * *Summary of testing strategy ( including rationale ) for the feature or bug fix . Unit and/or integration tests are expected for any behaviour change and system tests should be considered for larger changes . * # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify documentation ( including upgrade notes ) - [ x ] Verify test coverage and CI build status
KAFKA-6515 Adding toString ( ) method to o.a.k.connect.data.Field __EoT__ https : //issues.apache.org/jira/browse/KAFKA-6515 # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
KAFKA-6354 Update KStream JavaDoc using new State Store API __EoT__ As a newbie to Kafka , I make this docs update PR and in the meanwhile to get familiar with kafka and apis : )
KAFKA-6242 : Dynamic resize of various broker thread pools __EoT__ Dynamic resize of broker thread pools as described in KIP-226 : - num.network.threads - num.io.threads - num.replica.fetchers - num.recovery.threads.per.data.dir - background.threads # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6245 : Dynamic update of topic config defaults __EoT__ Dynamic update of default topic configs as described in KIP-226 . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
MINOR : JavaDoc improvements for RangeAssignor __EoT__
KAFKA-6287 : Consumer group command should list simple consumer groups __EoT__ With this patch , simple consumer groups which only use Kafka for offset storage will be viewable using the ` -- list ` option . In addition , this patch fixes a bug in the offset loading logic which caused us to lose the protocol type of empty groups on coordinator failover . I also did some cleanup of the various consumer group command test cases . For testing , I have added new integration tests which cover listing and describing simple consumer groups . I also added unit tests to cover loading empty groups with assertions on the protocol type . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
Fix typo : `` actually recovery '' > `` actually recover '' __EoT__ Fix typo : `` actually recovery '' > `` actually recover ''
MINOR : Improve on reset integration test __EoT__ 1 . Refactor AbstractResetIntegrationTest with producer / consumer / streams config , along with common client config embedded with ssl configs if necessary . 2 . Use specific test id to replace the testNo suffix . 3 . In testReprocessingFromScratchAfterResetWithIntermediateUserTopic , additional check on intermediate result . 4 . Add the same result for SSL test suite as well . # # # Committer Checklist ( excluded from commit message ) - [ ] Verify design and implementation - [ ] Verify test coverage and CI build status - [ ] Verify documentation ( including upgrade notes )
KAFKA-6250 : Use existing Kafka Connect internal topics without requiring ACL __EoT__ When using Kafka Connect with a cluster that does n't allow the user to create topics ( due to ACL configuration ) , Connect fails when trying to create its internal topics , even if these topics already exist . This is incorrect behavior according to the documentation , which mentions that R/W access should be enough . This happens specifically when using Aiven Kafka , which does not permit creation of topics via the Kafka Admin Client API . The patch ignores the returned error , similar to the behavior for older brokers that do n't support the API . # # # Committer Checklist ( excluded from commit message ) - [ x ] Verify design and implementation - [ x ] Verify test coverage and CI build status - [ x ] Verify documentation ( including upgrade notes )
MINOR : Add documentation for KAFKA-6086 ( ProductionExceptionHandler ) __EoT__ Attempt number 2 at adding documentation related to KAFKA-6086 , the ` ProductionExceptionHandler ` . Tagging @ guozhangwang and @ mjsax for review !
MINOR : disable flaky Streams EOS system tests __EoT__
MINOR : Update test classes to use KafkaZkClient/AdminZkClient methods __EoT__
* [ android ] Update devtool version __EoT__
* [ Android ] Fix text layout problem __EoT__ https : //alibaba.github.io/rax/jsplayground/e58e828f-83b4-4607-812e-4f6afe31bdd4
* [ android ] Support keyboardSize __EoT__
* [ android ] Support attr controls __EoT__
[ iOS ] fix rax object leak . __EoT__ First of all , thank you for your contribution ! Please makes sure that these checkboxes are checked before submitting your PR , thank you ! < ! -- How to use github markdown ? # # # checkable example - [ x ] checked - [ ] not checked More github Markdown info to see https : //guides.github.com/features/mastering-markdown/ -- > CheckList : **if** *isBugFix* ** : ** * [ ] Make sure that you add at least one unit test for the bug which you had fixed . **elif** *isNewFeature* ** : ** * [ ] Update API docs for the component . * [ ] Update/Add demo to demonstrate new feature . * [ ] Update test scripts for the feature . * [ ] Add unit tests for the feature . < ! -- （请在***提交***前删除这段描述） Notes : Weex will move into Apache Software Foundation ( ASF ) on Feb 24 2017 . Our new GitHub repo is https : //github.com/apache/incubator-weex After Feb 24 2017 , we only accept pull requests from https : //github.com/apache/incubator-weex Thank you for your support . -- -- 注意：Weex 将于 2017-02-24 迁移至 Apache 基金会
[ jsfm ] Enhance the destroy logic of document and element __EoT__ Notable changes : + Recursively destroy all nodes within the ` nodeMap ` while destroying a ducument . + Manually remove all props in ` node.destroy ( ) ` , even if it may not exist . + Tweak code style and eslint .
degrade to h5 If create instance error __EoT__ https : //issues.apache.org/jira/browse/WEEX-640 degrade to h5 If create instance error
[ core ] [ Android ] fix thread block when nested sync method to JSS in JS… __EoT__
[ WEEX-629 ] [ iOS ] fix report firstScreenRenderTime failed __EoT__ - when set firstScreenRenderTime , reporter has stop record data .
* [ android ] Fix devtool crash & support resetBridge __EoT__
Update To OkHttp 3.1.2 __EoT__ Update Retrofit to use OkHttp 3.1.2 to address a [ Certificate Pinning Vulnerability that was discovered ] ( https : //publicobject.com/2016/02/11/okhttp-certificate-pinning-vulnerability/ ) .
Detect fragment view leaks __EoT__ Extension of the fragment memory leak detection to also keep an eye on fragment 's view after ` onDestroyView ( ) ` . This is important for cases when a fragment is replaced and added to the backstack - it does not possess a view but is also not destroyed . If a fragment 's view includes any memory-heavy resources , like ` Bitmap ` s , a memory leak may become rather severe after a couple of such fragments are added to the backstack . In such cases , it 's important to allow GC to do its job and release memory from all `` destroyed '' views so that new fragments can be displayed . This PR automates the setup of a fragment 's view leak detection .
Fix okHttp for RoboVM ( and other Android-based runtimes ) __EoT__ Fixes # 4266 .
Make separate IPv4 and IPv6 requests for DNS over HTTPS __EoT__ while technically inside the spec , in practice multiple DNS questions must be asked in different messages . So make two calls instead of one .
Remove TLSv1.3 as default __EoT__ We specify TLSv1.3 , but without any compatible cipher suites . So makes sense to remove for 3.11 to avoid weirdness as JVMs supporting TLSv1.3 start showing up . n.b . JDK 11 detects this and strips anyway .
Ensure discarded HTTP/2 data frames free flow-control space . __EoT__ https : //github.com/square/okhttp/issues/3915
Update index.html __EoT__
Rename H2C to H2_PRIOR_KNOWLEDGE . __EoT__ The string h2c is used with cleartext upgrades . We 're not doing those here , so that identifier is n't appropriate .
Move and test toHumanReadableAscii . __EoT__
Cleanup travis output __EoT__ Maven warnings and redirect output
Small web socket optimizations . __EoT__
Make RetryAndFollowUpInterceptor.streamAllocation volatile . __EoT__ It was possible for a call to cancel ( ) to not cancel because the canceling thread would n't observe the streams . I 've added a local StreamAllocation variable to avoid extra volatile reads . Closes : https : //github.com/square/okhttp/issues/3834
Allow request bodies for all HTTP methods except GET and HEAD __EoT__ Fixes # 229
QUIC constant __EoT__
Fix MockWebServer websockets to be thread safe . __EoT__ Closing the sink while another thread is writing the sink is a potential source for races . Closes : https : //github.com/square/okhttp/issues/3138
Failed , second connection and call.enqueue EventListener tests __EoT__
Fix IPv6 handling for cookies __EoT__ Closes : https : //github.com/square/okhttp/issues/3361
Update Proguard rules on README.md __EoT__ @ swankjesse Closes # 3371
Test Failure in MockWebServerTest __EoT__ Update ` MockWebServerTest # requestUrlReconstructed ` to address issue # 3546 .
EventListener payload bytes and header sizes in chars __EoT__ Request bytes and Header chars logged to EventListener API .
Correctly report response body stream failures with HTTP/2 . __EoT__
Use endOfInput ( ) to trigger the end of the response body . __EoT__ This removes the decorator and uses the existing superclass instead .
Added new method WriteTimeout ( ) on Interceptor.Chain __EoT__
OkHttpClient final does not allow mocks __EoT__ The OkHttpClient class in OkHttp 3.0 is marked as ` final ` , and therefore can not be extended nor mocked ( e.g . by using Mockito ) .
No `` Content-Length '' header if missing RequestBody.contentLength ( ) __EoT__ I had request using RequestBody object . I did not Override contentType ( ) method , but set `` Content-Length '' header manually with : Request request = new Request.Builder ( ) .url ( uploadUri ) .post ( requestBody ) .addHeader ( `` Content-Length '' , String.valueOf ( fileSize ) ) .build ( ) ; But my header was removed by OkHttp because of this code in Call class : `` ` Response getResponse ( Request request , boolean forWebSocket ) throws IOException { RequestBody body = request.body ( ) ; if ( body ! = null ) { Builder followUpCount = request.newBuilder ( ) ; MediaType response = body.contentType ( ) ; if ( response ! = null ) { followUpCount.header ( `` Content-Type '' , response.toString ( ) ) ; } long followUp = body.contentLength ( ) ; if ( followUp ! = -1L ) { followUpCount.header ( `` Content-Length '' , Long.toString ( followUp ) ) ; followUpCount.removeHeader ( `` Transfer-Encoding '' ) ; } else { followUpCount.header ( `` Transfer-Encoding '' , `` chunked '' ) ; followUpCount.removeHeader ( `` Content-Length '' ) ; }
Vary headers not working on Android __EoT__ This exception showed up during Android testing with ToT : 04-25 09:19:23.659 5471 5495 E AndroidRuntime : java.lang.NullPointerException : Attempt to invoke virtual method 'com.android.okhttp.Request com.android.okhttp.Response.request ( ) ' on a null object reference 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.android.okhttp.internal.http.OkHeaders.varyHeaders ( OkHeaders.java:180 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.android.okhttp.Cache $ Entry. < init > ( Cache.java:547 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.android.okhttp.Cache.put ( Cache.java:228 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.android.okhttp.Cache.-wrap0 ( Cache.java ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.android.okhttp.Cache $ 1.put ( Cache.java:142 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.android.okhttp.AndroidShimResponseCache.put ( AndroidShimResponseCache.java:71 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at android.net.http.HttpResponseCache.put ( HttpResponseCache.java:209 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.squareup.okhttp.internal.http.ResponseCacheAdapter.put ( ResponseCacheAdapter.java:109 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.squareup.okhttp.internal.http.HttpEngine.readResponse ( HttpEngine.java:633 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.squareup.okhttp.internal.http.HttpURLConnectionImpl.execute ( HttpURLConnectionImpl.java:381 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.squareup.okhttp.internal.http.HttpURLConnectionImpl.getResponse ( HttpURLConnectionImpl.java:328 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at com.squareup.okhttp.internal.http.HttpURLConnectionImpl.getHeaderFields ( HttpURLConnectionImpl.java:175 ) 04-25 09:19:23.659 5471 5495 E AndroidRuntime : at
ProtocolException : Expected ' : status ' header not present __EoT__ I got this attempting to reach https : //twitter.com .
OkHttp changes the global SSL context , breaks other HTTP clients __EoT__ We 're enabling SPDY for the shared SSL context , and other HTTP clients like HttpURLConnection do n't anticipate this , causing them to freak out and crash the app . @ skyisle 's original report ... Here is backtrace . DEBUG I backtrace : DEBUG I # 00 pc 00022430 /system/lib/libssl.so ( SSL_select_next_proto+25 ) DEBUG I # 01 pc 000222ef /system/lib/libjavacore.so DEBUG I # 02 pc 0002905f /system/lib/libssl.so ( ssl_parse_serverhello_tlsext+458 ) DEBUG I # 03 pc 00015957 /system/lib/libssl.so ( ssl3_get_server_hello+894 ) DEBUG I # 04 pc 00018193 /system/lib/libssl.so ( ssl3_connect+618 ) DEBUG I # 05 pc 000235d7 /system/lib/libssl.so ( SSL_connect+18 ) DEBUG I # 06 pc 0001126b /system/lib/libssl.so ( ssl23_connect+1970 ) DEBUG I # 07 pc 0002350f /system/lib/libssl.so ( SSL_do_handshake+66 ) DEBUG I # 08 pc 00024bc5 /system/lib/libjavacore.so DEBUG I # 09 pc 0001e490 /system/lib/libdvm.so ( dvmPlatformInvoke+112 ) DEBUG I # 10 pc 0004d2b1 /system/lib/libdvm.so ( dvmCallJNIMethod ( unsigned int const_ , JValue_ , Method const_ , Thread_ ) +396 ) DEBUG I # 11 pc 000278a0 /system/lib/libdvm.so DEBUG I # 12 pc 0002b77c /system/lib/libdvm.so ( dvmInterpret ( Thread_ , Method const_ , JValue_ ) +176 )
Target onBitmapFailed called with null Drawable when network goes down __EoT__ The error Drawable resource is set correctly and is usually not null in the callback . When the network goes down while loading a resource it is however null .
